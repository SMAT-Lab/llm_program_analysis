{
  "nodes": [
    {
      "id": "n0",
      "code": "import json\nimport os\nfrom enum import Enum\nfrom typing import Any, Dict, Generic, List, Set, Tuple, Type, TypeVar\n\nfrom pydantic import BaseModel, Field, PrivateAttr, ValidationInfo, field_validator\nfrom pydantic_settings import (\n    BaseSettings,\n    JsonConfigSettingsSource,\n    PydanticBaseSettingsSource,\n    SettingsConfigDict,\n)\n\nfrom backend.util.data import get_data_path\n\nT = TypeVar(\"T\", bound=BaseSettings)\n"
    },
    {
      "id": "n1",
      "code": "class AppEnvironment(str, Enum):\n    LOCAL = \"local\"\n    DEVELOPMENT = \"dev\"\n    PRODUCTION = \"prod\"\n"
    },
    {
      "id": "n2",
      "code": "class BehaveAs(str, Enum):\n    LOCAL = \"local\"\n    CLOUD = \"cloud\"\n"
    },
    {
      "id": "n3",
      "code": "class UpdateTrackingModel(BaseModel, Generic[T]):\n    _updated_fields: Set[str] = PrivateAttr(default_factory=set)\n"
    },
    {
      "id": "n4",
      "code": "    def __setattr__(self, name: str, value) -> None:\n        if name in self.model_fields:\n            self._updated_fields.add(name)\n        super().__setattr__(name, value)\n"
    },
    {
      "id": "n5",
      "code": "    def mark_updated(self, field_name: str) -> None:\n        if field_name in self.model_fields:\n            self._updated_fields.add(field_name)\n"
    },
    {
      "id": "n6",
      "code": "    def clear_updates(self) -> None:\n        self._updated_fields.clear()\n"
    },
    {
      "id": "n7",
      "code": "    def get_updates(self) -> Dict[str, Any]:\n        return {field: getattr(self, field) for field in self._updated_fields}\n"
    },
    {
      "id": "n8",
      "code": "    @property\n    def updated_fields(self):\n        return self._updated_fields\n"
    },
    {
      "id": "n9",
      "code": "class Config(UpdateTrackingModel[\"Config\"], BaseSettings):\n    \"\"\"Config for the server.\"\"\"\n\n\n    num_graph_workers: int = Field(\n        default=10,\n        ge=1,\n        le=1000,\n        description=\"Maximum number of workers to use for graph execution.\",\n    )\n\n    num_node_workers: int = Field(\n        default=5,\n        ge=1,\n        le=1000,\n        description=\"Maximum number of workers to use for node execution within a single graph.\",\n    )\n\n    pyro_host: str = Field(\n        default=\"localhost\",\n        description=\"The default hostname of the Pyro server.\",\n    )\n\n    pyro_client_comm_timeout: float = Field(\n        default=15,\n        description=\"The default timeout in seconds, for Pyro client connections.\",\n    )\n\n    pyro_client_comm_retry: int = Field(\n        default=3,\n        description=\"The default number of retries for Pyro client connections.\",\n    )\n\n    enable_auth: bool = Field(\n        default=True,\n        description=\"If authentication is enabled or not\",\n    )\n\n    enable_credit: str = Field(\n        default=\"false\",\n        description=\"If user credit system is enabled or not\",\n    )\n\n    num_user_credits_refill: int = Field(\n        default=1500,\n        description=\"Number of credits to refill for each user\",\n    )\n\n    # Add more configuration fields as needed\n\n\n    model_config = SettingsConfigDict(\n        env_file=\".env\",\n        extra=\"allow\",\n    )\n\n\n\n    websocket_server_host: str = Field(\n        default=\"0.0.0.0\",\n        description=\"The host for the websocket server to run on\",\n    )\n\n\n\n    websocket_server_port: int = Field(\n        default=8001,\n        description=\"The port for the websocket server to run on\",\n    )\n\n\n\n    execution_manager_port: int = Field(\n        default=8002,\n        description=\"The port for execution manager daemon to run on\",\n    )\n\n\n\n    execution_scheduler_port: int = Field(\n        default=8003,\n        description=\"The port for execution scheduler daemon to run on\",\n    )\n\n\n\n    agent_server_port: int = Field(\n        default=8004,\n        description=\"The port for agent server daemon to run on\",\n    )\n\n\n\n    database_api_port: int = Field(\n        default=8005,\n        description=\"The port for database server API to run on\",\n    )\n\n\n\n    agent_api_host: str = Field(\n        default=\"0.0.0.0\",\n        description=\"The host for agent server API to run on\",\n    )\n\n\n\n    agent_api_port: int = Field(\n        default=8006,\n        description=\"The port for agent server API to run on\",\n    )\n\n\n\n    platform_base_url: str = Field(\n        default=\"\",\n        description=\"Must be set so the application knows where it's hosted at. \"\n        \"This is necessary to make sure webhooks find their way.\",\n    )\n\n\n\n    frontend_base_url: str = Field(\n        default=\"\",\n        description=\"Can be used to explicitly set the base URL for the frontend. \"\n        \"This value is then used to generate redirect URLs for OAuth flows.\",\n    )\n\n\n\n    media_gcs_bucket_name: str = Field(\n        default=\"\",\n        description=\"The name of the Google Cloud Storage bucket for media files\",\n    )\n\n\n\n    @field_validator(\"platform_base_url\", \"frontend_base_url\")\n    @classmethod\n    def validate_platform_base_url(cls, v: str, info: ValidationInfo) -> str:\n        if not v:\n            return v\n        if not v.startswith((\"http://\", \"https://\")):\n            raise ValueError(\n                f\"{info.field_name} must be a full URL \"\n                \"including a http:// or https:// schema\"\n            )\n        if v.endswith(\"/\"):\n            return v.rstrip(\"/\")  # Remove trailing slash\n        return v\n\n\n\n    app_env: AppEnvironment = Field(\n        default=AppEnvironment.LOCAL,\n        description=\"The name of the app environment: local or dev or prod\",\n    )\n\n\n\n    behave_as: BehaveAs = Field(\n        default=BehaveAs.LOCAL,\n        description=\"What environment to behave as: local or cloud\",\n    )\n\n\n\n    execution_event_bus_name: str = Field(\n        default=\"execution_event\",\n        description=\"Name of the event bus\",\n    )\n\n\n\n    trust_endpoints_for_requests: List[str] = Field(\n        default_factory=list,\n        description=\"A whitelist of trusted internal endpoints for the backend to make requests to.\",\n    )\n\n\n\n    backend_cors_allow_origins: List[str] = Field(default_factory=list)\n\n\n    @field_validator(\"backend_cors_allow_origins\")\n    @classmethod\n    def validate_cors_allow_origins(cls, v: List[str]) -> List[str]:\n        out = []\n        port = None\n        has_localhost = False\n        has_127_0_0_1 = False\n        for url in v:\n            url = url.strip()\n            if url.startswith((\"http://\", \"https://\")):\n                if \"localhost\" in url:\n                    port = url.split(\":\")[2]\n                    has_localhost = True\n                if \"127.0.0.1\" in url:\n                    port = url.split(\":\")[2]\n                    has_127_0_0_1 = True\n                out.append(url)\n            else:\n                raise ValueError(f\"Invalid URL: {url}\")\n\n        if has_127_0_0_1 and not has_localhost:\n            out.append(f\"http://localhost:{port}\")\n        if has_localhost and not has_127_0_0_1:\n            out.append(f\"http://127.0.0.1:{port}\")\n\n        return out\n\n\n\n"
    },
    {
      "id": "n10",
      "code": "class Secrets(UpdateTrackingModel[\"Secrets\"], BaseSettings):\n    \"\"\"Secrets for the server.\"\"\"\n\n\n    supabase_url: str = Field(default=\"\", description=\"Supabase URL\")\n    supabase_service_role_key: str = Field(\n        default=\"\", description=\"Supabase service role key\"\n    )\n\n    encryption_key: str = Field(default=\"\", description=\"Encryption key\")\n\n    # OAuth server credentials for integrations\n    # --8<-- [start:OAuthServerCredentialsExample]\n\n    github_client_id: str = Field(default=\"\", description=\"GitHub OAuth client ID\")\n    github_client_secret: str = Field(\n        default=\"\", description=\"GitHub OAuth client secret\"\n    )\n\n    google_client_id: str = Field(default=\"\", description=\"Google OAuth client ID\")\n    google_client_secret: str = Field(\n        default=\"\", description=\"Google OAuth client secret\"\n    )\n\n    notion_client_id: str = Field(default=\"\", description=\"Notion OAuth client ID\")\n    notion_client_secret: str = Field(\n        default=\"\", description=\"Notion OAuth client secret\"\n    )\n\n    openai_api_key: str = Field(default=\"\", description=\"OpenAI API key\")\n    anthropic_api_key: str = Field(default=\"\", description=\"Anthropic API key\")\n    groq_api_key: str = Field(default=\"\", description=\"Groq API key\")\n    open_router_api_key: str = Field(default=\"\", description=\"Open Router API Key\")\n\n    reddit_client_id: str = Field(default=\"\", description=\"Reddit client ID\")\n    reddit_client_secret: str = Field(default=\"\", description=\"Reddit client secret\")\n    reddit_username: str = Field(default=\"\", description=\"Reddit username\")\n    reddit_password: str = Field(default=\"\", description=\"Reddit password\")\n\n    openweathermap_api_key: str = Field(\n        default=\"\", description=\"OpenWeatherMap API key\"\n    )\n\n    medium_api_key: str = Field(default=\"\", description=\"Medium API key\")\n    medium_author_id: str = Field(default=\"\", description=\"Medium author ID\")\n    did_api_key: str = Field(default=\"\", description=\"D-ID API Key\")\n    revid_api_key: str = Field(default=\"\", description=\"revid.ai API key\")\n    discord_bot_token: str = Field(default=\"\", description=\"Discord bot token\")\n\n    smtp_server: str = Field(default=\"\", description=\"SMTP server IP\")\n    smtp_port: str = Field(default=\"\", description=\"SMTP server port\")\n    smtp_username: str = Field(default=\"\", description=\"SMTP username\")\n    smtp_password: str = Field(default=\"\", description=\"SMTP password\")\n\n    sentry_dsn: str = Field(default=\"\", description=\"Sentry DSN\")\n\n    google_maps_api_key: str = Field(default=\"\", description=\"Google Maps API Key\")\n\n    replicate_api_key: str = Field(default=\"\", description=\"Replicate API Key\")\n    unreal_speech_api_key: str = Field(default=\"\", description=\"Unreal Speech API Key\")\n    ideogram_api_key: str = Field(default=\"\", description=\"Ideogram API Key\")\n    jina_api_key: str = Field(default=\"\", description=\"Jina API Key\")\n    unreal_speech_api_key: str = Field(default=\"\", description=\"Unreal Speech API Key\")\n\n    fal_key: str = Field(default=\"\", description=\"FAL API key\")\n\n    # Add more secret fields as needed\n\n\n    model_config = SettingsConfigDict(\n        env_file=\".env\",\n        env_file_encoding=\"utf-8\",\n        extra=\"allow\",\n    )\n"
    },
    {
      "id": "n11",
      "code": "class Settings(BaseModel):\n    config: Config = Config()\n    secrets: Secrets = Secrets()\n\n\n    def save(self) -> None:\n        # Save updated config to JSON file\n\n        if self.config.updated_fields:\n"
    },
    {
      "id": "n12",
      "code": "            config_to_save = self.config.get_updates()\n            config_path = os.path.join(get_data_path(), \"config.json\")\n\n            if os.path.exists(config_path):\n"
    },
    {
      "id": "n13",
      "code": "                with open(config_path, \"r+\") as f:\n                    existing_config: Dict[str, Any] = json.load(f)\n                    existing_config.update(config_to_save)\n                    f.seek(0)\n                    json.dump(existing_config, f, indent=2)\n                    f.truncate()\n"
    },
    {
      "id": "n14",
      "code": "            else:\n\n                with open(config_path, \"w\") as f:\n                    json.dump(config_to_save, f, indent=2)\n"
    },
    {
      "id": "n15",
      "code": "            self.config.clear_updates()\n"
    }
  ],
  "edges": [
    {
      "source": "n12",
      "target": "n14"
    },
    {
      "source": "n14",
      "target": "n15"
    },
    {
      "source": "n3",
      "target": "n8"
    },
    {
      "source": "n11",
      "target": "n15"
    },
    {
      "source": "n13",
      "target": "n15"
    },
    {
      "source": "n3",
      "target": "n4"
    },
    {
      "source": "n12",
      "target": "n13"
    },
    {
      "source": "n3",
      "target": "n5"
    },
    {
      "source": "n3",
      "target": "n6"
    },
    {
      "source": "n11",
      "target": "n12"
    },
    {
      "source": "n3",
      "target": "n7"
    }
  ]
}