{
  "nodes": [
    {
      "id": "n0",
      "code": "# https://www.geeksforgeeks.org/solve-crossword-puzzle/\n\n\n\n\n"
    },
    {
      "id": "n1",
      "code": "def is_valid(\n    puzzle: list[list[str]], word: str, row: int, col: int, vertical: bool\n) -> bool:\n\n    \"\"\"\n    Check if a word can be placed at the given position.\n\n    >>> puzzle = [\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', '']\n    ... ]\n    >>> is_valid(puzzle, 'word', 0, 0, True)\n    True\n    >>> puzzle = [\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', '']\n    ... ]\n    >>> is_valid(puzzle, 'word', 0, 0, False)\n    True\n    \"\"\"\n\n    for i in range(len(word)):\n        if vertical:\n            if row + i >= len(puzzle) or puzzle[row + i][col] != \"\":\n                return False\n        elif col + i >= len(puzzle[0]) or puzzle[row][col + i] != \"\":\n            return False\n    return True\n"
    },
    {
      "id": "n2",
      "code": "\n\n\n"
    },
    {
      "id": "n3",
      "code": "def place_word(\n    puzzle: list[list[str]], word: str, row: int, col: int, vertical: bool\n) -> None:\n\n    \"\"\"\n    Place a word at the given position.\n\n    >>> puzzle = [\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', '']\n    ... ]\n    >>> place_word(puzzle, 'word', 0, 0, True)\n    >>> puzzle\n    [['w', '', '', ''], ['o', '', '', ''], ['r', '', '', ''], ['d', '', '', '']]\n    \"\"\"\n"
    },
    {
      "id": "n4",
      "code": "    for i, char in enumerate(word):\n        if vertical:\n            puzzle[row + i][col] = char\n        else:\n            puzzle[row][col + i] = char\n"
    },
    {
      "id": "n5",
      "code": "\n\n"
    },
    {
      "id": "n6",
      "code": "def remove_word(\n"
    },
    {
      "id": "n7",
      "code": "    puzzle: list[list[str]], word: str, row: int, col: int, vertical: bool\n) -> None:\n\n    \"\"\"\n    Remove a word from the given position.\n\n    >>> puzzle = [\n    ...     ['w', '', '', ''],\n    ...     ['o', '', '', ''],\n    ...     ['r', '', '', ''],\n    ...     ['d', '', '', '']\n    ... ]\n    >>> remove_word(puzzle, 'word', 0, 0, True)\n    >>> puzzle\n    [['', '', '', ''], ['', '', '', ''], ['', '', '', ''], ['', '', '', '']]\n    \"\"\"\n\n    for i in range(len(word)):\n        if vertical:\n            puzzle[row + i][col] = \"\"\n        else:\n            puzzle[row][col + i] = \"\"\n\n"
    },
    {
      "id": "n8",
      "code": "\n\n\n"
    },
    {
      "id": "n9",
      "code": "def solve_crossword(puzzle: list[list[str]], words: list[str]) -> bool:\n    \"\"\"\n    Solve the crossword puzzle using backtracking.\n\n    >>> puzzle = [\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', '']\n    ... ]\n\n    >>> words = ['word', 'four', 'more', 'last']\n    >>> solve_crossword(puzzle, words)\n    True\n    >>> puzzle = [\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', '']\n    ... ]\n    >>> words = ['word', 'four', 'more', 'paragraphs']\n    >>> solve_crossword(puzzle, words)\n    False\n    \"\"\"\n"
    },
    {
      "id": "n10",
      "code": "    for row in range(len(puzzle)):\n        for col in range(len(puzzle[0])):\n"
    },
    {
      "id": "n11",
      "code": "            if puzzle[row][col] == \"\":\n"
    },
    {
      "id": "n12",
      "code": "                for word in words:\n                    for vertical in [True, False]:\n\n                        if is_valid(puzzle, word, row, col, vertical):\n"
    },
    {
      "id": "n13",
      "code": "                            place_word(puzzle, word, row, col, vertical)\n                            words.remove(word)\n                            if solve_crossword(puzzle, words):\n                                return True\n                            words.append(word)\n                            remove_word(puzzle, word, row, col, vertical)\n"
    },
    {
      "id": "n14",
      "code": "                return False\n"
    },
    {
      "id": "n15",
      "code": "    return True\n"
    },
    {
      "id": "n16",
      "code": "\n\n\n"
    },
    {
      "id": "n17",
      "code": "if __name__ == \"__main__\":\n\n    PUZZLE = [[\"\"] * 3 for _ in range(3)]\n    WORDS = [\"cat\", \"dog\", \"car\"]\n\n\n    if solve_crossword(PUZZLE, WORDS):\n"
    },
    {
      "id": "n18",
      "code": "        print(\"Solution found:\")\n        for row in PUZZLE:\n            print(\" \".join(row))\n"
    },
    {
      "id": "n19",
      "code": "    else:\n        print(\"No solution found:\")\n"
    },
    {
      "id": "n20",
      "code": "\n\n"
    }
  ],
  "edges": [
    {
      "source": "n11",
      "target": "n12"
    },
    {
      "source": "n18",
      "target": "n20"
    },
    {
      "source": "n11",
      "target": "n10"
    },
    {
      "source": "n13",
      "target": "n10"
    },
    {
      "source": "n10",
      "target": "n15"
    },
    {
      "source": "n17",
      "target": "n18"
    },
    {
      "source": "n3",
      "target": "n4"
    },
    {
      "source": "n9",
      "target": "n10"
    },
    {
      "source": "n10",
      "target": "n11"
    },
    {
      "source": "n19",
      "target": "n20"
    },
    {
      "source": "n4",
      "target": "n5"
    },
    {
      "source": "n12",
      "target": "n13"
    },
    {
      "source": "n4",
      "target": "n4"
    },
    {
      "source": "n17",
      "target": "n19"
    },
    {
      "source": "n13",
      "target": "n14"
    }
  ]
}