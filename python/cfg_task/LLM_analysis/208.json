{
  "nodes": [
    {
      "id": "n0",
      "code": "import asyncio\n\nimport pytest\n\nfrom backend.util.retry import conn_retry\n"
    },
    {
      "id": "n1",
      "code": "def test_conn_retry_sync_function():\n    retry_count = 0\n\n    @conn_retry(\"Test\", \"Test function\", max_retry=2, max_wait=0.1, min_wait=0.1)\n    def test_function():\n\n        nonlocal retry_count\n        retry_count -= 1\n\n        if retry_count > 0:\n            raise ValueError(\"Test error\")\n"
    },
    {
      "id": "n2",
      "code": "        return \"Success\"\n"
    },
    {
      "id": "n3",
      "code": "    retry_count = 2\n    res = test_function()\n\n    assert res == \"Success\"\n\n    retry_count = 100\n    with pytest.raises(ValueError) as e:\n\n        test_function()\n        assert str(e.value) == \"Test error\"\n"
    },
    {
      "id": "n4",
      "code": "@pytest.mark.asyncio\nasync def test_conn_retry_async_function():\n\n    retry_count = 0\n\n    @conn_retry(\"Test\", \"Test function\", max_retry=2, max_wait=0.1, min_wait=0.1)\n    async def test_function():\n"
    },
    {
      "id": "n5",
      "code": "        nonlocal retry_count\n        await asyncio.sleep(1)\n        retry_count -= 1\n\n        if retry_count > 0:\n            raise ValueError(\"Test error\")\n"
    },
    {
      "id": "n6",
      "code": "        return \"Success\"\n\n    retry_count = 2\n\n    res = await test_function()\n    assert res == \"Success\"\n\n    retry_count = 100\n\n    with pytest.raises(ValueError) as e:\n        await test_function()\n        assert str(e.value) == \"Test error\"\n"
    }
  ],
  "edges": [
    {
      "source": "n5",
      "target": "n6"
    },
    {
      "source": "n1",
      "target": "n3"
    },
    {
      "source": "n1",
      "target": "n2"
    },
    {
      "source": "n4",
      "target": "n5"
    },
    {
      "source": "n2",
      "target": "n3"
    }
  ]
}