{
  "nodes": [
    {
      "id": "n0",
      "code": "# -*- coding: utf-8 -*-\n\nfrom mrjob.job import MRJob\n"
    },
    {
      "id": "n1",
      "code": "class RemoveDuplicateUrls(MRJob):\n\n"
    },
    {
      "id": "n2",
      "code": "    def mapper(self, _, line):\n        yield line, 1\n"
    },
    {
      "id": "n3",
      "code": "    def reducer(self, key, values):\n        total = sum(values)\n        if total == 1:\n            yield key, total\n"
    },
    {
      "id": "n4",
      "code": "    def steps(self):\n        \"\"\"Run the map and reduce steps.\"\"\"\n        return [\n            self.mr(mapper=self.mapper,\n                    reducer=self.reducer)\n        ]\n"
    },
    {
      "id": "n5",
      "code": "    def mapper(self, _, line):\n        yield line, 1\n"
    },
    {
      "id": "n6",
      "code": "    def reducer(self, key, values):\n        total = sum(values)\n\n        if total == 1:\n            yield key, total\n"
    },
    {
      "id": "n7",
      "code": "    def steps(self):\n        \"\"\"Run the map and reduce steps.\"\"\"\n\n        return [\n            self.mr(mapper=self.mapper,\n                    reducer=self.reducer)\n        ]\n"
    },
    {
      "id": "n8",
      "code": "if __name__ == '__main__':\n    RemoveDuplicateUrls.run()\n"
    }
  ],
  "edges": [
    {
      "source": "n1",
      "target": "n4"
    },
    {
      "source": "n1",
      "target": "n2"
    },
    {
      "source": "n1",
      "target": "n3"
    }
  ]
}