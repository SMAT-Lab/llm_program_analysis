{
  "nodes": [
    {
      "id": "n0",
      "code": "from datetime import datetime, timezone\nfrom unittest.mock import AsyncMock\n\nimport pytest\nfrom fastapi import WebSocket\n\nfrom backend.data.execution import ExecutionResult, ExecutionStatus\nfrom backend.server.conn_manager import ConnectionManager\nfrom backend.server.model import Methods, WsMessage\n"
    },
    {
      "id": "n1",
      "code": "@pytest.fixture\n\ndef connection_manager() -> ConnectionManager:\n    return ConnectionManager()\n"
    },
    {
      "id": "n2",
      "code": "@pytest.fixture\n\ndef mock_websocket() -> AsyncMock:\n    websocket: AsyncMock = AsyncMock(spec=WebSocket)\n    websocket.send_text = AsyncMock()\n    return websocket\n"
    },
    {
      "id": "n3",
      "code": "@pytest.mark.asyncio\nasync def test_connect(\n    connection_manager: ConnectionManager, mock_websocket: AsyncMock\n) -> None:\n\n    await connection_manager.connect(mock_websocket)\n    assert mock_websocket in connection_manager.active_connections\n    mock_websocket.accept.assert_called_once()\n"
    },
    {
      "id": "n4",
      "code": "def test_disconnect(\n    connection_manager: ConnectionManager, mock_websocket: AsyncMock\n) -> None:\n\n    connection_manager.active_connections.add(mock_websocket)\n    connection_manager.subscriptions[\"test_graph\"] = {mock_websocket}\n\n    connection_manager.disconnect(mock_websocket)\n\n    assert mock_websocket not in connection_manager.active_connections\n    assert mock_websocket not in connection_manager.subscriptions[\"test_graph\"]\n"
    },
    {
      "id": "n5",
      "code": "@pytest.mark.asyncio\nasync def test_subscribe(\n    connection_manager: ConnectionManager, mock_websocket: AsyncMock\n) -> None:\n\n    await connection_manager.subscribe(\"test_graph\", mock_websocket)\n    assert mock_websocket in connection_manager.subscriptions[\"test_graph\"]\n"
    },
    {
      "id": "n6",
      "code": "async def test_unsubscribe(\n    connection_manager: ConnectionManager, mock_websocket: AsyncMock\n) -> None:\n\n    connection_manager.subscriptions[\"test_graph\"] = {mock_websocket}\n\n    await connection_manager.unsubscribe(\"test_graph\", mock_websocket)\n\n    assert \"test_graph\" not in connection_manager.subscriptions\n"
    },
    {
      "id": "n7",
      "code": "async def test_send_execution_result(\n    connection_manager: ConnectionManager, mock_websocket: AsyncMock\n) -> None:\n\n    connection_manager.subscriptions[\"test_graph\"] = {mock_websocket}\n\n    result: ExecutionResult = ExecutionResult(\n        graph_id=\"test_graph\",\n        graph_version=1,\n        graph_exec_id=\"test_exec_id\",\n        node_exec_id=\"test_node_exec_id\",\n        node_id=\"test_node_id\",\n        block_id=\"test_block_id\",\n        status=ExecutionStatus.COMPLETED,\n        input_data={\"input1\": \"value1\"},\n        output_data={\"output1\": [\"result1\"]},\n        add_time=datetime.now(tz=timezone.utc),\n        queue_time=None,\n        start_time=datetime.now(tz=timezone.utc),\n        end_time=datetime.now(tz=timezone.utc),\n    )\n\n    await connection_manager.send_execution_result(result)\n\n    mock_websocket.send_text.assert_called_once_with(\n        WsMessage(\n            method=Methods.EXECUTION_EVENT,\n            channel=\"test_graph\",\n            data=result.model_dump(),\n        ).model_dump_json()\n    )\n"
    },
    {
      "id": "n8",
      "code": "async def test_send_execution_result_no_subscribers(\n    connection_manager: ConnectionManager, mock_websocket: AsyncMock\n) -> None:\n\n    result: ExecutionResult = ExecutionResult(\n        graph_id=\"test_graph\",\n        graph_version=1,\n        graph_exec_id=\"test_exec_id\",\n        node_exec_id=\"test_node_exec_id\",\n        node_id=\"test_node_id\",\n        block_id=\"test_block_id\",\n        status=ExecutionStatus.COMPLETED,\n        input_data={\"input1\": \"value1\"},\n        output_data={\"output1\": [\"result1\"]},\n        add_time=datetime.now(),\n        queue_time=None,\n        start_time=datetime.now(),\n        end_time=datetime.now(),\n    )\n\n    await connection_manager.send_execution_result(result)\n\n    mock_websocket.send_text.assert_not_called()\n"
    }
  ],
  "edges": []
}