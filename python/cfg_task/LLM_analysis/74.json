{
  "nodes": [
    {
      "id": "n0",
      "code": "import logging\n\nfrom google.auth.external_account_authorized_user import (\n    Credentials as ExternalAccountCredentials,\n)\n\nfrom google.auth.transport.requests import AuthorizedSession, Request\n\nfrom google.oauth2.credentials import Credentials\n\nfrom google_auth_oauthlib.flow import Flow\n\nfrom pydantic import SecretStr\n\nfrom backend.data.model import OAuth2Credentials\n\nfrom backend.integrations.providers import ProviderName\n\nfrom .base import BaseOAuthHandler\n\nlogger = logging.getLogger(__name__)\n\n# --8<-- [start:GoogleOAuthHandlerExample]\n\n"
    },
    {
      "id": "n1",
      "code": "class GoogleOAuthHandler(BaseOAuthHandler):\n    \"\"\"\n    Based on the documentation at https://developers.google.com/identity/protocols/oauth2/web-server\n    \"\"\"  # noqa\n\n    PROVIDER_NAME = ProviderName.GOOGLE\n    EMAIL_ENDPOINT = \"https://www.googleapis.com/oauth2/v2/userinfo\"\n\n    DEFAULT_SCOPES = [\n        \"https://www.googleapis.com/auth/userinfo.email\",\n        \"https://www.googleapis.com/auth/userinfo.profile\",\n        \"openid\",\n    ]\n\n    # --8<-- [end:GoogleOAuthHandlerExample]\n\n"
    },
    {
      "id": "n2",
      "code": "    def __init__(self, client_id: str, client_secret: str, redirect_uri: str):\n        self.client_id = client_id\n        self.client_secret = client_secret\n        self.redirect_uri = redirect_uri\n        self.token_uri = \"https://oauth2.googleapis.com/token\"\n        self.revoke_uri = \"https://oauth2.googleapis.com/revoke\"\n"
    },
    {
      "id": "n3",
      "code": "    def get_login_url(self, scopes: list[str], state: str) -> str:\n\n        all_scopes = list(set(scopes + self.DEFAULT_SCOPES))\n        logger.debug(f\"Setting up OAuth flow with scopes: {all_scopes}\")\n\n        flow = self._setup_oauth_flow(all_scopes)\n        flow.redirect_uri = self.redirect_uri\n\n        authorization_url, _ = flow.authorization_url(\n            access_type=\"offline\",\n            include_granted_scopes=\"true\",\n            state=state,\n            prompt=\"consent\",\n        )\n\n        return authorization_url\n"
    },
    {
      "id": "n4",
      "code": "    def exchange_code_for_tokens(\n        self, code: str, scopes: list[str]\n    ) -> OAuth2Credentials:\n\n        logger.debug(f\"Exchanging code for tokens with scopes: {scopes}\")\n\n        # Use the scopes from the initial request\n        flow = self._setup_oauth_flow(scopes)\n        flow.redirect_uri = self.redirect_uri\n\n        logger.debug(\"Fetching token from Google\")\n\n        # Disable scope check in fetch_token\n        flow.oauth2session.scope = None\n        token = flow.fetch_token(code=code)\n\n        logger.debug(\"Token fetched successfully\")\n\n        # Get the actual scopes granted by Google\n        granted_scopes: list[str] = token.get(\"scope\", [])\n\n        logger.debug(f\"Scopes granted by Google: {granted_scopes}\")\n\n        google_creds = flow.credentials\n        logger.debug(f\"Received credentials: {google_creds}\")\n\n        logger.debug(\"Requesting user email\")\n        username = self._request_email(google_creds)\n        logger.debug(f\"User email retrieved: {username}\")\n\n        assert google_creds.token\n        assert google_creds.refresh_token\n        assert google_creds.expiry\n        assert granted_scopes\n\n        # Create OAuth2Credentials with the granted scopes\n        credentials = OAuth2Credentials(\n            provider=self.PROVIDER_NAME,\n            title=None,\n            username=username,\n            access_token=SecretStr(google_creds.token),\n            refresh_token=(SecretStr(google_creds.refresh_token)),\n            access_token_expires_at=(\n                int(google_creds.expiry.timestamp()) if google_creds.expiry else None\n            ),\n            refresh_token_expires_at=None,\n            scopes=granted_scopes,\n        )\n\n        logger.debug(\n            f\"OAuth2Credentials object created successfully with scopes: {credentials.scopes}\"\n        )\n\n        return credentials\n"
    },
    {
      "id": "n5",
      "code": "    def revoke_tokens(self, credentials: OAuth2Credentials) -> bool:\n\n        session = AuthorizedSession(credentials)\n        session.post(\n            self.revoke_uri,\n            params={\"token\": credentials.access_token.get_secret_value()},\n            headers={\"content-type\": \"application/x-www-form-urlencoded\"},\n        )\n\n        return True\n"
    },
    {
      "id": "n6",
      "code": "    def _request_email(\n        self, creds: Credentials | ExternalAccountCredentials\n    ) -> str | None:\n\n        session = AuthorizedSession(creds)\n        response = session.get(self.EMAIL_ENDPOINT)\n\n        if not response.ok:\n            logger.error(\n                f\"Failed to get user email. Status code: {response.status_code}\"\n            )\n            return None\n\n        return response.json()[\"email\"]\n"
    },
    {
      "id": "n7",
      "code": "    def _refresh_tokens(self, credentials: OAuth2Credentials) -> OAuth2Credentials:\n        # Google credentials should ALWAYS have a refresh token\n        assert credentials.refresh_token\n\n        google_creds = Credentials(\n            token=credentials.access_token.get_secret_value(),\n            refresh_token=credentials.refresh_token.get_secret_value(),\n            token_uri=self.token_uri,\n            client_id=self.client_id,\n            client_secret=self.client_secret,\n            scopes=credentials.scopes,\n        )\n\n        # Google's OAuth library is poorly typed so we need some of these:\n        assert google_creds.refresh_token\n        assert google_creds.scopes\n\n        google_creds.refresh(Request())\n        assert google_creds.expiry\n\n        return OAuth2Credentials(\n            provider=self.PROVIDER_NAME,\n            id=credentials.id,\n            title=credentials.title,\n            username=credentials.username,\n            access_token=SecretStr(google_creds.token),\n            refresh_token=SecretStr(google_creds.refresh_token),\n            access_token_expires_at=int(google_creds.expiry.timestamp()),\n            refresh_token_expires_at=None,\n            scopes=google_creds.scopes,\n        )\n"
    },
    {
      "id": "n8",
      "code": "    def _setup_oauth_flow(self, scopes: list[str]) -> Flow:\n        return Flow.from_client_config(\n            {\n                \"web\": {\n                    \"client_id\": self.client_id,\n                    \"client_secret\": self.client_secret,\n                    \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n                    \"token_uri\": self.token_uri,\n                }\n            },\n            scopes=scopes,\n        )\n"
    }
  ],
  "edges": []
}