{
  "nodes": [
    {
      "id": "n0",
      "code": "\"\"\"Analytics API\"\"\"\n\nfrom typing import Annotated\n\nimport fastapi\n\nimport backend.data.analytics\nfrom backend.server.utils import get_user_id\n\nrouter = fastapi.APIRouter()\n"
    },
    {
      "id": "n1",
      "code": "@router.post(path=\"/log_raw_metric\")\nasync def log_raw_metric(\n    user_id: Annotated[str, fastapi.Depends(get_user_id)],\n    metric_name: Annotated[str, fastapi.Body(..., embed=True)],\n    metric_value: Annotated[float, fastapi.Body(..., embed=True)],\n    data_string: Annotated[str, fastapi.Body(..., embed=True)],\n):\n\n    result = await backend.data.analytics.log_raw_metric(\n        user_id=user_id,\n        metric_name=metric_name,\n        metric_value=metric_value,\n        data_string=data_string,\n    )\n\n    return result.id\n"
    },
    {
      "id": "n2",
      "code": "@router.post(\"/log_raw_analytics\")\nasync def log_raw_analytics(\n    user_id: Annotated[str, fastapi.Depends(get_user_id)],\n    type: Annotated[str, fastapi.Body(..., embed=True)],\n    data: Annotated[\n        dict,\n        fastapi.Body(..., embed=True, description=\"The data to log\"),\n    ],\n    data_index: Annotated[\n        str,\n        fastapi.Body(\n            ...,\n            embed=True,\n            description=\"Indexable field for any count based analytical measures like page order clicking, tutorial step completion, etc.\",\n        ),\n    ],\n):\n\n    result = await backend.data.analytics.log_raw_analytics(\n        user_id, type, data, data_index\n    )\n\n    return result.id\n"
    }
  ],
  "edges": []
}