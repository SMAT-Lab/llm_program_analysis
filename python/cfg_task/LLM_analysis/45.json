{
  "nodes": [
    {
      "id": "n0",
      "code": "import logging\nimport uuid\nfrom datetime import datetime, timezone\nfrom typing import List, Optional\n\nfrom autogpt_libs.api_key.key_manager import APIKeyManager\nfrom prisma.enums import APIKeyPermission, APIKeyStatus\nfrom prisma.errors import PrismaError\nfrom prisma.models import APIKey as PrismaAPIKey\n\nfrom prisma.types import (\n    APIKeyCreateInput,\n    APIKeyUpdateInput,\n    APIKeyWhereInput,\n    APIKeyWhereUniqueInput,\n)\n\nfrom pydantic import BaseModel\n\nfrom backend.data.db import BaseDbModel\n\nlogger = logging.getLogger(__name__)\n"
    },
    {
      "id": "n1",
      "code": "class APIKeyError(Exception):\n    \"\"\"Base exception for API key operations\"\"\"\n\n    pass\n"
    },
    {
      "id": "n2",
      "code": "class APIKeyNotFoundError(APIKeyError):\n    \"\"\"Raised when an API key is not found\"\"\"\n\n    pass\n"
    },
    {
      "id": "n3",
      "code": "class APIKeyPermissionError(APIKeyError):\n    \"\"\"Raised when there are permission issues with API key operations\"\"\"\n\n    pass\n"
    },
    {
      "id": "n4",
      "code": "class APIKeyValidationError(APIKeyError):\n    \"\"\"Raised when API key validation fails\"\"\"\n\n    pass\n"
    },
    {
      "id": "n5",
      "code": "class APIKey(BaseDbModel):\n    name: str\n    prefix: str\n    key: str\n    status: APIKeyStatus = APIKeyStatus.ACTIVE\n    permissions: List[APIKeyPermission]\n    postfix: str\n    created_at: datetime\n    last_used_at: Optional[datetime] = None\n    revoked_at: Optional[datetime] = None\n    description: Optional[str] = None\n    user_id: str\n\n    @staticmethod\n    def from_db(api_key: PrismaAPIKey):\n\n        try:\n            return APIKey(\n                id=api_key.id,\n                name=api_key.name,\n                prefix=api_key.prefix,\n                postfix=api_key.postfix,\n                key=api_key.key,\n                status=APIKeyStatus(api_key.status),\n                permissions=[APIKeyPermission(p) for p in api_key.permissions],\n                created_at=api_key.createdAt,\n                last_used_at=api_key.lastUsedAt,\n                revoked_at=api_key.revokedAt,\n                description=api_key.description,\n                user_id=api_key.userId,\n            )\n"
    },
    {
      "id": "n6",
      "code": "        except Exception as e:\n            logger.error(f\"Error creating APIKey from db: {str(e)}\")\n            raise APIKeyError(f\"Failed to create API key object: {str(e)}\")\n"
    },
    {
      "id": "n7",
      "code": "class APIKeyWithoutHash(BaseModel):\n    id: str\n    name: str\n    prefix: str\n    postfix: str\n    status: APIKeyStatus\n    permissions: List[APIKeyPermission]\n    created_at: datetime\n    last_used_at: Optional[datetime]\n    revoked_at: Optional[datetime]\n    description: Optional[str]\n    user_id: str\n\n\n    @staticmethod\n    def from_db(api_key: PrismaAPIKey):\n\n        try:\n            return APIKeyWithoutHash(\n                id=api_key.id,\n                name=api_key.name,\n                prefix=api_key.prefix,\n                postfix=api_key.postfix,\n                status=APIKeyStatus(api_key.status),\n                permissions=[APIKeyPermission(p) for p in api_key.permissions],\n                created_at=api_key.createdAt,\n                last_used_at=api_key.lastUsedAt,\n                revoked_at=api_key.revokedAt,\n                description=api_key.description,\n                user_id=api_key.userId,\n            )\n\n        except Exception as e:\n            logger.error(f\"Error creating APIKeyWithoutHash from db: {str(e)}\")\n            raise APIKeyError(f\"Failed to create API key object: {str(e)}\")\n"
    },
    {
      "id": "n8",
      "code": "async def generate_api_key(\n    name: str,\n    user_id: str,\n    permissions: List[APIKeyPermission],\n    description: Optional[str] = None,\n) -> tuple[APIKeyWithoutHash, str]:\n    \"\"\"\n    Generate a new API key and store it in the database.\n    Returns the API key object (without hash) and the plain text key.\n    \"\"\"\n\n    try:\n        api_manager = APIKeyManager()\n        key = api_manager.generate_api_key()\n\n        api_key = await PrismaAPIKey.prisma().create(\n            data=APIKeyCreateInput(\n                id=str(uuid.uuid4()),\n                name=name,\n                prefix=key.prefix,\n                postfix=key.postfix,\n                key=key.hash,\n                permissions=[p for p in permissions],\n                description=description,\n                userId=user_id,\n            )\n        )\n\n        api_key_without_hash = APIKeyWithoutHash.from_db(api_key)\n        return api_key_without_hash, key.raw\n"
    },
    {
      "id": "n9",
      "code": "    except PrismaError as e:\n        logger.error(f\"Database error while generating API key: {str(e)}\")\n        raise APIKeyError(f\"Failed to generate API key: {str(e)}\")\n"
    },
    {
      "id": "n10",
      "code": "    except Exception as e:\n        logger.error(f\"Unexpected error while generating API key: {str(e)}\")\n        raise APIKeyError(f\"Failed to generate API key: {str(e)}\")\n"
    },
    {
      "id": "n11",
      "code": "async def validate_api_key(plain_text_key: str) -> Optional[APIKey]:\n    \"\"\"\n    Validate an API key and return the API key object if valid.\n    \"\"\"\n\n    try:\n        if not plain_text_key.startswith(APIKeyManager.PREFIX):\n            logger.warning(\"Invalid API key format\")\n            return None\n"
    },
    {
      "id": "n12",
      "code": "        prefix = plain_text_key[: APIKeyManager.PREFIX_LENGTH]\n        api_manager = APIKeyManager()\n\n\n        api_key = await PrismaAPIKey.prisma().find_first(\n            where=APIKeyWhereInput(prefix=prefix, status=(APIKeyStatus.ACTIVE))\n        )\n\n        if not api_key:\n            logger.warning(f\"No active API key found with prefix {prefix}\")\n            return None\n"
    },
    {
      "id": "n13",
      "code": "        is_valid = api_manager.verify_api_key(plain_text_key, api_key.key)\n        if not is_valid:\n            logger.warning(\"API key verification failed\")\n            return None\n"
    },
    {
      "id": "n14",
      "code": "        return APIKey.from_db(api_key)\n"
    },
    {
      "id": "n15",
      "code": "    except Exception as e:\n        logger.error(f\"Error validating API key: {str(e)}\")\n        raise APIKeyValidationError(f\"Failed to validate API key: {str(e)}\")\n"
    },
    {
      "id": "n16",
      "code": "async def revoke_api_key(key_id: str, user_id: str) -> Optional[APIKeyWithoutHash]:\n\n    try:\n        api_key = await PrismaAPIKey.prisma().find_unique(where={\"id\": key_id})\n"
    },
    {
      "id": "n17",
      "code": "        if not api_key:\n            raise APIKeyNotFoundError(f\"API key with id {key_id} not found\")\n"
    },
    {
      "id": "n18",
      "code": "        if api_key.userId != user_id:\n            raise APIKeyPermissionError(\n                \"You do not have permission to revoke this API key.\"\n            )\n"
    },
    {
      "id": "n19",
      "code": "        where_clause: APIKeyWhereUniqueInput = {\"id\": key_id}\n        updated_api_key = await PrismaAPIKey.prisma().update(\n            where=where_clause,\n            data=APIKeyUpdateInput(\n                status=APIKeyStatus.REVOKED, revokedAt=datetime.now(timezone.utc)\n            ),\n        )\n\n        if updated_api_key:\n            return APIKeyWithoutHash.from_db(updated_api_key)\n        return None\n"
    },
    {
      "id": "n20",
      "code": "    except (APIKeyNotFoundError, APIKeyPermissionError) as e:\n        raise e\n"
    },
    {
      "id": "n21",
      "code": "    except PrismaError as e:\n        logger.error(f\"Database error while revoking API key: {str(e)}\")\n        raise APIKeyError(f\"Failed to revoke API key: {str(e)}\")\n"
    },
    {
      "id": "n22",
      "code": "    except Exception as e:\n        logger.error(f\"Unexpected error while revoking API key: {str(e)}\")\n        raise APIKeyError(f\"Failed to revoke API key: {str(e)}\")\n"
    },
    {
      "id": "n23",
      "code": "async def list_user_api_keys(user_id: str) -> List[APIKeyWithoutHash]:\n\n    try:\n        where_clause: APIKeyWhereInput = {\"userId\": user_id}\n\n        api_keys = await PrismaAPIKey.prisma().find_many(\n            where=where_clause, order={\"createdAt\": \"desc\"}\n        )\n\n        return [APIKeyWithoutHash.from_db(key) for key in api_keys]\n"
    },
    {
      "id": "n24",
      "code": "    except PrismaError as e:\n        logger.error(f\"Database error while listing API keys: {str(e)}\")\n        raise APIKeyError(f\"Failed to list API keys: {str(e)}\")\n"
    },
    {
      "id": "n25",
      "code": "    except Exception as e:\n        logger.error(f\"Unexpected error while listing API keys: {str(e)}\")\n        raise APIKeyError(f\"Failed to list API keys: {str(e)}\")\n"
    },
    {
      "id": "n26",
      "code": "async def suspend_api_key(key_id: str, user_id: str) -> Optional[APIKeyWithoutHash]:\n\n    try:\n        api_key = await PrismaAPIKey.prisma().find_unique(where={\"id\": key_id})\n\n        if not api_key:\n            raise APIKeyNotFoundError(f\"API key with id {key_id} not found\")\n"
    },
    {
      "id": "n27",
      "code": "        if api_key.userId != user_id:\n            raise APIKeyPermissionError(\n                \"You do not have permission to suspend this API key.\"\n            )\n"
    },
    {
      "id": "n28",
      "code": "        where_clause: APIKeyWhereUniqueInput = {\"id\": key_id}\n        updated_api_key = await PrismaAPIKey.prisma().update(\n            where=where_clause,\n            data=APIKeyUpdateInput(status=APIKeyStatus.SUSPENDED),\n        )\n\n        if updated_api_key:\n            return APIKeyWithoutHash.from_db(updated_api_key)\n        return None\n"
    },
    {
      "id": "n29",
      "code": "    except (APIKeyNotFoundError, APIKeyPermissionError) as e:\n        raise e\n"
    },
    {
      "id": "n30",
      "code": "    except PrismaError as e:\n        logger.error(f\"Database error while suspending API key: {str(e)}\")\n        raise APIKeyError(f\"Failed to suspend API key: {str(e)}\")\n"
    },
    {
      "id": "n31",
      "code": "    except Exception as e:\n        logger.error(f\"Unexpected error while suspending API key: {str(e)}\")\n        raise APIKeyError(f\"Failed to suspend API key: {str(e)}\")\n"
    },
    {
      "id": "n32",
      "code": "def has_permission(api_key: APIKey, required_permission: APIKeyPermission) -> bool:\n\n    try:\n        return required_permission in api_key.permissions\n\n    except Exception as e:\n        logger.error(f\"Error checking API key permissions: {str(e)}\")\n        return False\n"
    },
    {
      "id": "n33",
      "code": "async def get_api_key_by_id(key_id: str, user_id: str) -> Optional[APIKeyWithoutHash]:\n\n    try:\n        api_key = await PrismaAPIKey.prisma().find_first(\n            where=APIKeyWhereInput(id=key_id, userId=user_id)\n        )\n"
    },
    {
      "id": "n34",
      "code": "        if not api_key:\n            return None\n\n        return APIKeyWithoutHash.from_db(api_key)\n"
    },
    {
      "id": "n35",
      "code": "    except PrismaError as e:\n        logger.error(f\"Database error while getting API key: {str(e)}\")\n        raise APIKeyError(f\"Failed to get API key: {str(e)}\")\n"
    },
    {
      "id": "n36",
      "code": "    except Exception as e:\n        logger.error(f\"Unexpected error while getting API key: {str(e)}\")\n        raise APIKeyError(f\"Failed to get API key: {str(e)}\")\n"
    },
    {
      "id": "n37",
      "code": "async def update_api_key_permissions(\n    key_id: str, user_id: str, permissions: List[APIKeyPermission]\n) -> Optional[APIKeyWithoutHash]:\n    \"\"\"\n    Update the permissions of an API key.\n    \"\"\"\n\n    try:\n        api_key = await PrismaAPIKey.prisma().find_unique(where={\"id\": key_id})\n\n        if api_key is None:\n            raise APIKeyNotFoundError(\"No such API key found.\")\n"
    },
    {
      "id": "n38",
      "code": "        if api_key.userId != user_id:\n            raise APIKeyPermissionError(\n                \"You do not have permission to update this API key.\"\n            )\n"
    },
    {
      "id": "n39",
      "code": "        where_clause: APIKeyWhereUniqueInput = {\"id\": key_id}\n        updated_api_key = await PrismaAPIKey.prisma().update(\n            where=where_clause,\n            data=APIKeyUpdateInput(permissions=permissions),\n        )\n\n        if updated_api_key:\n            return APIKeyWithoutHash.from_db(updated_api_key)\n        return None\n"
    },
    {
      "id": "n40",
      "code": "    except (APIKeyNotFoundError, APIKeyPermissionError) as e:\n        raise e\n"
    },
    {
      "id": "n41",
      "code": "    except PrismaError as e:\n        logger.error(f\"Database error while updating API key permissions: {str(e)}\")\n        raise APIKeyError(f\"Failed to update API key permissions: {str(e)}\")\n"
    },
    {
      "id": "n42",
      "code": "    except Exception as e:\n        logger.error(f\"Unexpected error while updating API key permissions: {str(e)}\")\n        raise APIKeyError(f\"Failed to update API key permissions: {str(e)}\")\n"
    }
  ],
  "edges": [
    {
      "source": "n38",
      "target": "n39"
    },
    {
      "source": "n11",
      "target": "n15"
    },
    {
      "source": "n17",
      "target": "n18"
    },
    {
      "source": "n23",
      "target": "n25"
    },
    {
      "source": "n26",
      "target": "n27"
    },
    {
      "source": "n13",
      "target": "n14"
    },
    {
      "source": "n40",
      "target": "n41"
    },
    {
      "source": "n17",
      "target": "n20"
    },
    {
      "source": "n23",
      "target": "n24"
    },
    {
      "source": "n16",
      "target": "n17"
    },
    {
      "source": "n13",
      "target": "n15"
    },
    {
      "source": "n8",
      "target": "n9"
    },
    {
      "source": "n37",
      "target": "n40"
    },
    {
      "source": "n33",
      "target": "n35"
    },
    {
      "source": "n12",
      "target": "n13"
    },
    {
      "source": "n16",
      "target": "n20"
    },
    {
      "source": "n20",
      "target": "n21"
    },
    {
      "source": "n12",
      "target": "n15"
    },
    {
      "source": "n11",
      "target": "n12"
    },
    {
      "source": "n33",
      "target": "n36"
    },
    {
      "source": "n18",
      "target": "n19"
    },
    {
      "source": "n26",
      "target": "n29"
    },
    {
      "source": "n37",
      "target": "n38"
    },
    {
      "source": "n38",
      "target": "n40"
    },
    {
      "source": "n40",
      "target": "n42"
    },
    {
      "source": "n18",
      "target": "n20"
    },
    {
      "source": "n27",
      "target": "n29"
    },
    {
      "source": "n27",
      "target": "n28"
    },
    {
      "source": "n8",
      "target": "n10"
    },
    {
      "source": "n33",
      "target": "n34"
    },
    {
      "source": "n20",
      "target": "n22"
    }
  ]
}