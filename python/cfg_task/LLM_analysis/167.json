{
  "nodes": [
    {
      "id": "n0",
      "code": "import json\nfrom typing import Optional\n\nfrom cryptography.fernet import Fernet\n\nfrom backend.util.settings import Settings\n\nENCRYPTION_KEY = Settings().secrets.encryption_key\n"
    },
    {
      "id": "n1",
      "code": "class JSONCryptor:\n\n    def __init__(self, key: Optional[str] = None):\n        # Use provided key or get from environment\n        self.key = key or ENCRYPTION_KEY\n\n        if not self.key:\n            raise ValueError(\n                \"Encryption key must be provided or set in ENCRYPTION_KEY environment variable\"\n            )\n\n        self.fernet = Fernet(\n            self.key.encode() if isinstance(self.key, str) else self.key\n        )\n"
    },
    {
      "id": "n2",
      "code": "    def encrypt(self, data: dict) -> str:\n        \"\"\"Encrypt dictionary data to string\"\"\"\n\n        json_str = json.dumps(data)\n        encrypted = self.fernet.encrypt(json_str.encode())\n        return encrypted.decode()\n"
    },
    {
      "id": "n3",
      "code": "    def decrypt(self, encrypted_str: str) -> dict:\n        \"\"\"Decrypt string to dictionary\"\"\"\n\n        if not encrypted_str:\n            return {}\n\n        decrypted = self.fernet.decrypt(encrypted_str.encode())\n        return json.loads(decrypted.decode())\n"
    }
  ],
  "edges": []
}