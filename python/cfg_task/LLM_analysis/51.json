{
  "nodes": [
    {
      "id": "n0",
      "code": "\"\"\"\nIn the Combination Sum problem, we are given a list consisting of distinct integers.\nWe need to find all the combinations whose sum equals to target given.\nWe can use an element more than one.\n\nTime complexity(Average Case): O(n!)\n\nConstraints:\n1 <= candidates.length <= 30\n2 <= candidates[i] <= 40\nAll elements of candidates are distinct.\n1 <= target <= 40\n\"\"\"\n\n\n\n\n"
    },
    {
      "id": "n1",
      "code": "def backtrack(\n    candidates: list, path: list, answer: list, target: int, previous_index: int\n) -> None:\n\n    \"\"\"\n    A recursive function that searches for possible combinations. Backtracks in case\n    of a bigger current combination value than the target value.\n\n    Parameters\n    ----------\n    previous_index: Last index from the previous search\n    target: The value we need to obtain by summing our integers in the path list.\n    answer: A list of possible combinations\n    path: Current combination\n    candidates: A list of integers we can use.\n    \"\"\"\n\n    if target == 0:\n        answer.append(path.copy())\n"
    },
    {
      "id": "n2",
      "code": "    else:\n        for index in range(previous_index, len(candidates)):\n\n            if target >= candidates[index]:\n                path.append(candidates[index])\n                backtrack(candidates, path, answer, target - candidates[index], index)\n                path.pop(len(path) - 1)\n"
    },
    {
      "id": "n3",
      "code": "def combination_sum(candidates: list, target: int) -> list:\n    \"\"\"\n    >>> combination_sum([2, 3, 5], 8)\n    [[2, 2, 2, 2], [2, 3, 3], [3, 5]]\n    >>> combination_sum([2, 3, 6, 7], 7)\n    [[2, 2, 3], [7]]\n    >>> combination_sum([-8, 2.3, 0], 1)\n    Traceback (most recent call last):\n        ...\n    RecursionError: maximum recursion depth exceeded\n    \"\"\"\n\n    path = []  # type: list[int]\n    answer = []  # type: list[int]\n\n    backtrack(candidates, path, answer, target, 0)\n\n    return answer\n"
    },
    {
      "id": "n4",
      "code": "def main() -> None:\n    print(combination_sum([-8, 2.3, 0], 1))\n"
    },
    {
      "id": "n5",
      "code": "if __name__ == \"__main__\":\n\n    import doctest\n\n    doctest.testmod()\n\n    main()\n"
    }
  ],
  "edges": [
    {
      "source": "n1",
      "target": "n2"
    }
  ]
}