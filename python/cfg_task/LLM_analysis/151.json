{
  "nodes": [
    {
      "id": "n0",
      "code": "from typing import Any, List\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema, BlockType\nfrom backend.data.model import SchemaField\nfrom backend.util.mock import MockObject\nfrom backend.util.text import TextFormatter\n\n\nformatter = TextFormatter()\n\n\n\n\n"
    },
    {
      "id": "n1",
      "code": "class StoreValueBlock(Block):\n    \"\"\"\n    This block allows you to provide a constant value as a block, in a stateless manner.\n    The common use-case is simply pass the `input` data, it will `output` the same data.\n    The block output will be static, the output can be consumed multiple times.\n    \"\"\"\n\n    class Input(BlockSchema):\n        input: Any = SchemaField(\n            description=\"Trigger the block to produce the output. \"\n            \"The value is only used when `data` is None.\"\n        )\n        data: Any = SchemaField(\n            description=\"The constant data to be retained in the block. \"\n            \"This value is passed as `output`.\",\n            default=None,\n        )\n\n    class Output(BlockSchema):\n        output: Any = SchemaField(description=\"The stored data retained in the block.\")\n\n    def __init__(self):\n        super().__init__(\n            id=\"1ff065e9-88e8-4358-9d82-8dc91f622ba9\",\n            description=\"This block forwards an input value as output, allowing reuse without change.\",\n            categories={BlockCategory.BASIC},\n            input_schema=StoreValueBlock.Input,\n            output_schema=StoreValueBlock.Output,\n            test_input=[\n                {\"input\": \"Hello, World!\"},\n                {\"input\": \"Hello, World!\", \"data\": \"Existing Data\"},\n            ],\n            test_output=[\n                (\"output\", \"Hello, World!\"),  # No data provided, so trigger is returned\n                (\"output\", \"Existing Data\"),  # Data is provided, so data is returned.\n            ],\n            static_output=True,\n        )\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        yield \"output\", input_data.data or input_data.input\n"
    },
    {
      "id": "n2",
      "code": "class PrintToConsoleBlock(Block):\n    class Input(BlockSchema):\n        text: str = SchemaField(description=\"The text to print to the console.\")\n\n    class Output(BlockSchema):\n        status: str = SchemaField(description=\"The status of the print operation.\")\n\n    def __init__(self):\n        super().__init__(\n            id=\"f3b1c1b2-4c4f-4f0d-8d2f-4c4f0d8d2f4c\",\n            description=\"Print the given text to the console, this is used for a debugging purpose.\",\n            categories={BlockCategory.BASIC},\n            input_schema=PrintToConsoleBlock.Input,\n            output_schema=PrintToConsoleBlock.Output,\n            test_input={\"text\": \"Hello, World!\"},\n            test_output=(\"status\", \"printed\"),\n        )\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        print(\">>>>> Print: \", input_data.text)\n        yield \"status\", \"printed\"\n"
    },
    {
      "id": "n3",
      "code": "class FindInDictionaryBlock(Block):\n\n    class Input(BlockSchema):\n        input: Any = SchemaField(description=\"Dictionary to lookup from\")\n        key: str | int = SchemaField(description=\"Key to lookup in the dictionary\")\n\n    class Output(BlockSchema):\n        output: Any = SchemaField(description=\"Value found for the given key\")\n        missing: Any = SchemaField(\n            description=\"Value of the input that missing the key\"\n        )\n\n    def __init__(self):\n        super().__init__(\n            id=\"0e50422c-6dee-4145-83d6-3a5a392f65de\",\n            description=\"Lookup the given key in the input dictionary/object/list and return the value.\",\n            input_schema=FindInDictionaryBlock.Input,\n            output_schema=FindInDictionaryBlock.Output,\n            test_input=[\n                {\"input\": {\"apple\": 1, \"banana\": 2, \"cherry\": 3}, \"key\": \"banana\"},\n                {\"input\": {\"x\": 10, \"y\": 20, \"z\": 30}, \"key\": \"w\"},\n                {\"input\": [1, 2, 3], \"key\": 1},\n                {\"input\": [1, 2, 3], \"key\": 3},\n                {\"input\": MockObject(value=\"!!\", key=\"key\"), \"key\": \"key\"},\n                {\"input\": [{\"k1\": \"v1\"}, {\"k2\": \"v2\"}, {\"k1\": \"v3\"}], \"key\": \"k1\"},\n            ],\n            test_output=[\n                (\"output\", 2),\n                (\"missing\", {\"x\": 10, \"y\": 20, \"z\": 30}),\n                (\"output\", 2),\n                (\"missing\", [1, 2, 3]),\n                (\"output\", \"key\"),\n                (\"output\", [\"v1\", \"v3\"]),\n            ],\n            categories={BlockCategory.BASIC},\n        )\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        obj = input_data.input\n        key = input_data.key\n\n        if isinstance(obj, dict) and key in obj:\n            yield \"output\", obj[key]\n"
    },
    {
      "id": "n4",
      "code": "        elif isinstance(obj, list) and isinstance(key, int) and 0 <= key < len(obj):\n            yield \"output\", obj[key]\n"
    },
    {
      "id": "n5",
      "code": "        elif isinstance(obj, list) and isinstance(key, str):\n            if len(obj) == 0:\n                yield \"output\", []\n"
    },
    {
      "id": "n6",
      "code": "            elif isinstance(obj[0], dict) and key in obj[0]:\n                yield \"output\", [item[key] for item in obj if key in item]\n"
    },
    {
      "id": "n7",
      "code": "            else:\n                yield \"output\", [getattr(val, key) for val in obj if hasattr(val, key)]\n"
    },
    {
      "id": "n8",
      "code": "        elif isinstance(obj, object) and isinstance(key, str) and hasattr(obj, key):\n            yield \"output\", getattr(obj, key)\n"
    },
    {
      "id": "n9",
      "code": "        else:\n            yield \"missing\", input_data.input\n"
    },
    {
      "id": "n10",
      "code": "class AgentInputBlock(Block):\n    \"\"\"\n    This block is used to provide input to the graph.\n\n    It takes in a value, name, description, default values list and bool to limit selection to default values.\n\n    It Outputs the value passed as input.\n    \"\"\"\n\n    class Input(BlockSchema):\n        name: str = SchemaField(description=\"The name of the input.\")\n        value: Any = SchemaField(\n            description=\"The value to be passed as input.\",\n            default=None,\n        )\n        title: str | None = SchemaField(\n            description=\"The title of the input.\", default=None, advanced=True\n        )\n        description: str | None = SchemaField(\n            description=\"The description of the input.\",\n            default=None,\n            advanced=True,\n        )\n        placeholder_values: List[Any] = SchemaField(\n            description=\"The placeholder values to be passed as input.\",\n            default=[],\n            advanced=True,\n        )\n        limit_to_placeholder_values: bool = SchemaField(\n            description=\"Whether to limit the selection to placeholder values.\",\n            default=False,\n            advanced=True,\n        )\n        advanced: bool = SchemaField(\n            description=\"Whether to show the input in the advanced section, if the field is not required.\",\n            default=False,\n            advanced=True,\n        )\n        secret: bool = SchemaField(\n            description=\"Whether the input should be treated as a secret.\",\n            default=False,\n            advanced=True,\n        )\n\n    class Output(BlockSchema):\n        result: Any = SchemaField(description=\"The value passed as input.\")\n\n    def __init__(self):\n        super().__init__(\n            id=\"c0a8e994-ebf1-4a9c-a4d8-89d09c86741b\",\n            description=\"This block is used to provide input to the graph.\",\n            input_schema=AgentInputBlock.Input,\n            output_schema=AgentInputBlock.Output,\n            test_input=[\n                {\n                    \"value\": \"Hello, World!\",\n                    \"name\": \"input_1\",\n                    \"description\": \"This is a test input.\",\n                    \"placeholder_values\": [],\n                    \"limit_to_placeholder_values\": False,\n                },\n                {\n                    \"value\": \"Hello, World!\",\n                    \"name\": \"input_2\",\n                    \"description\": \"This is a test input.\",\n                    \"placeholder_values\": [\"Hello, World!\"],\n                    \"limit_to_placeholder_values\": True,\n                },\n            ],\n            test_output=[\n                (\"result\", \"Hello, World!\"),\n                (\"result\", \"Hello, World!\"),\n            ],\n            categories={BlockCategory.INPUT, BlockCategory.BASIC},\n            block_type=BlockType.INPUT,\n            static_output=True,\n        )\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        yield \"result\", input_data.value\n"
    },
    {
      "id": "n11",
      "code": "class AgentOutputBlock(Block):\n    \"\"\"\n    Records the output of the graph for users to see.\n\n    Behavior:\n        If `format` is provided and the `value` is of a type that can be formatted,\n        the block attempts to format the recorded_value using the `format`.\n        If formatting fails or no `format` is provided, the raw `value` is output.\n    \"\"\"\n\n    class Input(BlockSchema):\n        value: Any = SchemaField(\n            description=\"The value to be recorded as output.\",\n            default=None,\n            advanced=False,\n        )\n        name: str = SchemaField(description=\"The name of the output.\")\n        title: str | None = SchemaField(\n            description=\"The title of the output.\",\n            default=None,\n            advanced=True,\n        )\n        description: str | None = SchemaField(\n            description=\"The description of the output.\",\n            default=None,\n            advanced=True,\n        )\n        format: str = SchemaField(\n            description=\"The format string to be used to format the recorded_value.\",\n            default=\"\",\n            advanced=True,\n        )\n        advanced: bool = SchemaField(\n            description=\"Whether to treat the output as advanced.\",\n            default=False,\n            advanced=True,\n        )\n        secret: bool = SchemaField(\n            description=\"Whether the output should be treated as a secret.\",\n            default=False,\n            advanced=True,\n        )\n\n    class Output(BlockSchema):\n        output: Any = SchemaField(description=\"The value recorded as output.\")\n\n\n    def __init__(self):\n        super().__init__(\n            id=\"363ae599-353e-4804-937e-b2ee3cef3da4\",\n            description=\"Stores the output of the graph for users to see.\",\n            input_schema=AgentOutputBlock.Input,\n            output_schema=AgentOutputBlock.Output,\n            test_input=[\n                {\n                    \"value\": \"Hello, World!\",\n                    \"name\": \"output_1\",\n                    \"description\": \"This is a test output.\",\n                    \"format\": \"{{ output_1 }}!!\",\n                },\n                {\n                    \"value\": \"42\",\n                    \"name\": \"output_2\",\n                    \"description\": \"This is another test output.\",\n                    \"format\": \"{{ output_2 }}\",\n                },\n                {\n                    \"value\": MockObject(value=\"!!\", key=\"key\"),\n                    \"name\": \"output_3\",\n                    \"description\": \"This is a test output with a mock object.\",\n                    \"format\": \"{{ output_3 }}\",\n                },\n            ],\n            test_output=[\n                (\"output\", \"Hello, World!!!\"),\n                (\"output\", \"42\"),\n                (\"output\", MockObject(value=\"!!\", key=\"key\")),\n            ],\n            categories={BlockCategory.OUTPUT, BlockCategory.BASIC},\n            block_type=BlockType.OUTPUT,\n            static_output=True,\n        )\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        \"\"\"\n        Attempts to format the recorded_value using the fmt_string if provided.\n        If formatting fails or no fmt_string is given, returns the original recorded_value.\n        \"\"\"\n\n        if input_data.format:\n            try:\n                yield \"output\", formatter.format_string(\n                    input_data.format, {input_data.name: input_data.value}\n                )\n            except Exception as e:\n                yield \"output\", f\"Error: {e}, {input_data.value}\"\n        else:\n            yield \"output\", input_data.value\n"
    },
    {
      "id": "n12",
      "code": "class AddToDictionaryBlock(Block):\n\n    class Input(BlockSchema):\n        dictionary: dict[Any, Any] = SchemaField(\n            default={},\n            description=\"The dictionary to add the entry to. If not provided, a new dictionary will be created.\",\n        )\n        key: str = SchemaField(\n            default=\"\",\n            description=\"The key for the new entry.\",\n            placeholder=\"new_key\",\n            advanced=False,\n        )\n        value: Any = SchemaField(\n            default=None,\n            description=\"The value for the new entry.\",\n            placeholder=\"new_value\",\n            advanced=False,\n        )\n        entries: dict[Any, Any] = SchemaField(\n            default={},\n            description=\"The entries to add to the dictionary. This is the batch version of the `key` and `value` fields.\",\n            advanced=True,\n        )\n\n    class Output(BlockSchema):\n        updated_dictionary: dict = SchemaField(\n            description=\"The dictionary with the new entry added.\"\n        )\n        error: str = SchemaField(description=\"Error message if the operation failed.\")\n\n    def __init__(self):\n        super().__init__(\n            id=\"31d1064e-7446-4693-a7d4-65e5ca1180d1\",\n            description=\"Adds a new key-value pair to a dictionary. If no dictionary is provided, a new one is created.\",\n            categories={BlockCategory.BASIC},\n            input_schema=AddToDictionaryBlock.Input,\n            output_schema=AddToDictionaryBlock.Output,\n            test_input=[\n                {\n                    \"dictionary\": {\"existing_key\": \"existing_value\"},\n                    \"key\": \"new_key\",\n                    \"value\": \"new_value\",\n                },\n                {\"key\": \"first_key\", \"value\": \"first_value\"},\n                {\n                    \"dictionary\": {\"existing_key\": \"existing_value\"},\n                    \"entries\": {\"new_key\": \"new_value\", \"first_key\": \"first_value\"},\n                },\n            ],\n            test_output=[\n                (\n                    \"updated_dictionary\",\n                    {\"existing_key\": \"existing_value\", \"new_key\": \"new_value\"},\n                ),\n                (\"updated_dictionary\", {\"first_key\": \"first_value\"}),\n                (\n                    \"updated_dictionary\",\n                    {\n                        \"existing_key\": \"existing_value\",\n                        \"new_key\": \"new_value\",\n                        \"first_key\": \"first_value\",\n                    },\n                ),\n            ],\n        )\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        updated_dict = input_data.dictionary.copy()\n\n        if input_data.value is not None and input_data.key:\n            updated_dict[input_data.key] = input_data.value\n"
    },
    {
      "id": "n13",
      "code": "        for key, value in input_data.entries.items():\n            updated_dict[key] = value\n"
    },
    {
      "id": "n14",
      "code": "        yield \"updated_dictionary\", updated_dict\n"
    },
    {
      "id": "n15",
      "code": "class AddToListBlock(Block):\n\n    class Input(BlockSchema):\n        list: List[Any] = SchemaField(\n            default=[],\n            advanced=False,\n            description=\"The list to add the entry to. If not provided, a new list will be created.\",\n        )\n        entry: Any = SchemaField(\n            description=\"The entry to add to the list. Can be of any type (string, int, dict, etc.).\",\n            advanced=False,\n            default=None,\n        )\n        entries: List[Any] = SchemaField(\n            default=[],\n            description=\"The entries to add to the list. This is the batch version of the `entry` field.\",\n            advanced=True,\n        )\n        position: int | None = SchemaField(\n            default=None,\n            description=\"The position to insert the new entry. If not provided, the entry will be appended to the end of the list.\",\n        )\n\n    class Output(BlockSchema):\n        updated_list: List[Any] = SchemaField(\n            description=\"The list with the new entry added.\"\n        )\n        error: str = SchemaField(description=\"Error message if the operation failed.\")\n\n    def __init__(self):\n        super().__init__(\n            id=\"aeb08fc1-2fc1-4141-bc8e-f758f183a822\",\n            description=\"Adds a new entry to a list. The entry can be of any type. If no list is provided, a new one is created.\",\n            categories={BlockCategory.BASIC},\n            input_schema=AddToListBlock.Input,\n            output_schema=AddToListBlock.Output,\n            test_input=[\n                {\n                    \"list\": [1, \"string\", {\"existing_key\": \"existing_value\"}],\n                    \"entry\": {\"new_key\": \"new_value\"},\n                    \"position\": 1,\n                },\n                {\"entry\": \"first_entry\"},\n                {\"list\": [\"a\", \"b\", \"c\"], \"entry\": \"d\"},\n                {\n                    \"entry\": \"e\",\n                    \"entries\": [\"f\", \"g\"],\n                    \"list\": [\"a\", \"b\"],\n                    \"position\": 1,\n                },\n            ],\n            test_output=[\n                (\n                    \"updated_list\",\n                    [\n                        1,\n                        {\"new_key\": \"new_value\"},\n                        \"string\",\n                        {\"existing_key\": \"existing_value\"},\n                    ],\n                ),\n                (\"updated_list\", [\"first_entry\"]),\n                (\"updated_list\", [\"a\", \"b\", \"c\", \"d\"]),\n                (\"updated_list\", [\"a\", \"f\", \"g\", \"e\", \"b\"]),\n            ],\n        )\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        entries_added = input_data.entries.copy()\n\n        if input_data.entry:\n            entries_added.append(input_data.entry)\n\n        updated_list = input_data.list.copy()\n        if (pos := input_data.position) is not None:\n"
    },
    {
      "id": "n16",
      "code": "            updated_list = updated_list[:pos] + entries_added + updated_list[pos:]\n"
    },
    {
      "id": "n17",
      "code": "        else:\n            updated_list += entries_added\n"
    },
    {
      "id": "n18",
      "code": "        yield \"updated_list\", updated_list\n"
    },
    {
      "id": "n19",
      "code": "class NoteBlock(Block):\n    class Input(BlockSchema):\n        text: str = SchemaField(description=\"The text to display in the sticky note.\")\n\n    class Output(BlockSchema):\n        output: str = SchemaField(description=\"The text to display in the sticky note.\")\n\n    def __init__(self):\n        super().__init__(\n            id=\"cc10ff7b-7753-4ff2-9af6-9399b1a7eddc\",\n            description=\"This block is used to display a sticky note with the given text.\",\n            categories={BlockCategory.BASIC},\n            input_schema=NoteBlock.Input,\n            output_schema=NoteBlock.Output,\n            test_input={\"text\": \"Hello, World!\"},\n            test_output=[\n                (\"output\", \"Hello, World!\"),\n            ],\n            block_type=BlockType.NOTE,\n        )\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        yield \"output\", input_data.text\n"
    },
    {
      "id": "n20",
      "code": "class CreateDictionaryBlock(Block):\n\n    class Input(BlockSchema):\n        values: dict[str, Any] = SchemaField(\n            description=\"Key-value pairs to create the dictionary with\",\n            placeholder=\"e.g., {'name': 'Alice', 'age': 25}\",\n        )\n\n    class Output(BlockSchema):\n        dictionary: dict[str, Any] = SchemaField(\n            description=\"The created dictionary containing the specified key-value pairs\"\n        )\n        error: str = SchemaField(\n            description=\"Error message if dictionary creation failed\"\n        )\n\n    def __init__(self):\n        super().__init__(\n            id=\"b924ddf4-de4f-4b56-9a85-358930dcbc91\",\n            description=\"Creates a dictionary with the specified key-value pairs. Use this when you know all the values you want to add upfront.\",\n            categories={BlockCategory.DATA},\n            input_schema=CreateDictionaryBlock.Input,\n            output_schema=CreateDictionaryBlock.Output,\n            test_input=[\n                {\n                    \"values\": {\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"},\n                },\n                {\n                    \"values\": {\"numbers\": [1, 2, 3], \"active\": True, \"score\": 95.5},\n                },\n            ],\n            test_output=[\n                (\n                    \"dictionary\",\n                    {\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"},\n                ),\n                (\n                    \"dictionary\",\n                    {\"numbers\": [1, 2, 3], \"active\": True, \"score\": 95.5},\n                ),\n            ],\n        )\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        try:\n            # The values are already validated by Pydantic schema\n            yield \"dictionary\", input_data.values\n        except Exception as e:\n            yield \"error\", f\"Failed to create dictionary: {str(e)}\"\n"
    },
    {
      "id": "n21",
      "code": "class CreateListBlock(Block):\n\n    class Input(BlockSchema):\n        values: List[Any] = SchemaField(\n            description=\"A list of values to be combined into a new list.\",\n            placeholder=\"e.g., ['Alice', 25, True]\",\n        )\n\n    class Output(BlockSchema):\n        list: List[Any] = SchemaField(\n            description=\"The created list containing the specified values.\"\n        )\n        error: str = SchemaField(description=\"Error message if list creation failed.\")\n\n    def __init__(self):\n        super().__init__(\n            id=\"a912d5c7-6e00-4542-b2a9-8034136930e4\",\n            description=\"Creates a list with the specified values. Use this when you know all the values you want to add upfront.\",\n            categories={BlockCategory.DATA},\n            input_schema=CreateListBlock.Input,\n            output_schema=CreateListBlock.Output,\n            test_input=[\n                {\n                    \"values\": [\"Alice\", 25, True],\n                },\n                {\n                    \"values\": [1, 2, 3, \"four\", {\"key\": \"value\"}],\n                },\n            ],\n            test_output=[\n                (\n                    \"list\",\n                    [\"Alice\", 25, True],\n                ),\n                (\n                    \"list\",\n                    [1, 2, 3, \"four\", {\"key\": \"value\"}],\n                ),\n            ],\n        )\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        try:\n            # The values are already validated by Pydantic schema\n            yield \"list\", input_data.values\n        except Exception as e:\n            yield \"error\", f\"Failed to create list: {str(e)}\"\n"
    }
  ],
  "edges": [
    {
      "source": "n5",
      "target": "n6"
    },
    {
      "source": "n12",
      "target": "n14"
    },
    {
      "source": "n8",
      "target": "n9"
    },
    {
      "source": "n17",
      "target": "n18"
    },
    {
      "source": "n3",
      "target": "n9"
    },
    {
      "source": "n16",
      "target": "n18"
    },
    {
      "source": "n3",
      "target": "n4"
    },
    {
      "source": "n4",
      "target": "n9"
    },
    {
      "source": "n4",
      "target": "n5"
    },
    {
      "source": "n5",
      "target": "n7"
    },
    {
      "source": "n12",
      "target": "n13"
    },
    {
      "source": "n6",
      "target": "n8"
    },
    {
      "source": "n7",
      "target": "n8"
    },
    {
      "source": "n15",
      "target": "n16"
    },
    {
      "source": "n13",
      "target": "n14"
    },
    {
      "source": "n15",
      "target": "n17"
    }
  ]
}