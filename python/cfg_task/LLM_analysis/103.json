{
  "nodes": [
    {
      "id": "n0",
      "code": "import secrets\nfrom datetime import datetime, timedelta, timezone\nfrom typing import TYPE_CHECKING\n\nfrom pydantic import SecretStr\n"
    },
    {
      "id": "n1",
      "code": "if TYPE_CHECKING:\n    from backend.executor.database import DatabaseManager\n"
    },
    {
      "id": "n2",
      "code": "from autogpt_libs.utils.cache import thread_cached\nfrom autogpt_libs.utils.synchronize import RedisKeyedMutex\n"
    },
    {
      "id": "n3",
      "code": "from backend.data.model import (\n    APIKeyCredentials,\n    Credentials,\n    OAuth2Credentials,\n    OAuthState,\n    UserIntegrations,\n)\n\nfrom backend.util.settings import Settings\n"
    },
    {
      "id": "n4",
      "code": "settings = Settings()\n"
    },
    {
      "id": "n5",
      "code": "revid_credentials = APIKeyCredentials(\n    id=\"fdb7f412-f519-48d1-9b5f-d2f73d0e01fe\",\n    provider=\"revid\",\n    api_key=SecretStr(settings.secrets.revid_api_key),\n    title=\"Use Credits for Revid\",\n    expires_at=None,\n)\n"
    },
    {
      "id": "n6",
      "code": "ideogram_credentials = APIKeyCredentials(\n    id=\"760f84fc-b270-42de-91f6-08efe1b512d0\",\n    provider=\"ideogram\",\n    api_key=SecretStr(settings.secrets.ideogram_api_key),\n    title=\"Use Credits for Ideogram\",\n    expires_at=None,\n)\n"
    },
    {
      "id": "n7",
      "code": "replicate_credentials = APIKeyCredentials(\n    id=\"6b9fc200-4726-4973-86c9-cd526f5ce5db\",\n    provider=\"replicate\",\n    api_key=SecretStr(settings.secrets.replicate_api_key),\n    title=\"Use Credits for Replicate\",\n    expires_at=None,\n)\n"
    },
    {
      "id": "n8",
      "code": "openai_credentials = APIKeyCredentials(\n    id=\"53c25cb8-e3ee-465c-a4d1-e75a4c899c2a\",\n    provider=\"openai\",\n    api_key=SecretStr(settings.secrets.openai_api_key),\n    title=\"Use Credits for OpenAI\",\n    expires_at=None,\n)\n"
    },
    {
      "id": "n9",
      "code": "anthropic_credentials = APIKeyCredentials(\n    id=\"24e5d942-d9e3-4798-8151-90143ee55629\",\n    provider=\"anthropic\",\n    api_key=SecretStr(settings.secrets.anthropic_api_key),\n    title=\"Use Credits for Anthropic\",\n    expires_at=None,\n)\n"
    },
    {
      "id": "n10",
      "code": "groq_credentials = APIKeyCredentials(\n    id=\"4ec22295-8f97-4dd1-b42b-2c6957a02545\",\n    provider=\"groq\",\n    api_key=SecretStr(settings.secrets.groq_api_key),\n    title=\"Use Credits for Groq\",\n    expires_at=None,\n)\n"
    },
    {
      "id": "n11",
      "code": "did_credentials = APIKeyCredentials(\n    id=\"7f7b0654-c36b-4565-8fa7-9a52575dfae2\",\n    provider=\"d_id\",\n    api_key=SecretStr(settings.secrets.did_api_key),\n    title=\"Use Credits for D-ID\",\n    expires_at=None,\n)\n"
    },
    {
      "id": "n12",
      "code": "jina_credentials = APIKeyCredentials(\n    id=\"7f26de70-ba0d-494e-ba76-238e65e7b45f\",\n    provider=\"jina\",\n    api_key=SecretStr(settings.secrets.jina_api_key),\n    title=\"Use Credits for Jina\",\n    expires_at=None,\n)\n"
    },
    {
      "id": "n13",
      "code": "unreal_credentials = APIKeyCredentials(\n    id=\"66f20754-1b81-48e4-91d0-f4f0dd82145f\",\n    provider=\"unreal\",\n    api_key=SecretStr(settings.secrets.unreal_speech_api_key),\n    title=\"Use Credits for Unreal\",\n    expires_at=None,\n)\n"
    },
    {
      "id": "n14",
      "code": "open_router_credentials = APIKeyCredentials(\n    id=\"b5a0e27d-0c98-4df3-a4b9-10193e1f3c40\",\n    provider=\"open_router\",\n    api_key=SecretStr(settings.secrets.open_router_api_key),\n    title=\"Use Credits for Open Router\",\n    expires_at=None,\n)\n"
    },
    {
      "id": "n15",
      "code": "\n\n\n"
    },
    {
      "id": "n16",
      "code": "DEFAULT_CREDENTIALS = [\n    revid_credentials,\n    ideogram_credentials,\n    replicate_credentials,\n    openai_credentials,\n    anthropic_credentials,\n    groq_credentials,\n    did_credentials,\n    jina_credentials,\n    unreal_credentials,\n    open_router_credentials,\n]\n"
    },
    {
      "id": "n17",
      "code": "\n\n\n"
    },
    {
      "id": "n18",
      "code": "class IntegrationCredentialsStore:\n\n    def __init__(self):\n        from backend.data.redis import get_redis\n\n        self.locks = RedisKeyedMutex(get_redis())\n\n    @property\n    @thread_cached\n    def db_manager(self) -> \"DatabaseManager\":\n        from backend.executor.database import DatabaseManager\n        from backend.util.service import get_service_client\n\n        return get_service_client(DatabaseManager)\n"
    },
    {
      "id": "n19",
      "code": "    def add_creds(self, user_id: str, credentials: Credentials) -> None:\n        with self.locked_user_integrations(user_id):\n            if self.get_creds_by_id(user_id, credentials.id):\n                raise ValueError(\n                    f\"Can not re-create existing credentials #{credentials.id} \"\n                    f\"for user #{user_id}\"\n                )\n            self._set_user_integration_creds(\n                user_id, [*self.get_all_creds(user_id), credentials]\n            )\n"
    },
    {
      "id": "n20",
      "code": "    def get_all_creds(self, user_id: str) -> list[Credentials]:\n        users_credentials = self._get_user_integrations(user_id).credentials\n        all_credentials = users_credentials\n        if settings.secrets.revid_api_key:\n            all_credentials.append(revid_credentials)\n        if settings.secrets.ideogram_api_key:\n            all_credentials.append(ideogram_credentials)\n        if settings.secrets.groq_api_key:\n            all_credentials.append(groq_credentials)\n        if settings.secrets.replicate_api_key:\n            all_credentials.append(replicate_credentials)\n        if settings.secrets.openai_api_key:\n            all_credentials.append(openai_credentials)\n        if settings.secrets.anthropic_api_key:\n            all_credentials.append(anthropic_credentials)\n        if settings.secrets.did_api_key:\n            all_credentials.append(did_credentials)\n        if settings.secrets.jina_api_key:\n            all_credentials.append(jina_credentials)\n        if settings.secrets.unreal_speech_api_key:\n            all_credentials.append(unreal_credentials)\n        if settings.secrets.open_router_api_key:\n            all_credentials.append(open_router_credentials)\n        return all_credentials\n"
    },
    {
      "id": "n21",
      "code": "    def get_creds_by_id(self, user_id: str, credentials_id: str) -> Credentials | None:\n        all_credentials = self.get_all_creds(user_id)\n        return next((c for c in all_credentials if c.id == credentials_id), None)\n"
    },
    {
      "id": "n22",
      "code": "    def get_creds_by_provider(self, user_id: str, provider: str) -> list[Credentials]:\n        credentials = self.get_all_creds(user_id)\n        return [c for c in credentials if c.provider == provider]\n"
    },
    {
      "id": "n23",
      "code": "    def get_authorized_providers(self, user_id: str) -> list[str]:\n        credentials = self.get_all_creds(user_id)\n        return list(set(c.provider for c in credentials))\n"
    },
    {
      "id": "n24",
      "code": "    def update_creds(self, user_id: str, updated: Credentials) -> None:\n        with self.locked_user_integrations(user_id):\n            current = self.get_creds_by_id(user_id, updated.id)\n            if not current:\n                raise ValueError(\n                    f\"Credentials with ID {updated.id} \"\n                    f\"for user with ID {user_id} not found\"\n                )\n            if type(current) is not type(updated):\n                raise TypeError(\n                    f\"Can not update credentials with ID {updated.id} \"\n                    f\"from type {type(current)} \"\n                    f\"to type {type(updated)}\"\n                )\n\n            # Ensure no scopes are removed when updating credentials\n            if (\n                isinstance(updated, OAuth2Credentials)\n                and isinstance(current, OAuth2Credentials)\n                and not set(updated.scopes).issuperset(current.scopes)\n            ):\n                raise ValueError(\n                    f\"Can not update credentials with ID {updated.id} \"\n                    f\"and scopes {current.scopes} \"\n                    f\"to more restrictive set of scopes {updated.scopes}\"\n                )\n\n            # Update the credentials\n            updated_credentials_list = [\n                updated if c.id == updated.id else c\n                for c in self.get_all_creds(user_id)\n            ]\n            self._set_user_integration_creds(user_id, updated_credentials_list)\n"
    },
    {
      "id": "n25",
      "code": "    def delete_creds_by_id(self, user_id: str, credentials_id: str) -> None:\n        with self.locked_user_integrations(user_id):\n            filtered_credentials = [\n                c for c in self.get_all_creds(user_id) if c.id != credentials_id\n            ]\n            self._set_user_integration_creds(user_id, filtered_credentials)\n"
    },
    {
      "id": "n26",
      "code": "    def store_state_token(self, user_id: str, provider: str, scopes: list[str]) -> str:\n        token = secrets.token_urlsafe(32)\n        expires_at = datetime.now(timezone.utc) + timedelta(minutes=10)\n\n        state = OAuthState(\n            token=token,\n            provider=provider,\n            expires_at=int(expires_at.timestamp()),\n            scopes=scopes,\n        )\n\n        with self.locked_user_integrations(user_id):\n            user_integrations = self._get_user_integrations(user_id)\n            oauth_states = user_integrations.oauth_states\n            oauth_states.append(state)\n            user_integrations.oauth_states = oauth_states\n\n            self.db_manager.update_user_integrations(\n                user_id=user_id, data=user_integrations\n            )\n\n        return token\n"
    },
    {
      "id": "n27",
      "code": "    def get_any_valid_scopes_from_state_token(\n        self, user_id: str, token: str, provider: str\n    ) -> list[str]:\n        \"\"\"\n        Get the valid scopes from the OAuth state token. This will return any valid scopes\n        from any OAuth state token for the given provider. If no valid scopes are found,\n        an empty list is returned. DO NOT RELY ON THIS TOKEN TO AUTHENTICATE A USER, AS IT\n        IS TO CHECK IF THE USER HAS GIVEN PERMISSIONS TO THE APPLICATION BEFORE EXCHANGING\n        THE CODE FOR TOKENS.\n        \"\"\"\n        user_integrations = self._get_user_integrations(user_id)\n        oauth_states = user_integrations.oauth_states\n\n        now = datetime.now(timezone.utc)\n        valid_state = next(\n            (\n                state\n                for state in oauth_states\n                if state.token == token\n                and state.provider == provider\n                and state.expires_at > now.timestamp()\n            ),\n            None,\n        )\n\n        if valid_state:\n            return valid_state.scopes\n\n        return []\n"
    },
    {
      "id": "n28",
      "code": "    def verify_state_token(self, user_id: str, token: str, provider: str) -> bool:\n        with self.locked_user_integrations(user_id):\n            user_integrations = self._get_user_integrations(user_id)\n            oauth_states = user_integrations.oauth_states\n\n            now = datetime.now(timezone.utc)\n            valid_state = next(\n                (\n                    state\n                    for state in oauth_states\n                    if state.token == token\n                    and state.provider == provider\n                    and state.expires_at > now.timestamp()\n                ),\n                None,\n            )\n\n            if valid_state:\n                # Remove the used state\n                oauth_states.remove(valid_state)\n                user_integrations.oauth_states = oauth_states\n                self.db_manager.update_user_integrations(user_id, user_integrations)\n                return True\n\n        return False\n"
    },
    {
      "id": "n29",
      "code": "    def _set_user_integration_creds(\n        self, user_id: str, credentials: list[Credentials]\n    ) -> None:\n        integrations = self._get_user_integrations(user_id)\n        # Remove default credentials from the list\n        credentials = [c for c in credentials if c not in DEFAULT_CREDENTIALS]\n        integrations.credentials = credentials\n        self.db_manager.update_user_integrations(user_id, integrations)\n"
    },
    {
      "id": "n30",
      "code": "    def _get_user_integrations(self, user_id: str) -> UserIntegrations:\n        integrations: UserIntegrations = self.db_manager.get_user_integrations(\n            user_id=user_id\n        )\n        return integrations\n"
    },
    {
      "id": "n31",
      "code": "    def locked_user_integrations(self, user_id: str):\n        key = (f\"user:{user_id}\", \"integrations\")\n        return self.locks.locked(key)\n"
    }
  ],
  "edges": [
    {
      "source": "n21",
      "target": "n20"
    },
    {
      "source": "n31",
      "target": "n20"
    },
    {
      "source": "n20",
      "target": "n26"
    },
    {
      "source": "n23",
      "target": "n20"
    },
    {
      "source": "n18",
      "target": "n26"
    },
    {
      "source": "n20",
      "target": "n27"
    },
    {
      "source": "n20",
      "target": "n23"
    },
    {
      "source": "n18",
      "target": "n27"
    },
    {
      "source": "n18",
      "target": "n23"
    },
    {
      "source": "n30",
      "target": "n20"
    },
    {
      "source": "n19",
      "target": "n20"
    },
    {
      "source": "n24",
      "target": "n20"
    },
    {
      "source": "n25",
      "target": "n20"
    },
    {
      "source": "n20",
      "target": "n30"
    },
    {
      "source": "n20",
      "target": "n21"
    },
    {
      "source": "n18",
      "target": "n30"
    },
    {
      "source": "n29",
      "target": "n20"
    },
    {
      "source": "n20",
      "target": "n29"
    },
    {
      "source": "n18",
      "target": "n21"
    },
    {
      "source": "n22",
      "target": "n20"
    },
    {
      "source": "n18",
      "target": "n19"
    },
    {
      "source": "n18",
      "target": "n29"
    },
    {
      "source": "n20",
      "target": "n25"
    },
    {
      "source": "n20",
      "target": "n28"
    },
    {
      "source": "n18",
      "target": "n20"
    },
    {
      "source": "n18",
      "target": "n25"
    },
    {
      "source": "n18",
      "target": "n28"
    },
    {
      "source": "n26",
      "target": "n20"
    },
    {
      "source": "n28",
      "target": "n20"
    },
    {
      "source": "n27",
      "target": "n20"
    },
    {
      "source": "n20",
      "target": "n31"
    },
    {
      "source": "n20",
      "target": "n22"
    },
    {
      "source": "n20",
      "target": "n24"
    },
    {
      "source": "n18",
      "target": "n31"
    },
    {
      "source": "n18",
      "target": "n22"
    },
    {
      "source": "n18",
      "target": "n24"
    }
  ]
}