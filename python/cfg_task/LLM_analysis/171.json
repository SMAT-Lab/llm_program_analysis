{
  "nodes": [
    {
      "id": "n0",
      "code": "import asyncio\nimport builtins\nimport logging\nimport os\nimport threading\nimport time\nimport typing\nfrom abc import ABC, abstractmethod\nfrom enum import Enum\nfrom types import NoneType, UnionType\nfrom typing import (\n    Annotated,\n    Any,\n    Awaitable,\n    Callable,\n    Coroutine,\n    Dict,\n    FrozenSet,\n    Iterator,\n    List,\n    Set,\n    Tuple,\n    Type,\n    TypeVar,\n    Union,\n    cast,\n    get_args,\n    get_origin,\n)\n"
    },
    {
      "id": "n1",
      "code": "import Pyro5.api\nfrom pydantic import BaseModel\nfrom Pyro5 import api as pyro\nfrom Pyro5 import config as pyro_config\n\n\n\n"
    },
    {
      "id": "n2",
      "code": "from backend.data import db, redis\nfrom backend.util.process import AppProcess\nfrom backend.util.retry import conn_retry\nfrom backend.util.settings import Config, Secrets\n\n\n\n"
    },
    {
      "id": "n3",
      "code": "logger = logging.getLogger(__name__)\n\nT = TypeVar(\"T\")\n\nC = TypeVar(\"C\", bound=Callable)\n"
    },
    {
      "id": "n4",
      "code": "config = Config()\n\npyro_host = config.pyro_host\n\npyro_config.MAX_RETRIES = config.pyro_client_comm_retry  # type: ignore\npyro_config.COMMTIMEOUT = config.pyro_client_comm_timeout  # type: ignore\n"
    },
    {
      "id": "n5",
      "code": "def expose(func: C) -> C:\n    \"\"\"\n    Decorator to mark a method or class to be exposed for remote calls.\n\n    ## ⚠️ Gotcha\n    Aside from \"simple\" types, only Pydantic models are passed unscathed *if annotated*.\n    Any other passed or returned class objects are converted to dictionaries by Pyro.\n    \"\"\"\n\n    def wrapper(*args, **kwargs):\n        try:\n            return func(*args, **kwargs)\n"
    },
    {
      "id": "n6",
      "code": "        except Exception as e:\n            msg = f\"Error in {func.__name__}: {e.__str__()}\"\n            logger.exception(msg)\n            raise\n"
    },
    {
      "id": "n7",
      "code": "    register_pydantic_serializers(func)\n"
    },
    {
      "id": "n8",
      "code": "    return pyro.expose(wrapper)  # type: ignore\n"
    },
    {
      "id": "n9",
      "code": "def register_pydantic_serializers(func: Callable):\n    \"\"\"Register custom serializers and deserializers for annotated Pydantic models\"\"\"\n"
    },
    {
      "id": "n10",
      "code": "    for name, annotation in func.__annotations__.items():\n\n        try:\n            pydantic_types = _pydantic_models_from_type_annotation(annotation)\n"
    },
    {
      "id": "n11",
      "code": "        except Exception as e:\n            raise TypeError(f\"Error while exposing {func.__name__}: {e.__str__()}\")\n"
    },
    {
      "id": "n12",
      "code": "        for model in pydantic_types:\n            logger.debug(\n                f\"Registering Pyro (de)serializers for {func.__name__} annotation \"\n                f\"'{name}': {model.__qualname__}\"\n            )\n\n            pyro.register_class_to_dict(model, _make_custom_serializer(model))\n\n            pyro.register_dict_to_class(\n                model.__qualname__, _make_custom_deserializer(model)\n            )\n"
    },
    {
      "id": "n13",
      "code": "def _make_custom_serializer(model: Type[BaseModel]):\n\n    def custom_class_to_dict(obj):\n        data = {\n            \"__class__\": obj.__class__.__qualname__,\n            **obj.model_dump(),\n        }\n        logger.debug(f\"Serializing {obj.__class__.__qualname__} with data: {data}\")\n        return data\n\n    return custom_class_to_dict\n"
    },
    {
      "id": "n14",
      "code": "def _make_custom_deserializer(model: Type[BaseModel]):\n\n    def custom_dict_to_class(qualname, data: dict):\n        logger.debug(f\"Deserializing {model.__qualname__} from data: {data}\")\n        return model(**data)\n\n    return custom_dict_to_class\n"
    },
    {
      "id": "n15",
      "code": "class AppService(AppProcess, ABC):\n    shared_event_loop: asyncio.AbstractEventLoop\n    use_db: bool = False\n    use_redis: bool = False\n    use_supabase: bool = False\n\n    def __init__(self):\n        self.uri = None\n\n    @classmethod\n    @abstractmethod\n    def get_port(cls) -> int:\n        pass\n\n    @classmethod\n    def get_host(cls) -> str:\n        return os.environ.get(f\"{cls.service_name.upper()}_HOST\", config.pyro_host)\n\n    def run_service(self) -> None:\n        while True:\n            time.sleep(10)\n"
    },
    {
      "id": "n16",
      "code": "    def __run_async(self, coro: Coroutine[Any, Any, T]):\n        return asyncio.run_coroutine_threadsafe(coro, self.shared_event_loop)\n\n    def run_and_wait(self, coro: Coroutine[Any, Any, T]) -> T:\n        future = self.__run_async(coro)\n        return future.result()\n"
    },
    {
      "id": "n17",
      "code": "    def run(self):\n        self.shared_event_loop = asyncio.get_event_loop()\n\n        if self.use_db:\n            self.shared_event_loop.run_until_complete(db.connect())\n\n        if self.use_redis:\n            redis.connect()\n\n        if self.use_supabase:\n            from supabase import create_client\n\n            secrets = Secrets()\n            self.supabase = create_client(\n                secrets.supabase_url, secrets.supabase_service_role_key\n            )\n\n        # Initialize the async loop.\n        async_thread = threading.Thread(target=self.__start_async_loop)\n        async_thread.daemon = True\n        async_thread.start()\n\n        # Initialize pyro service\n        daemon_thread = threading.Thread(target=self.__start_pyro)\n        daemon_thread.daemon = True\n        daemon_thread.start()\n\n        # Run the main service (if it's not implemented, just sleep).\n        self.run_service()\n"
    },
    {
      "id": "n18",
      "code": "    def cleanup(self):\n        if self.use_db:\n            logger.info(f\"[{self.__class__.__name__}] ⏳ Disconnecting DB...\")\n            self.run_and_wait(db.disconnect())\n\n        if self.use_redis:\n            logger.info(f\"[{self.__class__.__name__}] ⏳ Disconnecting Redis...\")\n            redis.disconnect()\n"
    },
    {
      "id": "n19",
      "code": "    @conn_retry(\"Pyro\", \"Starting Pyro Service\")\n    def __start_pyro(self):\n        maximum_connection_thread_count = max(\n            Pyro5.config.THREADPOOL_SIZE,\n            config.num_node_workers * config.num_graph_workers,\n        )\n\n        Pyro5.config.THREADPOOL_SIZE = maximum_connection_thread_count  # type: ignore\n        daemon = Pyro5.api.Daemon(host=config.pyro_host, port=self.get_port())\n        self.uri = daemon.register(self, objectId=self.service_name)\n        logger.info(f\"[{self.service_name}] Connected to Pyro; URI = {self.uri}\")\n        daemon.requestLoop()\n"
    },
    {
      "id": "n20",
      "code": "    def __start_async_loop(self):\n        self.shared_event_loop.run_forever()\n"
    },
    {
      "id": "n21",
      "code": "# --------- UTILITIES --------- #\n\n\n\n"
    },
    {
      "id": "n22",
      "code": "AS = TypeVar(\"AS\", bound=AppService)\n\n\n\n\n"
    },
    {
      "id": "n23",
      "code": "class PyroClient:\n    proxy: Pyro5.api.Proxy\n"
    },
    {
      "id": "n24",
      "code": "def close_service_client(client: AppService) -> None:\n\n    if isinstance(client, PyroClient):\n        client.proxy._pyroRelease()\n\n    else:\n        raise RuntimeError(f\"Client {client.__class__} is not a Pyro client.\")\n"
    },
    {
      "id": "n25",
      "code": "def get_service_client(service_type: Type[AS]) -> AS:\n    service_name = service_type.service_name\n\n    class DynamicClient(PyroClient):\n        @conn_retry(\"Pyro\", f\"Connecting to [{service_name}]\")\n\n        def __init__(self):\n            host = os.environ.get(f\"{service_name.upper()}_HOST\", pyro_host)\n            uri = f\"PYRO:{service_type.service_name}@{host}:{service_type.get_port()}\"\n            logger.debug(f\"Connecting to service [{service_name}]. URI = {uri}\")\n            self.proxy = Pyro5.api.Proxy(uri)\n            # Attempt to bind to ensure the connection is established\n            self.proxy._pyroBind()\n            logger.debug(f\"Successfully connected to service [{service_name}]\")\n\n        def __getattr__(self, name: str) -> Callable[..., Any]:\n            res = getattr(self.proxy, name)\n            return res\n\n    return cast(AS, DynamicClient())\n"
    },
    {
      "id": "n26",
      "code": "builtin_types = [*vars(builtins).values(), NoneType, Enum]\n"
    },
    {
      "id": "n27",
      "code": "def _pydantic_models_from_type_annotation(annotation) -> Iterator[type[BaseModel]]:\n    # Peel Annotated parameters\n\n    if (origin := get_origin(annotation)) and origin is Annotated:\n        annotation = get_args(annotation)[0]\n\n    origin = get_origin(annotation)\n    args = get_args(annotation)\n\n    if origin in (\n        Union,\n        UnionType,\n        list,\n        List,\n        tuple,\n        Tuple,\n        set,\n        Set,\n        frozenset,\n        FrozenSet,\n    ):\n"
    },
    {
      "id": "n28",
      "code": "        for arg in args:\n            yield from _pydantic_models_from_type_annotation(arg)\n"
    },
    {
      "id": "n29",
      "code": "    elif origin in (dict, Dict):\n        key_type, value_type = args\n        yield from _pydantic_models_from_type_annotation(key_type)\n        yield from _pydantic_models_from_type_annotation(value_type)\n"
    },
    {
      "id": "n30",
      "code": "    elif origin in (Awaitable, Coroutine):\n        # For coroutines and awaitables, check the return type\n        return_type = args[-1]\n        yield from _pydantic_models_from_type_annotation(return_type)\n"
    },
    {
      "id": "n31",
      "code": "    else:\n        annotype = annotation if origin is None else origin\n\n        # Exclude generic types and aliases\n        if (\n            annotype is not None\n            and not hasattr(typing, getattr(annotype, \"__name__\", \"\"))\n            and isinstance(annotype, type)\n        ):\n"
    },
    {
      "id": "n32",
      "code": "            if issubclass(annotype, BaseModel):\n                yield annotype\n"
    },
    {
      "id": "n33",
      "code": "            elif annotype not in builtin_types and not issubclass(annotype, Enum):\n                raise TypeError(f\"Unsupported type encountered: {annotype}\")\n"
    }
  ],
  "edges": [
    {
      "source": "n5",
      "target": "n6"
    },
    {
      "source": "n5",
      "target": "n8"
    },
    {
      "source": "n27",
      "target": "n29"
    },
    {
      "source": "n12",
      "target": "n10"
    },
    {
      "source": "n27",
      "target": "n28"
    },
    {
      "source": "n27",
      "target": "n30"
    },
    {
      "source": "n27",
      "target": "n31"
    },
    {
      "source": "n9",
      "target": "n10"
    },
    {
      "source": "n31",
      "target": "n32"
    },
    {
      "source": "n10",
      "target": "n12"
    },
    {
      "source": "n10",
      "target": "n11"
    },
    {
      "source": "n6",
      "target": "n8"
    },
    {
      "source": "n7",
      "target": "n8"
    },
    {
      "source": "n31",
      "target": "n33"
    }
  ]
}