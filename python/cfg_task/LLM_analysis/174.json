{
  "nodes": [
    {
      "id": "n0",
      "code": "# -*- coding: utf-8 -*-\nfrom collections import deque\nfrom enum import Enum\n\n\n\n\n"
    },
    {
      "id": "n1",
      "code": "class State(Enum):\n    unvisited = 0\n    visited = 1\n"
    },
    {
      "id": "n2",
      "code": "class Graph(object):\n\n\n    def bfs(self, source, dest):\n        if source is None:\n            return False\n"
    },
    {
      "id": "n3",
      "code": "        queue = deque()\n        queue.append(source)\n        source.visit_state = State.visited\n"
    },
    {
      "id": "n4",
      "code": "        while queue:\n            node = queue.popleft()\n"
    },
    {
      "id": "n5",
      "code": "            print(node)\n            if dest is node:\n                return True\n"
    },
    {
      "id": "n6",
      "code": "            for adjacent_node in node.adj_nodes.values():\n                if adjacent_node.visit_state == State.unvisited:\n                    queue.append(adjacent_node)\n                    adjacent_node.visit_state = State.visited\n"
    },
    {
      "id": "n7",
      "code": "        return False\n"
    },
    {
      "id": "n8",
      "code": "class Person(object):\n\n    def __init__(self, id, name):\n        self.id = id\n        self.name = name\n        self.friend_ids = []\n"
    },
    {
      "id": "n9",
      "code": "class LookupService(object):\n\n    def __init__(self):\n        self.lookup = {}  # key: person_id, value: person_server\n\n    def get_person(self, person_id):\n        person_server = self.lookup[person_id]\n        return person_server.people[person_id]\n"
    },
    {
      "id": "n10",
      "code": "class PersonServer(object):\n\n    def __init__(self):\n        self.people = {}  # key: person_id, value: person\n\n    def get_people(self, ids):\n        results = []\n"
    },
    {
      "id": "n11",
      "code": "        for id in ids:\n            if id in self.people:\n                results.append(self.people[id])\n"
    },
    {
      "id": "n12",
      "code": "        return results\n"
    },
    {
      "id": "n13",
      "code": "class UserGraphService(object):\n\n    def __init__(self, person_ids, lookup):\n        self.lookup = lookup\n        self.person_ids = person_ids\n        self.visited_ids = set()\n\n    def bfs(self, source, dest):\n        # Use self.visited_ids to track visited nodes\n        # Use self.lookup to translate a person_id to a Person\n        pass\n"
    }
  ],
  "edges": [
    {
      "source": "n5",
      "target": "n6"
    },
    {
      "source": "n2",
      "target": "n7"
    },
    {
      "source": "n11",
      "target": "n12"
    },
    {
      "source": "n4",
      "target": "n7"
    },
    {
      "source": "n3",
      "target": "n4"
    },
    {
      "source": "n6",
      "target": "n4"
    },
    {
      "source": "n4",
      "target": "n5"
    },
    {
      "source": "n5",
      "target": "n7"
    },
    {
      "source": "n10",
      "target": "n11"
    },
    {
      "source": "n11",
      "target": "n11"
    },
    {
      "source": "n2",
      "target": "n3"
    }
  ]
}