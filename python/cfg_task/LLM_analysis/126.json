{
  "nodes": [
    {
      "id": "n0",
      "code": "def find_previous_power_of_two(number: int) -> int:\n    \"\"\"\n    Find the largest power of two that is less than or equal to a given integer.\n    https://stackoverflow.com/questions/1322510\n\n    >>> [find_previous_power_of_two(i) for i in range(18)]\n    [0, 1, 2, 2, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 16, 16]\n    >>> find_previous_power_of_two(-5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    >>> find_previous_power_of_two(10.5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    \"\"\"\n\n    if not isinstance(number, int) or number < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n\n    if number == 0:\n        return 0\n"
    },
    {
      "id": "n1",
      "code": "    power = 1\n"
    },
    {
      "id": "n2",
      "code": "    while power <= number:\n        power <<= 1  # Equivalent to multiplying by 2\n"
    },
    {
      "id": "n3",
      "code": "    return power >> 1 if number > 1 else 1\n"
    },
    {
      "id": "n4",
      "code": "if __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"
    }
  ],
  "edges": [
    {
      "source": "n0",
      "target": "n3"
    },
    {
      "source": "n0",
      "target": "n1"
    },
    {
      "source": "n2",
      "target": "n2"
    },
    {
      "source": "n1",
      "target": "n2"
    },
    {
      "source": "n2",
      "target": "n3"
    }
  ]
}