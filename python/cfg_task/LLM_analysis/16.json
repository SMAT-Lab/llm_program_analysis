{
  "nodes": [
    {
      "id": "n0",
      "code": "from backend.blocks.hubspot._auth import (\n    HubSpotCredentials,\n    HubSpotCredentialsField,\n    HubSpotCredentialsInput,\n)\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\n\nfrom backend.data.model import SchemaField\n\nfrom backend.util.request import requests\n\n\n\n\n"
    },
    {
      "id": "n1",
      "code": "class HubSpotContactBlock(Block):\n\n    class Input(BlockSchema):\n        credentials: HubSpotCredentialsInput = HubSpotCredentialsField()\n        operation: str = SchemaField(\n            description=\"Operation to perform (create, update, get)\", default=\"get\"\n        )\n        contact_data: dict = SchemaField(\n            description=\"Contact data for create/update operations\", default={}\n        )\n        email: str = SchemaField(\n            description=\"Email address for get/update operations\", default=\"\"\n        )\n\n    class Output(BlockSchema):\n        contact: dict = SchemaField(description=\"Contact information\")\n        status: str = SchemaField(description=\"Operation status\")\n\n    def __init__(self):\n        super().__init__(\n            id=\"5267326e-c4c1-4016-9f54-4e72ad02f813\",\n            description=\"Manages HubSpot contacts - create, update, and retrieve contact information\",\n            categories={BlockCategory.CRM},\n            input_schema=HubSpotContactBlock.Input,\n            output_schema=HubSpotContactBlock.Output,\n        )\n\n    def run(\n        self, input_data: Input, *, credentials: HubSpotCredentials, **kwargs\n    ) -> BlockOutput:\n\n        base_url = \"https://api.hubapi.com/crm/v3/objects/contacts\"\n        headers = {\n            \"Authorization\": f\"Bearer {credentials.api_key.get_secret_value()}\",\n            \"Content-Type\": \"application/json\",\n        }\n"
    },
    {
      "id": "n2",
      "code": "        if input_data.operation == \"create\":\n            response = requests.post(\n                base_url, headers=headers, json={\"properties\": input_data.contact_data}\n            )\n            result = response.json()\n            yield \"contact\", result\n            yield \"status\", \"created\"\n\n"
    },
    {
      "id": "n3",
      "code": "        elif input_data.operation == \"get\":\n            # Search for contact by email\n            search_url = f\"{base_url}/search\"\n            search_data = {\n                \"filterGroups\": [\n                    {\n                        \"filters\": [\n                            {\n                                \"propertyName\": \"email\",\n                                \"operator\": \"EQ\",\n                                \"value\": input_data.email,\n                            }\n                        ]\n                    }\n                ]\n            }\n            response = requests.post(search_url, headers=headers, json=search_data)\n            result = response.json()\n            yield \"contact\", result.get(\"results\", [{}])[0]\n            yield \"status\", \"retrieved\"\n\n"
    },
    {
      "id": "n4",
      "code": "        elif input_data.operation == \"update\":\n            search_response = requests.post(\n                f\"{base_url}/search\",\n                headers=headers,\n                json={\n                    \"filterGroups\": [\n                        {\n                            \"filters\": [\n                                {\n                                    \"propertyName\": \"email\",\n                                    \"operator\": \"EQ\",\n                                    \"value\": input_data.email,\n                                }\n                            ]\n                        }\n                    ]\n                },\n            )\n            contact_id = search_response.json().get(\"results\", [{}])[0].get(\"id\")\n\n            if contact_id:\n                response = requests.patch(\n                    f\"{base_url}/{contact_id}\",\n                    headers=headers,\n                    json={\"properties\": input_data.contact_data},\n                )\n                result = response.json()\n                yield \"contact\", result\n                yield \"status\", \"updated\"\n            else:\n                yield \"contact\", {}\n                yield \"status\", \"contact_not_found\"\n\n"
    },
    {
      "id": "n5",
      "code": "    class Input(BlockSchema):\n\n        credentials: HubSpotCredentialsInput = HubSpotCredentialsField()\n\n        operation: str = SchemaField(\n            description=\"Operation to perform (create, update, get)\", default=\"get\"\n        )\n\n        contact_data: dict = SchemaField(\n            description=\"Contact data for create/update operations\", default={}\n        )\n\n        email: str = SchemaField(\n            description=\"Email address for get/update operations\", default=\"\"\n        )\n"
    },
    {
      "id": "n6",
      "code": "    class Output(BlockSchema):\n        contact: dict = SchemaField(description=\"Contact information\")\n        status: str = SchemaField(description=\"Operation status\")\n"
    },
    {
      "id": "n7",
      "code": "    def __init__(self):\n        super().__init__(\n            id=\"5267326e-c4c1-4016-9f54-4e72ad02f813\",\n            description=\"Manages HubSpot contacts - create, update, and retrieve contact information\",\n            categories={BlockCategory.CRM},\n            input_schema=HubSpotContactBlock.Input,\n            output_schema=HubSpotContactBlock.Output,\n        )\n"
    },
    {
      "id": "n8",
      "code": "    def run(\n        self, input_data: Input, *, credentials: HubSpotCredentials, **kwargs\n    ) -> BlockOutput:\n\n        base_url = \"https://api.hubapi.com/crm/v3/objects/contacts\"\n        headers = {\n            \"Authorization\": f\"Bearer {credentials.api_key.get_secret_value()}\",\n            \"Content-Type\": \"application/json\",\n        }\n"
    },
    {
      "id": "n9",
      "code": "        if input_data.operation == \"create\":\n            response = requests.post(\n                base_url, headers=headers, json={\"properties\": input_data.contact_data}\n            )\n            result = response.json()\n            yield \"contact\", result\n            yield \"status\", \"created\"\n\n"
    },
    {
      "id": "n10",
      "code": "        elif input_data.operation == \"get\":\n            # Search for contact by email\n            search_url = f\"{base_url}/search\"\n            search_data = {\n                \"filterGroups\": [\n                    {\n                        \"filters\": [\n                            {\n                                \"propertyName\": \"email\",\n                                \"operator\": \"EQ\",\n                                \"value\": input_data.email,\n                            }\n                        ]\n                    }\n                ]\n            }\n            response = requests.post(search_url, headers=headers, json=search_data)\n            result = response.json()\n            yield \"contact\", result.get(\"results\", [{}])[0]\n            yield \"status\", \"retrieved\"\n\n"
    },
    {
      "id": "n11",
      "code": "        elif input_data.operation == \"update\":\n            search_response = requests.post(\n                f\"{base_url}/search\",\n                headers=headers,\n                json={\n                    \"filterGroups\": [\n                        {\n                            \"filters\": [\n                                {\n                                    \"propertyName\": \"email\",\n                                    \"operator\": \"EQ\",\n                                    \"value\": input_data.email,\n                                }\n                            ]\n                        }\n                    ]\n                },\n            )\n\n            contact_id = search_response.json().get(\"results\", [{}])[0].get(\"id\")\n"
    },
    {
      "id": "n12",
      "code": "            if contact_id:\n                response = requests.patch(\n                    f\"{base_url}/{contact_id}\",\n                    headers=headers,\n                    json={\"properties\": input_data.contact_data},\n                )\n                result = response.json()\n                yield \"contact\", result\n                yield \"status\", \"updated\"\n"
    },
    {
      "id": "n13",
      "code": "            else:\n                yield \"contact\", {}\n                yield \"status\", \"contact_not_found\"\n"
    }
  ],
  "edges": [
    {
      "source": "n1",
      "target": "n3"
    },
    {
      "source": "n8",
      "target": "n10"
    },
    {
      "source": "n8",
      "target": "n9"
    },
    {
      "source": "n1",
      "target": "n4"
    },
    {
      "source": "n1",
      "target": "n2"
    },
    {
      "source": "n11",
      "target": "n12"
    },
    {
      "source": "n11",
      "target": "n13"
    },
    {
      "source": "n8",
      "target": "n11"
    }
  ]
}