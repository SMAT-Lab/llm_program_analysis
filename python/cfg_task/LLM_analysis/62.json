{
  "nodes": [
    {
      "id": "n0",
      "code": "from urllib.parse import parse_qs, urlparse\n\nfrom youtube_transcript_api import YouTubeTranscriptApi\nfrom youtube_transcript_api.formatters import TextFormatter\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n\n\n\n"
    },
    {
      "id": "n1",
      "code": "class TranscribeYoutubeVideoBlock(Block):\n    class Input(BlockSchema):\n        youtube_url: str = SchemaField(\n            title=\"YouTube URL\",\n            description=\"The URL of the YouTube video to transcribe\",\n            placeholder=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\",\n        )\n\n    class Output(BlockSchema):\n        video_id: str = SchemaField(description=\"The extracted YouTube video ID\")\n        transcript: str = SchemaField(description=\"The transcribed text of the video\")\n        error: str = SchemaField(\n            description=\"Any error message if the transcription fails\"\n        )\n\n    def __init__(self):\n        super().__init__(\n            id=\"f3a8f7e1-4b1d-4e5f-9f2a-7c3d5a2e6b4c\",\n            input_schema=TranscribeYoutubeVideoBlock.Input,\n            output_schema=TranscribeYoutubeVideoBlock.Output,\n            description=\"Transcribes a YouTube video.\",\n            categories={BlockCategory.SOCIAL},\n            test_input={\"youtube_url\": \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\"},\n            test_output=[\n                (\"video_id\", \"dQw4w9WgXcQ\"),\n                (\n                    \"transcript\",\n                    \"Never gonna give you up\\nNever gonna let you down\",\n                ),\n            ],\n            test_mock={\n                \"get_transcript\": lambda video_id: [\n                    {\"text\": \"Never gonna give you up\"},\n                    {\"text\": \"Never gonna let you down\"},\n                ],\n            },\n        )\n"
    },
    {
      "id": "n2",
      "code": "    @staticmethod\n    def extract_video_id(url: str) -> str:\n        parsed_url = urlparse(url)\n        if parsed_url.netloc == \"youtu.be\":\n            return parsed_url.path[1:]\n        if parsed_url.netloc in (\"www.youtube.com\", \"youtube.com\"):\n            if parsed_url.path == \"/watch\":\n                p = parse_qs(parsed_url.query)\n                return p[\"v\"][0]\n            if parsed_url.path[:7] == \"/embed/\":\n                return parsed_url.path.split(\"/\")[2]\n            if parsed_url.path[:3] == \"/v/\":\n                return parsed_url.path.split(\"/\")[2]\n        raise ValueError(f\"Invalid YouTube URL: {url}\")\n"
    },
    {
      "id": "n3",
      "code": "    @staticmethod\n    def get_transcript(video_id: str):\n        try:\n            transcript_list = YouTubeTranscriptApi.list_transcripts(video_id)\n\n            if not transcript_list:\n                raise ValueError(f\"No transcripts found for the video: {video_id}\")\n\n            for transcript in transcript_list:\n                first_transcript = transcript_list.find_transcript(\n                    [transcript.language_code]\n                )\n                return YouTubeTranscriptApi.get_transcript(\n                    video_id, languages=[first_transcript.language_code]\n                )\n\n        except Exception:\n            raise ValueError(f\"No transcripts found for the video: {video_id}\")\n"
    },
    {
      "id": "n4",
      "code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        video_id = self.extract_video_id(input_data.youtube_url)\n        yield \"video_id\", video_id\n\n        transcript = self.get_transcript(video_id)\n        formatter = TextFormatter()\n        transcript_text = formatter.format_transcript(transcript)\n\n        yield \"transcript\", transcript_text\n"
    },
    {
      "id": "n5",
      "code": "    class Input(BlockSchema):\n        youtube_url: str = SchemaField(\n            title=\"YouTube URL\",\n            description=\"The URL of the YouTube video to transcribe\",\n            placeholder=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\",\n        )\n"
    },
    {
      "id": "n6",
      "code": "    class Output(BlockSchema):\n\n        video_id: str = SchemaField(description=\"The extracted YouTube video ID\")\n        transcript: str = SchemaField(description=\"The transcribed text of the video\")\n\n        error: str = SchemaField(\n            description=\"Any error message if the transcription fails\"\n        )\n"
    },
    {
      "id": "n7",
      "code": "    def __init__(self):\n        super().__init__(\n            id=\"f3a8f7e1-4b1d-4e5f-9f2a-7c3d5a2e6b4c\",\n            input_schema=TranscribeYoutubeVideoBlock.Input,\n            output_schema=TranscribeYoutubeVideoBlock.Output,\n            description=\"Transcribes a YouTube video.\",\n            categories={BlockCategory.SOCIAL},\n            test_input={\"youtube_url\": \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\"},\n            test_output=[\n                (\"video_id\", \"dQw4w9WgXcQ\"),\n                (\n                    \"transcript\",\n                    \"Never gonna give you up\\nNever gonna let you down\",\n                ),\n            ],\n            test_mock={\n                \"get_transcript\": lambda video_id: [\n                    {\"text\": \"Never gonna give you up\"},\n                    {\"text\": \"Never gonna let you down\"},\n                ],\n            },\n        )\n"
    },
    {
      "id": "n8",
      "code": "    @staticmethod\n    def extract_video_id(url: str) -> str:\n\n        parsed_url = urlparse(url)\n"
    },
    {
      "id": "n9",
      "code": "        if parsed_url.netloc == \"youtu.be\":\n            return parsed_url.path[1:]\n"
    },
    {
      "id": "n10",
      "code": "        if parsed_url.netloc in (\"www.youtube.com\", \"youtube.com\"):\n"
    },
    {
      "id": "n11",
      "code": "            if parsed_url.path == \"/watch\":\n                p = parse_qs(parsed_url.query)\n                return p[\"v\"][0]\n"
    },
    {
      "id": "n12",
      "code": "            if parsed_url.path[:7] == \"/embed/\":\n                return parsed_url.path.split(\"/\")[2]\n"
    },
    {
      "id": "n13",
      "code": "            if parsed_url.path[:3] == \"/v/\":\n                return parsed_url.path.split(\"/\")[2]\n"
    },
    {
      "id": "n14",
      "code": "        raise ValueError(f\"Invalid YouTube URL: {url}\")\n"
    },
    {
      "id": "n15",
      "code": "    @staticmethod\n    def get_transcript(video_id: str):\n\n        try:\n            transcript_list = YouTubeTranscriptApi.list_transcripts(video_id)\n\n            if not transcript_list:\n                raise ValueError(f\"No transcripts found for the video: {video_id}\")\n"
    },
    {
      "id": "n16",
      "code": "            for transcript in transcript_list:\n                first_transcript = transcript_list.find_transcript(\n                    [transcript.language_code]\n                )\n                return YouTubeTranscriptApi.get_transcript(\n                    video_id, languages=[first_transcript.language_code]\n                )\n"
    },
    {
      "id": "n17",
      "code": "        except Exception:\n            raise ValueError(f\"No transcripts found for the video: {video_id}\")\n"
    },
    {
      "id": "n18",
      "code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        video_id = self.extract_video_id(input_data.youtube_url)\n        yield \"video_id\", video_id\n\n        transcript = self.get_transcript(video_id)\n        formatter = TextFormatter()\n        transcript_text = formatter.format_transcript(transcript)\n\n        yield \"transcript\", transcript_text\n"
    }
  ],
  "edges": [
    {
      "source": "n1",
      "target": "n3"
    },
    {
      "source": "n2",
      "target": "n4"
    },
    {
      "source": "n8",
      "target": "n10"
    },
    {
      "source": "n8",
      "target": "n9"
    },
    {
      "source": "n3",
      "target": "n4"
    },
    {
      "source": "n10",
      "target": "n13"
    },
    {
      "source": "n1",
      "target": "n2"
    },
    {
      "source": "n10",
      "target": "n12"
    },
    {
      "source": "n10",
      "target": "n11"
    },
    {
      "source": "n10",
      "target": "n14"
    },
    {
      "source": "n15",
      "target": "n16"
    },
    {
      "source": "n15",
      "target": "n17"
    }
  ]
}