{
  "nodes": [
    {
      "id": "n0",
      "code": "import asyncio\nimport logging\nfrom collections import defaultdict\nfrom typing import TYPE_CHECKING, Annotated, Any, Sequence\n\nimport pydantic\nfrom autogpt_libs.auth.middleware import auth_middleware\nfrom autogpt_libs.feature_flag.client import feature_flag\nfrom autogpt_libs.utils.cache import thread_cached\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom typing_extensions import Optional, TypedDict\n\nimport backend.data.block\nimport backend.server.integrations.router\nimport backend.server.routers.analytics\nfrom backend.data import execution as execution_db\nfrom backend.data import graph as graph_db\n\nfrom backend.data.api_key import (\n    APIKeyError,\n    APIKeyNotFoundError,\n    APIKeyPermissionError,\n    APIKeyWithoutHash,\n    generate_api_key,\n    get_api_key_by_id,\n    list_user_api_keys,\n    revoke_api_key,\n    suspend_api_key,\n    update_api_key_permissions,\n)\n\nfrom backend.data.block import BlockInput, CompletedBlockOutput\nfrom backend.data.credit import get_block_costs, get_user_credit_model\nfrom backend.data.user import get_or_create_user\n\nfrom backend.executor import ExecutionManager, ExecutionScheduler, scheduler\nfrom backend.integrations.creds_manager import IntegrationCredentialsManager\n\nfrom backend.integrations.webhooks.graph_lifecycle_hooks import (\n    on_graph_activate,\n    on_graph_deactivate,\n)\n\nfrom backend.server.model import (\n    CreateAPIKeyRequest,\n    CreateAPIKeyResponse,\n    CreateGraph,\n    SetGraphActiveVersion,\n    UpdatePermissionsRequest,\n)\n\nfrom backend.server.utils import get_user_id\nfrom backend.util.service import get_service_client\nfrom backend.util.settings import Settings\n\nif TYPE_CHECKING:\n    from backend.data.model import Credentials\n"
    },
    {
      "id": "n1",
      "code": "@thread_cached\n\ndef execution_manager_client() -> ExecutionManager:\n    return get_service_client(ExecutionManager)\n"
    },
    {
      "id": "n2",
      "code": "@thread_cached\n\ndef execution_scheduler_client() -> ExecutionScheduler:\n    return get_service_client(ExecutionScheduler)\n"
    },
    {
      "id": "n3",
      "code": "settings = Settings()\nlogger = logging.getLogger(__name__)\nintegration_creds_manager = IntegrationCredentialsManager()\n\n_user_credit_model = get_user_credit_model()\n\nv1_router = APIRouter()\n"
    },
    {
      "id": "n4",
      "code": "v1_router.include_router(\n    backend.server.integrations.router.router,\n    prefix=\"/integrations\",\n    tags=[\"integrations\"],\n)\n\nv1_router.include_router(\n    backend.server.routers.analytics.router,\n    prefix=\"/analytics\",\n    tags=[\"analytics\"],\n    dependencies=[Depends(auth_middleware)],\n)\n"
    },
    {
      "id": "n5",
      "code": "@v1_router.post(\"/auth/user\", tags=[\"auth\"], dependencies=[Depends(auth_middleware)])\nasync def get_or_create_user_route(user_data: dict = Depends(auth_middleware)):\n\n    user = await get_or_create_user(user_data)\n    return user.model_dump()\n"
    },
    {
      "id": "n6",
      "code": "@v1_router.get(path=\"/blocks\", tags=[\"blocks\"], dependencies=[Depends(auth_middleware)])\ndef get_graph_blocks() -> Sequence[dict[Any, Any]]:\n\n    blocks = [block() for block in backend.data.block.get_blocks().values()]\n    costs = get_block_costs()\n    return [{**b.to_dict(), \"costs\": costs.get(b.id, [])} for b in blocks]\n"
    },
    {
      "id": "n7",
      "code": "@v1_router.post(\n    path=\"/blocks/{block_id}/execute\",\n    tags=[\"blocks\"],\n    dependencies=[Depends(auth_middleware)],\n)\n\ndef execute_graph_block(block_id: str, data: BlockInput) -> CompletedBlockOutput:\n\n    obj = backend.data.block.get_block(block_id)\n\n    if not obj:\n        raise HTTPException(status_code=404, detail=f\"Block #{block_id} not found.\")\n"
    },
    {
      "id": "n8",
      "code": "    output = defaultdict(list)\n"
    },
    {
      "id": "n9",
      "code": "    for name, data in obj.execute(data):\n        output[name].append(data)\n"
    },
    {
      "id": "n10",
      "code": "    return output\n"
    },
    {
      "id": "n11",
      "code": "@v1_router.get(path=\"/credits\", dependencies=[Depends(auth_middleware)])\nasync def get_user_credits(\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> dict[str, int]:\n\n    # Credits can go negative, so ensure it's at least 0 for user to see.\n    return {\"credits\": max(await _user_credit_model.get_or_refill_credit(user_id), 0)}\n"
    },
    {
      "id": "n12",
      "code": "class DeleteGraphResponse(TypedDict):\n    version_counts: int\n"
    },
    {
      "id": "n13",
      "code": "@v1_router.get(path=\"/graphs\", tags=[\"graphs\"], dependencies=[Depends(auth_middleware)])\nasync def get_graphs(\n    user_id: Annotated[str, Depends(get_user_id)]\n) -> Sequence[graph_db.GraphModel]:\n\n    return await graph_db.get_graphs(filter_by=\"active\", user_id=user_id)\n"
    },
    {
      "id": "n14",
      "code": "async def get_graph(\n    graph_id: str,\n    user_id: Annotated[str, Depends(get_user_id)],\n    version: int | None = None,\n    hide_credentials: bool = False,\n) -> graph_db.GraphModel:\n\n    graph = await graph_db.get_graph(\n        graph_id, version, user_id=user_id, for_export=hide_credentials\n    )\n\n    if not graph:\n        raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")\n\n    return graph\n"
    },
    {
      "id": "n15",
      "code": "async def get_graph_all_versions(\n    graph_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> Sequence[graph_db.GraphModel]:\n\n    graphs = await graph_db.get_graph_all_versions(graph_id, user_id=user_id)\n\n    if not graphs:\n        raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")\n\n    return graphs\n"
    },
    {
      "id": "n16",
      "code": "async def create_new_graph(\n    create_graph: CreateGraph, user_id: Annotated[str, Depends(get_user_id)]\n) -> graph_db.GraphModel:\n    return await do_create_graph(create_graph, is_template=False, user_id=user_id)\n"
    },
    {
      "id": "n17",
      "code": "async def do_create_graph(\n    create_graph: CreateGraph,\n    is_template: bool,\n    # user_id doesn't have to be annotated like on other endpoints,\n    # because create_graph isn't used directly as an endpoint\n    user_id: str,\n) -> graph_db.GraphModel:\n\n    if create_graph.graph:\n        graph = graph_db.make_graph_model(create_graph.graph, user_id)\n"
    },
    {
      "id": "n18",
      "code": "    elif create_graph.template_id:\n        # Create a new graph from a template\n        graph = await graph_db.get_graph(\n            create_graph.template_id,\n            create_graph.template_version,\n            template=True,\n            user_id=user_id,\n        )\n\n        if not graph:\n            raise HTTPException(\n                400, detail=f\"Template #{create_graph.template_id} not found\"\n            )\n"
    },
    {
      "id": "n19",
      "code": "        graph.version = 1\n\n    graph.is_template = is_template\n    graph.is_active = not is_template\n    graph.reassign_ids(user_id=user_id, reassign_graph_id=True)\n\n    graph = await graph_db.create_graph(graph, user_id=user_id)\n\n    graph = await on_graph_activate(\n        graph,\n        get_credentials=lambda id: integration_creds_manager.get(user_id, id),\n    )\n"
    },
    {
      "id": "n20",
      "code": "    else:\n        raise HTTPException(\n            status_code=400, detail=\"Either graph or template_id must be provided.\"\n        )\n"
    },
    {
      "id": "n21",
      "code": "    return graph\n"
    },
    {
      "id": "n22",
      "code": "async def delete_graph(\n    graph_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> DeleteGraphResponse:\n\n    if active_version := await graph_db.get_graph(graph_id, user_id=user_id):\n"
    },
    {
      "id": "n23",
      "code": "        def get_credentials(credentials_id: str) -> \"Credentials | None\":\n            return integration_creds_manager.get(user_id, credentials_id)\n\n        await on_graph_deactivate(active_version, get_credentials)\n"
    },
    {
      "id": "n24",
      "code": "    return {\"version_counts\": await graph_db.delete_graph(graph_id, user_id=user_id)}\n"
    },
    {
      "id": "n25",
      "code": "async def update_graph(\n    graph_id: str,\n    graph: graph_db.Graph,\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> graph_db.GraphModel:\n\n    # Sanity check\n    if graph.id and graph.id != graph_id:\n        raise HTTPException(400, detail=\"Graph ID does not match ID in URI\")\n\n    # Determine new version\n    existing_versions = await graph_db.get_graph_all_versions(graph_id, user_id=user_id)\n    if not existing_versions:\n        raise HTTPException(404, detail=f\"Graph #{graph_id} not found\")\n    latest_version_number = max(g.version for g in existing_versions)\n    graph.version = latest_version_number + 1\n\n    latest_version_graph = next(\n        v for v in existing_versions if v.version == latest_version_number\n    )\n\n    current_active_version = next((v for v in existing_versions if v.is_active), None)\n    if latest_version_graph.is_template != graph.is_template:\n        raise HTTPException(\n            400, detail=\"Changing is_template on an existing graph is forbidden\"\n        )\n\n    graph.is_active = not graph.is_template\n    graph = graph_db.make_graph_model(graph, user_id)\n    graph.reassign_ids(user_id=user_id)\n\n    new_graph_version = await graph_db.create_graph(graph, user_id=user_id)\n\n    if new_graph_version.is_active:\n\n"
    },
    {
      "id": "n26",
      "code": "        def get_credentials(credentials_id: str) -> \"Credentials | None\":\n            return integration_creds_manager.get(user_id, credentials_id)\n\n        # Handle activation of the new graph first to ensure continuity\n        new_graph_version = await on_graph_activate(\n            new_graph_version,\n            get_credentials=get_credentials,\n        )\n\n        # Ensure new version is the only active version\n        await graph_db.set_graph_active_version(\n            graph_id=graph_id, version=new_graph_version.version, user_id=user_id\n        )\n\n        if current_active_version:\n            # Handle deactivation of the previously active version\n            await on_graph_deactivate(\n                current_active_version,\n                get_credentials=get_credentials,\n            )\n"
    },
    {
      "id": "n27",
      "code": "    return new_graph_version\n"
    },
    {
      "id": "n28",
      "code": "async def set_graph_active_version(\n    graph_id: str,\n    request_body: SetGraphActiveVersion,\n    user_id: Annotated[str, Depends(get_user_id)],\n):\n\n    new_active_version = request_body.active_graph_version\n\n    new_active_graph = await graph_db.get_graph(\n        graph_id, new_active_version, user_id=user_id\n    )\n\n    if not new_active_graph:\n        raise HTTPException(404, f\"Graph #{graph_id} v{new_active_version} not found\")\n\n    current_active_graph = await graph_db.get_graph(graph_id, user_id=user_id)\n\n    def get_credentials(credentials_id: str) -> \"Credentials | None\":\n        return integration_creds_manager.get(user_id, credentials_id)\n\n    await on_graph_activate(\n        new_active_graph,\n        get_credentials=get_credentials,\n    )\n\n    await graph_db.set_graph_active_version(\n        graph_id=graph_id,\n        version=new_active_version,\n        user_id=user_id,\n    )\n\n    if current_active_graph and current_active_graph.version != new_active_version:\n\n        await on_graph_deactivate(\n            current_active_graph,\n            get_credentials=get_credentials,\n        )\n"
    },
    {
      "id": "n29",
      "code": "def execute_graph(\n    graph_id: str,\n    node_input: dict[Any, Any],\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> dict[str, Any]:  # FIXME: add proper return type\n\n    try:\n        graph_exec = execution_manager_client().add_execution(\n            graph_id, node_input, user_id=user_id\n        )\n        return {\"id\": graph_exec.graph_exec_id}\n\n    except Exception as e:\n        msg = e.__str__().encode().decode(\"unicode_escape\")\n        raise HTTPException(status_code=400, detail=msg)\n"
    },
    {
      "id": "n30",
      "code": "async def stop_graph_run(\n    graph_exec_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> Sequence[execution_db.ExecutionResult]:\n\n    if not await graph_db.get_execution(user_id=user_id, execution_id=graph_exec_id):\n        raise HTTPException(404, detail=f\"Agent execution #{graph_exec_id} not found\")\n"
    },
    {
      "id": "n31",
      "code": "    await asyncio.to_thread(\n        lambda: execution_manager_client().cancel_execution(graph_exec_id)\n    )\n"
    },
    {
      "id": "n32",
      "code": "    return await execution_db.get_execution_results(graph_exec_id)\n"
    },
    {
      "id": "n33",
      "code": "async def get_executions(\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> list[graph_db.GraphExecution]:\n    return await graph_db.get_executions(user_id=user_id)\n"
    },
    {
      "id": "n34",
      "code": "async def get_graph_run_node_execution_results(\n    graph_id: str,\n    graph_exec_id: str,\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> Sequence[execution_db.ExecutionResult]:\n\n    graph = await graph_db.get_graph(graph_id, user_id=user_id)\n\n    if not graph:\n        raise HTTPException(status_code=404, detail=f\"Graph #{graph_id} not found.\")\n\n    return await execution_db.get_execution_results(graph_exec_id)\n"
    },
    {
      "id": "n35",
      "code": "async def get_templates(\n    user_id: Annotated[str, Depends(get_user_id)]\n) -> Sequence[graph_db.GraphModel]:\n    return await graph_db.get_graphs(filter_by=\"template\", user_id=user_id)\n"
    },
    {
      "id": "n36",
      "code": "async def get_template(\n    graph_id: str, version: int | None = None\n) -> graph_db.GraphModel:\n    graph = await graph_db.get_graph(graph_id, version, template=True)\n\n    if not graph:\n        raise HTTPException(status_code=404, detail=f\"Template #{graph_id} not found.\")\n\n    return graph\n"
    },
    {
      "id": "n37",
      "code": "async def create_new_template(\n    create_graph: CreateGraph, user_id: Annotated[str, Depends(get_user_id)]\n) -> graph_db.GraphModel:\n    return await do_create_graph(create_graph, is_template=True, user_id=user_id)\n"
    },
    {
      "id": "n38",
      "code": "class ScheduleCreationRequest(pydantic.BaseModel):\n    cron: str\n    input_data: dict[Any, Any]\n    graph_id: str\n"
    },
    {
      "id": "n39",
      "code": "async def create_schedule(\n    user_id: Annotated[str, Depends(get_user_id)],\n    schedule: ScheduleCreationRequest,\n) -> scheduler.JobInfo:\n\n    graph = await graph_db.get_graph(schedule.graph_id, user_id=user_id)\n\n    if not graph:\n        raise HTTPException(\n            status_code=404, detail=f\"Graph #{schedule.graph_id} not found.\"\n        )\n\n    return await asyncio.to_thread(\n        lambda: execution_scheduler_client().add_execution_schedule(\n            graph_id=schedule.graph_id,\n            graph_version=graph.version,\n            cron=schedule.cron,\n            input_data=schedule.input_data,\n            user_id=user_id,\n        )\n    )\n"
    },
    {
      "id": "n40",
      "code": "def delete_schedule(\n    schedule_id: str,\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> dict[Any, Any]:\n\n    execution_scheduler_client().delete_schedule(schedule_id, user_id=user_id)\n\n    return {\"id\": schedule_id}\n"
    },
    {
      "id": "n41",
      "code": "def get_execution_schedules(\n    user_id: Annotated[str, Depends(get_user_id)],\n    graph_id: str | None = None,\n) -> list[scheduler.JobInfo]:\n\n    return execution_scheduler_client().get_execution_schedules(\n        user_id=user_id,\n        graph_id=graph_id,\n    )\n"
    },
    {
      "id": "n42",
      "code": "async def create_api_key(\n    request: CreateAPIKeyRequest, user_id: Annotated[str, Depends(get_user_id)]\n) -> CreateAPIKeyResponse:\n    \"\"\"Create a new API key\"\"\"\n\n    try:\n        api_key, plain_text = await generate_api_key(\n            name=request.name,\n            user_id=user_id,\n            permissions=request.permissions,\n            description=request.description,\n        )\n        return CreateAPIKeyResponse(api_key=api_key, plain_text_key=plain_text)\n\n    except APIKeyError as e:\n        logger.error(f\"Failed to create API key: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))\n"
    },
    {
      "id": "n43",
      "code": "async def get_api_keys(\n    user_id: Annotated[str, Depends(get_user_id)]\n) -> list[APIKeyWithoutHash]:\n    \"\"\"List all API keys for the user\"\"\"\n\n    try:\n        return await list_user_api_keys(user_id)\n\n    except APIKeyError as e:\n        logger.error(f\"Failed to list API keys: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))\n"
    },
    {
      "id": "n44",
      "code": "async def get_api_key(\n    key_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> APIKeyWithoutHash:\n    \"\"\"Get a specific API key\"\"\"\n\n    try:\n        api_key = await get_api_key_by_id(key_id, user_id)\n"
    },
    {
      "id": "n45",
      "code": "        if not api_key:\n            raise HTTPException(status_code=404, detail=\"API key not found\")\n"
    },
    {
      "id": "n46",
      "code": "        return api_key\n"
    },
    {
      "id": "n47",
      "code": "    except APIKeyError as e:\n        logger.error(f\"Failed to get API key: {str(e)}\")\n"
    },
    {
      "id": "n48",
      "code": "        raise HTTPException(status_code=400, detail=str(e))\n"
    },
    {
      "id": "n49",
      "code": "async def delete_api_key(\n    key_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> Optional[APIKeyWithoutHash]:\n    \"\"\"Revoke an API key\"\"\"\n\n    try:\n        return await revoke_api_key(key_id, user_id)\n"
    },
    {
      "id": "n50",
      "code": "    except APIKeyNotFoundError:\n        raise HTTPException(status_code=404, detail=\"API key not found\")\n"
    },
    {
      "id": "n51",
      "code": "    except APIKeyPermissionError:\n        raise HTTPException(status_code=403, detail=\"Permission denied\")\n"
    },
    {
      "id": "n52",
      "code": "    except APIKeyError as e:\n        logger.error(f\"Failed to revoke API key: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))\n"
    },
    {
      "id": "n53",
      "code": "async def suspend_key(\n    key_id: str, user_id: Annotated[str, Depends(get_user_id)]\n) -> Optional[APIKeyWithoutHash]:\n    \"\"\"Suspend an API key\"\"\"\n\n    try:\n        return await suspend_api_key(key_id, user_id)\n"
    },
    {
      "id": "n54",
      "code": "    except APIKeyNotFoundError:\n        raise HTTPException(status_code=404, detail=\"API key not found\")\n"
    },
    {
      "id": "n55",
      "code": "    except APIKeyPermissionError:\n        raise HTTPException(status_code=403, detail=\"Permission denied\")\n"
    },
    {
      "id": "n56",
      "code": "    except APIKeyError as e:\n        logger.error(f\"Failed to suspend API key: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))\n"
    },
    {
      "id": "n57",
      "code": "async def update_permissions(\n    key_id: str,\n    request: UpdatePermissionsRequest,\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> Optional[APIKeyWithoutHash]:\n    \"\"\"Update API key permissions\"\"\"\n\n    try:\n        return await update_api_key_permissions(key_id, user_id, request.permissions)\n"
    },
    {
      "id": "n58",
      "code": "    except APIKeyNotFoundError:\n        raise HTTPException(status_code=404, detail=\"API key not found\")\n"
    },
    {
      "id": "n59",
      "code": "    except APIKeyPermissionError:\n        raise HTTPException(status_code=403, detail=\"Permission denied\")\n"
    },
    {
      "id": "n60",
      "code": "    except APIKeyError as e:\n        logger.error(f\"Failed to update API key permissions: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))\n"
    }
  ],
  "edges": [
    {
      "source": "n17",
      "target": "n18"
    },
    {
      "source": "n53",
      "target": "n56"
    },
    {
      "source": "n44",
      "target": "n45"
    },
    {
      "source": "n9",
      "target": "n9"
    },
    {
      "source": "n22",
      "target": "n23"
    },
    {
      "source": "n53",
      "target": "n54"
    },
    {
      "source": "n7",
      "target": "n10"
    },
    {
      "source": "n26",
      "target": "n27"
    },
    {
      "source": "n19",
      "target": "n21"
    },
    {
      "source": "n17",
      "target": "n20"
    },
    {
      "source": "n23",
      "target": "n24"
    },
    {
      "source": "n8",
      "target": "n9"
    },
    {
      "source": "n53",
      "target": "n55"
    },
    {
      "source": "n47",
      "target": "n48"
    },
    {
      "source": "n30",
      "target": "n31"
    },
    {
      "source": "n7",
      "target": "n8"
    },
    {
      "source": "n44",
      "target": "n47"
    },
    {
      "source": "n49",
      "target": "n50"
    },
    {
      "source": "n20",
      "target": "n21"
    },
    {
      "source": "n49",
      "target": "n51"
    },
    {
      "source": "n9",
      "target": "n10"
    },
    {
      "source": "n18",
      "target": "n21"
    },
    {
      "source": "n31",
      "target": "n32"
    },
    {
      "source": "n57",
      "target": "n58"
    },
    {
      "source": "n45",
      "target": "n46"
    },
    {
      "source": "n18",
      "target": "n19"
    },
    {
      "source": "n45",
      "target": "n48"
    },
    {
      "source": "n57",
      "target": "n60"
    },
    {
      "source": "n25",
      "target": "n26"
    },
    {
      "source": "n25",
      "target": "n27"
    },
    {
      "source": "n22",
      "target": "n24"
    },
    {
      "source": "n49",
      "target": "n52"
    },
    {
      "source": "n57",
      "target": "n59"
    },
    {
      "source": "n30",
      "target": "n32"
    }
  ]
}