{
  "nodes": [
    {
      "id": "n0",
      "code": "def get_highest_set_bit_position(number: int) -> int:\n    \"\"\"\n    Returns position of the highest set bit of a number.\n    Ref - https://graphics.stanford.edu/~seander/bithacks.html#IntegerLogObvious\n    >>> get_highest_set_bit_position(25)\n    5\n    >>> get_highest_set_bit_position(37)\n    6\n    >>> get_highest_set_bit_position(1)\n    1\n    >>> get_highest_set_bit_position(4)\n    3\n    >>> get_highest_set_bit_position(0)\n    0\n    >>> get_highest_set_bit_position(0.8)\n    Traceback (most recent call last):\n        ...\n    TypeError: Input value must be an 'int' type\n    \"\"\"\n\n    if not isinstance(number, int):\n        raise TypeError(\"Input value must be an 'int' type\")\n\n    position = 0\n"
    },
    {
      "id": "n1",
      "code": "    while number:\n        position += 1\n        number >>= 1\n"
    },
    {
      "id": "n2",
      "code": "    return position\n"
    },
    {
      "id": "n3",
      "code": "\n\n\nif __name__ == \"__main__\":\n\n    import doctest\n\n    doctest.testmod()\n\n\n\n"
    }
  ],
  "edges": [
    {
      "source": "n1",
      "target": "n1"
    },
    {
      "source": "n0",
      "target": "n1"
    },
    {
      "source": "n1",
      "target": "n2"
    }
  ]
}