{
  "nodes": [
    {
      "id": "n0",
      "code": "# Knight Tour Intro: https://www.youtube.com/watch?v=ab_dY3dZFHM\n\nfrom __future__ import annotations\n"
    },
    {
      "id": "n1",
      "code": "def get_valid_pos(position: tuple[int, int], n: int) -> list[tuple[int, int]]:\n    \"\"\"\n    Find all the valid positions a knight can move to from the current position.\n\n    >>> get_valid_pos((1, 3), 4)\n    [(2, 1), (0, 1), (3, 2)]\n    \"\"\"\n\n    y, x = position\n    positions = [\n        (y + 1, x + 2),\n        (y - 1, x + 2),\n        (y + 1, x - 2),\n        (y - 1, x - 2),\n        (y + 2, x + 1),\n        (y + 2, x - 1),\n        (y - 2, x + 1),\n        (y - 2, x - 1),\n    ]\n\n    permissible_positions = []\n"
    },
    {
      "id": "n2",
      "code": "    for inner_position in positions:\n        y_test, x_test = inner_position\n        if 0 <= y_test < n and 0 <= x_test < n:\n            permissible_positions.append(inner_position)\n"
    },
    {
      "id": "n3",
      "code": "    return permissible_positions\n"
    },
    {
      "id": "n4",
      "code": "def is_complete(board: list[list[int]]) -> bool:\n\n    \"\"\"\n    Check if the board (matrix) has been completely filled with non-zero values.\n\n    >>> is_complete([[1]])\n    True\n\n    >>> is_complete([[1, 2], [3, 0]])\n    False\n    \"\"\"\n\n\n\n    return not any(elem == 0 for row in board for elem in row)\n\n\n"
    },
    {
      "id": "n5",
      "code": "def open_knight_tour_helper(\n    board: list[list[int]], pos: tuple[int, int], curr: int\n) -> bool:\n    \"\"\"\n    Helper function to solve knight tour problem.\n    \"\"\"\n\n\n    if is_complete(board):\n        return True\n"
    },
    {
      "id": "n6",
      "code": "    for position in get_valid_pos(pos, len(board)):\n        y, x = position\n\n\n        if board[y][x] == 0:\n            board[y][x] = curr + 1\n            if open_knight_tour_helper(board, position, curr + 1):\n                return True\n            board[y][x] = 0\n"
    },
    {
      "id": "n7",
      "code": "    return False\n"
    },
    {
      "id": "n8",
      "code": "def open_knight_tour(n: int) -> list[list[int]]:\n    \"\"\"\n    Find the solution for the knight tour problem for a board of size n. Raises\n    ValueError if the tour cannot be performed for the given size.\n\n    >>> open_knight_tour(1)\n    [[1]]\n\n    >>> open_knight_tour(2)\n    Traceback (most recent call last):\n        ...\n    ValueError: Open Knight Tour cannot be performed on a board of size 2\n    \"\"\"\n\n    board = [[0 for i in range(n)] for j in range(n)]\n"
    },
    {
      "id": "n9",
      "code": "    for i in range(n):\n        for j in range(n):\n            board[i][j] = 1\n\n            if open_knight_tour_helper(board, (i, j), 1):\n                return board\n"
    },
    {
      "id": "n10",
      "code": "            board[i][j] = 0\n"
    },
    {
      "id": "n11",
      "code": "    msg = f\"Open Knight Tour cannot be performed on a board of size {n}\"\n    raise ValueError(msg)\n"
    },
    {
      "id": "n12",
      "code": "if __name__ == \"__main__\":\n\n    import doctest\n\n    doctest.testmod()\n"
    }
  ],
  "edges": [
    {
      "source": "n5",
      "target": "n6"
    },
    {
      "source": "n9",
      "target": "n11"
    },
    {
      "source": "n6",
      "target": "n7"
    },
    {
      "source": "n10",
      "target": "n9"
    },
    {
      "source": "n8",
      "target": "n9"
    },
    {
      "source": "n9",
      "target": "n10"
    },
    {
      "source": "n2",
      "target": "n2"
    },
    {
      "source": "n1",
      "target": "n2"
    },
    {
      "source": "n5",
      "target": "n7"
    },
    {
      "source": "n2",
      "target": "n3"
    }
  ]
}