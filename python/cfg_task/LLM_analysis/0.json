{
  "nodes": [
    {
      "id": "n0",
      "code": "from prisma.models import User\n\nfrom backend.blocks.basic import AgentInputBlock, PrintToConsoleBlock\n\nfrom backend.blocks.text import FillTextTemplateBlock\n\nfrom backend.data import graph\n\nfrom backend.data.graph import create_graph\n\nfrom backend.data.user import get_or_create_user\n\nfrom backend.util.test import SpinTestServer, wait_execution\n"
    },
    {
      "id": "n1",
      "code": "async def create_test_user() -> User:\n\n    test_user_data = {\n        \"sub\": \"ef3b97d7-1161-4eb4-92b2-10c24fb154c1\",\n        \"email\": \"testuser#example.com\",\n        \"name\": \"Test User\",\n    }\n\n    user = await get_or_create_user(test_user_data)\n\n    return user\n"
    },
    {
      "id": "n2",
      "code": "def create_test_graph() -> graph.Graph:\n    \"\"\"\n    InputBlock\n               \\\n                 ---- FillTextTemplateBlock ---- PrintToConsoleBlock\n               /\n    InputBlock\n    \"\"\"\n\n    nodes = [\n        graph.Node(\n            block_id=AgentInputBlock().id,\n            input_default={\"name\": \"input_1\"},\n        ),\n        graph.Node(\n            block_id=AgentInputBlock().id,\n            input_default={\"name\": \"input_2\"},\n        ),\n        graph.Node(\n            block_id=FillTextTemplateBlock().id,\n            input_default={\n                \"format\": \"{a}, {b}{c}\",\n                \"values_#_c\": \"!!!\",\n            },\n        ),\n        graph.Node(block_id=PrintToConsoleBlock().id),\n    ]\n\n    links = [\n        graph.Link(\n            source_id=nodes[0].id,\n            sink_id=nodes[2].id,\n            source_name=\"result\",\n            sink_name=\"values_#_a\",\n        ),\n        graph.Link(\n            source_id=nodes[1].id,\n            sink_id=nodes[2].id,\n            source_name=\"result\",\n            sink_name=\"values_#_b\",\n        ),\n        graph.Link(\n            source_id=nodes[2].id,\n            sink_id=nodes[3].id,\n            source_name=\"output\",\n            sink_name=\"text\",\n        ),\n    ]\n\n    return graph.Graph(\n        name=\"TestGraph\",\n        description=\"Test graph\",\n        nodes=nodes,\n        links=links,\n    )\n"
    },
    {
      "id": "n3",
      "code": "async def sample_agent():\n\n    async with SpinTestServer() as server:\n\n        test_user = await create_test_user()\n        test_graph = await create_graph(create_test_graph(), test_user.id)\n\n        input_data = {\"input_1\": \"Hello\", \"input_2\": \"World\"}\n\n        response = await server.agent_server.test_execute_graph(\n            test_graph.id, input_data, test_user.id\n        )\n\n        print(response)\n\n        result = await wait_execution(test_user.id, test_graph.id, response[\"id\"], 10)\n        print(result)\n"
    },
    {
      "id": "n4",
      "code": "if __name__ == \"__main__\":\n\n    import asyncio\n\n    asyncio.run(sample_agent())\n"
    }
  ],
  "edges": []
}