{
  "nodes": [
    {
      "id": "n0",
      "code": "import logging\nfrom typing import TYPE_CHECKING, Callable, Optional, cast\n\nfrom backend.data.block import BlockWebhookConfig, get_block\nfrom backend.data.graph import set_node_webhook\nfrom backend.data.model import CREDENTIALS_FIELD_NAME\nfrom backend.integrations.webhooks import WEBHOOK_MANAGERS_BY_NAME\n\n\nif TYPE_CHECKING:\n    from backend.data.graph import GraphModel, NodeModel\n    from backend.data.model import Credentials\n\n    from ._base import BaseWebhooksManager\n\n\nlogger = logging.getLogger(__name__)\n\n"
    },
    {
      "id": "n1",
      "code": "async def on_graph_activate(\n    graph: \"GraphModel\", get_credentials: Callable[[str], \"Credentials | None\"]\n):\n\n    \"\"\"\n    Hook to be called when a graph is activated/created.\n\n    ⚠️ Assuming node entities are not re-used between graph versions, ⚠️\n    this hook calls `on_node_activate` on all nodes in this graph.\n\n    Params:\n        get_credentials: `credentials_id` -> Credentials\n    \"\"\"\n\n    # Compare nodes in new_graph_version with previous_graph_version\n    updated_nodes = []\n"
    },
    {
      "id": "n2",
      "code": "    for new_node in graph.nodes:\n        node_credentials = None\n"
    },
    {
      "id": "n3",
      "code": "        if creds_meta := new_node.input_default.get(CREDENTIALS_FIELD_NAME):\n            node_credentials = get_credentials(creds_meta[\"id\"])\n"
    },
    {
      "id": "n4",
      "code": "            if not node_credentials:\n                raise ValueError(\n                    f\"Node #{new_node.id} updated with non-existent \"\n                    f\"credentials #{node_credentials}\"\n                )\n"
    },
    {
      "id": "n5",
      "code": "        updated_node = await on_node_activate(\n            graph.user_id, new_node, credentials=node_credentials\n        )\n\n        updated_nodes.append(updated_node)\n"
    },
    {
      "id": "n6",
      "code": "    graph.nodes = updated_nodes\n    return graph\n"
    },
    {
      "id": "n7",
      "code": "async def on_graph_deactivate(\n    graph: \"GraphModel\", get_credentials: Callable[[str], \"Credentials | None\"]\n):\n\n    \"\"\"\n    Hook to be called when a graph is deactivated/deleted.\n\n    ⚠️ Assuming node entities are not re-used between graph versions, ⚠️\n    this hook calls `on_node_deactivate` on all nodes in `graph`.\n\n    Params:\n        get_credentials: `credentials_id` -> Credentials\n    \"\"\"\n\n    updated_nodes = []\n"
    },
    {
      "id": "n8",
      "code": "    for node in graph.nodes:\n"
    },
    {
      "id": "n9",
      "code": "        node_credentials = None\n\n        if creds_meta := node.input_default.get(CREDENTIALS_FIELD_NAME):\n"
    },
    {
      "id": "n10",
      "code": "            node_credentials = get_credentials(creds_meta[\"id\"])\n\n            if not node_credentials:\n                logger.error(\n                    f\"Node #{node.id} referenced non-existent \"\n                    f\"credentials #{creds_meta['id']}\"\n                )\n"
    },
    {
      "id": "n11",
      "code": "\n\n        updated_node = await on_node_deactivate(node, credentials=node_credentials)\n\n        updated_nodes.append(updated_node)\n\n\n"
    },
    {
      "id": "n12",
      "code": "    graph.nodes = updated_nodes\n\n    return graph\n\n\n"
    },
    {
      "id": "n13",
      "code": "async def on_node_activate(\n    user_id: str,\n    node: \"NodeModel\",\n    *,\n    credentials: Optional[\"Credentials\"] = None,\n) -> \"NodeModel\":\n\n    \"\"\"Hook to be called when the node is activated/created\"\"\"\n\n    block = get_block(node.block_id)\n\n    if not block:\n        raise ValueError(\n            f\"Node #{node.id} is instance of unknown block #{node.block_id}\"\n        )\n\n    if not block.webhook_config:\n        return node\n"
    },
    {
      "id": "n14",
      "code": "    provider = block.webhook_config.provider\n\n    if provider not in WEBHOOK_MANAGERS_BY_NAME:\n        raise ValueError(\n            f\"Block #{block.id} has webhook_config for provider {provider} \"\n            \"which does not support webhooks\"\n        )\n"
    },
    {
      "id": "n15",
      "code": "    logger.debug(\n        f\"Activating webhook node #{node.id} with config {block.webhook_config}\"\n    )\n\n    webhooks_manager = WEBHOOK_MANAGERS_BY_NAME[provider]()\n\n    if auto_setup_webhook := isinstance(block.webhook_config, BlockWebhookConfig):\n"
    },
    {
      "id": "n16",
      "code": "        try:\n            resource = block.webhook_config.resource_format.format(**node.input_default)\n        except KeyError:\n            resource = None\n        logger.debug(\n            f\"Constructed resource string {resource} from input {node.input_default}\"\n        )\n"
    },
    {
      "id": "n17",
      "code": "    else:\n        resource = \"\"  # not relevant for manual webhooks\n"
    },
    {
      "id": "n18",
      "code": "    needs_credentials = CREDENTIALS_FIELD_NAME in block.input_schema.model_fields\n    credentials_meta = (\n        node.input_default.get(CREDENTIALS_FIELD_NAME) if needs_credentials else None\n    )\n\n    event_filter_input_name = block.webhook_config.event_filter_input\n\n    has_everything_for_webhook = (\n        resource is not None\n        and (credentials_meta or not needs_credentials)\n        and (\n            not event_filter_input_name\n            or (\n                event_filter_input_name in node.input_default\n                and any(\n                    is_on\n                    for is_on in node.input_default[event_filter_input_name].values()\n                )\n            )\n        )\n    )\n"
    },
    {
      "id": "n19",
      "code": "    if has_everything_for_webhook and resource is not None:\n        logger.debug(f\"Node #{node} has everything for a webhook!\")\n\n        if credentials_meta and not credentials:\n            raise ValueError(\n                f\"Cannot set up webhook for node #{node.id}: \"\n                f\"credentials #{credentials_meta['id']} not available\"\n            )\n"
    },
    {
      "id": "n20",
      "code": "        if event_filter_input_name:\n            # Shape of the event filter is enforced in Block.__init__\n            event_filter = cast(dict, node.input_default[event_filter_input_name])\n            events = [\n                block.webhook_config.event_format.format(event=event)\n                for event, enabled in event_filter.items()\n                if enabled is True\n            ]\n            logger.debug(f\"Webhook events to subscribe to: {', '.join(events)}\")\n"
    },
    {
      "id": "n21",
      "code": "        else:\n            events = []\n"
    },
    {
      "id": "n22",
      "code": "        # Find/make and attach a suitable webhook to the node\n"
    },
    {
      "id": "n23",
      "code": "        if auto_setup_webhook:\n            assert credentials is not None\n            new_webhook = await webhooks_manager.get_suitable_auto_webhook(\n                user_id,\n                credentials,\n                block.webhook_config.webhook_type,\n                resource,\n                events,\n            )\n"
    },
    {
      "id": "n24",
      "code": "        else:\n            # Manual webhook -> no credentials -> don't register but do create\n            new_webhook = await webhooks_manager.get_manual_webhook(\n                user_id,\n                node.graph_id,\n                block.webhook_config.webhook_type,\n                events,\n            )\n"
    },
    {
      "id": "n25",
      "code": "        logger.debug(f\"Acquired webhook: {new_webhook}\")\n\n        return await set_node_webhook(node.id, new_webhook.id)\n"
    },
    {
      "id": "n26",
      "code": "    else:\n        logger.debug(f\"Node #{node.id} does not have everything for a webhook\")\n"
    },
    {
      "id": "n27",
      "code": "    return node\n"
    },
    {
      "id": "n28",
      "code": "async def on_node_deactivate(\n    node: \"NodeModel\",\n    *,\n    credentials: Optional[\"Credentials\"] = None,\n    webhooks_manager: Optional[\"BaseWebhooksManager\"] = None,\n) -> \"NodeModel\":\n    \"\"\"Hook to be called when node is deactivated/deleted\"\"\"\n\n    logger.debug(f\"Deactivating node #{node.id}\")\n    block = get_block(node.block_id)\n\n    if not block:\n        raise ValueError(\n            f\"Node #{node.id} is instance of unknown block #{node.block_id}\"\n        )\n\n    if not block.webhook_config:\n        return node\n"
    },
    {
      "id": "n29",
      "code": "    provider = block.webhook_config.provider\n    if provider not in WEBHOOK_MANAGERS_BY_NAME:\n"
    },
    {
      "id": "n30",
      "code": "        raise ValueError(\n            f\"Block #{block.id} has webhook_config for provider {provider} \"\n            \"which does not support webhooks\"\n        )\n"
    },
    {
      "id": "n31",
      "code": "    webhooks_manager = WEBHOOK_MANAGERS_BY_NAME[provider]()\n\n    if node.webhook_id:\n        logger.debug(f\"Node #{node.id} has webhook_id {node.webhook_id}\")\n"
    },
    {
      "id": "n32",
      "code": "        if not node.webhook:\n            logger.error(f\"Node #{node.id} has webhook_id but no webhook object\")\n            raise ValueError(\"node.webhook not included\")\n\n        # Detach webhook from node\n        logger.debug(f\"Detaching webhook from node #{node.id}\")\n        updated_node = await set_node_webhook(node.id, None)\n\n        # Prune and deregister the webhook if it is no longer used anywhere\n        webhook = node.webhook\n        logger.debug(\n            f\"Pruning{' and deregistering' if credentials else ''} \"\n            f\"webhook #{webhook.id}\"\n        )\n        await webhooks_manager.prune_webhook_if_dangling(webhook.id, credentials)\n\n        if (\n            CREDENTIALS_FIELD_NAME in block.input_schema.model_fields\n            and not credentials\n        ):\n            logger.warning(\n                f\"Cannot deregister webhook #{webhook.id}: credentials \"\n                f\"#{webhook.credentials_id} not available \"\n                f\"({webhook.provider.value} webhook ID: {webhook.provider_webhook_id})\"\n            )\n\n        return updated_node\n"
    },
    {
      "id": "n33",
      "code": "    logger.debug(f\"Node #{node.id} has no webhook_id, returning\")\n    return node\n"
    }
  ],
  "edges": [
    {
      "source": "n13",
      "target": "n27"
    },
    {
      "source": "n14",
      "target": "n15"
    },
    {
      "source": "n17",
      "target": "n18"
    },
    {
      "source": "n23",
      "target": "n25"
    },
    {
      "source": "n21",
      "target": "n22"
    },
    {
      "source": "n18",
      "target": "n26"
    },
    {
      "source": "n8",
      "target": "n12"
    },
    {
      "source": "n22",
      "target": "n23"
    },
    {
      "source": "n10",
      "target": "n11"
    },
    {
      "source": "n26",
      "target": "n27"
    },
    {
      "source": "n2",
      "target": "n3"
    },
    {
      "source": "n13",
      "target": "n14"
    },
    {
      "source": "n19",
      "target": "n21"
    },
    {
      "source": "n28",
      "target": "n33"
    },
    {
      "source": "n3",
      "target": "n4"
    },
    {
      "source": "n8",
      "target": "n9"
    },
    {
      "source": "n16",
      "target": "n18"
    },
    {
      "source": "n1",
      "target": "n2"
    },
    {
      "source": "n19",
      "target": "n20"
    },
    {
      "source": "n24",
      "target": "n25"
    },
    {
      "source": "n7",
      "target": "n8"
    },
    {
      "source": "n15",
      "target": "n16"
    },
    {
      "source": "n31",
      "target": "n33"
    },
    {
      "source": "n29",
      "target": "n30"
    },
    {
      "source": "n9",
      "target": "n11"
    },
    {
      "source": "n11",
      "target": "n8"
    },
    {
      "source": "n9",
      "target": "n10"
    },
    {
      "source": "n31",
      "target": "n32"
    },
    {
      "source": "n18",
      "target": "n19"
    },
    {
      "source": "n14",
      "target": "n27"
    },
    {
      "source": "n28",
      "target": "n29"
    },
    {
      "source": "n29",
      "target": "n31"
    },
    {
      "source": "n5",
      "target": "n2"
    },
    {
      "source": "n2",
      "target": "n6"
    },
    {
      "source": "n3",
      "target": "n5"
    },
    {
      "source": "n22",
      "target": "n24"
    },
    {
      "source": "n20",
      "target": "n22"
    },
    {
      "source": "n15",
      "target": "n17"
    }
  ]
}