{
  "nodes": [
    {
      "id": "n0",
      "code": "from typing import Any, Dict\n\nimport jwt\n\nfrom .config import settings\n"
    },
    {
      "id": "n1",
      "code": "def parse_jwt_token(token: str) -> Dict[str, Any]:\n    \"\"\"\n    Parse and validate a JWT token.\n\n    :param token: The token to parse\n    :return: The decoded payload\n    :raises ValueError: If the token is invalid or expired\n    \"\"\"\n\n    try:\n        payload = jwt.decode(\n            token,\n            settings.JWT_SECRET_KEY,\n            algorithms=[settings.JWT_ALGORITHM],\n            audience=\"authenticated\",\n        )\n        return payload\n"
    },
    {
      "id": "n2",
      "code": "    except jwt.ExpiredSignatureError:\n        raise ValueError(\"Token has expired\")\n"
    },
    {
      "id": "n3",
      "code": "    except jwt.InvalidTokenError as e:\n        raise ValueError(f\"Invalid token: {str(e)}\")\n"
    }
  ],
  "edges": [
    {
      "source": "n1",
      "target": "n2"
    },
    {
      "source": "n1",
      "target": "n3"
    }
  ]
}