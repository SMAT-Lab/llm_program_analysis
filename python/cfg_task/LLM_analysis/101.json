{
  "nodes": [
    {
      "id": "n0",
      "code": "from typing import Literal\nfrom urllib.parse import quote\n\nfrom pydantic import SecretStr\n\nfrom backend.blocks.helpers.http import GetRequest\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\n\nfrom backend.data.model import (\n    APIKeyCredentials,\n    CredentialsField,\n    CredentialsMetaInput,\n    SchemaField,\n)\n\nfrom backend.integrations.providers import ProviderName\n"
    },
    {
      "id": "n1",
      "code": "class GetWikipediaSummaryBlock(Block, GetRequest):\n\n    class Input(BlockSchema):\n        topic: str = SchemaField(description=\"The topic to fetch the summary for\")\n\n    class Output(BlockSchema):\n        summary: str = SchemaField(description=\"The summary of the given topic\")\n        error: str = SchemaField(\n            description=\"Error message if the summary cannot be retrieved\"\n        )\n\n    def __init__(self):\n        super().__init__(\n            id=\"f5b0f5d0-1862-4d61-94be-3ad0fa772760\",\n            description=\"This block fetches the summary of a given topic from Wikipedia.\",\n            categories={BlockCategory.SEARCH},\n            input_schema=GetWikipediaSummaryBlock.Input,\n            output_schema=GetWikipediaSummaryBlock.Output,\n            test_input={\"topic\": \"Artificial Intelligence\"},\n            test_output=(\"summary\", \"summary content\"),\n            test_mock={\"get_request\": lambda url, json: {\"extract\": \"summary content\"}},\n        )\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        topic = input_data.topic\n\n        url = f\"https://en.wikipedia.org/api/rest_v1/page/summary/{topic}\"\n        response = self.get_request(url, json=True)\n\n        if \"extract\" not in response:\n            raise RuntimeError(f\"Unable to parse Wikipedia response: {response}\")\n\n        yield \"summary\", response[\"extract\"]\n"
    },
    {
      "id": "n2",
      "code": "TEST_CREDENTIALS = APIKeyCredentials(\n    id=\"01234567-89ab-cdef-0123-456789abcdef\",\n    provider=\"openweathermap\",\n    api_key=SecretStr(\"mock-openweathermap-api-key\"),\n    title=\"Mock OpenWeatherMap API key\",\n    expires_at=None,\n)\n\nTEST_CREDENTIALS_INPUT = {\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.type,\n}\n"
    },
    {
      "id": "n3",
      "code": "class GetWeatherInformationBlock(Block, GetRequest):\n\n    class Input(BlockSchema):\n        location: str = SchemaField(\n            description=\"Location to get weather information for\"\n        )\n        credentials: CredentialsMetaInput[\n            Literal[ProviderName.OPENWEATHERMAP], Literal[\"api_key\"]\n        ] = CredentialsField(\n            description=\"The OpenWeatherMap integration can be used with \"\n            \"any API key with sufficient permissions for the blocks it is used on.\",\n        )\n        use_celsius: bool = SchemaField(\n            default=True,\n            description=\"Whether to use Celsius or Fahrenheit for temperature\",\n        )\n\n    class Output(BlockSchema):\n        temperature: str = SchemaField(\n            description=\"Temperature in the specified location\"\n        )\n        humidity: str = SchemaField(description=\"Humidity in the specified location\")\n        condition: str = SchemaField(\n            description=\"Weather condition in the specified location\"\n        )\n        error: str = SchemaField(\n            description=\"Error message if the weather information cannot be retrieved\"\n        )\n\n    def __init__(self):\n        super().__init__(\n            id=\"f7a8b2c3-6d4e-5f8b-9e7f-6d4e5f8b9e7f\",\n            input_schema=GetWeatherInformationBlock.Input,\n            output_schema=GetWeatherInformationBlock.Output,\n            description=\"Retrieves weather information for a specified location using OpenWeatherMap API.\",\n            test_input={\n                \"location\": \"New York\",\n                \"use_celsius\": True,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_output=[\n                (\"temperature\", \"21.66\"),\n                (\"humidity\", \"32\"),\n                (\"condition\", \"overcast clouds\"),\n            ],\n            test_mock={\n                \"get_request\": lambda url, json: {\n                    \"main\": {\"temp\": 21.66, \"humidity\": 32},\n                    \"weather\": [{\"description\": \"overcast clouds\"}],\n                }\n            },\n            test_credentials=TEST_CREDENTIALS,\n        )\n\n    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n\n        units = \"metric\" if input_data.use_celsius else \"imperial\"\n        api_key = credentials.api_key\n        location = input_data.location\n        url = f\"http://api.openweathermap.org/data/2.5/weather?q={quote(location)}&appid={api_key}&units={units}\"\n        weather_data = self.get_request(url, json=True)\n"
    },
    {
      "id": "n4",
      "code": "        if \"main\" in weather_data and \"weather\" in weather_data:\n            yield \"temperature\", str(weather_data[\"main\"][\"temp\"])\n            yield \"humidity\", str(weather_data[\"main\"][\"humidity\"])\n            yield \"condition\", weather_data[\"weather\"][0][\"description\"]\n"
    },
    {
      "id": "n5",
      "code": "            raise RuntimeError(f\"Expected keys not found in response: {weather_data}\")\n"
    }
  ],
  "edges": [
    {
      "source": "n3",
      "target": "n5"
    },
    {
      "source": "n3",
      "target": "n4"
    }
  ]
}