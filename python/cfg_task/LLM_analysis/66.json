{
  "nodes": [
    {
      "id": "n0",
      "code": "import logging\nimport os\nimport signal\nimport sys\nfrom abc import ABC, abstractmethod\nfrom multiprocessing import Process, set_start_method\nfrom typing import Optional\n\nfrom backend.util.logging import configure_logging\nfrom backend.util.metrics import sentry_init\n\nlogger = logging.getLogger(__name__)\n_SERVICE_NAME = \"MainProcess\"\n"
    },
    {
      "id": "n1",
      "code": "def get_service_name():\n    return _SERVICE_NAME\n"
    },
    {
      "id": "n2",
      "code": "def set_service_name(name: str):\n    global _SERVICE_NAME\n    _SERVICE_NAME = name\n"
    },
    {
      "id": "n3",
      "code": "class AppProcess(ABC):\n    \"\"\"\n    A class to represent an object that can be executed in a background process.\n    \"\"\"\n\n    process: Optional[Process] = None\n\n    set_start_method(\"spawn\", force=True)\n    configure_logging()\n    sentry_init()\n\n    # Methods that are executed INSIDE the process #\n\n    @abstractmethod\n    def run(self):\n        \"\"\"\n        The method that will be executed in the process.\n        \"\"\"\n        pass\n\n    @classmethod\n    @property\n    def service_name(cls) -> str:\n        return cls.__name__\n\n    def cleanup(self):\n        \"\"\"\n        Implement this method on a subclass to do post-execution cleanup,\n        e.g. disconnecting from a database or terminating child processes.\n        \"\"\"\n        pass\n\n    def health_check(self):\n        \"\"\"\n        A method to check the health of the process.\n        \"\"\"\n        pass\n\n    def execute_run_command(self, silent):\n        signal.signal(signal.SIGTERM, self._self_terminate)\n\n        try:\n            if silent:\n                sys.stdout = open(os.devnull, \"w\")\n                sys.stderr = open(os.devnull, \"w\")\n\n            set_service_name(self.service_name)\n            logger.info(f\"[{self.service_name}] Starting...\")\n            self.run()\n"
    },
    {
      "id": "n4",
      "code": "        except (KeyboardInterrupt, SystemExit) as e:\n            logger.warning(f\"[{self.service_name}] Terminated: {e}; quitting...\")\n"
    },
    {
      "id": "n5",
      "code": "    def _self_terminate(self, signum: int, frame):\n        self.cleanup()\n        sys.exit(0)\n"
    },
    {
      "id": "n6",
      "code": "    # Methods that are executed OUTSIDE the process #\n\n    def __enter__(self):\n        self.start(background=True)\n        return self\n\n    def __exit__(self, *args, **kwargs):\n        self.stop()\n"
    },
    {
      "id": "n7",
      "code": "    def start(self, background: bool = False, silent: bool = False, **proc_args) -> int:\n        \"\"\"\n        Start the background process.\n        Args:\n            background: Whether to run the process in the background.\n            silent: Whether to disable stdout and stderr.\n            proc_args: Additional arguments to pass to the process.\n        Returns:\n            the process id or 0 if the process is not running in the background.\n        \"\"\"\n"
    },
    {
      "id": "n8",
      "code": "        if not background:\n            self.execute_run_command(silent)\n            return 0\n"
    },
    {
      "id": "n9",
      "code": "        self.process = Process(\n            name=self.__class__.__name__,\n            target=self.execute_run_command,\n            args=(silent,),\n            **proc_args,\n        )\n        self.process.start()\n        self.health_check()\n        return self.process.pid or 0\n"
    },
    {
      "id": "n10",
      "code": "    def stop(self):\n        \"\"\"\n        Stop the background process.\n        \"\"\"\n\n        if not self.process:\n            return\n\n        self.process.terminate()\n        self.process.join()\n        self.process = None\n"
    }
  ],
  "edges": [
    {
      "source": "n3",
      "target": "n4"
    },
    {
      "source": "n3",
      "target": "n5"
    },
    {
      "source": "n4",
      "target": "n5"
    },
    {
      "source": "n7",
      "target": "n8"
    },
    {
      "source": "n7",
      "target": "n9"
    }
  ]
}