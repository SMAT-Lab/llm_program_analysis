{
  "nodes": [
    {
      "id": "n0",
      "code": "def binary_count_setbits(a: int) -> int:\n    \"\"\"\n    Take in 1 integer, return a number that is\n    the number of 1's in binary representation of that number.\n\n    >>> binary_count_setbits(25)\n    3\n    >>> binary_count_setbits(36)\n    2\n    >>> binary_count_setbits(16)\n    1\n    >>> binary_count_setbits(58)\n    4\n    >>> binary_count_setbits(4294967295)\n    32\n    >>> binary_count_setbits(0)\n    0\n    >>> binary_count_setbits(-10)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input value must be a positive integer\n    >>> binary_count_setbits(0.8)\n    Traceback (most recent call last):\n        ...\n    TypeError: Input value must be a 'int' type\n    >>> binary_count_setbits(\"0\")\n    Traceback (most recent call last):\n        ...\n    TypeError: '<' not supported between instances of 'str' and 'int'\n    \"\"\"\n\n    if a < 0:\n        raise ValueError(\"Input value must be a positive integer\")\n"
    },
    {
      "id": "n1",
      "code": "    elif isinstance(a, float):\n        raise TypeError(\"Input value must be a 'int' type\")\n"
    },
    {
      "id": "n2",
      "code": "    return bin(a).count(\"1\")\n"
    },
    {
      "id": "n3",
      "code": "if __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"
    }
  ],
  "edges": [
    {
      "source": "n0",
      "target": "n1"
    },
    {
      "source": "n1",
      "target": "n2"
    },
    {
      "source": "n0",
      "target": "n2"
    }
  ]
}