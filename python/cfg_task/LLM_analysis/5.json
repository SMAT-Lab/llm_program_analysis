{
  "nodes": [
    {
      "id": "n0",
      "code": "\"\"\"\nThe sum-of-subsetsproblem states that a set of non-negative integers, and a\nvalue M, determine all possible subsets of the given set whose summation sum\nequal to given M.\n\nSummation of the chosen numbers must be equal to given number M and one number\ncan be used only once.\n\"\"\"\n\nfrom __future__ import annotations\n"
    },
    {
      "id": "n1",
      "code": "def generate_sum_of_subsets_soln(nums: list[int], max_sum: int) -> list[list[int]]:\n\n    result: list[list[int]] = []\n    path: list[int] = []\n    num_index = 0\n    remaining_nums_sum = sum(nums)\n\n    create_state_space_tree(nums, max_sum, num_index, path, result, remaining_nums_sum)\n\n    return result\n"
    },
    {
      "id": "n2",
      "code": "def create_state_space_tree(\n    nums: list[int],\n    max_sum: int,\n    num_index: int,\n    path: list[int],\n    result: list[list[int]],\n    remaining_nums_sum: int,\n) -> None:\n\n    \"\"\"\n    Creates a state space tree to iterate through each branch using DFS.\n    It terminates the branching of a node when any of the two conditions\n    given below satisfy.\n    This algorithm follows depth-fist-search and backtracks when the node is not\n    branchable.\n\n    \"\"\"\n"
    },
    {
      "id": "n3",
      "code": "    if sum(path) > max_sum or (remaining_nums_sum + sum(path)) < max_sum:\n        return\n"
    },
    {
      "id": "n4",
      "code": "    if sum(path) == max_sum:\n        result.append(path)\n        return\n"
    },
    {
      "id": "n5",
      "code": "    for index in range(num_index, len(nums)):\n        create_state_space_tree(\n            nums,\n            max_sum,\n            index + 1,\n            [*path, nums[index]],\n            result,\n            remaining_nums_sum - nums[index],\n        )\n"
    },
    {
      "id": "n6",
      "code": "\"\"\"\nremove the comment to take an input from the user\n\n\nprint(\"Enter the elements\")\nnums = list(map(int, input().split()))\n\nprint(\"Enter max_sum sum\")\nmax_sum = int(input())\n\n\n\"\"\"\n\n"
    },
    {
      "id": "n7",
      "code": "nums = [3, 34, 4, 12, 5, 2]\nmax_sum = 9\nresult = generate_sum_of_subsets_soln(nums, max_sum)\nprint(*result)\n"
    }
  ],
  "edges": [
    {
      "source": "n3",
      "target": "n5"
    },
    {
      "source": "n5",
      "target": "n3"
    },
    {
      "source": "n2",
      "target": "n3"
    },
    {
      "source": "n3",
      "target": "n4"
    }
  ]
}