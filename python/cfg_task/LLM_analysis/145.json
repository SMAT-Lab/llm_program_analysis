{
  "nodes": [
    {
      "id": "n0",
      "code": "from abc import ABCMeta, abstractmethod\nfrom enum import Enum\nimport sys\n\n\n\n\n"
    },
    {
      "id": "n1",
      "code": "class Suit(Enum):\n\n    HEART = 0\n    DIAMOND = 1\n    CLUBS = 2\n    SPADE = 3\n"
    },
    {
      "id": "n2",
      "code": "class Card(metaclass=ABCMeta):\n\n    def __init__(self, value, suit):\n        self.value = value\n        self.suit = suit\n        self.is_available = True\n\n    @property\n    @abstractmethod\n    def value(self):\n        pass\n\n    @value.setter\n    @abstractmethod\n    def value(self, other):\n        pass\n"
    },
    {
      "id": "n3",
      "code": "class BlackJackCard(Card):\n\n\n    def __init__(self, value, suit):\n        super(BlackJackCard, self).__init__(value, suit)\n\n"
    },
    {
      "id": "n4",
      "code": "    def is_ace(self):\n        return True if self._value == 1 else False\n\n"
    },
    {
      "id": "n5",
      "code": "    def is_face_card(self):\n        \"\"\"Jack = 11, Queen = 12, King = 13\"\"\"\n        return True if 10 < self._value <= 13 else False\n\n"
    },
    {
      "id": "n6",
      "code": "    @property\n    def value(self):\n        if self.is_ace() == 1:\n            return 1\n        elif self.is_face_card():\n            return 10\n        else:\n            return self._value\n\n\n    @value.setter\n    def value(self, new_value):\n        if 1 <= new_value <= 13:\n            self._value = new_value\n        else:\n            raise ValueError('Invalid card value: {}'.format(new_value))\n\n"
    },
    {
      "id": "n7",
      "code": "class Hand(object):\n\n\n    def __init__(self, cards):\n        self.cards = cards\n\n    def add_card(self, card):\n        self.cards.append(card)\n\n    def score(self):\n        total_value = 0\n        for card in self.cards:\n            total_value += card.value\n        return total_value\n"
    },
    {
      "id": "n8",
      "code": "class BlackJackHand(Hand):\n\n    BLACKJACK = 21\n\n    def __init__(self, cards):\n        super(BlackJackHand, self).__init__(cards)\n\n    def score(self):\n        min_over = sys.MAXSIZE\n        max_under = -sys.MAXSIZE\n        for score in self.possible_scores():\n            if self.BLACKJACK < score < min_over:\n                min_over = score\n            elif max_under < score <= self.BLACKJACK:\n                max_under = score\n        return max_under if max_under != -sys.MAXSIZE else min_over\n\n    def possible_scores(self):\n        \"\"\"Return a list of possible scores, taking Aces into account.\"\"\"\n        pass\n"
    },
    {
      "id": "n9",
      "code": "class Deck(object):\n\n\n    def __init__(self, cards):\n        self.cards = cards\n        self.deal_index = 0\n\n    def remaining_cards(self):\n        return len(self.cards) - self.deal_index\n\n    def deal_card(self):\n        try:\n            card = self.cards[self.deal_index]\n            card.is_available = False\n            self.deal_index += 1\n        except IndexError:\n            return None\n        return card\n\n    def shuffle(self):\n        pass\n"
    }
  ],
  "edges": [
    {
      "source": "n3",
      "target": "n5"
    },
    {
      "source": "n5",
      "target": "n6"
    },
    {
      "source": "n3",
      "target": "n4"
    },
    {
      "source": "n4",
      "target": "n6"
    }
  ]
}