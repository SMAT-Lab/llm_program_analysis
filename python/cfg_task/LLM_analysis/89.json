{
  "nodes": [
    {
      "id": "n0",
      "code": "# Information on 2's complement: https://en.wikipedia.org/wiki/Two%27s_complement\n\n\n\n\n"
    },
    {
      "id": "n1",
      "code": "def twos_complement(number: int) -> str:\n    \"\"\"\n    Take in a negative integer 'number'.\n    Return the two's complement representation of 'number'.\n\n    >>> twos_complement(0)\n    '0b0'\n    >>> twos_complement(-1)\n    '0b11'\n    >>> twos_complement(-5)\n    '0b1011'\n    >>> twos_complement(-17)\n    '0b101111'\n    >>> twos_complement(-207)\n    '0b100110001'\n    >>> twos_complement(1)\n    Traceback (most recent call last):\n        ...\n    ValueError: input must be a negative integer\n    \"\"\"\n\n    if number > 0:\n        raise ValueError(\"input must be a negative integer\")\n\n    binary_number_length = len(bin(number)[3:])\n    twos_complement_number = bin(abs(number) - (1 << binary_number_length))[3:]\n\n    twos_complement_number = (\n        (\n            \"1\"\n            + \"0\" * (binary_number_length - len(twos_complement_number))\n            + twos_complement_number\n        )\n        if number < 0\n        else \"0\"\n    )\n\n    return \"0b\" + twos_complement_number\n"
    },
    {
      "id": "n2",
      "code": "\n\n\n"
    },
    {
      "id": "n3",
      "code": "if __name__ == \"__main__\":\n\n    import doctest\n\n    doctest.testmod()\n"
    }
  ],
  "edges": []
}