{
  "nodes": [
    {
      "id": "n0",
      "code": "from timeit import timeit\n"
    },
    {
      "id": "n1",
      "code": "def get_set_bits_count_using_brian_kernighans_algorithm(number: int) -> int:\n    \"\"\"\n    Count the number of set bits in a 32 bit integer\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(25)\n    3\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(37)\n    3\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(21)\n    3\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(58)\n    4\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(0)\n    0\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(256)\n    1\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: the value of input must not be negative\n    \"\"\"\n\n    if number < 0:\n        raise ValueError(\"the value of input must not be negative\")\n"
    },
    {
      "id": "n2",
      "code": "    result = 0\n"
    },
    {
      "id": "n3",
      "code": "    while number:\n        number &= number - 1\n        result += 1\n"
    },
    {
      "id": "n4",
      "code": "    return result\n"
    },
    {
      "id": "n5",
      "code": "\n\n\n"
    },
    {
      "id": "n6",
      "code": "def get_set_bits_count_using_modulo_operator(number: int) -> int:\n    \"\"\"\n    Count the number of set bits in a 32 bit integer\n    >>> get_set_bits_count_using_modulo_operator(25)\n    3\n    >>> get_set_bits_count_using_modulo_operator(37)\n    3\n    >>> get_set_bits_count_using_modulo_operator(21)\n    3\n    >>> get_set_bits_count_using_modulo_operator(58)\n    4\n    >>> get_set_bits_count_using_modulo_operator(0)\n    0\n    >>> get_set_bits_count_using_modulo_operator(256)\n    1\n    >>> get_set_bits_count_using_modulo_operator(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: the value of input must not be negative\n    \"\"\"\n\n    if number < 0:\n        raise ValueError(\"the value of input must not be negative\")\n\n    result = 0\n"
    },
    {
      "id": "n7",
      "code": "    while number:\n        if number % 2 == 1:\n            result += 1\n        number >>= 1\n"
    },
    {
      "id": "n8",
      "code": "    return result\n"
    },
    {
      "id": "n9",
      "code": "\n\n\n"
    },
    {
      "id": "n10",
      "code": "def benchmark() -> None:\n    \"\"\"\n    Benchmark code for comparing 2 functions, with different length int values.\n    Brian Kernighan's algorithm is consistently faster than using modulo_operator.\n    \"\"\"\n\n    def do_benchmark(number: int) -> None:\n        setup = \"import __main__ as z\"\n        print(f\"Benchmark when {number = }:\")\n        print(f\"{get_set_bits_count_using_modulo_operator(number) = }\")\n        timing = timeit(\n            f\"z.get_set_bits_count_using_modulo_operator({number})\", setup=setup\n        )\n        print(f\"timeit() runs in {timing} seconds\")\n        print(f\"{get_set_bits_count_using_brian_kernighans_algorithm(number) = }\")\n        timing = timeit(\n            f\"z.get_set_bits_count_using_brian_kernighans_algorithm({number})\",\n            setup=setup,\n        )\n        print(f\"timeit() runs in {timing} seconds\")\n\n    for number in (25, 37, 58, 0):\n        do_benchmark(number)\n        print()\n"
    },
    {
      "id": "n11",
      "code": "if __name__ == \"__main__\":\n\n    import doctest\n\n    doctest.testmod()\n\n    benchmark()\n"
    }
  ],
  "edges": [
    {
      "source": "n3",
      "target": "n3"
    },
    {
      "source": "n6",
      "target": "n7"
    },
    {
      "source": "n3",
      "target": "n4"
    },
    {
      "source": "n7",
      "target": "n7"
    },
    {
      "source": "n1",
      "target": "n4"
    },
    {
      "source": "n1",
      "target": "n2"
    },
    {
      "source": "n7",
      "target": "n8"
    },
    {
      "source": "n2",
      "target": "n3"
    }
  ]
}