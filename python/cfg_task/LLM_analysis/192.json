{
  "nodes": [
    {
      "id": "n0",
      "code": "import operator\nfrom enum import Enum\nfrom typing import Any\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n"
    },
    {
      "id": "n1",
      "code": "class Operation(Enum):\n    ADD = \"Add\"\n    SUBTRACT = \"Subtract\"\n    MULTIPLY = \"Multiply\"\n    DIVIDE = \"Divide\"\n    POWER = \"Power\"\n"
    },
    {
      "id": "n2",
      "code": "class CalculatorBlock(Block):\n\n    class Input(BlockSchema):\n        operation: Operation = SchemaField(\n            description=\"Choose the math operation you want to perform\",\n            placeholder=\"Select an operation\",\n        )\n        a: float = SchemaField(\n            description=\"Enter the first number (A)\", placeholder=\"For example: 10\"\n        )\n        b: float = SchemaField(\n            description=\"Enter the second number (B)\", placeholder=\"For example: 5\"\n        )\n        round_result: bool = SchemaField(\n            description=\"Do you want to round the result to a whole number?\",\n            default=False,\n        )\n\n    class Output(BlockSchema):\n        result: float = SchemaField(description=\"The result of your calculation\")\n\n    def __init__(self):\n        super().__init__(\n            id=\"b1ab9b19-67a6-406d-abf5-2dba76d00c79\",\n            input_schema=CalculatorBlock.Input,\n            output_schema=CalculatorBlock.Output,\n            description=\"Performs a mathematical operation on two numbers.\",\n            categories={BlockCategory.LOGIC},\n            test_input={\n                \"operation\": Operation.ADD.value,\n                \"a\": 10.0,\n                \"b\": 5.0,\n                \"round_result\": False,\n            },\n            test_output=[\n                (\"result\", 15.0),\n            ],\n        )\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        operation = input_data.operation\n        a = input_data.a\n        b = input_data.b\n\n\n        operations = {\n            Operation.ADD: operator.add,\n            Operation.SUBTRACT: operator.sub,\n            Operation.MULTIPLY: operator.mul,\n            Operation.DIVIDE: operator.truediv,\n            Operation.POWER: operator.pow,\n        }\n\n        op_func = operations[operation]\n\n        try:\n            if operation == Operation.DIVIDE and b == 0:\n                raise ZeroDivisionError(\"Cannot divide by zero\")\n"
    },
    {
      "id": "n3",
      "code": "            result = op_func(a, b)\n\n            if input_data.round_result:\n                result = round(result)\n\n\n            yield \"result\", result\n"
    },
    {
      "id": "n4",
      "code": "        except ZeroDivisionError:\n            yield \"result\", float(\"inf\")  # Return infinity for division by zero\n"
    },
    {
      "id": "n5",
      "code": "        except Exception:\n            yield \"result\", float(\"nan\")  # Return NaN for other errors\n"
    },
    {
      "id": "n6",
      "code": "class CountItemsBlock(Block):\n    class Input(BlockSchema):\n        collection: Any = SchemaField(\n            description=\"Enter the collection you want to count. This can be a list, dictionary, string, or any other iterable.\",\n            placeholder=\"For example: [1, 2, 3] or {'a': 1, 'b': 2} or 'hello'\",\n        )\n\n    class Output(BlockSchema):\n        count: int = SchemaField(description=\"The number of items in the collection\")\n\n    def __init__(self):\n        super().__init__(\n            id=\"3c9c2f42-b0c3-435f-ba35-05f7a25c772a\",\n            input_schema=CountItemsBlock.Input,\n            output_schema=CountItemsBlock.Output,\n            description=\"Counts the number of items in a collection.\",\n            categories={BlockCategory.LOGIC},\n            test_input={\"collection\": [1, 2, 3, 4, 5]},\n            test_output=[\n                (\"count\", 5),\n            ],\n        )\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        collection = input_data.collection\n\n\n        try:\n            if isinstance(collection, (str, list, tuple, set, dict)):\n                count = len(collection)\n            elif hasattr(collection, \"__iter__\"):\n                count = sum(1 for _ in collection)\n            else:\n                raise ValueError(\"Input is not a countable collection\")\n\n"
    },
    {
      "id": "n7",
      "code": "            yield \"count\", count\n\n"
    },
    {
      "id": "n8",
      "code": "        except Exception:\n            yield \"count\", -1  # Return -1 to indicate an error\n"
    }
  ],
  "edges": [
    {
      "source": "n2",
      "target": "n4"
    },
    {
      "source": "n6",
      "target": "n8"
    },
    {
      "source": "n2",
      "target": "n3"
    },
    {
      "source": "n6",
      "target": "n7"
    }
  ]
}