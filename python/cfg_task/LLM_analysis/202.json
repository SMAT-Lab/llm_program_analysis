{
  "nodes": [
    {
      "id": "n0",
      "code": "import fastapi\n\nfrom .config import Settings\nfrom .middleware import auth_middleware\nfrom .models import DEFAULT_USER_ID, User\n"
    },
    {
      "id": "n1",
      "code": "def requires_user(payload: dict = fastapi.Depends(auth_middleware)) -> User:\n    return verify_user(payload, admin_only=False)\n"
    },
    {
      "id": "n2",
      "code": "\n\n\n"
    },
    {
      "id": "n3",
      "code": "def requires_admin_user(\n    payload: dict = fastapi.Depends(auth_middleware),\n) -> User:\n    return verify_user(payload, admin_only=True)\n"
    },
    {
      "id": "n4",
      "code": "\n\n\n"
    },
    {
      "id": "n5",
      "code": "def verify_user(payload: dict | None, admin_only: bool) -> User:\n\n    if not payload:\n        if Settings.ENABLE_AUTH:\n            raise fastapi.HTTPException(\n                status_code=401, detail=\"Authorization header is missing\"\n            )\n        # This handles the case when authentication is disabled\n        payload = {\"sub\": DEFAULT_USER_ID, \"role\": \"admin\"}\n\n    user_id = payload.get(\"sub\")\n\n    if not user_id:\n        raise fastapi.HTTPException(\n            status_code=401, detail=\"User ID not found in token\"\n        )\n"
    },
    {
      "id": "n6",
      "code": "    if admin_only and payload[\"role\"] != \"admin\":\n        raise fastapi.HTTPException(status_code=403, detail=\"Admin access required\")\n"
    },
    {
      "id": "n7",
      "code": "    return User.from_payload(payload)\n"
    },
    {
      "id": "n8",
      "code": "\n\n\n"
    },
    {
      "id": "n9",
      "code": "def get_user_id(payload: dict = fastapi.Depends(auth_middleware)) -> str:\n    user_id = payload.get(\"sub\")\n\n    if not user_id:\n        raise fastapi.HTTPException(\n            status_code=401, detail=\"User ID not found in token\"\n        )\n\n    return user_id\n"
    },
    {
      "id": "n10",
      "code": "\n\n"
    }
  ],
  "edges": [
    {
      "source": "n5",
      "target": "n6"
    },
    {
      "source": "n5",
      "target": "n7"
    },
    {
      "source": "n6",
      "target": "n7"
    }
  ]
}