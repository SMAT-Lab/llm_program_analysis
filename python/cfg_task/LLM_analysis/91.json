{
  "nodes": [
    {
      "id": "n0",
      "code": "import os\nimport subprocess\n\ndirectory = os.path.dirname(os.path.realpath(__file__))\n\nBACKEND_DIR = \".\"\nLIBS_DIR = \"../autogpt_libs\"\nTARGET_DIRS = [BACKEND_DIR, LIBS_DIR]\n"
    },
    {
      "id": "n1",
      "code": "def run(*command: str) -> None:\n\n    print(f\">>>>> Running poetry run {' '.join(command)}\")\n    subprocess.run([\"poetry\", \"run\"] + list(command), cwd=directory, check=True)\n"
    },
    {
      "id": "n2",
      "code": "def lint():\n\n    try:\n        run(\"ruff\", \"check\", *TARGET_DIRS, \"--exit-zero\")\n        run(\"ruff\", \"format\", \"--diff\", \"--check\", LIBS_DIR)\n        run(\"isort\", \"--diff\", \"--check\", \"--profile\", \"black\", BACKEND_DIR)\n        run(\"black\", \"--diff\", \"--check\", BACKEND_DIR)\n        run(\"pyright\", *TARGET_DIRS)\n\n    except subprocess.CalledProcessError as e:\n        print(\"Lint failed, try running `poetry run format` to fix the issues: \", e)\n        raise e\n"
    },
    {
      "id": "n3",
      "code": "def format():\n\n    run(\"ruff\", \"check\", \"--fix\", *TARGET_DIRS)\n    run(\"ruff\", \"format\", LIBS_DIR)\n    run(\"isort\", \"--profile\", \"black\", BACKEND_DIR)\n    run(\"black\", BACKEND_DIR)\n    run(\"pyright\", *TARGET_DIRS)\n"
    }
  ],
  "edges": []
}