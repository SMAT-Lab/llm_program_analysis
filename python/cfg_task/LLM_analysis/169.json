{
  "nodes": [
    {
      "id": "n0",
      "code": "import re\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n\n\n\n\n"
    },
    {
      "id": "n1",
      "code": "class CodeExtractionBlock(Block):\n\n    class Input(BlockSchema):\n        text: str = SchemaField(\n            description=\"Text containing code blocks to extract (e.g., AI response)\",\n            placeholder=\"Enter text containing code blocks\",\n        )\n\n    class Output(BlockSchema):\n        html: str = SchemaField(description=\"Extracted HTML code\")\n        css: str = SchemaField(description=\"Extracted CSS code\")\n        javascript: str = SchemaField(description=\"Extracted JavaScript code\")\n        python: str = SchemaField(description=\"Extracted Python code\")\n        sql: str = SchemaField(description=\"Extracted SQL code\")\n        java: str = SchemaField(description=\"Extracted Java code\")\n        cpp: str = SchemaField(description=\"Extracted C++ code\")\n        csharp: str = SchemaField(description=\"Extracted C# code\")\n        json_code: str = SchemaField(description=\"Extracted JSON code\")\n        bash: str = SchemaField(description=\"Extracted Bash code\")\n        php: str = SchemaField(description=\"Extracted PHP code\")\n        ruby: str = SchemaField(description=\"Extracted Ruby code\")\n        yaml: str = SchemaField(description=\"Extracted YAML code\")\n        markdown: str = SchemaField(description=\"Extracted Markdown code\")\n        typescript: str = SchemaField(description=\"Extracted TypeScript code\")\n        xml: str = SchemaField(description=\"Extracted XML code\")\n\n        remaining_text: str = SchemaField(\n            description=\"Remaining text after code extraction\"\n        )\n\n    def __init__(self):\n        super().__init__(\n            id=\"d3a7d896-3b78-4f44-8b4b-48fbf4f0bcd8\",\n            description=\"Extracts code blocks from text and identifies their programming languages\",\n            categories={BlockCategory.TEXT},\n            input_schema=CodeExtractionBlock.Input,\n            output_schema=CodeExtractionBlock.Output,\n            test_input={\n                \"text\": \"Here's a Python example:\\n```python\\nprint('Hello World')\\n```\\nAnd some HTML:\\n```html\\n<h1>Title</h1>\\n```\"\n            },\n            test_output=[\n                (\"html\", \"<h1>Title</h1>\"),\n                (\"python\", \"print('Hello World')\"),\n                (\"remaining_text\", \"Here's a Python example:\\nAnd some HTML:\"),\n            ],\n        )\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n\n        # List of supported programming languages with mapped aliases\n\n        language_aliases = {\n            \"html\": [\"html\", \"htm\"],\n            \"css\": [\"css\"],\n            \"javascript\": [\"javascript\", \"js\"],\n            \"python\": [\"python\", \"py\"],\n            \"sql\": [\"sql\"],\n            \"java\": [\"java\"],\n            \"cpp\": [\"cpp\", \"c++\"],\n            \"csharp\": [\"csharp\", \"c#\", \"cs\"],\n            \"json_code\": [\"json\"],\n            \"bash\": [\"bash\", \"shell\", \"sh\"],\n            \"php\": [\"php\"],\n            \"ruby\": [\"ruby\", \"rb\"],\n            \"yaml\": [\"yaml\", \"yml\"],\n            \"markdown\": [\"markdown\", \"md\"],\n            \"typescript\": [\"typescript\", \"ts\"],\n            \"xml\": [\"xml\"],\n        }\n\n        # Extract code for each language\n\n        for canonical_name, aliases in language_aliases.items():\n            code = \"\"\n            # Try each alias for the language\n            for alias in aliases:\n                code_for_alias = self.extract_code(input_data.text, alias)\n                if code_for_alias:\n                    code = code + \"\\n\\n\" + code_for_alias if code else code_for_alias\n\n            if code:  # Only yield if there's actual code content\n                yield canonical_name, code\n\n        # Remove all code blocks from the text to get remaining text\n\n        pattern = (\n            r\"```(?:\"\n            + \"|\".join(\n                re.escape(alias)\n                for aliases in language_aliases.values()\n                for alias in aliases\n            )\n            + r\")\\s+[\\s\\S]*?```\"\n        )\n\n        remaining_text = re.sub(pattern, \"\", input_data.text).strip()\n        remaining_text = re.sub(r\"\\n\\s*\\n\", \"\\n\", remaining_text)\n\n        if remaining_text:  # Only yield if there's remaining text\n            yield \"remaining_text\", remaining_text\n"
    },
    {
      "id": "n2",
      "code": "    def extract_code(self, text: str, language: str) -> str:\n\n        # Escape special regex characters in the language string\n\n        language = re.escape(language)\n\n        # Extract all code blocks enclosed in ```language``` blocks\n        pattern = re.compile(rf\"```{language}\\s+(.*?)```\", re.DOTALL | re.IGNORECASE)\n        matches = pattern.finditer(text)\n        # Combine all code blocks for this language with newlines between them\n        code_blocks = [match.group(1).strip() for match in matches]\n        return \"\\n\\n\".join(code_blocks) if code_blocks else \"\"\n"
    },
    {
      "id": "n3",
      "code": "    class Input(BlockSchema):\n        text: str = SchemaField(\n            description=\"Text containing code blocks to extract (e.g., AI response)\",\n            placeholder=\"Enter text containing code blocks\",\n        )\n"
    },
    {
      "id": "n4",
      "code": "    class Output(BlockSchema):\n        html: str = SchemaField(description=\"Extracted HTML code\")\n        css: str = SchemaField(description=\"Extracted CSS code\")\n        javascript: str = SchemaField(description=\"Extracted JavaScript code\")\n        python: str = SchemaField(description=\"Extracted Python code\")\n        sql: str = SchemaField(description=\"Extracted SQL code\")\n        java: str = SchemaField(description=\"Extracted Java code\")\n        cpp: str = SchemaField(description=\"Extracted C++ code\")\n        csharp: str = SchemaField(description=\"Extracted C# code\")\n        json_code: str = SchemaField(description=\"Extracted JSON code\")\n        bash: str = SchemaField(description=\"Extracted Bash code\")\n        php: str = SchemaField(description=\"Extracted PHP code\")\n        ruby: str = SchemaField(description=\"Extracted Ruby code\")\n        yaml: str = SchemaField(description=\"Extracted YAML code\")\n        markdown: str = SchemaField(description=\"Extracted Markdown code\")\n        typescript: str = SchemaField(description=\"Extracted TypeScript code\")\n        xml: str = SchemaField(description=\"Extracted XML code\")\n        remaining_text: str = SchemaField(\n            description=\"Remaining text after code extraction\"\n        )\n"
    },
    {
      "id": "n5",
      "code": "    def __init__(self):\n        super().__init__(\n            id=\"d3a7d896-3b78-4f44-8b4b-48fbf4f0bcd8\",\n            description=\"Extracts code blocks from text and identifies their programming languages\",\n            categories={BlockCategory.TEXT},\n            input_schema=CodeExtractionBlock.Input,\n            output_schema=CodeExtractionBlock.Output,\n            test_input={\n                \"text\": \"Here's a Python example:\\n```python\\nprint('Hello World')\\n```\\nAnd some HTML:\\n```html\\n<h1>Title</h1>\\n```\"\n            },\n            test_output=[\n                (\"html\", \"<h1>Title</h1>\"),\n                (\"python\", \"print('Hello World')\"),\n                (\"remaining_text\", \"Here's a Python example:\\nAnd some HTML:\"),\n            ],\n        )\n"
    },
    {
      "id": "n6",
      "code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n\n        # List of supported programming languages with mapped aliases\n        language_aliases = {\n            \"html\": [\"html\", \"htm\"],\n            \"css\": [\"css\"],\n            \"javascript\": [\"javascript\", \"js\"],\n            \"python\": [\"python\", \"py\"],\n            \"sql\": [\"sql\"],\n            \"java\": [\"java\"],\n            \"cpp\": [\"cpp\", \"c++\"],\n            \"csharp\": [\"csharp\", \"c#\", \"cs\"],\n            \"json_code\": [\"json\"],\n            \"bash\": [\"bash\", \"shell\", \"sh\"],\n            \"php\": [\"php\"],\n            \"ruby\": [\"ruby\", \"rb\"],\n            \"yaml\": [\"yaml\", \"yml\"],\n            \"markdown\": [\"markdown\", \"md\"],\n            \"typescript\": [\"typescript\", \"ts\"],\n            \"xml\": [\"xml\"],\n        }\n\n\n\n        # Extract code for each language\n"
    },
    {
      "id": "n7",
      "code": "        for canonical_name, aliases in language_aliases.items():\n            code = \"\"\n"
    },
    {
      "id": "n8",
      "code": "            # Try each alias for the language\n            for alias in aliases:\n\n                code_for_alias = self.extract_code(input_data.text, alias)\n                if code_for_alias:\n                    code = code + \"\\n\\n\" + code_for_alias if code else code_for_alias\n"
    },
    {
      "id": "n9",
      "code": "\n\n            if code:  # Only yield if there's actual code content\n                yield canonical_name, code\n"
    },
    {
      "id": "n10",
      "code": "\n\n        # Remove all code blocks from the text to get remaining text\n\n        pattern = (\n            r\"```(?:\"\n            + \"|\".join(\n                re.escape(alias)\n                for aliases in language_aliases.values()\n                for alias in aliases\n            )\n            + r\")\\s+[\\s\\S]*?```\"\n        )\n\n\n\n        remaining_text = re.sub(pattern, \"\", input_data.text).strip()\n        remaining_text = re.sub(r\"\\n\\s*\\n\", \"\\n\", remaining_text)\n\n\n\n        if remaining_text:  # Only yield if there's remaining text\n            yield \"remaining_text\", remaining_text\n\n\n\n"
    },
    {
      "id": "n11",
      "code": "    def extract_code(self, text: str, language: str) -> str:\n\n        # Escape special regex characters in the language string\n        language = re.escape(language)\n\n        # Extract all code blocks enclosed in ```language``` blocks\n        pattern = re.compile(rf\"```{language}\\s+(.*?)```\", re.DOTALL | re.IGNORECASE)\n\n        matches = pattern.finditer(text)\n\n        # Combine all code blocks for this language with newlines between them\n        code_blocks = [match.group(1).strip() for match in matches]\n\n        return \"\\n\\n\".join(code_blocks) if code_blocks else \"\"\n"
    }
  ],
  "edges": [
    {
      "source": "n9",
      "target": "n7"
    },
    {
      "source": "n6",
      "target": "n7"
    },
    {
      "source": "n8",
      "target": "n9"
    },
    {
      "source": "n9",
      "target": "n10"
    },
    {
      "source": "n7",
      "target": "n8"
    }
  ]
}