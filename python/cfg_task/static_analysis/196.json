{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "import logging",
        "import pytest",
        "from backend.util.test import SpinTestServer",
        "logger = logging.getLogger(__name__)",
        "ch = logging.StreamHandler()",
        "ch.setLevel(logging.INFO)",
        "formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')",
        "ch.setFormatter(formatter)",
        "logger.addHandler(ch)",
        "@pytest.fixture(scope='session')\nasync def server():\n    async with SpinTestServer() as server:\n        yield server",
        "async with SpinTestServer() as server:\n    yield server",
        "(yield server)",
        "@pytest.fixture(scope='session', autouse=True)\nasync def graph_cleanup(server):\n    created_graph_ids = []\n    original_create_graph = server.agent_server.test_create_graph\n\n    async def create_graph_wrapper(*args, **kwargs):\n        created_graph = await original_create_graph(*args, **kwargs)\n        user_id = kwargs.get('user_id', args[2] if len(args) > 2 else None)\n        created_graph_ids.append((created_graph.id, user_id))\n        return created_graph\n    try:\n        server.agent_server.test_create_graph = create_graph_wrapper\n        yield\n    finally:\n        server.agent_server.test_create_graph = original_create_graph\n        for (graph_id, user_id) in created_graph_ids:\n            if user_id:\n                resp = await server.agent_server.test_delete_graph(graph_id, user_id)\n                num_deleted = resp['version_counts']\n                assert num_deleted > 0, f'Graph {graph_id} was not deleted.'",
        "created_graph_ids = []",
        "original_create_graph = server.agent_server.test_create_graph",
        "async def create_graph_wrapper(*args, **kwargs):\n    created_graph = await original_create_graph(*args, **kwargs)\n    user_id = kwargs.get('user_id', args[2] if len(args) > 2 else None)\n    created_graph_ids.append((created_graph.id, user_id))\n    return created_graph",
        "created_graph = await original_create_graph(*args, **kwargs)",
        "user_id = kwargs.get('user_id', args[2] if len(args) > 2 else None)",
        "created_graph_ids.append((created_graph.id, user_id))",
        "return created_graph"
      ],
      "code": "import logging\nimport pytest\nfrom backend.util.test import SpinTestServer\nlogger = logging.getLogger(__name__)\nch = logging.StreamHandler()\nch.setLevel(logging.INFO)\nformatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nch.setFormatter(formatter)\nlogger.addHandler(ch)\n@pytest.fixture(scope='session')\nasync def server():\n    async with SpinTestServer() as server:\n        yield server\nasync with SpinTestServer() as server:\n    yield server\n(yield server)\n@pytest.fixture(scope='session', autouse=True)\nasync def graph_cleanup(server):\n    created_graph_ids = []\n    original_create_graph = server.agent_server.test_create_graph\n\n    async def create_graph_wrapper(*args, **kwargs):\n        created_graph = await original_create_graph(*args, **kwargs)\n        user_id = kwargs.get('user_id', args[2] if len(args) > 2 else None)\n        created_graph_ids.append((created_graph.id, user_id))\n        return created_graph\n    try:\n        server.agent_server.test_create_graph = create_graph_wrapper\n        yield\n    finally:\n        server.agent_server.test_create_graph = original_create_graph\n        for (graph_id, user_id) in created_graph_ids:\n            if user_id:\n                resp = await server.agent_server.test_delete_graph(graph_id, user_id)\n                num_deleted = resp['version_counts']\n                assert num_deleted > 0, f'Graph {graph_id} was not deleted.'\ncreated_graph_ids = []\noriginal_create_graph = server.agent_server.test_create_graph\nasync def create_graph_wrapper(*args, **kwargs):\n    created_graph = await original_create_graph(*args, **kwargs)\n    user_id = kwargs.get('user_id', args[2] if len(args) > 2 else None)\n    created_graph_ids.append((created_graph.id, user_id))\n    return created_graph\ncreated_graph = await original_create_graph(*args, **kwargs)\nuser_id = kwargs.get('user_id', args[2] if len(args) > 2 else None)\ncreated_graph_ids.append((created_graph.id, user_id))\nreturn created_graph"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "try:\n    server.agent_server.test_create_graph = create_graph_wrapper\n    yield\nfinally:\n    server.agent_server.test_create_graph = original_create_graph\n    for (graph_id, user_id) in created_graph_ids:\n        if user_id:\n            resp = await server.agent_server.test_delete_graph(graph_id, user_id)\n            num_deleted = resp['version_counts']\n            assert num_deleted > 0, f'Graph {graph_id} was not deleted.'",
        "server.agent_server.test_create_graph = create_graph_wrapper",
        "(yield)",
        "server.agent_server.test_create_graph = original_create_graph"
      ],
      "code": "try:\n    server.agent_server.test_create_graph = create_graph_wrapper\n    yield\nfinally:\n    server.agent_server.test_create_graph = original_create_graph\n    for (graph_id, user_id) in created_graph_ids:\n        if user_id:\n            resp = await server.agent_server.test_delete_graph(graph_id, user_id)\n            num_deleted = resp['version_counts']\n            assert num_deleted > 0, f'Graph {graph_id} was not deleted.'\nserver.agent_server.test_create_graph = create_graph_wrapper\n(yield)\nserver.agent_server.test_create_graph = original_create_graph"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [
        "(graph_id, user_id)",
        "created_graph_ids"
      ],
      "code": "(graph_id, user_id)\ncreated_graph_ids"
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [
        "user_id"
      ],
      "code": "user_id"
    },
    {
      "id": "n4",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n5",
      "type": "block",
      "statements": [
        "resp = await server.agent_server.test_delete_graph(graph_id, user_id)",
        "num_deleted = resp['version_counts']",
        "assert num_deleted > 0, f'Graph {graph_id} was not deleted.'"
      ],
      "code": "resp = await server.agent_server.test_delete_graph(graph_id, user_id)\nnum_deleted = resp['version_counts']\nassert num_deleted > 0, f'Graph {graph_id} was not deleted.'"
    },
    {
      "id": "n6",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n7",
      "type": "block",
      "statements": [],
      "code": ""
    }
  ],
  "edges": [
    {
      "source": "n6",
      "target": "n7"
    },
    {
      "source": "n7",
      "target": "n2"
    },
    {
      "source": "n2",
      "target": "n4"
    },
    {
      "source": "n3",
      "target": "n6"
    },
    {
      "source": "n3",
      "target": "n5"
    },
    {
      "source": "n1",
      "target": "n2"
    },
    {
      "source": "n5",
      "target": "n7"
    },
    {
      "source": "n2",
      "target": "n3"
    }
  ]
}