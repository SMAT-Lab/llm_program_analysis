{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "import datetime",
        "import prisma.enums",
        "import backend.server.v2.store.model",
        "def test_pagination():\n    pagination = backend.server.v2.store.model.Pagination(total_items=100, total_pages=5, current_page=2, page_size=20)\n    assert pagination.total_items == 100\n    assert pagination.total_pages == 5\n    assert pagination.current_page == 2\n    assert pagination.page_size == 20",
        "pagination = backend.server.v2.store.model.Pagination(total_items=100, total_pages=5, current_page=2, page_size=20)",
        "assert pagination.total_items == 100",
        "assert pagination.total_pages == 5",
        "assert pagination.current_page == 2",
        "assert pagination.page_size == 20",
        "def test_store_agent():\n    agent = backend.server.v2.store.model.StoreAgent(slug='test-agent', agent_name='Test Agent', agent_image='test.jpg', creator='creator1', creator_avatar='avatar.jpg', sub_heading='Test subheading', description='Test description', runs=50, rating=4.5)\n    assert agent.slug == 'test-agent'\n    assert agent.agent_name == 'Test Agent'\n    assert agent.runs == 50\n    assert agent.rating == 4.5",
        "agent = backend.server.v2.store.model.StoreAgent(slug='test-agent', agent_name='Test Agent', agent_image='test.jpg', creator='creator1', creator_avatar='avatar.jpg', sub_heading='Test subheading', description='Test description', runs=50, rating=4.5)",
        "assert agent.slug == 'test-agent'",
        "assert agent.agent_name == 'Test Agent'",
        "assert agent.runs == 50",
        "assert agent.rating == 4.5",
        "def test_store_agents_response():\n    response = backend.server.v2.store.model.StoreAgentsResponse(agents=[backend.server.v2.store.model.StoreAgent(slug='test-agent', agent_name='Test Agent', agent_image='test.jpg', creator='creator1', creator_avatar='avatar.jpg', sub_heading='Test subheading', description='Test description', runs=50, rating=4.5)], pagination=backend.server.v2.store.model.Pagination(total_items=1, total_pages=1, current_page=1, page_size=20))\n    assert len(response.agents) == 1\n    assert response.pagination.total_items == 1",
        "response = backend.server.v2.store.model.StoreAgentsResponse(agents=[backend.server.v2.store.model.StoreAgent(slug='test-agent', agent_name='Test Agent', agent_image='test.jpg', creator='creator1', creator_avatar='avatar.jpg', sub_heading='Test subheading', description='Test description', runs=50, rating=4.5)], pagination=backend.server.v2.store.model.Pagination(total_items=1, total_pages=1, current_page=1, page_size=20))",
        "assert len(response.agents) == 1",
        "assert response.pagination.total_items == 1",
        "def test_store_agent_details():\n    details = backend.server.v2.store.model.StoreAgentDetails(store_listing_version_id='version123', slug='test-agent', agent_name='Test Agent', agent_video='video.mp4', agent_image=['image1.jpg', 'image2.jpg'], creator='creator1', creator_avatar='avatar.jpg', sub_heading='Test subheading', description='Test description', categories=['cat1', 'cat2'], runs=50, rating=4.5, versions=['1.0', '2.0'], last_updated=datetime.datetime.now())\n    assert details.slug == 'test-agent'\n    assert len(details.agent_image) == 2\n    assert len(details.categories) == 2\n    assert len(details.versions) == 2",
        "details = backend.server.v2.store.model.StoreAgentDetails(store_listing_version_id='version123', slug='test-agent', agent_name='Test Agent', agent_video='video.mp4', agent_image=['image1.jpg', 'image2.jpg'], creator='creator1', creator_avatar='avatar.jpg', sub_heading='Test subheading', description='Test description', categories=['cat1', 'cat2'], runs=50, rating=4.5, versions=['1.0', '2.0'], last_updated=datetime.datetime.now())",
        "assert details.slug == 'test-agent'",
        "assert len(details.agent_image) == 2",
        "assert len(details.categories) == 2",
        "assert len(details.versions) == 2",
        "def test_creator():\n    creator = backend.server.v2.store.model.Creator(agent_rating=4.8, agent_runs=1000, name='Test Creator', username='creator1', description='Test description', avatar_url='avatar.jpg', num_agents=5, is_featured=False)\n    assert creator.name == 'Test Creator'\n    assert creator.num_agents == 5",
        "creator = backend.server.v2.store.model.Creator(agent_rating=4.8, agent_runs=1000, name='Test Creator', username='creator1', description='Test description', avatar_url='avatar.jpg', num_agents=5, is_featured=False)",
        "assert creator.name == 'Test Creator'",
        "assert creator.num_agents == 5",
        "def test_creators_response():\n    response = backend.server.v2.store.model.CreatorsResponse(creators=[backend.server.v2.store.model.Creator(agent_rating=4.8, agent_runs=1000, name='Test Creator', username='creator1', description='Test description', avatar_url='avatar.jpg', num_agents=5, is_featured=False)], pagination=backend.server.v2.store.model.Pagination(total_items=1, total_pages=1, current_page=1, page_size=20))\n    assert len(response.creators) == 1\n    assert response.pagination.total_items == 1",
        "response = backend.server.v2.store.model.CreatorsResponse(creators=[backend.server.v2.store.model.Creator(agent_rating=4.8, agent_runs=1000, name='Test Creator', username='creator1', description='Test description', avatar_url='avatar.jpg', num_agents=5, is_featured=False)], pagination=backend.server.v2.store.model.Pagination(total_items=1, total_pages=1, current_page=1, page_size=20))",
        "assert len(response.creators) == 1",
        "assert response.pagination.total_items == 1",
        "def test_creator_details():\n    details = backend.server.v2.store.model.CreatorDetails(name='Test Creator', username='creator1', description='Test description', links=['link1.com', 'link2.com'], avatar_url='avatar.jpg', agent_rating=4.8, agent_runs=1000, top_categories=['cat1', 'cat2'])\n    assert details.name == 'Test Creator'\n    assert len(details.links) == 2\n    assert details.agent_rating == 4.8\n    assert len(details.top_categories) == 2",
        "details = backend.server.v2.store.model.CreatorDetails(name='Test Creator', username='creator1', description='Test description', links=['link1.com', 'link2.com'], avatar_url='avatar.jpg', agent_rating=4.8, agent_runs=1000, top_categories=['cat1', 'cat2'])",
        "assert details.name == 'Test Creator'",
        "assert len(details.links) == 2",
        "assert details.agent_rating == 4.8",
        "assert len(details.top_categories) == 2",
        "def test_store_submission():\n    submission = backend.server.v2.store.model.StoreSubmission(agent_id='agent123', agent_version=1, sub_heading='Test subheading', name='Test Agent', slug='test-agent', description='Test description', image_urls=['image1.jpg', 'image2.jpg'], date_submitted=datetime.datetime(2023, 1, 1), status=prisma.enums.SubmissionStatus.PENDING, runs=50, rating=4.5)\n    assert submission.name == 'Test Agent'\n    assert len(submission.image_urls) == 2\n    assert submission.status == prisma.enums.SubmissionStatus.PENDING",
        "submission = backend.server.v2.store.model.StoreSubmission(agent_id='agent123', agent_version=1, sub_heading='Test subheading', name='Test Agent', slug='test-agent', description='Test description', image_urls=['image1.jpg', 'image2.jpg'], date_submitted=datetime.datetime(2023, 1, 1), status=prisma.enums.SubmissionStatus.PENDING, runs=50, rating=4.5)",
        "assert submission.name == 'Test Agent'",
        "assert len(submission.image_urls) == 2",
        "assert submission.status == prisma.enums.SubmissionStatus.PENDING",
        "def test_store_submissions_response():\n    response = backend.server.v2.store.model.StoreSubmissionsResponse(submissions=[backend.server.v2.store.model.StoreSubmission(agent_id='agent123', agent_version=1, sub_heading='Test subheading', name='Test Agent', slug='test-agent', description='Test description', image_urls=['image1.jpg'], date_submitted=datetime.datetime(2023, 1, 1), status=prisma.enums.SubmissionStatus.PENDING, runs=50, rating=4.5)], pagination=backend.server.v2.store.model.Pagination(total_items=1, total_pages=1, current_page=1, page_size=20))\n    assert len(response.submissions) == 1\n    assert response.pagination.total_items == 1",
        "response = backend.server.v2.store.model.StoreSubmissionsResponse(submissions=[backend.server.v2.store.model.StoreSubmission(agent_id='agent123', agent_version=1, sub_heading='Test subheading', name='Test Agent', slug='test-agent', description='Test description', image_urls=['image1.jpg'], date_submitted=datetime.datetime(2023, 1, 1), status=prisma.enums.SubmissionStatus.PENDING, runs=50, rating=4.5)], pagination=backend.server.v2.store.model.Pagination(total_items=1, total_pages=1, current_page=1, page_size=20))",
        "assert len(response.submissions) == 1",
        "assert response.pagination.total_items == 1",
        "def test_store_submission_request():\n    request = backend.server.v2.store.model.StoreSubmissionRequest(agent_id='agent123', agent_version=1, slug='test-agent', name='Test Agent', sub_heading='Test subheading', video_url='video.mp4', image_urls=['image1.jpg', 'image2.jpg'], description='Test description', categories=['cat1', 'cat2'])\n    assert request.agent_id == 'agent123'\n    assert request.agent_version == 1\n    assert len(request.image_urls) == 2\n    assert len(request.categories) == 2",
        "request = backend.server.v2.store.model.StoreSubmissionRequest(agent_id='agent123', agent_version=1, slug='test-agent', name='Test Agent', sub_heading='Test subheading', video_url='video.mp4', image_urls=['image1.jpg', 'image2.jpg'], description='Test description', categories=['cat1', 'cat2'])",
        "assert request.agent_id == 'agent123'",
        "assert request.agent_version == 1",
        "assert len(request.image_urls) == 2",
        "assert len(request.categories) == 2"
      ],
      "code": "import datetime\nimport prisma.enums\nimport backend.server.v2.store.model\ndef test_pagination():\n    pagination = backend.server.v2.store.model.Pagination(total_items=100, total_pages=5, current_page=2, page_size=20)\n    assert pagination.total_items == 100\n    assert pagination.total_pages == 5\n    assert pagination.current_page == 2\n    assert pagination.page_size == 20\npagination = backend.server.v2.store.model.Pagination(total_items=100, total_pages=5, current_page=2, page_size=20)\nassert pagination.total_items == 100\nassert pagination.total_pages == 5\nassert pagination.current_page == 2\nassert pagination.page_size == 20\ndef test_store_agent():\n    agent = backend.server.v2.store.model.StoreAgent(slug='test-agent', agent_name='Test Agent', agent_image='test.jpg', creator='creator1', creator_avatar='avatar.jpg', sub_heading='Test subheading', description='Test description', runs=50, rating=4.5)\n    assert agent.slug == 'test-agent'\n    assert agent.agent_name == 'Test Agent'\n    assert agent.runs == 50\n    assert agent.rating == 4.5\nagent = backend.server.v2.store.model.StoreAgent(slug='test-agent', agent_name='Test Agent', agent_image='test.jpg', creator='creator1', creator_avatar='avatar.jpg', sub_heading='Test subheading', description='Test description', runs=50, rating=4.5)\nassert agent.slug == 'test-agent'\nassert agent.agent_name == 'Test Agent'\nassert agent.runs == 50\nassert agent.rating == 4.5\ndef test_store_agents_response():\n    response = backend.server.v2.store.model.StoreAgentsResponse(agents=[backend.server.v2.store.model.StoreAgent(slug='test-agent', agent_name='Test Agent', agent_image='test.jpg', creator='creator1', creator_avatar='avatar.jpg', sub_heading='Test subheading', description='Test description', runs=50, rating=4.5)], pagination=backend.server.v2.store.model.Pagination(total_items=1, total_pages=1, current_page=1, page_size=20))\n    assert len(response.agents) == 1\n    assert response.pagination.total_items == 1\nresponse = backend.server.v2.store.model.StoreAgentsResponse(agents=[backend.server.v2.store.model.StoreAgent(slug='test-agent', agent_name='Test Agent', agent_image='test.jpg', creator='creator1', creator_avatar='avatar.jpg', sub_heading='Test subheading', description='Test description', runs=50, rating=4.5)], pagination=backend.server.v2.store.model.Pagination(total_items=1, total_pages=1, current_page=1, page_size=20))\nassert len(response.agents) == 1\nassert response.pagination.total_items == 1\ndef test_store_agent_details():\n    details = backend.server.v2.store.model.StoreAgentDetails(store_listing_version_id='version123', slug='test-agent', agent_name='Test Agent', agent_video='video.mp4', agent_image=['image1.jpg', 'image2.jpg'], creator='creator1', creator_avatar='avatar.jpg', sub_heading='Test subheading', description='Test description', categories=['cat1', 'cat2'], runs=50, rating=4.5, versions=['1.0', '2.0'], last_updated=datetime.datetime.now())\n    assert details.slug == 'test-agent'\n    assert len(details.agent_image) == 2\n    assert len(details.categories) == 2\n    assert len(details.versions) == 2\ndetails = backend.server.v2.store.model.StoreAgentDetails(store_listing_version_id='version123', slug='test-agent', agent_name='Test Agent', agent_video='video.mp4', agent_image=['image1.jpg', 'image2.jpg'], creator='creator1', creator_avatar='avatar.jpg', sub_heading='Test subheading', description='Test description', categories=['cat1', 'cat2'], runs=50, rating=4.5, versions=['1.0', '2.0'], last_updated=datetime.datetime.now())\nassert details.slug == 'test-agent'\nassert len(details.agent_image) == 2\nassert len(details.categories) == 2\nassert len(details.versions) == 2\ndef test_creator():\n    creator = backend.server.v2.store.model.Creator(agent_rating=4.8, agent_runs=1000, name='Test Creator', username='creator1', description='Test description', avatar_url='avatar.jpg', num_agents=5, is_featured=False)\n    assert creator.name == 'Test Creator'\n    assert creator.num_agents == 5\ncreator = backend.server.v2.store.model.Creator(agent_rating=4.8, agent_runs=1000, name='Test Creator', username='creator1', description='Test description', avatar_url='avatar.jpg', num_agents=5, is_featured=False)\nassert creator.name == 'Test Creator'\nassert creator.num_agents == 5\ndef test_creators_response():\n    response = backend.server.v2.store.model.CreatorsResponse(creators=[backend.server.v2.store.model.Creator(agent_rating=4.8, agent_runs=1000, name='Test Creator', username='creator1', description='Test description', avatar_url='avatar.jpg', num_agents=5, is_featured=False)], pagination=backend.server.v2.store.model.Pagination(total_items=1, total_pages=1, current_page=1, page_size=20))\n    assert len(response.creators) == 1\n    assert response.pagination.total_items == 1\nresponse = backend.server.v2.store.model.CreatorsResponse(creators=[backend.server.v2.store.model.Creator(agent_rating=4.8, agent_runs=1000, name='Test Creator', username='creator1', description='Test description', avatar_url='avatar.jpg', num_agents=5, is_featured=False)], pagination=backend.server.v2.store.model.Pagination(total_items=1, total_pages=1, current_page=1, page_size=20))\nassert len(response.creators) == 1\nassert response.pagination.total_items == 1\ndef test_creator_details():\n    details = backend.server.v2.store.model.CreatorDetails(name='Test Creator', username='creator1', description='Test description', links=['link1.com', 'link2.com'], avatar_url='avatar.jpg', agent_rating=4.8, agent_runs=1000, top_categories=['cat1', 'cat2'])\n    assert details.name == 'Test Creator'\n    assert len(details.links) == 2\n    assert details.agent_rating == 4.8\n    assert len(details.top_categories) == 2\ndetails = backend.server.v2.store.model.CreatorDetails(name='Test Creator', username='creator1', description='Test description', links=['link1.com', 'link2.com'], avatar_url='avatar.jpg', agent_rating=4.8, agent_runs=1000, top_categories=['cat1', 'cat2'])\nassert details.name == 'Test Creator'\nassert len(details.links) == 2\nassert details.agent_rating == 4.8\nassert len(details.top_categories) == 2\ndef test_store_submission():\n    submission = backend.server.v2.store.model.StoreSubmission(agent_id='agent123', agent_version=1, sub_heading='Test subheading', name='Test Agent', slug='test-agent', description='Test description', image_urls=['image1.jpg', 'image2.jpg'], date_submitted=datetime.datetime(2023, 1, 1), status=prisma.enums.SubmissionStatus.PENDING, runs=50, rating=4.5)\n    assert submission.name == 'Test Agent'\n    assert len(submission.image_urls) == 2\n    assert submission.status == prisma.enums.SubmissionStatus.PENDING\nsubmission = backend.server.v2.store.model.StoreSubmission(agent_id='agent123', agent_version=1, sub_heading='Test subheading', name='Test Agent', slug='test-agent', description='Test description', image_urls=['image1.jpg', 'image2.jpg'], date_submitted=datetime.datetime(2023, 1, 1), status=prisma.enums.SubmissionStatus.PENDING, runs=50, rating=4.5)\nassert submission.name == 'Test Agent'\nassert len(submission.image_urls) == 2\nassert submission.status == prisma.enums.SubmissionStatus.PENDING\ndef test_store_submissions_response():\n    response = backend.server.v2.store.model.StoreSubmissionsResponse(submissions=[backend.server.v2.store.model.StoreSubmission(agent_id='agent123', agent_version=1, sub_heading='Test subheading', name='Test Agent', slug='test-agent', description='Test description', image_urls=['image1.jpg'], date_submitted=datetime.datetime(2023, 1, 1), status=prisma.enums.SubmissionStatus.PENDING, runs=50, rating=4.5)], pagination=backend.server.v2.store.model.Pagination(total_items=1, total_pages=1, current_page=1, page_size=20))\n    assert len(response.submissions) == 1\n    assert response.pagination.total_items == 1\nresponse = backend.server.v2.store.model.StoreSubmissionsResponse(submissions=[backend.server.v2.store.model.StoreSubmission(agent_id='agent123', agent_version=1, sub_heading='Test subheading', name='Test Agent', slug='test-agent', description='Test description', image_urls=['image1.jpg'], date_submitted=datetime.datetime(2023, 1, 1), status=prisma.enums.SubmissionStatus.PENDING, runs=50, rating=4.5)], pagination=backend.server.v2.store.model.Pagination(total_items=1, total_pages=1, current_page=1, page_size=20))\nassert len(response.submissions) == 1\nassert response.pagination.total_items == 1\ndef test_store_submission_request():\n    request = backend.server.v2.store.model.StoreSubmissionRequest(agent_id='agent123', agent_version=1, slug='test-agent', name='Test Agent', sub_heading='Test subheading', video_url='video.mp4', image_urls=['image1.jpg', 'image2.jpg'], description='Test description', categories=['cat1', 'cat2'])\n    assert request.agent_id == 'agent123'\n    assert request.agent_version == 1\n    assert len(request.image_urls) == 2\n    assert len(request.categories) == 2\nrequest = backend.server.v2.store.model.StoreSubmissionRequest(agent_id='agent123', agent_version=1, slug='test-agent', name='Test Agent', sub_heading='Test subheading', video_url='video.mp4', image_urls=['image1.jpg', 'image2.jpg'], description='Test description', categories=['cat1', 'cat2'])\nassert request.agent_id == 'agent123'\nassert request.agent_version == 1\nassert len(request.image_urls) == 2\nassert len(request.categories) == 2"
    }
  ],
  "edges": []
}