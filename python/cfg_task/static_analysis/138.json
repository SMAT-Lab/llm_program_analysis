{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "import time",
        "from typing import Literal",
        "from pydantic import SecretStr",
        "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema",
        "from backend.data.model import APIKeyCredentials, CredentialsField, CredentialsMetaInput, SchemaField",
        "from backend.integrations.providers import ProviderName",
        "from backend.util.request import requests",
        "TEST_CREDENTIALS = APIKeyCredentials(id='01234567-89ab-cdef-0123-456789abcdef', provider='d_id', api_key=SecretStr('mock-d-id-api-key'), title='Mock D-ID API key', expires_at=None)",
        "TEST_CREDENTIALS_INPUT = {'provider': TEST_CREDENTIALS.provider, 'id': TEST_CREDENTIALS.id, 'type': TEST_CREDENTIALS.type, 'title': TEST_CREDENTIALS.type}",
        "class CreateTalkingAvatarVideoBlock(Block):\n\n    class Input(BlockSchema):\n        credentials: CredentialsMetaInput[Literal[ProviderName.D_ID], Literal['api_key']] = CredentialsField(description='The D-ID integration can be used with any API key with sufficient permissions for the blocks it is used on.')\n        script_input: str = SchemaField(description='The text input for the script', placeholder='Welcome to AutoGPT')\n        provider: Literal['microsoft', 'elevenlabs', 'amazon'] = SchemaField(description='The voice provider to use', default='microsoft')\n        voice_id: str = SchemaField(description='The voice ID to use, get list of voices [here](https://docs.agpt.co/server/d_id)', default='en-US-JennyNeural')\n        presenter_id: str = SchemaField(description='The presenter ID to use', default='amy-Aq6OmGZnMt')\n        driver_id: str = SchemaField(description='The driver ID to use', default='Vcq0R4a8F0')\n        result_format: Literal['mp4', 'gif', 'wav'] = SchemaField(description='The desired result format', default='mp4')\n        crop_type: Literal['wide', 'square', 'vertical'] = SchemaField(description='The crop type for the presenter', default='wide')\n        subtitles: bool = SchemaField(description='Whether to include subtitles', default=False)\n        ssml: bool = SchemaField(description='Whether the input is SSML', default=False)\n        max_polling_attempts: int = SchemaField(description='Maximum number of polling attempts', default=30, ge=5)\n        polling_interval: int = SchemaField(description='Interval between polling attempts in seconds', default=10, ge=5)\n\n    class Output(BlockSchema):\n        video_url: str = SchemaField(description='The URL of the created video')\n        error: str = SchemaField(description='Error message if the request failed')\n\n    def __init__(self):\n        super().__init__(id='98c6f503-8c47-4b1c-a96d-351fc7c87dab', description='This block integrates with D-ID to create video clips and retrieve their URLs.', categories={BlockCategory.AI}, input_schema=CreateTalkingAvatarVideoBlock.Input, output_schema=CreateTalkingAvatarVideoBlock.Output, test_input={'credentials': TEST_CREDENTIALS_INPUT, 'script_input': 'Welcome to AutoGPT', 'voice_id': 'en-US-JennyNeural', 'presenter_id': 'amy-Aq6OmGZnMt', 'driver_id': 'Vcq0R4a8F0', 'result_format': 'mp4', 'crop_type': 'wide', 'subtitles': False, 'ssml': False, 'max_polling_attempts': 5, 'polling_interval': 5}, test_output=[('video_url', 'https://d-id.com/api/clips/abcd1234-5678-efgh-ijkl-mnopqrstuvwx/video')], test_mock={'create_clip': lambda *args, **kwargs: {'id': 'abcd1234-5678-efgh-ijkl-mnopqrstuvwx', 'status': 'created'}, 'get_clip_status': lambda *args, **kwargs: {'status': 'done', 'result_url': 'https://d-id.com/api/clips/abcd1234-5678-efgh-ijkl-mnopqrstuvwx/video'}}, test_credentials=TEST_CREDENTIALS)\n\n    def create_clip(self, api_key: SecretStr, payload: dict) -> dict:\n        url = 'https://api.d-id.com/clips'\n        headers = {'accept': 'application/json', 'content-type': 'application/json', 'authorization': f'Basic {api_key.get_secret_value()}'}\n        response = requests.post(url, json=payload, headers=headers)\n        return response.json()\n\n    def get_clip_status(self, api_key: SecretStr, clip_id: str) -> dict:\n        url = f'https://api.d-id.com/clips/{clip_id}'\n        headers = {'accept': 'application/json', 'authorization': f'Basic {api_key.get_secret_value()}'}\n        response = requests.get(url, headers=headers)\n        return response.json()\n\n    def run(self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs) -> BlockOutput:\n        payload = {'script': {'type': 'text', 'subtitles': str(input_data.subtitles).lower(), 'provider': {'type': input_data.provider, 'voice_id': input_data.voice_id}, 'ssml': str(input_data.ssml).lower(), 'input': input_data.script_input}, 'config': {'result_format': input_data.result_format}, 'presenter_config': {'crop': {'type': input_data.crop_type}}, 'presenter_id': input_data.presenter_id, 'driver_id': input_data.driver_id}\n        response = self.create_clip(credentials.api_key, payload)\n        clip_id = response['id']\n        for _ in range(input_data.max_polling_attempts):\n            status_response = self.get_clip_status(credentials.api_key, clip_id)\n            if status_response['status'] == 'done':\n                yield ('video_url', status_response['result_url'])\n                return\n            elif status_response['status'] == 'error':\n                raise RuntimeError(f\"Clip creation failed: {status_response.get('error', 'Unknown error')}\")\n            time.sleep(input_data.polling_interval)\n        raise TimeoutError('Clip creation timed out')",
        "class Input(BlockSchema):\n    credentials: CredentialsMetaInput[Literal[ProviderName.D_ID], Literal['api_key']] = CredentialsField(description='The D-ID integration can be used with any API key with sufficient permissions for the blocks it is used on.')\n    script_input: str = SchemaField(description='The text input for the script', placeholder='Welcome to AutoGPT')\n    provider: Literal['microsoft', 'elevenlabs', 'amazon'] = SchemaField(description='The voice provider to use', default='microsoft')\n    voice_id: str = SchemaField(description='The voice ID to use, get list of voices [here](https://docs.agpt.co/server/d_id)', default='en-US-JennyNeural')\n    presenter_id: str = SchemaField(description='The presenter ID to use', default='amy-Aq6OmGZnMt')\n    driver_id: str = SchemaField(description='The driver ID to use', default='Vcq0R4a8F0')\n    result_format: Literal['mp4', 'gif', 'wav'] = SchemaField(description='The desired result format', default='mp4')\n    crop_type: Literal['wide', 'square', 'vertical'] = SchemaField(description='The crop type for the presenter', default='wide')\n    subtitles: bool = SchemaField(description='Whether to include subtitles', default=False)\n    ssml: bool = SchemaField(description='Whether the input is SSML', default=False)\n    max_polling_attempts: int = SchemaField(description='Maximum number of polling attempts', default=30, ge=5)\n    polling_interval: int = SchemaField(description='Interval between polling attempts in seconds', default=10, ge=5)",
        "credentials: CredentialsMetaInput[Literal[ProviderName.D_ID], Literal['api_key']] = CredentialsField(description='The D-ID integration can be used with any API key with sufficient permissions for the blocks it is used on.')",
        "script_input: str = SchemaField(description='The text input for the script', placeholder='Welcome to AutoGPT')",
        "provider: Literal['microsoft', 'elevenlabs', 'amazon'] = SchemaField(description='The voice provider to use', default='microsoft')",
        "voice_id: str = SchemaField(description='The voice ID to use, get list of voices [here](https://docs.agpt.co/server/d_id)', default='en-US-JennyNeural')",
        "presenter_id: str = SchemaField(description='The presenter ID to use', default='amy-Aq6OmGZnMt')",
        "driver_id: str = SchemaField(description='The driver ID to use', default='Vcq0R4a8F0')",
        "result_format: Literal['mp4', 'gif', 'wav'] = SchemaField(description='The desired result format', default='mp4')",
        "crop_type: Literal['wide', 'square', 'vertical'] = SchemaField(description='The crop type for the presenter', default='wide')",
        "subtitles: bool = SchemaField(description='Whether to include subtitles', default=False)",
        "ssml: bool = SchemaField(description='Whether the input is SSML', default=False)",
        "max_polling_attempts: int = SchemaField(description='Maximum number of polling attempts', default=30, ge=5)",
        "polling_interval: int = SchemaField(description='Interval between polling attempts in seconds', default=10, ge=5)",
        "class Output(BlockSchema):\n    video_url: str = SchemaField(description='The URL of the created video')\n    error: str = SchemaField(description='Error message if the request failed')",
        "video_url: str = SchemaField(description='The URL of the created video')",
        "error: str = SchemaField(description='Error message if the request failed')",
        "def __init__(self):\n    super().__init__(id='98c6f503-8c47-4b1c-a96d-351fc7c87dab', description='This block integrates with D-ID to create video clips and retrieve their URLs.', categories={BlockCategory.AI}, input_schema=CreateTalkingAvatarVideoBlock.Input, output_schema=CreateTalkingAvatarVideoBlock.Output, test_input={'credentials': TEST_CREDENTIALS_INPUT, 'script_input': 'Welcome to AutoGPT', 'voice_id': 'en-US-JennyNeural', 'presenter_id': 'amy-Aq6OmGZnMt', 'driver_id': 'Vcq0R4a8F0', 'result_format': 'mp4', 'crop_type': 'wide', 'subtitles': False, 'ssml': False, 'max_polling_attempts': 5, 'polling_interval': 5}, test_output=[('video_url', 'https://d-id.com/api/clips/abcd1234-5678-efgh-ijkl-mnopqrstuvwx/video')], test_mock={'create_clip': lambda *args, **kwargs: {'id': 'abcd1234-5678-efgh-ijkl-mnopqrstuvwx', 'status': 'created'}, 'get_clip_status': lambda *args, **kwargs: {'status': 'done', 'result_url': 'https://d-id.com/api/clips/abcd1234-5678-efgh-ijkl-mnopqrstuvwx/video'}}, test_credentials=TEST_CREDENTIALS)",
        "super().__init__()",
        "def create_clip(self, api_key: SecretStr, payload: dict) -> dict:\n    url = 'https://api.d-id.com/clips'\n    headers = {'accept': 'application/json', 'content-type': 'application/json', 'authorization': f'Basic {api_key.get_secret_value()}'}\n    response = requests.post(url, json=payload, headers=headers)\n    return response.json()",
        "url = 'https://api.d-id.com/clips'",
        "headers = {'accept': 'application/json', 'content-type': 'application/json', 'authorization': f'Basic {api_key.get_secret_value()}'}",
        "response = requests.post(url, json=payload, headers=headers)",
        "return response.json()"
      ],
      "code": "import time\nfrom typing import Literal\nfrom pydantic import SecretStr\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import APIKeyCredentials, CredentialsField, CredentialsMetaInput, SchemaField\nfrom backend.integrations.providers import ProviderName\nfrom backend.util.request import requests\nTEST_CREDENTIALS = APIKeyCredentials(id='01234567-89ab-cdef-0123-456789abcdef', provider='d_id', api_key=SecretStr('mock-d-id-api-key'), title='Mock D-ID API key', expires_at=None)\nTEST_CREDENTIALS_INPUT = {'provider': TEST_CREDENTIALS.provider, 'id': TEST_CREDENTIALS.id, 'type': TEST_CREDENTIALS.type, 'title': TEST_CREDENTIALS.type}\nclass CreateTalkingAvatarVideoBlock(Block):\n\n    class Input(BlockSchema):\n        credentials: CredentialsMetaInput[Literal[ProviderName.D_ID], Literal['api_key']] = CredentialsField(description='The D-ID integration can be used with any API key with sufficient permissions for the blocks it is used on.')\n        script_input: str = SchemaField(description='The text input for the script', placeholder='Welcome to AutoGPT')\n        provider: Literal['microsoft', 'elevenlabs', 'amazon'] = SchemaField(description='The voice provider to use', default='microsoft')\n        voice_id: str = SchemaField(description='The voice ID to use, get list of voices [here](https://docs.agpt.co/server/d_id)', default='en-US-JennyNeural')\n        presenter_id: str = SchemaField(description='The presenter ID to use', default='amy-Aq6OmGZnMt')\n        driver_id: str = SchemaField(description='The driver ID to use', default='Vcq0R4a8F0')\n        result_format: Literal['mp4', 'gif', 'wav'] = SchemaField(description='The desired result format', default='mp4')\n        crop_type: Literal['wide', 'square', 'vertical'] = SchemaField(description='The crop type for the presenter', default='wide')\n        subtitles: bool = SchemaField(description='Whether to include subtitles', default=False)\n        ssml: bool = SchemaField(description='Whether the input is SSML', default=False)\n        max_polling_attempts: int = SchemaField(description='Maximum number of polling attempts', default=30, ge=5)\n        polling_interval: int = SchemaField(description='Interval between polling attempts in seconds', default=10, ge=5)\n\n    class Output(BlockSchema):\n        video_url: str = SchemaField(description='The URL of the created video')\n        error: str = SchemaField(description='Error message if the request failed')\n\n    def __init__(self):\n        super().__init__(id='98c6f503-8c47-4b1c-a96d-351fc7c87dab', description='This block integrates with D-ID to create video clips and retrieve their URLs.', categories={BlockCategory.AI}, input_schema=CreateTalkingAvatarVideoBlock.Input, output_schema=CreateTalkingAvatarVideoBlock.Output, test_input={'credentials': TEST_CREDENTIALS_INPUT, 'script_input': 'Welcome to AutoGPT', 'voice_id': 'en-US-JennyNeural', 'presenter_id': 'amy-Aq6OmGZnMt', 'driver_id': 'Vcq0R4a8F0', 'result_format': 'mp4', 'crop_type': 'wide', 'subtitles': False, 'ssml': False, 'max_polling_attempts': 5, 'polling_interval': 5}, test_output=[('video_url', 'https://d-id.com/api/clips/abcd1234-5678-efgh-ijkl-mnopqrstuvwx/video')], test_mock={'create_clip': lambda *args, **kwargs: {'id': 'abcd1234-5678-efgh-ijkl-mnopqrstuvwx', 'status': 'created'}, 'get_clip_status': lambda *args, **kwargs: {'status': 'done', 'result_url': 'https://d-id.com/api/clips/abcd1234-5678-efgh-ijkl-mnopqrstuvwx/video'}}, test_credentials=TEST_CREDENTIALS)\n\n    def create_clip(self, api_key: SecretStr, payload: dict) -> dict:\n        url = 'https://api.d-id.com/clips'\n        headers = {'accept': 'application/json', 'content-type': 'application/json', 'authorization': f'Basic {api_key.get_secret_value()}'}\n        response = requests.post(url, json=payload, headers=headers)\n        return response.json()\n\n    def get_clip_status(self, api_key: SecretStr, clip_id: str) -> dict:\n        url = f'https://api.d-id.com/clips/{clip_id}'\n        headers = {'accept': 'application/json', 'authorization': f'Basic {api_key.get_secret_value()}'}\n        response = requests.get(url, headers=headers)\n        return response.json()\n\n    def run(self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs) -> BlockOutput:\n        payload = {'script': {'type': 'text', 'subtitles': str(input_data.subtitles).lower(), 'provider': {'type': input_data.provider, 'voice_id': input_data.voice_id}, 'ssml': str(input_data.ssml).lower(), 'input': input_data.script_input}, 'config': {'result_format': input_data.result_format}, 'presenter_config': {'crop': {'type': input_data.crop_type}}, 'presenter_id': input_data.presenter_id, 'driver_id': input_data.driver_id}\n        response = self.create_clip(credentials.api_key, payload)\n        clip_id = response['id']\n        for _ in range(input_data.max_polling_attempts):\n            status_response = self.get_clip_status(credentials.api_key, clip_id)\n            if status_response['status'] == 'done':\n                yield ('video_url', status_response['result_url'])\n                return\n            elif status_response['status'] == 'error':\n                raise RuntimeError(f\"Clip creation failed: {status_response.get('error', 'Unknown error')}\")\n            time.sleep(input_data.polling_interval)\n        raise TimeoutError('Clip creation timed out')\nclass Input(BlockSchema):\n    credentials: CredentialsMetaInput[Literal[ProviderName.D_ID], Literal['api_key']] = CredentialsField(description='The D-ID integration can be used with any API key with sufficient permissions for the blocks it is used on.')\n    script_input: str = SchemaField(description='The text input for the script', placeholder='Welcome to AutoGPT')\n    provider: Literal['microsoft', 'elevenlabs', 'amazon'] = SchemaField(description='The voice provider to use', default='microsoft')\n    voice_id: str = SchemaField(description='The voice ID to use, get list of voices [here](https://docs.agpt.co/server/d_id)', default='en-US-JennyNeural')\n    presenter_id: str = SchemaField(description='The presenter ID to use', default='amy-Aq6OmGZnMt')\n    driver_id: str = SchemaField(description='The driver ID to use', default='Vcq0R4a8F0')\n    result_format: Literal['mp4', 'gif', 'wav'] = SchemaField(description='The desired result format', default='mp4')\n    crop_type: Literal['wide', 'square', 'vertical'] = SchemaField(description='The crop type for the presenter', default='wide')\n    subtitles: bool = SchemaField(description='Whether to include subtitles', default=False)\n    ssml: bool = SchemaField(description='Whether the input is SSML', default=False)\n    max_polling_attempts: int = SchemaField(description='Maximum number of polling attempts', default=30, ge=5)\n    polling_interval: int = SchemaField(description='Interval between polling attempts in seconds', default=10, ge=5)\ncredentials: CredentialsMetaInput[Literal[ProviderName.D_ID], Literal['api_key']] = CredentialsField(description='The D-ID integration can be used with any API key with sufficient permissions for the blocks it is used on.')\nscript_input: str = SchemaField(description='The text input for the script', placeholder='Welcome to AutoGPT')\nprovider: Literal['microsoft', 'elevenlabs', 'amazon'] = SchemaField(description='The voice provider to use', default='microsoft')\nvoice_id: str = SchemaField(description='The voice ID to use, get list of voices [here](https://docs.agpt.co/server/d_id)', default='en-US-JennyNeural')\npresenter_id: str = SchemaField(description='The presenter ID to use', default='amy-Aq6OmGZnMt')\ndriver_id: str = SchemaField(description='The driver ID to use', default='Vcq0R4a8F0')\nresult_format: Literal['mp4', 'gif', 'wav'] = SchemaField(description='The desired result format', default='mp4')\ncrop_type: Literal['wide', 'square', 'vertical'] = SchemaField(description='The crop type for the presenter', default='wide')\nsubtitles: bool = SchemaField(description='Whether to include subtitles', default=False)\nssml: bool = SchemaField(description='Whether the input is SSML', default=False)\nmax_polling_attempts: int = SchemaField(description='Maximum number of polling attempts', default=30, ge=5)\npolling_interval: int = SchemaField(description='Interval between polling attempts in seconds', default=10, ge=5)\nclass Output(BlockSchema):\n    video_url: str = SchemaField(description='The URL of the created video')\n    error: str = SchemaField(description='Error message if the request failed')\nvideo_url: str = SchemaField(description='The URL of the created video')\nerror: str = SchemaField(description='Error message if the request failed')\ndef __init__(self):\n    super().__init__(id='98c6f503-8c47-4b1c-a96d-351fc7c87dab', description='This block integrates with D-ID to create video clips and retrieve their URLs.', categories={BlockCategory.AI}, input_schema=CreateTalkingAvatarVideoBlock.Input, output_schema=CreateTalkingAvatarVideoBlock.Output, test_input={'credentials': TEST_CREDENTIALS_INPUT, 'script_input': 'Welcome to AutoGPT', 'voice_id': 'en-US-JennyNeural', 'presenter_id': 'amy-Aq6OmGZnMt', 'driver_id': 'Vcq0R4a8F0', 'result_format': 'mp4', 'crop_type': 'wide', 'subtitles': False, 'ssml': False, 'max_polling_attempts': 5, 'polling_interval': 5}, test_output=[('video_url', 'https://d-id.com/api/clips/abcd1234-5678-efgh-ijkl-mnopqrstuvwx/video')], test_mock={'create_clip': lambda *args, **kwargs: {'id': 'abcd1234-5678-efgh-ijkl-mnopqrstuvwx', 'status': 'created'}, 'get_clip_status': lambda *args, **kwargs: {'status': 'done', 'result_url': 'https://d-id.com/api/clips/abcd1234-5678-efgh-ijkl-mnopqrstuvwx/video'}}, test_credentials=TEST_CREDENTIALS)\nsuper().__init__()\ndef create_clip(self, api_key: SecretStr, payload: dict) -> dict:\n    url = 'https://api.d-id.com/clips'\n    headers = {'accept': 'application/json', 'content-type': 'application/json', 'authorization': f'Basic {api_key.get_secret_value()}'}\n    response = requests.post(url, json=payload, headers=headers)\n    return response.json()\nurl = 'https://api.d-id.com/clips'\nheaders = {'accept': 'application/json', 'content-type': 'application/json', 'authorization': f'Basic {api_key.get_secret_value()}'}\nresponse = requests.post(url, json=payload, headers=headers)\nreturn response.json()"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "def get_clip_status(self, api_key: SecretStr, clip_id: str) -> dict:\n    url = f'https://api.d-id.com/clips/{clip_id}'\n    headers = {'accept': 'application/json', 'authorization': f'Basic {api_key.get_secret_value()}'}\n    response = requests.get(url, headers=headers)\n    return response.json()",
        "url = f'https://api.d-id.com/clips/{clip_id}'",
        "headers = {'accept': 'application/json', 'authorization': f'Basic {api_key.get_secret_value()}'}",
        "response = requests.get(url, headers=headers)",
        "return response.json()"
      ],
      "code": "def get_clip_status(self, api_key: SecretStr, clip_id: str) -> dict:\n    url = f'https://api.d-id.com/clips/{clip_id}'\n    headers = {'accept': 'application/json', 'authorization': f'Basic {api_key.get_secret_value()}'}\n    response = requests.get(url, headers=headers)\n    return response.json()\nurl = f'https://api.d-id.com/clips/{clip_id}'\nheaders = {'accept': 'application/json', 'authorization': f'Basic {api_key.get_secret_value()}'}\nresponse = requests.get(url, headers=headers)\nreturn response.json()"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [
        "def run(self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs) -> BlockOutput:\n    payload = {'script': {'type': 'text', 'subtitles': str(input_data.subtitles).lower(), 'provider': {'type': input_data.provider, 'voice_id': input_data.voice_id}, 'ssml': str(input_data.ssml).lower(), 'input': input_data.script_input}, 'config': {'result_format': input_data.result_format}, 'presenter_config': {'crop': {'type': input_data.crop_type}}, 'presenter_id': input_data.presenter_id, 'driver_id': input_data.driver_id}\n    response = self.create_clip(credentials.api_key, payload)\n    clip_id = response['id']\n    for _ in range(input_data.max_polling_attempts):\n        status_response = self.get_clip_status(credentials.api_key, clip_id)\n        if status_response['status'] == 'done':\n            yield ('video_url', status_response['result_url'])\n            return\n        elif status_response['status'] == 'error':\n            raise RuntimeError(f\"Clip creation failed: {status_response.get('error', 'Unknown error')}\")\n        time.sleep(input_data.polling_interval)\n    raise TimeoutError('Clip creation timed out')",
        "payload = {'script': {'type': 'text', 'subtitles': str(input_data.subtitles).lower(), 'provider': {'type': input_data.provider, 'voice_id': input_data.voice_id}, 'ssml': str(input_data.ssml).lower(), 'input': input_data.script_input}, 'config': {'result_format': input_data.result_format}, 'presenter_config': {'crop': {'type': input_data.crop_type}}, 'presenter_id': input_data.presenter_id, 'driver_id': input_data.driver_id}",
        "response = self.create_clip(credentials.api_key, payload)",
        "clip_id = response['id']"
      ],
      "code": "def run(self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs) -> BlockOutput:\n    payload = {'script': {'type': 'text', 'subtitles': str(input_data.subtitles).lower(), 'provider': {'type': input_data.provider, 'voice_id': input_data.voice_id}, 'ssml': str(input_data.ssml).lower(), 'input': input_data.script_input}, 'config': {'result_format': input_data.result_format}, 'presenter_config': {'crop': {'type': input_data.crop_type}}, 'presenter_id': input_data.presenter_id, 'driver_id': input_data.driver_id}\n    response = self.create_clip(credentials.api_key, payload)\n    clip_id = response['id']\n    for _ in range(input_data.max_polling_attempts):\n        status_response = self.get_clip_status(credentials.api_key, clip_id)\n        if status_response['status'] == 'done':\n            yield ('video_url', status_response['result_url'])\n            return\n        elif status_response['status'] == 'error':\n            raise RuntimeError(f\"Clip creation failed: {status_response.get('error', 'Unknown error')}\")\n        time.sleep(input_data.polling_interval)\n    raise TimeoutError('Clip creation timed out')\npayload = {'script': {'type': 'text', 'subtitles': str(input_data.subtitles).lower(), 'provider': {'type': input_data.provider, 'voice_id': input_data.voice_id}, 'ssml': str(input_data.ssml).lower(), 'input': input_data.script_input}, 'config': {'result_format': input_data.result_format}, 'presenter_config': {'crop': {'type': input_data.crop_type}}, 'presenter_id': input_data.presenter_id, 'driver_id': input_data.driver_id}\nresponse = self.create_clip(credentials.api_key, payload)\nclip_id = response['id']"
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [
        "_",
        "range(input_data.max_polling_attempts)"
      ],
      "code": "_\nrange(input_data.max_polling_attempts)"
    },
    {
      "id": "n4",
      "type": "block",
      "statements": [
        "status_response = self.get_clip_status(credentials.api_key, clip_id)",
        "status_response['status'] Eq 'done'"
      ],
      "code": "status_response = self.get_clip_status(credentials.api_key, clip_id)\nstatus_response['status'] Eq 'done'"
    },
    {
      "id": "n5",
      "type": "block",
      "statements": [
        "raise TimeoutError('Clip creation timed out')"
      ],
      "code": "raise TimeoutError('Clip creation timed out')"
    },
    {
      "id": "n6",
      "type": "block",
      "statements": [
        "(yield ('video_url', status_response['result_url']))",
        "return"
      ],
      "code": "(yield ('video_url', status_response['result_url']))\nreturn"
    },
    {
      "id": "n7",
      "type": "block",
      "statements": [
        "status_response['status'] Eq 'error'"
      ],
      "code": "status_response['status'] Eq 'error'"
    },
    {
      "id": "n8",
      "type": "block",
      "statements": [
        "time.sleep(input_data.polling_interval)"
      ],
      "code": "time.sleep(input_data.polling_interval)"
    },
    {
      "id": "n9",
      "type": "block",
      "statements": [
        "raise RuntimeError(f\"Clip creation failed: {status_response.get('error', 'Unknown error')}\")"
      ],
      "code": "raise RuntimeError(f\"Clip creation failed: {status_response.get('error', 'Unknown error')}\")"
    },
    {
      "id": "n10",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n11",
      "type": "block",
      "statements": [],
      "code": ""
    }
  ],
  "edges": [
    {
      "source": "n9",
      "target": "n11"
    },
    {
      "source": "n4",
      "target": "n7"
    },
    {
      "source": "n3",
      "target": "n4"
    },
    {
      "source": "n11",
      "target": "n8"
    },
    {
      "source": "n3",
      "target": "n5"
    },
    {
      "source": "n7",
      "target": "n9"
    },
    {
      "source": "n4",
      "target": "n6"
    },
    {
      "source": "n10",
      "target": "n11"
    },
    {
      "source": "n7",
      "target": "n10"
    },
    {
      "source": "n2",
      "target": "n3"
    },
    {
      "source": "n8",
      "target": "n3"
    }
  ]
}