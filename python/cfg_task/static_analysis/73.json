{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "import io",
        "import logging",
        "from enum import Enum",
        "import replicate",
        "import replicate.exceptions",
        "import requests",
        "from replicate.helpers import FileOutput",
        "from backend.data.graph import Graph",
        "from backend.util.settings import Settings",
        "logger = logging.getLogger(__name__)",
        "class ImageSize(str, Enum):\n    LANDSCAPE = '1024x768'",
        "LANDSCAPE = '1024x768'",
        "class ImageStyle(str, Enum):\n    DIGITAL_ART = 'digital art'",
        "DIGITAL_ART = 'digital art'",
        "async def generate_agent_image(agent: Graph) -> io.BytesIO:\n    \"\"\"\n    Generate an image for an agent using Flux model via Replicate API.\n\n    Args:\n        agent (Graph): The agent to generate an image for\n\n    Returns:\n        io.BytesIO: The generated image as bytes\n    \"\"\"\n    try:\n        settings = Settings()\n        if not settings.secrets.replicate_api_key:\n            raise ValueError('Missing Replicate API key in settings')\n        prompt = f'Create a visually engaging app store thumbnail for the AI agent that highlights what it does in a clear and captivating way:\\n- **Name**: {agent.name}\\n- **Description**: {agent.description}\\nFocus on showcasing its core functionality with an appealing design.'\n        client = replicate.Client(api_token=settings.secrets.replicate_api_key)\n        input_data = {'prompt': prompt, 'width': 1024, 'height': 768, 'aspect_ratio': '4:3', 'output_format': 'jpg', 'output_quality': 90, 'num_inference_steps': 30, 'guidance': 3.5, 'negative_prompt': 'blurry, low quality, distorted, deformed', 'disable_safety_checker': True}\n        try:\n            output = client.run('black-forest-labs/flux-1.1-pro', input=input_data)\n            if isinstance(output, list) and output:\n                if isinstance(output[0], FileOutput):\n                    image_bytes = output[0].read()\n                else:\n                    result_url = output[0]\n                    response = requests.get(result_url)\n                    response.raise_for_status()\n                    image_bytes = response.content\n            elif isinstance(output, FileOutput):\n                image_bytes = output.read()\n            elif isinstance(output, str):\n                response = requests.get(output)\n                response.raise_for_status()\n                image_bytes = response.content\n            else:\n                raise RuntimeError('Unexpected output format from the model.')\n            return io.BytesIO(image_bytes)\n        except replicate.exceptions.ReplicateError as e:\n            if e.status == 401:\n                raise RuntimeError('Invalid Replicate API token') from e\n            raise RuntimeError(f'Replicate API error: {str(e)}') from e\n    except Exception as e:\n        logger.exception('Failed to generate agent image')\n        raise RuntimeError(f'Image generation failed: {str(e)}')",
        "'\\n    Generate an image for an agent using Flux model via Replicate API.\\n\\n    Args:\\n        agent (Graph): The agent to generate an image for\\n\\n    Returns:\\n        io.BytesIO: The generated image as bytes\\n    '",
        "try:\n    settings = Settings()\n    if not settings.secrets.replicate_api_key:\n        raise ValueError('Missing Replicate API key in settings')\n    prompt = f'Create a visually engaging app store thumbnail for the AI agent that highlights what it does in a clear and captivating way:\\n- **Name**: {agent.name}\\n- **Description**: {agent.description}\\nFocus on showcasing its core functionality with an appealing design.'\n    client = replicate.Client(api_token=settings.secrets.replicate_api_key)\n    input_data = {'prompt': prompt, 'width': 1024, 'height': 768, 'aspect_ratio': '4:3', 'output_format': 'jpg', 'output_quality': 90, 'num_inference_steps': 30, 'guidance': 3.5, 'negative_prompt': 'blurry, low quality, distorted, deformed', 'disable_safety_checker': True}\n    try:\n        output = client.run('black-forest-labs/flux-1.1-pro', input=input_data)\n        if isinstance(output, list) and output:\n            if isinstance(output[0], FileOutput):\n                image_bytes = output[0].read()\n            else:\n                result_url = output[0]\n                response = requests.get(result_url)\n                response.raise_for_status()\n                image_bytes = response.content\n        elif isinstance(output, FileOutput):\n            image_bytes = output.read()\n        elif isinstance(output, str):\n            response = requests.get(output)\n            response.raise_for_status()\n            image_bytes = response.content\n        else:\n            raise RuntimeError('Unexpected output format from the model.')\n        return io.BytesIO(image_bytes)\n    except replicate.exceptions.ReplicateError as e:\n        if e.status == 401:\n            raise RuntimeError('Invalid Replicate API token') from e\n        raise RuntimeError(f'Replicate API error: {str(e)}') from e\nexcept Exception as e:\n    logger.exception('Failed to generate agent image')\n    raise RuntimeError(f'Image generation failed: {str(e)}')",
        "settings = Settings()",
        "not settings.secrets.replicate_api_key"
      ],
      "code": "import io\nimport logging\nfrom enum import Enum\nimport replicate\nimport replicate.exceptions\nimport requests\nfrom replicate.helpers import FileOutput\nfrom backend.data.graph import Graph\nfrom backend.util.settings import Settings\nlogger = logging.getLogger(__name__)\nclass ImageSize(str, Enum):\n    LANDSCAPE = '1024x768'\nLANDSCAPE = '1024x768'\nclass ImageStyle(str, Enum):\n    DIGITAL_ART = 'digital art'\nDIGITAL_ART = 'digital art'\nasync def generate_agent_image(agent: Graph) -> io.BytesIO:\n    \"\"\"\n    Generate an image for an agent using Flux model via Replicate API.\n\n    Args:\n        agent (Graph): The agent to generate an image for\n\n    Returns:\n        io.BytesIO: The generated image as bytes\n    \"\"\"\n    try:\n        settings = Settings()\n        if not settings.secrets.replicate_api_key:\n            raise ValueError('Missing Replicate API key in settings')\n        prompt = f'Create a visually engaging app store thumbnail for the AI agent that highlights what it does in a clear and captivating way:\\n- **Name**: {agent.name}\\n- **Description**: {agent.description}\\nFocus on showcasing its core functionality with an appealing design.'\n        client = replicate.Client(api_token=settings.secrets.replicate_api_key)\n        input_data = {'prompt': prompt, 'width': 1024, 'height': 768, 'aspect_ratio': '4:3', 'output_format': 'jpg', 'output_quality': 90, 'num_inference_steps': 30, 'guidance': 3.5, 'negative_prompt': 'blurry, low quality, distorted, deformed', 'disable_safety_checker': True}\n        try:\n            output = client.run('black-forest-labs/flux-1.1-pro', input=input_data)\n            if isinstance(output, list) and output:\n                if isinstance(output[0], FileOutput):\n                    image_bytes = output[0].read()\n                else:\n                    result_url = output[0]\n                    response = requests.get(result_url)\n                    response.raise_for_status()\n                    image_bytes = response.content\n            elif isinstance(output, FileOutput):\n                image_bytes = output.read()\n            elif isinstance(output, str):\n                response = requests.get(output)\n                response.raise_for_status()\n                image_bytes = response.content\n            else:\n                raise RuntimeError('Unexpected output format from the model.')\n            return io.BytesIO(image_bytes)\n        except replicate.exceptions.ReplicateError as e:\n            if e.status == 401:\n                raise RuntimeError('Invalid Replicate API token') from e\n            raise RuntimeError(f'Replicate API error: {str(e)}') from e\n    except Exception as e:\n        logger.exception('Failed to generate agent image')\n        raise RuntimeError(f'Image generation failed: {str(e)}')\n'\\n    Generate an image for an agent using Flux model via Replicate API.\\n\\n    Args:\\n        agent (Graph): The agent to generate an image for\\n\\n    Returns:\\n        io.BytesIO: The generated image as bytes\\n    '\ntry:\n    settings = Settings()\n    if not settings.secrets.replicate_api_key:\n        raise ValueError('Missing Replicate API key in settings')\n    prompt = f'Create a visually engaging app store thumbnail for the AI agent that highlights what it does in a clear and captivating way:\\n- **Name**: {agent.name}\\n- **Description**: {agent.description}\\nFocus on showcasing its core functionality with an appealing design.'\n    client = replicate.Client(api_token=settings.secrets.replicate_api_key)\n    input_data = {'prompt': prompt, 'width': 1024, 'height': 768, 'aspect_ratio': '4:3', 'output_format': 'jpg', 'output_quality': 90, 'num_inference_steps': 30, 'guidance': 3.5, 'negative_prompt': 'blurry, low quality, distorted, deformed', 'disable_safety_checker': True}\n    try:\n        output = client.run('black-forest-labs/flux-1.1-pro', input=input_data)\n        if isinstance(output, list) and output:\n            if isinstance(output[0], FileOutput):\n                image_bytes = output[0].read()\n            else:\n                result_url = output[0]\n                response = requests.get(result_url)\n                response.raise_for_status()\n                image_bytes = response.content\n        elif isinstance(output, FileOutput):\n            image_bytes = output.read()\n        elif isinstance(output, str):\n            response = requests.get(output)\n            response.raise_for_status()\n            image_bytes = response.content\n        else:\n            raise RuntimeError('Unexpected output format from the model.')\n        return io.BytesIO(image_bytes)\n    except replicate.exceptions.ReplicateError as e:\n        if e.status == 401:\n            raise RuntimeError('Invalid Replicate API token') from e\n        raise RuntimeError(f'Replicate API error: {str(e)}') from e\nexcept Exception as e:\n    logger.exception('Failed to generate agent image')\n    raise RuntimeError(f'Image generation failed: {str(e)}')\nsettings = Settings()\nnot settings.secrets.replicate_api_key"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "raise ValueError('Missing Replicate API key in settings')"
      ],
      "code": "raise ValueError('Missing Replicate API key in settings')"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [
        "prompt = f'Create a visually engaging app store thumbnail for the AI agent that highlights what it does in a clear and captivating way:\\n- **Name**: {agent.name}\\n- **Description**: {agent.description}\\nFocus on showcasing its core functionality with an appealing design.'",
        "client = replicate.Client(api_token=settings.secrets.replicate_api_key)",
        "input_data = {'prompt': prompt, 'width': 1024, 'height': 768, 'aspect_ratio': '4:3', 'output_format': 'jpg', 'output_quality': 90, 'num_inference_steps': 30, 'guidance': 3.5, 'negative_prompt': 'blurry, low quality, distorted, deformed', 'disable_safety_checker': True}",
        "try:\n    output = client.run('black-forest-labs/flux-1.1-pro', input=input_data)\n    if isinstance(output, list) and output:\n        if isinstance(output[0], FileOutput):\n            image_bytes = output[0].read()\n        else:\n            result_url = output[0]\n            response = requests.get(result_url)\n            response.raise_for_status()\n            image_bytes = response.content\n    elif isinstance(output, FileOutput):\n        image_bytes = output.read()\n    elif isinstance(output, str):\n        response = requests.get(output)\n        response.raise_for_status()\n        image_bytes = response.content\n    else:\n        raise RuntimeError('Unexpected output format from the model.')\n    return io.BytesIO(image_bytes)\nexcept replicate.exceptions.ReplicateError as e:\n    if e.status == 401:\n        raise RuntimeError('Invalid Replicate API token') from e\n    raise RuntimeError(f'Replicate API error: {str(e)}') from e",
        "output = client.run('black-forest-labs/flux-1.1-pro', input=input_data)",
        "isinstance(output, list) and output"
      ],
      "code": "prompt = f'Create a visually engaging app store thumbnail for the AI agent that highlights what it does in a clear and captivating way:\\n- **Name**: {agent.name}\\n- **Description**: {agent.description}\\nFocus on showcasing its core functionality with an appealing design.'\nclient = replicate.Client(api_token=settings.secrets.replicate_api_key)\ninput_data = {'prompt': prompt, 'width': 1024, 'height': 768, 'aspect_ratio': '4:3', 'output_format': 'jpg', 'output_quality': 90, 'num_inference_steps': 30, 'guidance': 3.5, 'negative_prompt': 'blurry, low quality, distorted, deformed', 'disable_safety_checker': True}\ntry:\n    output = client.run('black-forest-labs/flux-1.1-pro', input=input_data)\n    if isinstance(output, list) and output:\n        if isinstance(output[0], FileOutput):\n            image_bytes = output[0].read()\n        else:\n            result_url = output[0]\n            response = requests.get(result_url)\n            response.raise_for_status()\n            image_bytes = response.content\n    elif isinstance(output, FileOutput):\n        image_bytes = output.read()\n    elif isinstance(output, str):\n        response = requests.get(output)\n        response.raise_for_status()\n        image_bytes = response.content\n    else:\n        raise RuntimeError('Unexpected output format from the model.')\n    return io.BytesIO(image_bytes)\nexcept replicate.exceptions.ReplicateError as e:\n    if e.status == 401:\n        raise RuntimeError('Invalid Replicate API token') from e\n    raise RuntimeError(f'Replicate API error: {str(e)}') from e\noutput = client.run('black-forest-labs/flux-1.1-pro', input=input_data)\nisinstance(output, list) and output"
    },
    {
      "id": "n4",
      "type": "block",
      "statements": [
        "isinstance(output[0], FileOutput)"
      ],
      "code": "isinstance(output[0], FileOutput)"
    },
    {
      "id": "n5",
      "type": "block",
      "statements": [
        "isinstance(output, FileOutput)"
      ],
      "code": "isinstance(output, FileOutput)"
    },
    {
      "id": "n6",
      "type": "block",
      "statements": [
        "return io.BytesIO(image_bytes)"
      ],
      "code": "return io.BytesIO(image_bytes)"
    },
    {
      "id": "n7",
      "type": "block",
      "statements": [
        "image_bytes = output[0].read()"
      ],
      "code": "image_bytes = output[0].read()"
    },
    {
      "id": "n8",
      "type": "block",
      "statements": [
        "result_url = output[0]",
        "response = requests.get(result_url)",
        "response.raise_for_status()",
        "image_bytes = response.content"
      ],
      "code": "result_url = output[0]\nresponse = requests.get(result_url)\nresponse.raise_for_status()\nimage_bytes = response.content"
    },
    {
      "id": "n9",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n10",
      "type": "block",
      "statements": [
        "image_bytes = output.read()"
      ],
      "code": "image_bytes = output.read()"
    },
    {
      "id": "n11",
      "type": "block",
      "statements": [
        "isinstance(output, str)"
      ],
      "code": "isinstance(output, str)"
    },
    {
      "id": "n12",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n13",
      "type": "block",
      "statements": [
        "response = requests.get(output)",
        "response.raise_for_status()",
        "image_bytes = response.content"
      ],
      "code": "response = requests.get(output)\nresponse.raise_for_status()\nimage_bytes = response.content"
    },
    {
      "id": "n14",
      "type": "block",
      "statements": [
        "raise RuntimeError('Unexpected output format from the model.')"
      ],
      "code": "raise RuntimeError('Unexpected output format from the model.')"
    },
    {
      "id": "n15",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n16",
      "type": "block",
      "statements": [
        "e.status Eq 401"
      ],
      "code": "e.status Eq 401"
    },
    {
      "id": "n17",
      "type": "block",
      "statements": [
        "raise RuntimeError('Invalid Replicate API token') from e"
      ],
      "code": "raise RuntimeError('Invalid Replicate API token') from e"
    },
    {
      "id": "n18",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n19",
      "type": "block",
      "statements": [
        "raise RuntimeError(f'Replicate API error: {str(e)}') from e",
        "logger.exception('Failed to generate agent image')",
        "raise RuntimeError(f'Image generation failed: {str(e)}')"
      ],
      "code": "raise RuntimeError(f'Replicate API error: {str(e)}') from e\nlogger.exception('Failed to generate agent image')\nraise RuntimeError(f'Image generation failed: {str(e)}')"
    }
  ],
  "edges": [
    {
      "source": "n14",
      "target": "n15"
    },
    {
      "source": "n0",
      "target": "n1"
    },
    {
      "source": "n12",
      "target": "n6"
    },
    {
      "source": "n11",
      "target": "n14"
    },
    {
      "source": "n17",
      "target": "n19"
    },
    {
      "source": "n2",
      "target": "n3"
    },
    {
      "source": "n16",
      "target": "n17"
    },
    {
      "source": "n13",
      "target": "n15"
    },
    {
      "source": "n16",
      "target": "n18"
    },
    {
      "source": "n8",
      "target": "n9"
    },
    {
      "source": "n3",
      "target": "n4"
    },
    {
      "source": "n5",
      "target": "n11"
    },
    {
      "source": "n4",
      "target": "n8"
    },
    {
      "source": "n5",
      "target": "n10"
    },
    {
      "source": "n15",
      "target": "n12"
    },
    {
      "source": "n4",
      "target": "n7"
    },
    {
      "source": "n10",
      "target": "n12"
    },
    {
      "source": "n18",
      "target": "n19"
    },
    {
      "source": "n7",
      "target": "n9"
    },
    {
      "source": "n1",
      "target": "n3"
    },
    {
      "source": "n3",
      "target": "n5"
    },
    {
      "source": "n9",
      "target": "n6"
    },
    {
      "source": "n11",
      "target": "n13"
    },
    {
      "source": "n0",
      "target": "n2"
    }
  ]
}