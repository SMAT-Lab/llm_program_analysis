{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "import re",
        "import sys",
        "from string import punctuation",
        "from typing import List, Tuple, Dict",
        "punctuation = punctuation.replace('()', '')",
        "anchor = '###'",
        "auth_keys = ['apiKey', 'OAuth', 'X-Mashape-Key', 'User-Agent', 'No']",
        "https_keys = ['Yes', 'No']",
        "cors_keys = ['Yes', 'No', 'Unknown']",
        "index_title = 0",
        "index_desc = 1",
        "index_auth = 2",
        "index_https = 3",
        "index_cors = 4",
        "num_segments = 5",
        "min_entries_per_category = 3",
        "max_description_length = 100",
        "anchor_re = re.compile(anchor + '\\\\s(.+)')",
        "category_title_in_index_re = re.compile('\\\\*\\\\s\\\\[(.*)\\\\]')",
        "link_re = re.compile('\\\\[(.+)\\\\]\\\\((http.*)\\\\)')",
        "APIList = List[str]",
        "Categories = Dict[str, APIList]",
        "CategoriesLineNumber = Dict[str, int]",
        "def error_message(line_number: int, message: str) -> str:\n    line = line_number + 1\n    return f'(L{line:03d}) {message}'",
        "line = line_number + 1",
        "return f'(L{line:03d}) {message}'"
      ],
      "code": "import re\nimport sys\nfrom string import punctuation\nfrom typing import List, Tuple, Dict\npunctuation = punctuation.replace('()', '')\nanchor = '###'\nauth_keys = ['apiKey', 'OAuth', 'X-Mashape-Key', 'User-Agent', 'No']\nhttps_keys = ['Yes', 'No']\ncors_keys = ['Yes', 'No', 'Unknown']\nindex_title = 0\nindex_desc = 1\nindex_auth = 2\nindex_https = 3\nindex_cors = 4\nnum_segments = 5\nmin_entries_per_category = 3\nmax_description_length = 100\nanchor_re = re.compile(anchor + '\\\\s(.+)')\ncategory_title_in_index_re = re.compile('\\\\*\\\\s\\\\[(.*)\\\\]')\nlink_re = re.compile('\\\\[(.+)\\\\]\\\\((http.*)\\\\)')\nAPIList = List[str]\nCategories = Dict[str, APIList]\nCategoriesLineNumber = Dict[str, int]\ndef error_message(line_number: int, message: str) -> str:\n    line = line_number + 1\n    return f'(L{line:03d}) {message}'\nline = line_number + 1\nreturn f'(L{line:03d}) {message}'"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "def get_categories_content(contents: List[str]) -> Tuple[Categories, CategoriesLineNumber]:\n    categories = {}\n    category_line_num = {}\n    for (line_num, line_content) in enumerate(contents):\n        if line_content.startswith(anchor):\n            category = line_content.split(anchor)[1].strip()\n            categories[category] = []\n            category_line_num[category] = line_num\n            continue\n        if not line_content.startswith('|') or line_content.startswith('|---'):\n            continue\n        raw_title = [raw_content.strip() for raw_content in line_content.split('|')[1:-1]][0]\n        title_match = link_re.match(raw_title)\n        if title_match:\n            title = title_match.group(1).upper()\n            categories[category].append(title)\n    return (categories, category_line_num)",
        "categories = {}",
        "category_line_num = {}"
      ],
      "code": "def get_categories_content(contents: List[str]) -> Tuple[Categories, CategoriesLineNumber]:\n    categories = {}\n    category_line_num = {}\n    for (line_num, line_content) in enumerate(contents):\n        if line_content.startswith(anchor):\n            category = line_content.split(anchor)[1].strip()\n            categories[category] = []\n            category_line_num[category] = line_num\n            continue\n        if not line_content.startswith('|') or line_content.startswith('|---'):\n            continue\n        raw_title = [raw_content.strip() for raw_content in line_content.split('|')[1:-1]][0]\n        title_match = link_re.match(raw_title)\n        if title_match:\n            title = title_match.group(1).upper()\n            categories[category].append(title)\n    return (categories, category_line_num)\ncategories = {}\ncategory_line_num = {}"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [
        "(line_num, line_content)",
        "enumerate(contents)"
      ],
      "code": "(line_num, line_content)\nenumerate(contents)"
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [
        "line_content.startswith(anchor)"
      ],
      "code": "line_content.startswith(anchor)"
    },
    {
      "id": "n4",
      "type": "block",
      "statements": [
        "return (categories, category_line_num)"
      ],
      "code": "return (categories, category_line_num)"
    },
    {
      "id": "n5",
      "type": "block",
      "statements": [
        "category = line_content.split(anchor)[1].strip()",
        "categories[category] = []",
        "category_line_num[category] = line_num",
        "continue"
      ],
      "code": "category = line_content.split(anchor)[1].strip()\ncategories[category] = []\ncategory_line_num[category] = line_num\ncontinue"
    },
    {
      "id": "n6",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n7",
      "type": "block",
      "statements": [
        "not line_content.startswith('|') or line_content.startswith('|---')"
      ],
      "code": "not line_content.startswith('|') or line_content.startswith('|---')"
    },
    {
      "id": "n8",
      "type": "block",
      "statements": [
        "continue"
      ],
      "code": "continue"
    },
    {
      "id": "n9",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n10",
      "type": "block",
      "statements": [
        "raw_title = [raw_content.strip() for raw_content in line_content.split('|')[1:-1]][0]",
        "title_match = link_re.match(raw_title)",
        "title_match"
      ],
      "code": "raw_title = [raw_content.strip() for raw_content in line_content.split('|')[1:-1]][0]\ntitle_match = link_re.match(raw_title)\ntitle_match"
    },
    {
      "id": "n11",
      "type": "block",
      "statements": [
        "title = title_match.group(1).upper()",
        "categories[category].append(title)"
      ],
      "code": "title = title_match.group(1).upper()\ncategories[category].append(title)"
    },
    {
      "id": "n12",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n13",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n14",
      "type": "block",
      "statements": [
        "def check_alphabetical_order(lines: List[str]) -> List[str]:\n    err_msgs = []\n    (categories, category_line_num) = get_categories_content(contents=lines)\n    for (category, api_list) in categories.items():\n        if sorted(api_list) != api_list:\n            err_msg = error_message(category_line_num[category], f'{category} category is not alphabetical order')\n            err_msgs.append(err_msg)\n    return err_msgs",
        "err_msgs = []",
        "(categories, category_line_num) = get_categories_content(contents=lines)"
      ],
      "code": "def check_alphabetical_order(lines: List[str]) -> List[str]:\n    err_msgs = []\n    (categories, category_line_num) = get_categories_content(contents=lines)\n    for (category, api_list) in categories.items():\n        if sorted(api_list) != api_list:\n            err_msg = error_message(category_line_num[category], f'{category} category is not alphabetical order')\n            err_msgs.append(err_msg)\n    return err_msgs\nerr_msgs = []\n(categories, category_line_num) = get_categories_content(contents=lines)"
    },
    {
      "id": "n15",
      "type": "block",
      "statements": [
        "(category, api_list)",
        "categories.items()"
      ],
      "code": "(category, api_list)\ncategories.items()"
    },
    {
      "id": "n16",
      "type": "block",
      "statements": [
        "sorted(api_list) NotEq api_list"
      ],
      "code": "sorted(api_list) NotEq api_list"
    },
    {
      "id": "n17",
      "type": "block",
      "statements": [
        "return err_msgs"
      ],
      "code": "return err_msgs"
    },
    {
      "id": "n18",
      "type": "block",
      "statements": [
        "err_msg = error_message(category_line_num[category], f'{category} category is not alphabetical order')",
        "err_msgs.append(err_msg)"
      ],
      "code": "err_msg = error_message(category_line_num[category], f'{category} category is not alphabetical order')\nerr_msgs.append(err_msg)"
    },
    {
      "id": "n19",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n20",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n21",
      "type": "block",
      "statements": [
        "def check_title(line_num: int, raw_title: str) -> List[str]:\n    err_msgs = []\n    title_match = link_re.match(raw_title)\n    if not title_match:\n        err_msg = error_message(line_num, 'Title syntax should be \"[TITLE](LINK)\"')\n        err_msgs.append(err_msg)\n    else:\n        title = title_match.group(1)\n        if title.upper().endswith(' API'):\n            err_msg = error_message(line_num, 'Title should not end with \"... API\". Every entry is an API here!')\n            err_msgs.append(err_msg)\n    return err_msgs",
        "err_msgs = []",
        "title_match = link_re.match(raw_title)",
        "not title_match"
      ],
      "code": "def check_title(line_num: int, raw_title: str) -> List[str]:\n    err_msgs = []\n    title_match = link_re.match(raw_title)\n    if not title_match:\n        err_msg = error_message(line_num, 'Title syntax should be \"[TITLE](LINK)\"')\n        err_msgs.append(err_msg)\n    else:\n        title = title_match.group(1)\n        if title.upper().endswith(' API'):\n            err_msg = error_message(line_num, 'Title should not end with \"... API\". Every entry is an API here!')\n            err_msgs.append(err_msg)\n    return err_msgs\nerr_msgs = []\ntitle_match = link_re.match(raw_title)\nnot title_match"
    },
    {
      "id": "n22",
      "type": "block",
      "statements": [
        "err_msg = error_message(line_num, 'Title syntax should be \"[TITLE](LINK)\"')",
        "err_msgs.append(err_msg)"
      ],
      "code": "err_msg = error_message(line_num, 'Title syntax should be \"[TITLE](LINK)\"')\nerr_msgs.append(err_msg)"
    },
    {
      "id": "n23",
      "type": "block",
      "statements": [
        "title = title_match.group(1)",
        "title.upper().endswith(' API')"
      ],
      "code": "title = title_match.group(1)\ntitle.upper().endswith(' API')"
    },
    {
      "id": "n24",
      "type": "block",
      "statements": [
        "return err_msgs"
      ],
      "code": "return err_msgs"
    },
    {
      "id": "n25",
      "type": "block",
      "statements": [
        "err_msg = error_message(line_num, 'Title should not end with \"... API\". Every entry is an API here!')",
        "err_msgs.append(err_msg)"
      ],
      "code": "err_msg = error_message(line_num, 'Title should not end with \"... API\". Every entry is an API here!')\nerr_msgs.append(err_msg)"
    },
    {
      "id": "n26",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n27",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n28",
      "type": "block",
      "statements": [
        "def check_description(line_num: int, description: str) -> List[str]:\n    err_msgs = []\n    first_char = description[0]\n    if first_char.upper() != first_char:\n        err_msg = error_message(line_num, 'first character of description is not capitalized')\n        err_msgs.append(err_msg)\n    last_char = description[-1]\n    if last_char in punctuation:\n        err_msg = error_message(line_num, f'description should not end with {last_char}')\n        err_msgs.append(err_msg)\n    desc_length = len(description)\n    if desc_length > max_description_length:\n        err_msg = error_message(line_num, f'description should not exceed {max_description_length} characters (currently {desc_length})')\n        err_msgs.append(err_msg)\n    return err_msgs",
        "err_msgs = []",
        "first_char = description[0]",
        "first_char.upper() NotEq first_char"
      ],
      "code": "def check_description(line_num: int, description: str) -> List[str]:\n    err_msgs = []\n    first_char = description[0]\n    if first_char.upper() != first_char:\n        err_msg = error_message(line_num, 'first character of description is not capitalized')\n        err_msgs.append(err_msg)\n    last_char = description[-1]\n    if last_char in punctuation:\n        err_msg = error_message(line_num, f'description should not end with {last_char}')\n        err_msgs.append(err_msg)\n    desc_length = len(description)\n    if desc_length > max_description_length:\n        err_msg = error_message(line_num, f'description should not exceed {max_description_length} characters (currently {desc_length})')\n        err_msgs.append(err_msg)\n    return err_msgs\nerr_msgs = []\nfirst_char = description[0]\nfirst_char.upper() NotEq first_char"
    },
    {
      "id": "n29",
      "type": "block",
      "statements": [
        "err_msg = error_message(line_num, 'first character of description is not capitalized')",
        "err_msgs.append(err_msg)"
      ],
      "code": "err_msg = error_message(line_num, 'first character of description is not capitalized')\nerr_msgs.append(err_msg)"
    },
    {
      "id": "n30",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n31",
      "type": "block",
      "statements": [
        "last_char = description[-1]",
        "last_char In punctuation"
      ],
      "code": "last_char = description[-1]\nlast_char In punctuation"
    },
    {
      "id": "n32",
      "type": "block",
      "statements": [
        "err_msg = error_message(line_num, f'description should not end with {last_char}')",
        "err_msgs.append(err_msg)"
      ],
      "code": "err_msg = error_message(line_num, f'description should not end with {last_char}')\nerr_msgs.append(err_msg)"
    },
    {
      "id": "n33",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n34",
      "type": "block",
      "statements": [
        "desc_length = len(description)",
        "desc_length Gt max_description_length"
      ],
      "code": "desc_length = len(description)\ndesc_length Gt max_description_length"
    },
    {
      "id": "n35",
      "type": "block",
      "statements": [
        "err_msg = error_message(line_num, f'description should not exceed {max_description_length} characters (currently {desc_length})')",
        "err_msgs.append(err_msg)"
      ],
      "code": "err_msg = error_message(line_num, f'description should not exceed {max_description_length} characters (currently {desc_length})')\nerr_msgs.append(err_msg)"
    },
    {
      "id": "n36",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n37",
      "type": "block",
      "statements": [
        "return err_msgs"
      ],
      "code": "return err_msgs"
    },
    {
      "id": "n38",
      "type": "block",
      "statements": [
        "def check_auth(line_num: int, auth: str) -> List[str]:\n    err_msgs = []\n    backtick = '`'\n    if auth != 'No' and (not auth.startswith(backtick) or not auth.endswith(backtick)):\n        err_msg = error_message(line_num, 'auth value is not enclosed with `backticks`')\n        err_msgs.append(err_msg)\n    if auth.replace(backtick, '') not in auth_keys:\n        err_msg = error_message(line_num, f'{auth} is not a valid Auth option')\n        err_msgs.append(err_msg)\n    return err_msgs",
        "err_msgs = []",
        "backtick = '`'",
        "auth != 'No' and (not auth.startswith(backtick) or not auth.endswith(backtick))"
      ],
      "code": "def check_auth(line_num: int, auth: str) -> List[str]:\n    err_msgs = []\n    backtick = '`'\n    if auth != 'No' and (not auth.startswith(backtick) or not auth.endswith(backtick)):\n        err_msg = error_message(line_num, 'auth value is not enclosed with `backticks`')\n        err_msgs.append(err_msg)\n    if auth.replace(backtick, '') not in auth_keys:\n        err_msg = error_message(line_num, f'{auth} is not a valid Auth option')\n        err_msgs.append(err_msg)\n    return err_msgs\nerr_msgs = []\nbacktick = '`'\nauth != 'No' and (not auth.startswith(backtick) or not auth.endswith(backtick))"
    },
    {
      "id": "n39",
      "type": "block",
      "statements": [
        "err_msg = error_message(line_num, 'auth value is not enclosed with `backticks`')",
        "err_msgs.append(err_msg)"
      ],
      "code": "err_msg = error_message(line_num, 'auth value is not enclosed with `backticks`')\nerr_msgs.append(err_msg)"
    },
    {
      "id": "n40",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n41",
      "type": "block",
      "statements": [
        "auth.replace(backtick, '') NotIn auth_keys"
      ],
      "code": "auth.replace(backtick, '') NotIn auth_keys"
    },
    {
      "id": "n42",
      "type": "block",
      "statements": [
        "err_msg = error_message(line_num, f'{auth} is not a valid Auth option')",
        "err_msgs.append(err_msg)"
      ],
      "code": "err_msg = error_message(line_num, f'{auth} is not a valid Auth option')\nerr_msgs.append(err_msg)"
    },
    {
      "id": "n43",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n44",
      "type": "block",
      "statements": [
        "return err_msgs"
      ],
      "code": "return err_msgs"
    },
    {
      "id": "n45",
      "type": "block",
      "statements": [
        "def check_https(line_num: int, https: str) -> List[str]:\n    err_msgs = []\n    if https not in https_keys:\n        err_msg = error_message(line_num, f'{https} is not a valid HTTPS option')\n        err_msgs.append(err_msg)\n    return err_msgs",
        "err_msgs = []",
        "https NotIn https_keys"
      ],
      "code": "def check_https(line_num: int, https: str) -> List[str]:\n    err_msgs = []\n    if https not in https_keys:\n        err_msg = error_message(line_num, f'{https} is not a valid HTTPS option')\n        err_msgs.append(err_msg)\n    return err_msgs\nerr_msgs = []\nhttps NotIn https_keys"
    },
    {
      "id": "n46",
      "type": "block",
      "statements": [
        "err_msg = error_message(line_num, f'{https} is not a valid HTTPS option')",
        "err_msgs.append(err_msg)"
      ],
      "code": "err_msg = error_message(line_num, f'{https} is not a valid HTTPS option')\nerr_msgs.append(err_msg)"
    },
    {
      "id": "n47",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n48",
      "type": "block",
      "statements": [
        "return err_msgs"
      ],
      "code": "return err_msgs"
    },
    {
      "id": "n49",
      "type": "block",
      "statements": [
        "def check_cors(line_num: int, cors: str) -> List[str]:\n    err_msgs = []\n    if cors not in cors_keys:\n        err_msg = error_message(line_num, f'{cors} is not a valid CORS option')\n        err_msgs.append(err_msg)\n    return err_msgs",
        "err_msgs = []",
        "cors NotIn cors_keys"
      ],
      "code": "def check_cors(line_num: int, cors: str) -> List[str]:\n    err_msgs = []\n    if cors not in cors_keys:\n        err_msg = error_message(line_num, f'{cors} is not a valid CORS option')\n        err_msgs.append(err_msg)\n    return err_msgs\nerr_msgs = []\ncors NotIn cors_keys"
    },
    {
      "id": "n50",
      "type": "block",
      "statements": [
        "err_msg = error_message(line_num, f'{cors} is not a valid CORS option')",
        "err_msgs.append(err_msg)"
      ],
      "code": "err_msg = error_message(line_num, f'{cors} is not a valid CORS option')\nerr_msgs.append(err_msg)"
    },
    {
      "id": "n51",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n52",
      "type": "block",
      "statements": [
        "return err_msgs"
      ],
      "code": "return err_msgs"
    },
    {
      "id": "n53",
      "type": "block",
      "statements": [
        "def check_entry(line_num: int, segments: List[str]) -> List[str]:\n    raw_title = segments[index_title]\n    description = segments[index_desc]\n    auth = segments[index_auth]\n    https = segments[index_https]\n    cors = segments[index_cors]\n    title_err_msgs = check_title(line_num, raw_title)\n    desc_err_msgs = check_description(line_num, description)\n    auth_err_msgs = check_auth(line_num, auth)\n    https_err_msgs = check_https(line_num, https)\n    cors_err_msgs = check_cors(line_num, cors)\n    err_msgs = [*title_err_msgs, *desc_err_msgs, *auth_err_msgs, *https_err_msgs, *cors_err_msgs]\n    return err_msgs",
        "raw_title = segments[index_title]",
        "description = segments[index_desc]",
        "auth = segments[index_auth]",
        "https = segments[index_https]",
        "cors = segments[index_cors]",
        "title_err_msgs = check_title(line_num, raw_title)",
        "desc_err_msgs = check_description(line_num, description)",
        "auth_err_msgs = check_auth(line_num, auth)",
        "https_err_msgs = check_https(line_num, https)",
        "cors_err_msgs = check_cors(line_num, cors)",
        "err_msgs = [*title_err_msgs, *desc_err_msgs, *auth_err_msgs, *https_err_msgs, *cors_err_msgs]",
        "return err_msgs"
      ],
      "code": "def check_entry(line_num: int, segments: List[str]) -> List[str]:\n    raw_title = segments[index_title]\n    description = segments[index_desc]\n    auth = segments[index_auth]\n    https = segments[index_https]\n    cors = segments[index_cors]\n    title_err_msgs = check_title(line_num, raw_title)\n    desc_err_msgs = check_description(line_num, description)\n    auth_err_msgs = check_auth(line_num, auth)\n    https_err_msgs = check_https(line_num, https)\n    cors_err_msgs = check_cors(line_num, cors)\n    err_msgs = [*title_err_msgs, *desc_err_msgs, *auth_err_msgs, *https_err_msgs, *cors_err_msgs]\n    return err_msgs\nraw_title = segments[index_title]\ndescription = segments[index_desc]\nauth = segments[index_auth]\nhttps = segments[index_https]\ncors = segments[index_cors]\ntitle_err_msgs = check_title(line_num, raw_title)\ndesc_err_msgs = check_description(line_num, description)\nauth_err_msgs = check_auth(line_num, auth)\nhttps_err_msgs = check_https(line_num, https)\ncors_err_msgs = check_cors(line_num, cors)\nerr_msgs = [*title_err_msgs, *desc_err_msgs, *auth_err_msgs, *https_err_msgs, *cors_err_msgs]\nreturn err_msgs"
    },
    {
      "id": "n54",
      "type": "block",
      "statements": [
        "def check_file_format(lines: List[str]) -> List[str]:\n    err_msgs = []\n    category_title_in_index = []\n    alphabetical_err_msgs = check_alphabetical_order(lines)\n    err_msgs.extend(alphabetical_err_msgs)\n    num_in_category = min_entries_per_category + 1\n    category = ''\n    category_line = 0\n    for (line_num, line_content) in enumerate(lines):\n        category_title_match = category_title_in_index_re.match(line_content)\n        if category_title_match:\n            category_title_in_index.append(category_title_match.group(1))\n        if line_content.startswith(anchor):\n            category_match = anchor_re.match(line_content)\n            if category_match:\n                if category_match.group(1) not in category_title_in_index:\n                    err_msg = error_message(line_num, f'category header ({category_match.group(1)}) not added to Index section')\n                    err_msgs.append(err_msg)\n            else:\n                err_msg = error_message(line_num, 'category header is not formatted correctly')\n                err_msgs.append(err_msg)\n            if num_in_category < min_entries_per_category:\n                err_msg = error_message(category_line, f'{category} category does not have the minimum {min_entries_per_category} entries (only has {num_in_category})')\n                err_msgs.append(err_msg)\n            category = line_content.split(' ')[1]\n            category_line = line_num\n            num_in_category = 0\n            continue\n        if not line_content.startswith('|') or line_content.startswith('|---'):\n            continue\n        num_in_category += 1\n        segments = line_content.split('|')[1:-1]\n        if len(segments) < num_segments:\n            err_msg = error_message(line_num, f'entry does not have all the required columns (have {len(segments)}, need {num_segments})')\n            err_msgs.append(err_msg)\n            continue\n        for segment in segments:\n            if len(segment) - len(segment.lstrip()) != 1 or len(segment) - len(segment.rstrip()) != 1:\n                err_msg = error_message(line_num, 'each segment must start and end with exactly 1 space')\n                err_msgs.append(err_msg)\n        segments = [segment.strip() for segment in segments]\n        entry_err_msgs = check_entry(line_num, segments)\n        err_msgs.extend(entry_err_msgs)\n    return err_msgs",
        "err_msgs = []",
        "category_title_in_index = []",
        "alphabetical_err_msgs = check_alphabetical_order(lines)",
        "err_msgs.extend(alphabetical_err_msgs)",
        "num_in_category = min_entries_per_category + 1",
        "category = ''",
        "category_line = 0"
      ],
      "code": "def check_file_format(lines: List[str]) -> List[str]:\n    err_msgs = []\n    category_title_in_index = []\n    alphabetical_err_msgs = check_alphabetical_order(lines)\n    err_msgs.extend(alphabetical_err_msgs)\n    num_in_category = min_entries_per_category + 1\n    category = ''\n    category_line = 0\n    for (line_num, line_content) in enumerate(lines):\n        category_title_match = category_title_in_index_re.match(line_content)\n        if category_title_match:\n            category_title_in_index.append(category_title_match.group(1))\n        if line_content.startswith(anchor):\n            category_match = anchor_re.match(line_content)\n            if category_match:\n                if category_match.group(1) not in category_title_in_index:\n                    err_msg = error_message(line_num, f'category header ({category_match.group(1)}) not added to Index section')\n                    err_msgs.append(err_msg)\n            else:\n                err_msg = error_message(line_num, 'category header is not formatted correctly')\n                err_msgs.append(err_msg)\n            if num_in_category < min_entries_per_category:\n                err_msg = error_message(category_line, f'{category} category does not have the minimum {min_entries_per_category} entries (only has {num_in_category})')\n                err_msgs.append(err_msg)\n            category = line_content.split(' ')[1]\n            category_line = line_num\n            num_in_category = 0\n            continue\n        if not line_content.startswith('|') or line_content.startswith('|---'):\n            continue\n        num_in_category += 1\n        segments = line_content.split('|')[1:-1]\n        if len(segments) < num_segments:\n            err_msg = error_message(line_num, f'entry does not have all the required columns (have {len(segments)}, need {num_segments})')\n            err_msgs.append(err_msg)\n            continue\n        for segment in segments:\n            if len(segment) - len(segment.lstrip()) != 1 or len(segment) - len(segment.rstrip()) != 1:\n                err_msg = error_message(line_num, 'each segment must start and end with exactly 1 space')\n                err_msgs.append(err_msg)\n        segments = [segment.strip() for segment in segments]\n        entry_err_msgs = check_entry(line_num, segments)\n        err_msgs.extend(entry_err_msgs)\n    return err_msgs\nerr_msgs = []\ncategory_title_in_index = []\nalphabetical_err_msgs = check_alphabetical_order(lines)\nerr_msgs.extend(alphabetical_err_msgs)\nnum_in_category = min_entries_per_category + 1\ncategory = ''\ncategory_line = 0"
    },
    {
      "id": "n55",
      "type": "block",
      "statements": [
        "(line_num, line_content)",
        "enumerate(lines)"
      ],
      "code": "(line_num, line_content)\nenumerate(lines)"
    },
    {
      "id": "n56",
      "type": "block",
      "statements": [
        "category_title_match = category_title_in_index_re.match(line_content)",
        "category_title_match"
      ],
      "code": "category_title_match = category_title_in_index_re.match(line_content)\ncategory_title_match"
    },
    {
      "id": "n57",
      "type": "block",
      "statements": [
        "return err_msgs"
      ],
      "code": "return err_msgs"
    },
    {
      "id": "n58",
      "type": "block",
      "statements": [
        "category_title_in_index.append(category_title_match.group(1))"
      ],
      "code": "category_title_in_index.append(category_title_match.group(1))"
    },
    {
      "id": "n59",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n60",
      "type": "block",
      "statements": [
        "line_content.startswith(anchor)"
      ],
      "code": "line_content.startswith(anchor)"
    },
    {
      "id": "n61",
      "type": "block",
      "statements": [
        "category_match = anchor_re.match(line_content)",
        "category_match"
      ],
      "code": "category_match = anchor_re.match(line_content)\ncategory_match"
    },
    {
      "id": "n62",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n63",
      "type": "block",
      "statements": [
        "not line_content.startswith('|') or line_content.startswith('|---')"
      ],
      "code": "not line_content.startswith('|') or line_content.startswith('|---')"
    },
    {
      "id": "n64",
      "type": "block",
      "statements": [
        "category_match.group(1) NotIn category_title_in_index"
      ],
      "code": "category_match.group(1) NotIn category_title_in_index"
    },
    {
      "id": "n65",
      "type": "block",
      "statements": [
        "err_msg = error_message(line_num, 'category header is not formatted correctly')",
        "err_msgs.append(err_msg)"
      ],
      "code": "err_msg = error_message(line_num, 'category header is not formatted correctly')\nerr_msgs.append(err_msg)"
    },
    {
      "id": "n66",
      "type": "block",
      "statements": [
        "num_in_category Lt min_entries_per_category"
      ],
      "code": "num_in_category Lt min_entries_per_category"
    },
    {
      "id": "n67",
      "type": "block",
      "statements": [
        "err_msg = error_message(line_num, f'category header ({category_match.group(1)}) not added to Index section')",
        "err_msgs.append(err_msg)"
      ],
      "code": "err_msg = error_message(line_num, f'category header ({category_match.group(1)}) not added to Index section')\nerr_msgs.append(err_msg)"
    },
    {
      "id": "n68",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n69",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n70",
      "type": "block",
      "statements": [
        "err_msg = error_message(category_line, f'{category} category does not have the minimum {min_entries_per_category} entries (only has {num_in_category})')",
        "err_msgs.append(err_msg)"
      ],
      "code": "err_msg = error_message(category_line, f'{category} category does not have the minimum {min_entries_per_category} entries (only has {num_in_category})')\nerr_msgs.append(err_msg)"
    },
    {
      "id": "n71",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n72",
      "type": "block",
      "statements": [
        "category = line_content.split(' ')[1]",
        "category_line = line_num",
        "num_in_category = 0",
        "continue"
      ],
      "code": "category = line_content.split(' ')[1]\ncategory_line = line_num\nnum_in_category = 0\ncontinue"
    },
    {
      "id": "n73",
      "type": "block",
      "statements": [
        "continue"
      ],
      "code": "continue"
    },
    {
      "id": "n74",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n75",
      "type": "block",
      "statements": [
        "num_in_category += 1",
        "segments = line_content.split('|')[1:-1]",
        "len(segments) Lt num_segments"
      ],
      "code": "num_in_category += 1\nsegments = line_content.split('|')[1:-1]\nlen(segments) Lt num_segments"
    },
    {
      "id": "n76",
      "type": "block",
      "statements": [
        "err_msg = error_message(line_num, f'entry does not have all the required columns (have {len(segments)}, need {num_segments})')",
        "err_msgs.append(err_msg)",
        "continue"
      ],
      "code": "err_msg = error_message(line_num, f'entry does not have all the required columns (have {len(segments)}, need {num_segments})')\nerr_msgs.append(err_msg)\ncontinue"
    },
    {
      "id": "n77",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n78",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n79",
      "type": "block",
      "statements": [
        "segment",
        "segments"
      ],
      "code": "segment\nsegments"
    },
    {
      "id": "n80",
      "type": "block",
      "statements": [
        "len(segment) - len(segment.lstrip()) != 1 or len(segment) - len(segment.rstrip()) != 1"
      ],
      "code": "len(segment) - len(segment.lstrip()) != 1 or len(segment) - len(segment.rstrip()) != 1"
    },
    {
      "id": "n81",
      "type": "block",
      "statements": [
        "segments = [segment.strip() for segment in segments]",
        "entry_err_msgs = check_entry(line_num, segments)",
        "err_msgs.extend(entry_err_msgs)"
      ],
      "code": "segments = [segment.strip() for segment in segments]\nentry_err_msgs = check_entry(line_num, segments)\nerr_msgs.extend(entry_err_msgs)"
    },
    {
      "id": "n82",
      "type": "block",
      "statements": [
        "err_msg = error_message(line_num, 'each segment must start and end with exactly 1 space')",
        "err_msgs.append(err_msg)"
      ],
      "code": "err_msg = error_message(line_num, 'each segment must start and end with exactly 1 space')\nerr_msgs.append(err_msg)"
    },
    {
      "id": "n83",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n84",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n85",
      "type": "block",
      "statements": [
        "def main(filename: str) -> None:\n    with open(filename, mode='r', encoding='utf-8') as file:\n        lines = list((line.rstrip() for line in file))\n    file_format_err_msgs = check_file_format(lines)\n    if file_format_err_msgs:\n        for err_msg in file_format_err_msgs:\n            print(err_msg)\n        sys.exit(1)",
        "with open(filename, mode='r', encoding='utf-8') as file:\n    lines = list((line.rstrip() for line in file))",
        "lines = list((line.rstrip() for line in file))",
        "file_format_err_msgs = check_file_format(lines)",
        "file_format_err_msgs"
      ],
      "code": "def main(filename: str) -> None:\n    with open(filename, mode='r', encoding='utf-8') as file:\n        lines = list((line.rstrip() for line in file))\n    file_format_err_msgs = check_file_format(lines)\n    if file_format_err_msgs:\n        for err_msg in file_format_err_msgs:\n            print(err_msg)\n        sys.exit(1)\nwith open(filename, mode='r', encoding='utf-8') as file:\n    lines = list((line.rstrip() for line in file))\nlines = list((line.rstrip() for line in file))\nfile_format_err_msgs = check_file_format(lines)\nfile_format_err_msgs"
    },
    {
      "id": "n86",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n87",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n88",
      "type": "block",
      "statements": [
        "__name__ Eq '__main__'"
      ],
      "code": "__name__ Eq '__main__'"
    },
    {
      "id": "n89",
      "type": "block",
      "statements": [
        "err_msg",
        "file_format_err_msgs"
      ],
      "code": "err_msg\nfile_format_err_msgs"
    },
    {
      "id": "n90",
      "type": "block",
      "statements": [
        "print(err_msg)"
      ],
      "code": "print(err_msg)"
    },
    {
      "id": "n91",
      "type": "block",
      "statements": [
        "sys.exit(1)"
      ],
      "code": "sys.exit(1)"
    },
    {
      "id": "n92",
      "type": "block",
      "statements": [
        "num_args = len(sys.argv)",
        "num_args Lt 2"
      ],
      "code": "num_args = len(sys.argv)\nnum_args Lt 2"
    },
    {
      "id": "n93",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n94",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n95",
      "type": "block",
      "statements": [
        "print('No .md file passed (file should contain Markdown table syntax)')",
        "sys.exit(1)"
      ],
      "code": "print('No .md file passed (file should contain Markdown table syntax)')\nsys.exit(1)"
    },
    {
      "id": "n96",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n97",
      "type": "block",
      "statements": [
        "filename = sys.argv[1]",
        "main(filename)"
      ],
      "code": "filename = sys.argv[1]\nmain(filename)"
    }
  ],
  "edges": [
    {
      "source": "n61",
      "target": "n64"
    },
    {
      "source": "n74",
      "target": "n75"
    },
    {
      "source": "n82",
      "target": "n84"
    },
    {
      "source": "n14",
      "target": "n15"
    },
    {
      "source": "n67",
      "target": "n69"
    },
    {
      "source": "n76",
      "target": "n78"
    },
    {
      "source": "n59",
      "target": "n60"
    },
    {
      "source": "n26",
      "target": "n27"
    },
    {
      "source": "n40",
      "target": "n41"
    },
    {
      "source": "n81",
      "target": "n55"
    },
    {
      "source": "n2",
      "target": "n4"
    },
    {
      "source": "n68",
      "target": "n69"
    },
    {
      "source": "n1",
      "target": "n2"
    },
    {
      "source": "n19",
      "target": "n20"
    },
    {
      "source": "n66",
      "target": "n71"
    },
    {
      "source": "n12",
      "target": "n13"
    },
    {
      "source": "n34",
      "target": "n36"
    },
    {
      "source": "n21",
      "target": "n23"
    },
    {
      "source": "n20",
      "target": "n15"
    },
    {
      "source": "n31",
      "target": "n33"
    },
    {
      "source": "n71",
      "target": "n72"
    },
    {
      "source": "n89",
      "target": "n91"
    },
    {
      "source": "n51",
      "target": "n52"
    },
    {
      "source": "n49",
      "target": "n50"
    },
    {
      "source": "n41",
      "target": "n43"
    },
    {
      "source": "n85",
      "target": "n86"
    },
    {
      "source": "n45",
      "target": "n46"
    },
    {
      "source": "n28",
      "target": "n29"
    },
    {
      "source": "n29",
      "target": "n31"
    },
    {
      "source": "n18",
      "target": "n20"
    },
    {
      "source": "n75",
      "target": "n77"
    },
    {
      "source": "n93",
      "target": "n94"
    },
    {
      "source": "n75",
      "target": "n76"
    },
    {
      "source": "n92",
      "target": "n96"
    },
    {
      "source": "n36",
      "target": "n37"
    },
    {
      "source": "n22",
      "target": "n24"
    },
    {
      "source": "n41",
      "target": "n42"
    },
    {
      "source": "n65",
      "target": "n66"
    },
    {
      "source": "n38",
      "target": "n39"
    },
    {
      "source": "n15",
      "target": "n17"
    },
    {
      "source": "n23",
      "target": "n25"
    },
    {
      "source": "n21",
      "target": "n22"
    },
    {
      "source": "n35",
      "target": "n37"
    },
    {
      "source": "n34",
      "target": "n35"
    },
    {
      "source": "n2",
      "target": "n3"
    },
    {
      "source": "n56",
      "target": "n59"
    },
    {
      "source": "n16",
      "target": "n19"
    },
    {
      "source": "n66",
      "target": "n70"
    },
    {
      "source": "n58",
      "target": "n60"
    },
    {
      "source": "n96",
      "target": "n97"
    },
    {
      "source": "n15",
      "target": "n16"
    },
    {
      "source": "n95",
      "target": "n97"
    },
    {
      "source": "n92",
      "target": "n95"
    },
    {
      "source": "n79",
      "target": "n81"
    },
    {
      "source": "n88",
      "target": "n93"
    },
    {
      "source": "n28",
      "target": "n30"
    },
    {
      "source": "n80",
      "target": "n82"
    },
    {
      "source": "n89",
      "target": "n90"
    },
    {
      "source": "n7",
      "target": "n9"
    },
    {
      "source": "n38",
      "target": "n40"
    },
    {
      "source": "n42",
      "target": "n44"
    },
    {
      "source": "n64",
      "target": "n68"
    },
    {
      "source": "n60",
      "target": "n62"
    },
    {
      "source": "n73",
      "target": "n75"
    },
    {
      "source": "n33",
      "target": "n34"
    },
    {
      "source": "n3",
      "target": "n6"
    },
    {
      "source": "n61",
      "target": "n65"
    },
    {
      "source": "n27",
      "target": "n24"
    },
    {
      "source": "n56",
      "target": "n58"
    },
    {
      "source": "n55",
      "target": "n56"
    },
    {
      "source": "n63",
      "target": "n73"
    },
    {
      "source": "n83",
      "target": "n84"
    },
    {
      "source": "n77",
      "target": "n78"
    },
    {
      "source": "n85",
      "target": "n87"
    },
    {
      "source": "n47",
      "target": "n48"
    },
    {
      "source": "n30",
      "target": "n31"
    },
    {
      "source": "n23",
      "target": "n26"
    },
    {
      "source": "n79",
      "target": "n80"
    },
    {
      "source": "n46",
      "target": "n48"
    },
    {
      "source": "n60",
      "target": "n61"
    },
    {
      "source": "n62",
      "target": "n63"
    },
    {
      "source": "n10",
      "target": "n12"
    },
    {
      "source": "n84",
      "target": "n79"
    },
    {
      "source": "n91",
      "target": "n88"
    },
    {
      "source": "n70",
      "target": "n72"
    },
    {
      "source": "n3",
      "target": "n5"
    },
    {
      "source": "n86",
      "target": "n89"
    },
    {
      "source": "n32",
      "target": "n34"
    },
    {
      "source": "n11",
      "target": "n13"
    },
    {
      "source": "n39",
      "target": "n41"
    },
    {
      "source": "n54",
      "target": "n55"
    },
    {
      "source": "n6",
      "target": "n7"
    },
    {
      "source": "n78",
      "target": "n79"
    },
    {
      "source": "n63",
      "target": "n74"
    },
    {
      "source": "n72",
      "target": "n63"
    },
    {
      "source": "n10",
      "target": "n11"
    },
    {
      "source": "n87",
      "target": "n88"
    },
    {
      "source": "n88",
      "target": "n92"
    },
    {
      "source": "n16",
      "target": "n18"
    },
    {
      "source": "n80",
      "target": "n83"
    },
    {
      "source": "n43",
      "target": "n44"
    },
    {
      "source": "n50",
      "target": "n52"
    },
    {
      "source": "n7",
      "target": "n8"
    },
    {
      "source": "n90",
      "target": "n89"
    },
    {
      "source": "n64",
      "target": "n67"
    },
    {
      "source": "n55",
      "target": "n57"
    },
    {
      "source": "n97",
      "target": "n94"
    },
    {
      "source": "n49",
      "target": "n51"
    },
    {
      "source": "n9",
      "target": "n10"
    },
    {
      "source": "n31",
      "target": "n32"
    },
    {
      "source": "n45",
      "target": "n47"
    },
    {
      "source": "n69",
      "target": "n66"
    },
    {
      "source": "n8",
      "target": "n10"
    },
    {
      "source": "n25",
      "target": "n27"
    },
    {
      "source": "n13",
      "target": "n2"
    },
    {
      "source": "n5",
      "target": "n7"
    }
  ]
}