{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "from abc import ABCMeta, abstractmethod",
        "from enum import Enum",
        "class VehicleSize(Enum):\n    MOTORCYCLE = 0\n    COMPACT = 1\n    LARGE = 2",
        "MOTORCYCLE = 0",
        "COMPACT = 1",
        "LARGE = 2",
        "class Vehicle(metaclass=ABCMeta):\n\n    def __init__(self, vehicle_size, license_plate, spot_size):\n        self.vehicle_size = vehicle_size\n        self.license_plate = license_plate\n        self.spot_size\n        self.spots_taken = []\n\n    def clear_spots(self):\n        for spot in self.spots_taken:\n            spot.remove_vehicle(self)\n        self.spots_taken = []\n\n    def take_spot(self, spot):\n        self.spots_taken.append(spot)\n\n    @abstractmethod\n    def can_fit_in_spot(self, spot):\n        pass",
        "def __init__(self, vehicle_size, license_plate, spot_size):\n    self.vehicle_size = vehicle_size\n    self.license_plate = license_plate\n    self.spot_size\n    self.spots_taken = []",
        "self.vehicle_size = vehicle_size",
        "self.license_plate = license_plate",
        "self.spot_size",
        "self.spots_taken = []",
        "def clear_spots(self):\n    for spot in self.spots_taken:\n        spot.remove_vehicle(self)\n    self.spots_taken = []"
      ],
      "code": "from abc import ABCMeta, abstractmethod\nfrom enum import Enum\nclass VehicleSize(Enum):\n    MOTORCYCLE = 0\n    COMPACT = 1\n    LARGE = 2\nMOTORCYCLE = 0\nCOMPACT = 1\nLARGE = 2\nclass Vehicle(metaclass=ABCMeta):\n\n    def __init__(self, vehicle_size, license_plate, spot_size):\n        self.vehicle_size = vehicle_size\n        self.license_plate = license_plate\n        self.spot_size\n        self.spots_taken = []\n\n    def clear_spots(self):\n        for spot in self.spots_taken:\n            spot.remove_vehicle(self)\n        self.spots_taken = []\n\n    def take_spot(self, spot):\n        self.spots_taken.append(spot)\n\n    @abstractmethod\n    def can_fit_in_spot(self, spot):\n        pass\ndef __init__(self, vehicle_size, license_plate, spot_size):\n    self.vehicle_size = vehicle_size\n    self.license_plate = license_plate\n    self.spot_size\n    self.spots_taken = []\nself.vehicle_size = vehicle_size\nself.license_plate = license_plate\nself.spot_size\nself.spots_taken = []\ndef clear_spots(self):\n    for spot in self.spots_taken:\n        spot.remove_vehicle(self)\n    self.spots_taken = []"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "spot",
        "self.spots_taken"
      ],
      "code": "spot\nself.spots_taken"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [
        "spot.remove_vehicle(self)"
      ],
      "code": "spot.remove_vehicle(self)"
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [
        "self.spots_taken = []",
        "def take_spot(self, spot):\n    self.spots_taken.append(spot)",
        "self.spots_taken.append(spot)",
        "@abstractmethod\ndef can_fit_in_spot(self, spot):\n    pass",
        "pass",
        "class Motorcycle(Vehicle):\n\n    def __init__(self, license_plate):\n        super(Motorcycle, self).__init__(VehicleSize.MOTORCYCLE, license_plate, spot_size=1)\n\n    def can_fit_in_spot(self, spot):\n        return True",
        "def __init__(self, license_plate):\n    super(Motorcycle, self).__init__(VehicleSize.MOTORCYCLE, license_plate, spot_size=1)",
        "super(Motorcycle, self).__init__(VehicleSize.MOTORCYCLE, license_plate)",
        "def can_fit_in_spot(self, spot):\n    return True",
        "return True"
      ],
      "code": "self.spots_taken = []\ndef take_spot(self, spot):\n    self.spots_taken.append(spot)\nself.spots_taken.append(spot)\n@abstractmethod\ndef can_fit_in_spot(self, spot):\n    pass\npass\nclass Motorcycle(Vehicle):\n\n    def __init__(self, license_plate):\n        super(Motorcycle, self).__init__(VehicleSize.MOTORCYCLE, license_plate, spot_size=1)\n\n    def can_fit_in_spot(self, spot):\n        return True\ndef __init__(self, license_plate):\n    super(Motorcycle, self).__init__(VehicleSize.MOTORCYCLE, license_plate, spot_size=1)\nsuper(Motorcycle, self).__init__(VehicleSize.MOTORCYCLE, license_plate)\ndef can_fit_in_spot(self, spot):\n    return True\nreturn True"
    },
    {
      "id": "n4",
      "type": "block",
      "statements": [
        "class Car(Vehicle):\n\n    def __init__(self, license_plate):\n        super(Car, self).__init__(VehicleSize.COMPACT, license_plate, spot_size=1)\n\n    def can_fit_in_spot(self, spot):\n        return spot.size in (VehicleSize.LARGE, VehicleSize.COMPACT)",
        "def __init__(self, license_plate):\n    super(Car, self).__init__(VehicleSize.COMPACT, license_plate, spot_size=1)",
        "super(Car, self).__init__(VehicleSize.COMPACT, license_plate)",
        "def can_fit_in_spot(self, spot):\n    return spot.size in (VehicleSize.LARGE, VehicleSize.COMPACT)",
        "return spot.size in (VehicleSize.LARGE, VehicleSize.COMPACT)"
      ],
      "code": "class Car(Vehicle):\n\n    def __init__(self, license_plate):\n        super(Car, self).__init__(VehicleSize.COMPACT, license_plate, spot_size=1)\n\n    def can_fit_in_spot(self, spot):\n        return spot.size in (VehicleSize.LARGE, VehicleSize.COMPACT)\ndef __init__(self, license_plate):\n    super(Car, self).__init__(VehicleSize.COMPACT, license_plate, spot_size=1)\nsuper(Car, self).__init__(VehicleSize.COMPACT, license_plate)\ndef can_fit_in_spot(self, spot):\n    return spot.size in (VehicleSize.LARGE, VehicleSize.COMPACT)\nreturn spot.size in (VehicleSize.LARGE, VehicleSize.COMPACT)"
    },
    {
      "id": "n5",
      "type": "block",
      "statements": [
        "class Bus(Vehicle):\n\n    def __init__(self, license_plate):\n        super(Bus, self).__init__(VehicleSize.LARGE, license_plate, spot_size=5)\n\n    def can_fit_in_spot(self, spot):\n        return spot.size == VehicleSize.LARGE",
        "def __init__(self, license_plate):\n    super(Bus, self).__init__(VehicleSize.LARGE, license_plate, spot_size=5)",
        "super(Bus, self).__init__(VehicleSize.LARGE, license_plate)",
        "def can_fit_in_spot(self, spot):\n    return spot.size == VehicleSize.LARGE",
        "return spot.size == VehicleSize.LARGE"
      ],
      "code": "class Bus(Vehicle):\n\n    def __init__(self, license_plate):\n        super(Bus, self).__init__(VehicleSize.LARGE, license_plate, spot_size=5)\n\n    def can_fit_in_spot(self, spot):\n        return spot.size == VehicleSize.LARGE\ndef __init__(self, license_plate):\n    super(Bus, self).__init__(VehicleSize.LARGE, license_plate, spot_size=5)\nsuper(Bus, self).__init__(VehicleSize.LARGE, license_plate)\ndef can_fit_in_spot(self, spot):\n    return spot.size == VehicleSize.LARGE\nreturn spot.size == VehicleSize.LARGE"
    },
    {
      "id": "n6",
      "type": "block",
      "statements": [
        "class ParkingLot(object):\n\n    def __init__(self, num_levels):\n        self.num_levels = num_levels\n        self.levels = []\n\n    def park_vehicle(self, vehicle):\n        for level in self.levels:\n            if level.park_vehicle(vehicle):\n                return True\n        return False",
        "def __init__(self, num_levels):\n    self.num_levels = num_levels\n    self.levels = []",
        "self.num_levels = num_levels",
        "self.levels = []",
        "def park_vehicle(self, vehicle):\n    for level in self.levels:\n        if level.park_vehicle(vehicle):\n            return True\n    return False"
      ],
      "code": "class ParkingLot(object):\n\n    def __init__(self, num_levels):\n        self.num_levels = num_levels\n        self.levels = []\n\n    def park_vehicle(self, vehicle):\n        for level in self.levels:\n            if level.park_vehicle(vehicle):\n                return True\n        return False\ndef __init__(self, num_levels):\n    self.num_levels = num_levels\n    self.levels = []\nself.num_levels = num_levels\nself.levels = []\ndef park_vehicle(self, vehicle):\n    for level in self.levels:\n        if level.park_vehicle(vehicle):\n            return True\n    return False"
    },
    {
      "id": "n7",
      "type": "block",
      "statements": [
        "level",
        "self.levels"
      ],
      "code": "level\nself.levels"
    },
    {
      "id": "n8",
      "type": "block",
      "statements": [
        "level.park_vehicle(vehicle)"
      ],
      "code": "level.park_vehicle(vehicle)"
    },
    {
      "id": "n9",
      "type": "block",
      "statements": [
        "return False"
      ],
      "code": "return False"
    },
    {
      "id": "n10",
      "type": "block",
      "statements": [
        "return True"
      ],
      "code": "return True"
    },
    {
      "id": "n11",
      "type": "block",
      "statements": [],
      "code": "\n"
    },
    {
      "id": "n12",
      "type": "block",
      "statements": [
        "class Level(object):\n    SPOTS_PER_ROW = 10\n\n    def __init__(self, floor, total_spots):\n        self.floor = floor\n        self.num_spots = total_spots\n        self.available_spots = 0\n        self.spots = []\n\n    def spot_freed(self):\n        self.available_spots += 1\n\n    def park_vehicle(self, vehicle):\n        spot = self._find_available_spot(vehicle)\n        if spot is None:\n            return None\n        else:\n            spot.park_vehicle(vehicle)\n            return spot\n\n    def _find_available_spot(self, vehicle):\n        \"\"\"Find an available spot where vehicle can fit, or return None\"\"\"\n        pass\n\n    def _park_starting_at_spot(self, spot, vehicle):\n        \"\"\"Occupy starting at spot.spot_number to vehicle.spot_size.\"\"\"\n        pass",
        "SPOTS_PER_ROW = 10",
        "def __init__(self, floor, total_spots):\n    self.floor = floor\n    self.num_spots = total_spots\n    self.available_spots = 0\n    self.spots = []",
        "self.floor = floor",
        "self.num_spots = total_spots",
        "self.available_spots = 0",
        "self.spots = []",
        "def spot_freed(self):\n    self.available_spots += 1",
        "self.available_spots += 1",
        "def park_vehicle(self, vehicle):\n    spot = self._find_available_spot(vehicle)\n    if spot is None:\n        return None\n    else:\n        spot.park_vehicle(vehicle)\n        return spot",
        "spot = self._find_available_spot(vehicle)",
        "spot Is None"
      ],
      "code": "class Level(object):\n    SPOTS_PER_ROW = 10\n\n    def __init__(self, floor, total_spots):\n        self.floor = floor\n        self.num_spots = total_spots\n        self.available_spots = 0\n        self.spots = []\n\n    def spot_freed(self):\n        self.available_spots += 1\n\n    def park_vehicle(self, vehicle):\n        spot = self._find_available_spot(vehicle)\n        if spot is None:\n            return None\n        else:\n            spot.park_vehicle(vehicle)\n            return spot\n\n    def _find_available_spot(self, vehicle):\n        \"\"\"Find an available spot where vehicle can fit, or return None\"\"\"\n        pass\n\n    def _park_starting_at_spot(self, spot, vehicle):\n        \"\"\"Occupy starting at spot.spot_number to vehicle.spot_size.\"\"\"\n        pass\nSPOTS_PER_ROW = 10\ndef __init__(self, floor, total_spots):\n    self.floor = floor\n    self.num_spots = total_spots\n    self.available_spots = 0\n    self.spots = []\nself.floor = floor\nself.num_spots = total_spots\nself.available_spots = 0\nself.spots = []\ndef spot_freed(self):\n    self.available_spots += 1\nself.available_spots += 1\ndef park_vehicle(self, vehicle):\n    spot = self._find_available_spot(vehicle)\n    if spot is None:\n        return None\n    else:\n        spot.park_vehicle(vehicle)\n        return spot\nspot = self._find_available_spot(vehicle)\nspot Is None"
    },
    {
      "id": "n13",
      "type": "block",
      "statements": [
        "return None"
      ],
      "code": "return None"
    },
    {
      "id": "n14",
      "type": "block",
      "statements": [
        "spot.park_vehicle(vehicle)",
        "return spot"
      ],
      "code": "spot.park_vehicle(vehicle)\nreturn spot"
    },
    {
      "id": "n15",
      "type": "block",
      "statements": [
        "def _find_available_spot(self, vehicle):\n    \"\"\"Find an available spot where vehicle can fit, or return None\"\"\"\n    pass",
        "'Find an available spot where vehicle can fit, or return None'",
        "pass",
        "def _park_starting_at_spot(self, spot, vehicle):\n    \"\"\"Occupy starting at spot.spot_number to vehicle.spot_size.\"\"\"\n    pass",
        "'Occupy starting at spot.spot_number to vehicle.spot_size.'",
        "pass",
        "class ParkingSpot(object):\n\n    def __init__(self, level, row, spot_number, spot_size, vehicle_size):\n        self.level = level\n        self.row = row\n        self.spot_number = spot_number\n        self.spot_size = spot_size\n        self.vehicle_size = vehicle_size\n        self.vehicle = None\n\n    def is_available(self):\n        return True if self.vehicle is None else False\n\n    def can_fit_vehicle(self, vehicle):\n        if self.vehicle is not None:\n            return False\n        return vehicle.can_fit_in_spot(self)\n\n    def park_vehicle(self, vehicle):\n        pass\n\n    def remove_vehicle(self):\n        pass",
        "def __init__(self, level, row, spot_number, spot_size, vehicle_size):\n    self.level = level\n    self.row = row\n    self.spot_number = spot_number\n    self.spot_size = spot_size\n    self.vehicle_size = vehicle_size\n    self.vehicle = None",
        "self.level = level",
        "self.row = row",
        "self.spot_number = spot_number",
        "self.spot_size = spot_size",
        "self.vehicle_size = vehicle_size",
        "self.vehicle = None",
        "def is_available(self):\n    return True if self.vehicle is None else False",
        "return True if self.vehicle is None else False"
      ],
      "code": "def _find_available_spot(self, vehicle):\n    \"\"\"Find an available spot where vehicle can fit, or return None\"\"\"\n    pass\n'Find an available spot where vehicle can fit, or return None'\npass\ndef _park_starting_at_spot(self, spot, vehicle):\n    \"\"\"Occupy starting at spot.spot_number to vehicle.spot_size.\"\"\"\n    pass\n'Occupy starting at spot.spot_number to vehicle.spot_size.'\npass\nclass ParkingSpot(object):\n\n    def __init__(self, level, row, spot_number, spot_size, vehicle_size):\n        self.level = level\n        self.row = row\n        self.spot_number = spot_number\n        self.spot_size = spot_size\n        self.vehicle_size = vehicle_size\n        self.vehicle = None\n\n    def is_available(self):\n        return True if self.vehicle is None else False\n\n    def can_fit_vehicle(self, vehicle):\n        if self.vehicle is not None:\n            return False\n        return vehicle.can_fit_in_spot(self)\n\n    def park_vehicle(self, vehicle):\n        pass\n\n    def remove_vehicle(self):\n        pass\ndef __init__(self, level, row, spot_number, spot_size, vehicle_size):\n    self.level = level\n    self.row = row\n    self.spot_number = spot_number\n    self.spot_size = spot_size\n    self.vehicle_size = vehicle_size\n    self.vehicle = None\nself.level = level\nself.row = row\nself.spot_number = spot_number\nself.spot_size = spot_size\nself.vehicle_size = vehicle_size\nself.vehicle = None\ndef is_available(self):\n    return True if self.vehicle is None else False\nreturn True if self.vehicle is None else False"
    },
    {
      "id": "n16",
      "type": "block",
      "statements": [
        "def can_fit_vehicle(self, vehicle):\n    if self.vehicle is not None:\n        return False\n    return vehicle.can_fit_in_spot(self)",
        "self.vehicle IsNot None"
      ],
      "code": "def can_fit_vehicle(self, vehicle):\n    if self.vehicle is not None:\n        return False\n    return vehicle.can_fit_in_spot(self)\nself.vehicle IsNot None"
    },
    {
      "id": "n17",
      "type": "block",
      "statements": [
        "return False"
      ],
      "code": "return False"
    },
    {
      "id": "n18",
      "type": "block",
      "statements": [],
      "code": "\nreturn vehicle.can_fit_in_spot(self)"
    },
    {
      "id": "n19",
      "type": "block",
      "statements": [
        "def park_vehicle(self, vehicle):\n    pass",
        "pass",
        "def remove_vehicle(self):\n    pass",
        "pass"
      ],
      "code": "def park_vehicle(self, vehicle):\n    pass\npass\ndef remove_vehicle(self):\n    pass\npass"
    }
  ],
  "edges": [
    {
      "source": "n11",
      "target": "n7"
    },
    {
      "source": "n12",
      "target": "n14"
    },
    {
      "source": "n1",
      "target": "n3"
    },
    {
      "source": "n6",
      "target": "n7"
    },
    {
      "source": "n8",
      "target": "n10"
    },
    {
      "source": "n0",
      "target": "n1"
    },
    {
      "source": "n16",
      "target": "n17"
    },
    {
      "source": "n16",
      "target": "n18"
    },
    {
      "source": "n7",
      "target": "n9"
    },
    {
      "source": "n1",
      "target": "n2"
    },
    {
      "source": "n12",
      "target": "n13"
    },
    {
      "source": "n7",
      "target": "n8"
    },
    {
      "source": "n8",
      "target": "n11"
    },
    {
      "source": "n2",
      "target": "n1"
    }
  ]
}