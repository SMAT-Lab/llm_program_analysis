{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "def binary_coded_decimal(number: int) -> str:\n    \"\"\"\n    Find binary coded decimal (bcd) of integer base 10.\n    Each digit of the number is represented by a 4-bit binary.\n    Example:\n    >>> binary_coded_decimal(-2)\n    '0b0000'\n    >>> binary_coded_decimal(-1)\n    '0b0000'\n    >>> binary_coded_decimal(0)\n    '0b0000'\n    >>> binary_coded_decimal(3)\n    '0b0011'\n    >>> binary_coded_decimal(2)\n    '0b0010'\n    >>> binary_coded_decimal(12)\n    '0b00010010'\n    >>> binary_coded_decimal(987)\n    '0b100110000111'\n    \"\"\"\n    return '0b' + ''.join((str(bin(int(digit)))[2:].zfill(4) for digit in str(max(0, number))))",
        "\"\\n    Find binary coded decimal (bcd) of integer base 10.\\n    Each digit of the number is represented by a 4-bit binary.\\n    Example:\\n    >>> binary_coded_decimal(-2)\\n    '0b0000'\\n    >>> binary_coded_decimal(-1)\\n    '0b0000'\\n    >>> binary_coded_decimal(0)\\n    '0b0000'\\n    >>> binary_coded_decimal(3)\\n    '0b0011'\\n    >>> binary_coded_decimal(2)\\n    '0b0010'\\n    >>> binary_coded_decimal(12)\\n    '0b00010010'\\n    >>> binary_coded_decimal(987)\\n    '0b100110000111'\\n    \"",
        "return '0b' + ''.join((str(bin(int(digit)))[2:].zfill(4) for digit in str(max(0, number))))"
      ],
      "code": "def binary_coded_decimal(number: int) -> str:\n    \"\"\"\n    Find binary coded decimal (bcd) of integer base 10.\n    Each digit of the number is represented by a 4-bit binary.\n    Example:\n    >>> binary_coded_decimal(-2)\n    '0b0000'\n    >>> binary_coded_decimal(-1)\n    '0b0000'\n    >>> binary_coded_decimal(0)\n    '0b0000'\n    >>> binary_coded_decimal(3)\n    '0b0011'\n    >>> binary_coded_decimal(2)\n    '0b0010'\n    >>> binary_coded_decimal(12)\n    '0b00010010'\n    >>> binary_coded_decimal(987)\n    '0b100110000111'\n    \"\"\"\n    return '0b' + ''.join((str(bin(int(digit)))[2:].zfill(4) for digit in str(max(0, number))))\n\"\\n    Find binary coded decimal (bcd) of integer base 10.\\n    Each digit of the number is represented by a 4-bit binary.\\n    Example:\\n    >>> binary_coded_decimal(-2)\\n    '0b0000'\\n    >>> binary_coded_decimal(-1)\\n    '0b0000'\\n    >>> binary_coded_decimal(0)\\n    '0b0000'\\n    >>> binary_coded_decimal(3)\\n    '0b0011'\\n    >>> binary_coded_decimal(2)\\n    '0b0010'\\n    >>> binary_coded_decimal(12)\\n    '0b00010010'\\n    >>> binary_coded_decimal(987)\\n    '0b100110000111'\\n    \"\nreturn '0b' + ''.join((str(bin(int(digit)))[2:].zfill(4) for digit in str(max(0, number))))"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "__name__ Eq '__main__'"
      ],
      "code": "__name__ Eq '__main__'"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [
        "import doctest",
        "doctest.testmod()"
      ],
      "code": "import doctest\ndoctest.testmod()"
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n4",
      "type": "block",
      "statements": [],
      "code": ""
    }
  ],
  "edges": [
    {
      "source": "n2",
      "target": "n4"
    },
    {
      "source": "n1",
      "target": "n2"
    },
    {
      "source": "n3",
      "target": "n4"
    },
    {
      "source": "n1",
      "target": "n3"
    }
  ]
}