{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "'\\nMinimax helps to achieve maximum score in a game by checking all possible moves\\ndepth is current depth in game tree.\\n\\nnodeIndex is index of current node in scores[].\\nif move is of maximizer return true else false\\nleaves of game tree is stored in scores[]\\nheight is maximum height of Game tree\\n'",
        "from __future__ import annotations",
        "import math",
        "def minimax(depth: int, node_index: int, is_max: bool, scores: list[int], height: float) -> int:\n    \"\"\"\n    This function implements the minimax algorithm, which helps achieve the optimal\n    score for a player in a two-player game by checking all possible moves.\n    If the player is the maximizer, then the score is maximized.\n    If the player is the minimizer, then the score is minimized.\n\n    Parameters:\n    - depth: Current depth in the game tree.\n    - node_index: Index of the current node in the scores list.\n    - is_max: A boolean indicating whether the current move\n              is for the maximizer (True) or minimizer (False).\n    - scores: A list containing the scores of the leaves of the game tree.\n    - height: The maximum height of the game tree.\n\n    Returns:\n    - An integer representing the optimal score for the current player.\n\n    >>> import math\n    >>> scores = [90, 23, 6, 33, 21, 65, 123, 34423]\n    >>> height = math.log(len(scores), 2)\n    >>> minimax(0, 0, True, scores, height)\n    65\n    >>> minimax(-1, 0, True, scores, height)\n    Traceback (most recent call last):\n        ...\n    ValueError: Depth cannot be less than 0\n    >>> minimax(0, 0, True, [], 2)\n    Traceback (most recent call last):\n        ...\n    ValueError: Scores cannot be empty\n    >>> scores = [3, 5, 2, 9, 12, 5, 23, 23]\n    >>> height = math.log(len(scores), 2)\n    >>> minimax(0, 0, True, scores, height)\n    12\n    \"\"\"\n    if depth < 0:\n        raise ValueError('Depth cannot be less than 0')\n    if len(scores) == 0:\n        raise ValueError('Scores cannot be empty')\n    if depth == height:\n        return scores[node_index]\n    if is_max:\n        return max(minimax(depth + 1, node_index * 2, False, scores, height), minimax(depth + 1, node_index * 2 + 1, False, scores, height))\n    return min(minimax(depth + 1, node_index * 2, True, scores, height), minimax(depth + 1, node_index * 2 + 1, True, scores, height))",
        "'\\n    This function implements the minimax algorithm, which helps achieve the optimal\\n    score for a player in a two-player game by checking all possible moves.\\n    If the player is the maximizer, then the score is maximized.\\n    If the player is the minimizer, then the score is minimized.\\n\\n    Parameters:\\n    - depth: Current depth in the game tree.\\n    - node_index: Index of the current node in the scores list.\\n    - is_max: A boolean indicating whether the current move\\n              is for the maximizer (True) or minimizer (False).\\n    - scores: A list containing the scores of the leaves of the game tree.\\n    - height: The maximum height of the game tree.\\n\\n    Returns:\\n    - An integer representing the optimal score for the current player.\\n\\n    >>> import math\\n    >>> scores = [90, 23, 6, 33, 21, 65, 123, 34423]\\n    >>> height = math.log(len(scores), 2)\\n    >>> minimax(0, 0, True, scores, height)\\n    65\\n    >>> minimax(-1, 0, True, scores, height)\\n    Traceback (most recent call last):\\n        ...\\n    ValueError: Depth cannot be less than 0\\n    >>> minimax(0, 0, True, [], 2)\\n    Traceback (most recent call last):\\n        ...\\n    ValueError: Scores cannot be empty\\n    >>> scores = [3, 5, 2, 9, 12, 5, 23, 23]\\n    >>> height = math.log(len(scores), 2)\\n    >>> minimax(0, 0, True, scores, height)\\n    12\\n    '",
        "depth Lt 0"
      ],
      "code": "'\\nMinimax helps to achieve maximum score in a game by checking all possible moves\\ndepth is current depth in game tree.\\n\\nnodeIndex is index of current node in scores[].\\nif move is of maximizer return true else false\\nleaves of game tree is stored in scores[]\\nheight is maximum height of Game tree\\n'\nfrom __future__ import annotations\nimport math\ndef minimax(depth: int, node_index: int, is_max: bool, scores: list[int], height: float) -> int:\n    \"\"\"\n    This function implements the minimax algorithm, which helps achieve the optimal\n    score for a player in a two-player game by checking all possible moves.\n    If the player is the maximizer, then the score is maximized.\n    If the player is the minimizer, then the score is minimized.\n\n    Parameters:\n    - depth: Current depth in the game tree.\n    - node_index: Index of the current node in the scores list.\n    - is_max: A boolean indicating whether the current move\n              is for the maximizer (True) or minimizer (False).\n    - scores: A list containing the scores of the leaves of the game tree.\n    - height: The maximum height of the game tree.\n\n    Returns:\n    - An integer representing the optimal score for the current player.\n\n    >>> import math\n    >>> scores = [90, 23, 6, 33, 21, 65, 123, 34423]\n    >>> height = math.log(len(scores), 2)\n    >>> minimax(0, 0, True, scores, height)\n    65\n    >>> minimax(-1, 0, True, scores, height)\n    Traceback (most recent call last):\n        ...\n    ValueError: Depth cannot be less than 0\n    >>> minimax(0, 0, True, [], 2)\n    Traceback (most recent call last):\n        ...\n    ValueError: Scores cannot be empty\n    >>> scores = [3, 5, 2, 9, 12, 5, 23, 23]\n    >>> height = math.log(len(scores), 2)\n    >>> minimax(0, 0, True, scores, height)\n    12\n    \"\"\"\n    if depth < 0:\n        raise ValueError('Depth cannot be less than 0')\n    if len(scores) == 0:\n        raise ValueError('Scores cannot be empty')\n    if depth == height:\n        return scores[node_index]\n    if is_max:\n        return max(minimax(depth + 1, node_index * 2, False, scores, height), minimax(depth + 1, node_index * 2 + 1, False, scores, height))\n    return min(minimax(depth + 1, node_index * 2, True, scores, height), minimax(depth + 1, node_index * 2 + 1, True, scores, height))\n'\\n    This function implements the minimax algorithm, which helps achieve the optimal\\n    score for a player in a two-player game by checking all possible moves.\\n    If the player is the maximizer, then the score is maximized.\\n    If the player is the minimizer, then the score is minimized.\\n\\n    Parameters:\\n    - depth: Current depth in the game tree.\\n    - node_index: Index of the current node in the scores list.\\n    - is_max: A boolean indicating whether the current move\\n              is for the maximizer (True) or minimizer (False).\\n    - scores: A list containing the scores of the leaves of the game tree.\\n    - height: The maximum height of the game tree.\\n\\n    Returns:\\n    - An integer representing the optimal score for the current player.\\n\\n    >>> import math\\n    >>> scores = [90, 23, 6, 33, 21, 65, 123, 34423]\\n    >>> height = math.log(len(scores), 2)\\n    >>> minimax(0, 0, True, scores, height)\\n    65\\n    >>> minimax(-1, 0, True, scores, height)\\n    Traceback (most recent call last):\\n        ...\\n    ValueError: Depth cannot be less than 0\\n    >>> minimax(0, 0, True, [], 2)\\n    Traceback (most recent call last):\\n        ...\\n    ValueError: Scores cannot be empty\\n    >>> scores = [3, 5, 2, 9, 12, 5, 23, 23]\\n    >>> height = math.log(len(scores), 2)\\n    >>> minimax(0, 0, True, scores, height)\\n    12\\n    '\ndepth Lt 0"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "raise ValueError('Depth cannot be less than 0')"
      ],
      "code": "raise ValueError('Depth cannot be less than 0')"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [
        "len(scores) Eq 0"
      ],
      "code": "len(scores) Eq 0"
    },
    {
      "id": "n4",
      "type": "block",
      "statements": [
        "raise ValueError('Scores cannot be empty')"
      ],
      "code": "raise ValueError('Scores cannot be empty')"
    },
    {
      "id": "n5",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n6",
      "type": "block",
      "statements": [
        "depth Eq height"
      ],
      "code": "depth Eq height"
    },
    {
      "id": "n7",
      "type": "block",
      "statements": [
        "return scores[node_index]"
      ],
      "code": "return scores[node_index]"
    },
    {
      "id": "n8",
      "type": "block",
      "statements": [],
      "code": "\nis_max"
    },
    {
      "id": "n9",
      "type": "block",
      "statements": [
        "return max(minimax(depth + 1, node_index * 2, False, scores, height), minimax(depth + 1, node_index * 2 + 1, False, scores, height))"
      ],
      "code": "return max(minimax(depth + 1, node_index * 2, False, scores, height), minimax(depth + 1, node_index * 2 + 1, False, scores, height))"
    },
    {
      "id": "n10",
      "type": "block",
      "statements": [],
      "code": "\nreturn min(minimax(depth + 1, node_index * 2, True, scores, height), minimax(depth + 1, node_index * 2 + 1, True, scores, height))"
    },
    {
      "id": "n11",
      "type": "block",
      "statements": [
        "def main() -> None:\n    scores = [90, 23, 6, 33, 21, 65, 123, 34423]\n    height = math.log(len(scores), 2)\n    print('Optimal value : ', end='')\n    print(minimax(0, 0, True, scores, height))",
        "scores = [90, 23, 6, 33, 21, 65, 123, 34423]",
        "height = math.log(len(scores), 2)",
        "print('Optimal value : ')",
        "print(minimax(0, 0, True, scores, height))",
        "__name__ Eq '__main__'"
      ],
      "code": "def main() -> None:\n    scores = [90, 23, 6, 33, 21, 65, 123, 34423]\n    height = math.log(len(scores), 2)\n    print('Optimal value : ', end='')\n    print(minimax(0, 0, True, scores, height))\nscores = [90, 23, 6, 33, 21, 65, 123, 34423]\nheight = math.log(len(scores), 2)\nprint('Optimal value : ')\nprint(minimax(0, 0, True, scores, height))\n__name__ Eq '__main__'"
    },
    {
      "id": "n12",
      "type": "block",
      "statements": [
        "import doctest",
        "doctest.testmod()",
        "main()"
      ],
      "code": "import doctest\ndoctest.testmod()\nmain()"
    },
    {
      "id": "n13",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n14",
      "type": "block",
      "statements": [],
      "code": ""
    }
  ],
  "edges": [
    {
      "source": "n5",
      "target": "n6"
    },
    {
      "source": "n12",
      "target": "n14"
    },
    {
      "source": "n1",
      "target": "n3"
    },
    {
      "source": "n6",
      "target": "n7"
    },
    {
      "source": "n11",
      "target": "n13"
    },
    {
      "source": "n8",
      "target": "n10"
    },
    {
      "source": "n0",
      "target": "n1"
    },
    {
      "source": "n0",
      "target": "n2"
    },
    {
      "source": "n3",
      "target": "n4"
    },
    {
      "source": "n8",
      "target": "n9"
    },
    {
      "source": "n3",
      "target": "n5"
    },
    {
      "source": "n4",
      "target": "n6"
    },
    {
      "source": "n11",
      "target": "n12"
    },
    {
      "source": "n6",
      "target": "n8"
    },
    {
      "source": "n2",
      "target": "n3"
    },
    {
      "source": "n13",
      "target": "n14"
    }
  ]
}