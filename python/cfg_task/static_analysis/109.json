{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "def logical_left_shift(number: int, shift_amount: int) -> str:\n    \"\"\"\n    Take in 2 positive integers.\n    'number' is the integer to be logically left shifted 'shift_amount' times.\n    i.e. (number << shift_amount)\n    Return the shifted binary representation.\n\n    >>> logical_left_shift(0, 1)\n    '0b00'\n    >>> logical_left_shift(1, 1)\n    '0b10'\n    >>> logical_left_shift(1, 5)\n    '0b100000'\n    >>> logical_left_shift(17, 2)\n    '0b1000100'\n    >>> logical_left_shift(1983, 4)\n    '0b111101111110000'\n    >>> logical_left_shift(1, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: both inputs must be positive integers\n    \"\"\"\n    if number < 0 or shift_amount < 0:\n        raise ValueError('both inputs must be positive integers')\n    binary_number = str(bin(number))\n    binary_number += '0' * shift_amount\n    return binary_number",
        "\"\\n    Take in 2 positive integers.\\n    'number' is the integer to be logically left shifted 'shift_amount' times.\\n    i.e. (number << shift_amount)\\n    Return the shifted binary representation.\\n\\n    >>> logical_left_shift(0, 1)\\n    '0b00'\\n    >>> logical_left_shift(1, 1)\\n    '0b10'\\n    >>> logical_left_shift(1, 5)\\n    '0b100000'\\n    >>> logical_left_shift(17, 2)\\n    '0b1000100'\\n    >>> logical_left_shift(1983, 4)\\n    '0b111101111110000'\\n    >>> logical_left_shift(1, -1)\\n    Traceback (most recent call last):\\n        ...\\n    ValueError: both inputs must be positive integers\\n    \"",
        "number < 0 or shift_amount < 0"
      ],
      "code": "def logical_left_shift(number: int, shift_amount: int) -> str:\n    \"\"\"\n    Take in 2 positive integers.\n    'number' is the integer to be logically left shifted 'shift_amount' times.\n    i.e. (number << shift_amount)\n    Return the shifted binary representation.\n\n    >>> logical_left_shift(0, 1)\n    '0b00'\n    >>> logical_left_shift(1, 1)\n    '0b10'\n    >>> logical_left_shift(1, 5)\n    '0b100000'\n    >>> logical_left_shift(17, 2)\n    '0b1000100'\n    >>> logical_left_shift(1983, 4)\n    '0b111101111110000'\n    >>> logical_left_shift(1, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: both inputs must be positive integers\n    \"\"\"\n    if number < 0 or shift_amount < 0:\n        raise ValueError('both inputs must be positive integers')\n    binary_number = str(bin(number))\n    binary_number += '0' * shift_amount\n    return binary_number\n\"\\n    Take in 2 positive integers.\\n    'number' is the integer to be logically left shifted 'shift_amount' times.\\n    i.e. (number << shift_amount)\\n    Return the shifted binary representation.\\n\\n    >>> logical_left_shift(0, 1)\\n    '0b00'\\n    >>> logical_left_shift(1, 1)\\n    '0b10'\\n    >>> logical_left_shift(1, 5)\\n    '0b100000'\\n    >>> logical_left_shift(17, 2)\\n    '0b1000100'\\n    >>> logical_left_shift(1983, 4)\\n    '0b111101111110000'\\n    >>> logical_left_shift(1, -1)\\n    Traceback (most recent call last):\\n        ...\\n    ValueError: both inputs must be positive integers\\n    \"\nnumber < 0 or shift_amount < 0"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "raise ValueError('both inputs must be positive integers')"
      ],
      "code": "raise ValueError('both inputs must be positive integers')"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [
        "binary_number = str(bin(number))",
        "binary_number += '0' * shift_amount",
        "return binary_number"
      ],
      "code": "binary_number = str(bin(number))\nbinary_number += '0' * shift_amount\nreturn binary_number"
    },
    {
      "id": "n4",
      "type": "block",
      "statements": [
        "def logical_right_shift(number: int, shift_amount: int) -> str:\n    \"\"\"\n    Take in positive 2 integers.\n    'number' is the integer to be logically right shifted 'shift_amount' times.\n    i.e. (number >>> shift_amount)\n    Return the shifted binary representation.\n\n    >>> logical_right_shift(0, 1)\n    '0b0'\n    >>> logical_right_shift(1, 1)\n    '0b0'\n    >>> logical_right_shift(1, 5)\n    '0b0'\n    >>> logical_right_shift(17, 2)\n    '0b100'\n    >>> logical_right_shift(1983, 4)\n    '0b1111011'\n    >>> logical_right_shift(1, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: both inputs must be positive integers\n    \"\"\"\n    if number < 0 or shift_amount < 0:\n        raise ValueError('both inputs must be positive integers')\n    binary_number = str(bin(number))[2:]\n    if shift_amount >= len(binary_number):\n        return '0b0'\n    shifted_binary_number = binary_number[:len(binary_number) - shift_amount]\n    return '0b' + shifted_binary_number",
        "\"\\n    Take in positive 2 integers.\\n    'number' is the integer to be logically right shifted 'shift_amount' times.\\n    i.e. (number >>> shift_amount)\\n    Return the shifted binary representation.\\n\\n    >>> logical_right_shift(0, 1)\\n    '0b0'\\n    >>> logical_right_shift(1, 1)\\n    '0b0'\\n    >>> logical_right_shift(1, 5)\\n    '0b0'\\n    >>> logical_right_shift(17, 2)\\n    '0b100'\\n    >>> logical_right_shift(1983, 4)\\n    '0b1111011'\\n    >>> logical_right_shift(1, -1)\\n    Traceback (most recent call last):\\n        ...\\n    ValueError: both inputs must be positive integers\\n    \"",
        "number < 0 or shift_amount < 0"
      ],
      "code": "def logical_right_shift(number: int, shift_amount: int) -> str:\n    \"\"\"\n    Take in positive 2 integers.\n    'number' is the integer to be logically right shifted 'shift_amount' times.\n    i.e. (number >>> shift_amount)\n    Return the shifted binary representation.\n\n    >>> logical_right_shift(0, 1)\n    '0b0'\n    >>> logical_right_shift(1, 1)\n    '0b0'\n    >>> logical_right_shift(1, 5)\n    '0b0'\n    >>> logical_right_shift(17, 2)\n    '0b100'\n    >>> logical_right_shift(1983, 4)\n    '0b1111011'\n    >>> logical_right_shift(1, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: both inputs must be positive integers\n    \"\"\"\n    if number < 0 or shift_amount < 0:\n        raise ValueError('both inputs must be positive integers')\n    binary_number = str(bin(number))[2:]\n    if shift_amount >= len(binary_number):\n        return '0b0'\n    shifted_binary_number = binary_number[:len(binary_number) - shift_amount]\n    return '0b' + shifted_binary_number\n\"\\n    Take in positive 2 integers.\\n    'number' is the integer to be logically right shifted 'shift_amount' times.\\n    i.e. (number >>> shift_amount)\\n    Return the shifted binary representation.\\n\\n    >>> logical_right_shift(0, 1)\\n    '0b0'\\n    >>> logical_right_shift(1, 1)\\n    '0b0'\\n    >>> logical_right_shift(1, 5)\\n    '0b0'\\n    >>> logical_right_shift(17, 2)\\n    '0b100'\\n    >>> logical_right_shift(1983, 4)\\n    '0b1111011'\\n    >>> logical_right_shift(1, -1)\\n    Traceback (most recent call last):\\n        ...\\n    ValueError: both inputs must be positive integers\\n    \"\nnumber < 0 or shift_amount < 0"
    },
    {
      "id": "n5",
      "type": "block",
      "statements": [
        "raise ValueError('both inputs must be positive integers')"
      ],
      "code": "raise ValueError('both inputs must be positive integers')"
    },
    {
      "id": "n6",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n7",
      "type": "block",
      "statements": [
        "binary_number = str(bin(number))[2:]",
        "shift_amount GtE len(binary_number)"
      ],
      "code": "binary_number = str(bin(number))[2:]\nshift_amount GtE len(binary_number)"
    },
    {
      "id": "n8",
      "type": "block",
      "statements": [
        "return '0b0'"
      ],
      "code": "return '0b0'"
    },
    {
      "id": "n9",
      "type": "block",
      "statements": [],
      "code": "\nshifted_binary_number = binary_number[:len(binary_number) - shift_amount]\nreturn '0b' + shifted_binary_number"
    },
    {
      "id": "n10",
      "type": "block",
      "statements": [
        "def arithmetic_right_shift(number: int, shift_amount: int) -> str:\n    \"\"\"\n    Take in 2 integers.\n    'number' is the integer to be arithmetically right shifted 'shift_amount' times.\n    i.e. (number >> shift_amount)\n    Return the shifted binary representation.\n\n    >>> arithmetic_right_shift(0, 1)\n    '0b00'\n    >>> arithmetic_right_shift(1, 1)\n    '0b00'\n    >>> arithmetic_right_shift(-1, 1)\n    '0b11'\n    >>> arithmetic_right_shift(17, 2)\n    '0b000100'\n    >>> arithmetic_right_shift(-17, 2)\n    '0b111011'\n    >>> arithmetic_right_shift(-1983, 4)\n    '0b111110000100'\n    \"\"\"\n    if number >= 0:\n        binary_number = '0' + str(bin(number)).strip('-')[2:]\n    else:\n        binary_number_length = len(bin(number)[3:])\n        binary_number = bin(abs(number) - (1 << binary_number_length))[3:]\n        binary_number = '1' + '0' * (binary_number_length - len(binary_number)) + binary_number\n    if shift_amount >= len(binary_number):\n        return '0b' + binary_number[0] * len(binary_number)\n    return '0b' + binary_number[0] * shift_amount + binary_number[:len(binary_number) - shift_amount]",
        "\"\\n    Take in 2 integers.\\n    'number' is the integer to be arithmetically right shifted 'shift_amount' times.\\n    i.e. (number >> shift_amount)\\n    Return the shifted binary representation.\\n\\n    >>> arithmetic_right_shift(0, 1)\\n    '0b00'\\n    >>> arithmetic_right_shift(1, 1)\\n    '0b00'\\n    >>> arithmetic_right_shift(-1, 1)\\n    '0b11'\\n    >>> arithmetic_right_shift(17, 2)\\n    '0b000100'\\n    >>> arithmetic_right_shift(-17, 2)\\n    '0b111011'\\n    >>> arithmetic_right_shift(-1983, 4)\\n    '0b111110000100'\\n    \"",
        "number GtE 0"
      ],
      "code": "def arithmetic_right_shift(number: int, shift_amount: int) -> str:\n    \"\"\"\n    Take in 2 integers.\n    'number' is the integer to be arithmetically right shifted 'shift_amount' times.\n    i.e. (number >> shift_amount)\n    Return the shifted binary representation.\n\n    >>> arithmetic_right_shift(0, 1)\n    '0b00'\n    >>> arithmetic_right_shift(1, 1)\n    '0b00'\n    >>> arithmetic_right_shift(-1, 1)\n    '0b11'\n    >>> arithmetic_right_shift(17, 2)\n    '0b000100'\n    >>> arithmetic_right_shift(-17, 2)\n    '0b111011'\n    >>> arithmetic_right_shift(-1983, 4)\n    '0b111110000100'\n    \"\"\"\n    if number >= 0:\n        binary_number = '0' + str(bin(number)).strip('-')[2:]\n    else:\n        binary_number_length = len(bin(number)[3:])\n        binary_number = bin(abs(number) - (1 << binary_number_length))[3:]\n        binary_number = '1' + '0' * (binary_number_length - len(binary_number)) + binary_number\n    if shift_amount >= len(binary_number):\n        return '0b' + binary_number[0] * len(binary_number)\n    return '0b' + binary_number[0] * shift_amount + binary_number[:len(binary_number) - shift_amount]\n\"\\n    Take in 2 integers.\\n    'number' is the integer to be arithmetically right shifted 'shift_amount' times.\\n    i.e. (number >> shift_amount)\\n    Return the shifted binary representation.\\n\\n    >>> arithmetic_right_shift(0, 1)\\n    '0b00'\\n    >>> arithmetic_right_shift(1, 1)\\n    '0b00'\\n    >>> arithmetic_right_shift(-1, 1)\\n    '0b11'\\n    >>> arithmetic_right_shift(17, 2)\\n    '0b000100'\\n    >>> arithmetic_right_shift(-17, 2)\\n    '0b111011'\\n    >>> arithmetic_right_shift(-1983, 4)\\n    '0b111110000100'\\n    \"\nnumber GtE 0"
    },
    {
      "id": "n11",
      "type": "block",
      "statements": [
        "binary_number = '0' + str(bin(number)).strip('-')[2:]"
      ],
      "code": "binary_number = '0' + str(bin(number)).strip('-')[2:]"
    },
    {
      "id": "n12",
      "type": "block",
      "statements": [
        "binary_number_length = len(bin(number)[3:])",
        "binary_number = bin(abs(number) - (1 << binary_number_length))[3:]",
        "binary_number = '1' + '0' * (binary_number_length - len(binary_number)) + binary_number"
      ],
      "code": "binary_number_length = len(bin(number)[3:])\nbinary_number = bin(abs(number) - (1 << binary_number_length))[3:]\nbinary_number = '1' + '0' * (binary_number_length - len(binary_number)) + binary_number"
    },
    {
      "id": "n13",
      "type": "block",
      "statements": [
        "shift_amount GtE len(binary_number)"
      ],
      "code": "shift_amount GtE len(binary_number)"
    },
    {
      "id": "n14",
      "type": "block",
      "statements": [
        "return '0b' + binary_number[0] * len(binary_number)"
      ],
      "code": "return '0b' + binary_number[0] * len(binary_number)"
    },
    {
      "id": "n15",
      "type": "block",
      "statements": [],
      "code": "\nreturn '0b' + binary_number[0] * shift_amount + binary_number[:len(binary_number) - shift_amount]"
    },
    {
      "id": "n16",
      "type": "block",
      "statements": [
        "__name__ Eq '__main__'"
      ],
      "code": "__name__ Eq '__main__'"
    },
    {
      "id": "n17",
      "type": "block",
      "statements": [
        "import doctest",
        "doctest.testmod()"
      ],
      "code": "import doctest\ndoctest.testmod()"
    },
    {
      "id": "n18",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n19",
      "type": "block",
      "statements": [],
      "code": ""
    }
  ],
  "edges": [
    {
      "source": "n6",
      "target": "n7"
    },
    {
      "source": "n0",
      "target": "n1"
    },
    {
      "source": "n10",
      "target": "n11"
    },
    {
      "source": "n17",
      "target": "n19"
    },
    {
      "source": "n2",
      "target": "n3"
    },
    {
      "source": "n13",
      "target": "n14"
    },
    {
      "source": "n16",
      "target": "n17"
    },
    {
      "source": "n13",
      "target": "n15"
    },
    {
      "source": "n16",
      "target": "n18"
    },
    {
      "source": "n4",
      "target": "n5"
    },
    {
      "source": "n4",
      "target": "n6"
    },
    {
      "source": "n12",
      "target": "n13"
    },
    {
      "source": "n7",
      "target": "n8"
    },
    {
      "source": "n10",
      "target": "n12"
    },
    {
      "source": "n18",
      "target": "n19"
    },
    {
      "source": "n7",
      "target": "n9"
    },
    {
      "source": "n1",
      "target": "n3"
    },
    {
      "source": "n5",
      "target": "n7"
    },
    {
      "source": "n11",
      "target": "n13"
    },
    {
      "source": "n0",
      "target": "n2"
    }
  ]
}