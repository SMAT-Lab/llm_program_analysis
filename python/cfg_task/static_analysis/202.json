{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "import fastapi",
        "from .config import Settings",
        "from .middleware import auth_middleware",
        "from .models import DEFAULT_USER_ID, User",
        "def requires_user(payload: dict=fastapi.Depends(auth_middleware)) -> User:\n    return verify_user(payload, admin_only=False)",
        "return verify_user(payload, admin_only=False)"
      ],
      "code": "import fastapi\nfrom .config import Settings\nfrom .middleware import auth_middleware\nfrom .models import DEFAULT_USER_ID, User\ndef requires_user(payload: dict=fastapi.Depends(auth_middleware)) -> User:\n    return verify_user(payload, admin_only=False)\nreturn verify_user(payload, admin_only=False)"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "def requires_admin_user(payload: dict=fastapi.Depends(auth_middleware)) -> User:\n    return verify_user(payload, admin_only=True)",
        "return verify_user(payload, admin_only=True)"
      ],
      "code": "def requires_admin_user(payload: dict=fastapi.Depends(auth_middleware)) -> User:\n    return verify_user(payload, admin_only=True)\nreturn verify_user(payload, admin_only=True)"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [
        "def verify_user(payload: dict | None, admin_only: bool) -> User:\n    if not payload:\n        if Settings.ENABLE_AUTH:\n            raise fastapi.HTTPException(status_code=401, detail='Authorization header is missing')\n        payload = {'sub': DEFAULT_USER_ID, 'role': 'admin'}\n    user_id = payload.get('sub')\n    if not user_id:\n        raise fastapi.HTTPException(status_code=401, detail='User ID not found in token')\n    if admin_only and payload['role'] != 'admin':\n        raise fastapi.HTTPException(status_code=403, detail='Admin access required')\n    return User.from_payload(payload)",
        "not payload"
      ],
      "code": "def verify_user(payload: dict | None, admin_only: bool) -> User:\n    if not payload:\n        if Settings.ENABLE_AUTH:\n            raise fastapi.HTTPException(status_code=401, detail='Authorization header is missing')\n        payload = {'sub': DEFAULT_USER_ID, 'role': 'admin'}\n    user_id = payload.get('sub')\n    if not user_id:\n        raise fastapi.HTTPException(status_code=401, detail='User ID not found in token')\n    if admin_only and payload['role'] != 'admin':\n        raise fastapi.HTTPException(status_code=403, detail='Admin access required')\n    return User.from_payload(payload)\nnot payload"
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [
        "Settings.ENABLE_AUTH"
      ],
      "code": "Settings.ENABLE_AUTH"
    },
    {
      "id": "n4",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n5",
      "type": "block",
      "statements": [
        "user_id = payload.get('sub')",
        "not user_id"
      ],
      "code": "user_id = payload.get('sub')\nnot user_id"
    },
    {
      "id": "n6",
      "type": "block",
      "statements": [
        "raise fastapi.HTTPException(status_code=401, detail='Authorization header is missing')"
      ],
      "code": "raise fastapi.HTTPException(status_code=401, detail='Authorization header is missing')"
    },
    {
      "id": "n7",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n8",
      "type": "block",
      "statements": [
        "payload = {'sub': DEFAULT_USER_ID, 'role': 'admin'}"
      ],
      "code": "payload = {'sub': DEFAULT_USER_ID, 'role': 'admin'}"
    },
    {
      "id": "n9",
      "type": "block",
      "statements": [
        "raise fastapi.HTTPException(status_code=401, detail='User ID not found in token')"
      ],
      "code": "raise fastapi.HTTPException(status_code=401, detail='User ID not found in token')"
    },
    {
      "id": "n10",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n11",
      "type": "block",
      "statements": [
        "admin_only and payload['role'] != 'admin'"
      ],
      "code": "admin_only and payload['role'] != 'admin'"
    },
    {
      "id": "n12",
      "type": "block",
      "statements": [
        "raise fastapi.HTTPException(status_code=403, detail='Admin access required')"
      ],
      "code": "raise fastapi.HTTPException(status_code=403, detail='Admin access required')"
    },
    {
      "id": "n13",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n14",
      "type": "block",
      "statements": [
        "return User.from_payload(payload)"
      ],
      "code": "return User.from_payload(payload)"
    },
    {
      "id": "n15",
      "type": "block",
      "statements": [
        "def get_user_id(payload: dict=fastapi.Depends(auth_middleware)) -> str:\n    user_id = payload.get('sub')\n    if not user_id:\n        raise fastapi.HTTPException(status_code=401, detail='User ID not found in token')\n    return user_id",
        "user_id = payload.get('sub')",
        "not user_id"
      ],
      "code": "def get_user_id(payload: dict=fastapi.Depends(auth_middleware)) -> str:\n    user_id = payload.get('sub')\n    if not user_id:\n        raise fastapi.HTTPException(status_code=401, detail='User ID not found in token')\n    return user_id\nuser_id = payload.get('sub')\nnot user_id"
    },
    {
      "id": "n16",
      "type": "block",
      "statements": [
        "raise fastapi.HTTPException(status_code=401, detail='User ID not found in token')"
      ],
      "code": "raise fastapi.HTTPException(status_code=401, detail='User ID not found in token')"
    },
    {
      "id": "n17",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n18",
      "type": "block",
      "statements": [
        "return user_id"
      ],
      "code": "return user_id"
    }
  ],
  "edges": [
    {
      "source": "n5",
      "target": "n9"
    },
    {
      "source": "n17",
      "target": "n18"
    },
    {
      "source": "n8",
      "target": "n5"
    },
    {
      "source": "n10",
      "target": "n11"
    },
    {
      "source": "n2",
      "target": "n3"
    },
    {
      "source": "n13",
      "target": "n14"
    },
    {
      "source": "n11",
      "target": "n13"
    },
    {
      "source": "n2",
      "target": "n4"
    },
    {
      "source": "n16",
      "target": "n18"
    },
    {
      "source": "n4",
      "target": "n5"
    },
    {
      "source": "n7",
      "target": "n8"
    },
    {
      "source": "n5",
      "target": "n10"
    },
    {
      "source": "n15",
      "target": "n16"
    },
    {
      "source": "n12",
      "target": "n14"
    },
    {
      "source": "n9",
      "target": "n11"
    },
    {
      "source": "n11",
      "target": "n12"
    },
    {
      "source": "n3",
      "target": "n6"
    },
    {
      "source": "n6",
      "target": "n8"
    },
    {
      "source": "n3",
      "target": "n7"
    },
    {
      "source": "n15",
      "target": "n17"
    }
  ]
}