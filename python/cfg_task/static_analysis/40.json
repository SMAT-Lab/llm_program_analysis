{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "'\\nWord Break Problem is a well-known problem in computer science.\\nGiven a string and a dictionary of words, the task is to determine if\\nthe string can be segmented into a sequence of one or more dictionary words.\\n\\nWikipedia: https://en.wikipedia.org/wiki/Word_break_problem\\n'",
        "def backtrack(input_string: str, word_dict: set[str], start: int) -> bool:\n    \"\"\"\n    Helper function that uses backtracking to determine if a valid\n    word segmentation is possible starting from index 'start'.\n\n    Parameters:\n    input_string (str): The input string to be segmented.\n    word_dict (set[str]): A set of valid dictionary words.\n    start (int): The starting index of the substring to be checked.\n\n    Returns:\n    bool: True if a valid segmentation is possible, otherwise False.\n\n    Example:\n    >>> backtrack(\"leetcode\", {\"leet\", \"code\"}, 0)\n    True\n\n    >>> backtrack(\"applepenapple\", {\"apple\", \"pen\"}, 0)\n    True\n\n    >>> backtrack(\"catsandog\", {\"cats\", \"dog\", \"sand\", \"and\", \"cat\"}, 0)\n    False\n    \"\"\"\n    if start == len(input_string):\n        return True\n    for end in range(start + 1, len(input_string) + 1):\n        if input_string[start:end] in word_dict and backtrack(input_string, word_dict, end):\n            return True\n    return False",
        "'\\n    Helper function that uses backtracking to determine if a valid\\n    word segmentation is possible starting from index \\'start\\'.\\n\\n    Parameters:\\n    input_string (str): The input string to be segmented.\\n    word_dict (set[str]): A set of valid dictionary words.\\n    start (int): The starting index of the substring to be checked.\\n\\n    Returns:\\n    bool: True if a valid segmentation is possible, otherwise False.\\n\\n    Example:\\n    >>> backtrack(\"leetcode\", {\"leet\", \"code\"}, 0)\\n    True\\n\\n    >>> backtrack(\"applepenapple\", {\"apple\", \"pen\"}, 0)\\n    True\\n\\n    >>> backtrack(\"catsandog\", {\"cats\", \"dog\", \"sand\", \"and\", \"cat\"}, 0)\\n    False\\n    '",
        "start Eq len(input_string)"
      ],
      "code": "'\\nWord Break Problem is a well-known problem in computer science.\\nGiven a string and a dictionary of words, the task is to determine if\\nthe string can be segmented into a sequence of one or more dictionary words.\\n\\nWikipedia: https://en.wikipedia.org/wiki/Word_break_problem\\n'\ndef backtrack(input_string: str, word_dict: set[str], start: int) -> bool:\n    \"\"\"\n    Helper function that uses backtracking to determine if a valid\n    word segmentation is possible starting from index 'start'.\n\n    Parameters:\n    input_string (str): The input string to be segmented.\n    word_dict (set[str]): A set of valid dictionary words.\n    start (int): The starting index of the substring to be checked.\n\n    Returns:\n    bool: True if a valid segmentation is possible, otherwise False.\n\n    Example:\n    >>> backtrack(\"leetcode\", {\"leet\", \"code\"}, 0)\n    True\n\n    >>> backtrack(\"applepenapple\", {\"apple\", \"pen\"}, 0)\n    True\n\n    >>> backtrack(\"catsandog\", {\"cats\", \"dog\", \"sand\", \"and\", \"cat\"}, 0)\n    False\n    \"\"\"\n    if start == len(input_string):\n        return True\n    for end in range(start + 1, len(input_string) + 1):\n        if input_string[start:end] in word_dict and backtrack(input_string, word_dict, end):\n            return True\n    return False\n'\\n    Helper function that uses backtracking to determine if a valid\\n    word segmentation is possible starting from index \\'start\\'.\\n\\n    Parameters:\\n    input_string (str): The input string to be segmented.\\n    word_dict (set[str]): A set of valid dictionary words.\\n    start (int): The starting index of the substring to be checked.\\n\\n    Returns:\\n    bool: True if a valid segmentation is possible, otherwise False.\\n\\n    Example:\\n    >>> backtrack(\"leetcode\", {\"leet\", \"code\"}, 0)\\n    True\\n\\n    >>> backtrack(\"applepenapple\", {\"apple\", \"pen\"}, 0)\\n    True\\n\\n    >>> backtrack(\"catsandog\", {\"cats\", \"dog\", \"sand\", \"and\", \"cat\"}, 0)\\n    False\\n    '\nstart Eq len(input_string)"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "return True"
      ],
      "code": "return True"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [],
      "code": "\n"
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [
        "end",
        "range(start Add 1, len(input_string) Add 1)"
      ],
      "code": "end\nrange(start Add 1, len(input_string) Add 1)"
    },
    {
      "id": "n4",
      "type": "block",
      "statements": [
        "input_string[start:end] in word_dict and backtrack(input_string, word_dict, end)"
      ],
      "code": "input_string[start:end] in word_dict and backtrack(input_string, word_dict, end)"
    },
    {
      "id": "n5",
      "type": "block",
      "statements": [
        "return False"
      ],
      "code": "return False"
    },
    {
      "id": "n6",
      "type": "block",
      "statements": [
        "return True"
      ],
      "code": "return True"
    },
    {
      "id": "n7",
      "type": "block",
      "statements": [],
      "code": "\n"
    },
    {
      "id": "n8",
      "type": "block",
      "statements": [
        "def word_break(input_string: str, word_dict: set[str]) -> bool:\n    \"\"\"\n    Determines if the input string can be segmented into a sequence of\n    valid dictionary words using backtracking.\n\n    Parameters:\n    input_string (str): The input string to segment.\n    word_dict (set[str]): The set of valid words.\n\n    Returns:\n    bool: True if the string can be segmented into valid words, otherwise False.\n\n    Example:\n    >>> word_break(\"leetcode\", {\"leet\", \"code\"})\n    True\n\n    >>> word_break(\"applepenapple\", {\"apple\", \"pen\"})\n    True\n\n    >>> word_break(\"catsandog\", {\"cats\", \"dog\", \"sand\", \"and\", \"cat\"})\n    False\n    \"\"\"\n    return backtrack(input_string, word_dict, 0)",
        "'\\n    Determines if the input string can be segmented into a sequence of\\n    valid dictionary words using backtracking.\\n\\n    Parameters:\\n    input_string (str): The input string to segment.\\n    word_dict (set[str]): The set of valid words.\\n\\n    Returns:\\n    bool: True if the string can be segmented into valid words, otherwise False.\\n\\n    Example:\\n    >>> word_break(\"leetcode\", {\"leet\", \"code\"})\\n    True\\n\\n    >>> word_break(\"applepenapple\", {\"apple\", \"pen\"})\\n    True\\n\\n    >>> word_break(\"catsandog\", {\"cats\", \"dog\", \"sand\", \"and\", \"cat\"})\\n    False\\n    '",
        "return backtrack(input_string, word_dict, 0)"
      ],
      "code": "def word_break(input_string: str, word_dict: set[str]) -> bool:\n    \"\"\"\n    Determines if the input string can be segmented into a sequence of\n    valid dictionary words using backtracking.\n\n    Parameters:\n    input_string (str): The input string to segment.\n    word_dict (set[str]): The set of valid words.\n\n    Returns:\n    bool: True if the string can be segmented into valid words, otherwise False.\n\n    Example:\n    >>> word_break(\"leetcode\", {\"leet\", \"code\"})\n    True\n\n    >>> word_break(\"applepenapple\", {\"apple\", \"pen\"})\n    True\n\n    >>> word_break(\"catsandog\", {\"cats\", \"dog\", \"sand\", \"and\", \"cat\"})\n    False\n    \"\"\"\n    return backtrack(input_string, word_dict, 0)\n'\\n    Determines if the input string can be segmented into a sequence of\\n    valid dictionary words using backtracking.\\n\\n    Parameters:\\n    input_string (str): The input string to segment.\\n    word_dict (set[str]): The set of valid words.\\n\\n    Returns:\\n    bool: True if the string can be segmented into valid words, otherwise False.\\n\\n    Example:\\n    >>> word_break(\"leetcode\", {\"leet\", \"code\"})\\n    True\\n\\n    >>> word_break(\"applepenapple\", {\"apple\", \"pen\"})\\n    True\\n\\n    >>> word_break(\"catsandog\", {\"cats\", \"dog\", \"sand\", \"and\", \"cat\"})\\n    False\\n    '\nreturn backtrack(input_string, word_dict, 0)"
    }
  ],
  "edges": [
    {
      "source": "n0",
      "target": "n2"
    },
    {
      "source": "n0",
      "target": "n1"
    },
    {
      "source": "n4",
      "target": "n7"
    },
    {
      "source": "n3",
      "target": "n4"
    },
    {
      "source": "n3",
      "target": "n5"
    },
    {
      "source": "n7",
      "target": "n3"
    },
    {
      "source": "n4",
      "target": "n6"
    },
    {
      "source": "n2",
      "target": "n3"
    }
  ]
}