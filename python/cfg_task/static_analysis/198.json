{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "from backend.util.settings import AppEnvironment, BehaveAs, Settings",
        "settings = Settings()",
        "def configure_logging():\n    import logging\n    import autogpt_libs.logging.config\n    if settings.config.behave_as == BehaveAs.LOCAL or settings.config.app_env == AppEnvironment.LOCAL:\n        autogpt_libs.logging.config.configure_logging(force_cloud_logging=False)\n    else:\n        autogpt_libs.logging.config.configure_logging(force_cloud_logging=True)\n    logging.getLogger('httpx').setLevel(logging.WARNING)",
        "import logging",
        "import autogpt_libs.logging.config",
        "settings.config.behave_as == BehaveAs.LOCAL or settings.config.app_env == AppEnvironment.LOCAL"
      ],
      "code": "from backend.util.settings import AppEnvironment, BehaveAs, Settings\nsettings = Settings()\ndef configure_logging():\n    import logging\n    import autogpt_libs.logging.config\n    if settings.config.behave_as == BehaveAs.LOCAL or settings.config.app_env == AppEnvironment.LOCAL:\n        autogpt_libs.logging.config.configure_logging(force_cloud_logging=False)\n    else:\n        autogpt_libs.logging.config.configure_logging(force_cloud_logging=True)\n    logging.getLogger('httpx').setLevel(logging.WARNING)\nimport logging\nimport autogpt_libs.logging.config\nsettings.config.behave_as == BehaveAs.LOCAL or settings.config.app_env == AppEnvironment.LOCAL"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "autogpt_libs.logging.config.configure_logging()"
      ],
      "code": "autogpt_libs.logging.config.configure_logging()"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [
        "autogpt_libs.logging.config.configure_logging()"
      ],
      "code": "autogpt_libs.logging.config.configure_logging()"
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [
        "logging.getLogger('httpx').setLevel(logging.WARNING)"
      ],
      "code": "logging.getLogger('httpx').setLevel(logging.WARNING)"
    }
  ],
  "edges": [
    {
      "source": "n0",
      "target": "n2"
    },
    {
      "source": "n0",
      "target": "n1"
    },
    {
      "source": "n2",
      "target": "n3"
    },
    {
      "source": "n1",
      "target": "n3"
    }
  ]
}