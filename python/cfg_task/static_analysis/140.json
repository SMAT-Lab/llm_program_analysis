{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "import json",
        "from typing import Any, Type, TypeVar, cast, get_args, get_origin",
        "class ConversionError(ValueError):\n    pass",
        "pass",
        "def __convert_list(value: Any) -> list:\n    if isinstance(value, (list, tuple, set)):\n        return list(value)\n    elif isinstance(value, dict):\n        return list(value.items())\n    elif isinstance(value, str):\n        value = value.strip()\n        if value.startswith('[') and value.endswith(']'):\n            try:\n                return json.loads(value)\n            except json.JSONDecodeError:\n                return [value]\n        else:\n            return [value]\n    else:\n        return [value]",
        "isinstance(value, (list, tuple, set))"
      ],
      "code": "import json\nfrom typing import Any, Type, TypeVar, cast, get_args, get_origin\nclass ConversionError(ValueError):\n    pass\npass\ndef __convert_list(value: Any) -> list:\n    if isinstance(value, (list, tuple, set)):\n        return list(value)\n    elif isinstance(value, dict):\n        return list(value.items())\n    elif isinstance(value, str):\n        value = value.strip()\n        if value.startswith('[') and value.endswith(']'):\n            try:\n                return json.loads(value)\n            except json.JSONDecodeError:\n                return [value]\n        else:\n            return [value]\n    else:\n        return [value]\nisinstance(value, (list, tuple, set))"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "return list(value)"
      ],
      "code": "return list(value)"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [
        "isinstance(value, dict)"
      ],
      "code": "isinstance(value, dict)"
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [
        "def __convert_dict(value: Any) -> dict:\n    if isinstance(value, str):\n        try:\n            result = json.loads(value)\n            if isinstance(result, dict):\n                return result\n            else:\n                return {'value': result}\n        except json.JSONDecodeError:\n            return {'value': value}\n    elif isinstance(value, list):\n        return {i: value[i] for i in range(len(value))}\n    elif isinstance(value, tuple):\n        return {i: value[i] for i in range(len(value))}\n    elif isinstance(value, dict):\n        return value\n    else:\n        return {'value': value}",
        "isinstance(value, str)"
      ],
      "code": "def __convert_dict(value: Any) -> dict:\n    if isinstance(value, str):\n        try:\n            result = json.loads(value)\n            if isinstance(result, dict):\n                return result\n            else:\n                return {'value': result}\n        except json.JSONDecodeError:\n            return {'value': value}\n    elif isinstance(value, list):\n        return {i: value[i] for i in range(len(value))}\n    elif isinstance(value, tuple):\n        return {i: value[i] for i in range(len(value))}\n    elif isinstance(value, dict):\n        return value\n    else:\n        return {'value': value}\nisinstance(value, str)"
    },
    {
      "id": "n4",
      "type": "block",
      "statements": [
        "return list(value.items())"
      ],
      "code": "return list(value.items())"
    },
    {
      "id": "n5",
      "type": "block",
      "statements": [
        "isinstance(value, str)"
      ],
      "code": "isinstance(value, str)"
    },
    {
      "id": "n6",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n7",
      "type": "block",
      "statements": [
        "value = value.strip()",
        "value.startswith('[') and value.endswith(']')"
      ],
      "code": "value = value.strip()\nvalue.startswith('[') and value.endswith(']')"
    },
    {
      "id": "n8",
      "type": "block",
      "statements": [
        "return [value]"
      ],
      "code": "return [value]"
    },
    {
      "id": "n9",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n10",
      "type": "block",
      "statements": [
        "try:\n    return json.loads(value)\nexcept json.JSONDecodeError:\n    return [value]",
        "return json.loads(value)"
      ],
      "code": "try:\n    return json.loads(value)\nexcept json.JSONDecodeError:\n    return [value]\nreturn json.loads(value)"
    },
    {
      "id": "n11",
      "type": "block",
      "statements": [
        "return [value]"
      ],
      "code": "return [value]"
    },
    {
      "id": "n12",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n13",
      "type": "block",
      "statements": [
        "return [value]"
      ],
      "code": "return [value]"
    },
    {
      "id": "n14",
      "type": "block",
      "statements": [
        "try:\n    result = json.loads(value)\n    if isinstance(result, dict):\n        return result\n    else:\n        return {'value': result}\nexcept json.JSONDecodeError:\n    return {'value': value}",
        "result = json.loads(value)",
        "isinstance(result, dict)"
      ],
      "code": "try:\n    result = json.loads(value)\n    if isinstance(result, dict):\n        return result\n    else:\n        return {'value': result}\nexcept json.JSONDecodeError:\n    return {'value': value}\nresult = json.loads(value)\nisinstance(result, dict)"
    },
    {
      "id": "n15",
      "type": "block",
      "statements": [
        "isinstance(value, list)"
      ],
      "code": "isinstance(value, list)"
    },
    {
      "id": "n16",
      "type": "block",
      "statements": [
        "def __convert_tuple(value: Any) -> tuple:\n    if isinstance(value, (str, list, set)):\n        return tuple(value)\n    elif isinstance(value, dict):\n        return tuple(value.items())\n    elif isinstance(value, (int, float, bool)):\n        return (value,)\n    elif isinstance(value, tuple):\n        return value\n    else:\n        return (value,)",
        "isinstance(value, (str, list, set))"
      ],
      "code": "def __convert_tuple(value: Any) -> tuple:\n    if isinstance(value, (str, list, set)):\n        return tuple(value)\n    elif isinstance(value, dict):\n        return tuple(value.items())\n    elif isinstance(value, (int, float, bool)):\n        return (value,)\n    elif isinstance(value, tuple):\n        return value\n    else:\n        return (value,)\nisinstance(value, (str, list, set))"
    },
    {
      "id": "n17",
      "type": "block",
      "statements": [
        "return result"
      ],
      "code": "return result"
    },
    {
      "id": "n18",
      "type": "block",
      "statements": [
        "return {'value': result}"
      ],
      "code": "return {'value': result}"
    },
    {
      "id": "n19",
      "type": "block",
      "statements": [
        "return {'value': value}"
      ],
      "code": "return {'value': value}"
    },
    {
      "id": "n20",
      "type": "block",
      "statements": [
        "return {i: value[i] for i in range(len(value))}"
      ],
      "code": "return {i: value[i] for i in range(len(value))}"
    },
    {
      "id": "n21",
      "type": "block",
      "statements": [
        "isinstance(value, tuple)"
      ],
      "code": "isinstance(value, tuple)"
    },
    {
      "id": "n22",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n23",
      "type": "block",
      "statements": [
        "return {i: value[i] for i in range(len(value))}"
      ],
      "code": "return {i: value[i] for i in range(len(value))}"
    },
    {
      "id": "n24",
      "type": "block",
      "statements": [
        "isinstance(value, dict)"
      ],
      "code": "isinstance(value, dict)"
    },
    {
      "id": "n25",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n26",
      "type": "block",
      "statements": [
        "return value"
      ],
      "code": "return value"
    },
    {
      "id": "n27",
      "type": "block",
      "statements": [
        "return {'value': value}"
      ],
      "code": "return {'value': value}"
    },
    {
      "id": "n28",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n29",
      "type": "block",
      "statements": [
        "return tuple(value)"
      ],
      "code": "return tuple(value)"
    },
    {
      "id": "n30",
      "type": "block",
      "statements": [
        "isinstance(value, dict)"
      ],
      "code": "isinstance(value, dict)"
    },
    {
      "id": "n31",
      "type": "block",
      "statements": [
        "def __convert_set(value: Any) -> set:\n    if isinstance(value, (str, list, tuple)):\n        return set(value)\n    elif isinstance(value, dict):\n        return set(value.items())\n    elif isinstance(value, set):\n        return value\n    else:\n        return {value}",
        "isinstance(value, (str, list, tuple))"
      ],
      "code": "def __convert_set(value: Any) -> set:\n    if isinstance(value, (str, list, tuple)):\n        return set(value)\n    elif isinstance(value, dict):\n        return set(value.items())\n    elif isinstance(value, set):\n        return value\n    else:\n        return {value}\nisinstance(value, (str, list, tuple))"
    },
    {
      "id": "n32",
      "type": "block",
      "statements": [
        "return tuple(value.items())"
      ],
      "code": "return tuple(value.items())"
    },
    {
      "id": "n33",
      "type": "block",
      "statements": [
        "isinstance(value, (int, float, bool))"
      ],
      "code": "isinstance(value, (int, float, bool))"
    },
    {
      "id": "n34",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n35",
      "type": "block",
      "statements": [
        "return (value,)"
      ],
      "code": "return (value,)"
    },
    {
      "id": "n36",
      "type": "block",
      "statements": [
        "isinstance(value, tuple)"
      ],
      "code": "isinstance(value, tuple)"
    },
    {
      "id": "n37",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n38",
      "type": "block",
      "statements": [
        "return value"
      ],
      "code": "return value"
    },
    {
      "id": "n39",
      "type": "block",
      "statements": [
        "return (value,)"
      ],
      "code": "return (value,)"
    },
    {
      "id": "n40",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n41",
      "type": "block",
      "statements": [
        "return set(value)"
      ],
      "code": "return set(value)"
    },
    {
      "id": "n42",
      "type": "block",
      "statements": [
        "isinstance(value, dict)"
      ],
      "code": "isinstance(value, dict)"
    },
    {
      "id": "n43",
      "type": "block",
      "statements": [
        "def __convert_str(value: Any) -> str:\n    if isinstance(value, str):\n        return value\n    else:\n        return json.dumps(value)",
        "isinstance(value, str)"
      ],
      "code": "def __convert_str(value: Any) -> str:\n    if isinstance(value, str):\n        return value\n    else:\n        return json.dumps(value)\nisinstance(value, str)"
    },
    {
      "id": "n44",
      "type": "block",
      "statements": [
        "return set(value.items())"
      ],
      "code": "return set(value.items())"
    },
    {
      "id": "n45",
      "type": "block",
      "statements": [
        "isinstance(value, set)"
      ],
      "code": "isinstance(value, set)"
    },
    {
      "id": "n46",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n47",
      "type": "block",
      "statements": [
        "return value"
      ],
      "code": "return value"
    },
    {
      "id": "n48",
      "type": "block",
      "statements": [
        "return {value}"
      ],
      "code": "return {value}"
    },
    {
      "id": "n49",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n50",
      "type": "block",
      "statements": [
        "return value"
      ],
      "code": "return value"
    },
    {
      "id": "n51",
      "type": "block",
      "statements": [
        "return json.dumps(value)"
      ],
      "code": "return json.dumps(value)"
    },
    {
      "id": "n52",
      "type": "block",
      "statements": [
        "NUM = TypeVar('NUM', int, float)",
        "def __convert_num(value: Any, num_type: Type[NUM]) -> NUM:\n    if isinstance(value, (list, dict, tuple, set)):\n        return num_type(len(value))\n    elif isinstance(value, num_type):\n        return value\n    else:\n        try:\n            return num_type(float(value))\n        except (ValueError, TypeError):\n            return num_type(0)",
        "isinstance(value, (list, dict, tuple, set))"
      ],
      "code": "NUM = TypeVar('NUM', int, float)\ndef __convert_num(value: Any, num_type: Type[NUM]) -> NUM:\n    if isinstance(value, (list, dict, tuple, set)):\n        return num_type(len(value))\n    elif isinstance(value, num_type):\n        return value\n    else:\n        try:\n            return num_type(float(value))\n        except (ValueError, TypeError):\n            return num_type(0)\nisinstance(value, (list, dict, tuple, set))"
    },
    {
      "id": "n53",
      "type": "block",
      "statements": [
        "return num_type(len(value))"
      ],
      "code": "return num_type(len(value))"
    },
    {
      "id": "n54",
      "type": "block",
      "statements": [
        "isinstance(value, num_type)"
      ],
      "code": "isinstance(value, num_type)"
    },
    {
      "id": "n55",
      "type": "block",
      "statements": [
        "def __convert_bool(value: Any) -> bool:\n    if isinstance(value, bool):\n        return value\n    elif isinstance(value, str):\n        if value.lower() in ['true', '1']:\n            return True\n        else:\n            return False\n    else:\n        return bool(value)",
        "isinstance(value, bool)"
      ],
      "code": "def __convert_bool(value: Any) -> bool:\n    if isinstance(value, bool):\n        return value\n    elif isinstance(value, str):\n        if value.lower() in ['true', '1']:\n            return True\n        else:\n            return False\n    else:\n        return bool(value)\nisinstance(value, bool)"
    },
    {
      "id": "n56",
      "type": "block",
      "statements": [
        "return value"
      ],
      "code": "return value"
    },
    {
      "id": "n57",
      "type": "block",
      "statements": [
        "try:\n    return num_type(float(value))\nexcept (ValueError, TypeError):\n    return num_type(0)",
        "return num_type(float(value))"
      ],
      "code": "try:\n    return num_type(float(value))\nexcept (ValueError, TypeError):\n    return num_type(0)\nreturn num_type(float(value))"
    },
    {
      "id": "n58",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n59",
      "type": "block",
      "statements": [
        "return num_type(0)"
      ],
      "code": "return num_type(0)"
    },
    {
      "id": "n60",
      "type": "block",
      "statements": [
        "return value"
      ],
      "code": "return value"
    },
    {
      "id": "n61",
      "type": "block",
      "statements": [
        "isinstance(value, str)"
      ],
      "code": "isinstance(value, str)"
    },
    {
      "id": "n62",
      "type": "block",
      "statements": [
        "def _try_convert(value: Any, target_type: Type, raise_on_mismatch: bool) -> Any:\n    origin = get_origin(target_type)\n    args = get_args(target_type)\n    if origin is None:\n        origin = target_type\n    if origin not in [list, dict, tuple, str, set, int, float, bool]:\n        return value\n    if isinstance(value, origin):\n        if not args:\n            return value\n        elif origin is list:\n            return [convert(v, args[0]) for v in value]\n        elif origin is tuple:\n            if len(args) == 1:\n                return tuple((convert(v, args[0]) for v in value))\n            else:\n                return tuple((convert(v, t) for (v, t) in zip(value, args)))\n        elif origin is dict:\n            (key_type, val_type) = args\n            return {convert(k, key_type): convert(v, val_type) for (k, v) in value.items()}\n        elif origin is set:\n            return {convert(v, args[0]) for v in value}\n        else:\n            return value\n    elif raise_on_mismatch:\n        raise TypeError(f'Value {value} is not of expected type {target_type}')\n    elif origin is list:\n        value = __convert_list(value)\n        if args:\n            return [convert(v, args[0]) for v in value]\n        else:\n            return value\n    elif origin is dict:\n        value = __convert_dict(value)\n        if args:\n            (key_type, val_type) = args\n            return {convert(k, key_type): convert(v, val_type) for (k, v) in value.items()}\n        else:\n            return value\n    elif origin is tuple:\n        value = __convert_tuple(value)\n        if args:\n            if len(args) == 1:\n                return tuple((convert(v, args[0]) for v in value))\n            else:\n                return tuple((convert(v, t) for (v, t) in zip(value, args)))\n        else:\n            return value\n    elif origin is str:\n        return __convert_str(value)\n    elif origin is set:\n        value = __convert_set(value)\n        if args:\n            return {convert(v, args[0]) for v in value}\n        else:\n            return value\n    elif origin is int:\n        return __convert_num(value, int)\n    elif origin is float:\n        return __convert_num(value, float)\n    elif origin is bool:\n        return __convert_bool(value)\n    else:\n        return value",
        "origin = get_origin(target_type)",
        "args = get_args(target_type)",
        "origin Is None"
      ],
      "code": "def _try_convert(value: Any, target_type: Type, raise_on_mismatch: bool) -> Any:\n    origin = get_origin(target_type)\n    args = get_args(target_type)\n    if origin is None:\n        origin = target_type\n    if origin not in [list, dict, tuple, str, set, int, float, bool]:\n        return value\n    if isinstance(value, origin):\n        if not args:\n            return value\n        elif origin is list:\n            return [convert(v, args[0]) for v in value]\n        elif origin is tuple:\n            if len(args) == 1:\n                return tuple((convert(v, args[0]) for v in value))\n            else:\n                return tuple((convert(v, t) for (v, t) in zip(value, args)))\n        elif origin is dict:\n            (key_type, val_type) = args\n            return {convert(k, key_type): convert(v, val_type) for (k, v) in value.items()}\n        elif origin is set:\n            return {convert(v, args[0]) for v in value}\n        else:\n            return value\n    elif raise_on_mismatch:\n        raise TypeError(f'Value {value} is not of expected type {target_type}')\n    elif origin is list:\n        value = __convert_list(value)\n        if args:\n            return [convert(v, args[0]) for v in value]\n        else:\n            return value\n    elif origin is dict:\n        value = __convert_dict(value)\n        if args:\n            (key_type, val_type) = args\n            return {convert(k, key_type): convert(v, val_type) for (k, v) in value.items()}\n        else:\n            return value\n    elif origin is tuple:\n        value = __convert_tuple(value)\n        if args:\n            if len(args) == 1:\n                return tuple((convert(v, args[0]) for v in value))\n            else:\n                return tuple((convert(v, t) for (v, t) in zip(value, args)))\n        else:\n            return value\n    elif origin is str:\n        return __convert_str(value)\n    elif origin is set:\n        value = __convert_set(value)\n        if args:\n            return {convert(v, args[0]) for v in value}\n        else:\n            return value\n    elif origin is int:\n        return __convert_num(value, int)\n    elif origin is float:\n        return __convert_num(value, float)\n    elif origin is bool:\n        return __convert_bool(value)\n    else:\n        return value\norigin = get_origin(target_type)\nargs = get_args(target_type)\norigin Is None"
    },
    {
      "id": "n63",
      "type": "block",
      "statements": [
        "value.lower() In ['true', '1']"
      ],
      "code": "value.lower() In ['true', '1']"
    },
    {
      "id": "n64",
      "type": "block",
      "statements": [
        "return bool(value)"
      ],
      "code": "return bool(value)"
    },
    {
      "id": "n65",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n66",
      "type": "block",
      "statements": [
        "return True"
      ],
      "code": "return True"
    },
    {
      "id": "n67",
      "type": "block",
      "statements": [
        "return False"
      ],
      "code": "return False"
    },
    {
      "id": "n68",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n69",
      "type": "block",
      "statements": [
        "origin = target_type"
      ],
      "code": "origin = target_type"
    },
    {
      "id": "n70",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n71",
      "type": "block",
      "statements": [
        "origin NotIn [list, dict, tuple, str, set, int, float, bool]"
      ],
      "code": "origin NotIn [list, dict, tuple, str, set, int, float, bool]"
    },
    {
      "id": "n72",
      "type": "block",
      "statements": [
        "return value"
      ],
      "code": "return value"
    },
    {
      "id": "n73",
      "type": "block",
      "statements": [],
      "code": "\nisinstance(value, origin)"
    },
    {
      "id": "n74",
      "type": "block",
      "statements": [
        "not args"
      ],
      "code": "not args"
    },
    {
      "id": "n75",
      "type": "block",
      "statements": [
        "raise_on_mismatch"
      ],
      "code": "raise_on_mismatch"
    },
    {
      "id": "n76",
      "type": "block",
      "statements": [
        "T = TypeVar('T')",
        "def type_match(value: Any, target_type: Type[T]) -> T:\n    return cast(T, _try_convert(value, target_type, raise_on_mismatch=True))",
        "return cast(T, _try_convert(value, target_type, raise_on_mismatch=True))"
      ],
      "code": "T = TypeVar('T')\ndef type_match(value: Any, target_type: Type[T]) -> T:\n    return cast(T, _try_convert(value, target_type, raise_on_mismatch=True))\nreturn cast(T, _try_convert(value, target_type, raise_on_mismatch=True))"
    },
    {
      "id": "n77",
      "type": "block",
      "statements": [
        "return value"
      ],
      "code": "return value"
    },
    {
      "id": "n78",
      "type": "block",
      "statements": [
        "origin Is list"
      ],
      "code": "origin Is list"
    },
    {
      "id": "n79",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n80",
      "type": "block",
      "statements": [
        "return [convert(v, args[0]) for v in value]"
      ],
      "code": "return [convert(v, args[0]) for v in value]"
    },
    {
      "id": "n81",
      "type": "block",
      "statements": [
        "origin Is tuple"
      ],
      "code": "origin Is tuple"
    },
    {
      "id": "n82",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n83",
      "type": "block",
      "statements": [
        "len(args) Eq 1"
      ],
      "code": "len(args) Eq 1"
    },
    {
      "id": "n84",
      "type": "block",
      "statements": [
        "origin Is dict"
      ],
      "code": "origin Is dict"
    },
    {
      "id": "n85",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n86",
      "type": "block",
      "statements": [
        "return tuple((convert(v, args[0]) for v in value))"
      ],
      "code": "return tuple((convert(v, args[0]) for v in value))"
    },
    {
      "id": "n87",
      "type": "block",
      "statements": [
        "return tuple((convert(v, t) for (v, t) in zip(value, args)))"
      ],
      "code": "return tuple((convert(v, t) for (v, t) in zip(value, args)))"
    },
    {
      "id": "n88",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n89",
      "type": "block",
      "statements": [
        "(key_type, val_type) = args",
        "return {convert(k, key_type): convert(v, val_type) for (k, v) in value.items()}"
      ],
      "code": "(key_type, val_type) = args\nreturn {convert(k, key_type): convert(v, val_type) for (k, v) in value.items()}"
    },
    {
      "id": "n90",
      "type": "block",
      "statements": [
        "origin Is set"
      ],
      "code": "origin Is set"
    },
    {
      "id": "n91",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n92",
      "type": "block",
      "statements": [
        "return {convert(v, args[0]) for v in value}"
      ],
      "code": "return {convert(v, args[0]) for v in value}"
    },
    {
      "id": "n93",
      "type": "block",
      "statements": [
        "return value"
      ],
      "code": "return value"
    },
    {
      "id": "n94",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n95",
      "type": "block",
      "statements": [
        "raise TypeError(f'Value {value} is not of expected type {target_type}')"
      ],
      "code": "raise TypeError(f'Value {value} is not of expected type {target_type}')"
    },
    {
      "id": "n96",
      "type": "block",
      "statements": [
        "origin Is list"
      ],
      "code": "origin Is list"
    },
    {
      "id": "n97",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n98",
      "type": "block",
      "statements": [
        "value = __convert_list(value)",
        "args"
      ],
      "code": "value = __convert_list(value)\nargs"
    },
    {
      "id": "n99",
      "type": "block",
      "statements": [
        "origin Is dict"
      ],
      "code": "origin Is dict"
    },
    {
      "id": "n100",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n101",
      "type": "block",
      "statements": [
        "return [convert(v, args[0]) for v in value]"
      ],
      "code": "return [convert(v, args[0]) for v in value]"
    },
    {
      "id": "n102",
      "type": "block",
      "statements": [
        "return value"
      ],
      "code": "return value"
    },
    {
      "id": "n103",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n104",
      "type": "block",
      "statements": [
        "value = __convert_dict(value)",
        "args"
      ],
      "code": "value = __convert_dict(value)\nargs"
    },
    {
      "id": "n105",
      "type": "block",
      "statements": [
        "origin Is tuple"
      ],
      "code": "origin Is tuple"
    },
    {
      "id": "n106",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n107",
      "type": "block",
      "statements": [
        "(key_type, val_type) = args",
        "return {convert(k, key_type): convert(v, val_type) for (k, v) in value.items()}"
      ],
      "code": "(key_type, val_type) = args\nreturn {convert(k, key_type): convert(v, val_type) for (k, v) in value.items()}"
    },
    {
      "id": "n108",
      "type": "block",
      "statements": [
        "return value"
      ],
      "code": "return value"
    },
    {
      "id": "n109",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n110",
      "type": "block",
      "statements": [
        "value = __convert_tuple(value)",
        "args"
      ],
      "code": "value = __convert_tuple(value)\nargs"
    },
    {
      "id": "n111",
      "type": "block",
      "statements": [
        "origin Is str"
      ],
      "code": "origin Is str"
    },
    {
      "id": "n112",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n113",
      "type": "block",
      "statements": [
        "len(args) Eq 1"
      ],
      "code": "len(args) Eq 1"
    },
    {
      "id": "n114",
      "type": "block",
      "statements": [
        "return value"
      ],
      "code": "return value"
    },
    {
      "id": "n115",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n116",
      "type": "block",
      "statements": [
        "return tuple((convert(v, args[0]) for v in value))"
      ],
      "code": "return tuple((convert(v, args[0]) for v in value))"
    },
    {
      "id": "n117",
      "type": "block",
      "statements": [
        "return tuple((convert(v, t) for (v, t) in zip(value, args)))"
      ],
      "code": "return tuple((convert(v, t) for (v, t) in zip(value, args)))"
    },
    {
      "id": "n118",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n119",
      "type": "block",
      "statements": [
        "return __convert_str(value)"
      ],
      "code": "return __convert_str(value)"
    },
    {
      "id": "n120",
      "type": "block",
      "statements": [
        "origin Is set"
      ],
      "code": "origin Is set"
    },
    {
      "id": "n121",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n122",
      "type": "block",
      "statements": [
        "value = __convert_set(value)",
        "args"
      ],
      "code": "value = __convert_set(value)\nargs"
    },
    {
      "id": "n123",
      "type": "block",
      "statements": [
        "origin Is int"
      ],
      "code": "origin Is int"
    },
    {
      "id": "n124",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n125",
      "type": "block",
      "statements": [
        "return {convert(v, args[0]) for v in value}"
      ],
      "code": "return {convert(v, args[0]) for v in value}"
    },
    {
      "id": "n126",
      "type": "block",
      "statements": [
        "return value"
      ],
      "code": "return value"
    },
    {
      "id": "n127",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n128",
      "type": "block",
      "statements": [
        "return __convert_num(value, int)"
      ],
      "code": "return __convert_num(value, int)"
    },
    {
      "id": "n129",
      "type": "block",
      "statements": [
        "origin Is float"
      ],
      "code": "origin Is float"
    },
    {
      "id": "n130",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n131",
      "type": "block",
      "statements": [
        "return __convert_num(value, float)"
      ],
      "code": "return __convert_num(value, float)"
    },
    {
      "id": "n132",
      "type": "block",
      "statements": [
        "origin Is bool"
      ],
      "code": "origin Is bool"
    },
    {
      "id": "n133",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n134",
      "type": "block",
      "statements": [
        "return __convert_bool(value)"
      ],
      "code": "return __convert_bool(value)"
    },
    {
      "id": "n135",
      "type": "block",
      "statements": [
        "return value"
      ],
      "code": "return value"
    },
    {
      "id": "n136",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n137",
      "type": "block",
      "statements": [
        "def convert(value: Any, target_type: Type[T]) -> T:\n    try:\n        return cast(T, _try_convert(value, target_type, raise_on_mismatch=False))\n    except Exception as e:\n        raise ConversionError(f'Failed to convert {value} to {target_type}') from e",
        "try:\n    return cast(T, _try_convert(value, target_type, raise_on_mismatch=False))\nexcept Exception as e:\n    raise ConversionError(f'Failed to convert {value} to {target_type}') from e",
        "return cast(T, _try_convert(value, target_type, raise_on_mismatch=False))"
      ],
      "code": "def convert(value: Any, target_type: Type[T]) -> T:\n    try:\n        return cast(T, _try_convert(value, target_type, raise_on_mismatch=False))\n    except Exception as e:\n        raise ConversionError(f'Failed to convert {value} to {target_type}') from e\ntry:\n    return cast(T, _try_convert(value, target_type, raise_on_mismatch=False))\nexcept Exception as e:\n    raise ConversionError(f'Failed to convert {value} to {target_type}') from e\nreturn cast(T, _try_convert(value, target_type, raise_on_mismatch=False))"
    },
    {
      "id": "n138",
      "type": "block",
      "statements": [
        "raise ConversionError(f'Failed to convert {value} to {target_type}') from e"
      ],
      "code": "raise ConversionError(f'Failed to convert {value} to {target_type}') from e"
    }
  ],
  "edges": [
    {
      "source": "n70",
      "target": "n71"
    },
    {
      "source": "n61",
      "target": "n64"
    },
    {
      "source": "n113",
      "target": "n116"
    },
    {
      "source": "n124",
      "target": "n121"
    },
    {
      "source": "n0",
      "target": "n1"
    },
    {
      "source": "n121",
      "target": "n112"
    },
    {
      "source": "n110",
      "target": "n113"
    },
    {
      "source": "n96",
      "target": "n99"
    },
    {
      "source": "n2",
      "target": "n4"
    },
    {
      "source": "n111",
      "target": "n119"
    },
    {
      "source": "n104",
      "target": "n108"
    },
    {
      "source": "n90",
      "target": "n93"
    },
    {
      "source": "n129",
      "target": "n132"
    },
    {
      "source": "n136",
      "target": "n133"
    },
    {
      "source": "n16",
      "target": "n29"
    },
    {
      "source": "n115",
      "target": "n112"
    },
    {
      "source": "n21",
      "target": "n23"
    },
    {
      "source": "n98",
      "target": "n102"
    },
    {
      "source": "n132",
      "target": "n134"
    },
    {
      "source": "n71",
      "target": "n72"
    },
    {
      "source": "n31",
      "target": "n42"
    },
    {
      "source": "n55",
      "target": "n60"
    },
    {
      "source": "n100",
      "target": "n97"
    },
    {
      "source": "n99",
      "target": "n104"
    },
    {
      "source": "n96",
      "target": "n98"
    },
    {
      "source": "n5",
      "target": "n8"
    },
    {
      "source": "n40",
      "target": "n37"
    },
    {
      "source": "n98",
      "target": "n101"
    },
    {
      "source": "n104",
      "target": "n107"
    },
    {
      "source": "n68",
      "target": "n65"
    },
    {
      "source": "n132",
      "target": "n135"
    },
    {
      "source": "n97",
      "target": "n76"
    },
    {
      "source": "n62",
      "target": "n69"
    },
    {
      "source": "n31",
      "target": "n41"
    },
    {
      "source": "n106",
      "target": "n100"
    },
    {
      "source": "n15",
      "target": "n20"
    },
    {
      "source": "n7",
      "target": "n10"
    },
    {
      "source": "n54",
      "target": "n57"
    },
    {
      "source": "n69",
      "target": "n71"
    },
    {
      "source": "n113",
      "target": "n117"
    },
    {
      "source": "n16",
      "target": "n30"
    },
    {
      "source": "n133",
      "target": "n130"
    },
    {
      "source": "n91",
      "target": "n85"
    },
    {
      "source": "n123",
      "target": "n129"
    },
    {
      "source": "n46",
      "target": "n43"
    },
    {
      "source": "n81",
      "target": "n83"
    },
    {
      "source": "n95",
      "target": "n97"
    },
    {
      "source": "n120",
      "target": "n123"
    },
    {
      "source": "n118",
      "target": "n115"
    },
    {
      "source": "n42",
      "target": "n44"
    },
    {
      "source": "n109",
      "target": "n106"
    },
    {
      "source": "n122",
      "target": "n125"
    },
    {
      "source": "n28",
      "target": "n25"
    },
    {
      "source": "n94",
      "target": "n91"
    },
    {
      "source": "n73",
      "target": "n75"
    },
    {
      "source": "n73",
      "target": "n74"
    },
    {
      "source": "n30",
      "target": "n32"
    },
    {
      "source": "n15",
      "target": "n21"
    },
    {
      "source": "n74",
      "target": "n77"
    },
    {
      "source": "n90",
      "target": "n92"
    },
    {
      "source": "n49",
      "target": "n46"
    },
    {
      "source": "n14",
      "target": "n17"
    },
    {
      "source": "n58",
      "target": "n55"
    },
    {
      "source": "n42",
      "target": "n45"
    },
    {
      "source": "n14",
      "target": "n18"
    },
    {
      "source": "n84",
      "target": "n90"
    },
    {
      "source": "n84",
      "target": "n89"
    },
    {
      "source": "n55",
      "target": "n61"
    },
    {
      "source": "n105",
      "target": "n110"
    },
    {
      "source": "n83",
      "target": "n86"
    },
    {
      "source": "n37",
      "target": "n34"
    },
    {
      "source": "n3",
      "target": "n15"
    },
    {
      "source": "n129",
      "target": "n131"
    },
    {
      "source": "n74",
      "target": "n78"
    },
    {
      "source": "n36",
      "target": "n39"
    },
    {
      "source": "n120",
      "target": "n122"
    },
    {
      "source": "n54",
      "target": "n56"
    },
    {
      "source": "n33",
      "target": "n36"
    },
    {
      "source": "n43",
      "target": "n51"
    },
    {
      "source": "n45",
      "target": "n48"
    },
    {
      "source": "n123",
      "target": "n128"
    },
    {
      "source": "n30",
      "target": "n33"
    },
    {
      "source": "n24",
      "target": "n26"
    },
    {
      "source": "n130",
      "target": "n124"
    },
    {
      "source": "n65",
      "target": "n62"
    },
    {
      "source": "n9",
      "target": "n6"
    },
    {
      "source": "n63",
      "target": "n66"
    },
    {
      "source": "n75",
      "target": "n96"
    },
    {
      "source": "n78",
      "target": "n81"
    },
    {
      "source": "n0",
      "target": "n2"
    },
    {
      "source": "n22",
      "target": "n16"
    },
    {
      "source": "n52",
      "target": "n53"
    },
    {
      "source": "n105",
      "target": "n111"
    },
    {
      "source": "n85",
      "target": "n82"
    },
    {
      "source": "n7",
      "target": "n11"
    },
    {
      "source": "n61",
      "target": "n63"
    },
    {
      "source": "n21",
      "target": "n24"
    },
    {
      "source": "n81",
      "target": "n84"
    },
    {
      "source": "n127",
      "target": "n124"
    },
    {
      "source": "n3",
      "target": "n14"
    },
    {
      "source": "n71",
      "target": "n73"
    },
    {
      "source": "n6",
      "target": "n3"
    },
    {
      "source": "n99",
      "target": "n105"
    },
    {
      "source": "n12",
      "target": "n9"
    },
    {
      "source": "n110",
      "target": "n114"
    },
    {
      "source": "n33",
      "target": "n35"
    },
    {
      "source": "n111",
      "target": "n120"
    },
    {
      "source": "n82",
      "target": "n79"
    },
    {
      "source": "n122",
      "target": "n126"
    },
    {
      "source": "n25",
      "target": "n22"
    },
    {
      "source": "n36",
      "target": "n38"
    },
    {
      "source": "n75",
      "target": "n95"
    },
    {
      "source": "n45",
      "target": "n47"
    },
    {
      "source": "n43",
      "target": "n50"
    },
    {
      "source": "n112",
      "target": "n106"
    },
    {
      "source": "n63",
      "target": "n67"
    },
    {
      "source": "n52",
      "target": "n54"
    },
    {
      "source": "n88",
      "target": "n85"
    },
    {
      "source": "n79",
      "target": "n76"
    },
    {
      "source": "n83",
      "target": "n87"
    },
    {
      "source": "n2",
      "target": "n5"
    },
    {
      "source": "n78",
      "target": "n80"
    },
    {
      "source": "n24",
      "target": "n27"
    },
    {
      "source": "n34",
      "target": "n31"
    },
    {
      "source": "n62",
      "target": "n70"
    },
    {
      "source": "n5",
      "target": "n7"
    },
    {
      "source": "n103",
      "target": "n100"
    }
  ]
}