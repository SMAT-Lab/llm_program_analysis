{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "import logging",
        "from colorama import Fore, Style",
        "from google.cloud.logging_v2.handlers import CloudLoggingFilter, StructuredLogHandler",
        "from .utils import remove_color_codes",
        "class FancyConsoleFormatter(logging.Formatter):\n    \"\"\"\n    A custom logging formatter designed for console output.\n\n    This formatter enhances the standard logging output with color coding. The color\n    coding is based on the level of the log message, making it easier to distinguish\n    between different types of messages in the console output.\n\n    The color for each level is defined in the LEVEL_COLOR_MAP class attribute.\n    \"\"\"\n    LEVEL_COLOR_MAP = {logging.DEBUG: Fore.LIGHTBLACK_EX, logging.INFO: Fore.BLUE, logging.WARNING: Fore.YELLOW, logging.ERROR: Fore.RED, logging.CRITICAL: Fore.RED + Style.BRIGHT}\n\n    def format(self, record: logging.LogRecord) -> str:\n        if not hasattr(record, 'msg'):\n            record.msg = ''\n        elif type(record.msg) is not str:\n            record.msg = str(record.msg)\n        level_color = ''\n        if record.levelno in self.LEVEL_COLOR_MAP:\n            level_color = self.LEVEL_COLOR_MAP[record.levelno]\n            record.levelname = f'{level_color}{record.levelname}{Style.RESET_ALL}'\n        color = getattr(record, 'color', level_color)\n        color_is_specified = hasattr(record, 'color')\n        if color and (record.levelno != logging.INFO or color_is_specified):\n            record.msg = f'{color}{record.msg}{Style.RESET_ALL}'\n        return super().format(record)",
        "'\\n    A custom logging formatter designed for console output.\\n\\n    This formatter enhances the standard logging output with color coding. The color\\n    coding is based on the level of the log message, making it easier to distinguish\\n    between different types of messages in the console output.\\n\\n    The color for each level is defined in the LEVEL_COLOR_MAP class attribute.\\n    '",
        "LEVEL_COLOR_MAP = {logging.DEBUG: Fore.LIGHTBLACK_EX, logging.INFO: Fore.BLUE, logging.WARNING: Fore.YELLOW, logging.ERROR: Fore.RED, logging.CRITICAL: Fore.RED + Style.BRIGHT}",
        "def format(self, record: logging.LogRecord) -> str:\n    if not hasattr(record, 'msg'):\n        record.msg = ''\n    elif type(record.msg) is not str:\n        record.msg = str(record.msg)\n    level_color = ''\n    if record.levelno in self.LEVEL_COLOR_MAP:\n        level_color = self.LEVEL_COLOR_MAP[record.levelno]\n        record.levelname = f'{level_color}{record.levelname}{Style.RESET_ALL}'\n    color = getattr(record, 'color', level_color)\n    color_is_specified = hasattr(record, 'color')\n    if color and (record.levelno != logging.INFO or color_is_specified):\n        record.msg = f'{color}{record.msg}{Style.RESET_ALL}'\n    return super().format(record)",
        "not hasattr(record, 'msg')"
      ],
      "code": "import logging\nfrom colorama import Fore, Style\nfrom google.cloud.logging_v2.handlers import CloudLoggingFilter, StructuredLogHandler\nfrom .utils import remove_color_codes\nclass FancyConsoleFormatter(logging.Formatter):\n    \"\"\"\n    A custom logging formatter designed for console output.\n\n    This formatter enhances the standard logging output with color coding. The color\n    coding is based on the level of the log message, making it easier to distinguish\n    between different types of messages in the console output.\n\n    The color for each level is defined in the LEVEL_COLOR_MAP class attribute.\n    \"\"\"\n    LEVEL_COLOR_MAP = {logging.DEBUG: Fore.LIGHTBLACK_EX, logging.INFO: Fore.BLUE, logging.WARNING: Fore.YELLOW, logging.ERROR: Fore.RED, logging.CRITICAL: Fore.RED + Style.BRIGHT}\n\n    def format(self, record: logging.LogRecord) -> str:\n        if not hasattr(record, 'msg'):\n            record.msg = ''\n        elif type(record.msg) is not str:\n            record.msg = str(record.msg)\n        level_color = ''\n        if record.levelno in self.LEVEL_COLOR_MAP:\n            level_color = self.LEVEL_COLOR_MAP[record.levelno]\n            record.levelname = f'{level_color}{record.levelname}{Style.RESET_ALL}'\n        color = getattr(record, 'color', level_color)\n        color_is_specified = hasattr(record, 'color')\n        if color and (record.levelno != logging.INFO or color_is_specified):\n            record.msg = f'{color}{record.msg}{Style.RESET_ALL}'\n        return super().format(record)\n'\\n    A custom logging formatter designed for console output.\\n\\n    This formatter enhances the standard logging output with color coding. The color\\n    coding is based on the level of the log message, making it easier to distinguish\\n    between different types of messages in the console output.\\n\\n    The color for each level is defined in the LEVEL_COLOR_MAP class attribute.\\n    '\nLEVEL_COLOR_MAP = {logging.DEBUG: Fore.LIGHTBLACK_EX, logging.INFO: Fore.BLUE, logging.WARNING: Fore.YELLOW, logging.ERROR: Fore.RED, logging.CRITICAL: Fore.RED + Style.BRIGHT}\ndef format(self, record: logging.LogRecord) -> str:\n    if not hasattr(record, 'msg'):\n        record.msg = ''\n    elif type(record.msg) is not str:\n        record.msg = str(record.msg)\n    level_color = ''\n    if record.levelno in self.LEVEL_COLOR_MAP:\n        level_color = self.LEVEL_COLOR_MAP[record.levelno]\n        record.levelname = f'{level_color}{record.levelname}{Style.RESET_ALL}'\n    color = getattr(record, 'color', level_color)\n    color_is_specified = hasattr(record, 'color')\n    if color and (record.levelno != logging.INFO or color_is_specified):\n        record.msg = f'{color}{record.msg}{Style.RESET_ALL}'\n    return super().format(record)\nnot hasattr(record, 'msg')"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "record.msg = ''"
      ],
      "code": "record.msg = ''"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [
        "type(record.msg) IsNot str"
      ],
      "code": "type(record.msg) IsNot str"
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [
        "level_color = ''",
        "record.levelno In self.LEVEL_COLOR_MAP"
      ],
      "code": "level_color = ''\nrecord.levelno In self.LEVEL_COLOR_MAP"
    },
    {
      "id": "n4",
      "type": "block",
      "statements": [
        "record.msg = str(record.msg)"
      ],
      "code": "record.msg = str(record.msg)"
    },
    {
      "id": "n5",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n6",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n7",
      "type": "block",
      "statements": [
        "level_color = self.LEVEL_COLOR_MAP[record.levelno]",
        "record.levelname = f'{level_color}{record.levelname}{Style.RESET_ALL}'"
      ],
      "code": "level_color = self.LEVEL_COLOR_MAP[record.levelno]\nrecord.levelname = f'{level_color}{record.levelname}{Style.RESET_ALL}'"
    },
    {
      "id": "n8",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n9",
      "type": "block",
      "statements": [
        "color = getattr(record, 'color', level_color)",
        "color_is_specified = hasattr(record, 'color')",
        "color and (record.levelno != logging.INFO or color_is_specified)"
      ],
      "code": "color = getattr(record, 'color', level_color)\ncolor_is_specified = hasattr(record, 'color')\ncolor and (record.levelno != logging.INFO or color_is_specified)"
    },
    {
      "id": "n10",
      "type": "block",
      "statements": [
        "record.msg = f'{color}{record.msg}{Style.RESET_ALL}'"
      ],
      "code": "record.msg = f'{color}{record.msg}{Style.RESET_ALL}'"
    },
    {
      "id": "n11",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n12",
      "type": "block",
      "statements": [
        "return super().format(record)"
      ],
      "code": "return super().format(record)"
    },
    {
      "id": "n13",
      "type": "block",
      "statements": [
        "class AGPTFormatter(FancyConsoleFormatter):\n\n    def __init__(self, *args, no_color: bool=False, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.no_color = no_color\n\n    def format(self, record: logging.LogRecord) -> str:\n        if not hasattr(record, 'msg'):\n            record.msg = ''\n        elif type(record.msg) is not str:\n            record.msg = str(record.msg)\n        if record.msg and (not getattr(record, 'preserve_color', False)):\n            record.msg = remove_color_codes(record.msg)\n        title = getattr(record, 'title', '')\n        title_color = getattr(record, 'title_color', '') or self.LEVEL_COLOR_MAP.get(record.levelno, '')\n        if title and title_color:\n            title = f'{title_color + Style.BRIGHT}{title}{Style.RESET_ALL}'\n        record.title = f'{title} ' if title else ''\n        if self.no_color:\n            return remove_color_codes(super().format(record))\n        else:\n            return super().format(record)",
        "def __init__(self, *args, no_color: bool=False, **kwargs):\n    super().__init__(*args, **kwargs)\n    self.no_color = no_color",
        "super().__init__(*args)",
        "self.no_color = no_color",
        "def format(self, record: logging.LogRecord) -> str:\n    if not hasattr(record, 'msg'):\n        record.msg = ''\n    elif type(record.msg) is not str:\n        record.msg = str(record.msg)\n    if record.msg and (not getattr(record, 'preserve_color', False)):\n        record.msg = remove_color_codes(record.msg)\n    title = getattr(record, 'title', '')\n    title_color = getattr(record, 'title_color', '') or self.LEVEL_COLOR_MAP.get(record.levelno, '')\n    if title and title_color:\n        title = f'{title_color + Style.BRIGHT}{title}{Style.RESET_ALL}'\n    record.title = f'{title} ' if title else ''\n    if self.no_color:\n        return remove_color_codes(super().format(record))\n    else:\n        return super().format(record)",
        "not hasattr(record, 'msg')"
      ],
      "code": "class AGPTFormatter(FancyConsoleFormatter):\n\n    def __init__(self, *args, no_color: bool=False, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.no_color = no_color\n\n    def format(self, record: logging.LogRecord) -> str:\n        if not hasattr(record, 'msg'):\n            record.msg = ''\n        elif type(record.msg) is not str:\n            record.msg = str(record.msg)\n        if record.msg and (not getattr(record, 'preserve_color', False)):\n            record.msg = remove_color_codes(record.msg)\n        title = getattr(record, 'title', '')\n        title_color = getattr(record, 'title_color', '') or self.LEVEL_COLOR_MAP.get(record.levelno, '')\n        if title and title_color:\n            title = f'{title_color + Style.BRIGHT}{title}{Style.RESET_ALL}'\n        record.title = f'{title} ' if title else ''\n        if self.no_color:\n            return remove_color_codes(super().format(record))\n        else:\n            return super().format(record)\ndef __init__(self, *args, no_color: bool=False, **kwargs):\n    super().__init__(*args, **kwargs)\n    self.no_color = no_color\nsuper().__init__(*args)\nself.no_color = no_color\ndef format(self, record: logging.LogRecord) -> str:\n    if not hasattr(record, 'msg'):\n        record.msg = ''\n    elif type(record.msg) is not str:\n        record.msg = str(record.msg)\n    if record.msg and (not getattr(record, 'preserve_color', False)):\n        record.msg = remove_color_codes(record.msg)\n    title = getattr(record, 'title', '')\n    title_color = getattr(record, 'title_color', '') or self.LEVEL_COLOR_MAP.get(record.levelno, '')\n    if title and title_color:\n        title = f'{title_color + Style.BRIGHT}{title}{Style.RESET_ALL}'\n    record.title = f'{title} ' if title else ''\n    if self.no_color:\n        return remove_color_codes(super().format(record))\n    else:\n        return super().format(record)\nnot hasattr(record, 'msg')"
    },
    {
      "id": "n14",
      "type": "block",
      "statements": [
        "record.msg = ''"
      ],
      "code": "record.msg = ''"
    },
    {
      "id": "n15",
      "type": "block",
      "statements": [
        "type(record.msg) IsNot str"
      ],
      "code": "type(record.msg) IsNot str"
    },
    {
      "id": "n16",
      "type": "block",
      "statements": [
        "record.msg and (not getattr(record, 'preserve_color', False))"
      ],
      "code": "record.msg and (not getattr(record, 'preserve_color', False))"
    },
    {
      "id": "n17",
      "type": "block",
      "statements": [
        "record.msg = str(record.msg)"
      ],
      "code": "record.msg = str(record.msg)"
    },
    {
      "id": "n18",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n19",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n20",
      "type": "block",
      "statements": [
        "record.msg = remove_color_codes(record.msg)"
      ],
      "code": "record.msg = remove_color_codes(record.msg)"
    },
    {
      "id": "n21",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n22",
      "type": "block",
      "statements": [
        "title = getattr(record, 'title', '')",
        "title_color = getattr(record, 'title_color', '') or self.LEVEL_COLOR_MAP.get(record.levelno, '')",
        "title and title_color"
      ],
      "code": "title = getattr(record, 'title', '')\ntitle_color = getattr(record, 'title_color', '') or self.LEVEL_COLOR_MAP.get(record.levelno, '')\ntitle and title_color"
    },
    {
      "id": "n23",
      "type": "block",
      "statements": [
        "title = f'{title_color + Style.BRIGHT}{title}{Style.RESET_ALL}'"
      ],
      "code": "title = f'{title_color + Style.BRIGHT}{title}{Style.RESET_ALL}'"
    },
    {
      "id": "n24",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n25",
      "type": "block",
      "statements": [
        "record.title = f'{title} ' if title else ''",
        "self.no_color"
      ],
      "code": "record.title = f'{title} ' if title else ''\nself.no_color"
    },
    {
      "id": "n26",
      "type": "block",
      "statements": [
        "return remove_color_codes(super().format(record))"
      ],
      "code": "return remove_color_codes(super().format(record))"
    },
    {
      "id": "n27",
      "type": "block",
      "statements": [
        "return super().format(record)"
      ],
      "code": "return super().format(record)"
    },
    {
      "id": "n28",
      "type": "block",
      "statements": [
        "class StructuredLoggingFormatter(StructuredLogHandler, logging.Formatter):\n\n    def __init__(self):\n        self.cloud_logging_filter = CloudLoggingFilter()\n        super().__init__()\n\n    def format(self, record: logging.LogRecord) -> str:\n        self.cloud_logging_filter.filter(record)\n        return super().format(record)",
        "def __init__(self):\n    self.cloud_logging_filter = CloudLoggingFilter()\n    super().__init__()",
        "self.cloud_logging_filter = CloudLoggingFilter()",
        "super().__init__()",
        "def format(self, record: logging.LogRecord) -> str:\n    self.cloud_logging_filter.filter(record)\n    return super().format(record)",
        "self.cloud_logging_filter.filter(record)",
        "return super().format(record)"
      ],
      "code": "class StructuredLoggingFormatter(StructuredLogHandler, logging.Formatter):\n\n    def __init__(self):\n        self.cloud_logging_filter = CloudLoggingFilter()\n        super().__init__()\n\n    def format(self, record: logging.LogRecord) -> str:\n        self.cloud_logging_filter.filter(record)\n        return super().format(record)\ndef __init__(self):\n    self.cloud_logging_filter = CloudLoggingFilter()\n    super().__init__()\nself.cloud_logging_filter = CloudLoggingFilter()\nsuper().__init__()\ndef format(self, record: logging.LogRecord) -> str:\n    self.cloud_logging_filter.filter(record)\n    return super().format(record)\nself.cloud_logging_filter.filter(record)\nreturn super().format(record)"
    }
  ],
  "edges": [
    {
      "source": "n15",
      "target": "n18"
    },
    {
      "source": "n0",
      "target": "n1"
    },
    {
      "source": "n23",
      "target": "n25"
    },
    {
      "source": "n21",
      "target": "n22"
    },
    {
      "source": "n22",
      "target": "n23"
    },
    {
      "source": "n17",
      "target": "n19"
    },
    {
      "source": "n13",
      "target": "n14"
    },
    {
      "source": "n6",
      "target": "n3"
    },
    {
      "source": "n2",
      "target": "n4"
    },
    {
      "source": "n13",
      "target": "n15"
    },
    {
      "source": "n16",
      "target": "n21"
    },
    {
      "source": "n8",
      "target": "n9"
    },
    {
      "source": "n4",
      "target": "n6"
    },
    {
      "source": "n24",
      "target": "n25"
    },
    {
      "source": "n9",
      "target": "n11"
    },
    {
      "source": "n16",
      "target": "n20"
    },
    {
      "source": "n14",
      "target": "n16"
    },
    {
      "source": "n9",
      "target": "n10"
    },
    {
      "source": "n19",
      "target": "n16"
    },
    {
      "source": "n10",
      "target": "n12"
    },
    {
      "source": "n11",
      "target": "n12"
    },
    {
      "source": "n18",
      "target": "n19"
    },
    {
      "source": "n7",
      "target": "n9"
    },
    {
      "source": "n5",
      "target": "n6"
    },
    {
      "source": "n25",
      "target": "n26"
    },
    {
      "source": "n1",
      "target": "n3"
    },
    {
      "source": "n3",
      "target": "n8"
    },
    {
      "source": "n2",
      "target": "n5"
    },
    {
      "source": "n25",
      "target": "n27"
    },
    {
      "source": "n20",
      "target": "n22"
    },
    {
      "source": "n22",
      "target": "n24"
    },
    {
      "source": "n0",
      "target": "n2"
    },
    {
      "source": "n3",
      "target": "n7"
    },
    {
      "source": "n15",
      "target": "n17"
    }
  ]
}