{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "from mrjob.job import MRJob",
        "class SpendingByCategory(MRJob):\n\n    def __init__(self, categorizer):\n        self.categorizer = categorizer\n        ...\n\n    def current_year_month(self):\n        \"\"\"Return the current year and month.\"\"\"\n        ...\n\n    def extract_year_month(self, timestamp):\n        \"\"\"Return the year and month portions of the timestamp.\"\"\"\n        ...\n\n    def handle_budget_notifications(self, key, total):\n        \"\"\"Call notification API if nearing or exceeded budget.\"\"\"\n        ...\n\n    def mapper(self, _, line):\n        \"\"\"Parse each log line, extract and transform relevant lines.\n\n        Emit key value pairs of the form:\n\n        (2016-01, shopping), 25\n        (2016-01, shopping), 100\n        (2016-01, gas), 50\n        \"\"\"\n        (timestamp, category, amount) = line.split('\\t')\n        period = self.extract_year_month(timestamp)\n        if period == self.current_year_month():\n            yield ((period, category), amount)\n\n    def reducer(self, key, values):\n        \"\"\"Sum values for each key.\n\n        (2016-01, shopping), 125\n        (2016-01, gas), 50\n        \"\"\"\n        total = sum(values)\n        self.handle_budget_notifications(key, total)\n        yield (key, sum(values))\n\n    def steps(self):\n        \"\"\"Run the map and reduce steps.\"\"\"\n        return [self.mr(mapper=self.mapper, reducer=self.reducer)]",
        "def __init__(self, categorizer):\n    self.categorizer = categorizer\n    ...",
        "self.categorizer = categorizer",
        "Ellipsis",
        "def current_year_month(self):\n    \"\"\"Return the current year and month.\"\"\"\n    ...",
        "'Return the current year and month.'",
        "Ellipsis",
        "def extract_year_month(self, timestamp):\n    \"\"\"Return the year and month portions of the timestamp.\"\"\"\n    ...",
        "'Return the year and month portions of the timestamp.'",
        "Ellipsis",
        "def handle_budget_notifications(self, key, total):\n    \"\"\"Call notification API if nearing or exceeded budget.\"\"\"\n    ...",
        "'Call notification API if nearing or exceeded budget.'",
        "Ellipsis",
        "def mapper(self, _, line):\n    \"\"\"Parse each log line, extract and transform relevant lines.\n\n        Emit key value pairs of the form:\n\n        (2016-01, shopping), 25\n        (2016-01, shopping), 100\n        (2016-01, gas), 50\n        \"\"\"\n    (timestamp, category, amount) = line.split('\\t')\n    period = self.extract_year_month(timestamp)\n    if period == self.current_year_month():\n        yield ((period, category), amount)",
        "'Parse each log line, extract and transform relevant lines.\\n\\n        Emit key value pairs of the form:\\n\\n        (2016-01, shopping), 25\\n        (2016-01, shopping), 100\\n        (2016-01, gas), 50\\n        '",
        "(timestamp, category, amount) = line.split('\\t')",
        "period = self.extract_year_month(timestamp)",
        "period Eq self.current_year_month()"
      ],
      "code": "from mrjob.job import MRJob\nclass SpendingByCategory(MRJob):\n\n    def __init__(self, categorizer):\n        self.categorizer = categorizer\n        ...\n\n    def current_year_month(self):\n        \"\"\"Return the current year and month.\"\"\"\n        ...\n\n    def extract_year_month(self, timestamp):\n        \"\"\"Return the year and month portions of the timestamp.\"\"\"\n        ...\n\n    def handle_budget_notifications(self, key, total):\n        \"\"\"Call notification API if nearing or exceeded budget.\"\"\"\n        ...\n\n    def mapper(self, _, line):\n        \"\"\"Parse each log line, extract and transform relevant lines.\n\n        Emit key value pairs of the form:\n\n        (2016-01, shopping), 25\n        (2016-01, shopping), 100\n        (2016-01, gas), 50\n        \"\"\"\n        (timestamp, category, amount) = line.split('\\t')\n        period = self.extract_year_month(timestamp)\n        if period == self.current_year_month():\n            yield ((period, category), amount)\n\n    def reducer(self, key, values):\n        \"\"\"Sum values for each key.\n\n        (2016-01, shopping), 125\n        (2016-01, gas), 50\n        \"\"\"\n        total = sum(values)\n        self.handle_budget_notifications(key, total)\n        yield (key, sum(values))\n\n    def steps(self):\n        \"\"\"Run the map and reduce steps.\"\"\"\n        return [self.mr(mapper=self.mapper, reducer=self.reducer)]\ndef __init__(self, categorizer):\n    self.categorizer = categorizer\n    ...\nself.categorizer = categorizer\nEllipsis\ndef current_year_month(self):\n    \"\"\"Return the current year and month.\"\"\"\n    ...\n'Return the current year and month.'\nEllipsis\ndef extract_year_month(self, timestamp):\n    \"\"\"Return the year and month portions of the timestamp.\"\"\"\n    ...\n'Return the year and month portions of the timestamp.'\nEllipsis\ndef handle_budget_notifications(self, key, total):\n    \"\"\"Call notification API if nearing or exceeded budget.\"\"\"\n    ...\n'Call notification API if nearing or exceeded budget.'\nEllipsis\ndef mapper(self, _, line):\n    \"\"\"Parse each log line, extract and transform relevant lines.\n\n        Emit key value pairs of the form:\n\n        (2016-01, shopping), 25\n        (2016-01, shopping), 100\n        (2016-01, gas), 50\n        \"\"\"\n    (timestamp, category, amount) = line.split('\\t')\n    period = self.extract_year_month(timestamp)\n    if period == self.current_year_month():\n        yield ((period, category), amount)\n'Parse each log line, extract and transform relevant lines.\\n\\n        Emit key value pairs of the form:\\n\\n        (2016-01, shopping), 25\\n        (2016-01, shopping), 100\\n        (2016-01, gas), 50\\n        '\n(timestamp, category, amount) = line.split('\\t')\nperiod = self.extract_year_month(timestamp)\nperiod Eq self.current_year_month()"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "(yield ((period, category), amount))"
      ],
      "code": "(yield ((period, category), amount))"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [
        "def reducer(self, key, values):\n    \"\"\"Sum values for each key.\n\n        (2016-01, shopping), 125\n        (2016-01, gas), 50\n        \"\"\"\n    total = sum(values)\n    self.handle_budget_notifications(key, total)\n    yield (key, sum(values))",
        "'Sum values for each key.\\n\\n        (2016-01, shopping), 125\\n        (2016-01, gas), 50\\n        '",
        "total = sum(values)",
        "self.handle_budget_notifications(key, total)",
        "(yield (key, sum(values)))",
        "def steps(self):\n    \"\"\"Run the map and reduce steps.\"\"\"\n    return [self.mr(mapper=self.mapper, reducer=self.reducer)]",
        "'Run the map and reduce steps.'",
        "return [self.mr(mapper=self.mapper, reducer=self.reducer)]"
      ],
      "code": "def reducer(self, key, values):\n    \"\"\"Sum values for each key.\n\n        (2016-01, shopping), 125\n        (2016-01, gas), 50\n        \"\"\"\n    total = sum(values)\n    self.handle_budget_notifications(key, total)\n    yield (key, sum(values))\n'Sum values for each key.\\n\\n        (2016-01, shopping), 125\\n        (2016-01, gas), 50\\n        '\ntotal = sum(values)\nself.handle_budget_notifications(key, total)\n(yield (key, sum(values)))\ndef steps(self):\n    \"\"\"Run the map and reduce steps.\"\"\"\n    return [self.mr(mapper=self.mapper, reducer=self.reducer)]\n'Run the map and reduce steps.'\nreturn [self.mr(mapper=self.mapper, reducer=self.reducer)]"
    },
    {
      "id": "n4",
      "type": "block",
      "statements": [
        "__name__ Eq '__main__'"
      ],
      "code": "__name__ Eq '__main__'"
    },
    {
      "id": "n5",
      "type": "block",
      "statements": [
        "SpendingByCategory.run()"
      ],
      "code": "SpendingByCategory.run()"
    },
    {
      "id": "n6",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n7",
      "type": "block",
      "statements": [],
      "code": ""
    }
  ],
  "edges": [
    {
      "source": "n1",
      "target": "n3"
    },
    {
      "source": "n6",
      "target": "n7"
    },
    {
      "source": "n0",
      "target": "n2"
    },
    {
      "source": "n0",
      "target": "n1"
    },
    {
      "source": "n4",
      "target": "n5"
    },
    {
      "source": "n5",
      "target": "n7"
    },
    {
      "source": "n4",
      "target": "n6"
    },
    {
      "source": "n2",
      "target": "n3"
    }
  ]
}