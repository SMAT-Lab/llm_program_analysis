{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "import unittest",
        "from validate.links import find_links_in_text",
        "from validate.links import check_duplicate_links",
        "from validate.links import fake_user_agent",
        "from validate.links import get_host_from_link",
        "from validate.links import has_cloudflare_protection",
        "class FakeResponse:\n\n    def __init__(self, code: int, headers: dict, text: str) -> None:\n        self.status_code = code\n        self.headers = headers\n        self.text = text",
        "def __init__(self, code: int, headers: dict, text: str) -> None:\n    self.status_code = code\n    self.headers = headers\n    self.text = text",
        "self.status_code = code",
        "self.headers = headers",
        "self.text = text",
        "class TestValidateLinks(unittest.TestCase):\n\n    def setUp(self):\n        self.duplicate_links = ['https://www.example.com', 'https://www.example.com', 'https://www.example.com', 'https://www.anotherexample.com']\n        self.no_duplicate_links = ['https://www.firstexample.com', 'https://www.secondexample.com', 'https://www.anotherexample.com']\n        self.code_200 = 200\n        self.code_403 = 403\n        self.code_503 = 503\n        self.cloudflare_headers = {'Server': 'cloudflare'}\n        self.no_cloudflare_headers = {'Server': 'google'}\n        self.text_with_cloudflare_flags = '403 Forbidden Cloudflare We are checking your browser...'\n        self.text_without_cloudflare_flags = 'Lorem Ipsum'\n\n    def test_find_link_in_text(self):\n        text = '\\n            # this is valid\\n\\n            http://example.com?param1=1&param2=2#anchor\\n            https://www.example.com?param1=1&param2=2#anchor\\n            https://www.example.com.br\\n            https://www.example.com.gov.br\\n            [Example](https://www.example.com?param1=1&param2=2#anchor)\\n            lorem ipsum https://www.example.com?param1=1&param2=2#anchor\\n            https://www.example.com?param1=1&param2=2#anchor lorem ipsum\\n\\n            # this not is valid\\n\\n            example.com\\n            https:example.com\\n            https:/example.com\\n            https//example.com\\n            https//.com\\n        '\n        links = find_links_in_text(text)\n        self.assertIsInstance(links, list)\n        self.assertEqual(len(links), 7)\n        for link in links:\n            with self.subTest():\n                self.assertIsInstance(link, str)\n\n    def test_find_link_in_text_with_invalid_argument(self):\n        with self.assertRaises(TypeError):\n            find_links_in_text()\n            find_links_in_text(1)\n            find_links_in_text(True)\n\n    def test_if_check_duplicate_links_has_the_correct_return(self):\n        result_1 = check_duplicate_links(self.duplicate_links)\n        result_2 = check_duplicate_links(self.no_duplicate_links)\n        self.assertIsInstance(result_1, tuple)\n        self.assertIsInstance(result_2, tuple)\n        (has_duplicate_links, links) = result_1\n        (no_duplicate_links, no_links) = result_2\n        self.assertTrue(has_duplicate_links)\n        self.assertFalse(no_duplicate_links)\n        self.assertIsInstance(links, list)\n        self.assertIsInstance(no_links, list)\n        self.assertEqual(len(links), 2)\n        self.assertEqual(len(no_links), 0)\n\n    def test_if_fake_user_agent_has_a_str_as_return(self):\n        user_agent = fake_user_agent()\n        self.assertIsInstance(user_agent, str)\n\n    def test_get_host_from_link(self):\n        links = ['example.com', 'https://example.com', 'https://www.example.com', 'https://www.example.com.br', 'https://www.example.com/route', 'https://www.example.com?p=1&q=2', 'https://www.example.com#anchor']\n        for link in links:\n            host = get_host_from_link(link)\n            with self.subTest():\n                self.assertIsInstance(host, str)\n                self.assertNotIn('://', host)\n                self.assertNotIn('/', host)\n                self.assertNotIn('?', host)\n                self.assertNotIn('#', host)\n        with self.assertRaises(TypeError):\n            get_host_from_link()\n\n    def test_has_cloudflare_protection_with_code_403_and_503_in_response(self):\n        resp_with_cloudflare_protection_code_403 = FakeResponse(code=self.code_403, headers=self.cloudflare_headers, text=self.text_with_cloudflare_flags)\n        resp_with_cloudflare_protection_code_503 = FakeResponse(code=self.code_503, headers=self.cloudflare_headers, text=self.text_with_cloudflare_flags)\n        result1 = has_cloudflare_protection(resp_with_cloudflare_protection_code_403)\n        result2 = has_cloudflare_protection(resp_with_cloudflare_protection_code_503)\n        self.assertTrue(result1)\n        self.assertTrue(result2)\n\n    def test_has_cloudflare_protection_when_there_is_no_protection(self):\n        resp_without_cloudflare_protection1 = FakeResponse(code=self.code_200, headers=self.no_cloudflare_headers, text=self.text_without_cloudflare_flags)\n        resp_without_cloudflare_protection2 = FakeResponse(code=self.code_403, headers=self.no_cloudflare_headers, text=self.text_without_cloudflare_flags)\n        resp_without_cloudflare_protection3 = FakeResponse(code=self.code_503, headers=self.no_cloudflare_headers, text=self.text_without_cloudflare_flags)\n        result1 = has_cloudflare_protection(resp_without_cloudflare_protection1)\n        result2 = has_cloudflare_protection(resp_without_cloudflare_protection2)\n        result3 = has_cloudflare_protection(resp_without_cloudflare_protection3)\n        self.assertFalse(result1)\n        self.assertFalse(result2)\n        self.assertFalse(result3)",
        "def setUp(self):\n    self.duplicate_links = ['https://www.example.com', 'https://www.example.com', 'https://www.example.com', 'https://www.anotherexample.com']\n    self.no_duplicate_links = ['https://www.firstexample.com', 'https://www.secondexample.com', 'https://www.anotherexample.com']\n    self.code_200 = 200\n    self.code_403 = 403\n    self.code_503 = 503\n    self.cloudflare_headers = {'Server': 'cloudflare'}\n    self.no_cloudflare_headers = {'Server': 'google'}\n    self.text_with_cloudflare_flags = '403 Forbidden Cloudflare We are checking your browser...'\n    self.text_without_cloudflare_flags = 'Lorem Ipsum'",
        "self.duplicate_links = ['https://www.example.com', 'https://www.example.com', 'https://www.example.com', 'https://www.anotherexample.com']",
        "self.no_duplicate_links = ['https://www.firstexample.com', 'https://www.secondexample.com', 'https://www.anotherexample.com']",
        "self.code_200 = 200",
        "self.code_403 = 403",
        "self.code_503 = 503",
        "self.cloudflare_headers = {'Server': 'cloudflare'}",
        "self.no_cloudflare_headers = {'Server': 'google'}",
        "self.text_with_cloudflare_flags = '403 Forbidden Cloudflare We are checking your browser...'",
        "self.text_without_cloudflare_flags = 'Lorem Ipsum'",
        "def test_find_link_in_text(self):\n    text = '\\n            # this is valid\\n\\n            http://example.com?param1=1&param2=2#anchor\\n            https://www.example.com?param1=1&param2=2#anchor\\n            https://www.example.com.br\\n            https://www.example.com.gov.br\\n            [Example](https://www.example.com?param1=1&param2=2#anchor)\\n            lorem ipsum https://www.example.com?param1=1&param2=2#anchor\\n            https://www.example.com?param1=1&param2=2#anchor lorem ipsum\\n\\n            # this not is valid\\n\\n            example.com\\n            https:example.com\\n            https:/example.com\\n            https//example.com\\n            https//.com\\n        '\n    links = find_links_in_text(text)\n    self.assertIsInstance(links, list)\n    self.assertEqual(len(links), 7)\n    for link in links:\n        with self.subTest():\n            self.assertIsInstance(link, str)",
        "text = '\\n            # this is valid\\n\\n            http://example.com?param1=1&param2=2#anchor\\n            https://www.example.com?param1=1&param2=2#anchor\\n            https://www.example.com.br\\n            https://www.example.com.gov.br\\n            [Example](https://www.example.com?param1=1&param2=2#anchor)\\n            lorem ipsum https://www.example.com?param1=1&param2=2#anchor\\n            https://www.example.com?param1=1&param2=2#anchor lorem ipsum\\n\\n            # this not is valid\\n\\n            example.com\\n            https:example.com\\n            https:/example.com\\n            https//example.com\\n            https//.com\\n        '",
        "links = find_links_in_text(text)",
        "self.assertIsInstance(links, list)",
        "self.assertEqual(len(links), 7)"
      ],
      "code": "import unittest\nfrom validate.links import find_links_in_text\nfrom validate.links import check_duplicate_links\nfrom validate.links import fake_user_agent\nfrom validate.links import get_host_from_link\nfrom validate.links import has_cloudflare_protection\nclass FakeResponse:\n\n    def __init__(self, code: int, headers: dict, text: str) -> None:\n        self.status_code = code\n        self.headers = headers\n        self.text = text\ndef __init__(self, code: int, headers: dict, text: str) -> None:\n    self.status_code = code\n    self.headers = headers\n    self.text = text\nself.status_code = code\nself.headers = headers\nself.text = text\nclass TestValidateLinks(unittest.TestCase):\n\n    def setUp(self):\n        self.duplicate_links = ['https://www.example.com', 'https://www.example.com', 'https://www.example.com', 'https://www.anotherexample.com']\n        self.no_duplicate_links = ['https://www.firstexample.com', 'https://www.secondexample.com', 'https://www.anotherexample.com']\n        self.code_200 = 200\n        self.code_403 = 403\n        self.code_503 = 503\n        self.cloudflare_headers = {'Server': 'cloudflare'}\n        self.no_cloudflare_headers = {'Server': 'google'}\n        self.text_with_cloudflare_flags = '403 Forbidden Cloudflare We are checking your browser...'\n        self.text_without_cloudflare_flags = 'Lorem Ipsum'\n\n    def test_find_link_in_text(self):\n        text = '\\n            # this is valid\\n\\n            http://example.com?param1=1&param2=2#anchor\\n            https://www.example.com?param1=1&param2=2#anchor\\n            https://www.example.com.br\\n            https://www.example.com.gov.br\\n            [Example](https://www.example.com?param1=1&param2=2#anchor)\\n            lorem ipsum https://www.example.com?param1=1&param2=2#anchor\\n            https://www.example.com?param1=1&param2=2#anchor lorem ipsum\\n\\n            # this not is valid\\n\\n            example.com\\n            https:example.com\\n            https:/example.com\\n            https//example.com\\n            https//.com\\n        '\n        links = find_links_in_text(text)\n        self.assertIsInstance(links, list)\n        self.assertEqual(len(links), 7)\n        for link in links:\n            with self.subTest():\n                self.assertIsInstance(link, str)\n\n    def test_find_link_in_text_with_invalid_argument(self):\n        with self.assertRaises(TypeError):\n            find_links_in_text()\n            find_links_in_text(1)\n            find_links_in_text(True)\n\n    def test_if_check_duplicate_links_has_the_correct_return(self):\n        result_1 = check_duplicate_links(self.duplicate_links)\n        result_2 = check_duplicate_links(self.no_duplicate_links)\n        self.assertIsInstance(result_1, tuple)\n        self.assertIsInstance(result_2, tuple)\n        (has_duplicate_links, links) = result_1\n        (no_duplicate_links, no_links) = result_2\n        self.assertTrue(has_duplicate_links)\n        self.assertFalse(no_duplicate_links)\n        self.assertIsInstance(links, list)\n        self.assertIsInstance(no_links, list)\n        self.assertEqual(len(links), 2)\n        self.assertEqual(len(no_links), 0)\n\n    def test_if_fake_user_agent_has_a_str_as_return(self):\n        user_agent = fake_user_agent()\n        self.assertIsInstance(user_agent, str)\n\n    def test_get_host_from_link(self):\n        links = ['example.com', 'https://example.com', 'https://www.example.com', 'https://www.example.com.br', 'https://www.example.com/route', 'https://www.example.com?p=1&q=2', 'https://www.example.com#anchor']\n        for link in links:\n            host = get_host_from_link(link)\n            with self.subTest():\n                self.assertIsInstance(host, str)\n                self.assertNotIn('://', host)\n                self.assertNotIn('/', host)\n                self.assertNotIn('?', host)\n                self.assertNotIn('#', host)\n        with self.assertRaises(TypeError):\n            get_host_from_link()\n\n    def test_has_cloudflare_protection_with_code_403_and_503_in_response(self):\n        resp_with_cloudflare_protection_code_403 = FakeResponse(code=self.code_403, headers=self.cloudflare_headers, text=self.text_with_cloudflare_flags)\n        resp_with_cloudflare_protection_code_503 = FakeResponse(code=self.code_503, headers=self.cloudflare_headers, text=self.text_with_cloudflare_flags)\n        result1 = has_cloudflare_protection(resp_with_cloudflare_protection_code_403)\n        result2 = has_cloudflare_protection(resp_with_cloudflare_protection_code_503)\n        self.assertTrue(result1)\n        self.assertTrue(result2)\n\n    def test_has_cloudflare_protection_when_there_is_no_protection(self):\n        resp_without_cloudflare_protection1 = FakeResponse(code=self.code_200, headers=self.no_cloudflare_headers, text=self.text_without_cloudflare_flags)\n        resp_without_cloudflare_protection2 = FakeResponse(code=self.code_403, headers=self.no_cloudflare_headers, text=self.text_without_cloudflare_flags)\n        resp_without_cloudflare_protection3 = FakeResponse(code=self.code_503, headers=self.no_cloudflare_headers, text=self.text_without_cloudflare_flags)\n        result1 = has_cloudflare_protection(resp_without_cloudflare_protection1)\n        result2 = has_cloudflare_protection(resp_without_cloudflare_protection2)\n        result3 = has_cloudflare_protection(resp_without_cloudflare_protection3)\n        self.assertFalse(result1)\n        self.assertFalse(result2)\n        self.assertFalse(result3)\ndef setUp(self):\n    self.duplicate_links = ['https://www.example.com', 'https://www.example.com', 'https://www.example.com', 'https://www.anotherexample.com']\n    self.no_duplicate_links = ['https://www.firstexample.com', 'https://www.secondexample.com', 'https://www.anotherexample.com']\n    self.code_200 = 200\n    self.code_403 = 403\n    self.code_503 = 503\n    self.cloudflare_headers = {'Server': 'cloudflare'}\n    self.no_cloudflare_headers = {'Server': 'google'}\n    self.text_with_cloudflare_flags = '403 Forbidden Cloudflare We are checking your browser...'\n    self.text_without_cloudflare_flags = 'Lorem Ipsum'\nself.duplicate_links = ['https://www.example.com', 'https://www.example.com', 'https://www.example.com', 'https://www.anotherexample.com']\nself.no_duplicate_links = ['https://www.firstexample.com', 'https://www.secondexample.com', 'https://www.anotherexample.com']\nself.code_200 = 200\nself.code_403 = 403\nself.code_503 = 503\nself.cloudflare_headers = {'Server': 'cloudflare'}\nself.no_cloudflare_headers = {'Server': 'google'}\nself.text_with_cloudflare_flags = '403 Forbidden Cloudflare We are checking your browser...'\nself.text_without_cloudflare_flags = 'Lorem Ipsum'\ndef test_find_link_in_text(self):\n    text = '\\n            # this is valid\\n\\n            http://example.com?param1=1&param2=2#anchor\\n            https://www.example.com?param1=1&param2=2#anchor\\n            https://www.example.com.br\\n            https://www.example.com.gov.br\\n            [Example](https://www.example.com?param1=1&param2=2#anchor)\\n            lorem ipsum https://www.example.com?param1=1&param2=2#anchor\\n            https://www.example.com?param1=1&param2=2#anchor lorem ipsum\\n\\n            # this not is valid\\n\\n            example.com\\n            https:example.com\\n            https:/example.com\\n            https//example.com\\n            https//.com\\n        '\n    links = find_links_in_text(text)\n    self.assertIsInstance(links, list)\n    self.assertEqual(len(links), 7)\n    for link in links:\n        with self.subTest():\n            self.assertIsInstance(link, str)\ntext = '\\n            # this is valid\\n\\n            http://example.com?param1=1&param2=2#anchor\\n            https://www.example.com?param1=1&param2=2#anchor\\n            https://www.example.com.br\\n            https://www.example.com.gov.br\\n            [Example](https://www.example.com?param1=1&param2=2#anchor)\\n            lorem ipsum https://www.example.com?param1=1&param2=2#anchor\\n            https://www.example.com?param1=1&param2=2#anchor lorem ipsum\\n\\n            # this not is valid\\n\\n            example.com\\n            https:example.com\\n            https:/example.com\\n            https//example.com\\n            https//.com\\n        '\nlinks = find_links_in_text(text)\nself.assertIsInstance(links, list)\nself.assertEqual(len(links), 7)"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "link",
        "links"
      ],
      "code": "link\nlinks"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [
        "with self.subTest():\n    self.assertIsInstance(link, str)",
        "self.assertIsInstance(link, str)"
      ],
      "code": "with self.subTest():\n    self.assertIsInstance(link, str)\nself.assertIsInstance(link, str)"
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [
        "def test_find_link_in_text_with_invalid_argument(self):\n    with self.assertRaises(TypeError):\n        find_links_in_text()\n        find_links_in_text(1)\n        find_links_in_text(True)",
        "with self.assertRaises(TypeError):\n    find_links_in_text()\n    find_links_in_text(1)\n    find_links_in_text(True)",
        "find_links_in_text()",
        "find_links_in_text(1)",
        "find_links_in_text(True)",
        "def test_if_check_duplicate_links_has_the_correct_return(self):\n    result_1 = check_duplicate_links(self.duplicate_links)\n    result_2 = check_duplicate_links(self.no_duplicate_links)\n    self.assertIsInstance(result_1, tuple)\n    self.assertIsInstance(result_2, tuple)\n    (has_duplicate_links, links) = result_1\n    (no_duplicate_links, no_links) = result_2\n    self.assertTrue(has_duplicate_links)\n    self.assertFalse(no_duplicate_links)\n    self.assertIsInstance(links, list)\n    self.assertIsInstance(no_links, list)\n    self.assertEqual(len(links), 2)\n    self.assertEqual(len(no_links), 0)",
        "result_1 = check_duplicate_links(self.duplicate_links)",
        "result_2 = check_duplicate_links(self.no_duplicate_links)",
        "self.assertIsInstance(result_1, tuple)",
        "self.assertIsInstance(result_2, tuple)",
        "(has_duplicate_links, links) = result_1",
        "(no_duplicate_links, no_links) = result_2",
        "self.assertTrue(has_duplicate_links)",
        "self.assertFalse(no_duplicate_links)",
        "self.assertIsInstance(links, list)",
        "self.assertIsInstance(no_links, list)",
        "self.assertEqual(len(links), 2)",
        "self.assertEqual(len(no_links), 0)",
        "def test_if_fake_user_agent_has_a_str_as_return(self):\n    user_agent = fake_user_agent()\n    self.assertIsInstance(user_agent, str)",
        "user_agent = fake_user_agent()",
        "self.assertIsInstance(user_agent, str)",
        "def test_get_host_from_link(self):\n    links = ['example.com', 'https://example.com', 'https://www.example.com', 'https://www.example.com.br', 'https://www.example.com/route', 'https://www.example.com?p=1&q=2', 'https://www.example.com#anchor']\n    for link in links:\n        host = get_host_from_link(link)\n        with self.subTest():\n            self.assertIsInstance(host, str)\n            self.assertNotIn('://', host)\n            self.assertNotIn('/', host)\n            self.assertNotIn('?', host)\n            self.assertNotIn('#', host)\n    with self.assertRaises(TypeError):\n        get_host_from_link()",
        "links = ['example.com', 'https://example.com', 'https://www.example.com', 'https://www.example.com.br', 'https://www.example.com/route', 'https://www.example.com?p=1&q=2', 'https://www.example.com#anchor']"
      ],
      "code": "def test_find_link_in_text_with_invalid_argument(self):\n    with self.assertRaises(TypeError):\n        find_links_in_text()\n        find_links_in_text(1)\n        find_links_in_text(True)\nwith self.assertRaises(TypeError):\n    find_links_in_text()\n    find_links_in_text(1)\n    find_links_in_text(True)\nfind_links_in_text()\nfind_links_in_text(1)\nfind_links_in_text(True)\ndef test_if_check_duplicate_links_has_the_correct_return(self):\n    result_1 = check_duplicate_links(self.duplicate_links)\n    result_2 = check_duplicate_links(self.no_duplicate_links)\n    self.assertIsInstance(result_1, tuple)\n    self.assertIsInstance(result_2, tuple)\n    (has_duplicate_links, links) = result_1\n    (no_duplicate_links, no_links) = result_2\n    self.assertTrue(has_duplicate_links)\n    self.assertFalse(no_duplicate_links)\n    self.assertIsInstance(links, list)\n    self.assertIsInstance(no_links, list)\n    self.assertEqual(len(links), 2)\n    self.assertEqual(len(no_links), 0)\nresult_1 = check_duplicate_links(self.duplicate_links)\nresult_2 = check_duplicate_links(self.no_duplicate_links)\nself.assertIsInstance(result_1, tuple)\nself.assertIsInstance(result_2, tuple)\n(has_duplicate_links, links) = result_1\n(no_duplicate_links, no_links) = result_2\nself.assertTrue(has_duplicate_links)\nself.assertFalse(no_duplicate_links)\nself.assertIsInstance(links, list)\nself.assertIsInstance(no_links, list)\nself.assertEqual(len(links), 2)\nself.assertEqual(len(no_links), 0)\ndef test_if_fake_user_agent_has_a_str_as_return(self):\n    user_agent = fake_user_agent()\n    self.assertIsInstance(user_agent, str)\nuser_agent = fake_user_agent()\nself.assertIsInstance(user_agent, str)\ndef test_get_host_from_link(self):\n    links = ['example.com', 'https://example.com', 'https://www.example.com', 'https://www.example.com.br', 'https://www.example.com/route', 'https://www.example.com?p=1&q=2', 'https://www.example.com#anchor']\n    for link in links:\n        host = get_host_from_link(link)\n        with self.subTest():\n            self.assertIsInstance(host, str)\n            self.assertNotIn('://', host)\n            self.assertNotIn('/', host)\n            self.assertNotIn('?', host)\n            self.assertNotIn('#', host)\n    with self.assertRaises(TypeError):\n        get_host_from_link()\nlinks = ['example.com', 'https://example.com', 'https://www.example.com', 'https://www.example.com.br', 'https://www.example.com/route', 'https://www.example.com?p=1&q=2', 'https://www.example.com#anchor']"
    },
    {
      "id": "n4",
      "type": "block",
      "statements": [
        "link",
        "links"
      ],
      "code": "link\nlinks"
    },
    {
      "id": "n5",
      "type": "block",
      "statements": [
        "host = get_host_from_link(link)",
        "with self.subTest():\n    self.assertIsInstance(host, str)\n    self.assertNotIn('://', host)\n    self.assertNotIn('/', host)\n    self.assertNotIn('?', host)\n    self.assertNotIn('#', host)",
        "self.assertIsInstance(host, str)",
        "self.assertNotIn('://', host)",
        "self.assertNotIn('/', host)",
        "self.assertNotIn('?', host)",
        "self.assertNotIn('#', host)"
      ],
      "code": "host = get_host_from_link(link)\nwith self.subTest():\n    self.assertIsInstance(host, str)\n    self.assertNotIn('://', host)\n    self.assertNotIn('/', host)\n    self.assertNotIn('?', host)\n    self.assertNotIn('#', host)\nself.assertIsInstance(host, str)\nself.assertNotIn('://', host)\nself.assertNotIn('/', host)\nself.assertNotIn('?', host)\nself.assertNotIn('#', host)"
    },
    {
      "id": "n6",
      "type": "block",
      "statements": [
        "with self.assertRaises(TypeError):\n    get_host_from_link()",
        "get_host_from_link()",
        "def test_has_cloudflare_protection_with_code_403_and_503_in_response(self):\n    resp_with_cloudflare_protection_code_403 = FakeResponse(code=self.code_403, headers=self.cloudflare_headers, text=self.text_with_cloudflare_flags)\n    resp_with_cloudflare_protection_code_503 = FakeResponse(code=self.code_503, headers=self.cloudflare_headers, text=self.text_with_cloudflare_flags)\n    result1 = has_cloudflare_protection(resp_with_cloudflare_protection_code_403)\n    result2 = has_cloudflare_protection(resp_with_cloudflare_protection_code_503)\n    self.assertTrue(result1)\n    self.assertTrue(result2)",
        "resp_with_cloudflare_protection_code_403 = FakeResponse(code=self.code_403, headers=self.cloudflare_headers, text=self.text_with_cloudflare_flags)",
        "resp_with_cloudflare_protection_code_503 = FakeResponse(code=self.code_503, headers=self.cloudflare_headers, text=self.text_with_cloudflare_flags)",
        "result1 = has_cloudflare_protection(resp_with_cloudflare_protection_code_403)",
        "result2 = has_cloudflare_protection(resp_with_cloudflare_protection_code_503)",
        "self.assertTrue(result1)",
        "self.assertTrue(result2)",
        "def test_has_cloudflare_protection_when_there_is_no_protection(self):\n    resp_without_cloudflare_protection1 = FakeResponse(code=self.code_200, headers=self.no_cloudflare_headers, text=self.text_without_cloudflare_flags)\n    resp_without_cloudflare_protection2 = FakeResponse(code=self.code_403, headers=self.no_cloudflare_headers, text=self.text_without_cloudflare_flags)\n    resp_without_cloudflare_protection3 = FakeResponse(code=self.code_503, headers=self.no_cloudflare_headers, text=self.text_without_cloudflare_flags)\n    result1 = has_cloudflare_protection(resp_without_cloudflare_protection1)\n    result2 = has_cloudflare_protection(resp_without_cloudflare_protection2)\n    result3 = has_cloudflare_protection(resp_without_cloudflare_protection3)\n    self.assertFalse(result1)\n    self.assertFalse(result2)\n    self.assertFalse(result3)",
        "resp_without_cloudflare_protection1 = FakeResponse(code=self.code_200, headers=self.no_cloudflare_headers, text=self.text_without_cloudflare_flags)",
        "resp_without_cloudflare_protection2 = FakeResponse(code=self.code_403, headers=self.no_cloudflare_headers, text=self.text_without_cloudflare_flags)",
        "resp_without_cloudflare_protection3 = FakeResponse(code=self.code_503, headers=self.no_cloudflare_headers, text=self.text_without_cloudflare_flags)",
        "result1 = has_cloudflare_protection(resp_without_cloudflare_protection1)",
        "result2 = has_cloudflare_protection(resp_without_cloudflare_protection2)",
        "result3 = has_cloudflare_protection(resp_without_cloudflare_protection3)",
        "self.assertFalse(result1)",
        "self.assertFalse(result2)",
        "self.assertFalse(result3)"
      ],
      "code": "with self.assertRaises(TypeError):\n    get_host_from_link()\nget_host_from_link()\ndef test_has_cloudflare_protection_with_code_403_and_503_in_response(self):\n    resp_with_cloudflare_protection_code_403 = FakeResponse(code=self.code_403, headers=self.cloudflare_headers, text=self.text_with_cloudflare_flags)\n    resp_with_cloudflare_protection_code_503 = FakeResponse(code=self.code_503, headers=self.cloudflare_headers, text=self.text_with_cloudflare_flags)\n    result1 = has_cloudflare_protection(resp_with_cloudflare_protection_code_403)\n    result2 = has_cloudflare_protection(resp_with_cloudflare_protection_code_503)\n    self.assertTrue(result1)\n    self.assertTrue(result2)\nresp_with_cloudflare_protection_code_403 = FakeResponse(code=self.code_403, headers=self.cloudflare_headers, text=self.text_with_cloudflare_flags)\nresp_with_cloudflare_protection_code_503 = FakeResponse(code=self.code_503, headers=self.cloudflare_headers, text=self.text_with_cloudflare_flags)\nresult1 = has_cloudflare_protection(resp_with_cloudflare_protection_code_403)\nresult2 = has_cloudflare_protection(resp_with_cloudflare_protection_code_503)\nself.assertTrue(result1)\nself.assertTrue(result2)\ndef test_has_cloudflare_protection_when_there_is_no_protection(self):\n    resp_without_cloudflare_protection1 = FakeResponse(code=self.code_200, headers=self.no_cloudflare_headers, text=self.text_without_cloudflare_flags)\n    resp_without_cloudflare_protection2 = FakeResponse(code=self.code_403, headers=self.no_cloudflare_headers, text=self.text_without_cloudflare_flags)\n    resp_without_cloudflare_protection3 = FakeResponse(code=self.code_503, headers=self.no_cloudflare_headers, text=self.text_without_cloudflare_flags)\n    result1 = has_cloudflare_protection(resp_without_cloudflare_protection1)\n    result2 = has_cloudflare_protection(resp_without_cloudflare_protection2)\n    result3 = has_cloudflare_protection(resp_without_cloudflare_protection3)\n    self.assertFalse(result1)\n    self.assertFalse(result2)\n    self.assertFalse(result3)\nresp_without_cloudflare_protection1 = FakeResponse(code=self.code_200, headers=self.no_cloudflare_headers, text=self.text_without_cloudflare_flags)\nresp_without_cloudflare_protection2 = FakeResponse(code=self.code_403, headers=self.no_cloudflare_headers, text=self.text_without_cloudflare_flags)\nresp_without_cloudflare_protection3 = FakeResponse(code=self.code_503, headers=self.no_cloudflare_headers, text=self.text_without_cloudflare_flags)\nresult1 = has_cloudflare_protection(resp_without_cloudflare_protection1)\nresult2 = has_cloudflare_protection(resp_without_cloudflare_protection2)\nresult3 = has_cloudflare_protection(resp_without_cloudflare_protection3)\nself.assertFalse(result1)\nself.assertFalse(result2)\nself.assertFalse(result3)"
    }
  ],
  "edges": [
    {
      "source": "n5",
      "target": "n4"
    },
    {
      "source": "n1",
      "target": "n3"
    },
    {
      "source": "n0",
      "target": "n1"
    },
    {
      "source": "n3",
      "target": "n4"
    },
    {
      "source": "n1",
      "target": "n2"
    },
    {
      "source": "n4",
      "target": "n5"
    },
    {
      "source": "n4",
      "target": "n6"
    },
    {
      "source": "n2",
      "target": "n1"
    }
  ]
}