{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "import contextlib",
        "import logging.config",
        "import os",
        "import dotenv",
        "import fastapi",
        "import fastapi.middleware.cors",
        "import fastapi.middleware.gzip",
        "import prisma",
        "import prometheus_fastapi_instrumentator",
        "import sentry_sdk",
        "import sentry_sdk.integrations.asyncio",
        "import sentry_sdk.integrations.fastapi",
        "import sentry_sdk.integrations.starlette",
        "import market.config",
        "import market.routes.admin",
        "import market.routes.agents",
        "import market.routes.analytics",
        "import market.routes.search",
        "import market.routes.submissions",
        "dotenv.load_dotenv()",
        "logging.config.dictConfig(market.config.LogConfig().model_dump())",
        "os.environ.get('SENTRY_DSN')"
      ],
      "code": "import contextlib\nimport logging.config\nimport os\nimport dotenv\nimport fastapi\nimport fastapi.middleware.cors\nimport fastapi.middleware.gzip\nimport prisma\nimport prometheus_fastapi_instrumentator\nimport sentry_sdk\nimport sentry_sdk.integrations.asyncio\nimport sentry_sdk.integrations.fastapi\nimport sentry_sdk.integrations.starlette\nimport market.config\nimport market.routes.admin\nimport market.routes.agents\nimport market.routes.analytics\nimport market.routes.search\nimport market.routes.submissions\ndotenv.load_dotenv()\nlogging.config.dictConfig(market.config.LogConfig().model_dump())\nos.environ.get('SENTRY_DSN')"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "sentry_sdk.init()"
      ],
      "code": "sentry_sdk.init()"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [
        "db_client = prisma.Prisma(auto_register=True)",
        "@contextlib.asynccontextmanager\nasync def lifespan(app: fastapi.FastAPI):\n    await db_client.connect()\n    yield\n    await db_client.disconnect()",
        "await db_client.connect()",
        "(yield)",
        "await db_client.disconnect()",
        "docs_url = '/docs'",
        "app = fastapi.FastAPI(title='Marketplace API', description='AutoGPT Marketplace API is a service that allows users to share AI agents.', summary='Maketplace API', version='0.1', lifespan=lifespan, root_path='/api/v1/market', docs_url=docs_url)",
        "app.add_middleware(fastapi.middleware.gzip.GZipMiddleware)",
        "app.add_middleware()",
        "app.include_router(market.routes.agents.router)",
        "app.include_router(market.routes.search.router)",
        "app.include_router(market.routes.submissions.router)",
        "app.include_router(market.routes.admin.router)",
        "app.include_router(market.routes.analytics.router)",
        "@app.get('/health')\ndef health():\n    return fastapi.responses.HTMLResponse(content='<h1>Marketplace API</h1>', status_code=200)",
        "return fastapi.responses.HTMLResponse(content='<h1>Marketplace API</h1>', status_code=200)"
      ],
      "code": "db_client = prisma.Prisma(auto_register=True)\n@contextlib.asynccontextmanager\nasync def lifespan(app: fastapi.FastAPI):\n    await db_client.connect()\n    yield\n    await db_client.disconnect()\nawait db_client.connect()\n(yield)\nawait db_client.disconnect()\ndocs_url = '/docs'\napp = fastapi.FastAPI(title='Marketplace API', description='AutoGPT Marketplace API is a service that allows users to share AI agents.', summary='Maketplace API', version='0.1', lifespan=lifespan, root_path='/api/v1/market', docs_url=docs_url)\napp.add_middleware(fastapi.middleware.gzip.GZipMiddleware)\napp.add_middleware()\napp.include_router(market.routes.agents.router)\napp.include_router(market.routes.search.router)\napp.include_router(market.routes.submissions.router)\napp.include_router(market.routes.admin.router)\napp.include_router(market.routes.analytics.router)\n@app.get('/health')\ndef health():\n    return fastapi.responses.HTMLResponse(content='<h1>Marketplace API</h1>', status_code=200)\nreturn fastapi.responses.HTMLResponse(content='<h1>Marketplace API</h1>', status_code=200)"
    },
    {
      "id": "n4",
      "type": "block",
      "statements": [
        "@app.get('/')\ndef default():\n    return fastapi.responses.HTMLResponse(content='<h1>Marketplace API</h1>', status_code=200)",
        "return fastapi.responses.HTMLResponse(content='<h1>Marketplace API</h1>', status_code=200)"
      ],
      "code": "@app.get('/')\ndef default():\n    return fastapi.responses.HTMLResponse(content='<h1>Marketplace API</h1>', status_code=200)\nreturn fastapi.responses.HTMLResponse(content='<h1>Marketplace API</h1>', status_code=200)"
    },
    {
      "id": "n5",
      "type": "block",
      "statements": [
        "prometheus_fastapi_instrumentator.Instrumentator().instrument(app).expose(app)"
      ],
      "code": "prometheus_fastapi_instrumentator.Instrumentator().instrument(app).expose(app)"
    }
  ],
  "edges": [
    {
      "source": "n0",
      "target": "n2"
    },
    {
      "source": "n0",
      "target": "n1"
    },
    {
      "source": "n2",
      "target": "n3"
    },
    {
      "source": "n1",
      "target": "n3"
    }
  ]
}