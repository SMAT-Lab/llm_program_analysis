{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "from math import cos, sin, sqrt, tau",
        "from audio_filters.iir_filter import IIRFilter",
        "'\\nCreate 2nd-order IIR filters with Butterworth design.\\n\\nCode based on https://webaudio.github.io/Audio-EQ-Cookbook/audio-eq-cookbook.html\\nAlternatively you can use scipy.signal.butter, which should yield the same results.\\n'",
        "def make_lowpass(frequency: int, samplerate: int, q_factor: float=1 / sqrt(2)) -> IIRFilter:\n    \"\"\"\n    Creates a low-pass filter\n\n    >>> filter = make_lowpass(1000, 48000)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [1.0922959556412573, -1.9828897227476208, 0.9077040443587427, 0.004277569313094809,\n     0.008555138626189618, 0.004277569313094809]\n    \"\"\"\n    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (2 * q_factor)\n    b0 = (1 - _cos) / 2\n    b1 = 1 - _cos\n    a0 = 1 + alpha\n    a1 = -2 * _cos\n    a2 = 1 - alpha\n    filt = IIRFilter(2)\n    filt.set_coefficients([a0, a1, a2], [b0, b1, b0])\n    return filt",
        "'\\n    Creates a low-pass filter\\n\\n    >>> filter = make_lowpass(1000, 48000)\\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\\n    [1.0922959556412573, -1.9828897227476208, 0.9077040443587427, 0.004277569313094809,\\n     0.008555138626189618, 0.004277569313094809]\\n    '",
        "w0 = tau * frequency / samplerate",
        "_sin = sin(w0)",
        "_cos = cos(w0)",
        "alpha = _sin / (2 * q_factor)",
        "b0 = (1 - _cos) / 2",
        "b1 = 1 - _cos",
        "a0 = 1 + alpha",
        "a1 = -2 * _cos",
        "a2 = 1 - alpha",
        "filt = IIRFilter(2)",
        "filt.set_coefficients([a0, a1, a2], [b0, b1, b0])",
        "return filt"
      ],
      "code": "from math import cos, sin, sqrt, tau\nfrom audio_filters.iir_filter import IIRFilter\n'\\nCreate 2nd-order IIR filters with Butterworth design.\\n\\nCode based on https://webaudio.github.io/Audio-EQ-Cookbook/audio-eq-cookbook.html\\nAlternatively you can use scipy.signal.butter, which should yield the same results.\\n'\ndef make_lowpass(frequency: int, samplerate: int, q_factor: float=1 / sqrt(2)) -> IIRFilter:\n    \"\"\"\n    Creates a low-pass filter\n\n    >>> filter = make_lowpass(1000, 48000)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [1.0922959556412573, -1.9828897227476208, 0.9077040443587427, 0.004277569313094809,\n     0.008555138626189618, 0.004277569313094809]\n    \"\"\"\n    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (2 * q_factor)\n    b0 = (1 - _cos) / 2\n    b1 = 1 - _cos\n    a0 = 1 + alpha\n    a1 = -2 * _cos\n    a2 = 1 - alpha\n    filt = IIRFilter(2)\n    filt.set_coefficients([a0, a1, a2], [b0, b1, b0])\n    return filt\n'\\n    Creates a low-pass filter\\n\\n    >>> filter = make_lowpass(1000, 48000)\\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\\n    [1.0922959556412573, -1.9828897227476208, 0.9077040443587427, 0.004277569313094809,\\n     0.008555138626189618, 0.004277569313094809]\\n    '\nw0 = tau * frequency / samplerate\n_sin = sin(w0)\n_cos = cos(w0)\nalpha = _sin / (2 * q_factor)\nb0 = (1 - _cos) / 2\nb1 = 1 - _cos\na0 = 1 + alpha\na1 = -2 * _cos\na2 = 1 - alpha\nfilt = IIRFilter(2)\nfilt.set_coefficients([a0, a1, a2], [b0, b1, b0])\nreturn filt"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "def make_highpass(frequency: int, samplerate: int, q_factor: float=1 / sqrt(2)) -> IIRFilter:\n    \"\"\"\n    Creates a high-pass filter\n\n    >>> filter = make_highpass(1000, 48000)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [1.0922959556412573, -1.9828897227476208, 0.9077040443587427, 0.9957224306869052,\n     -1.9914448613738105, 0.9957224306869052]\n    \"\"\"\n    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (2 * q_factor)\n    b0 = (1 + _cos) / 2\n    b1 = -1 - _cos\n    a0 = 1 + alpha\n    a1 = -2 * _cos\n    a2 = 1 - alpha\n    filt = IIRFilter(2)\n    filt.set_coefficients([a0, a1, a2], [b0, b1, b0])\n    return filt",
        "'\\n    Creates a high-pass filter\\n\\n    >>> filter = make_highpass(1000, 48000)\\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\\n    [1.0922959556412573, -1.9828897227476208, 0.9077040443587427, 0.9957224306869052,\\n     -1.9914448613738105, 0.9957224306869052]\\n    '",
        "w0 = tau * frequency / samplerate",
        "_sin = sin(w0)",
        "_cos = cos(w0)",
        "alpha = _sin / (2 * q_factor)",
        "b0 = (1 + _cos) / 2",
        "b1 = -1 - _cos",
        "a0 = 1 + alpha",
        "a1 = -2 * _cos",
        "a2 = 1 - alpha",
        "filt = IIRFilter(2)",
        "filt.set_coefficients([a0, a1, a2], [b0, b1, b0])",
        "return filt"
      ],
      "code": "def make_highpass(frequency: int, samplerate: int, q_factor: float=1 / sqrt(2)) -> IIRFilter:\n    \"\"\"\n    Creates a high-pass filter\n\n    >>> filter = make_highpass(1000, 48000)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [1.0922959556412573, -1.9828897227476208, 0.9077040443587427, 0.9957224306869052,\n     -1.9914448613738105, 0.9957224306869052]\n    \"\"\"\n    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (2 * q_factor)\n    b0 = (1 + _cos) / 2\n    b1 = -1 - _cos\n    a0 = 1 + alpha\n    a1 = -2 * _cos\n    a2 = 1 - alpha\n    filt = IIRFilter(2)\n    filt.set_coefficients([a0, a1, a2], [b0, b1, b0])\n    return filt\n'\\n    Creates a high-pass filter\\n\\n    >>> filter = make_highpass(1000, 48000)\\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\\n    [1.0922959556412573, -1.9828897227476208, 0.9077040443587427, 0.9957224306869052,\\n     -1.9914448613738105, 0.9957224306869052]\\n    '\nw0 = tau * frequency / samplerate\n_sin = sin(w0)\n_cos = cos(w0)\nalpha = _sin / (2 * q_factor)\nb0 = (1 + _cos) / 2\nb1 = -1 - _cos\na0 = 1 + alpha\na1 = -2 * _cos\na2 = 1 - alpha\nfilt = IIRFilter(2)\nfilt.set_coefficients([a0, a1, a2], [b0, b1, b0])\nreturn filt"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [
        "def make_bandpass(frequency: int, samplerate: int, q_factor: float=1 / sqrt(2)) -> IIRFilter:\n    \"\"\"\n    Creates a band-pass filter\n\n    >>> filter = make_bandpass(1000, 48000)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [1.0922959556412573, -1.9828897227476208, 0.9077040443587427, 0.06526309611002579,\n     0, -0.06526309611002579]\n    \"\"\"\n    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (2 * q_factor)\n    b0 = _sin / 2\n    b1 = 0\n    b2 = -b0\n    a0 = 1 + alpha\n    a1 = -2 * _cos\n    a2 = 1 - alpha\n    filt = IIRFilter(2)\n    filt.set_coefficients([a0, a1, a2], [b0, b1, b2])\n    return filt",
        "'\\n    Creates a band-pass filter\\n\\n    >>> filter = make_bandpass(1000, 48000)\\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\\n    [1.0922959556412573, -1.9828897227476208, 0.9077040443587427, 0.06526309611002579,\\n     0, -0.06526309611002579]\\n    '",
        "w0 = tau * frequency / samplerate",
        "_sin = sin(w0)",
        "_cos = cos(w0)",
        "alpha = _sin / (2 * q_factor)",
        "b0 = _sin / 2",
        "b1 = 0",
        "b2 = -b0",
        "a0 = 1 + alpha",
        "a1 = -2 * _cos",
        "a2 = 1 - alpha",
        "filt = IIRFilter(2)",
        "filt.set_coefficients([a0, a1, a2], [b0, b1, b2])",
        "return filt"
      ],
      "code": "def make_bandpass(frequency: int, samplerate: int, q_factor: float=1 / sqrt(2)) -> IIRFilter:\n    \"\"\"\n    Creates a band-pass filter\n\n    >>> filter = make_bandpass(1000, 48000)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [1.0922959556412573, -1.9828897227476208, 0.9077040443587427, 0.06526309611002579,\n     0, -0.06526309611002579]\n    \"\"\"\n    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (2 * q_factor)\n    b0 = _sin / 2\n    b1 = 0\n    b2 = -b0\n    a0 = 1 + alpha\n    a1 = -2 * _cos\n    a2 = 1 - alpha\n    filt = IIRFilter(2)\n    filt.set_coefficients([a0, a1, a2], [b0, b1, b2])\n    return filt\n'\\n    Creates a band-pass filter\\n\\n    >>> filter = make_bandpass(1000, 48000)\\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\\n    [1.0922959556412573, -1.9828897227476208, 0.9077040443587427, 0.06526309611002579,\\n     0, -0.06526309611002579]\\n    '\nw0 = tau * frequency / samplerate\n_sin = sin(w0)\n_cos = cos(w0)\nalpha = _sin / (2 * q_factor)\nb0 = _sin / 2\nb1 = 0\nb2 = -b0\na0 = 1 + alpha\na1 = -2 * _cos\na2 = 1 - alpha\nfilt = IIRFilter(2)\nfilt.set_coefficients([a0, a1, a2], [b0, b1, b2])\nreturn filt"
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [
        "def make_allpass(frequency: int, samplerate: int, q_factor: float=1 / sqrt(2)) -> IIRFilter:\n    \"\"\"\n    Creates an all-pass filter\n\n    >>> filter = make_allpass(1000, 48000)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [1.0922959556412573, -1.9828897227476208, 0.9077040443587427, 0.9077040443587427,\n     -1.9828897227476208, 1.0922959556412573]\n    \"\"\"\n    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (2 * q_factor)\n    b0 = 1 - alpha\n    b1 = -2 * _cos\n    b2 = 1 + alpha\n    filt = IIRFilter(2)\n    filt.set_coefficients([b2, b1, b0], [b0, b1, b2])\n    return filt",
        "'\\n    Creates an all-pass filter\\n\\n    >>> filter = make_allpass(1000, 48000)\\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\\n    [1.0922959556412573, -1.9828897227476208, 0.9077040443587427, 0.9077040443587427,\\n     -1.9828897227476208, 1.0922959556412573]\\n    '",
        "w0 = tau * frequency / samplerate",
        "_sin = sin(w0)",
        "_cos = cos(w0)",
        "alpha = _sin / (2 * q_factor)",
        "b0 = 1 - alpha",
        "b1 = -2 * _cos",
        "b2 = 1 + alpha",
        "filt = IIRFilter(2)",
        "filt.set_coefficients([b2, b1, b0], [b0, b1, b2])",
        "return filt"
      ],
      "code": "def make_allpass(frequency: int, samplerate: int, q_factor: float=1 / sqrt(2)) -> IIRFilter:\n    \"\"\"\n    Creates an all-pass filter\n\n    >>> filter = make_allpass(1000, 48000)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [1.0922959556412573, -1.9828897227476208, 0.9077040443587427, 0.9077040443587427,\n     -1.9828897227476208, 1.0922959556412573]\n    \"\"\"\n    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (2 * q_factor)\n    b0 = 1 - alpha\n    b1 = -2 * _cos\n    b2 = 1 + alpha\n    filt = IIRFilter(2)\n    filt.set_coefficients([b2, b1, b0], [b0, b1, b2])\n    return filt\n'\\n    Creates an all-pass filter\\n\\n    >>> filter = make_allpass(1000, 48000)\\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\\n    [1.0922959556412573, -1.9828897227476208, 0.9077040443587427, 0.9077040443587427,\\n     -1.9828897227476208, 1.0922959556412573]\\n    '\nw0 = tau * frequency / samplerate\n_sin = sin(w0)\n_cos = cos(w0)\nalpha = _sin / (2 * q_factor)\nb0 = 1 - alpha\nb1 = -2 * _cos\nb2 = 1 + alpha\nfilt = IIRFilter(2)\nfilt.set_coefficients([b2, b1, b0], [b0, b1, b2])\nreturn filt"
    },
    {
      "id": "n4",
      "type": "block",
      "statements": [
        "def make_peak(frequency: int, samplerate: int, gain_db: float, q_factor: float=1 / sqrt(2)) -> IIRFilter:\n    \"\"\"\n    Creates a peak filter\n\n    >>> filter = make_peak(1000, 48000, 6)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [1.0653405327119334, -1.9828897227476208, 0.9346594672880666, 1.1303715025601122,\n     -1.9828897227476208, 0.8696284974398878]\n    \"\"\"\n    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (2 * q_factor)\n    big_a = 10 ** (gain_db / 40)\n    b0 = 1 + alpha * big_a\n    b1 = -2 * _cos\n    b2 = 1 - alpha * big_a\n    a0 = 1 + alpha / big_a\n    a1 = -2 * _cos\n    a2 = 1 - alpha / big_a\n    filt = IIRFilter(2)\n    filt.set_coefficients([a0, a1, a2], [b0, b1, b2])\n    return filt",
        "'\\n    Creates a peak filter\\n\\n    >>> filter = make_peak(1000, 48000, 6)\\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\\n    [1.0653405327119334, -1.9828897227476208, 0.9346594672880666, 1.1303715025601122,\\n     -1.9828897227476208, 0.8696284974398878]\\n    '",
        "w0 = tau * frequency / samplerate",
        "_sin = sin(w0)",
        "_cos = cos(w0)",
        "alpha = _sin / (2 * q_factor)",
        "big_a = 10 ** (gain_db / 40)",
        "b0 = 1 + alpha * big_a",
        "b1 = -2 * _cos",
        "b2 = 1 - alpha * big_a",
        "a0 = 1 + alpha / big_a",
        "a1 = -2 * _cos",
        "a2 = 1 - alpha / big_a",
        "filt = IIRFilter(2)",
        "filt.set_coefficients([a0, a1, a2], [b0, b1, b2])",
        "return filt"
      ],
      "code": "def make_peak(frequency: int, samplerate: int, gain_db: float, q_factor: float=1 / sqrt(2)) -> IIRFilter:\n    \"\"\"\n    Creates a peak filter\n\n    >>> filter = make_peak(1000, 48000, 6)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [1.0653405327119334, -1.9828897227476208, 0.9346594672880666, 1.1303715025601122,\n     -1.9828897227476208, 0.8696284974398878]\n    \"\"\"\n    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (2 * q_factor)\n    big_a = 10 ** (gain_db / 40)\n    b0 = 1 + alpha * big_a\n    b1 = -2 * _cos\n    b2 = 1 - alpha * big_a\n    a0 = 1 + alpha / big_a\n    a1 = -2 * _cos\n    a2 = 1 - alpha / big_a\n    filt = IIRFilter(2)\n    filt.set_coefficients([a0, a1, a2], [b0, b1, b2])\n    return filt\n'\\n    Creates a peak filter\\n\\n    >>> filter = make_peak(1000, 48000, 6)\\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\\n    [1.0653405327119334, -1.9828897227476208, 0.9346594672880666, 1.1303715025601122,\\n     -1.9828897227476208, 0.8696284974398878]\\n    '\nw0 = tau * frequency / samplerate\n_sin = sin(w0)\n_cos = cos(w0)\nalpha = _sin / (2 * q_factor)\nbig_a = 10 ** (gain_db / 40)\nb0 = 1 + alpha * big_a\nb1 = -2 * _cos\nb2 = 1 - alpha * big_a\na0 = 1 + alpha / big_a\na1 = -2 * _cos\na2 = 1 - alpha / big_a\nfilt = IIRFilter(2)\nfilt.set_coefficients([a0, a1, a2], [b0, b1, b2])\nreturn filt"
    },
    {
      "id": "n5",
      "type": "block",
      "statements": [
        "def make_lowshelf(frequency: int, samplerate: int, gain_db: float, q_factor: float=1 / sqrt(2)) -> IIRFilter:\n    \"\"\"\n    Creates a low-shelf filter\n\n    >>> filter = make_lowshelf(1000, 48000, 6)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [3.0409336710888786, -5.608870992220748, 2.602157875636628, 3.139954022810743,\n     -5.591841778072785, 2.5201667380627257]\n    \"\"\"\n    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (2 * q_factor)\n    big_a = 10 ** (gain_db / 40)\n    pmc = big_a + 1 - (big_a - 1) * _cos\n    ppmc = big_a + 1 + (big_a - 1) * _cos\n    mpc = big_a - 1 - (big_a + 1) * _cos\n    pmpc = big_a - 1 + (big_a + 1) * _cos\n    aa2 = 2 * sqrt(big_a) * alpha\n    b0 = big_a * (pmc + aa2)\n    b1 = 2 * big_a * mpc\n    b2 = big_a * (pmc - aa2)\n    a0 = ppmc + aa2\n    a1 = -2 * pmpc\n    a2 = ppmc - aa2\n    filt = IIRFilter(2)\n    filt.set_coefficients([a0, a1, a2], [b0, b1, b2])\n    return filt",
        "'\\n    Creates a low-shelf filter\\n\\n    >>> filter = make_lowshelf(1000, 48000, 6)\\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\\n    [3.0409336710888786, -5.608870992220748, 2.602157875636628, 3.139954022810743,\\n     -5.591841778072785, 2.5201667380627257]\\n    '",
        "w0 = tau * frequency / samplerate",
        "_sin = sin(w0)",
        "_cos = cos(w0)",
        "alpha = _sin / (2 * q_factor)",
        "big_a = 10 ** (gain_db / 40)",
        "pmc = big_a + 1 - (big_a - 1) * _cos",
        "ppmc = big_a + 1 + (big_a - 1) * _cos",
        "mpc = big_a - 1 - (big_a + 1) * _cos",
        "pmpc = big_a - 1 + (big_a + 1) * _cos",
        "aa2 = 2 * sqrt(big_a) * alpha",
        "b0 = big_a * (pmc + aa2)",
        "b1 = 2 * big_a * mpc",
        "b2 = big_a * (pmc - aa2)",
        "a0 = ppmc + aa2",
        "a1 = -2 * pmpc",
        "a2 = ppmc - aa2",
        "filt = IIRFilter(2)",
        "filt.set_coefficients([a0, a1, a2], [b0, b1, b2])",
        "return filt"
      ],
      "code": "def make_lowshelf(frequency: int, samplerate: int, gain_db: float, q_factor: float=1 / sqrt(2)) -> IIRFilter:\n    \"\"\"\n    Creates a low-shelf filter\n\n    >>> filter = make_lowshelf(1000, 48000, 6)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [3.0409336710888786, -5.608870992220748, 2.602157875636628, 3.139954022810743,\n     -5.591841778072785, 2.5201667380627257]\n    \"\"\"\n    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (2 * q_factor)\n    big_a = 10 ** (gain_db / 40)\n    pmc = big_a + 1 - (big_a - 1) * _cos\n    ppmc = big_a + 1 + (big_a - 1) * _cos\n    mpc = big_a - 1 - (big_a + 1) * _cos\n    pmpc = big_a - 1 + (big_a + 1) * _cos\n    aa2 = 2 * sqrt(big_a) * alpha\n    b0 = big_a * (pmc + aa2)\n    b1 = 2 * big_a * mpc\n    b2 = big_a * (pmc - aa2)\n    a0 = ppmc + aa2\n    a1 = -2 * pmpc\n    a2 = ppmc - aa2\n    filt = IIRFilter(2)\n    filt.set_coefficients([a0, a1, a2], [b0, b1, b2])\n    return filt\n'\\n    Creates a low-shelf filter\\n\\n    >>> filter = make_lowshelf(1000, 48000, 6)\\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\\n    [3.0409336710888786, -5.608870992220748, 2.602157875636628, 3.139954022810743,\\n     -5.591841778072785, 2.5201667380627257]\\n    '\nw0 = tau * frequency / samplerate\n_sin = sin(w0)\n_cos = cos(w0)\nalpha = _sin / (2 * q_factor)\nbig_a = 10 ** (gain_db / 40)\npmc = big_a + 1 - (big_a - 1) * _cos\nppmc = big_a + 1 + (big_a - 1) * _cos\nmpc = big_a - 1 - (big_a + 1) * _cos\npmpc = big_a - 1 + (big_a + 1) * _cos\naa2 = 2 * sqrt(big_a) * alpha\nb0 = big_a * (pmc + aa2)\nb1 = 2 * big_a * mpc\nb2 = big_a * (pmc - aa2)\na0 = ppmc + aa2\na1 = -2 * pmpc\na2 = ppmc - aa2\nfilt = IIRFilter(2)\nfilt.set_coefficients([a0, a1, a2], [b0, b1, b2])\nreturn filt"
    },
    {
      "id": "n6",
      "type": "block",
      "statements": [
        "def make_highshelf(frequency: int, samplerate: int, gain_db: float, q_factor: float=1 / sqrt(2)) -> IIRFilter:\n    \"\"\"\n    Creates a high-shelf filter\n\n    >>> filter = make_highshelf(1000, 48000, 6)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [2.2229172136088806, -3.9587208137297303, 1.7841414181566304, 4.295432981120543,\n     -7.922740859457287, 3.6756456963725253]\n    \"\"\"\n    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (2 * q_factor)\n    big_a = 10 ** (gain_db / 40)\n    pmc = big_a + 1 - (big_a - 1) * _cos\n    ppmc = big_a + 1 + (big_a - 1) * _cos\n    mpc = big_a - 1 - (big_a + 1) * _cos\n    pmpc = big_a - 1 + (big_a + 1) * _cos\n    aa2 = 2 * sqrt(big_a) * alpha\n    b0 = big_a * (ppmc + aa2)\n    b1 = -2 * big_a * pmpc\n    b2 = big_a * (ppmc - aa2)\n    a0 = pmc + aa2\n    a1 = 2 * mpc\n    a2 = pmc - aa2\n    filt = IIRFilter(2)\n    filt.set_coefficients([a0, a1, a2], [b0, b1, b2])\n    return filt",
        "'\\n    Creates a high-shelf filter\\n\\n    >>> filter = make_highshelf(1000, 48000, 6)\\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\\n    [2.2229172136088806, -3.9587208137297303, 1.7841414181566304, 4.295432981120543,\\n     -7.922740859457287, 3.6756456963725253]\\n    '",
        "w0 = tau * frequency / samplerate",
        "_sin = sin(w0)",
        "_cos = cos(w0)",
        "alpha = _sin / (2 * q_factor)",
        "big_a = 10 ** (gain_db / 40)",
        "pmc = big_a + 1 - (big_a - 1) * _cos",
        "ppmc = big_a + 1 + (big_a - 1) * _cos",
        "mpc = big_a - 1 - (big_a + 1) * _cos",
        "pmpc = big_a - 1 + (big_a + 1) * _cos",
        "aa2 = 2 * sqrt(big_a) * alpha",
        "b0 = big_a * (ppmc + aa2)",
        "b1 = -2 * big_a * pmpc",
        "b2 = big_a * (ppmc - aa2)",
        "a0 = pmc + aa2",
        "a1 = 2 * mpc",
        "a2 = pmc - aa2",
        "filt = IIRFilter(2)",
        "filt.set_coefficients([a0, a1, a2], [b0, b1, b2])",
        "return filt"
      ],
      "code": "def make_highshelf(frequency: int, samplerate: int, gain_db: float, q_factor: float=1 / sqrt(2)) -> IIRFilter:\n    \"\"\"\n    Creates a high-shelf filter\n\n    >>> filter = make_highshelf(1000, 48000, 6)\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\n    [2.2229172136088806, -3.9587208137297303, 1.7841414181566304, 4.295432981120543,\n     -7.922740859457287, 3.6756456963725253]\n    \"\"\"\n    w0 = tau * frequency / samplerate\n    _sin = sin(w0)\n    _cos = cos(w0)\n    alpha = _sin / (2 * q_factor)\n    big_a = 10 ** (gain_db / 40)\n    pmc = big_a + 1 - (big_a - 1) * _cos\n    ppmc = big_a + 1 + (big_a - 1) * _cos\n    mpc = big_a - 1 - (big_a + 1) * _cos\n    pmpc = big_a - 1 + (big_a + 1) * _cos\n    aa2 = 2 * sqrt(big_a) * alpha\n    b0 = big_a * (ppmc + aa2)\n    b1 = -2 * big_a * pmpc\n    b2 = big_a * (ppmc - aa2)\n    a0 = pmc + aa2\n    a1 = 2 * mpc\n    a2 = pmc - aa2\n    filt = IIRFilter(2)\n    filt.set_coefficients([a0, a1, a2], [b0, b1, b2])\n    return filt\n'\\n    Creates a high-shelf filter\\n\\n    >>> filter = make_highshelf(1000, 48000, 6)\\n    >>> filter.a_coeffs + filter.b_coeffs  # doctest: +NORMALIZE_WHITESPACE\\n    [2.2229172136088806, -3.9587208137297303, 1.7841414181566304, 4.295432981120543,\\n     -7.922740859457287, 3.6756456963725253]\\n    '\nw0 = tau * frequency / samplerate\n_sin = sin(w0)\n_cos = cos(w0)\nalpha = _sin / (2 * q_factor)\nbig_a = 10 ** (gain_db / 40)\npmc = big_a + 1 - (big_a - 1) * _cos\nppmc = big_a + 1 + (big_a - 1) * _cos\nmpc = big_a - 1 - (big_a + 1) * _cos\npmpc = big_a - 1 + (big_a + 1) * _cos\naa2 = 2 * sqrt(big_a) * alpha\nb0 = big_a * (ppmc + aa2)\nb1 = -2 * big_a * pmpc\nb2 = big_a * (ppmc - aa2)\na0 = pmc + aa2\na1 = 2 * mpc\na2 = pmc - aa2\nfilt = IIRFilter(2)\nfilt.set_coefficients([a0, a1, a2], [b0, b1, b2])\nreturn filt"
    }
  ],
  "edges": []
}