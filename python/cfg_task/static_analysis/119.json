{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "from timeit import timeit",
        "def get_set_bits_count_using_brian_kernighans_algorithm(number: int) -> int:\n    \"\"\"\n    Count the number of set bits in a 32 bit integer\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(25)\n    3\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(37)\n    3\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(21)\n    3\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(58)\n    4\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(0)\n    0\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(256)\n    1\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: the value of input must not be negative\n    \"\"\"\n    if number < 0:\n        raise ValueError('the value of input must not be negative')\n    result = 0\n    while number:\n        number &= number - 1\n        result += 1\n    return result",
        "'\\n    Count the number of set bits in a 32 bit integer\\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(25)\\n    3\\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(37)\\n    3\\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(21)\\n    3\\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(58)\\n    4\\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(0)\\n    0\\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(256)\\n    1\\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(-1)\\n    Traceback (most recent call last):\\n        ...\\n    ValueError: the value of input must not be negative\\n    '",
        "number Lt 0"
      ],
      "code": "from timeit import timeit\ndef get_set_bits_count_using_brian_kernighans_algorithm(number: int) -> int:\n    \"\"\"\n    Count the number of set bits in a 32 bit integer\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(25)\n    3\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(37)\n    3\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(21)\n    3\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(58)\n    4\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(0)\n    0\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(256)\n    1\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: the value of input must not be negative\n    \"\"\"\n    if number < 0:\n        raise ValueError('the value of input must not be negative')\n    result = 0\n    while number:\n        number &= number - 1\n        result += 1\n    return result\n'\\n    Count the number of set bits in a 32 bit integer\\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(25)\\n    3\\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(37)\\n    3\\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(21)\\n    3\\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(58)\\n    4\\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(0)\\n    0\\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(256)\\n    1\\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(-1)\\n    Traceback (most recent call last):\\n        ...\\n    ValueError: the value of input must not be negative\\n    '\nnumber Lt 0"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "raise ValueError('the value of input must not be negative')"
      ],
      "code": "raise ValueError('the value of input must not be negative')"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [
        "result = 0"
      ],
      "code": "result = 0"
    },
    {
      "id": "n4",
      "type": "block",
      "statements": [
        "number"
      ],
      "code": "number"
    },
    {
      "id": "n5",
      "type": "block",
      "statements": [
        "number &= number - 1",
        "result += 1"
      ],
      "code": "number &= number - 1\nresult += 1"
    },
    {
      "id": "n6",
      "type": "block",
      "statements": [
        "return result"
      ],
      "code": "return result"
    },
    {
      "id": "n7",
      "type": "block",
      "statements": [
        "def get_set_bits_count_using_modulo_operator(number: int) -> int:\n    \"\"\"\n    Count the number of set bits in a 32 bit integer\n    >>> get_set_bits_count_using_modulo_operator(25)\n    3\n    >>> get_set_bits_count_using_modulo_operator(37)\n    3\n    >>> get_set_bits_count_using_modulo_operator(21)\n    3\n    >>> get_set_bits_count_using_modulo_operator(58)\n    4\n    >>> get_set_bits_count_using_modulo_operator(0)\n    0\n    >>> get_set_bits_count_using_modulo_operator(256)\n    1\n    >>> get_set_bits_count_using_modulo_operator(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: the value of input must not be negative\n    \"\"\"\n    if number < 0:\n        raise ValueError('the value of input must not be negative')\n    result = 0\n    while number:\n        if number % 2 == 1:\n            result += 1\n        number >>= 1\n    return result",
        "'\\n    Count the number of set bits in a 32 bit integer\\n    >>> get_set_bits_count_using_modulo_operator(25)\\n    3\\n    >>> get_set_bits_count_using_modulo_operator(37)\\n    3\\n    >>> get_set_bits_count_using_modulo_operator(21)\\n    3\\n    >>> get_set_bits_count_using_modulo_operator(58)\\n    4\\n    >>> get_set_bits_count_using_modulo_operator(0)\\n    0\\n    >>> get_set_bits_count_using_modulo_operator(256)\\n    1\\n    >>> get_set_bits_count_using_modulo_operator(-1)\\n    Traceback (most recent call last):\\n        ...\\n    ValueError: the value of input must not be negative\\n    '",
        "number Lt 0"
      ],
      "code": "def get_set_bits_count_using_modulo_operator(number: int) -> int:\n    \"\"\"\n    Count the number of set bits in a 32 bit integer\n    >>> get_set_bits_count_using_modulo_operator(25)\n    3\n    >>> get_set_bits_count_using_modulo_operator(37)\n    3\n    >>> get_set_bits_count_using_modulo_operator(21)\n    3\n    >>> get_set_bits_count_using_modulo_operator(58)\n    4\n    >>> get_set_bits_count_using_modulo_operator(0)\n    0\n    >>> get_set_bits_count_using_modulo_operator(256)\n    1\n    >>> get_set_bits_count_using_modulo_operator(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: the value of input must not be negative\n    \"\"\"\n    if number < 0:\n        raise ValueError('the value of input must not be negative')\n    result = 0\n    while number:\n        if number % 2 == 1:\n            result += 1\n        number >>= 1\n    return result\n'\\n    Count the number of set bits in a 32 bit integer\\n    >>> get_set_bits_count_using_modulo_operator(25)\\n    3\\n    >>> get_set_bits_count_using_modulo_operator(37)\\n    3\\n    >>> get_set_bits_count_using_modulo_operator(21)\\n    3\\n    >>> get_set_bits_count_using_modulo_operator(58)\\n    4\\n    >>> get_set_bits_count_using_modulo_operator(0)\\n    0\\n    >>> get_set_bits_count_using_modulo_operator(256)\\n    1\\n    >>> get_set_bits_count_using_modulo_operator(-1)\\n    Traceback (most recent call last):\\n        ...\\n    ValueError: the value of input must not be negative\\n    '\nnumber Lt 0"
    },
    {
      "id": "n8",
      "type": "block",
      "statements": [
        "raise ValueError('the value of input must not be negative')"
      ],
      "code": "raise ValueError('the value of input must not be negative')"
    },
    {
      "id": "n9",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n10",
      "type": "block",
      "statements": [
        "result = 0"
      ],
      "code": "result = 0"
    },
    {
      "id": "n11",
      "type": "block",
      "statements": [
        "number"
      ],
      "code": "number"
    },
    {
      "id": "n12",
      "type": "block",
      "statements": [
        "number Mod 2 Eq 1"
      ],
      "code": "number Mod 2 Eq 1"
    },
    {
      "id": "n13",
      "type": "block",
      "statements": [
        "return result"
      ],
      "code": "return result"
    },
    {
      "id": "n14",
      "type": "block",
      "statements": [
        "result += 1"
      ],
      "code": "result += 1"
    },
    {
      "id": "n15",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n16",
      "type": "block",
      "statements": [
        "number >>= 1"
      ],
      "code": "number >>= 1"
    },
    {
      "id": "n17",
      "type": "block",
      "statements": [
        "def benchmark() -> None:\n    \"\"\"\n    Benchmark code for comparing 2 functions, with different length int values.\n    Brian Kernighan's algorithm is consistently faster than using modulo_operator.\n    \"\"\"\n\n    def do_benchmark(number: int) -> None:\n        setup = 'import __main__ as z'\n        print(f'Benchmark when number = {number!r}:')\n        print(f'get_set_bits_count_using_modulo_operator(number) = {get_set_bits_count_using_modulo_operator(number)!r}')\n        timing = timeit(f'z.get_set_bits_count_using_modulo_operator({number})', setup=setup)\n        print(f'timeit() runs in {timing} seconds')\n        print(f'get_set_bits_count_using_brian_kernighans_algorithm(number) = {get_set_bits_count_using_brian_kernighans_algorithm(number)!r}')\n        timing = timeit(f'z.get_set_bits_count_using_brian_kernighans_algorithm({number})', setup=setup)\n        print(f'timeit() runs in {timing} seconds')\n    for number in (25, 37, 58, 0):\n        do_benchmark(number)\n        print()",
        "\"\\n    Benchmark code for comparing 2 functions, with different length int values.\\n    Brian Kernighan's algorithm is consistently faster than using modulo_operator.\\n    \"",
        "def do_benchmark(number: int) -> None:\n    setup = 'import __main__ as z'\n    print(f'Benchmark when number = {number!r}:')\n    print(f'get_set_bits_count_using_modulo_operator(number) = {get_set_bits_count_using_modulo_operator(number)!r}')\n    timing = timeit(f'z.get_set_bits_count_using_modulo_operator({number})', setup=setup)\n    print(f'timeit() runs in {timing} seconds')\n    print(f'get_set_bits_count_using_brian_kernighans_algorithm(number) = {get_set_bits_count_using_brian_kernighans_algorithm(number)!r}')\n    timing = timeit(f'z.get_set_bits_count_using_brian_kernighans_algorithm({number})', setup=setup)\n    print(f'timeit() runs in {timing} seconds')",
        "setup = 'import __main__ as z'",
        "print(f'Benchmark when number = {number!r}:')",
        "print(f'get_set_bits_count_using_modulo_operator(number) = {get_set_bits_count_using_modulo_operator(number)!r}')",
        "timing = timeit(f'z.get_set_bits_count_using_modulo_operator({number})', setup=setup)",
        "print(f'timeit() runs in {timing} seconds')",
        "print(f'get_set_bits_count_using_brian_kernighans_algorithm(number) = {get_set_bits_count_using_brian_kernighans_algorithm(number)!r}')",
        "timing = timeit(f'z.get_set_bits_count_using_brian_kernighans_algorithm({number})', setup=setup)",
        "print(f'timeit() runs in {timing} seconds')"
      ],
      "code": "def benchmark() -> None:\n    \"\"\"\n    Benchmark code for comparing 2 functions, with different length int values.\n    Brian Kernighan's algorithm is consistently faster than using modulo_operator.\n    \"\"\"\n\n    def do_benchmark(number: int) -> None:\n        setup = 'import __main__ as z'\n        print(f'Benchmark when number = {number!r}:')\n        print(f'get_set_bits_count_using_modulo_operator(number) = {get_set_bits_count_using_modulo_operator(number)!r}')\n        timing = timeit(f'z.get_set_bits_count_using_modulo_operator({number})', setup=setup)\n        print(f'timeit() runs in {timing} seconds')\n        print(f'get_set_bits_count_using_brian_kernighans_algorithm(number) = {get_set_bits_count_using_brian_kernighans_algorithm(number)!r}')\n        timing = timeit(f'z.get_set_bits_count_using_brian_kernighans_algorithm({number})', setup=setup)\n        print(f'timeit() runs in {timing} seconds')\n    for number in (25, 37, 58, 0):\n        do_benchmark(number)\n        print()\n\"\\n    Benchmark code for comparing 2 functions, with different length int values.\\n    Brian Kernighan's algorithm is consistently faster than using modulo_operator.\\n    \"\ndef do_benchmark(number: int) -> None:\n    setup = 'import __main__ as z'\n    print(f'Benchmark when number = {number!r}:')\n    print(f'get_set_bits_count_using_modulo_operator(number) = {get_set_bits_count_using_modulo_operator(number)!r}')\n    timing = timeit(f'z.get_set_bits_count_using_modulo_operator({number})', setup=setup)\n    print(f'timeit() runs in {timing} seconds')\n    print(f'get_set_bits_count_using_brian_kernighans_algorithm(number) = {get_set_bits_count_using_brian_kernighans_algorithm(number)!r}')\n    timing = timeit(f'z.get_set_bits_count_using_brian_kernighans_algorithm({number})', setup=setup)\n    print(f'timeit() runs in {timing} seconds')\nsetup = 'import __main__ as z'\nprint(f'Benchmark when number = {number!r}:')\nprint(f'get_set_bits_count_using_modulo_operator(number) = {get_set_bits_count_using_modulo_operator(number)!r}')\ntiming = timeit(f'z.get_set_bits_count_using_modulo_operator({number})', setup=setup)\nprint(f'timeit() runs in {timing} seconds')\nprint(f'get_set_bits_count_using_brian_kernighans_algorithm(number) = {get_set_bits_count_using_brian_kernighans_algorithm(number)!r}')\ntiming = timeit(f'z.get_set_bits_count_using_brian_kernighans_algorithm({number})', setup=setup)\nprint(f'timeit() runs in {timing} seconds')"
    },
    {
      "id": "n18",
      "type": "block",
      "statements": [
        "number",
        "(25, 37, 58, 0)"
      ],
      "code": "number\n(25, 37, 58, 0)"
    },
    {
      "id": "n19",
      "type": "block",
      "statements": [
        "do_benchmark(number)",
        "print()"
      ],
      "code": "do_benchmark(number)\nprint()"
    },
    {
      "id": "n20",
      "type": "block",
      "statements": [
        "__name__ Eq '__main__'"
      ],
      "code": "__name__ Eq '__main__'"
    },
    {
      "id": "n21",
      "type": "block",
      "statements": [
        "import doctest",
        "doctest.testmod()",
        "benchmark()"
      ],
      "code": "import doctest\ndoctest.testmod()\nbenchmark()"
    },
    {
      "id": "n22",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n23",
      "type": "block",
      "statements": [],
      "code": ""
    }
  ],
  "edges": [
    {
      "source": "n0",
      "target": "n1"
    },
    {
      "source": "n17",
      "target": "n18"
    },
    {
      "source": "n22",
      "target": "n23"
    },
    {
      "source": "n10",
      "target": "n11"
    },
    {
      "source": "n2",
      "target": "n3"
    },
    {
      "source": "n19",
      "target": "n18"
    },
    {
      "source": "n5",
      "target": "n4"
    },
    {
      "source": "n16",
      "target": "n11"
    },
    {
      "source": "n3",
      "target": "n4"
    },
    {
      "source": "n4",
      "target": "n5"
    },
    {
      "source": "n4",
      "target": "n6"
    },
    {
      "source": "n7",
      "target": "n8"
    },
    {
      "source": "n21",
      "target": "n23"
    },
    {
      "source": "n15",
      "target": "n16"
    },
    {
      "source": "n12",
      "target": "n14"
    },
    {
      "source": "n14",
      "target": "n16"
    },
    {
      "source": "n20",
      "target": "n21"
    },
    {
      "source": "n9",
      "target": "n10"
    },
    {
      "source": "n12",
      "target": "n15"
    },
    {
      "source": "n11",
      "target": "n12"
    },
    {
      "source": "n18",
      "target": "n19"
    },
    {
      "source": "n7",
      "target": "n9"
    },
    {
      "source": "n18",
      "target": "n20"
    },
    {
      "source": "n1",
      "target": "n3"
    },
    {
      "source": "n8",
      "target": "n10"
    },
    {
      "source": "n20",
      "target": "n22"
    },
    {
      "source": "n11",
      "target": "n13"
    },
    {
      "source": "n0",
      "target": "n2"
    }
  ]
}