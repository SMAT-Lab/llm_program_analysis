{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "import time",
        "from datetime import datetime, timedelta",
        "from typing import Any, Union",
        "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema",
        "from backend.data.model import SchemaField",
        "class GetCurrentTimeBlock(Block):\n\n    class Input(BlockSchema):\n        trigger: str = SchemaField(description='Trigger any data to output the current time')\n        format: str = SchemaField(description='Format of the time to output', default='%H:%M:%S')\n\n    class Output(BlockSchema):\n        time: str = SchemaField(description='Current time in the specified format (default: %H:%M:%S)')\n\n    def __init__(self):\n        super().__init__(id='a892b8d9-3e4e-4e9c-9c1e-75f8efcf1bfa', description='This block outputs the current time.', categories={BlockCategory.TEXT}, input_schema=GetCurrentTimeBlock.Input, output_schema=GetCurrentTimeBlock.Output, test_input=[{'trigger': 'Hello'}, {'trigger': 'Hello', 'format': '%H:%M'}], test_output=[('time', lambda _: time.strftime('%H:%M:%S')), ('time', lambda _: time.strftime('%H:%M'))])\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        current_time = time.strftime(input_data.format)\n        yield ('time', current_time)",
        "class Input(BlockSchema):\n    trigger: str = SchemaField(description='Trigger any data to output the current time')\n    format: str = SchemaField(description='Format of the time to output', default='%H:%M:%S')",
        "trigger: str = SchemaField(description='Trigger any data to output the current time')",
        "format: str = SchemaField(description='Format of the time to output', default='%H:%M:%S')",
        "class Output(BlockSchema):\n    time: str = SchemaField(description='Current time in the specified format (default: %H:%M:%S)')",
        "time: str = SchemaField(description='Current time in the specified format (default: %H:%M:%S)')",
        "def __init__(self):\n    super().__init__(id='a892b8d9-3e4e-4e9c-9c1e-75f8efcf1bfa', description='This block outputs the current time.', categories={BlockCategory.TEXT}, input_schema=GetCurrentTimeBlock.Input, output_schema=GetCurrentTimeBlock.Output, test_input=[{'trigger': 'Hello'}, {'trigger': 'Hello', 'format': '%H:%M'}], test_output=[('time', lambda _: time.strftime('%H:%M:%S')), ('time', lambda _: time.strftime('%H:%M'))])",
        "super().__init__()",
        "def run(self, input_data: Input, **kwargs) -> BlockOutput:\n    current_time = time.strftime(input_data.format)\n    yield ('time', current_time)",
        "current_time = time.strftime(input_data.format)",
        "(yield ('time', current_time))",
        "class GetCurrentDateBlock(Block):\n\n    class Input(BlockSchema):\n        trigger: str = SchemaField(description='Trigger any data to output the current date')\n        offset: Union[int, str] = SchemaField(title='Days Offset', description='Offset in days from the current date', default=0)\n        format: str = SchemaField(description='Format of the date to output', default='%Y-%m-%d')\n\n    class Output(BlockSchema):\n        date: str = SchemaField(description='Current date in the specified format (default: YYYY-MM-DD)')\n\n    def __init__(self):\n        super().__init__(id='b29c1b50-5d0e-4d9f-8f9d-1b0e6fcbf0b1', description='This block outputs the current date with an optional offset.', categories={BlockCategory.TEXT}, input_schema=GetCurrentDateBlock.Input, output_schema=GetCurrentDateBlock.Output, test_input=[{'trigger': 'Hello', 'offset': '7'}, {'trigger': 'Hello', 'offset': '7', 'format': '%m/%d/%Y'}], test_output=[('date', lambda t: abs(datetime.now() - datetime.strptime(t, '%Y-%m-%d')) < timedelta(days=8)), ('date', lambda t: abs(datetime.now() - datetime.strptime(t, '%m/%d/%Y')) < timedelta(days=8))])\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        try:\n            offset = int(input_data.offset)\n        except ValueError:\n            offset = 0\n        current_date = datetime.now() - timedelta(days=offset)\n        yield ('date', current_date.strftime(input_data.format))",
        "class Input(BlockSchema):\n    trigger: str = SchemaField(description='Trigger any data to output the current date')\n    offset: Union[int, str] = SchemaField(title='Days Offset', description='Offset in days from the current date', default=0)\n    format: str = SchemaField(description='Format of the date to output', default='%Y-%m-%d')",
        "trigger: str = SchemaField(description='Trigger any data to output the current date')",
        "offset: Union[int, str] = SchemaField(title='Days Offset', description='Offset in days from the current date', default=0)",
        "format: str = SchemaField(description='Format of the date to output', default='%Y-%m-%d')",
        "class Output(BlockSchema):\n    date: str = SchemaField(description='Current date in the specified format (default: YYYY-MM-DD)')",
        "date: str = SchemaField(description='Current date in the specified format (default: YYYY-MM-DD)')",
        "def __init__(self):\n    super().__init__(id='b29c1b50-5d0e-4d9f-8f9d-1b0e6fcbf0b1', description='This block outputs the current date with an optional offset.', categories={BlockCategory.TEXT}, input_schema=GetCurrentDateBlock.Input, output_schema=GetCurrentDateBlock.Output, test_input=[{'trigger': 'Hello', 'offset': '7'}, {'trigger': 'Hello', 'offset': '7', 'format': '%m/%d/%Y'}], test_output=[('date', lambda t: abs(datetime.now() - datetime.strptime(t, '%Y-%m-%d')) < timedelta(days=8)), ('date', lambda t: abs(datetime.now() - datetime.strptime(t, '%m/%d/%Y')) < timedelta(days=8))])",
        "super().__init__()",
        "def run(self, input_data: Input, **kwargs) -> BlockOutput:\n    try:\n        offset = int(input_data.offset)\n    except ValueError:\n        offset = 0\n    current_date = datetime.now() - timedelta(days=offset)\n    yield ('date', current_date.strftime(input_data.format))",
        "try:\n    offset = int(input_data.offset)\nexcept ValueError:\n    offset = 0",
        "offset = int(input_data.offset)",
        "offset = 0",
        "current_date = datetime.now() - timedelta(days=offset)",
        "(yield ('date', current_date.strftime(input_data.format)))",
        "class GetCurrentDateAndTimeBlock(Block):\n\n    class Input(BlockSchema):\n        trigger: str = SchemaField(description='Trigger any data to output the current date and time')\n        format: str = SchemaField(description='Format of the date and time to output', default='%Y-%m-%d %H:%M:%S')\n\n    class Output(BlockSchema):\n        date_time: str = SchemaField(description='Current date and time in the specified format (default: YYYY-MM-DD HH:MM:SS)')\n\n    def __init__(self):\n        super().__init__(id='716a67b3-6760-42e7-86dc-18645c6e00fc', description='This block outputs the current date and time.', categories={BlockCategory.TEXT}, input_schema=GetCurrentDateAndTimeBlock.Input, output_schema=GetCurrentDateAndTimeBlock.Output, test_input=[{'trigger': 'Hello'}], test_output=[('date_time', lambda t: abs(datetime.now() - datetime.strptime(t, '%Y-%m-%d %H:%M:%S')) < timedelta(seconds=10))])\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        current_date_time = time.strftime(input_data.format)\n        yield ('date_time', current_date_time)",
        "class Input(BlockSchema):\n    trigger: str = SchemaField(description='Trigger any data to output the current date and time')\n    format: str = SchemaField(description='Format of the date and time to output', default='%Y-%m-%d %H:%M:%S')",
        "trigger: str = SchemaField(description='Trigger any data to output the current date and time')",
        "format: str = SchemaField(description='Format of the date and time to output', default='%Y-%m-%d %H:%M:%S')",
        "class Output(BlockSchema):\n    date_time: str = SchemaField(description='Current date and time in the specified format (default: YYYY-MM-DD HH:MM:SS)')",
        "date_time: str = SchemaField(description='Current date and time in the specified format (default: YYYY-MM-DD HH:MM:SS)')",
        "def __init__(self):\n    super().__init__(id='716a67b3-6760-42e7-86dc-18645c6e00fc', description='This block outputs the current date and time.', categories={BlockCategory.TEXT}, input_schema=GetCurrentDateAndTimeBlock.Input, output_schema=GetCurrentDateAndTimeBlock.Output, test_input=[{'trigger': 'Hello'}], test_output=[('date_time', lambda t: abs(datetime.now() - datetime.strptime(t, '%Y-%m-%d %H:%M:%S')) < timedelta(seconds=10))])",
        "super().__init__()",
        "def run(self, input_data: Input, **kwargs) -> BlockOutput:\n    current_date_time = time.strftime(input_data.format)\n    yield ('date_time', current_date_time)",
        "current_date_time = time.strftime(input_data.format)",
        "(yield ('date_time', current_date_time))",
        "class CountdownTimerBlock(Block):\n\n    class Input(BlockSchema):\n        input_message: Any = SchemaField(advanced=False, description='Message to output after the timer finishes', default='timer finished')\n        seconds: Union[int, str] = SchemaField(advanced=False, description='Duration in seconds', default=0)\n        minutes: Union[int, str] = SchemaField(advanced=False, description='Duration in minutes', default=0)\n        hours: Union[int, str] = SchemaField(advanced=False, description='Duration in hours', default=0)\n        days: Union[int, str] = SchemaField(advanced=False, description='Duration in days', default=0)\n\n    class Output(BlockSchema):\n        output_message: Any = SchemaField(description='Message after the timer finishes')\n\n    def __init__(self):\n        super().__init__(id='d67a9c52-5e4e-11e2-bcfd-0800200c9a71', description='This block triggers after a specified duration.', categories={BlockCategory.TEXT}, input_schema=CountdownTimerBlock.Input, output_schema=CountdownTimerBlock.Output, test_input=[{'seconds': 1}, {'input_message': 'Custom message'}], test_output=[('output_message', 'timer finished'), ('output_message', 'Custom message')])\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        seconds = int(input_data.seconds)\n        minutes = int(input_data.minutes)\n        hours = int(input_data.hours)\n        days = int(input_data.days)\n        total_seconds = seconds + minutes * 60 + hours * 3600 + days * 86400\n        time.sleep(total_seconds)\n        yield ('output_message', input_data.input_message)",
        "class Input(BlockSchema):\n    input_message: Any = SchemaField(advanced=False, description='Message to output after the timer finishes', default='timer finished')\n    seconds: Union[int, str] = SchemaField(advanced=False, description='Duration in seconds', default=0)\n    minutes: Union[int, str] = SchemaField(advanced=False, description='Duration in minutes', default=0)\n    hours: Union[int, str] = SchemaField(advanced=False, description='Duration in hours', default=0)\n    days: Union[int, str] = SchemaField(advanced=False, description='Duration in days', default=0)",
        "input_message: Any = SchemaField(advanced=False, description='Message to output after the timer finishes', default='timer finished')",
        "seconds: Union[int, str] = SchemaField(advanced=False, description='Duration in seconds', default=0)",
        "minutes: Union[int, str] = SchemaField(advanced=False, description='Duration in minutes', default=0)",
        "hours: Union[int, str] = SchemaField(advanced=False, description='Duration in hours', default=0)",
        "days: Union[int, str] = SchemaField(advanced=False, description='Duration in days', default=0)",
        "class Output(BlockSchema):\n    output_message: Any = SchemaField(description='Message after the timer finishes')",
        "output_message: Any = SchemaField(description='Message after the timer finishes')",
        "def __init__(self):\n    super().__init__(id='d67a9c52-5e4e-11e2-bcfd-0800200c9a71', description='This block triggers after a specified duration.', categories={BlockCategory.TEXT}, input_schema=CountdownTimerBlock.Input, output_schema=CountdownTimerBlock.Output, test_input=[{'seconds': 1}, {'input_message': 'Custom message'}], test_output=[('output_message', 'timer finished'), ('output_message', 'Custom message')])",
        "super().__init__()",
        "def run(self, input_data: Input, **kwargs) -> BlockOutput:\n    seconds = int(input_data.seconds)\n    minutes = int(input_data.minutes)\n    hours = int(input_data.hours)\n    days = int(input_data.days)\n    total_seconds = seconds + minutes * 60 + hours * 3600 + days * 86400\n    time.sleep(total_seconds)\n    yield ('output_message', input_data.input_message)",
        "seconds = int(input_data.seconds)",
        "minutes = int(input_data.minutes)",
        "hours = int(input_data.hours)",
        "days = int(input_data.days)",
        "total_seconds = seconds + minutes * 60 + hours * 3600 + days * 86400",
        "time.sleep(total_seconds)",
        "(yield ('output_message', input_data.input_message))"
      ],
      "code": "import time\nfrom datetime import datetime, timedelta\nfrom typing import Any, Union\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\nclass GetCurrentTimeBlock(Block):\n\n    class Input(BlockSchema):\n        trigger: str = SchemaField(description='Trigger any data to output the current time')\n        format: str = SchemaField(description='Format of the time to output', default='%H:%M:%S')\n\n    class Output(BlockSchema):\n        time: str = SchemaField(description='Current time in the specified format (default: %H:%M:%S)')\n\n    def __init__(self):\n        super().__init__(id='a892b8d9-3e4e-4e9c-9c1e-75f8efcf1bfa', description='This block outputs the current time.', categories={BlockCategory.TEXT}, input_schema=GetCurrentTimeBlock.Input, output_schema=GetCurrentTimeBlock.Output, test_input=[{'trigger': 'Hello'}, {'trigger': 'Hello', 'format': '%H:%M'}], test_output=[('time', lambda _: time.strftime('%H:%M:%S')), ('time', lambda _: time.strftime('%H:%M'))])\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        current_time = time.strftime(input_data.format)\n        yield ('time', current_time)\nclass Input(BlockSchema):\n    trigger: str = SchemaField(description='Trigger any data to output the current time')\n    format: str = SchemaField(description='Format of the time to output', default='%H:%M:%S')\ntrigger: str = SchemaField(description='Trigger any data to output the current time')\nformat: str = SchemaField(description='Format of the time to output', default='%H:%M:%S')\nclass Output(BlockSchema):\n    time: str = SchemaField(description='Current time in the specified format (default: %H:%M:%S)')\ntime: str = SchemaField(description='Current time in the specified format (default: %H:%M:%S)')\ndef __init__(self):\n    super().__init__(id='a892b8d9-3e4e-4e9c-9c1e-75f8efcf1bfa', description='This block outputs the current time.', categories={BlockCategory.TEXT}, input_schema=GetCurrentTimeBlock.Input, output_schema=GetCurrentTimeBlock.Output, test_input=[{'trigger': 'Hello'}, {'trigger': 'Hello', 'format': '%H:%M'}], test_output=[('time', lambda _: time.strftime('%H:%M:%S')), ('time', lambda _: time.strftime('%H:%M'))])\nsuper().__init__()\ndef run(self, input_data: Input, **kwargs) -> BlockOutput:\n    current_time = time.strftime(input_data.format)\n    yield ('time', current_time)\ncurrent_time = time.strftime(input_data.format)\n(yield ('time', current_time))\nclass GetCurrentDateBlock(Block):\n\n    class Input(BlockSchema):\n        trigger: str = SchemaField(description='Trigger any data to output the current date')\n        offset: Union[int, str] = SchemaField(title='Days Offset', description='Offset in days from the current date', default=0)\n        format: str = SchemaField(description='Format of the date to output', default='%Y-%m-%d')\n\n    class Output(BlockSchema):\n        date: str = SchemaField(description='Current date in the specified format (default: YYYY-MM-DD)')\n\n    def __init__(self):\n        super().__init__(id='b29c1b50-5d0e-4d9f-8f9d-1b0e6fcbf0b1', description='This block outputs the current date with an optional offset.', categories={BlockCategory.TEXT}, input_schema=GetCurrentDateBlock.Input, output_schema=GetCurrentDateBlock.Output, test_input=[{'trigger': 'Hello', 'offset': '7'}, {'trigger': 'Hello', 'offset': '7', 'format': '%m/%d/%Y'}], test_output=[('date', lambda t: abs(datetime.now() - datetime.strptime(t, '%Y-%m-%d')) < timedelta(days=8)), ('date', lambda t: abs(datetime.now() - datetime.strptime(t, '%m/%d/%Y')) < timedelta(days=8))])\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        try:\n            offset = int(input_data.offset)\n        except ValueError:\n            offset = 0\n        current_date = datetime.now() - timedelta(days=offset)\n        yield ('date', current_date.strftime(input_data.format))\nclass Input(BlockSchema):\n    trigger: str = SchemaField(description='Trigger any data to output the current date')\n    offset: Union[int, str] = SchemaField(title='Days Offset', description='Offset in days from the current date', default=0)\n    format: str = SchemaField(description='Format of the date to output', default='%Y-%m-%d')\ntrigger: str = SchemaField(description='Trigger any data to output the current date')\noffset: Union[int, str] = SchemaField(title='Days Offset', description='Offset in days from the current date', default=0)\nformat: str = SchemaField(description='Format of the date to output', default='%Y-%m-%d')\nclass Output(BlockSchema):\n    date: str = SchemaField(description='Current date in the specified format (default: YYYY-MM-DD)')\ndate: str = SchemaField(description='Current date in the specified format (default: YYYY-MM-DD)')\ndef __init__(self):\n    super().__init__(id='b29c1b50-5d0e-4d9f-8f9d-1b0e6fcbf0b1', description='This block outputs the current date with an optional offset.', categories={BlockCategory.TEXT}, input_schema=GetCurrentDateBlock.Input, output_schema=GetCurrentDateBlock.Output, test_input=[{'trigger': 'Hello', 'offset': '7'}, {'trigger': 'Hello', 'offset': '7', 'format': '%m/%d/%Y'}], test_output=[('date', lambda t: abs(datetime.now() - datetime.strptime(t, '%Y-%m-%d')) < timedelta(days=8)), ('date', lambda t: abs(datetime.now() - datetime.strptime(t, '%m/%d/%Y')) < timedelta(days=8))])\nsuper().__init__()\ndef run(self, input_data: Input, **kwargs) -> BlockOutput:\n    try:\n        offset = int(input_data.offset)\n    except ValueError:\n        offset = 0\n    current_date = datetime.now() - timedelta(days=offset)\n    yield ('date', current_date.strftime(input_data.format))\ntry:\n    offset = int(input_data.offset)\nexcept ValueError:\n    offset = 0\noffset = int(input_data.offset)\noffset = 0\ncurrent_date = datetime.now() - timedelta(days=offset)\n(yield ('date', current_date.strftime(input_data.format)))\nclass GetCurrentDateAndTimeBlock(Block):\n\n    class Input(BlockSchema):\n        trigger: str = SchemaField(description='Trigger any data to output the current date and time')\n        format: str = SchemaField(description='Format of the date and time to output', default='%Y-%m-%d %H:%M:%S')\n\n    class Output(BlockSchema):\n        date_time: str = SchemaField(description='Current date and time in the specified format (default: YYYY-MM-DD HH:MM:SS)')\n\n    def __init__(self):\n        super().__init__(id='716a67b3-6760-42e7-86dc-18645c6e00fc', description='This block outputs the current date and time.', categories={BlockCategory.TEXT}, input_schema=GetCurrentDateAndTimeBlock.Input, output_schema=GetCurrentDateAndTimeBlock.Output, test_input=[{'trigger': 'Hello'}], test_output=[('date_time', lambda t: abs(datetime.now() - datetime.strptime(t, '%Y-%m-%d %H:%M:%S')) < timedelta(seconds=10))])\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        current_date_time = time.strftime(input_data.format)\n        yield ('date_time', current_date_time)\nclass Input(BlockSchema):\n    trigger: str = SchemaField(description='Trigger any data to output the current date and time')\n    format: str = SchemaField(description='Format of the date and time to output', default='%Y-%m-%d %H:%M:%S')\ntrigger: str = SchemaField(description='Trigger any data to output the current date and time')\nformat: str = SchemaField(description='Format of the date and time to output', default='%Y-%m-%d %H:%M:%S')\nclass Output(BlockSchema):\n    date_time: str = SchemaField(description='Current date and time in the specified format (default: YYYY-MM-DD HH:MM:SS)')\ndate_time: str = SchemaField(description='Current date and time in the specified format (default: YYYY-MM-DD HH:MM:SS)')\ndef __init__(self):\n    super().__init__(id='716a67b3-6760-42e7-86dc-18645c6e00fc', description='This block outputs the current date and time.', categories={BlockCategory.TEXT}, input_schema=GetCurrentDateAndTimeBlock.Input, output_schema=GetCurrentDateAndTimeBlock.Output, test_input=[{'trigger': 'Hello'}], test_output=[('date_time', lambda t: abs(datetime.now() - datetime.strptime(t, '%Y-%m-%d %H:%M:%S')) < timedelta(seconds=10))])\nsuper().__init__()\ndef run(self, input_data: Input, **kwargs) -> BlockOutput:\n    current_date_time = time.strftime(input_data.format)\n    yield ('date_time', current_date_time)\ncurrent_date_time = time.strftime(input_data.format)\n(yield ('date_time', current_date_time))\nclass CountdownTimerBlock(Block):\n\n    class Input(BlockSchema):\n        input_message: Any = SchemaField(advanced=False, description='Message to output after the timer finishes', default='timer finished')\n        seconds: Union[int, str] = SchemaField(advanced=False, description='Duration in seconds', default=0)\n        minutes: Union[int, str] = SchemaField(advanced=False, description='Duration in minutes', default=0)\n        hours: Union[int, str] = SchemaField(advanced=False, description='Duration in hours', default=0)\n        days: Union[int, str] = SchemaField(advanced=False, description='Duration in days', default=0)\n\n    class Output(BlockSchema):\n        output_message: Any = SchemaField(description='Message after the timer finishes')\n\n    def __init__(self):\n        super().__init__(id='d67a9c52-5e4e-11e2-bcfd-0800200c9a71', description='This block triggers after a specified duration.', categories={BlockCategory.TEXT}, input_schema=CountdownTimerBlock.Input, output_schema=CountdownTimerBlock.Output, test_input=[{'seconds': 1}, {'input_message': 'Custom message'}], test_output=[('output_message', 'timer finished'), ('output_message', 'Custom message')])\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        seconds = int(input_data.seconds)\n        minutes = int(input_data.minutes)\n        hours = int(input_data.hours)\n        days = int(input_data.days)\n        total_seconds = seconds + minutes * 60 + hours * 3600 + days * 86400\n        time.sleep(total_seconds)\n        yield ('output_message', input_data.input_message)\nclass Input(BlockSchema):\n    input_message: Any = SchemaField(advanced=False, description='Message to output after the timer finishes', default='timer finished')\n    seconds: Union[int, str] = SchemaField(advanced=False, description='Duration in seconds', default=0)\n    minutes: Union[int, str] = SchemaField(advanced=False, description='Duration in minutes', default=0)\n    hours: Union[int, str] = SchemaField(advanced=False, description='Duration in hours', default=0)\n    days: Union[int, str] = SchemaField(advanced=False, description='Duration in days', default=0)\ninput_message: Any = SchemaField(advanced=False, description='Message to output after the timer finishes', default='timer finished')\nseconds: Union[int, str] = SchemaField(advanced=False, description='Duration in seconds', default=0)\nminutes: Union[int, str] = SchemaField(advanced=False, description='Duration in minutes', default=0)\nhours: Union[int, str] = SchemaField(advanced=False, description='Duration in hours', default=0)\ndays: Union[int, str] = SchemaField(advanced=False, description='Duration in days', default=0)\nclass Output(BlockSchema):\n    output_message: Any = SchemaField(description='Message after the timer finishes')\noutput_message: Any = SchemaField(description='Message after the timer finishes')\ndef __init__(self):\n    super().__init__(id='d67a9c52-5e4e-11e2-bcfd-0800200c9a71', description='This block triggers after a specified duration.', categories={BlockCategory.TEXT}, input_schema=CountdownTimerBlock.Input, output_schema=CountdownTimerBlock.Output, test_input=[{'seconds': 1}, {'input_message': 'Custom message'}], test_output=[('output_message', 'timer finished'), ('output_message', 'Custom message')])\nsuper().__init__()\ndef run(self, input_data: Input, **kwargs) -> BlockOutput:\n    seconds = int(input_data.seconds)\n    minutes = int(input_data.minutes)\n    hours = int(input_data.hours)\n    days = int(input_data.days)\n    total_seconds = seconds + minutes * 60 + hours * 3600 + days * 86400\n    time.sleep(total_seconds)\n    yield ('output_message', input_data.input_message)\nseconds = int(input_data.seconds)\nminutes = int(input_data.minutes)\nhours = int(input_data.hours)\ndays = int(input_data.days)\ntotal_seconds = seconds + minutes * 60 + hours * 3600 + days * 86400\ntime.sleep(total_seconds)\n(yield ('output_message', input_data.input_message))"
    }
  ],
  "edges": []
}