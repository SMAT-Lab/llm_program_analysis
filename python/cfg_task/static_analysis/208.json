{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "import asyncio",
        "import pytest",
        "from backend.util.retry import conn_retry",
        "def test_conn_retry_sync_function():\n    retry_count = 0\n\n    @conn_retry('Test', 'Test function', max_retry=2, max_wait=0.1, min_wait=0.1)\n    def test_function():\n        nonlocal retry_count\n        retry_count -= 1\n        if retry_count > 0:\n            raise ValueError('Test error')\n        return 'Success'\n    retry_count = 2\n    res = test_function()\n    assert res == 'Success'\n    retry_count = 100\n    with pytest.raises(ValueError) as e:\n        test_function()\n        assert str(e.value) == 'Test error'",
        "retry_count = 0",
        "@conn_retry('Test', 'Test function', max_retry=2, max_wait=0.1, min_wait=0.1)\ndef test_function():\n    nonlocal retry_count\n    retry_count -= 1\n    if retry_count > 0:\n        raise ValueError('Test error')\n    return 'Success'",
        "nonlocal retry_count",
        "retry_count -= 1",
        "retry_count Gt 0"
      ],
      "code": "import asyncio\nimport pytest\nfrom backend.util.retry import conn_retry\ndef test_conn_retry_sync_function():\n    retry_count = 0\n\n    @conn_retry('Test', 'Test function', max_retry=2, max_wait=0.1, min_wait=0.1)\n    def test_function():\n        nonlocal retry_count\n        retry_count -= 1\n        if retry_count > 0:\n            raise ValueError('Test error')\n        return 'Success'\n    retry_count = 2\n    res = test_function()\n    assert res == 'Success'\n    retry_count = 100\n    with pytest.raises(ValueError) as e:\n        test_function()\n        assert str(e.value) == 'Test error'\nretry_count = 0\n@conn_retry('Test', 'Test function', max_retry=2, max_wait=0.1, min_wait=0.1)\ndef test_function():\n    nonlocal retry_count\n    retry_count -= 1\n    if retry_count > 0:\n        raise ValueError('Test error')\n    return 'Success'\nnonlocal retry_count\nretry_count -= 1\nretry_count Gt 0"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "raise ValueError('Test error')"
      ],
      "code": "raise ValueError('Test error')"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [
        "return 'Success'"
      ],
      "code": "return 'Success'"
    },
    {
      "id": "n4",
      "type": "block",
      "statements": [
        "retry_count = 2",
        "res = test_function()",
        "assert res == 'Success'",
        "retry_count = 100",
        "with pytest.raises(ValueError) as e:\n    test_function()\n    assert str(e.value) == 'Test error'",
        "test_function()",
        "assert str(e.value) == 'Test error'",
        "@pytest.mark.asyncio\nasync def test_conn_retry_async_function():\n    retry_count = 0\n\n    @conn_retry('Test', 'Test function', max_retry=2, max_wait=0.1, min_wait=0.1)\n    async def test_function():\n        nonlocal retry_count\n        await asyncio.sleep(1)\n        retry_count -= 1\n        if retry_count > 0:\n            raise ValueError('Test error')\n        return 'Success'\n    retry_count = 2\n    res = await test_function()\n    assert res == 'Success'\n    retry_count = 100\n    with pytest.raises(ValueError) as e:\n        await test_function()\n        assert str(e.value) == 'Test error'",
        "retry_count = 0",
        "@conn_retry('Test', 'Test function', max_retry=2, max_wait=0.1, min_wait=0.1)\nasync def test_function():\n    nonlocal retry_count\n    await asyncio.sleep(1)\n    retry_count -= 1\n    if retry_count > 0:\n        raise ValueError('Test error')\n    return 'Success'",
        "nonlocal retry_count",
        "await asyncio.sleep(1)",
        "retry_count -= 1",
        "retry_count Gt 0"
      ],
      "code": "retry_count = 2\nres = test_function()\nassert res == 'Success'\nretry_count = 100\nwith pytest.raises(ValueError) as e:\n    test_function()\n    assert str(e.value) == 'Test error'\ntest_function()\nassert str(e.value) == 'Test error'\n@pytest.mark.asyncio\nasync def test_conn_retry_async_function():\n    retry_count = 0\n\n    @conn_retry('Test', 'Test function', max_retry=2, max_wait=0.1, min_wait=0.1)\n    async def test_function():\n        nonlocal retry_count\n        await asyncio.sleep(1)\n        retry_count -= 1\n        if retry_count > 0:\n            raise ValueError('Test error')\n        return 'Success'\n    retry_count = 2\n    res = await test_function()\n    assert res == 'Success'\n    retry_count = 100\n    with pytest.raises(ValueError) as e:\n        await test_function()\n        assert str(e.value) == 'Test error'\nretry_count = 0\n@conn_retry('Test', 'Test function', max_retry=2, max_wait=0.1, min_wait=0.1)\nasync def test_function():\n    nonlocal retry_count\n    await asyncio.sleep(1)\n    retry_count -= 1\n    if retry_count > 0:\n        raise ValueError('Test error')\n    return 'Success'\nnonlocal retry_count\nawait asyncio.sleep(1)\nretry_count -= 1\nretry_count Gt 0"
    },
    {
      "id": "n5",
      "type": "block",
      "statements": [
        "raise ValueError('Test error')"
      ],
      "code": "raise ValueError('Test error')"
    },
    {
      "id": "n6",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n7",
      "type": "block",
      "statements": [
        "return 'Success'"
      ],
      "code": "return 'Success'"
    },
    {
      "id": "n8",
      "type": "block",
      "statements": [
        "retry_count = 2",
        "res = await test_function()",
        "assert res == 'Success'",
        "retry_count = 100",
        "with pytest.raises(ValueError) as e:\n    await test_function()\n    assert str(e.value) == 'Test error'",
        "await test_function()",
        "assert str(e.value) == 'Test error'"
      ],
      "code": "retry_count = 2\nres = await test_function()\nassert res == 'Success'\nretry_count = 100\nwith pytest.raises(ValueError) as e:\n    await test_function()\n    assert str(e.value) == 'Test error'\nawait test_function()\nassert str(e.value) == 'Test error'"
    }
  ],
  "edges": [
    {
      "source": "n1",
      "target": "n3"
    },
    {
      "source": "n6",
      "target": "n7"
    },
    {
      "source": "n0",
      "target": "n2"
    },
    {
      "source": "n0",
      "target": "n1"
    },
    {
      "source": "n4",
      "target": "n5"
    },
    {
      "source": "n5",
      "target": "n7"
    },
    {
      "source": "n4",
      "target": "n6"
    },
    {
      "source": "n2",
      "target": "n3"
    }
  ]
}