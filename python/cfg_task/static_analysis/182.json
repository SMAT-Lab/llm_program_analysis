{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "from enum import Enum",
        "class DefaultCategories(Enum):\n    HOUSING = 0\n    FOOD = 1\n    GAS = 2\n    SHOPPING = 3",
        "HOUSING = 0",
        "FOOD = 1",
        "GAS = 2",
        "SHOPPING = 3",
        "seller_category_map = {}",
        "seller_category_map['Exxon'] = DefaultCategories.GAS",
        "seller_category_map['Target'] = DefaultCategories.SHOPPING",
        "class Categorizer(object):\n\n    def __init__(self, seller_category_map, seller_category_overrides_map):\n        self.seller_category_map = seller_category_map\n        self.seller_category_overrides_map = seller_category_overrides_map\n\n    def categorize(self, transaction):\n        if transaction.seller in self.seller_category_map:\n            return self.seller_category_map[transaction.seller]\n        if transaction.seller in self.seller_category_overrides_map:\n            seller_category_map[transaction.seller] = self.manual_overrides[transaction.seller].peek_min()\n            return self.seller_category_map[transaction.seller]\n        return None",
        "def __init__(self, seller_category_map, seller_category_overrides_map):\n    self.seller_category_map = seller_category_map\n    self.seller_category_overrides_map = seller_category_overrides_map",
        "self.seller_category_map = seller_category_map",
        "self.seller_category_overrides_map = seller_category_overrides_map",
        "def categorize(self, transaction):\n    if transaction.seller in self.seller_category_map:\n        return self.seller_category_map[transaction.seller]\n    if transaction.seller in self.seller_category_overrides_map:\n        seller_category_map[transaction.seller] = self.manual_overrides[transaction.seller].peek_min()\n        return self.seller_category_map[transaction.seller]\n    return None",
        "transaction.seller In self.seller_category_map"
      ],
      "code": "from enum import Enum\nclass DefaultCategories(Enum):\n    HOUSING = 0\n    FOOD = 1\n    GAS = 2\n    SHOPPING = 3\nHOUSING = 0\nFOOD = 1\nGAS = 2\nSHOPPING = 3\nseller_category_map = {}\nseller_category_map['Exxon'] = DefaultCategories.GAS\nseller_category_map['Target'] = DefaultCategories.SHOPPING\nclass Categorizer(object):\n\n    def __init__(self, seller_category_map, seller_category_overrides_map):\n        self.seller_category_map = seller_category_map\n        self.seller_category_overrides_map = seller_category_overrides_map\n\n    def categorize(self, transaction):\n        if transaction.seller in self.seller_category_map:\n            return self.seller_category_map[transaction.seller]\n        if transaction.seller in self.seller_category_overrides_map:\n            seller_category_map[transaction.seller] = self.manual_overrides[transaction.seller].peek_min()\n            return self.seller_category_map[transaction.seller]\n        return None\ndef __init__(self, seller_category_map, seller_category_overrides_map):\n    self.seller_category_map = seller_category_map\n    self.seller_category_overrides_map = seller_category_overrides_map\nself.seller_category_map = seller_category_map\nself.seller_category_overrides_map = seller_category_overrides_map\ndef categorize(self, transaction):\n    if transaction.seller in self.seller_category_map:\n        return self.seller_category_map[transaction.seller]\n    if transaction.seller in self.seller_category_overrides_map:\n        seller_category_map[transaction.seller] = self.manual_overrides[transaction.seller].peek_min()\n        return self.seller_category_map[transaction.seller]\n    return None\ntransaction.seller In self.seller_category_map"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "return self.seller_category_map[transaction.seller]"
      ],
      "code": "return self.seller_category_map[transaction.seller]"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [],
      "code": "\ntransaction.seller In self.seller_category_overrides_map"
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [
        "seller_category_map[transaction.seller] = self.manual_overrides[transaction.seller].peek_min()",
        "return self.seller_category_map[transaction.seller]"
      ],
      "code": "seller_category_map[transaction.seller] = self.manual_overrides[transaction.seller].peek_min()\nreturn self.seller_category_map[transaction.seller]"
    },
    {
      "id": "n4",
      "type": "block",
      "statements": [],
      "code": "\nreturn None"
    },
    {
      "id": "n5",
      "type": "block",
      "statements": [
        "class Transaction(object):\n\n    def __init__(self, timestamp, seller, amount):\n        self.timestamp = timestamp\n        self.seller = seller\n        self.amount = amount",
        "def __init__(self, timestamp, seller, amount):\n    self.timestamp = timestamp\n    self.seller = seller\n    self.amount = amount",
        "self.timestamp = timestamp",
        "self.seller = seller",
        "self.amount = amount",
        "class Budget(object):\n\n    def __init__(self, template_categories_to_budget_map):\n        self.categories_to_budget_map = template_categories_to_budget_map\n\n    def override_category_budget(self, category, amount):\n        self.categories_to_budget_map[category] = amount",
        "def __init__(self, template_categories_to_budget_map):\n    self.categories_to_budget_map = template_categories_to_budget_map",
        "self.categories_to_budget_map = template_categories_to_budget_map",
        "def override_category_budget(self, category, amount):\n    self.categories_to_budget_map[category] = amount",
        "self.categories_to_budget_map[category] = amount"
      ],
      "code": "class Transaction(object):\n\n    def __init__(self, timestamp, seller, amount):\n        self.timestamp = timestamp\n        self.seller = seller\n        self.amount = amount\ndef __init__(self, timestamp, seller, amount):\n    self.timestamp = timestamp\n    self.seller = seller\n    self.amount = amount\nself.timestamp = timestamp\nself.seller = seller\nself.amount = amount\nclass Budget(object):\n\n    def __init__(self, template_categories_to_budget_map):\n        self.categories_to_budget_map = template_categories_to_budget_map\n\n    def override_category_budget(self, category, amount):\n        self.categories_to_budget_map[category] = amount\ndef __init__(self, template_categories_to_budget_map):\n    self.categories_to_budget_map = template_categories_to_budget_map\nself.categories_to_budget_map = template_categories_to_budget_map\ndef override_category_budget(self, category, amount):\n    self.categories_to_budget_map[category] = amount\nself.categories_to_budget_map[category] = amount"
    }
  ],
  "edges": [
    {
      "source": "n2",
      "target": "n4"
    },
    {
      "source": "n0",
      "target": "n1"
    },
    {
      "source": "n2",
      "target": "n3"
    },
    {
      "source": "n0",
      "target": "n2"
    }
  ]
}