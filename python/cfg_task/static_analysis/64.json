{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "'\\nIn this problem, we want to determine all possible subsequences\\nof the given sequence. We use backtracking to solve this problem.\\n\\nTime complexity: O(2^n),\\nwhere n denotes the length of the given sequence.\\n'",
        "from __future__ import annotations",
        "from typing import Any",
        "def generate_all_subsequences(sequence: list[Any]) -> None:\n    create_state_space_tree(sequence, [], 0)",
        "create_state_space_tree(sequence, [], 0)",
        "def create_state_space_tree(sequence: list[Any], current_subsequence: list[Any], index: int) -> None:\n    \"\"\"\n    Creates a state space tree to iterate through each branch using DFS.\n    We know that each state has exactly two children.\n    It terminates when it reaches the end of the given sequence.\n\n    :param sequence: The input sequence for which subsequences are generated.\n    :param current_subsequence: The current subsequence being built.\n    :param index: The current index in the sequence.\n\n    Example:\n    >>> sequence = [3, 2, 1]\n    >>> current_subsequence = []\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\n    []\n    [1]\n    [2]\n    [2, 1]\n    [3]\n    [3, 1]\n    [3, 2]\n    [3, 2, 1]\n\n    >>> sequence = [\"A\", \"B\"]\n    >>> current_subsequence = []\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\n    []\n    ['B']\n    ['A']\n    ['A', 'B']\n\n    >>> sequence = []\n    >>> current_subsequence = []\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\n    []\n\n    >>> sequence = [1, 2, 3, 4]\n    >>> current_subsequence = []\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\n    []\n    [4]\n    [3]\n    [3, 4]\n    [2]\n    [2, 4]\n    [2, 3]\n    [2, 3, 4]\n    [1]\n    [1, 4]\n    [1, 3]\n    [1, 3, 4]\n    [1, 2]\n    [1, 2, 4]\n    [1, 2, 3]\n    [1, 2, 3, 4]\n    \"\"\"\n    if index == len(sequence):\n        print(current_subsequence)\n        return\n    create_state_space_tree(sequence, current_subsequence, index + 1)\n    current_subsequence.append(sequence[index])\n    create_state_space_tree(sequence, current_subsequence, index + 1)\n    current_subsequence.pop()",
        "'\\n    Creates a state space tree to iterate through each branch using DFS.\\n    We know that each state has exactly two children.\\n    It terminates when it reaches the end of the given sequence.\\n\\n    :param sequence: The input sequence for which subsequences are generated.\\n    :param current_subsequence: The current subsequence being built.\\n    :param index: The current index in the sequence.\\n\\n    Example:\\n    >>> sequence = [3, 2, 1]\\n    >>> current_subsequence = []\\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\\n    []\\n    [1]\\n    [2]\\n    [2, 1]\\n    [3]\\n    [3, 1]\\n    [3, 2]\\n    [3, 2, 1]\\n\\n    >>> sequence = [\"A\", \"B\"]\\n    >>> current_subsequence = []\\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\\n    []\\n    [\\'B\\']\\n    [\\'A\\']\\n    [\\'A\\', \\'B\\']\\n\\n    >>> sequence = []\\n    >>> current_subsequence = []\\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\\n    []\\n\\n    >>> sequence = [1, 2, 3, 4]\\n    >>> current_subsequence = []\\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\\n    []\\n    [4]\\n    [3]\\n    [3, 4]\\n    [2]\\n    [2, 4]\\n    [2, 3]\\n    [2, 3, 4]\\n    [1]\\n    [1, 4]\\n    [1, 3]\\n    [1, 3, 4]\\n    [1, 2]\\n    [1, 2, 4]\\n    [1, 2, 3]\\n    [1, 2, 3, 4]\\n    '",
        "index Eq len(sequence)"
      ],
      "code": "'\\nIn this problem, we want to determine all possible subsequences\\nof the given sequence. We use backtracking to solve this problem.\\n\\nTime complexity: O(2^n),\\nwhere n denotes the length of the given sequence.\\n'\nfrom __future__ import annotations\nfrom typing import Any\ndef generate_all_subsequences(sequence: list[Any]) -> None:\n    create_state_space_tree(sequence, [], 0)\ncreate_state_space_tree(sequence, [], 0)\ndef create_state_space_tree(sequence: list[Any], current_subsequence: list[Any], index: int) -> None:\n    \"\"\"\n    Creates a state space tree to iterate through each branch using DFS.\n    We know that each state has exactly two children.\n    It terminates when it reaches the end of the given sequence.\n\n    :param sequence: The input sequence for which subsequences are generated.\n    :param current_subsequence: The current subsequence being built.\n    :param index: The current index in the sequence.\n\n    Example:\n    >>> sequence = [3, 2, 1]\n    >>> current_subsequence = []\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\n    []\n    [1]\n    [2]\n    [2, 1]\n    [3]\n    [3, 1]\n    [3, 2]\n    [3, 2, 1]\n\n    >>> sequence = [\"A\", \"B\"]\n    >>> current_subsequence = []\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\n    []\n    ['B']\n    ['A']\n    ['A', 'B']\n\n    >>> sequence = []\n    >>> current_subsequence = []\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\n    []\n\n    >>> sequence = [1, 2, 3, 4]\n    >>> current_subsequence = []\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\n    []\n    [4]\n    [3]\n    [3, 4]\n    [2]\n    [2, 4]\n    [2, 3]\n    [2, 3, 4]\n    [1]\n    [1, 4]\n    [1, 3]\n    [1, 3, 4]\n    [1, 2]\n    [1, 2, 4]\n    [1, 2, 3]\n    [1, 2, 3, 4]\n    \"\"\"\n    if index == len(sequence):\n        print(current_subsequence)\n        return\n    create_state_space_tree(sequence, current_subsequence, index + 1)\n    current_subsequence.append(sequence[index])\n    create_state_space_tree(sequence, current_subsequence, index + 1)\n    current_subsequence.pop()\n'\\n    Creates a state space tree to iterate through each branch using DFS.\\n    We know that each state has exactly two children.\\n    It terminates when it reaches the end of the given sequence.\\n\\n    :param sequence: The input sequence for which subsequences are generated.\\n    :param current_subsequence: The current subsequence being built.\\n    :param index: The current index in the sequence.\\n\\n    Example:\\n    >>> sequence = [3, 2, 1]\\n    >>> current_subsequence = []\\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\\n    []\\n    [1]\\n    [2]\\n    [2, 1]\\n    [3]\\n    [3, 1]\\n    [3, 2]\\n    [3, 2, 1]\\n\\n    >>> sequence = [\"A\", \"B\"]\\n    >>> current_subsequence = []\\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\\n    []\\n    [\\'B\\']\\n    [\\'A\\']\\n    [\\'A\\', \\'B\\']\\n\\n    >>> sequence = []\\n    >>> current_subsequence = []\\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\\n    []\\n\\n    >>> sequence = [1, 2, 3, 4]\\n    >>> current_subsequence = []\\n    >>> create_state_space_tree(sequence, current_subsequence, 0)\\n    []\\n    [4]\\n    [3]\\n    [3, 4]\\n    [2]\\n    [2, 4]\\n    [2, 3]\\n    [2, 3, 4]\\n    [1]\\n    [1, 4]\\n    [1, 3]\\n    [1, 3, 4]\\n    [1, 2]\\n    [1, 2, 4]\\n    [1, 2, 3]\\n    [1, 2, 3, 4]\\n    '\nindex Eq len(sequence)"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "print(current_subsequence)",
        "return"
      ],
      "code": "print(current_subsequence)\nreturn"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [],
      "code": "\ncreate_state_space_tree(sequence, current_subsequence, index Add 1)\ncurrent_subsequence.append(sequence[index])\ncreate_state_space_tree(sequence, current_subsequence, index Add 1)\ncurrent_subsequence.pop()\n__name__ Eq '__main__'"
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [
        "seq: list[Any] = [1, 2, 3]",
        "generate_all_subsequences(seq)",
        "seq.clear()",
        "seq.extend(['A', 'B', 'C'])",
        "generate_all_subsequences(seq)"
      ],
      "code": "seq: list[Any] = [1, 2, 3]\ngenerate_all_subsequences(seq)\nseq.clear()\nseq.extend(['A', 'B', 'C'])\ngenerate_all_subsequences(seq)"
    },
    {
      "id": "n4",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n5",
      "type": "block",
      "statements": [],
      "code": ""
    }
  ],
  "edges": [
    {
      "source": "n2",
      "target": "n4"
    },
    {
      "source": "n0",
      "target": "n1"
    },
    {
      "source": "n0",
      "target": "n2"
    },
    {
      "source": "n3",
      "target": "n5"
    },
    {
      "source": "n4",
      "target": "n5"
    },
    {
      "source": "n2",
      "target": "n3"
    }
  ]
}