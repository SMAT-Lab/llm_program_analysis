{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "from typing import Literal",
        "from urllib.parse import quote",
        "from pydantic import SecretStr",
        "from backend.blocks.helpers.http import GetRequest",
        "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema",
        "from backend.data.model import APIKeyCredentials, CredentialsField, CredentialsMetaInput, SchemaField",
        "from backend.integrations.providers import ProviderName",
        "class GetWikipediaSummaryBlock(Block, GetRequest):\n\n    class Input(BlockSchema):\n        topic: str = SchemaField(description='The topic to fetch the summary for')\n\n    class Output(BlockSchema):\n        summary: str = SchemaField(description='The summary of the given topic')\n        error: str = SchemaField(description='Error message if the summary cannot be retrieved')\n\n    def __init__(self):\n        super().__init__(id='f5b0f5d0-1862-4d61-94be-3ad0fa772760', description='This block fetches the summary of a given topic from Wikipedia.', categories={BlockCategory.SEARCH}, input_schema=GetWikipediaSummaryBlock.Input, output_schema=GetWikipediaSummaryBlock.Output, test_input={'topic': 'Artificial Intelligence'}, test_output=('summary', 'summary content'), test_mock={'get_request': lambda url, json: {'extract': 'summary content'}})\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        topic = input_data.topic\n        url = f'https://en.wikipedia.org/api/rest_v1/page/summary/{topic}'\n        response = self.get_request(url, json=True)\n        if 'extract' not in response:\n            raise RuntimeError(f'Unable to parse Wikipedia response: {response}')\n        yield ('summary', response['extract'])",
        "class Input(BlockSchema):\n    topic: str = SchemaField(description='The topic to fetch the summary for')",
        "topic: str = SchemaField(description='The topic to fetch the summary for')",
        "class Output(BlockSchema):\n    summary: str = SchemaField(description='The summary of the given topic')\n    error: str = SchemaField(description='Error message if the summary cannot be retrieved')",
        "summary: str = SchemaField(description='The summary of the given topic')",
        "error: str = SchemaField(description='Error message if the summary cannot be retrieved')",
        "def __init__(self):\n    super().__init__(id='f5b0f5d0-1862-4d61-94be-3ad0fa772760', description='This block fetches the summary of a given topic from Wikipedia.', categories={BlockCategory.SEARCH}, input_schema=GetWikipediaSummaryBlock.Input, output_schema=GetWikipediaSummaryBlock.Output, test_input={'topic': 'Artificial Intelligence'}, test_output=('summary', 'summary content'), test_mock={'get_request': lambda url, json: {'extract': 'summary content'}})",
        "super().__init__()",
        "def run(self, input_data: Input, **kwargs) -> BlockOutput:\n    topic = input_data.topic\n    url = f'https://en.wikipedia.org/api/rest_v1/page/summary/{topic}'\n    response = self.get_request(url, json=True)\n    if 'extract' not in response:\n        raise RuntimeError(f'Unable to parse Wikipedia response: {response}')\n    yield ('summary', response['extract'])",
        "topic = input_data.topic",
        "url = f'https://en.wikipedia.org/api/rest_v1/page/summary/{topic}'",
        "response = self.get_request(url, json=True)",
        "'extract' NotIn response"
      ],
      "code": "from typing import Literal\nfrom urllib.parse import quote\nfrom pydantic import SecretStr\nfrom backend.blocks.helpers.http import GetRequest\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import APIKeyCredentials, CredentialsField, CredentialsMetaInput, SchemaField\nfrom backend.integrations.providers import ProviderName\nclass GetWikipediaSummaryBlock(Block, GetRequest):\n\n    class Input(BlockSchema):\n        topic: str = SchemaField(description='The topic to fetch the summary for')\n\n    class Output(BlockSchema):\n        summary: str = SchemaField(description='The summary of the given topic')\n        error: str = SchemaField(description='Error message if the summary cannot be retrieved')\n\n    def __init__(self):\n        super().__init__(id='f5b0f5d0-1862-4d61-94be-3ad0fa772760', description='This block fetches the summary of a given topic from Wikipedia.', categories={BlockCategory.SEARCH}, input_schema=GetWikipediaSummaryBlock.Input, output_schema=GetWikipediaSummaryBlock.Output, test_input={'topic': 'Artificial Intelligence'}, test_output=('summary', 'summary content'), test_mock={'get_request': lambda url, json: {'extract': 'summary content'}})\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        topic = input_data.topic\n        url = f'https://en.wikipedia.org/api/rest_v1/page/summary/{topic}'\n        response = self.get_request(url, json=True)\n        if 'extract' not in response:\n            raise RuntimeError(f'Unable to parse Wikipedia response: {response}')\n        yield ('summary', response['extract'])\nclass Input(BlockSchema):\n    topic: str = SchemaField(description='The topic to fetch the summary for')\ntopic: str = SchemaField(description='The topic to fetch the summary for')\nclass Output(BlockSchema):\n    summary: str = SchemaField(description='The summary of the given topic')\n    error: str = SchemaField(description='Error message if the summary cannot be retrieved')\nsummary: str = SchemaField(description='The summary of the given topic')\nerror: str = SchemaField(description='Error message if the summary cannot be retrieved')\ndef __init__(self):\n    super().__init__(id='f5b0f5d0-1862-4d61-94be-3ad0fa772760', description='This block fetches the summary of a given topic from Wikipedia.', categories={BlockCategory.SEARCH}, input_schema=GetWikipediaSummaryBlock.Input, output_schema=GetWikipediaSummaryBlock.Output, test_input={'topic': 'Artificial Intelligence'}, test_output=('summary', 'summary content'), test_mock={'get_request': lambda url, json: {'extract': 'summary content'}})\nsuper().__init__()\ndef run(self, input_data: Input, **kwargs) -> BlockOutput:\n    topic = input_data.topic\n    url = f'https://en.wikipedia.org/api/rest_v1/page/summary/{topic}'\n    response = self.get_request(url, json=True)\n    if 'extract' not in response:\n        raise RuntimeError(f'Unable to parse Wikipedia response: {response}')\n    yield ('summary', response['extract'])\ntopic = input_data.topic\nurl = f'https://en.wikipedia.org/api/rest_v1/page/summary/{topic}'\nresponse = self.get_request(url, json=True)\n'extract' NotIn response"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "raise RuntimeError(f'Unable to parse Wikipedia response: {response}')"
      ],
      "code": "raise RuntimeError(f'Unable to parse Wikipedia response: {response}')"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [
        "(yield ('summary', response['extract']))",
        "TEST_CREDENTIALS = APIKeyCredentials(id='01234567-89ab-cdef-0123-456789abcdef', provider='openweathermap', api_key=SecretStr('mock-openweathermap-api-key'), title='Mock OpenWeatherMap API key', expires_at=None)",
        "TEST_CREDENTIALS_INPUT = {'provider': TEST_CREDENTIALS.provider, 'id': TEST_CREDENTIALS.id, 'type': TEST_CREDENTIALS.type, 'title': TEST_CREDENTIALS.type}",
        "class GetWeatherInformationBlock(Block, GetRequest):\n\n    class Input(BlockSchema):\n        location: str = SchemaField(description='Location to get weather information for')\n        credentials: CredentialsMetaInput[Literal[ProviderName.OPENWEATHERMAP], Literal['api_key']] = CredentialsField(description='The OpenWeatherMap integration can be used with any API key with sufficient permissions for the blocks it is used on.')\n        use_celsius: bool = SchemaField(default=True, description='Whether to use Celsius or Fahrenheit for temperature')\n\n    class Output(BlockSchema):\n        temperature: str = SchemaField(description='Temperature in the specified location')\n        humidity: str = SchemaField(description='Humidity in the specified location')\n        condition: str = SchemaField(description='Weather condition in the specified location')\n        error: str = SchemaField(description='Error message if the weather information cannot be retrieved')\n\n    def __init__(self):\n        super().__init__(id='f7a8b2c3-6d4e-5f8b-9e7f-6d4e5f8b9e7f', input_schema=GetWeatherInformationBlock.Input, output_schema=GetWeatherInformationBlock.Output, description='Retrieves weather information for a specified location using OpenWeatherMap API.', test_input={'location': 'New York', 'use_celsius': True, 'credentials': TEST_CREDENTIALS_INPUT}, test_output=[('temperature', '21.66'), ('humidity', '32'), ('condition', 'overcast clouds')], test_mock={'get_request': lambda url, json: {'main': {'temp': 21.66, 'humidity': 32}, 'weather': [{'description': 'overcast clouds'}]}}, test_credentials=TEST_CREDENTIALS)\n\n    def run(self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs) -> BlockOutput:\n        units = 'metric' if input_data.use_celsius else 'imperial'\n        api_key = credentials.api_key\n        location = input_data.location\n        url = f'http://api.openweathermap.org/data/2.5/weather?q={quote(location)}&appid={api_key}&units={units}'\n        weather_data = self.get_request(url, json=True)\n        if 'main' in weather_data and 'weather' in weather_data:\n            yield ('temperature', str(weather_data['main']['temp']))\n            yield ('humidity', str(weather_data['main']['humidity']))\n            yield ('condition', weather_data['weather'][0]['description'])\n        else:\n            raise RuntimeError(f'Expected keys not found in response: {weather_data}')",
        "class Input(BlockSchema):\n    location: str = SchemaField(description='Location to get weather information for')\n    credentials: CredentialsMetaInput[Literal[ProviderName.OPENWEATHERMAP], Literal['api_key']] = CredentialsField(description='The OpenWeatherMap integration can be used with any API key with sufficient permissions for the blocks it is used on.')\n    use_celsius: bool = SchemaField(default=True, description='Whether to use Celsius or Fahrenheit for temperature')",
        "location: str = SchemaField(description='Location to get weather information for')",
        "credentials: CredentialsMetaInput[Literal[ProviderName.OPENWEATHERMAP], Literal['api_key']] = CredentialsField(description='The OpenWeatherMap integration can be used with any API key with sufficient permissions for the blocks it is used on.')",
        "use_celsius: bool = SchemaField(default=True, description='Whether to use Celsius or Fahrenheit for temperature')",
        "class Output(BlockSchema):\n    temperature: str = SchemaField(description='Temperature in the specified location')\n    humidity: str = SchemaField(description='Humidity in the specified location')\n    condition: str = SchemaField(description='Weather condition in the specified location')\n    error: str = SchemaField(description='Error message if the weather information cannot be retrieved')",
        "temperature: str = SchemaField(description='Temperature in the specified location')",
        "humidity: str = SchemaField(description='Humidity in the specified location')",
        "condition: str = SchemaField(description='Weather condition in the specified location')",
        "error: str = SchemaField(description='Error message if the weather information cannot be retrieved')",
        "def __init__(self):\n    super().__init__(id='f7a8b2c3-6d4e-5f8b-9e7f-6d4e5f8b9e7f', input_schema=GetWeatherInformationBlock.Input, output_schema=GetWeatherInformationBlock.Output, description='Retrieves weather information for a specified location using OpenWeatherMap API.', test_input={'location': 'New York', 'use_celsius': True, 'credentials': TEST_CREDENTIALS_INPUT}, test_output=[('temperature', '21.66'), ('humidity', '32'), ('condition', 'overcast clouds')], test_mock={'get_request': lambda url, json: {'main': {'temp': 21.66, 'humidity': 32}, 'weather': [{'description': 'overcast clouds'}]}}, test_credentials=TEST_CREDENTIALS)",
        "super().__init__()",
        "def run(self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs) -> BlockOutput:\n    units = 'metric' if input_data.use_celsius else 'imperial'\n    api_key = credentials.api_key\n    location = input_data.location\n    url = f'http://api.openweathermap.org/data/2.5/weather?q={quote(location)}&appid={api_key}&units={units}'\n    weather_data = self.get_request(url, json=True)\n    if 'main' in weather_data and 'weather' in weather_data:\n        yield ('temperature', str(weather_data['main']['temp']))\n        yield ('humidity', str(weather_data['main']['humidity']))\n        yield ('condition', weather_data['weather'][0]['description'])\n    else:\n        raise RuntimeError(f'Expected keys not found in response: {weather_data}')",
        "units = 'metric' if input_data.use_celsius else 'imperial'",
        "api_key = credentials.api_key",
        "location = input_data.location",
        "url = f'http://api.openweathermap.org/data/2.5/weather?q={quote(location)}&appid={api_key}&units={units}'",
        "weather_data = self.get_request(url, json=True)",
        "'main' in weather_data and 'weather' in weather_data"
      ],
      "code": "(yield ('summary', response['extract']))\nTEST_CREDENTIALS = APIKeyCredentials(id='01234567-89ab-cdef-0123-456789abcdef', provider='openweathermap', api_key=SecretStr('mock-openweathermap-api-key'), title='Mock OpenWeatherMap API key', expires_at=None)\nTEST_CREDENTIALS_INPUT = {'provider': TEST_CREDENTIALS.provider, 'id': TEST_CREDENTIALS.id, 'type': TEST_CREDENTIALS.type, 'title': TEST_CREDENTIALS.type}\nclass GetWeatherInformationBlock(Block, GetRequest):\n\n    class Input(BlockSchema):\n        location: str = SchemaField(description='Location to get weather information for')\n        credentials: CredentialsMetaInput[Literal[ProviderName.OPENWEATHERMAP], Literal['api_key']] = CredentialsField(description='The OpenWeatherMap integration can be used with any API key with sufficient permissions for the blocks it is used on.')\n        use_celsius: bool = SchemaField(default=True, description='Whether to use Celsius or Fahrenheit for temperature')\n\n    class Output(BlockSchema):\n        temperature: str = SchemaField(description='Temperature in the specified location')\n        humidity: str = SchemaField(description='Humidity in the specified location')\n        condition: str = SchemaField(description='Weather condition in the specified location')\n        error: str = SchemaField(description='Error message if the weather information cannot be retrieved')\n\n    def __init__(self):\n        super().__init__(id='f7a8b2c3-6d4e-5f8b-9e7f-6d4e5f8b9e7f', input_schema=GetWeatherInformationBlock.Input, output_schema=GetWeatherInformationBlock.Output, description='Retrieves weather information for a specified location using OpenWeatherMap API.', test_input={'location': 'New York', 'use_celsius': True, 'credentials': TEST_CREDENTIALS_INPUT}, test_output=[('temperature', '21.66'), ('humidity', '32'), ('condition', 'overcast clouds')], test_mock={'get_request': lambda url, json: {'main': {'temp': 21.66, 'humidity': 32}, 'weather': [{'description': 'overcast clouds'}]}}, test_credentials=TEST_CREDENTIALS)\n\n    def run(self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs) -> BlockOutput:\n        units = 'metric' if input_data.use_celsius else 'imperial'\n        api_key = credentials.api_key\n        location = input_data.location\n        url = f'http://api.openweathermap.org/data/2.5/weather?q={quote(location)}&appid={api_key}&units={units}'\n        weather_data = self.get_request(url, json=True)\n        if 'main' in weather_data and 'weather' in weather_data:\n            yield ('temperature', str(weather_data['main']['temp']))\n            yield ('humidity', str(weather_data['main']['humidity']))\n            yield ('condition', weather_data['weather'][0]['description'])\n        else:\n            raise RuntimeError(f'Expected keys not found in response: {weather_data}')\nclass Input(BlockSchema):\n    location: str = SchemaField(description='Location to get weather information for')\n    credentials: CredentialsMetaInput[Literal[ProviderName.OPENWEATHERMAP], Literal['api_key']] = CredentialsField(description='The OpenWeatherMap integration can be used with any API key with sufficient permissions for the blocks it is used on.')\n    use_celsius: bool = SchemaField(default=True, description='Whether to use Celsius or Fahrenheit for temperature')\nlocation: str = SchemaField(description='Location to get weather information for')\ncredentials: CredentialsMetaInput[Literal[ProviderName.OPENWEATHERMAP], Literal['api_key']] = CredentialsField(description='The OpenWeatherMap integration can be used with any API key with sufficient permissions for the blocks it is used on.')\nuse_celsius: bool = SchemaField(default=True, description='Whether to use Celsius or Fahrenheit for temperature')\nclass Output(BlockSchema):\n    temperature: str = SchemaField(description='Temperature in the specified location')\n    humidity: str = SchemaField(description='Humidity in the specified location')\n    condition: str = SchemaField(description='Weather condition in the specified location')\n    error: str = SchemaField(description='Error message if the weather information cannot be retrieved')\ntemperature: str = SchemaField(description='Temperature in the specified location')\nhumidity: str = SchemaField(description='Humidity in the specified location')\ncondition: str = SchemaField(description='Weather condition in the specified location')\nerror: str = SchemaField(description='Error message if the weather information cannot be retrieved')\ndef __init__(self):\n    super().__init__(id='f7a8b2c3-6d4e-5f8b-9e7f-6d4e5f8b9e7f', input_schema=GetWeatherInformationBlock.Input, output_schema=GetWeatherInformationBlock.Output, description='Retrieves weather information for a specified location using OpenWeatherMap API.', test_input={'location': 'New York', 'use_celsius': True, 'credentials': TEST_CREDENTIALS_INPUT}, test_output=[('temperature', '21.66'), ('humidity', '32'), ('condition', 'overcast clouds')], test_mock={'get_request': lambda url, json: {'main': {'temp': 21.66, 'humidity': 32}, 'weather': [{'description': 'overcast clouds'}]}}, test_credentials=TEST_CREDENTIALS)\nsuper().__init__()\ndef run(self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs) -> BlockOutput:\n    units = 'metric' if input_data.use_celsius else 'imperial'\n    api_key = credentials.api_key\n    location = input_data.location\n    url = f'http://api.openweathermap.org/data/2.5/weather?q={quote(location)}&appid={api_key}&units={units}'\n    weather_data = self.get_request(url, json=True)\n    if 'main' in weather_data and 'weather' in weather_data:\n        yield ('temperature', str(weather_data['main']['temp']))\n        yield ('humidity', str(weather_data['main']['humidity']))\n        yield ('condition', weather_data['weather'][0]['description'])\n    else:\n        raise RuntimeError(f'Expected keys not found in response: {weather_data}')\nunits = 'metric' if input_data.use_celsius else 'imperial'\napi_key = credentials.api_key\nlocation = input_data.location\nurl = f'http://api.openweathermap.org/data/2.5/weather?q={quote(location)}&appid={api_key}&units={units}'\nweather_data = self.get_request(url, json=True)\n'main' in weather_data and 'weather' in weather_data"
    },
    {
      "id": "n4",
      "type": "block",
      "statements": [
        "(yield ('temperature', str(weather_data['main']['temp'])))",
        "(yield ('humidity', str(weather_data['main']['humidity'])))",
        "(yield ('condition', weather_data['weather'][0]['description']))"
      ],
      "code": "(yield ('temperature', str(weather_data['main']['temp'])))\n(yield ('humidity', str(weather_data['main']['humidity'])))\n(yield ('condition', weather_data['weather'][0]['description']))"
    },
    {
      "id": "n5",
      "type": "block",
      "statements": [
        "raise RuntimeError(f'Expected keys not found in response: {weather_data}')"
      ],
      "code": "raise RuntimeError(f'Expected keys not found in response: {weather_data}')"
    },
    {
      "id": "n6",
      "type": "block",
      "statements": [],
      "code": ""
    }
  ],
  "edges": [
    {
      "source": "n5",
      "target": "n6"
    },
    {
      "source": "n1",
      "target": "n3"
    },
    {
      "source": "n0",
      "target": "n2"
    },
    {
      "source": "n0",
      "target": "n1"
    },
    {
      "source": "n3",
      "target": "n4"
    },
    {
      "source": "n3",
      "target": "n5"
    },
    {
      "source": "n4",
      "target": "n6"
    },
    {
      "source": "n2",
      "target": "n3"
    }
  ]
}