{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "import json",
        "import os",
        "import requests",
        "import sys",
        "import time",
        "from typing import Dict, List, Tuple",
        "CHECK_INTERVAL = 30",
        "def get_environment_variables() -> Tuple[str, str, str, str, str]:\n    \"\"\"Retrieve and return necessary environment variables.\"\"\"\n    try:\n        with open(os.environ['GITHUB_EVENT_PATH']) as f:\n            event = json.load(f)\n        if 'pull_request' in event:\n            sha = event['pull_request']['head']['sha']\n        else:\n            sha = os.environ['GITHUB_SHA']\n        return (os.environ['GITHUB_API_URL'], os.environ['GITHUB_REPOSITORY'], sha, os.environ['GITHUB_TOKEN'], os.environ['GITHUB_RUN_ID'])\n    except KeyError as e:\n        print(f'Error: Missing required environment variable or event data: {e}')\n        sys.exit(1)",
        "'Retrieve and return necessary environment variables.'",
        "try:\n    with open(os.environ['GITHUB_EVENT_PATH']) as f:\n        event = json.load(f)\n    if 'pull_request' in event:\n        sha = event['pull_request']['head']['sha']\n    else:\n        sha = os.environ['GITHUB_SHA']\n    return (os.environ['GITHUB_API_URL'], os.environ['GITHUB_REPOSITORY'], sha, os.environ['GITHUB_TOKEN'], os.environ['GITHUB_RUN_ID'])\nexcept KeyError as e:\n    print(f'Error: Missing required environment variable or event data: {e}')\n    sys.exit(1)",
        "with open(os.environ['GITHUB_EVENT_PATH']) as f:\n    event = json.load(f)",
        "event = json.load(f)",
        "'pull_request' In event"
      ],
      "code": "import json\nimport os\nimport requests\nimport sys\nimport time\nfrom typing import Dict, List, Tuple\nCHECK_INTERVAL = 30\ndef get_environment_variables() -> Tuple[str, str, str, str, str]:\n    \"\"\"Retrieve and return necessary environment variables.\"\"\"\n    try:\n        with open(os.environ['GITHUB_EVENT_PATH']) as f:\n            event = json.load(f)\n        if 'pull_request' in event:\n            sha = event['pull_request']['head']['sha']\n        else:\n            sha = os.environ['GITHUB_SHA']\n        return (os.environ['GITHUB_API_URL'], os.environ['GITHUB_REPOSITORY'], sha, os.environ['GITHUB_TOKEN'], os.environ['GITHUB_RUN_ID'])\n    except KeyError as e:\n        print(f'Error: Missing required environment variable or event data: {e}')\n        sys.exit(1)\n'Retrieve and return necessary environment variables.'\ntry:\n    with open(os.environ['GITHUB_EVENT_PATH']) as f:\n        event = json.load(f)\n    if 'pull_request' in event:\n        sha = event['pull_request']['head']['sha']\n    else:\n        sha = os.environ['GITHUB_SHA']\n    return (os.environ['GITHUB_API_URL'], os.environ['GITHUB_REPOSITORY'], sha, os.environ['GITHUB_TOKEN'], os.environ['GITHUB_RUN_ID'])\nexcept KeyError as e:\n    print(f'Error: Missing required environment variable or event data: {e}')\n    sys.exit(1)\nwith open(os.environ['GITHUB_EVENT_PATH']) as f:\n    event = json.load(f)\nevent = json.load(f)\n'pull_request' In event"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "sha = event['pull_request']['head']['sha']"
      ],
      "code": "sha = event['pull_request']['head']['sha']"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [
        "sha = os.environ['GITHUB_SHA']"
      ],
      "code": "sha = os.environ['GITHUB_SHA']"
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [
        "return (os.environ['GITHUB_API_URL'], os.environ['GITHUB_REPOSITORY'], sha, os.environ['GITHUB_TOKEN'], os.environ['GITHUB_RUN_ID'])"
      ],
      "code": "return (os.environ['GITHUB_API_URL'], os.environ['GITHUB_REPOSITORY'], sha, os.environ['GITHUB_TOKEN'], os.environ['GITHUB_RUN_ID'])"
    },
    {
      "id": "n4",
      "type": "block",
      "statements": [
        "print(f'Error: Missing required environment variable or event data: {e}')",
        "sys.exit(1)",
        "def make_api_request(url: str, headers: Dict[str, str]) -> Dict:\n    \"\"\"Make an API request and return the JSON response.\"\"\"\n    try:\n        print('Making API request to:', url)\n        response = requests.get(url, headers=headers, timeout=10)\n        response.raise_for_status()\n        return response.json()\n    except requests.RequestException as e:\n        print(f'Error: API request failed. {e}')\n        sys.exit(1)",
        "'Make an API request and return the JSON response.'",
        "try:\n    print('Making API request to:', url)\n    response = requests.get(url, headers=headers, timeout=10)\n    response.raise_for_status()\n    return response.json()\nexcept requests.RequestException as e:\n    print(f'Error: API request failed. {e}')\n    sys.exit(1)",
        "print('Making API request to:', url)",
        "response = requests.get(url, headers=headers, timeout=10)",
        "response.raise_for_status()",
        "return response.json()"
      ],
      "code": "print(f'Error: Missing required environment variable or event data: {e}')\nsys.exit(1)\ndef make_api_request(url: str, headers: Dict[str, str]) -> Dict:\n    \"\"\"Make an API request and return the JSON response.\"\"\"\n    try:\n        print('Making API request to:', url)\n        response = requests.get(url, headers=headers, timeout=10)\n        response.raise_for_status()\n        return response.json()\n    except requests.RequestException as e:\n        print(f'Error: API request failed. {e}')\n        sys.exit(1)\n'Make an API request and return the JSON response.'\ntry:\n    print('Making API request to:', url)\n    response = requests.get(url, headers=headers, timeout=10)\n    response.raise_for_status()\n    return response.json()\nexcept requests.RequestException as e:\n    print(f'Error: API request failed. {e}')\n    sys.exit(1)\nprint('Making API request to:', url)\nresponse = requests.get(url, headers=headers, timeout=10)\nresponse.raise_for_status()\nreturn response.json()"
    },
    {
      "id": "n5",
      "type": "block",
      "statements": [
        "print(f'Error: API request failed. {e}')",
        "sys.exit(1)",
        "def process_check_runs(check_runs: List[Dict]) -> Tuple[bool, bool]:\n    \"\"\"Process check runs and return their status.\"\"\"\n    runs_in_progress = False\n    all_others_passed = True\n    for run in check_runs:\n        if str(run['name']) != 'Check PR Status':\n            status = run['status']\n            conclusion = run['conclusion']\n            if status == 'completed':\n                if conclusion not in ['success', 'skipped', 'neutral']:\n                    all_others_passed = False\n                    print(f\"Check run {run['name']} (ID: {run['id']}) has conclusion: {conclusion}\")\n            else:\n                runs_in_progress = True\n                print(f\"Check run {run['name']} (ID: {run['id']}) is still {status}.\")\n                all_others_passed = False\n        else:\n            print(f\"Skipping check run {run['name']} (ID: {run['id']}) as it is the current run.\")\n    return (runs_in_progress, all_others_passed)",
        "'Process check runs and return their status.'",
        "runs_in_progress = False",
        "all_others_passed = True"
      ],
      "code": "print(f'Error: API request failed. {e}')\nsys.exit(1)\ndef process_check_runs(check_runs: List[Dict]) -> Tuple[bool, bool]:\n    \"\"\"Process check runs and return their status.\"\"\"\n    runs_in_progress = False\n    all_others_passed = True\n    for run in check_runs:\n        if str(run['name']) != 'Check PR Status':\n            status = run['status']\n            conclusion = run['conclusion']\n            if status == 'completed':\n                if conclusion not in ['success', 'skipped', 'neutral']:\n                    all_others_passed = False\n                    print(f\"Check run {run['name']} (ID: {run['id']}) has conclusion: {conclusion}\")\n            else:\n                runs_in_progress = True\n                print(f\"Check run {run['name']} (ID: {run['id']}) is still {status}.\")\n                all_others_passed = False\n        else:\n            print(f\"Skipping check run {run['name']} (ID: {run['id']}) as it is the current run.\")\n    return (runs_in_progress, all_others_passed)\n'Process check runs and return their status.'\nruns_in_progress = False\nall_others_passed = True"
    },
    {
      "id": "n6",
      "type": "block",
      "statements": [
        "run",
        "check_runs"
      ],
      "code": "run\ncheck_runs"
    },
    {
      "id": "n7",
      "type": "block",
      "statements": [
        "str(run['name']) NotEq 'Check PR Status'"
      ],
      "code": "str(run['name']) NotEq 'Check PR Status'"
    },
    {
      "id": "n8",
      "type": "block",
      "statements": [
        "return (runs_in_progress, all_others_passed)"
      ],
      "code": "return (runs_in_progress, all_others_passed)"
    },
    {
      "id": "n9",
      "type": "block",
      "statements": [
        "status = run['status']",
        "conclusion = run['conclusion']",
        "status Eq 'completed'"
      ],
      "code": "status = run['status']\nconclusion = run['conclusion']\nstatus Eq 'completed'"
    },
    {
      "id": "n10",
      "type": "block",
      "statements": [
        "print(f\"Skipping check run {run['name']} (ID: {run['id']}) as it is the current run.\")"
      ],
      "code": "print(f\"Skipping check run {run['name']} (ID: {run['id']}) as it is the current run.\")"
    },
    {
      "id": "n11",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n12",
      "type": "block",
      "statements": [
        "conclusion NotIn ['success', 'skipped', 'neutral']"
      ],
      "code": "conclusion NotIn ['success', 'skipped', 'neutral']"
    },
    {
      "id": "n13",
      "type": "block",
      "statements": [
        "runs_in_progress = True",
        "print(f\"Check run {run['name']} (ID: {run['id']}) is still {status}.\")",
        "all_others_passed = False"
      ],
      "code": "runs_in_progress = True\nprint(f\"Check run {run['name']} (ID: {run['id']}) is still {status}.\")\nall_others_passed = False"
    },
    {
      "id": "n14",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n15",
      "type": "block",
      "statements": [
        "all_others_passed = False",
        "print(f\"Check run {run['name']} (ID: {run['id']}) has conclusion: {conclusion}\")"
      ],
      "code": "all_others_passed = False\nprint(f\"Check run {run['name']} (ID: {run['id']}) has conclusion: {conclusion}\")"
    },
    {
      "id": "n16",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n17",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n18",
      "type": "block",
      "statements": [
        "def main():\n    (api_url, repo, sha, github_token, current_run_id) = get_environment_variables()\n    endpoint = f'{api_url}/repos/{repo}/commits/{sha}/check-runs'\n    headers = {'Accept': 'application/vnd.github.v3+json'}\n    if github_token:\n        headers['Authorization'] = f'token {github_token}'\n    print(f'Current run ID: {current_run_id}')\n    while True:\n        data = make_api_request(endpoint, headers)\n        check_runs = data['check_runs']\n        print('Processing check runs...')\n        print(check_runs)\n        (runs_in_progress, all_others_passed) = process_check_runs(check_runs)\n        if not runs_in_progress:\n            break\n        print(f'Some check runs are still in progress. Waiting {CHECK_INTERVAL} seconds before checking again...')\n        time.sleep(CHECK_INTERVAL)\n    if all_others_passed:\n        print('All other completed check runs have passed. This check passes.')\n        sys.exit(0)\n    else:\n        print('Some check runs have failed or have not completed. This check fails.')\n        sys.exit(1)",
        "(api_url, repo, sha, github_token, current_run_id) = get_environment_variables()",
        "endpoint = f'{api_url}/repos/{repo}/commits/{sha}/check-runs'",
        "headers = {'Accept': 'application/vnd.github.v3+json'}",
        "github_token"
      ],
      "code": "def main():\n    (api_url, repo, sha, github_token, current_run_id) = get_environment_variables()\n    endpoint = f'{api_url}/repos/{repo}/commits/{sha}/check-runs'\n    headers = {'Accept': 'application/vnd.github.v3+json'}\n    if github_token:\n        headers['Authorization'] = f'token {github_token}'\n    print(f'Current run ID: {current_run_id}')\n    while True:\n        data = make_api_request(endpoint, headers)\n        check_runs = data['check_runs']\n        print('Processing check runs...')\n        print(check_runs)\n        (runs_in_progress, all_others_passed) = process_check_runs(check_runs)\n        if not runs_in_progress:\n            break\n        print(f'Some check runs are still in progress. Waiting {CHECK_INTERVAL} seconds before checking again...')\n        time.sleep(CHECK_INTERVAL)\n    if all_others_passed:\n        print('All other completed check runs have passed. This check passes.')\n        sys.exit(0)\n    else:\n        print('Some check runs have failed or have not completed. This check fails.')\n        sys.exit(1)\n(api_url, repo, sha, github_token, current_run_id) = get_environment_variables()\nendpoint = f'{api_url}/repos/{repo}/commits/{sha}/check-runs'\nheaders = {'Accept': 'application/vnd.github.v3+json'}\ngithub_token"
    },
    {
      "id": "n19",
      "type": "block",
      "statements": [
        "headers['Authorization'] = f'token {github_token}'"
      ],
      "code": "headers['Authorization'] = f'token {github_token}'"
    },
    {
      "id": "n20",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n21",
      "type": "block",
      "statements": [
        "print(f'Current run ID: {current_run_id}')"
      ],
      "code": "print(f'Current run ID: {current_run_id}')"
    },
    {
      "id": "n22",
      "type": "block",
      "statements": [
        "True"
      ],
      "code": "True"
    },
    {
      "id": "n23",
      "type": "block",
      "statements": [
        "data = make_api_request(endpoint, headers)",
        "check_runs = data['check_runs']",
        "print('Processing check runs...')",
        "print(check_runs)",
        "(runs_in_progress, all_others_passed) = process_check_runs(check_runs)",
        "not runs_in_progress"
      ],
      "code": "data = make_api_request(endpoint, headers)\ncheck_runs = data['check_runs']\nprint('Processing check runs...')\nprint(check_runs)\n(runs_in_progress, all_others_passed) = process_check_runs(check_runs)\nnot runs_in_progress"
    },
    {
      "id": "n24",
      "type": "block",
      "statements": [
        "all_others_passed"
      ],
      "code": "all_others_passed"
    },
    {
      "id": "n25",
      "type": "block",
      "statements": [
        "break"
      ],
      "code": "break"
    },
    {
      "id": "n26",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n27",
      "type": "block",
      "statements": [
        "print(f'Some check runs are still in progress. Waiting {CHECK_INTERVAL} seconds before checking again...')",
        "time.sleep(CHECK_INTERVAL)"
      ],
      "code": "print(f'Some check runs are still in progress. Waiting {CHECK_INTERVAL} seconds before checking again...')\ntime.sleep(CHECK_INTERVAL)"
    },
    {
      "id": "n28",
      "type": "block",
      "statements": [
        "print('All other completed check runs have passed. This check passes.')",
        "sys.exit(0)"
      ],
      "code": "print('All other completed check runs have passed. This check passes.')\nsys.exit(0)"
    },
    {
      "id": "n29",
      "type": "block",
      "statements": [
        "print('Some check runs have failed or have not completed. This check fails.')",
        "sys.exit(1)"
      ],
      "code": "print('Some check runs have failed or have not completed. This check fails.')\nsys.exit(1)"
    },
    {
      "id": "n30",
      "type": "block",
      "statements": [
        "__name__ Eq '__main__'"
      ],
      "code": "__name__ Eq '__main__'"
    },
    {
      "id": "n31",
      "type": "block",
      "statements": [
        "main()"
      ],
      "code": "main()"
    },
    {
      "id": "n32",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n33",
      "type": "block",
      "statements": [],
      "code": ""
    }
  ],
  "edges": [
    {
      "source": "n6",
      "target": "n7"
    },
    {
      "source": "n0",
      "target": "n1"
    },
    {
      "source": "n27",
      "target": "n22"
    },
    {
      "source": "n23",
      "target": "n25"
    },
    {
      "source": "n21",
      "target": "n22"
    },
    {
      "source": "n12",
      "target": "n16"
    },
    {
      "source": "n22",
      "target": "n23"
    },
    {
      "source": "n14",
      "target": "n11"
    },
    {
      "source": "n10",
      "target": "n11"
    },
    {
      "source": "n7",
      "target": "n10"
    },
    {
      "source": "n26",
      "target": "n27"
    },
    {
      "source": "n2",
      "target": "n3"
    },
    {
      "source": "n19",
      "target": "n21"
    },
    {
      "source": "n13",
      "target": "n14"
    },
    {
      "source": "n9",
      "target": "n13"
    },
    {
      "source": "n16",
      "target": "n17"
    },
    {
      "source": "n24",
      "target": "n29"
    },
    {
      "source": "n30",
      "target": "n32"
    },
    {
      "source": "n30",
      "target": "n31"
    },
    {
      "source": "n24",
      "target": "n28"
    },
    {
      "source": "n31",
      "target": "n33"
    },
    {
      "source": "n23",
      "target": "n26"
    },
    {
      "source": "n29",
      "target": "n30"
    },
    {
      "source": "n32",
      "target": "n33"
    },
    {
      "source": "n11",
      "target": "n6"
    },
    {
      "source": "n20",
      "target": "n21"
    },
    {
      "source": "n28",
      "target": "n30"
    },
    {
      "source": "n12",
      "target": "n15"
    },
    {
      "source": "n18",
      "target": "n19"
    },
    {
      "source": "n7",
      "target": "n9"
    },
    {
      "source": "n5",
      "target": "n6"
    },
    {
      "source": "n18",
      "target": "n20"
    },
    {
      "source": "n1",
      "target": "n3"
    },
    {
      "source": "n25",
      "target": "n27"
    },
    {
      "source": "n22",
      "target": "n24"
    },
    {
      "source": "n17",
      "target": "n14"
    },
    {
      "source": "n6",
      "target": "n8"
    },
    {
      "source": "n9",
      "target": "n12"
    },
    {
      "source": "n0",
      "target": "n2"
    },
    {
      "source": "n15",
      "target": "n17"
    }
  ]
}