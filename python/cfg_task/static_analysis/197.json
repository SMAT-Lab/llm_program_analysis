{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "def binary_or(a: int, b: int) -> str:\n    \"\"\"\n    Take in 2 integers, convert them to binary, and return a binary number that is the\n    result of a binary or operation on the integers provided.\n\n    >>> binary_or(25, 32)\n    '0b111001'\n    >>> binary_or(37, 50)\n    '0b110111'\n    >>> binary_or(21, 30)\n    '0b11111'\n    >>> binary_or(58, 73)\n    '0b1111011'\n    >>> binary_or(0, 255)\n    '0b11111111'\n    >>> binary_or(0, 256)\n    '0b100000000'\n    >>> binary_or(0, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: the value of both inputs must be positive\n    >>> binary_or(0, 1.1)\n    Traceback (most recent call last):\n        ...\n    TypeError: 'float' object cannot be interpreted as an integer\n    >>> binary_or(\"0\", \"1\")\n    Traceback (most recent call last):\n        ...\n    TypeError: '<' not supported between instances of 'str' and 'int'\n    \"\"\"\n    if a < 0 or b < 0:\n        raise ValueError('the value of both inputs must be positive')\n    a_binary = str(bin(a))[2:]\n    b_binary = str(bin(b))[2:]\n    max_len = max(len(a_binary), len(b_binary))\n    return '0b' + ''.join((str(int('1' in (char_a, char_b))) for (char_a, char_b) in zip(a_binary.zfill(max_len), b_binary.zfill(max_len))))",
        "'\\n    Take in 2 integers, convert them to binary, and return a binary number that is the\\n    result of a binary or operation on the integers provided.\\n\\n    >>> binary_or(25, 32)\\n    \\'0b111001\\'\\n    >>> binary_or(37, 50)\\n    \\'0b110111\\'\\n    >>> binary_or(21, 30)\\n    \\'0b11111\\'\\n    >>> binary_or(58, 73)\\n    \\'0b1111011\\'\\n    >>> binary_or(0, 255)\\n    \\'0b11111111\\'\\n    >>> binary_or(0, 256)\\n    \\'0b100000000\\'\\n    >>> binary_or(0, -1)\\n    Traceback (most recent call last):\\n        ...\\n    ValueError: the value of both inputs must be positive\\n    >>> binary_or(0, 1.1)\\n    Traceback (most recent call last):\\n        ...\\n    TypeError: \\'float\\' object cannot be interpreted as an integer\\n    >>> binary_or(\"0\", \"1\")\\n    Traceback (most recent call last):\\n        ...\\n    TypeError: \\'<\\' not supported between instances of \\'str\\' and \\'int\\'\\n    '",
        "a < 0 or b < 0"
      ],
      "code": "def binary_or(a: int, b: int) -> str:\n    \"\"\"\n    Take in 2 integers, convert them to binary, and return a binary number that is the\n    result of a binary or operation on the integers provided.\n\n    >>> binary_or(25, 32)\n    '0b111001'\n    >>> binary_or(37, 50)\n    '0b110111'\n    >>> binary_or(21, 30)\n    '0b11111'\n    >>> binary_or(58, 73)\n    '0b1111011'\n    >>> binary_or(0, 255)\n    '0b11111111'\n    >>> binary_or(0, 256)\n    '0b100000000'\n    >>> binary_or(0, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: the value of both inputs must be positive\n    >>> binary_or(0, 1.1)\n    Traceback (most recent call last):\n        ...\n    TypeError: 'float' object cannot be interpreted as an integer\n    >>> binary_or(\"0\", \"1\")\n    Traceback (most recent call last):\n        ...\n    TypeError: '<' not supported between instances of 'str' and 'int'\n    \"\"\"\n    if a < 0 or b < 0:\n        raise ValueError('the value of both inputs must be positive')\n    a_binary = str(bin(a))[2:]\n    b_binary = str(bin(b))[2:]\n    max_len = max(len(a_binary), len(b_binary))\n    return '0b' + ''.join((str(int('1' in (char_a, char_b))) for (char_a, char_b) in zip(a_binary.zfill(max_len), b_binary.zfill(max_len))))\n'\\n    Take in 2 integers, convert them to binary, and return a binary number that is the\\n    result of a binary or operation on the integers provided.\\n\\n    >>> binary_or(25, 32)\\n    \\'0b111001\\'\\n    >>> binary_or(37, 50)\\n    \\'0b110111\\'\\n    >>> binary_or(21, 30)\\n    \\'0b11111\\'\\n    >>> binary_or(58, 73)\\n    \\'0b1111011\\'\\n    >>> binary_or(0, 255)\\n    \\'0b11111111\\'\\n    >>> binary_or(0, 256)\\n    \\'0b100000000\\'\\n    >>> binary_or(0, -1)\\n    Traceback (most recent call last):\\n        ...\\n    ValueError: the value of both inputs must be positive\\n    >>> binary_or(0, 1.1)\\n    Traceback (most recent call last):\\n        ...\\n    TypeError: \\'float\\' object cannot be interpreted as an integer\\n    >>> binary_or(\"0\", \"1\")\\n    Traceback (most recent call last):\\n        ...\\n    TypeError: \\'<\\' not supported between instances of \\'str\\' and \\'int\\'\\n    '\na < 0 or b < 0"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "raise ValueError('the value of both inputs must be positive')"
      ],
      "code": "raise ValueError('the value of both inputs must be positive')"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [
        "a_binary = str(bin(a))[2:]",
        "b_binary = str(bin(b))[2:]",
        "max_len = max(len(a_binary), len(b_binary))",
        "return '0b' + ''.join((str(int('1' in (char_a, char_b))) for (char_a, char_b) in zip(a_binary.zfill(max_len), b_binary.zfill(max_len))))"
      ],
      "code": "a_binary = str(bin(a))[2:]\nb_binary = str(bin(b))[2:]\nmax_len = max(len(a_binary), len(b_binary))\nreturn '0b' + ''.join((str(int('1' in (char_a, char_b))) for (char_a, char_b) in zip(a_binary.zfill(max_len), b_binary.zfill(max_len))))"
    },
    {
      "id": "n4",
      "type": "block",
      "statements": [
        "__name__ Eq '__main__'"
      ],
      "code": "__name__ Eq '__main__'"
    },
    {
      "id": "n5",
      "type": "block",
      "statements": [
        "import doctest",
        "doctest.testmod()"
      ],
      "code": "import doctest\ndoctest.testmod()"
    },
    {
      "id": "n6",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n7",
      "type": "block",
      "statements": [],
      "code": ""
    }
  ],
  "edges": [
    {
      "source": "n1",
      "target": "n3"
    },
    {
      "source": "n6",
      "target": "n7"
    },
    {
      "source": "n0",
      "target": "n2"
    },
    {
      "source": "n0",
      "target": "n1"
    },
    {
      "source": "n4",
      "target": "n5"
    },
    {
      "source": "n5",
      "target": "n7"
    },
    {
      "source": "n4",
      "target": "n6"
    },
    {
      "source": "n2",
      "target": "n3"
    }
  ]
}