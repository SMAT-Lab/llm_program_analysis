{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "'\\n    The approach taken is explained below. I decided to do it simply.\\n    Initially I was considering parsing the data into some sort of\\n    structure and then generating an appropriate README. I am still\\n    considering doing it - but for now this should work. The only issue\\n    I see is that it only sorts the entries at the lowest level, and that\\n    the order of the top-level contents do not match the order of the actual\\n    entries.\\n\\n    This could be extended by having nested blocks, sorting them recursively\\n    and flattening the end structure into a list of lines. Revision 2 maybe ^.^.\\n'",
        "def sort_blocks():\n    with open('README.md', 'r') as read_me_file:\n        read_me = read_me_file.read()\n    table_of_contents = ''.join(read_me.split('- - -')[0])\n    blocks = ''.join(read_me.split('- - -')[1]).split('\\n# ')\n    for i in range(len(blocks)):\n        if i == 0:\n            blocks[i] = blocks[i] + '\\n'\n        else:\n            blocks[i] = '# ' + blocks[i] + '\\n'\n    inner_blocks = sorted(blocks[0].split('##'))\n    for i in range(1, len(inner_blocks)):\n        if inner_blocks[i][0] != '#':\n            inner_blocks[i] = '##' + inner_blocks[i]\n    inner_blocks = ''.join(inner_blocks)\n    blocks[0] = inner_blocks\n    final_README = table_of_contents + '- - -' + ''.join(blocks)\n    with open('README.md', 'w+') as sorted_file:\n        sorted_file.write(final_README)",
        "with open('README.md', 'r') as read_me_file:\n    read_me = read_me_file.read()",
        "read_me = read_me_file.read()",
        "table_of_contents = ''.join(read_me.split('- - -')[0])",
        "blocks = ''.join(read_me.split('- - -')[1]).split('\\n# ')"
      ],
      "code": "'\\n    The approach taken is explained below. I decided to do it simply.\\n    Initially I was considering parsing the data into some sort of\\n    structure and then generating an appropriate README. I am still\\n    considering doing it - but for now this should work. The only issue\\n    I see is that it only sorts the entries at the lowest level, and that\\n    the order of the top-level contents do not match the order of the actual\\n    entries.\\n\\n    This could be extended by having nested blocks, sorting them recursively\\n    and flattening the end structure into a list of lines. Revision 2 maybe ^.^.\\n'\ndef sort_blocks():\n    with open('README.md', 'r') as read_me_file:\n        read_me = read_me_file.read()\n    table_of_contents = ''.join(read_me.split('- - -')[0])\n    blocks = ''.join(read_me.split('- - -')[1]).split('\\n# ')\n    for i in range(len(blocks)):\n        if i == 0:\n            blocks[i] = blocks[i] + '\\n'\n        else:\n            blocks[i] = '# ' + blocks[i] + '\\n'\n    inner_blocks = sorted(blocks[0].split('##'))\n    for i in range(1, len(inner_blocks)):\n        if inner_blocks[i][0] != '#':\n            inner_blocks[i] = '##' + inner_blocks[i]\n    inner_blocks = ''.join(inner_blocks)\n    blocks[0] = inner_blocks\n    final_README = table_of_contents + '- - -' + ''.join(blocks)\n    with open('README.md', 'w+') as sorted_file:\n        sorted_file.write(final_README)\nwith open('README.md', 'r') as read_me_file:\n    read_me = read_me_file.read()\nread_me = read_me_file.read()\ntable_of_contents = ''.join(read_me.split('- - -')[0])\nblocks = ''.join(read_me.split('- - -')[1]).split('\\n# ')"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "i",
        "range(len(blocks))"
      ],
      "code": "i\nrange(len(blocks))"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [
        "i Eq 0"
      ],
      "code": "i Eq 0"
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [
        "inner_blocks = sorted(blocks[0].split('##'))"
      ],
      "code": "inner_blocks = sorted(blocks[0].split('##'))"
    },
    {
      "id": "n4",
      "type": "block",
      "statements": [
        "blocks[i] = blocks[i] + '\\n'"
      ],
      "code": "blocks[i] = blocks[i] + '\\n'"
    },
    {
      "id": "n5",
      "type": "block",
      "statements": [
        "blocks[i] = '# ' + blocks[i] + '\\n'"
      ],
      "code": "blocks[i] = '# ' + blocks[i] + '\\n'"
    },
    {
      "id": "n6",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n7",
      "type": "block",
      "statements": [
        "i",
        "range(1, len(inner_blocks))"
      ],
      "code": "i\nrange(1, len(inner_blocks))"
    },
    {
      "id": "n8",
      "type": "block",
      "statements": [
        "inner_blocks[i][0] NotEq '#'"
      ],
      "code": "inner_blocks[i][0] NotEq '#'"
    },
    {
      "id": "n9",
      "type": "block",
      "statements": [
        "inner_blocks = ''.join(inner_blocks)",
        "blocks[0] = inner_blocks",
        "final_README = table_of_contents + '- - -' + ''.join(blocks)",
        "with open('README.md', 'w+') as sorted_file:\n    sorted_file.write(final_README)",
        "sorted_file.write(final_README)",
        "def main():\n    with open('README.md', 'r') as read_me_file:\n        read_me = read_me_file.readlines()\n    blocks = []\n    last_indent = None\n    for line in read_me:\n        s_line = line.lstrip()\n        indent = len(line) - len(s_line)\n        if any([s_line.startswith(s) for s in ['* [', '- [']]):\n            if indent == last_indent:\n                blocks[-1].append(line)\n            else:\n                blocks.append([line])\n            last_indent = indent\n        else:\n            blocks.append([line])\n            last_indent = None\n    with open('README.md', 'w+') as sorted_file:\n        blocks = [''.join(sorted(block, key=str.lower)) for block in blocks]\n        sorted_file.write(''.join(blocks))\n    sort_blocks()",
        "with open('README.md', 'r') as read_me_file:\n    read_me = read_me_file.readlines()",
        "read_me = read_me_file.readlines()",
        "blocks = []",
        "last_indent = None"
      ],
      "code": "inner_blocks = ''.join(inner_blocks)\nblocks[0] = inner_blocks\nfinal_README = table_of_contents + '- - -' + ''.join(blocks)\nwith open('README.md', 'w+') as sorted_file:\n    sorted_file.write(final_README)\nsorted_file.write(final_README)\ndef main():\n    with open('README.md', 'r') as read_me_file:\n        read_me = read_me_file.readlines()\n    blocks = []\n    last_indent = None\n    for line in read_me:\n        s_line = line.lstrip()\n        indent = len(line) - len(s_line)\n        if any([s_line.startswith(s) for s in ['* [', '- [']]):\n            if indent == last_indent:\n                blocks[-1].append(line)\n            else:\n                blocks.append([line])\n            last_indent = indent\n        else:\n            blocks.append([line])\n            last_indent = None\n    with open('README.md', 'w+') as sorted_file:\n        blocks = [''.join(sorted(block, key=str.lower)) for block in blocks]\n        sorted_file.write(''.join(blocks))\n    sort_blocks()\nwith open('README.md', 'r') as read_me_file:\n    read_me = read_me_file.readlines()\nread_me = read_me_file.readlines()\nblocks = []\nlast_indent = None"
    },
    {
      "id": "n10",
      "type": "block",
      "statements": [
        "inner_blocks[i] = '##' + inner_blocks[i]"
      ],
      "code": "inner_blocks[i] = '##' + inner_blocks[i]"
    },
    {
      "id": "n11",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n12",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n13",
      "type": "block",
      "statements": [
        "line",
        "read_me"
      ],
      "code": "line\nread_me"
    },
    {
      "id": "n14",
      "type": "block",
      "statements": [
        "s_line = line.lstrip()",
        "indent = len(line) - len(s_line)",
        "any([s_line.startswith(s) for s in ['* [', '- [']])"
      ],
      "code": "s_line = line.lstrip()\nindent = len(line) - len(s_line)\nany([s_line.startswith(s) for s in ['* [', '- [']])"
    },
    {
      "id": "n15",
      "type": "block",
      "statements": [
        "with open('README.md', 'w+') as sorted_file:\n    blocks = [''.join(sorted(block, key=str.lower)) for block in blocks]\n    sorted_file.write(''.join(blocks))",
        "blocks = [''.join(sorted(block, key=str.lower)) for block in blocks]",
        "sorted_file.write(''.join(blocks))",
        "sort_blocks()",
        "__name__ Eq '__main__'"
      ],
      "code": "with open('README.md', 'w+') as sorted_file:\n    blocks = [''.join(sorted(block, key=str.lower)) for block in blocks]\n    sorted_file.write(''.join(blocks))\nblocks = [''.join(sorted(block, key=str.lower)) for block in blocks]\nsorted_file.write(''.join(blocks))\nsort_blocks()\n__name__ Eq '__main__'"
    },
    {
      "id": "n16",
      "type": "block",
      "statements": [
        "indent Eq last_indent"
      ],
      "code": "indent Eq last_indent"
    },
    {
      "id": "n17",
      "type": "block",
      "statements": [
        "blocks.append([line])",
        "last_indent = None"
      ],
      "code": "blocks.append([line])\nlast_indent = None"
    },
    {
      "id": "n18",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n19",
      "type": "block",
      "statements": [
        "blocks[-1].append(line)"
      ],
      "code": "blocks[-1].append(line)"
    },
    {
      "id": "n20",
      "type": "block",
      "statements": [
        "blocks.append([line])"
      ],
      "code": "blocks.append([line])"
    },
    {
      "id": "n21",
      "type": "block",
      "statements": [
        "last_indent = indent"
      ],
      "code": "last_indent = indent"
    },
    {
      "id": "n22",
      "type": "block",
      "statements": [
        "main()"
      ],
      "code": "main()"
    },
    {
      "id": "n23",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n24",
      "type": "block",
      "statements": [],
      "code": ""
    }
  ],
  "edges": [
    {
      "source": "n0",
      "target": "n1"
    },
    {
      "source": "n6",
      "target": "n1"
    },
    {
      "source": "n17",
      "target": "n18"
    },
    {
      "source": "n14",
      "target": "n17"
    },
    {
      "source": "n19",
      "target": "n21"
    },
    {
      "source": "n13",
      "target": "n14"
    },
    {
      "source": "n12",
      "target": "n7"
    },
    {
      "source": "n9",
      "target": "n13"
    },
    {
      "source": "n23",
      "target": "n24"
    },
    {
      "source": "n15",
      "target": "n22"
    },
    {
      "source": "n2",
      "target": "n4"
    },
    {
      "source": "n13",
      "target": "n15"
    },
    {
      "source": "n18",
      "target": "n13"
    },
    {
      "source": "n1",
      "target": "n2"
    },
    {
      "source": "n16",
      "target": "n19"
    },
    {
      "source": "n4",
      "target": "n6"
    },
    {
      "source": "n7",
      "target": "n8"
    },
    {
      "source": "n16",
      "target": "n20"
    },
    {
      "source": "n14",
      "target": "n16"
    },
    {
      "source": "n20",
      "target": "n21"
    },
    {
      "source": "n15",
      "target": "n23"
    },
    {
      "source": "n10",
      "target": "n12"
    },
    {
      "source": "n11",
      "target": "n12"
    },
    {
      "source": "n8",
      "target": "n11"
    },
    {
      "source": "n7",
      "target": "n9"
    },
    {
      "source": "n5",
      "target": "n6"
    },
    {
      "source": "n1",
      "target": "n3"
    },
    {
      "source": "n8",
      "target": "n10"
    },
    {
      "source": "n21",
      "target": "n18"
    },
    {
      "source": "n2",
      "target": "n5"
    },
    {
      "source": "n22",
      "target": "n24"
    },
    {
      "source": "n3",
      "target": "n7"
    }
  ]
}