{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "def twos_complement(number: int) -> str:\n    \"\"\"\n    Take in a negative integer 'number'.\n    Return the two's complement representation of 'number'.\n\n    >>> twos_complement(0)\n    '0b0'\n    >>> twos_complement(-1)\n    '0b11'\n    >>> twos_complement(-5)\n    '0b1011'\n    >>> twos_complement(-17)\n    '0b101111'\n    >>> twos_complement(-207)\n    '0b100110001'\n    >>> twos_complement(1)\n    Traceback (most recent call last):\n        ...\n    ValueError: input must be a negative integer\n    \"\"\"\n    if number > 0:\n        raise ValueError('input must be a negative integer')\n    binary_number_length = len(bin(number)[3:])\n    twos_complement_number = bin(abs(number) - (1 << binary_number_length))[3:]\n    twos_complement_number = '1' + '0' * (binary_number_length - len(twos_complement_number)) + twos_complement_number if number < 0 else '0'\n    return '0b' + twos_complement_number",
        "\"\\n    Take in a negative integer 'number'.\\n    Return the two's complement representation of 'number'.\\n\\n    >>> twos_complement(0)\\n    '0b0'\\n    >>> twos_complement(-1)\\n    '0b11'\\n    >>> twos_complement(-5)\\n    '0b1011'\\n    >>> twos_complement(-17)\\n    '0b101111'\\n    >>> twos_complement(-207)\\n    '0b100110001'\\n    >>> twos_complement(1)\\n    Traceback (most recent call last):\\n        ...\\n    ValueError: input must be a negative integer\\n    \"",
        "number Gt 0"
      ],
      "code": "def twos_complement(number: int) -> str:\n    \"\"\"\n    Take in a negative integer 'number'.\n    Return the two's complement representation of 'number'.\n\n    >>> twos_complement(0)\n    '0b0'\n    >>> twos_complement(-1)\n    '0b11'\n    >>> twos_complement(-5)\n    '0b1011'\n    >>> twos_complement(-17)\n    '0b101111'\n    >>> twos_complement(-207)\n    '0b100110001'\n    >>> twos_complement(1)\n    Traceback (most recent call last):\n        ...\n    ValueError: input must be a negative integer\n    \"\"\"\n    if number > 0:\n        raise ValueError('input must be a negative integer')\n    binary_number_length = len(bin(number)[3:])\n    twos_complement_number = bin(abs(number) - (1 << binary_number_length))[3:]\n    twos_complement_number = '1' + '0' * (binary_number_length - len(twos_complement_number)) + twos_complement_number if number < 0 else '0'\n    return '0b' + twos_complement_number\n\"\\n    Take in a negative integer 'number'.\\n    Return the two's complement representation of 'number'.\\n\\n    >>> twos_complement(0)\\n    '0b0'\\n    >>> twos_complement(-1)\\n    '0b11'\\n    >>> twos_complement(-5)\\n    '0b1011'\\n    >>> twos_complement(-17)\\n    '0b101111'\\n    >>> twos_complement(-207)\\n    '0b100110001'\\n    >>> twos_complement(1)\\n    Traceback (most recent call last):\\n        ...\\n    ValueError: input must be a negative integer\\n    \"\nnumber Gt 0"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "raise ValueError('input must be a negative integer')"
      ],
      "code": "raise ValueError('input must be a negative integer')"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [
        "binary_number_length = len(bin(number)[3:])",
        "twos_complement_number = bin(abs(number) - (1 << binary_number_length))[3:]",
        "twos_complement_number = '1' + '0' * (binary_number_length - len(twos_complement_number)) + twos_complement_number if number < 0 else '0'",
        "return '0b' + twos_complement_number"
      ],
      "code": "binary_number_length = len(bin(number)[3:])\ntwos_complement_number = bin(abs(number) - (1 << binary_number_length))[3:]\ntwos_complement_number = '1' + '0' * (binary_number_length - len(twos_complement_number)) + twos_complement_number if number < 0 else '0'\nreturn '0b' + twos_complement_number"
    },
    {
      "id": "n4",
      "type": "block",
      "statements": [
        "__name__ Eq '__main__'"
      ],
      "code": "__name__ Eq '__main__'"
    },
    {
      "id": "n5",
      "type": "block",
      "statements": [
        "import doctest",
        "doctest.testmod()"
      ],
      "code": "import doctest\ndoctest.testmod()"
    },
    {
      "id": "n6",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n7",
      "type": "block",
      "statements": [],
      "code": ""
    }
  ],
  "edges": [
    {
      "source": "n1",
      "target": "n3"
    },
    {
      "source": "n6",
      "target": "n7"
    },
    {
      "source": "n0",
      "target": "n2"
    },
    {
      "source": "n0",
      "target": "n1"
    },
    {
      "source": "n4",
      "target": "n5"
    },
    {
      "source": "n5",
      "target": "n7"
    },
    {
      "source": "n4",
      "target": "n6"
    },
    {
      "source": "n2",
      "target": "n3"
    }
  ]
}