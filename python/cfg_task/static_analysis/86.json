{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "from datetime import datetime",
        "import pytest",
        "from prisma.models import CreditTransaction",
        "from backend.blocks.llm import AITextGeneratorBlock",
        "from backend.data.credit import UserCredit",
        "from backend.data.user import DEFAULT_USER_ID",
        "from backend.integrations.credentials_store import openai_credentials",
        "from backend.util.test import SpinTestServer",
        "REFILL_VALUE = 1000",
        "user_credit = UserCredit(REFILL_VALUE)",
        "@pytest.mark.asyncio(scope='session')\nasync def test_block_credit_usage(server: SpinTestServer):\n    current_credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)\n    spending_amount_1 = await user_credit.spend_credits(DEFAULT_USER_ID, current_credit, AITextGeneratorBlock().id, {'model': 'gpt-4-turbo', 'credentials': {'id': openai_credentials.id, 'provider': openai_credentials.provider, 'type': openai_credentials.type}}, 0.0, 0.0, validate_balance=False)\n    assert spending_amount_1 > 0\n    spending_amount_2 = await user_credit.spend_credits(DEFAULT_USER_ID, current_credit, AITextGeneratorBlock().id, {'model': 'gpt-4-turbo', 'api_key': 'owned_api_key'}, 0.0, 0.0, validate_balance=False)\n    assert spending_amount_2 == 0\n    new_credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)\n    assert new_credit == current_credit - spending_amount_1 - spending_amount_2",
        "current_credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)",
        "spending_amount_1 = await user_credit.spend_credits(DEFAULT_USER_ID, current_credit, AITextGeneratorBlock().id, {'model': 'gpt-4-turbo', 'credentials': {'id': openai_credentials.id, 'provider': openai_credentials.provider, 'type': openai_credentials.type}}, 0.0, 0.0, validate_balance=False)",
        "assert spending_amount_1 > 0",
        "spending_amount_2 = await user_credit.spend_credits(DEFAULT_USER_ID, current_credit, AITextGeneratorBlock().id, {'model': 'gpt-4-turbo', 'api_key': 'owned_api_key'}, 0.0, 0.0, validate_balance=False)",
        "assert spending_amount_2 == 0",
        "new_credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)",
        "assert new_credit == current_credit - spending_amount_1 - spending_amount_2",
        "@pytest.mark.asyncio(scope='session')\nasync def test_block_credit_top_up(server: SpinTestServer):\n    current_credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)\n    await user_credit.top_up_credits(DEFAULT_USER_ID, 100)\n    new_credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)\n    assert new_credit == current_credit + 100",
        "current_credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)",
        "await user_credit.top_up_credits(DEFAULT_USER_ID, 100)",
        "new_credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)",
        "assert new_credit == current_credit + 100",
        "@pytest.mark.asyncio(scope='session')\nasync def test_block_credit_reset(server: SpinTestServer):\n    month1 = datetime(2022, 1, 15)\n    month2 = datetime(2022, 2, 15)\n    user_credit.time_now = lambda : month2\n    month2credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)\n    user_credit.time_now = lambda : month1\n    month1credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)\n    await user_credit.top_up_credits(DEFAULT_USER_ID, 100)\n    assert await user_credit.get_or_refill_credit(DEFAULT_USER_ID) == month1credit + 100\n    user_credit.time_now = lambda : month2\n    assert await user_credit.get_or_refill_credit(DEFAULT_USER_ID) == month2credit",
        "month1 = datetime(2022, 1, 15)",
        "month2 = datetime(2022, 2, 15)",
        "user_credit.time_now = lambda : month2",
        "month2credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)",
        "user_credit.time_now = lambda : month1",
        "month1credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)",
        "await user_credit.top_up_credits(DEFAULT_USER_ID, 100)",
        "assert await user_credit.get_or_refill_credit(DEFAULT_USER_ID) == month1credit + 100",
        "user_credit.time_now = lambda : month2",
        "assert await user_credit.get_or_refill_credit(DEFAULT_USER_ID) == month2credit",
        "@pytest.mark.asyncio(scope='session')\nasync def test_credit_refill(server: SpinTestServer):\n    await CreditTransaction.prisma().update_many(where={'userId': DEFAULT_USER_ID, 'createdAt': {'gte': datetime(2022, 2, 1), 'lt': datetime(2022, 3, 1)}}, data={'isActive': False})\n    user_credit.time_now = lambda : datetime(2022, 2, 15)\n    balance = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)\n    assert balance == REFILL_VALUE",
        "await CreditTransaction.prisma().update_many(where={'userId': DEFAULT_USER_ID, 'createdAt': {'gte': datetime(2022, 2, 1), 'lt': datetime(2022, 3, 1)}}, data={'isActive': False})",
        "user_credit.time_now = lambda : datetime(2022, 2, 15)",
        "balance = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)",
        "assert balance == REFILL_VALUE"
      ],
      "code": "from datetime import datetime\nimport pytest\nfrom prisma.models import CreditTransaction\nfrom backend.blocks.llm import AITextGeneratorBlock\nfrom backend.data.credit import UserCredit\nfrom backend.data.user import DEFAULT_USER_ID\nfrom backend.integrations.credentials_store import openai_credentials\nfrom backend.util.test import SpinTestServer\nREFILL_VALUE = 1000\nuser_credit = UserCredit(REFILL_VALUE)\n@pytest.mark.asyncio(scope='session')\nasync def test_block_credit_usage(server: SpinTestServer):\n    current_credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)\n    spending_amount_1 = await user_credit.spend_credits(DEFAULT_USER_ID, current_credit, AITextGeneratorBlock().id, {'model': 'gpt-4-turbo', 'credentials': {'id': openai_credentials.id, 'provider': openai_credentials.provider, 'type': openai_credentials.type}}, 0.0, 0.0, validate_balance=False)\n    assert spending_amount_1 > 0\n    spending_amount_2 = await user_credit.spend_credits(DEFAULT_USER_ID, current_credit, AITextGeneratorBlock().id, {'model': 'gpt-4-turbo', 'api_key': 'owned_api_key'}, 0.0, 0.0, validate_balance=False)\n    assert spending_amount_2 == 0\n    new_credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)\n    assert new_credit == current_credit - spending_amount_1 - spending_amount_2\ncurrent_credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)\nspending_amount_1 = await user_credit.spend_credits(DEFAULT_USER_ID, current_credit, AITextGeneratorBlock().id, {'model': 'gpt-4-turbo', 'credentials': {'id': openai_credentials.id, 'provider': openai_credentials.provider, 'type': openai_credentials.type}}, 0.0, 0.0, validate_balance=False)\nassert spending_amount_1 > 0\nspending_amount_2 = await user_credit.spend_credits(DEFAULT_USER_ID, current_credit, AITextGeneratorBlock().id, {'model': 'gpt-4-turbo', 'api_key': 'owned_api_key'}, 0.0, 0.0, validate_balance=False)\nassert spending_amount_2 == 0\nnew_credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)\nassert new_credit == current_credit - spending_amount_1 - spending_amount_2\n@pytest.mark.asyncio(scope='session')\nasync def test_block_credit_top_up(server: SpinTestServer):\n    current_credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)\n    await user_credit.top_up_credits(DEFAULT_USER_ID, 100)\n    new_credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)\n    assert new_credit == current_credit + 100\ncurrent_credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)\nawait user_credit.top_up_credits(DEFAULT_USER_ID, 100)\nnew_credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)\nassert new_credit == current_credit + 100\n@pytest.mark.asyncio(scope='session')\nasync def test_block_credit_reset(server: SpinTestServer):\n    month1 = datetime(2022, 1, 15)\n    month2 = datetime(2022, 2, 15)\n    user_credit.time_now = lambda : month2\n    month2credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)\n    user_credit.time_now = lambda : month1\n    month1credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)\n    await user_credit.top_up_credits(DEFAULT_USER_ID, 100)\n    assert await user_credit.get_or_refill_credit(DEFAULT_USER_ID) == month1credit + 100\n    user_credit.time_now = lambda : month2\n    assert await user_credit.get_or_refill_credit(DEFAULT_USER_ID) == month2credit\nmonth1 = datetime(2022, 1, 15)\nmonth2 = datetime(2022, 2, 15)\nuser_credit.time_now = lambda : month2\nmonth2credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)\nuser_credit.time_now = lambda : month1\nmonth1credit = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)\nawait user_credit.top_up_credits(DEFAULT_USER_ID, 100)\nassert await user_credit.get_or_refill_credit(DEFAULT_USER_ID) == month1credit + 100\nuser_credit.time_now = lambda : month2\nassert await user_credit.get_or_refill_credit(DEFAULT_USER_ID) == month2credit\n@pytest.mark.asyncio(scope='session')\nasync def test_credit_refill(server: SpinTestServer):\n    await CreditTransaction.prisma().update_many(where={'userId': DEFAULT_USER_ID, 'createdAt': {'gte': datetime(2022, 2, 1), 'lt': datetime(2022, 3, 1)}}, data={'isActive': False})\n    user_credit.time_now = lambda : datetime(2022, 2, 15)\n    balance = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)\n    assert balance == REFILL_VALUE\nawait CreditTransaction.prisma().update_many(where={'userId': DEFAULT_USER_ID, 'createdAt': {'gte': datetime(2022, 2, 1), 'lt': datetime(2022, 3, 1)}}, data={'isActive': False})\nuser_credit.time_now = lambda : datetime(2022, 2, 15)\nbalance = await user_credit.get_or_refill_credit(DEFAULT_USER_ID)\nassert balance == REFILL_VALUE"
    }
  ],
  "edges": []
}