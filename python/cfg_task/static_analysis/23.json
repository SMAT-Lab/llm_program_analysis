{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "import pytest",
        "from backend.util.request import validate_url",
        "def test_validate_url():\n    with pytest.raises(ValueError):\n        validate_url('localhost', [])\n    with pytest.raises(ValueError):\n        validate_url('192.168.1.1', [])\n    with pytest.raises(ValueError):\n        validate_url('127.0.0.1', [])\n    with pytest.raises(ValueError):\n        validate_url('0.0.0.0', [])\n    assert validate_url('google.com/a?b=c', []) == 'http://google.com/a?b=c'\n    assert validate_url('github.com?key=!@!@', []) == 'http://github.com?key=!@!@'\n    with pytest.raises(ValueError):\n        validate_url('ftp://example.com', [])\n    with pytest.raises(ValueError):\n        validate_url('file://example.com', [])\n    assert validate_url('http://xn--exmple-cua.com', []) == 'http://xn--exmple-cua.com'\n    with pytest.raises(ValueError):\n        validate_url('http://exa◌mple.com', [])\n    with pytest.raises(ValueError):\n        validate_url('::1', [])\n    with pytest.raises(ValueError):\n        validate_url('http://[::1]', [])\n    with pytest.raises(ValueError):\n        validate_url('http://example_underscore.com', [])\n    with pytest.raises(ValueError):\n        validate_url('http://exa mple.com', [])\n    with pytest.raises(ValueError):\n        validate_url('http://', [])\n    with pytest.raises(ValueError):\n        validate_url('://missing-scheme', [])\n    trusted = ['internal-api.company.com', '10.0.0.5']\n    assert validate_url('internal-api.company.com', trusted) == 'http://internal-api.company.com'\n    assert validate_url('10.0.0.5', ['10.0.0.5']) == 'http://10.0.0.5'\n    assert validate_url('example.com/path%20with%20spaces', []) == 'http://example.com/path%20with%20spaces'\n    assert validate_url('http://example.com\\\\backslash', []) == 'http://example.com/backslash'\n    assert validate_url('example.com', []) == 'http://example.com'\n    assert validate_url('https://secure.com', []) == 'https://secure.com'\n    assert validate_url('example.com?param=äöü', []) == 'http://example.com?param=äöü'",
        "with pytest.raises(ValueError):\n    validate_url('localhost', [])",
        "validate_url('localhost', [])",
        "with pytest.raises(ValueError):\n    validate_url('192.168.1.1', [])",
        "validate_url('192.168.1.1', [])",
        "with pytest.raises(ValueError):\n    validate_url('127.0.0.1', [])",
        "validate_url('127.0.0.1', [])",
        "with pytest.raises(ValueError):\n    validate_url('0.0.0.0', [])",
        "validate_url('0.0.0.0', [])",
        "assert validate_url('google.com/a?b=c', []) == 'http://google.com/a?b=c'",
        "assert validate_url('github.com?key=!@!@', []) == 'http://github.com?key=!@!@'",
        "with pytest.raises(ValueError):\n    validate_url('ftp://example.com', [])",
        "validate_url('ftp://example.com', [])",
        "with pytest.raises(ValueError):\n    validate_url('file://example.com', [])",
        "validate_url('file://example.com', [])",
        "assert validate_url('http://xn--exmple-cua.com', []) == 'http://xn--exmple-cua.com'",
        "with pytest.raises(ValueError):\n    validate_url('http://exa◌mple.com', [])",
        "validate_url('http://exa◌mple.com', [])",
        "with pytest.raises(ValueError):\n    validate_url('::1', [])",
        "validate_url('::1', [])",
        "with pytest.raises(ValueError):\n    validate_url('http://[::1]', [])",
        "validate_url('http://[::1]', [])",
        "with pytest.raises(ValueError):\n    validate_url('http://example_underscore.com', [])",
        "validate_url('http://example_underscore.com', [])",
        "with pytest.raises(ValueError):\n    validate_url('http://exa mple.com', [])",
        "validate_url('http://exa mple.com', [])",
        "with pytest.raises(ValueError):\n    validate_url('http://', [])",
        "validate_url('http://', [])",
        "with pytest.raises(ValueError):\n    validate_url('://missing-scheme', [])",
        "validate_url('://missing-scheme', [])",
        "trusted = ['internal-api.company.com', '10.0.0.5']",
        "assert validate_url('internal-api.company.com', trusted) == 'http://internal-api.company.com'",
        "assert validate_url('10.0.0.5', ['10.0.0.5']) == 'http://10.0.0.5'",
        "assert validate_url('example.com/path%20with%20spaces', []) == 'http://example.com/path%20with%20spaces'",
        "assert validate_url('http://example.com\\\\backslash', []) == 'http://example.com/backslash'",
        "assert validate_url('example.com', []) == 'http://example.com'",
        "assert validate_url('https://secure.com', []) == 'https://secure.com'",
        "assert validate_url('example.com?param=äöü', []) == 'http://example.com?param=äöü'"
      ],
      "code": "import pytest\nfrom backend.util.request import validate_url\ndef test_validate_url():\n    with pytest.raises(ValueError):\n        validate_url('localhost', [])\n    with pytest.raises(ValueError):\n        validate_url('192.168.1.1', [])\n    with pytest.raises(ValueError):\n        validate_url('127.0.0.1', [])\n    with pytest.raises(ValueError):\n        validate_url('0.0.0.0', [])\n    assert validate_url('google.com/a?b=c', []) == 'http://google.com/a?b=c'\n    assert validate_url('github.com?key=!@!@', []) == 'http://github.com?key=!@!@'\n    with pytest.raises(ValueError):\n        validate_url('ftp://example.com', [])\n    with pytest.raises(ValueError):\n        validate_url('file://example.com', [])\n    assert validate_url('http://xn--exmple-cua.com', []) == 'http://xn--exmple-cua.com'\n    with pytest.raises(ValueError):\n        validate_url('http://exa◌mple.com', [])\n    with pytest.raises(ValueError):\n        validate_url('::1', [])\n    with pytest.raises(ValueError):\n        validate_url('http://[::1]', [])\n    with pytest.raises(ValueError):\n        validate_url('http://example_underscore.com', [])\n    with pytest.raises(ValueError):\n        validate_url('http://exa mple.com', [])\n    with pytest.raises(ValueError):\n        validate_url('http://', [])\n    with pytest.raises(ValueError):\n        validate_url('://missing-scheme', [])\n    trusted = ['internal-api.company.com', '10.0.0.5']\n    assert validate_url('internal-api.company.com', trusted) == 'http://internal-api.company.com'\n    assert validate_url('10.0.0.5', ['10.0.0.5']) == 'http://10.0.0.5'\n    assert validate_url('example.com/path%20with%20spaces', []) == 'http://example.com/path%20with%20spaces'\n    assert validate_url('http://example.com\\\\backslash', []) == 'http://example.com/backslash'\n    assert validate_url('example.com', []) == 'http://example.com'\n    assert validate_url('https://secure.com', []) == 'https://secure.com'\n    assert validate_url('example.com?param=äöü', []) == 'http://example.com?param=äöü'\nwith pytest.raises(ValueError):\n    validate_url('localhost', [])\nvalidate_url('localhost', [])\nwith pytest.raises(ValueError):\n    validate_url('192.168.1.1', [])\nvalidate_url('192.168.1.1', [])\nwith pytest.raises(ValueError):\n    validate_url('127.0.0.1', [])\nvalidate_url('127.0.0.1', [])\nwith pytest.raises(ValueError):\n    validate_url('0.0.0.0', [])\nvalidate_url('0.0.0.0', [])\nassert validate_url('google.com/a?b=c', []) == 'http://google.com/a?b=c'\nassert validate_url('github.com?key=!@!@', []) == 'http://github.com?key=!@!@'\nwith pytest.raises(ValueError):\n    validate_url('ftp://example.com', [])\nvalidate_url('ftp://example.com', [])\nwith pytest.raises(ValueError):\n    validate_url('file://example.com', [])\nvalidate_url('file://example.com', [])\nassert validate_url('http://xn--exmple-cua.com', []) == 'http://xn--exmple-cua.com'\nwith pytest.raises(ValueError):\n    validate_url('http://exa◌mple.com', [])\nvalidate_url('http://exa◌mple.com', [])\nwith pytest.raises(ValueError):\n    validate_url('::1', [])\nvalidate_url('::1', [])\nwith pytest.raises(ValueError):\n    validate_url('http://[::1]', [])\nvalidate_url('http://[::1]', [])\nwith pytest.raises(ValueError):\n    validate_url('http://example_underscore.com', [])\nvalidate_url('http://example_underscore.com', [])\nwith pytest.raises(ValueError):\n    validate_url('http://exa mple.com', [])\nvalidate_url('http://exa mple.com', [])\nwith pytest.raises(ValueError):\n    validate_url('http://', [])\nvalidate_url('http://', [])\nwith pytest.raises(ValueError):\n    validate_url('://missing-scheme', [])\nvalidate_url('://missing-scheme', [])\ntrusted = ['internal-api.company.com', '10.0.0.5']\nassert validate_url('internal-api.company.com', trusted) == 'http://internal-api.company.com'\nassert validate_url('10.0.0.5', ['10.0.0.5']) == 'http://10.0.0.5'\nassert validate_url('example.com/path%20with%20spaces', []) == 'http://example.com/path%20with%20spaces'\nassert validate_url('http://example.com\\\\backslash', []) == 'http://example.com/backslash'\nassert validate_url('example.com', []) == 'http://example.com'\nassert validate_url('https://secure.com', []) == 'https://secure.com'\nassert validate_url('example.com?param=äöü', []) == 'http://example.com?param=äöü'"
    }
  ],
  "edges": []
}