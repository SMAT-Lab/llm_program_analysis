{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "import logging",
        "import requests",
        "from fastapi import Request",
        "from backend.data import integrations",
        "from backend.data.model import APIKeyCredentials, Credentials",
        "from backend.integrations.providers import ProviderName",
        "from backend.integrations.webhooks._base import BaseWebhooksManager",
        "logger = logging.getLogger(__name__)",
        "class Slant3DWebhooksManager(BaseWebhooksManager):\n    \"\"\"Manager for Slant3D webhooks\"\"\"\n    PROVIDER_NAME = ProviderName.SLANT3D\n    BASE_URL = 'https://www.slant3dapi.com/api'\n\n    async def _register_webhook(self, credentials: Credentials, webhook_type: str, resource: str, events: list[str], ingress_url: str, secret: str) -> tuple[str, dict]:\n        \"\"\"Register a new webhook with Slant3D\"\"\"\n        if not isinstance(credentials, APIKeyCredentials):\n            raise ValueError('API key is required to register a webhook')\n        headers = {'api-key': credentials.api_key.get_secret_value(), 'Content-Type': 'application/json'}\n        payload = {'endPoint': ingress_url}\n        response = requests.post(f'{self.BASE_URL}/customer/webhookSubscribe', headers=headers, json=payload)\n        if not response.ok:\n            error = response.json().get('error', 'Unknown error')\n            raise RuntimeError(f'Failed to register webhook: {error}')\n        webhook_config = {'endpoint': ingress_url, 'provider': self.PROVIDER_NAME, 'events': ['order.shipped'], 'type': webhook_type}\n        return ('', webhook_config)\n\n    @classmethod\n    async def validate_payload(cls, webhook: integrations.Webhook, request: Request) -> tuple[dict, str]:\n        \"\"\"Validate incoming webhook payload from Slant3D\"\"\"\n        payload = await request.json()\n        required_fields = ['orderId', 'status', 'trackingNumber', 'carrierCode']\n        missing_fields = [field for field in required_fields if field not in payload]\n        if missing_fields:\n            raise ValueError(f\"Missing required fields: {', '.join(missing_fields)}\")\n        normalized_payload = {'orderId': payload['orderId'], 'status': payload['status'], 'trackingNumber': payload['trackingNumber'], 'carrierCode': payload['carrierCode']}\n        event_type = f\"order.{payload['status'].lower()}\"\n        return (normalized_payload, event_type)\n\n    async def _deregister_webhook(self, webhook: integrations.Webhook, credentials: Credentials) -> None:\n        \"\"\"\n        Note: Slant3D API currently doesn't provide a deregistration endpoint.\n        This would need to be handled through support.\n        \"\"\"\n        logger.warning(f'Warning: Manual deregistration required for webhook {webhook.id}')\n        pass",
        "'Manager for Slant3D webhooks'",
        "PROVIDER_NAME = ProviderName.SLANT3D",
        "BASE_URL = 'https://www.slant3dapi.com/api'",
        "async def _register_webhook(self, credentials: Credentials, webhook_type: str, resource: str, events: list[str], ingress_url: str, secret: str) -> tuple[str, dict]:\n    \"\"\"Register a new webhook with Slant3D\"\"\"\n    if not isinstance(credentials, APIKeyCredentials):\n        raise ValueError('API key is required to register a webhook')\n    headers = {'api-key': credentials.api_key.get_secret_value(), 'Content-Type': 'application/json'}\n    payload = {'endPoint': ingress_url}\n    response = requests.post(f'{self.BASE_URL}/customer/webhookSubscribe', headers=headers, json=payload)\n    if not response.ok:\n        error = response.json().get('error', 'Unknown error')\n        raise RuntimeError(f'Failed to register webhook: {error}')\n    webhook_config = {'endpoint': ingress_url, 'provider': self.PROVIDER_NAME, 'events': ['order.shipped'], 'type': webhook_type}\n    return ('', webhook_config)",
        "'Register a new webhook with Slant3D'",
        "not isinstance(credentials, APIKeyCredentials)"
      ],
      "code": "import logging\nimport requests\nfrom fastapi import Request\nfrom backend.data import integrations\nfrom backend.data.model import APIKeyCredentials, Credentials\nfrom backend.integrations.providers import ProviderName\nfrom backend.integrations.webhooks._base import BaseWebhooksManager\nlogger = logging.getLogger(__name__)\nclass Slant3DWebhooksManager(BaseWebhooksManager):\n    \"\"\"Manager for Slant3D webhooks\"\"\"\n    PROVIDER_NAME = ProviderName.SLANT3D\n    BASE_URL = 'https://www.slant3dapi.com/api'\n\n    async def _register_webhook(self, credentials: Credentials, webhook_type: str, resource: str, events: list[str], ingress_url: str, secret: str) -> tuple[str, dict]:\n        \"\"\"Register a new webhook with Slant3D\"\"\"\n        if not isinstance(credentials, APIKeyCredentials):\n            raise ValueError('API key is required to register a webhook')\n        headers = {'api-key': credentials.api_key.get_secret_value(), 'Content-Type': 'application/json'}\n        payload = {'endPoint': ingress_url}\n        response = requests.post(f'{self.BASE_URL}/customer/webhookSubscribe', headers=headers, json=payload)\n        if not response.ok:\n            error = response.json().get('error', 'Unknown error')\n            raise RuntimeError(f'Failed to register webhook: {error}')\n        webhook_config = {'endpoint': ingress_url, 'provider': self.PROVIDER_NAME, 'events': ['order.shipped'], 'type': webhook_type}\n        return ('', webhook_config)\n\n    @classmethod\n    async def validate_payload(cls, webhook: integrations.Webhook, request: Request) -> tuple[dict, str]:\n        \"\"\"Validate incoming webhook payload from Slant3D\"\"\"\n        payload = await request.json()\n        required_fields = ['orderId', 'status', 'trackingNumber', 'carrierCode']\n        missing_fields = [field for field in required_fields if field not in payload]\n        if missing_fields:\n            raise ValueError(f\"Missing required fields: {', '.join(missing_fields)}\")\n        normalized_payload = {'orderId': payload['orderId'], 'status': payload['status'], 'trackingNumber': payload['trackingNumber'], 'carrierCode': payload['carrierCode']}\n        event_type = f\"order.{payload['status'].lower()}\"\n        return (normalized_payload, event_type)\n\n    async def _deregister_webhook(self, webhook: integrations.Webhook, credentials: Credentials) -> None:\n        \"\"\"\n        Note: Slant3D API currently doesn't provide a deregistration endpoint.\n        This would need to be handled through support.\n        \"\"\"\n        logger.warning(f'Warning: Manual deregistration required for webhook {webhook.id}')\n        pass\n'Manager for Slant3D webhooks'\nPROVIDER_NAME = ProviderName.SLANT3D\nBASE_URL = 'https://www.slant3dapi.com/api'\nasync def _register_webhook(self, credentials: Credentials, webhook_type: str, resource: str, events: list[str], ingress_url: str, secret: str) -> tuple[str, dict]:\n    \"\"\"Register a new webhook with Slant3D\"\"\"\n    if not isinstance(credentials, APIKeyCredentials):\n        raise ValueError('API key is required to register a webhook')\n    headers = {'api-key': credentials.api_key.get_secret_value(), 'Content-Type': 'application/json'}\n    payload = {'endPoint': ingress_url}\n    response = requests.post(f'{self.BASE_URL}/customer/webhookSubscribe', headers=headers, json=payload)\n    if not response.ok:\n        error = response.json().get('error', 'Unknown error')\n        raise RuntimeError(f'Failed to register webhook: {error}')\n    webhook_config = {'endpoint': ingress_url, 'provider': self.PROVIDER_NAME, 'events': ['order.shipped'], 'type': webhook_type}\n    return ('', webhook_config)\n'Register a new webhook with Slant3D'\nnot isinstance(credentials, APIKeyCredentials)"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "raise ValueError('API key is required to register a webhook')"
      ],
      "code": "raise ValueError('API key is required to register a webhook')"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [
        "headers = {'api-key': credentials.api_key.get_secret_value(), 'Content-Type': 'application/json'}",
        "payload = {'endPoint': ingress_url}",
        "response = requests.post(f'{self.BASE_URL}/customer/webhookSubscribe', headers=headers, json=payload)",
        "not response.ok"
      ],
      "code": "headers = {'api-key': credentials.api_key.get_secret_value(), 'Content-Type': 'application/json'}\npayload = {'endPoint': ingress_url}\nresponse = requests.post(f'{self.BASE_URL}/customer/webhookSubscribe', headers=headers, json=payload)\nnot response.ok"
    },
    {
      "id": "n4",
      "type": "block",
      "statements": [
        "error = response.json().get('error', 'Unknown error')",
        "raise RuntimeError(f'Failed to register webhook: {error}')"
      ],
      "code": "error = response.json().get('error', 'Unknown error')\nraise RuntimeError(f'Failed to register webhook: {error}')"
    },
    {
      "id": "n5",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n6",
      "type": "block",
      "statements": [
        "webhook_config = {'endpoint': ingress_url, 'provider': self.PROVIDER_NAME, 'events': ['order.shipped'], 'type': webhook_type}",
        "return ('', webhook_config)"
      ],
      "code": "webhook_config = {'endpoint': ingress_url, 'provider': self.PROVIDER_NAME, 'events': ['order.shipped'], 'type': webhook_type}\nreturn ('', webhook_config)"
    },
    {
      "id": "n7",
      "type": "block",
      "statements": [
        "@classmethod\nasync def validate_payload(cls, webhook: integrations.Webhook, request: Request) -> tuple[dict, str]:\n    \"\"\"Validate incoming webhook payload from Slant3D\"\"\"\n    payload = await request.json()\n    required_fields = ['orderId', 'status', 'trackingNumber', 'carrierCode']\n    missing_fields = [field for field in required_fields if field not in payload]\n    if missing_fields:\n        raise ValueError(f\"Missing required fields: {', '.join(missing_fields)}\")\n    normalized_payload = {'orderId': payload['orderId'], 'status': payload['status'], 'trackingNumber': payload['trackingNumber'], 'carrierCode': payload['carrierCode']}\n    event_type = f\"order.{payload['status'].lower()}\"\n    return (normalized_payload, event_type)",
        "'Validate incoming webhook payload from Slant3D'",
        "payload = await request.json()",
        "required_fields = ['orderId', 'status', 'trackingNumber', 'carrierCode']",
        "missing_fields = [field for field in required_fields if field not in payload]",
        "missing_fields"
      ],
      "code": "@classmethod\nasync def validate_payload(cls, webhook: integrations.Webhook, request: Request) -> tuple[dict, str]:\n    \"\"\"Validate incoming webhook payload from Slant3D\"\"\"\n    payload = await request.json()\n    required_fields = ['orderId', 'status', 'trackingNumber', 'carrierCode']\n    missing_fields = [field for field in required_fields if field not in payload]\n    if missing_fields:\n        raise ValueError(f\"Missing required fields: {', '.join(missing_fields)}\")\n    normalized_payload = {'orderId': payload['orderId'], 'status': payload['status'], 'trackingNumber': payload['trackingNumber'], 'carrierCode': payload['carrierCode']}\n    event_type = f\"order.{payload['status'].lower()}\"\n    return (normalized_payload, event_type)\n'Validate incoming webhook payload from Slant3D'\npayload = await request.json()\nrequired_fields = ['orderId', 'status', 'trackingNumber', 'carrierCode']\nmissing_fields = [field for field in required_fields if field not in payload]\nmissing_fields"
    },
    {
      "id": "n8",
      "type": "block",
      "statements": [
        "raise ValueError(f\"Missing required fields: {', '.join(missing_fields)}\")"
      ],
      "code": "raise ValueError(f\"Missing required fields: {', '.join(missing_fields)}\")"
    },
    {
      "id": "n9",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n10",
      "type": "block",
      "statements": [
        "normalized_payload = {'orderId': payload['orderId'], 'status': payload['status'], 'trackingNumber': payload['trackingNumber'], 'carrierCode': payload['carrierCode']}",
        "event_type = f\"order.{payload['status'].lower()}\"",
        "return (normalized_payload, event_type)"
      ],
      "code": "normalized_payload = {'orderId': payload['orderId'], 'status': payload['status'], 'trackingNumber': payload['trackingNumber'], 'carrierCode': payload['carrierCode']}\nevent_type = f\"order.{payload['status'].lower()}\"\nreturn (normalized_payload, event_type)"
    },
    {
      "id": "n11",
      "type": "block",
      "statements": [
        "async def _deregister_webhook(self, webhook: integrations.Webhook, credentials: Credentials) -> None:\n    \"\"\"\n        Note: Slant3D API currently doesn't provide a deregistration endpoint.\n        This would need to be handled through support.\n        \"\"\"\n    logger.warning(f'Warning: Manual deregistration required for webhook {webhook.id}')\n    pass",
        "\"\\n        Note: Slant3D API currently doesn't provide a deregistration endpoint.\\n        This would need to be handled through support.\\n        \"",
        "logger.warning(f'Warning: Manual deregistration required for webhook {webhook.id}')",
        "pass"
      ],
      "code": "async def _deregister_webhook(self, webhook: integrations.Webhook, credentials: Credentials) -> None:\n    \"\"\"\n        Note: Slant3D API currently doesn't provide a deregistration endpoint.\n        This would need to be handled through support.\n        \"\"\"\n    logger.warning(f'Warning: Manual deregistration required for webhook {webhook.id}')\n    pass\n\"\\n        Note: Slant3D API currently doesn't provide a deregistration endpoint.\\n        This would need to be handled through support.\\n        \"\nlogger.warning(f'Warning: Manual deregistration required for webhook {webhook.id}')\npass"
    }
  ],
  "edges": [
    {
      "source": "n5",
      "target": "n6"
    },
    {
      "source": "n1",
      "target": "n3"
    },
    {
      "source": "n8",
      "target": "n10"
    },
    {
      "source": "n0",
      "target": "n1"
    },
    {
      "source": "n0",
      "target": "n2"
    },
    {
      "source": "n3",
      "target": "n4"
    },
    {
      "source": "n3",
      "target": "n5"
    },
    {
      "source": "n9",
      "target": "n10"
    },
    {
      "source": "n4",
      "target": "n6"
    },
    {
      "source": "n7",
      "target": "n8"
    },
    {
      "source": "n2",
      "target": "n3"
    },
    {
      "source": "n7",
      "target": "n9"
    }
  ]
}