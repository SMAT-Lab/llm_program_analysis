{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "import threading",
        "from typing import Callable, ParamSpec, TypeVar",
        "P = ParamSpec('P')",
        "R = TypeVar('R')",
        "def thread_cached(func: Callable[P, R]) -> Callable[P, R]:\n    thread_local = threading.local()\n\n    def wrapper(*args: P.args, **kwargs: P.kwargs) -> R:\n        cache = getattr(thread_local, 'cache', None)\n        if cache is None:\n            cache = thread_local.cache = {}\n        key = (args, tuple(sorted(kwargs.items())))\n        if key not in cache:\n            cache[key] = func(*args, **kwargs)\n        return cache[key]\n    return wrapper",
        "thread_local = threading.local()",
        "def wrapper(*args: P.args, **kwargs: P.kwargs) -> R:\n    cache = getattr(thread_local, 'cache', None)\n    if cache is None:\n        cache = thread_local.cache = {}\n    key = (args, tuple(sorted(kwargs.items())))\n    if key not in cache:\n        cache[key] = func(*args, **kwargs)\n    return cache[key]",
        "cache = getattr(thread_local, 'cache', None)",
        "cache Is None"
      ],
      "code": "import threading\nfrom typing import Callable, ParamSpec, TypeVar\nP = ParamSpec('P')\nR = TypeVar('R')\ndef thread_cached(func: Callable[P, R]) -> Callable[P, R]:\n    thread_local = threading.local()\n\n    def wrapper(*args: P.args, **kwargs: P.kwargs) -> R:\n        cache = getattr(thread_local, 'cache', None)\n        if cache is None:\n            cache = thread_local.cache = {}\n        key = (args, tuple(sorted(kwargs.items())))\n        if key not in cache:\n            cache[key] = func(*args, **kwargs)\n        return cache[key]\n    return wrapper\nthread_local = threading.local()\ndef wrapper(*args: P.args, **kwargs: P.kwargs) -> R:\n    cache = getattr(thread_local, 'cache', None)\n    if cache is None:\n        cache = thread_local.cache = {}\n    key = (args, tuple(sorted(kwargs.items())))\n    if key not in cache:\n        cache[key] = func(*args, **kwargs)\n    return cache[key]\ncache = getattr(thread_local, 'cache', None)\ncache Is None"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "cache = thread_local.cache = {}"
      ],
      "code": "cache = thread_local.cache = {}"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [
        "key = (args, tuple(sorted(kwargs.items())))",
        "key NotIn cache"
      ],
      "code": "key = (args, tuple(sorted(kwargs.items())))\nkey NotIn cache"
    },
    {
      "id": "n4",
      "type": "block",
      "statements": [
        "cache[key] = func(*args, **kwargs)"
      ],
      "code": "cache[key] = func(*args, **kwargs)"
    },
    {
      "id": "n5",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n6",
      "type": "block",
      "statements": [
        "return cache[key]"
      ],
      "code": "return cache[key]"
    },
    {
      "id": "n7",
      "type": "block",
      "statements": [
        "return wrapper"
      ],
      "code": "return wrapper"
    }
  ],
  "edges": [
    {
      "source": "n5",
      "target": "n6"
    },
    {
      "source": "n1",
      "target": "n3"
    },
    {
      "source": "n0",
      "target": "n2"
    },
    {
      "source": "n0",
      "target": "n1"
    },
    {
      "source": "n3",
      "target": "n4"
    },
    {
      "source": "n3",
      "target": "n5"
    },
    {
      "source": "n4",
      "target": "n6"
    },
    {
      "source": "n2",
      "target": "n3"
    }
  ]
}