{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "from prisma.models import User",
        "from backend.blocks.basic import AgentInputBlock, PrintToConsoleBlock",
        "from backend.blocks.text import FillTextTemplateBlock",
        "from backend.data import graph",
        "from backend.data.graph import create_graph",
        "from backend.data.user import get_or_create_user",
        "from backend.util.test import SpinTestServer, wait_execution",
        "async def create_test_user() -> User:\n    test_user_data = {'sub': 'ef3b97d7-1161-4eb4-92b2-10c24fb154c1', 'email': 'testuser#example.com', 'name': 'Test User'}\n    user = await get_or_create_user(test_user_data)\n    return user",
        "test_user_data = {'sub': 'ef3b97d7-1161-4eb4-92b2-10c24fb154c1', 'email': 'testuser#example.com', 'name': 'Test User'}",
        "user = await get_or_create_user(test_user_data)",
        "return user"
      ],
      "code": "from prisma.models import User\nfrom backend.blocks.basic import AgentInputBlock, PrintToConsoleBlock\nfrom backend.blocks.text import FillTextTemplateBlock\nfrom backend.data import graph\nfrom backend.data.graph import create_graph\nfrom backend.data.user import get_or_create_user\nfrom backend.util.test import SpinTestServer, wait_execution\nasync def create_test_user() -> User:\n    test_user_data = {'sub': 'ef3b97d7-1161-4eb4-92b2-10c24fb154c1', 'email': 'testuser#example.com', 'name': 'Test User'}\n    user = await get_or_create_user(test_user_data)\n    return user\ntest_user_data = {'sub': 'ef3b97d7-1161-4eb4-92b2-10c24fb154c1', 'email': 'testuser#example.com', 'name': 'Test User'}\nuser = await get_or_create_user(test_user_data)\nreturn user"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "def create_test_graph() -> graph.Graph:\n    \"\"\"\n    InputBlock\n                                ---- FillTextTemplateBlock ---- PrintToConsoleBlock\n               /\n    InputBlock\n    \"\"\"\n    nodes = [graph.Node(block_id=AgentInputBlock().id, input_default={'name': 'input_1'}), graph.Node(block_id=AgentInputBlock().id, input_default={'name': 'input_2'}), graph.Node(block_id=FillTextTemplateBlock().id, input_default={'format': '{a}, {b}{c}', 'values_#_c': '!!!'}), graph.Node(block_id=PrintToConsoleBlock().id)]\n    links = [graph.Link(source_id=nodes[0].id, sink_id=nodes[2].id, source_name='result', sink_name='values_#_a'), graph.Link(source_id=nodes[1].id, sink_id=nodes[2].id, source_name='result', sink_name='values_#_b'), graph.Link(source_id=nodes[2].id, sink_id=nodes[3].id, source_name='output', sink_name='text')]\n    return graph.Graph(name='TestGraph', description='Test graph', nodes=nodes, links=links)",
        "'\\n    InputBlock\\n                                ---- FillTextTemplateBlock ---- PrintToConsoleBlock\\n               /\\n    InputBlock\\n    '",
        "nodes = [graph.Node(block_id=AgentInputBlock().id, input_default={'name': 'input_1'}), graph.Node(block_id=AgentInputBlock().id, input_default={'name': 'input_2'}), graph.Node(block_id=FillTextTemplateBlock().id, input_default={'format': '{a}, {b}{c}', 'values_#_c': '!!!'}), graph.Node(block_id=PrintToConsoleBlock().id)]",
        "links = [graph.Link(source_id=nodes[0].id, sink_id=nodes[2].id, source_name='result', sink_name='values_#_a'), graph.Link(source_id=nodes[1].id, sink_id=nodes[2].id, source_name='result', sink_name='values_#_b'), graph.Link(source_id=nodes[2].id, sink_id=nodes[3].id, source_name='output', sink_name='text')]",
        "return graph.Graph(name='TestGraph', description='Test graph', nodes=nodes, links=links)"
      ],
      "code": "def create_test_graph() -> graph.Graph:\n    \"\"\"\n    InputBlock\n                                ---- FillTextTemplateBlock ---- PrintToConsoleBlock\n               /\n    InputBlock\n    \"\"\"\n    nodes = [graph.Node(block_id=AgentInputBlock().id, input_default={'name': 'input_1'}), graph.Node(block_id=AgentInputBlock().id, input_default={'name': 'input_2'}), graph.Node(block_id=FillTextTemplateBlock().id, input_default={'format': '{a}, {b}{c}', 'values_#_c': '!!!'}), graph.Node(block_id=PrintToConsoleBlock().id)]\n    links = [graph.Link(source_id=nodes[0].id, sink_id=nodes[2].id, source_name='result', sink_name='values_#_a'), graph.Link(source_id=nodes[1].id, sink_id=nodes[2].id, source_name='result', sink_name='values_#_b'), graph.Link(source_id=nodes[2].id, sink_id=nodes[3].id, source_name='output', sink_name='text')]\n    return graph.Graph(name='TestGraph', description='Test graph', nodes=nodes, links=links)\n'\\n    InputBlock\\n                                ---- FillTextTemplateBlock ---- PrintToConsoleBlock\\n               /\\n    InputBlock\\n    '\nnodes = [graph.Node(block_id=AgentInputBlock().id, input_default={'name': 'input_1'}), graph.Node(block_id=AgentInputBlock().id, input_default={'name': 'input_2'}), graph.Node(block_id=FillTextTemplateBlock().id, input_default={'format': '{a}, {b}{c}', 'values_#_c': '!!!'}), graph.Node(block_id=PrintToConsoleBlock().id)]\nlinks = [graph.Link(source_id=nodes[0].id, sink_id=nodes[2].id, source_name='result', sink_name='values_#_a'), graph.Link(source_id=nodes[1].id, sink_id=nodes[2].id, source_name='result', sink_name='values_#_b'), graph.Link(source_id=nodes[2].id, sink_id=nodes[3].id, source_name='output', sink_name='text')]\nreturn graph.Graph(name='TestGraph', description='Test graph', nodes=nodes, links=links)"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [
        "async def sample_agent():\n    async with SpinTestServer() as server:\n        test_user = await create_test_user()\n        test_graph = await create_graph(create_test_graph(), test_user.id)\n        input_data = {'input_1': 'Hello', 'input_2': 'World'}\n        response = await server.agent_server.test_execute_graph(test_graph.id, input_data, test_user.id)\n        print(response)\n        result = await wait_execution(test_user.id, test_graph.id, response['id'], 10)\n        print(result)",
        "async with SpinTestServer() as server:\n    test_user = await create_test_user()\n    test_graph = await create_graph(create_test_graph(), test_user.id)\n    input_data = {'input_1': 'Hello', 'input_2': 'World'}\n    response = await server.agent_server.test_execute_graph(test_graph.id, input_data, test_user.id)\n    print(response)\n    result = await wait_execution(test_user.id, test_graph.id, response['id'], 10)\n    print(result)",
        "test_user = await create_test_user()",
        "test_graph = await create_graph(create_test_graph(), test_user.id)",
        "input_data = {'input_1': 'Hello', 'input_2': 'World'}",
        "response = await server.agent_server.test_execute_graph(test_graph.id, input_data, test_user.id)",
        "print(response)",
        "result = await wait_execution(test_user.id, test_graph.id, response['id'], 10)",
        "print(result)",
        "__name__ Eq '__main__'"
      ],
      "code": "async def sample_agent():\n    async with SpinTestServer() as server:\n        test_user = await create_test_user()\n        test_graph = await create_graph(create_test_graph(), test_user.id)\n        input_data = {'input_1': 'Hello', 'input_2': 'World'}\n        response = await server.agent_server.test_execute_graph(test_graph.id, input_data, test_user.id)\n        print(response)\n        result = await wait_execution(test_user.id, test_graph.id, response['id'], 10)\n        print(result)\nasync with SpinTestServer() as server:\n    test_user = await create_test_user()\n    test_graph = await create_graph(create_test_graph(), test_user.id)\n    input_data = {'input_1': 'Hello', 'input_2': 'World'}\n    response = await server.agent_server.test_execute_graph(test_graph.id, input_data, test_user.id)\n    print(response)\n    result = await wait_execution(test_user.id, test_graph.id, response['id'], 10)\n    print(result)\ntest_user = await create_test_user()\ntest_graph = await create_graph(create_test_graph(), test_user.id)\ninput_data = {'input_1': 'Hello', 'input_2': 'World'}\nresponse = await server.agent_server.test_execute_graph(test_graph.id, input_data, test_user.id)\nprint(response)\nresult = await wait_execution(test_user.id, test_graph.id, response['id'], 10)\nprint(result)\n__name__ Eq '__main__'"
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [
        "import asyncio",
        "asyncio.run(sample_agent())"
      ],
      "code": "import asyncio\nasyncio.run(sample_agent())"
    },
    {
      "id": "n4",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n5",
      "type": "block",
      "statements": [],
      "code": ""
    }
  ],
  "edges": [
    {
      "source": "n3",
      "target": "n5"
    },
    {
      "source": "n2",
      "target": "n4"
    },
    {
      "source": "n2",
      "target": "n3"
    },
    {
      "source": "n4",
      "target": "n5"
    }
  ]
}