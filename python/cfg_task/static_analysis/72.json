{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "import json",
        "from enum import Enum",
        "from typing import Any",
        "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema",
        "from backend.data.model import SchemaField",
        "from backend.util.request import requests",
        "class HttpMethod(Enum):\n    GET = 'GET'\n    POST = 'POST'\n    PUT = 'PUT'\n    DELETE = 'DELETE'\n    PATCH = 'PATCH'\n    OPTIONS = 'OPTIONS'\n    HEAD = 'HEAD'",
        "GET = 'GET'",
        "POST = 'POST'",
        "PUT = 'PUT'",
        "DELETE = 'DELETE'",
        "PATCH = 'PATCH'",
        "OPTIONS = 'OPTIONS'",
        "HEAD = 'HEAD'",
        "class SendWebRequestBlock(Block):\n\n    class Input(BlockSchema):\n        url: str = SchemaField(description='The URL to send the request to', placeholder='https://api.example.com')\n        method: HttpMethod = SchemaField(description='The HTTP method to use for the request', default=HttpMethod.POST)\n        headers: dict[str, str] = SchemaField(description='The headers to include in the request', default={})\n        json_format: bool = SchemaField(title='JSON format', description='Whether to send and receive body as JSON', default=True)\n        body: Any = SchemaField(description='The body of the request', default=None)\n\n    class Output(BlockSchema):\n        response: object = SchemaField(description='The response from the server')\n        client_error: object = SchemaField(description='The error on 4xx status codes')\n        server_error: object = SchemaField(description='The error on 5xx status codes')\n\n    def __init__(self):\n        super().__init__(id='6595ae1f-b924-42cb-9a41-551a0611c4b4', description='This block makes an HTTP request to the given URL.', categories={BlockCategory.OUTPUT}, input_schema=SendWebRequestBlock.Input, output_schema=SendWebRequestBlock.Output)\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        if isinstance(input_data.body, str):\n            input_data.body = json.loads(input_data.body)\n        response = requests.request(input_data.method.value, input_data.url, headers=input_data.headers, json=input_data.body if input_data.json_format else None, data=input_data.body if not input_data.json_format else None)\n        result = response.json() if input_data.json_format else response.text\n        if response.status_code // 100 == 2:\n            yield ('response', result)\n        elif response.status_code // 100 == 4:\n            yield ('client_error', result)\n        elif response.status_code // 100 == 5:\n            yield ('server_error', result)\n        else:\n            raise ValueError(f'Unexpected status code: {response.status_code}')",
        "class Input(BlockSchema):\n    url: str = SchemaField(description='The URL to send the request to', placeholder='https://api.example.com')\n    method: HttpMethod = SchemaField(description='The HTTP method to use for the request', default=HttpMethod.POST)\n    headers: dict[str, str] = SchemaField(description='The headers to include in the request', default={})\n    json_format: bool = SchemaField(title='JSON format', description='Whether to send and receive body as JSON', default=True)\n    body: Any = SchemaField(description='The body of the request', default=None)",
        "url: str = SchemaField(description='The URL to send the request to', placeholder='https://api.example.com')",
        "method: HttpMethod = SchemaField(description='The HTTP method to use for the request', default=HttpMethod.POST)",
        "headers: dict[str, str] = SchemaField(description='The headers to include in the request', default={})",
        "json_format: bool = SchemaField(title='JSON format', description='Whether to send and receive body as JSON', default=True)",
        "body: Any = SchemaField(description='The body of the request', default=None)",
        "class Output(BlockSchema):\n    response: object = SchemaField(description='The response from the server')\n    client_error: object = SchemaField(description='The error on 4xx status codes')\n    server_error: object = SchemaField(description='The error on 5xx status codes')",
        "response: object = SchemaField(description='The response from the server')",
        "client_error: object = SchemaField(description='The error on 4xx status codes')",
        "server_error: object = SchemaField(description='The error on 5xx status codes')",
        "def __init__(self):\n    super().__init__(id='6595ae1f-b924-42cb-9a41-551a0611c4b4', description='This block makes an HTTP request to the given URL.', categories={BlockCategory.OUTPUT}, input_schema=SendWebRequestBlock.Input, output_schema=SendWebRequestBlock.Output)",
        "super().__init__()",
        "def run(self, input_data: Input, **kwargs) -> BlockOutput:\n    if isinstance(input_data.body, str):\n        input_data.body = json.loads(input_data.body)\n    response = requests.request(input_data.method.value, input_data.url, headers=input_data.headers, json=input_data.body if input_data.json_format else None, data=input_data.body if not input_data.json_format else None)\n    result = response.json() if input_data.json_format else response.text\n    if response.status_code // 100 == 2:\n        yield ('response', result)\n    elif response.status_code // 100 == 4:\n        yield ('client_error', result)\n    elif response.status_code // 100 == 5:\n        yield ('server_error', result)\n    else:\n        raise ValueError(f'Unexpected status code: {response.status_code}')",
        "isinstance(input_data.body, str)"
      ],
      "code": "import json\nfrom enum import Enum\nfrom typing import Any\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\nfrom backend.util.request import requests\nclass HttpMethod(Enum):\n    GET = 'GET'\n    POST = 'POST'\n    PUT = 'PUT'\n    DELETE = 'DELETE'\n    PATCH = 'PATCH'\n    OPTIONS = 'OPTIONS'\n    HEAD = 'HEAD'\nGET = 'GET'\nPOST = 'POST'\nPUT = 'PUT'\nDELETE = 'DELETE'\nPATCH = 'PATCH'\nOPTIONS = 'OPTIONS'\nHEAD = 'HEAD'\nclass SendWebRequestBlock(Block):\n\n    class Input(BlockSchema):\n        url: str = SchemaField(description='The URL to send the request to', placeholder='https://api.example.com')\n        method: HttpMethod = SchemaField(description='The HTTP method to use for the request', default=HttpMethod.POST)\n        headers: dict[str, str] = SchemaField(description='The headers to include in the request', default={})\n        json_format: bool = SchemaField(title='JSON format', description='Whether to send and receive body as JSON', default=True)\n        body: Any = SchemaField(description='The body of the request', default=None)\n\n    class Output(BlockSchema):\n        response: object = SchemaField(description='The response from the server')\n        client_error: object = SchemaField(description='The error on 4xx status codes')\n        server_error: object = SchemaField(description='The error on 5xx status codes')\n\n    def __init__(self):\n        super().__init__(id='6595ae1f-b924-42cb-9a41-551a0611c4b4', description='This block makes an HTTP request to the given URL.', categories={BlockCategory.OUTPUT}, input_schema=SendWebRequestBlock.Input, output_schema=SendWebRequestBlock.Output)\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        if isinstance(input_data.body, str):\n            input_data.body = json.loads(input_data.body)\n        response = requests.request(input_data.method.value, input_data.url, headers=input_data.headers, json=input_data.body if input_data.json_format else None, data=input_data.body if not input_data.json_format else None)\n        result = response.json() if input_data.json_format else response.text\n        if response.status_code // 100 == 2:\n            yield ('response', result)\n        elif response.status_code // 100 == 4:\n            yield ('client_error', result)\n        elif response.status_code // 100 == 5:\n            yield ('server_error', result)\n        else:\n            raise ValueError(f'Unexpected status code: {response.status_code}')\nclass Input(BlockSchema):\n    url: str = SchemaField(description='The URL to send the request to', placeholder='https://api.example.com')\n    method: HttpMethod = SchemaField(description='The HTTP method to use for the request', default=HttpMethod.POST)\n    headers: dict[str, str] = SchemaField(description='The headers to include in the request', default={})\n    json_format: bool = SchemaField(title='JSON format', description='Whether to send and receive body as JSON', default=True)\n    body: Any = SchemaField(description='The body of the request', default=None)\nurl: str = SchemaField(description='The URL to send the request to', placeholder='https://api.example.com')\nmethod: HttpMethod = SchemaField(description='The HTTP method to use for the request', default=HttpMethod.POST)\nheaders: dict[str, str] = SchemaField(description='The headers to include in the request', default={})\njson_format: bool = SchemaField(title='JSON format', description='Whether to send and receive body as JSON', default=True)\nbody: Any = SchemaField(description='The body of the request', default=None)\nclass Output(BlockSchema):\n    response: object = SchemaField(description='The response from the server')\n    client_error: object = SchemaField(description='The error on 4xx status codes')\n    server_error: object = SchemaField(description='The error on 5xx status codes')\nresponse: object = SchemaField(description='The response from the server')\nclient_error: object = SchemaField(description='The error on 4xx status codes')\nserver_error: object = SchemaField(description='The error on 5xx status codes')\ndef __init__(self):\n    super().__init__(id='6595ae1f-b924-42cb-9a41-551a0611c4b4', description='This block makes an HTTP request to the given URL.', categories={BlockCategory.OUTPUT}, input_schema=SendWebRequestBlock.Input, output_schema=SendWebRequestBlock.Output)\nsuper().__init__()\ndef run(self, input_data: Input, **kwargs) -> BlockOutput:\n    if isinstance(input_data.body, str):\n        input_data.body = json.loads(input_data.body)\n    response = requests.request(input_data.method.value, input_data.url, headers=input_data.headers, json=input_data.body if input_data.json_format else None, data=input_data.body if not input_data.json_format else None)\n    result = response.json() if input_data.json_format else response.text\n    if response.status_code // 100 == 2:\n        yield ('response', result)\n    elif response.status_code // 100 == 4:\n        yield ('client_error', result)\n    elif response.status_code // 100 == 5:\n        yield ('server_error', result)\n    else:\n        raise ValueError(f'Unexpected status code: {response.status_code}')\nisinstance(input_data.body, str)"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "input_data.body = json.loads(input_data.body)"
      ],
      "code": "input_data.body = json.loads(input_data.body)"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [
        "response = requests.request(input_data.method.value, input_data.url, headers=input_data.headers, json=input_data.body if input_data.json_format else None, data=input_data.body if not input_data.json_format else None)",
        "result = response.json() if input_data.json_format else response.text",
        "response.status_code FloorDiv 100 Eq 2"
      ],
      "code": "response = requests.request(input_data.method.value, input_data.url, headers=input_data.headers, json=input_data.body if input_data.json_format else None, data=input_data.body if not input_data.json_format else None)\nresult = response.json() if input_data.json_format else response.text\nresponse.status_code FloorDiv 100 Eq 2"
    },
    {
      "id": "n4",
      "type": "block",
      "statements": [
        "(yield ('response', result))"
      ],
      "code": "(yield ('response', result))"
    },
    {
      "id": "n5",
      "type": "block",
      "statements": [
        "response.status_code FloorDiv 100 Eq 4"
      ],
      "code": "response.status_code FloorDiv 100 Eq 4"
    },
    {
      "id": "n6",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n7",
      "type": "block",
      "statements": [
        "(yield ('client_error', result))"
      ],
      "code": "(yield ('client_error', result))"
    },
    {
      "id": "n8",
      "type": "block",
      "statements": [
        "response.status_code FloorDiv 100 Eq 5"
      ],
      "code": "response.status_code FloorDiv 100 Eq 5"
    },
    {
      "id": "n9",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n10",
      "type": "block",
      "statements": [
        "(yield ('server_error', result))"
      ],
      "code": "(yield ('server_error', result))"
    },
    {
      "id": "n11",
      "type": "block",
      "statements": [
        "raise ValueError(f'Unexpected status code: {response.status_code}')"
      ],
      "code": "raise ValueError(f'Unexpected status code: {response.status_code}')"
    },
    {
      "id": "n12",
      "type": "block",
      "statements": [],
      "code": ""
    }
  ],
  "edges": [
    {
      "source": "n5",
      "target": "n8"
    },
    {
      "source": "n1",
      "target": "n3"
    },
    {
      "source": "n8",
      "target": "n10"
    },
    {
      "source": "n0",
      "target": "n1"
    },
    {
      "source": "n0",
      "target": "n2"
    },
    {
      "source": "n3",
      "target": "n4"
    },
    {
      "source": "n3",
      "target": "n5"
    },
    {
      "source": "n12",
      "target": "n9"
    },
    {
      "source": "n9",
      "target": "n6"
    },
    {
      "source": "n5",
      "target": "n7"
    },
    {
      "source": "n4",
      "target": "n6"
    },
    {
      "source": "n10",
      "target": "n12"
    },
    {
      "source": "n11",
      "target": "n12"
    },
    {
      "source": "n8",
      "target": "n11"
    },
    {
      "source": "n2",
      "target": "n3"
    },
    {
      "source": "n7",
      "target": "n9"
    }
  ]
}