{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "from prisma.models import User",
        "from backend.blocks.llm import AIStructuredResponseGeneratorBlock",
        "from backend.blocks.reddit import GetRedditPostsBlock, PostRedditCommentBlock",
        "from backend.blocks.text import FillTextTemplateBlock, MatchTextPatternBlock",
        "from backend.data.graph import Graph, Link, Node, create_graph",
        "from backend.data.user import get_or_create_user",
        "from backend.util.test import SpinTestServer, wait_execution",
        "def create_test_graph() -> Graph:\n    \"\"\"\n                    subreddit\n                       ||\n                        v\n        GetRedditPostsBlock (post_id, post_title, post_body)\n                  //     ||     \\\\\n              post_id  post_title  post_body\n                 ||       ||        ||\n                 v        v         v\n              FillTextTemplateBlock (format)\n                      ||\n                      v\n            AIStructuredResponseBlock / TextRelevancy\n                 ||       ||       ||\n            post_id  is_relevant  marketing_text\n               ||       ||        ||\n               v        v         v\n                 MatchTextPatternBlock\n                 ||       ||\n              positive  negative\n                ||\n                v\n        PostRedditCommentBlock\n    \"\"\"\n    reddit_get_post_input = {'post_limit': 3}\n    text_formatter_input = {'format': '\\nBased on the following post, write your marketing comment:\\n* Post ID: {id}\\n* Post Subreddit: {subreddit}\\n* Post Title: {title}\\n* Post Body: {body}'.strip()}\n    llm_call_input = {'sys_prompt': '\\nYou are an expert at marketing.\\nYou have been tasked with picking Reddit posts that are relevant to your product.\\nThe product you are marketing is: Auto-GPT an autonomous AI agent utilizing GPT model.\\nYou reply the post that you find it relevant to be replied with marketing text.\\nMake sure to only comment on a relevant post.\\n', 'expected_format': {'post_id': 'str, the reddit post id', 'is_relevant': 'bool, whether the post is relevant for marketing', 'marketing_text': 'str, marketing text, this is empty on irrelevant posts'}}\n    text_matcher_input = {'match': 'true', 'case_sensitive': False}\n    reddit_comment_input = {}\n    reddit_get_post_node = Node(block_id=GetRedditPostsBlock().id, input_default=reddit_get_post_input)\n    text_formatter_node = Node(block_id=FillTextTemplateBlock().id, input_default=text_formatter_input)\n    llm_call_node = Node(block_id=AIStructuredResponseGeneratorBlock().id, input_default=llm_call_input)\n    text_matcher_node = Node(block_id=MatchTextPatternBlock().id, input_default=text_matcher_input)\n    reddit_comment_node = Node(block_id=PostRedditCommentBlock().id, input_default=reddit_comment_input)\n    nodes = [reddit_get_post_node, text_formatter_node, llm_call_node, text_matcher_node, reddit_comment_node]\n    links = [Link(source_id=reddit_get_post_node.id, sink_id=text_formatter_node.id, source_name='post', sink_name='values'), Link(source_id=text_formatter_node.id, sink_id=llm_call_node.id, source_name='output', sink_name='prompt'), Link(source_id=llm_call_node.id, sink_id=text_matcher_node.id, source_name='response', sink_name='data'), Link(source_id=llm_call_node.id, sink_id=text_matcher_node.id, source_name='response_#_is_relevant', sink_name='text'), Link(source_id=text_matcher_node.id, sink_id=reddit_comment_node.id, source_name='positive_#_post_id', sink_name='data_#_post_id'), Link(source_id=text_matcher_node.id, sink_id=reddit_comment_node.id, source_name='positive_#_marketing_text', sink_name='data_#_comment')]\n    test_graph = Graph(name='RedditMarketingAgent', description='Reddit marketing agent', nodes=nodes, links=links)\n    return test_graph",
        "'\\n                    subreddit\\n                       ||\\n                        v\\n        GetRedditPostsBlock (post_id, post_title, post_body)\\n                  //     ||     \\\\\\n              post_id  post_title  post_body\\n                 ||       ||        ||\\n                 v        v         v\\n              FillTextTemplateBlock (format)\\n                      ||\\n                      v\\n            AIStructuredResponseBlock / TextRelevancy\\n                 ||       ||       ||\\n            post_id  is_relevant  marketing_text\\n               ||       ||        ||\\n               v        v         v\\n                 MatchTextPatternBlock\\n                 ||       ||\\n              positive  negative\\n                ||\\n                v\\n        PostRedditCommentBlock\\n    '",
        "reddit_get_post_input = {'post_limit': 3}",
        "text_formatter_input = {'format': '\\nBased on the following post, write your marketing comment:\\n* Post ID: {id}\\n* Post Subreddit: {subreddit}\\n* Post Title: {title}\\n* Post Body: {body}'.strip()}",
        "llm_call_input = {'sys_prompt': '\\nYou are an expert at marketing.\\nYou have been tasked with picking Reddit posts that are relevant to your product.\\nThe product you are marketing is: Auto-GPT an autonomous AI agent utilizing GPT model.\\nYou reply the post that you find it relevant to be replied with marketing text.\\nMake sure to only comment on a relevant post.\\n', 'expected_format': {'post_id': 'str, the reddit post id', 'is_relevant': 'bool, whether the post is relevant for marketing', 'marketing_text': 'str, marketing text, this is empty on irrelevant posts'}}",
        "text_matcher_input = {'match': 'true', 'case_sensitive': False}",
        "reddit_comment_input = {}",
        "reddit_get_post_node = Node(block_id=GetRedditPostsBlock().id, input_default=reddit_get_post_input)",
        "text_formatter_node = Node(block_id=FillTextTemplateBlock().id, input_default=text_formatter_input)",
        "llm_call_node = Node(block_id=AIStructuredResponseGeneratorBlock().id, input_default=llm_call_input)",
        "text_matcher_node = Node(block_id=MatchTextPatternBlock().id, input_default=text_matcher_input)",
        "reddit_comment_node = Node(block_id=PostRedditCommentBlock().id, input_default=reddit_comment_input)",
        "nodes = [reddit_get_post_node, text_formatter_node, llm_call_node, text_matcher_node, reddit_comment_node]",
        "links = [Link(source_id=reddit_get_post_node.id, sink_id=text_formatter_node.id, source_name='post', sink_name='values'), Link(source_id=text_formatter_node.id, sink_id=llm_call_node.id, source_name='output', sink_name='prompt'), Link(source_id=llm_call_node.id, sink_id=text_matcher_node.id, source_name='response', sink_name='data'), Link(source_id=llm_call_node.id, sink_id=text_matcher_node.id, source_name='response_#_is_relevant', sink_name='text'), Link(source_id=text_matcher_node.id, sink_id=reddit_comment_node.id, source_name='positive_#_post_id', sink_name='data_#_post_id'), Link(source_id=text_matcher_node.id, sink_id=reddit_comment_node.id, source_name='positive_#_marketing_text', sink_name='data_#_comment')]",
        "test_graph = Graph(name='RedditMarketingAgent', description='Reddit marketing agent', nodes=nodes, links=links)",
        "return test_graph"
      ],
      "code": "from prisma.models import User\nfrom backend.blocks.llm import AIStructuredResponseGeneratorBlock\nfrom backend.blocks.reddit import GetRedditPostsBlock, PostRedditCommentBlock\nfrom backend.blocks.text import FillTextTemplateBlock, MatchTextPatternBlock\nfrom backend.data.graph import Graph, Link, Node, create_graph\nfrom backend.data.user import get_or_create_user\nfrom backend.util.test import SpinTestServer, wait_execution\ndef create_test_graph() -> Graph:\n    \"\"\"\n                    subreddit\n                       ||\n                        v\n        GetRedditPostsBlock (post_id, post_title, post_body)\n                  //     ||     \\\\\n              post_id  post_title  post_body\n                 ||       ||        ||\n                 v        v         v\n              FillTextTemplateBlock (format)\n                      ||\n                      v\n            AIStructuredResponseBlock / TextRelevancy\n                 ||       ||       ||\n            post_id  is_relevant  marketing_text\n               ||       ||        ||\n               v        v         v\n                 MatchTextPatternBlock\n                 ||       ||\n              positive  negative\n                ||\n                v\n        PostRedditCommentBlock\n    \"\"\"\n    reddit_get_post_input = {'post_limit': 3}\n    text_formatter_input = {'format': '\\nBased on the following post, write your marketing comment:\\n* Post ID: {id}\\n* Post Subreddit: {subreddit}\\n* Post Title: {title}\\n* Post Body: {body}'.strip()}\n    llm_call_input = {'sys_prompt': '\\nYou are an expert at marketing.\\nYou have been tasked with picking Reddit posts that are relevant to your product.\\nThe product you are marketing is: Auto-GPT an autonomous AI agent utilizing GPT model.\\nYou reply the post that you find it relevant to be replied with marketing text.\\nMake sure to only comment on a relevant post.\\n', 'expected_format': {'post_id': 'str, the reddit post id', 'is_relevant': 'bool, whether the post is relevant for marketing', 'marketing_text': 'str, marketing text, this is empty on irrelevant posts'}}\n    text_matcher_input = {'match': 'true', 'case_sensitive': False}\n    reddit_comment_input = {}\n    reddit_get_post_node = Node(block_id=GetRedditPostsBlock().id, input_default=reddit_get_post_input)\n    text_formatter_node = Node(block_id=FillTextTemplateBlock().id, input_default=text_formatter_input)\n    llm_call_node = Node(block_id=AIStructuredResponseGeneratorBlock().id, input_default=llm_call_input)\n    text_matcher_node = Node(block_id=MatchTextPatternBlock().id, input_default=text_matcher_input)\n    reddit_comment_node = Node(block_id=PostRedditCommentBlock().id, input_default=reddit_comment_input)\n    nodes = [reddit_get_post_node, text_formatter_node, llm_call_node, text_matcher_node, reddit_comment_node]\n    links = [Link(source_id=reddit_get_post_node.id, sink_id=text_formatter_node.id, source_name='post', sink_name='values'), Link(source_id=text_formatter_node.id, sink_id=llm_call_node.id, source_name='output', sink_name='prompt'), Link(source_id=llm_call_node.id, sink_id=text_matcher_node.id, source_name='response', sink_name='data'), Link(source_id=llm_call_node.id, sink_id=text_matcher_node.id, source_name='response_#_is_relevant', sink_name='text'), Link(source_id=text_matcher_node.id, sink_id=reddit_comment_node.id, source_name='positive_#_post_id', sink_name='data_#_post_id'), Link(source_id=text_matcher_node.id, sink_id=reddit_comment_node.id, source_name='positive_#_marketing_text', sink_name='data_#_comment')]\n    test_graph = Graph(name='RedditMarketingAgent', description='Reddit marketing agent', nodes=nodes, links=links)\n    return test_graph\n'\\n                    subreddit\\n                       ||\\n                        v\\n        GetRedditPostsBlock (post_id, post_title, post_body)\\n                  //     ||     \\\\\\n              post_id  post_title  post_body\\n                 ||       ||        ||\\n                 v        v         v\\n              FillTextTemplateBlock (format)\\n                      ||\\n                      v\\n            AIStructuredResponseBlock / TextRelevancy\\n                 ||       ||       ||\\n            post_id  is_relevant  marketing_text\\n               ||       ||        ||\\n               v        v         v\\n                 MatchTextPatternBlock\\n                 ||       ||\\n              positive  negative\\n                ||\\n                v\\n        PostRedditCommentBlock\\n    '\nreddit_get_post_input = {'post_limit': 3}\ntext_formatter_input = {'format': '\\nBased on the following post, write your marketing comment:\\n* Post ID: {id}\\n* Post Subreddit: {subreddit}\\n* Post Title: {title}\\n* Post Body: {body}'.strip()}\nllm_call_input = {'sys_prompt': '\\nYou are an expert at marketing.\\nYou have been tasked with picking Reddit posts that are relevant to your product.\\nThe product you are marketing is: Auto-GPT an autonomous AI agent utilizing GPT model.\\nYou reply the post that you find it relevant to be replied with marketing text.\\nMake sure to only comment on a relevant post.\\n', 'expected_format': {'post_id': 'str, the reddit post id', 'is_relevant': 'bool, whether the post is relevant for marketing', 'marketing_text': 'str, marketing text, this is empty on irrelevant posts'}}\ntext_matcher_input = {'match': 'true', 'case_sensitive': False}\nreddit_comment_input = {}\nreddit_get_post_node = Node(block_id=GetRedditPostsBlock().id, input_default=reddit_get_post_input)\ntext_formatter_node = Node(block_id=FillTextTemplateBlock().id, input_default=text_formatter_input)\nllm_call_node = Node(block_id=AIStructuredResponseGeneratorBlock().id, input_default=llm_call_input)\ntext_matcher_node = Node(block_id=MatchTextPatternBlock().id, input_default=text_matcher_input)\nreddit_comment_node = Node(block_id=PostRedditCommentBlock().id, input_default=reddit_comment_input)\nnodes = [reddit_get_post_node, text_formatter_node, llm_call_node, text_matcher_node, reddit_comment_node]\nlinks = [Link(source_id=reddit_get_post_node.id, sink_id=text_formatter_node.id, source_name='post', sink_name='values'), Link(source_id=text_formatter_node.id, sink_id=llm_call_node.id, source_name='output', sink_name='prompt'), Link(source_id=llm_call_node.id, sink_id=text_matcher_node.id, source_name='response', sink_name='data'), Link(source_id=llm_call_node.id, sink_id=text_matcher_node.id, source_name='response_#_is_relevant', sink_name='text'), Link(source_id=text_matcher_node.id, sink_id=reddit_comment_node.id, source_name='positive_#_post_id', sink_name='data_#_post_id'), Link(source_id=text_matcher_node.id, sink_id=reddit_comment_node.id, source_name='positive_#_marketing_text', sink_name='data_#_comment')]\ntest_graph = Graph(name='RedditMarketingAgent', description='Reddit marketing agent', nodes=nodes, links=links)\nreturn test_graph"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "async def create_test_user() -> User:\n    test_user_data = {'sub': 'ef3b97d7-1161-4eb4-92b2-10c24fb154c1', 'email': 'testuser@example.com', 'name': 'Test User'}\n    user = await get_or_create_user(test_user_data)\n    return user",
        "test_user_data = {'sub': 'ef3b97d7-1161-4eb4-92b2-10c24fb154c1', 'email': 'testuser@example.com', 'name': 'Test User'}",
        "user = await get_or_create_user(test_user_data)",
        "return user"
      ],
      "code": "async def create_test_user() -> User:\n    test_user_data = {'sub': 'ef3b97d7-1161-4eb4-92b2-10c24fb154c1', 'email': 'testuser@example.com', 'name': 'Test User'}\n    user = await get_or_create_user(test_user_data)\n    return user\ntest_user_data = {'sub': 'ef3b97d7-1161-4eb4-92b2-10c24fb154c1', 'email': 'testuser@example.com', 'name': 'Test User'}\nuser = await get_or_create_user(test_user_data)\nreturn user"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [
        "async def reddit_marketing_agent():\n    async with SpinTestServer() as server:\n        test_user = await create_test_user()\n        test_graph = await create_graph(create_test_graph(), user_id=test_user.id)\n        input_data = {'subreddit': 'AutoGPT'}\n        response = await server.agent_server.test_execute_graph(test_graph.id, input_data, test_user.id)\n        print(response)\n        result = await wait_execution(test_user.id, test_graph.id, response['id'], 120)\n        print(result)",
        "async with SpinTestServer() as server:\n    test_user = await create_test_user()\n    test_graph = await create_graph(create_test_graph(), user_id=test_user.id)\n    input_data = {'subreddit': 'AutoGPT'}\n    response = await server.agent_server.test_execute_graph(test_graph.id, input_data, test_user.id)\n    print(response)\n    result = await wait_execution(test_user.id, test_graph.id, response['id'], 120)\n    print(result)",
        "test_user = await create_test_user()",
        "test_graph = await create_graph(create_test_graph(), user_id=test_user.id)",
        "input_data = {'subreddit': 'AutoGPT'}",
        "response = await server.agent_server.test_execute_graph(test_graph.id, input_data, test_user.id)",
        "print(response)",
        "result = await wait_execution(test_user.id, test_graph.id, response['id'], 120)",
        "print(result)",
        "__name__ Eq '__main__'"
      ],
      "code": "async def reddit_marketing_agent():\n    async with SpinTestServer() as server:\n        test_user = await create_test_user()\n        test_graph = await create_graph(create_test_graph(), user_id=test_user.id)\n        input_data = {'subreddit': 'AutoGPT'}\n        response = await server.agent_server.test_execute_graph(test_graph.id, input_data, test_user.id)\n        print(response)\n        result = await wait_execution(test_user.id, test_graph.id, response['id'], 120)\n        print(result)\nasync with SpinTestServer() as server:\n    test_user = await create_test_user()\n    test_graph = await create_graph(create_test_graph(), user_id=test_user.id)\n    input_data = {'subreddit': 'AutoGPT'}\n    response = await server.agent_server.test_execute_graph(test_graph.id, input_data, test_user.id)\n    print(response)\n    result = await wait_execution(test_user.id, test_graph.id, response['id'], 120)\n    print(result)\ntest_user = await create_test_user()\ntest_graph = await create_graph(create_test_graph(), user_id=test_user.id)\ninput_data = {'subreddit': 'AutoGPT'}\nresponse = await server.agent_server.test_execute_graph(test_graph.id, input_data, test_user.id)\nprint(response)\nresult = await wait_execution(test_user.id, test_graph.id, response['id'], 120)\nprint(result)\n__name__ Eq '__main__'"
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [
        "import asyncio",
        "asyncio.run(reddit_marketing_agent())"
      ],
      "code": "import asyncio\nasyncio.run(reddit_marketing_agent())"
    },
    {
      "id": "n4",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n5",
      "type": "block",
      "statements": [],
      "code": ""
    }
  ],
  "edges": [
    {
      "source": "n3",
      "target": "n5"
    },
    {
      "source": "n2",
      "target": "n4"
    },
    {
      "source": "n2",
      "target": "n3"
    },
    {
      "source": "n4",
      "target": "n5"
    }
  ]
}