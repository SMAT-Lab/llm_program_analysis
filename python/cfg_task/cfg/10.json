{
    "nodes": [
        {
            "id": "1",
            "type": "block",
            "statements": [
                "import json",
                "import os",
                "import requests",
                "import sys",
                "import time",
                "from typing import Dict, List, Tuple",
                "CHECK_INTERVAL = 30",
                "def get_environment_variables() -> Tuple[str, str, str, str, str]:\n    \"\"\"Retrieve and return necessary environment variables.\"\"\"\n    try:\n        with open(os.environ['GITHUB_EVENT_PATH']) as f:\n            event = json.load(f)\n        if 'pull_request' in event:\n            sha = event['pull_request']['head']['sha']\n        else:\n            sha = os.environ['GITHUB_SHA']\n        return (os.environ['GITHUB_API_URL'], os.environ['GITHUB_REPOSITORY'], sha, os.environ['GITHUB_TOKEN'], os.environ['GITHUB_RUN_ID'])\n    except KeyError as e:\n        print(f'Error: Missing required environment variable or event data: {e}')\n        sys.exit(1)",
                "'Retrieve and return necessary environment variables.'",
                "try:\n    with open(os.environ['GITHUB_EVENT_PATH']) as f:\n        event = json.load(f)\n    if 'pull_request' in event:\n        sha = event['pull_request']['head']['sha']\n    else:\n        sha = os.environ['GITHUB_SHA']\n    return (os.environ['GITHUB_API_URL'], os.environ['GITHUB_REPOSITORY'], sha, os.environ['GITHUB_TOKEN'], os.environ['GITHUB_RUN_ID'])\nexcept KeyError as e:\n    print(f'Error: Missing required environment variable or event data: {e}')\n    sys.exit(1)",
                "with open(os.environ['GITHUB_EVENT_PATH']) as f:\n    event = json.load(f)",
                "event = json.load(f)",
                "'pull_request' In event"
            ]
        },
        {
            "id": "2",
            "type": "block",
            "statements": [
                "sha = event['pull_request']['head']['sha']"
            ]
        },
        {
            "id": "3",
            "type": "block",
            "statements": [
                "sha = os.environ['GITHUB_SHA']"
            ]
        },
        {
            "id": "4",
            "type": "block",
            "statements": [
                "return (os.environ['GITHUB_API_URL'], os.environ['GITHUB_REPOSITORY'], sha, os.environ['GITHUB_TOKEN'], os.environ['GITHUB_RUN_ID'])"
            ]
        },
        {
            "id": "5",
            "type": "block",
            "statements": [
                "print(f'Error: Missing required environment variable or event data: {e}')",
                "sys.exit(1)",
                "def make_api_request(url: str, headers: Dict[str, str]) -> Dict:\n    \"\"\"Make an API request and return the JSON response.\"\"\"\n    try:\n        print('Making API request to:', url)\n        response = requests.get(url, headers=headers, timeout=10)\n        response.raise_for_status()\n        return response.json()\n    except requests.RequestException as e:\n        print(f'Error: API request failed. {e}')\n        sys.exit(1)",
                "'Make an API request and return the JSON response.'",
                "try:\n    print('Making API request to:', url)\n    response = requests.get(url, headers=headers, timeout=10)\n    response.raise_for_status()\n    return response.json()\nexcept requests.RequestException as e:\n    print(f'Error: API request failed. {e}')\n    sys.exit(1)",
                "print('Making API request to:', url)",
                "response = requests.get(url, headers=headers, timeout=10)",
                "response.raise_for_status()",
                "return response.json()"
            ]
        },
        {
            "id": "6",
            "type": "block",
            "statements": [
                "print(f'Error: API request failed. {e}')",
                "sys.exit(1)",
                "def process_check_runs(check_runs: List[Dict]) -> Tuple[bool, bool]:\n    \"\"\"Process check runs and return their status.\"\"\"\n    runs_in_progress = False\n    all_others_passed = True\n    for run in check_runs:\n        if str(run['name']) != 'Check PR Status':\n            status = run['status']\n            conclusion = run['conclusion']\n            if status == 'completed':\n                if conclusion not in ['success', 'skipped', 'neutral']:\n                    all_others_passed = False\n                    print(f\"Check run {run['name']} (ID: {run['id']}) has conclusion: {conclusion}\")\n            else:\n                runs_in_progress = True\n                print(f\"Check run {run['name']} (ID: {run['id']}) is still {status}.\")\n                all_others_passed = False\n        else:\n            print(f\"Skipping check run {run['name']} (ID: {run['id']}) as it is the current run.\")\n    return (runs_in_progress, all_others_passed)",
                "'Process check runs and return their status.'",
                "runs_in_progress = False",
                "all_others_passed = True"
            ]
        },
        {
            "id": "7",
            "type": "block",
            "statements": [
                "run",
                "check_runs"
            ]
        },
        {
            "id": "8",
            "type": "block",
            "statements": [
                "str(run['name']) NotEq 'Check PR Status'"
            ]
        },
        {
            "id": "9",
            "type": "block",
            "statements": [
                "return (runs_in_progress, all_others_passed)"
            ]
        },
        {
            "id": "10",
            "type": "block",
            "statements": [
                "status = run['status']",
                "conclusion = run['conclusion']",
                "status Eq 'completed'"
            ]
        },
        {
            "id": "11",
            "type": "block",
            "statements": [
                "print(f\"Skipping check run {run['name']} (ID: {run['id']}) as it is the current run.\")"
            ]
        },
        {
            "id": "12",
            "type": "block",
            "statements": []
        },
        {
            "id": "13",
            "type": "block",
            "statements": [
                "conclusion NotIn ['success', 'skipped', 'neutral']"
            ]
        },
        {
            "id": "14",
            "type": "block",
            "statements": [
                "runs_in_progress = True",
                "print(f\"Check run {run['name']} (ID: {run['id']}) is still {status}.\")",
                "all_others_passed = False"
            ]
        },
        {
            "id": "15",
            "type": "block",
            "statements": []
        },
        {
            "id": "16",
            "type": "block",
            "statements": [
                "all_others_passed = False",
                "print(f\"Check run {run['name']} (ID: {run['id']}) has conclusion: {conclusion}\")"
            ]
        },
        {
            "id": "17",
            "type": "block",
            "statements": []
        },
        {
            "id": "18",
            "type": "block",
            "statements": []
        },
        {
            "id": "19",
            "type": "block",
            "statements": [
                "def main():\n    (api_url, repo, sha, github_token, current_run_id) = get_environment_variables()\n    endpoint = f'{api_url}/repos/{repo}/commits/{sha}/check-runs'\n    headers = {'Accept': 'application/vnd.github.v3+json'}\n    if github_token:\n        headers['Authorization'] = f'token {github_token}'\n    print(f'Current run ID: {current_run_id}')\n    while True:\n        data = make_api_request(endpoint, headers)\n        check_runs = data['check_runs']\n        print('Processing check runs...')\n        print(check_runs)\n        (runs_in_progress, all_others_passed) = process_check_runs(check_runs)\n        if not runs_in_progress:\n            break\n        print(f'Some check runs are still in progress. Waiting {CHECK_INTERVAL} seconds before checking again...')\n        time.sleep(CHECK_INTERVAL)\n    if all_others_passed:\n        print('All other completed check runs have passed. This check passes.')\n        sys.exit(0)\n    else:\n        print('Some check runs have failed or have not completed. This check fails.')\n        sys.exit(1)",
                "(api_url, repo, sha, github_token, current_run_id) = get_environment_variables()",
                "endpoint = f'{api_url}/repos/{repo}/commits/{sha}/check-runs'",
                "headers = {'Accept': 'application/vnd.github.v3+json'}",
                "github_token"
            ]
        },
        {
            "id": "20",
            "type": "block",
            "statements": [
                "headers['Authorization'] = f'token {github_token}'"
            ]
        },
        {
            "id": "21",
            "type": "block",
            "statements": []
        },
        {
            "id": "22",
            "type": "block",
            "statements": [
                "print(f'Current run ID: {current_run_id}')"
            ]
        },
        {
            "id": "23",
            "type": "block",
            "statements": [
                "True"
            ]
        },
        {
            "id": "24",
            "type": "block",
            "statements": [
                "data = make_api_request(endpoint, headers)",
                "check_runs = data['check_runs']",
                "print('Processing check runs...')",
                "print(check_runs)",
                "(runs_in_progress, all_others_passed) = process_check_runs(check_runs)",
                "not runs_in_progress"
            ]
        },
        {
            "id": "25",
            "type": "block",
            "statements": [
                "all_others_passed"
            ]
        },
        {
            "id": "26",
            "type": "block",
            "statements": [
                "break"
            ]
        },
        {
            "id": "27",
            "type": "block",
            "statements": []
        },
        {
            "id": "28",
            "type": "block",
            "statements": [
                "print(f'Some check runs are still in progress. Waiting {CHECK_INTERVAL} seconds before checking again...')",
                "time.sleep(CHECK_INTERVAL)"
            ]
        },
        {
            "id": "29",
            "type": "block",
            "statements": [
                "print('All other completed check runs have passed. This check passes.')",
                "sys.exit(0)"
            ]
        },
        {
            "id": "30",
            "type": "block",
            "statements": [
                "print('Some check runs have failed or have not completed. This check fails.')",
                "sys.exit(1)"
            ]
        },
        {
            "id": "31",
            "type": "block",
            "statements": [
                "__name__ Eq '__main__'"
            ]
        },
        {
            "id": "32",
            "type": "block",
            "statements": [
                "main()"
            ]
        },
        {
            "id": "33",
            "type": "block",
            "statements": []
        },
        {
            "id": "34",
            "type": "block",
            "statements": []
        }
    ],
    "edges": [
        {
            "source": "1",
            "target": "2",
            "type": "true"
        },
        {
            "source": "1",
            "target": "3",
            "type": "false"
        },
        {
            "source": "2",
            "target": "4",
            "type": "next"
        },
        {
            "source": "3",
            "target": "4",
            "type": "next"
        },
        {
            "source": "6",
            "target": "7",
            "type": "next"
        },
        {
            "source": "7",
            "target": "8",
            "type": "true"
        },
        {
            "source": "7",
            "target": "9",
            "type": "false"
        },
        {
            "source": "8",
            "target": "10",
            "type": "true"
        },
        {
            "source": "8",
            "target": "11",
            "type": "false"
        },
        {
            "source": "10",
            "target": "13",
            "type": "true"
        },
        {
            "source": "10",
            "target": "14",
            "type": "false"
        },
        {
            "source": "11",
            "target": "12",
            "type": "next"
        },
        {
            "source": "12",
            "target": "7",
            "type": "next"
        },
        {
            "source": "13",
            "target": "16",
            "type": "true"
        },
        {
            "source": "13",
            "target": "17",
            "type": "false"
        },
        {
            "source": "14",
            "target": "15",
            "type": "next"
        },
        {
            "source": "15",
            "target": "12",
            "type": "next"
        },
        {
            "source": "16",
            "target": "18",
            "type": "next"
        },
        {
            "source": "17",
            "target": "18",
            "type": "next"
        },
        {
            "source": "18",
            "target": "15",
            "type": "next"
        },
        {
            "source": "19",
            "target": "20",
            "type": "true"
        },
        {
            "source": "19",
            "target": "21",
            "type": "false"
        },
        {
            "source": "20",
            "target": "22",
            "type": "next"
        },
        {
            "source": "21",
            "target": "22",
            "type": "next"
        },
        {
            "source": "22",
            "target": "23",
            "type": "next"
        },
        {
            "source": "23",
            "target": "24",
            "type": "true"
        },
        {
            "source": "23",
            "target": "25",
            "type": "false"
        },
        {
            "source": "24",
            "target": "26",
            "type": "true"
        },
        {
            "source": "24",
            "target": "27",
            "type": "false"
        },
        {
            "source": "25",
            "target": "29",
            "type": "true"
        },
        {
            "source": "25",
            "target": "30",
            "type": "false"
        },
        {
            "source": "26",
            "target": "28",
            "type": "next"
        },
        {
            "source": "27",
            "target": "28",
            "type": "next"
        },
        {
            "source": "28",
            "target": "23",
            "type": "next"
        },
        {
            "source": "29",
            "target": "31",
            "type": "next"
        },
        {
            "source": "30",
            "target": "31",
            "type": "next"
        },
        {
            "source": "31",
            "target": "32",
            "type": "true"
        },
        {
            "source": "31",
            "target": "33",
            "type": "false"
        },
        {
            "source": "32",
            "target": "34",
            "type": "next"
        },
        {
            "source": "33",
            "target": "34",
            "type": "next"
        }
    ]
}