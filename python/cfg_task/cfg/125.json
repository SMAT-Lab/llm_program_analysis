{
    "nodes": [
        {
            "id": "1",
            "type": "block",
            "statements": [
                "import logging",
                "import time",
                "from enum import Enum",
                "from typing import Any",
                "import httpx",
                "from backend.blocks.fal._auth import TEST_CREDENTIALS, TEST_CREDENTIALS_INPUT, FalCredentials, FalCredentialsField, FalCredentialsInput",
                "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema",
                "from backend.data.model import SchemaField",
                "logger = logging.getLogger(__name__)",
                "class FalModel(str, Enum):\n    MOCHI = 'fal-ai/mochi-v1'\n    LUMA = 'fal-ai/luma-dream-machine'",
                "MOCHI = 'fal-ai/mochi-v1'",
                "LUMA = 'fal-ai/luma-dream-machine'",
                "class AIVideoGeneratorBlock(Block):\n\n    class Input(BlockSchema):\n        prompt: str = SchemaField(description='Description of the video to generate.', placeholder='A dog running in a field.')\n        model: FalModel = SchemaField(title='FAL Model', default=FalModel.MOCHI, description='The FAL model to use for video generation.')\n        credentials: FalCredentialsInput = FalCredentialsField()\n\n    class Output(BlockSchema):\n        video_url: str = SchemaField(description='The URL of the generated video.')\n        error: str = SchemaField(description='Error message if video generation failed.')\n        logs: list[str] = SchemaField(description='Generation progress logs.', optional=True)\n\n    def __init__(self):\n        super().__init__(id='530cf046-2ce0-4854-ae2c-659db17c7a46', description='Generate videos using FAL AI models.', categories={BlockCategory.AI}, input_schema=self.Input, output_schema=self.Output, test_input={'prompt': 'A dog running in a field.', 'model': FalModel.MOCHI, 'credentials': TEST_CREDENTIALS_INPUT}, test_credentials=TEST_CREDENTIALS, test_output=[('video_url', 'https://fal.media/files/example/video.mp4')], test_mock={'generate_video': lambda *args, **kwargs: 'https://fal.media/files/example/video.mp4'})\n\n    def _get_headers(self, api_key: str) -> dict[str, str]:\n        \"\"\"Get headers for FAL API requests.\"\"\"\n        return {'Authorization': f'Key {api_key}', 'Content-Type': 'application/json'}\n\n    def _submit_request(self, url: str, headers: dict[str, str], data: dict[str, Any]) -> dict[str, Any]:\n        \"\"\"Submit a request to the FAL API.\"\"\"\n        try:\n            response = httpx.post(url, headers=headers, json=data)\n            response.raise_for_status()\n            return response.json()\n        except httpx.HTTPError as e:\n            logger.error(f'FAL API request failed: {str(e)}')\n            raise RuntimeError(f'Failed to submit request: {str(e)}')\n\n    def _poll_status(self, status_url: str, headers: dict[str, str]) -> dict[str, Any]:\n        \"\"\"Poll the status endpoint until completion or failure.\"\"\"\n        try:\n            response = httpx.get(status_url, headers=headers)\n            response.raise_for_status()\n            return response.json()\n        except httpx.HTTPError as e:\n            logger.error(f'Failed to get status: {str(e)}')\n            raise RuntimeError(f'Failed to get status: {str(e)}')\n\n    def generate_video(self, input_data: Input, credentials: FalCredentials) -> str:\n        \"\"\"Generate video using the specified FAL model.\"\"\"\n        base_url = 'https://queue.fal.run'\n        api_key = credentials.api_key.get_secret_value()\n        headers = self._get_headers(api_key)\n        submit_url = f'{base_url}/{input_data.model.value}'\n        submit_data = {'prompt': input_data.prompt}\n        seen_logs = set()\n        try:\n            submit_response = httpx.post(submit_url, headers=headers, json=submit_data)\n            submit_response.raise_for_status()\n            request_data = submit_response.json()\n            request_id = request_data.get('request_id')\n            status_url = request_data.get('status_url')\n            result_url = request_data.get('response_url')\n            if not all([request_id, status_url, result_url]):\n                raise ValueError('Missing required data in submission response')\n            max_attempts = 30\n            attempt = 0\n            base_wait_time = 5\n            while attempt < max_attempts:\n                status_response = httpx.get(f'{status_url}?logs=1', headers=headers)\n                status_response.raise_for_status()\n                status_data = status_response.json()\n                logs = status_data.get('logs', [])\n                if logs and isinstance(logs, list):\n                    for log in logs:\n                        if isinstance(log, dict):\n                            log_key = f\"{log.get('timestamp', '')}-{log.get('message', '')}\"\n                            if log_key not in seen_logs:\n                                seen_logs.add(log_key)\n                                message = log.get('message', '')\n                                if message:\n                                    logger.debug(f\"[FAL Generation] [{log.get('level', 'INFO')}] [{log.get('source', '')}] [{log.get('timestamp', '')}] {message}\")\n                status = status_data.get('status')\n                if status == 'COMPLETED':\n                    result_response = httpx.get(result_url, headers=headers)\n                    result_response.raise_for_status()\n                    result_data = result_response.json()\n                    if 'video' not in result_data or not isinstance(result_data['video'], dict):\n                        raise ValueError('Invalid response format - missing video data')\n                    video_url = result_data['video'].get('url')\n                    if not video_url:\n                        raise ValueError('No video URL in response')\n                    return video_url\n                elif status == 'FAILED':\n                    error_msg = status_data.get('error', 'No error details provided')\n                    raise RuntimeError(f'Video generation failed: {error_msg}')\n                elif status == 'IN_QUEUE':\n                    position = status_data.get('queue_position', 'unknown')\n                    logger.debug(f'[FAL Generation] Status: In queue, position: {position}')\n                elif status == 'IN_PROGRESS':\n                    logger.debug('[FAL Generation] Status: Request is being processed...')\n                else:\n                    logger.info(f'[FAL Generation] Status: Unknown status: {status}')\n                wait_time = min(base_wait_time * 2 ** attempt, 60)\n                time.sleep(wait_time)\n                attempt += 1\n            raise RuntimeError('Maximum polling attempts reached')\n        except httpx.HTTPError as e:\n            raise RuntimeError(f'API request failed: {str(e)}')\n\n    def run(self, input_data: Input, *, credentials: FalCredentials, **kwargs) -> BlockOutput:\n        try:\n            video_url = self.generate_video(input_data, credentials)\n            yield ('video_url', video_url)\n        except Exception as e:\n            error_message = str(e)\n            yield ('error', error_message)",
                "class Input(BlockSchema):\n    prompt: str = SchemaField(description='Description of the video to generate.', placeholder='A dog running in a field.')\n    model: FalModel = SchemaField(title='FAL Model', default=FalModel.MOCHI, description='The FAL model to use for video generation.')\n    credentials: FalCredentialsInput = FalCredentialsField()",
                "prompt: str = SchemaField(description='Description of the video to generate.', placeholder='A dog running in a field.')",
                "model: FalModel = SchemaField(title='FAL Model', default=FalModel.MOCHI, description='The FAL model to use for video generation.')",
                "credentials: FalCredentialsInput = FalCredentialsField()",
                "class Output(BlockSchema):\n    video_url: str = SchemaField(description='The URL of the generated video.')\n    error: str = SchemaField(description='Error message if video generation failed.')\n    logs: list[str] = SchemaField(description='Generation progress logs.', optional=True)",
                "video_url: str = SchemaField(description='The URL of the generated video.')",
                "error: str = SchemaField(description='Error message if video generation failed.')",
                "logs: list[str] = SchemaField(description='Generation progress logs.', optional=True)",
                "def __init__(self):\n    super().__init__(id='530cf046-2ce0-4854-ae2c-659db17c7a46', description='Generate videos using FAL AI models.', categories={BlockCategory.AI}, input_schema=self.Input, output_schema=self.Output, test_input={'prompt': 'A dog running in a field.', 'model': FalModel.MOCHI, 'credentials': TEST_CREDENTIALS_INPUT}, test_credentials=TEST_CREDENTIALS, test_output=[('video_url', 'https://fal.media/files/example/video.mp4')], test_mock={'generate_video': lambda *args, **kwargs: 'https://fal.media/files/example/video.mp4'})",
                "super().__init__()",
                "def _get_headers(self, api_key: str) -> dict[str, str]:\n    \"\"\"Get headers for FAL API requests.\"\"\"\n    return {'Authorization': f'Key {api_key}', 'Content-Type': 'application/json'}",
                "'Get headers for FAL API requests.'",
                "return {'Authorization': f'Key {api_key}', 'Content-Type': 'application/json'}"
            ]
        },
        {
            "id": "2",
            "type": "block",
            "statements": [
                "def _submit_request(self, url: str, headers: dict[str, str], data: dict[str, Any]) -> dict[str, Any]:\n    \"\"\"Submit a request to the FAL API.\"\"\"\n    try:\n        response = httpx.post(url, headers=headers, json=data)\n        response.raise_for_status()\n        return response.json()\n    except httpx.HTTPError as e:\n        logger.error(f'FAL API request failed: {str(e)}')\n        raise RuntimeError(f'Failed to submit request: {str(e)}')",
                "'Submit a request to the FAL API.'",
                "try:\n    response = httpx.post(url, headers=headers, json=data)\n    response.raise_for_status()\n    return response.json()\nexcept httpx.HTTPError as e:\n    logger.error(f'FAL API request failed: {str(e)}')\n    raise RuntimeError(f'Failed to submit request: {str(e)}')",
                "response = httpx.post(url, headers=headers, json=data)",
                "response.raise_for_status()",
                "return response.json()"
            ]
        },
        {
            "id": "3",
            "type": "block",
            "statements": [
                "logger.error(f'FAL API request failed: {str(e)}')",
                "raise RuntimeError(f'Failed to submit request: {str(e)}')",
                "def _poll_status(self, status_url: str, headers: dict[str, str]) -> dict[str, Any]:\n    \"\"\"Poll the status endpoint until completion or failure.\"\"\"\n    try:\n        response = httpx.get(status_url, headers=headers)\n        response.raise_for_status()\n        return response.json()\n    except httpx.HTTPError as e:\n        logger.error(f'Failed to get status: {str(e)}')\n        raise RuntimeError(f'Failed to get status: {str(e)}')",
                "'Poll the status endpoint until completion or failure.'",
                "try:\n    response = httpx.get(status_url, headers=headers)\n    response.raise_for_status()\n    return response.json()\nexcept httpx.HTTPError as e:\n    logger.error(f'Failed to get status: {str(e)}')\n    raise RuntimeError(f'Failed to get status: {str(e)}')",
                "response = httpx.get(status_url, headers=headers)",
                "response.raise_for_status()",
                "return response.json()"
            ]
        },
        {
            "id": "4",
            "type": "block",
            "statements": [
                "logger.error(f'Failed to get status: {str(e)}')",
                "raise RuntimeError(f'Failed to get status: {str(e)}')",
                "def generate_video(self, input_data: Input, credentials: FalCredentials) -> str:\n    \"\"\"Generate video using the specified FAL model.\"\"\"\n    base_url = 'https://queue.fal.run'\n    api_key = credentials.api_key.get_secret_value()\n    headers = self._get_headers(api_key)\n    submit_url = f'{base_url}/{input_data.model.value}'\n    submit_data = {'prompt': input_data.prompt}\n    seen_logs = set()\n    try:\n        submit_response = httpx.post(submit_url, headers=headers, json=submit_data)\n        submit_response.raise_for_status()\n        request_data = submit_response.json()\n        request_id = request_data.get('request_id')\n        status_url = request_data.get('status_url')\n        result_url = request_data.get('response_url')\n        if not all([request_id, status_url, result_url]):\n            raise ValueError('Missing required data in submission response')\n        max_attempts = 30\n        attempt = 0\n        base_wait_time = 5\n        while attempt < max_attempts:\n            status_response = httpx.get(f'{status_url}?logs=1', headers=headers)\n            status_response.raise_for_status()\n            status_data = status_response.json()\n            logs = status_data.get('logs', [])\n            if logs and isinstance(logs, list):\n                for log in logs:\n                    if isinstance(log, dict):\n                        log_key = f\"{log.get('timestamp', '')}-{log.get('message', '')}\"\n                        if log_key not in seen_logs:\n                            seen_logs.add(log_key)\n                            message = log.get('message', '')\n                            if message:\n                                logger.debug(f\"[FAL Generation] [{log.get('level', 'INFO')}] [{log.get('source', '')}] [{log.get('timestamp', '')}] {message}\")\n            status = status_data.get('status')\n            if status == 'COMPLETED':\n                result_response = httpx.get(result_url, headers=headers)\n                result_response.raise_for_status()\n                result_data = result_response.json()\n                if 'video' not in result_data or not isinstance(result_data['video'], dict):\n                    raise ValueError('Invalid response format - missing video data')\n                video_url = result_data['video'].get('url')\n                if not video_url:\n                    raise ValueError('No video URL in response')\n                return video_url\n            elif status == 'FAILED':\n                error_msg = status_data.get('error', 'No error details provided')\n                raise RuntimeError(f'Video generation failed: {error_msg}')\n            elif status == 'IN_QUEUE':\n                position = status_data.get('queue_position', 'unknown')\n                logger.debug(f'[FAL Generation] Status: In queue, position: {position}')\n            elif status == 'IN_PROGRESS':\n                logger.debug('[FAL Generation] Status: Request is being processed...')\n            else:\n                logger.info(f'[FAL Generation] Status: Unknown status: {status}')\n            wait_time = min(base_wait_time * 2 ** attempt, 60)\n            time.sleep(wait_time)\n            attempt += 1\n        raise RuntimeError('Maximum polling attempts reached')\n    except httpx.HTTPError as e:\n        raise RuntimeError(f'API request failed: {str(e)}')",
                "'Generate video using the specified FAL model.'",
                "base_url = 'https://queue.fal.run'",
                "api_key = credentials.api_key.get_secret_value()",
                "headers = self._get_headers(api_key)",
                "submit_url = f'{base_url}/{input_data.model.value}'",
                "submit_data = {'prompt': input_data.prompt}",
                "seen_logs = set()",
                "try:\n    submit_response = httpx.post(submit_url, headers=headers, json=submit_data)\n    submit_response.raise_for_status()\n    request_data = submit_response.json()\n    request_id = request_data.get('request_id')\n    status_url = request_data.get('status_url')\n    result_url = request_data.get('response_url')\n    if not all([request_id, status_url, result_url]):\n        raise ValueError('Missing required data in submission response')\n    max_attempts = 30\n    attempt = 0\n    base_wait_time = 5\n    while attempt < max_attempts:\n        status_response = httpx.get(f'{status_url}?logs=1', headers=headers)\n        status_response.raise_for_status()\n        status_data = status_response.json()\n        logs = status_data.get('logs', [])\n        if logs and isinstance(logs, list):\n            for log in logs:\n                if isinstance(log, dict):\n                    log_key = f\"{log.get('timestamp', '')}-{log.get('message', '')}\"\n                    if log_key not in seen_logs:\n                        seen_logs.add(log_key)\n                        message = log.get('message', '')\n                        if message:\n                            logger.debug(f\"[FAL Generation] [{log.get('level', 'INFO')}] [{log.get('source', '')}] [{log.get('timestamp', '')}] {message}\")\n        status = status_data.get('status')\n        if status == 'COMPLETED':\n            result_response = httpx.get(result_url, headers=headers)\n            result_response.raise_for_status()\n            result_data = result_response.json()\n            if 'video' not in result_data or not isinstance(result_data['video'], dict):\n                raise ValueError('Invalid response format - missing video data')\n            video_url = result_data['video'].get('url')\n            if not video_url:\n                raise ValueError('No video URL in response')\n            return video_url\n        elif status == 'FAILED':\n            error_msg = status_data.get('error', 'No error details provided')\n            raise RuntimeError(f'Video generation failed: {error_msg}')\n        elif status == 'IN_QUEUE':\n            position = status_data.get('queue_position', 'unknown')\n            logger.debug(f'[FAL Generation] Status: In queue, position: {position}')\n        elif status == 'IN_PROGRESS':\n            logger.debug('[FAL Generation] Status: Request is being processed...')\n        else:\n            logger.info(f'[FAL Generation] Status: Unknown status: {status}')\n        wait_time = min(base_wait_time * 2 ** attempt, 60)\n        time.sleep(wait_time)\n        attempt += 1\n    raise RuntimeError('Maximum polling attempts reached')\nexcept httpx.HTTPError as e:\n    raise RuntimeError(f'API request failed: {str(e)}')",
                "submit_response = httpx.post(submit_url, headers=headers, json=submit_data)",
                "submit_response.raise_for_status()",
                "request_data = submit_response.json()",
                "request_id = request_data.get('request_id')",
                "status_url = request_data.get('status_url')",
                "result_url = request_data.get('response_url')",
                "not all([request_id, status_url, result_url])"
            ]
        },
        {
            "id": "5",
            "type": "block",
            "statements": [
                "raise ValueError('Missing required data in submission response')"
            ]
        },
        {
            "id": "6",
            "type": "block",
            "statements": []
        },
        {
            "id": "7",
            "type": "block",
            "statements": [
                "max_attempts = 30",
                "attempt = 0",
                "base_wait_time = 5"
            ]
        },
        {
            "id": "8",
            "type": "block",
            "statements": [
                "attempt Lt max_attempts"
            ]
        },
        {
            "id": "9",
            "type": "block",
            "statements": [
                "status_response = httpx.get(f'{status_url}?logs=1', headers=headers)",
                "status_response.raise_for_status()",
                "status_data = status_response.json()",
                "logs = status_data.get('logs', [])",
                "logs and isinstance(logs, list)"
            ]
        },
        {
            "id": "10",
            "type": "block",
            "statements": [
                "raise RuntimeError('Maximum polling attempts reached')",
                "raise RuntimeError(f'API request failed: {str(e)}')",
                "def run(self, input_data: Input, *, credentials: FalCredentials, **kwargs) -> BlockOutput:\n    try:\n        video_url = self.generate_video(input_data, credentials)\n        yield ('video_url', video_url)\n    except Exception as e:\n        error_message = str(e)\n        yield ('error', error_message)",
                "try:\n    video_url = self.generate_video(input_data, credentials)\n    yield ('video_url', video_url)\nexcept Exception as e:\n    error_message = str(e)\n    yield ('error', error_message)",
                "video_url = self.generate_video(input_data, credentials)",
                "(yield ('video_url', video_url))",
                "error_message = str(e)",
                "(yield ('error', error_message))"
            ]
        },
        {
            "id": "11",
            "type": "block",
            "statements": []
        },
        {
            "id": "12",
            "type": "block",
            "statements": []
        },
        {
            "id": "13",
            "type": "block",
            "statements": [
                "status = status_data.get('status')",
                "status Eq 'COMPLETED'"
            ]
        },
        {
            "id": "14",
            "type": "block",
            "statements": [
                "log",
                "logs"
            ]
        },
        {
            "id": "15",
            "type": "block",
            "statements": [
                "isinstance(log, dict)"
            ]
        },
        {
            "id": "16",
            "type": "block",
            "statements": []
        },
        {
            "id": "17",
            "type": "block",
            "statements": [
                "log_key = f\"{log.get('timestamp', '')}-{log.get('message', '')}\"",
                "log_key NotIn seen_logs"
            ]
        },
        {
            "id": "18",
            "type": "block",
            "statements": []
        },
        {
            "id": "19",
            "type": "block",
            "statements": []
        },
        {
            "id": "20",
            "type": "block",
            "statements": [
                "seen_logs.add(log_key)",
                "message = log.get('message', '')",
                "message"
            ]
        },
        {
            "id": "21",
            "type": "block",
            "statements": []
        },
        {
            "id": "22",
            "type": "block",
            "statements": []
        },
        {
            "id": "23",
            "type": "block",
            "statements": [
                "logger.debug(f\"[FAL Generation] [{log.get('level', 'INFO')}] [{log.get('source', '')}] [{log.get('timestamp', '')}] {message}\")"
            ]
        },
        {
            "id": "24",
            "type": "block",
            "statements": []
        },
        {
            "id": "25",
            "type": "block",
            "statements": []
        },
        {
            "id": "26",
            "type": "block",
            "statements": [
                "result_response = httpx.get(result_url, headers=headers)",
                "result_response.raise_for_status()",
                "result_data = result_response.json()",
                "'video' not in result_data or not isinstance(result_data['video'], dict)"
            ]
        },
        {
            "id": "27",
            "type": "block",
            "statements": [
                "status Eq 'FAILED'"
            ]
        },
        {
            "id": "28",
            "type": "block",
            "statements": [
                "wait_time = min(base_wait_time * 2 ** attempt, 60)",
                "time.sleep(wait_time)",
                "attempt += 1"
            ]
        },
        {
            "id": "29",
            "type": "block",
            "statements": [
                "raise ValueError('Invalid response format - missing video data')"
            ]
        },
        {
            "id": "30",
            "type": "block",
            "statements": []
        },
        {
            "id": "31",
            "type": "block",
            "statements": [
                "video_url = result_data['video'].get('url')",
                "not video_url"
            ]
        },
        {
            "id": "32",
            "type": "block",
            "statements": [
                "raise ValueError('No video URL in response')"
            ]
        },
        {
            "id": "33",
            "type": "block",
            "statements": []
        },
        {
            "id": "34",
            "type": "block",
            "statements": [
                "return video_url"
            ]
        },
        {
            "id": "35",
            "type": "block",
            "statements": [
                "error_msg = status_data.get('error', 'No error details provided')",
                "raise RuntimeError(f'Video generation failed: {error_msg}')"
            ]
        },
        {
            "id": "36",
            "type": "block",
            "statements": [
                "status Eq 'IN_QUEUE'"
            ]
        },
        {
            "id": "37",
            "type": "block",
            "statements": []
        },
        {
            "id": "38",
            "type": "block",
            "statements": [
                "position = status_data.get('queue_position', 'unknown')",
                "logger.debug(f'[FAL Generation] Status: In queue, position: {position}')"
            ]
        },
        {
            "id": "39",
            "type": "block",
            "statements": [
                "status Eq 'IN_PROGRESS'"
            ]
        },
        {
            "id": "40",
            "type": "block",
            "statements": []
        },
        {
            "id": "41",
            "type": "block",
            "statements": [
                "logger.debug('[FAL Generation] Status: Request is being processed...')"
            ]
        },
        {
            "id": "42",
            "type": "block",
            "statements": [
                "logger.info(f'[FAL Generation] Status: Unknown status: {status}')"
            ]
        },
        {
            "id": "43",
            "type": "block",
            "statements": []
        }
    ],
    "edges": [
        {
            "source": "4",
            "target": "5",
            "type": "true"
        },
        {
            "source": "4",
            "target": "6",
            "type": "false"
        },
        {
            "source": "5",
            "target": "7",
            "type": "next"
        },
        {
            "source": "6",
            "target": "7",
            "type": "next"
        },
        {
            "source": "7",
            "target": "8",
            "type": "next"
        },
        {
            "source": "8",
            "target": "9",
            "type": "true"
        },
        {
            "source": "8",
            "target": "10",
            "type": "false"
        },
        {
            "source": "9",
            "target": "11",
            "type": "true"
        },
        {
            "source": "9",
            "target": "12",
            "type": "false"
        },
        {
            "source": "11",
            "target": "14",
            "type": "next"
        },
        {
            "source": "12",
            "target": "13",
            "type": "next"
        },
        {
            "source": "13",
            "target": "26",
            "type": "true"
        },
        {
            "source": "13",
            "target": "27",
            "type": "false"
        },
        {
            "source": "14",
            "target": "15",
            "type": "true"
        },
        {
            "source": "14",
            "target": "16",
            "type": "false"
        },
        {
            "source": "15",
            "target": "17",
            "type": "true"
        },
        {
            "source": "15",
            "target": "18",
            "type": "false"
        },
        {
            "source": "16",
            "target": "13",
            "type": "next"
        },
        {
            "source": "17",
            "target": "20",
            "type": "true"
        },
        {
            "source": "17",
            "target": "21",
            "type": "false"
        },
        {
            "source": "18",
            "target": "19",
            "type": "next"
        },
        {
            "source": "19",
            "target": "14",
            "type": "next"
        },
        {
            "source": "20",
            "target": "23",
            "type": "true"
        },
        {
            "source": "20",
            "target": "24",
            "type": "false"
        },
        {
            "source": "21",
            "target": "22",
            "type": "next"
        },
        {
            "source": "22",
            "target": "19",
            "type": "next"
        },
        {
            "source": "23",
            "target": "25",
            "type": "next"
        },
        {
            "source": "24",
            "target": "25",
            "type": "next"
        },
        {
            "source": "25",
            "target": "22",
            "type": "next"
        },
        {
            "source": "26",
            "target": "29",
            "type": "true"
        },
        {
            "source": "26",
            "target": "30",
            "type": "false"
        },
        {
            "source": "27",
            "target": "35",
            "type": "true"
        },
        {
            "source": "27",
            "target": "36",
            "type": "false"
        },
        {
            "source": "28",
            "target": "8",
            "type": "next"
        },
        {
            "source": "29",
            "target": "31",
            "type": "next"
        },
        {
            "source": "30",
            "target": "31",
            "type": "next"
        },
        {
            "source": "31",
            "target": "32",
            "type": "true"
        },
        {
            "source": "31",
            "target": "33",
            "type": "false"
        },
        {
            "source": "32",
            "target": "34",
            "type": "next"
        },
        {
            "source": "33",
            "target": "34",
            "type": "next"
        },
        {
            "source": "35",
            "target": "37",
            "type": "next"
        },
        {
            "source": "36",
            "target": "38",
            "type": "true"
        },
        {
            "source": "36",
            "target": "39",
            "type": "false"
        },
        {
            "source": "37",
            "target": "28",
            "type": "next"
        },
        {
            "source": "38",
            "target": "40",
            "type": "next"
        },
        {
            "source": "39",
            "target": "41",
            "type": "true"
        },
        {
            "source": "39",
            "target": "42",
            "type": "false"
        },
        {
            "source": "40",
            "target": "37",
            "type": "next"
        },
        {
            "source": "41",
            "target": "43",
            "type": "next"
        },
        {
            "source": "42",
            "target": "43",
            "type": "next"
        },
        {
            "source": "43",
            "target": "40",
            "type": "next"
        }
    ]
}