{
    "nodes": [
        {
            "id": "1",
            "type": "block",
            "statements": [
                "from pydantic import BaseModel",
                "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema, BlockWebhookConfig",
                "from backend.data.model import SchemaField",
                "from backend.util import settings",
                "from backend.util.settings import AppEnvironment, BehaveAs",
                "from ._api import TEST_CREDENTIALS, TEST_CREDENTIALS_INPUT, Slant3DCredentialsField, Slant3DCredentialsInput",
                "class Slant3DTriggerBase:\n    \"\"\"Base class for Slant3D webhook triggers\"\"\"\n\n    class Input(BlockSchema):\n        credentials: Slant3DCredentialsInput = Slant3DCredentialsField()\n        payload: dict = SchemaField(hidden=True, default={})\n\n    class Output(BlockSchema):\n        payload: dict = SchemaField(description='The complete webhook payload received from Slant3D')\n        order_id: str = SchemaField(description='The ID of the affected order')\n        error: str = SchemaField(description='Error message if payload processing failed')\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        yield ('payload', input_data.payload)\n        yield ('order_id', input_data.payload['orderId'])",
                "'Base class for Slant3D webhook triggers'",
                "class Input(BlockSchema):\n    credentials: Slant3DCredentialsInput = Slant3DCredentialsField()\n    payload: dict = SchemaField(hidden=True, default={})",
                "credentials: Slant3DCredentialsInput = Slant3DCredentialsField()",
                "payload: dict = SchemaField(hidden=True, default={})",
                "class Output(BlockSchema):\n    payload: dict = SchemaField(description='The complete webhook payload received from Slant3D')\n    order_id: str = SchemaField(description='The ID of the affected order')\n    error: str = SchemaField(description='Error message if payload processing failed')",
                "payload: dict = SchemaField(description='The complete webhook payload received from Slant3D')",
                "order_id: str = SchemaField(description='The ID of the affected order')",
                "error: str = SchemaField(description='Error message if payload processing failed')",
                "def run(self, input_data: Input, **kwargs) -> BlockOutput:\n    yield ('payload', input_data.payload)\n    yield ('order_id', input_data.payload['orderId'])",
                "(yield ('payload', input_data.payload))",
                "(yield ('order_id', input_data.payload['orderId']))",
                "class Slant3DOrderWebhookBlock(Slant3DTriggerBase, Block):\n    \"\"\"Block for handling Slant3D order webhooks\"\"\"\n\n    class Input(Slant3DTriggerBase.Input):\n\n        class EventsFilter(BaseModel):\n            \"\"\"\n            Currently Slant3D only supports 'SHIPPED' status updates\n            Could be expanded in the future with more status types\n            \"\"\"\n            shipped: bool = True\n        events: EventsFilter = SchemaField(title='Events', description='Order status events to subscribe to', default=EventsFilter(shipped=True))\n\n    class Output(Slant3DTriggerBase.Output):\n        status: str = SchemaField(description='The new status of the order')\n        tracking_number: str = SchemaField(description='The tracking number for the shipment')\n        carrier_code: str = SchemaField(description=\"The carrier code (e.g., 'usps')\")\n\n    def __init__(self):\n        super().__init__(id='8a74c2ad-0104-4640-962f-26c6b69e58cd', description='This block triggers on Slant3D order status updates and outputs the event details, including tracking information when orders are shipped.', disabled=settings.Settings().config.behave_as == BehaveAs.CLOUD and settings.Settings().config.app_env != AppEnvironment.LOCAL, categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=self.Input, output_schema=self.Output, webhook_config=BlockWebhookConfig(provider='slant3d', webhook_type='orders', resource_format='', event_filter_input='events', event_format='order.{event}'), test_input={'credentials': TEST_CREDENTIALS_INPUT, 'events': {'shipped': True}, 'payload': {'orderId': '1234567890', 'status': 'SHIPPED', 'trackingNumber': 'ABCDEF123456', 'carrierCode': 'usps'}}, test_credentials=TEST_CREDENTIALS, test_output=[('payload', {'orderId': '1234567890', 'status': 'SHIPPED', 'trackingNumber': 'ABCDEF123456', 'carrierCode': 'usps'}), ('order_id', '1234567890'), ('status', 'SHIPPED'), ('tracking_number', 'ABCDEF123456'), ('carrier_code', 'usps')])\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        yield from super().run(input_data, **kwargs)\n        yield ('status', input_data.payload['status'])\n        yield ('tracking_number', input_data.payload['trackingNumber'])\n        yield ('carrier_code', input_data.payload['carrierCode'])",
                "'Block for handling Slant3D order webhooks'",
                "class Input(Slant3DTriggerBase.Input):\n\n    class EventsFilter(BaseModel):\n        \"\"\"\n            Currently Slant3D only supports 'SHIPPED' status updates\n            Could be expanded in the future with more status types\n            \"\"\"\n        shipped: bool = True\n    events: EventsFilter = SchemaField(title='Events', description='Order status events to subscribe to', default=EventsFilter(shipped=True))",
                "class EventsFilter(BaseModel):\n    \"\"\"\n            Currently Slant3D only supports 'SHIPPED' status updates\n            Could be expanded in the future with more status types\n            \"\"\"\n    shipped: bool = True",
                "\"\\n            Currently Slant3D only supports 'SHIPPED' status updates\\n            Could be expanded in the future with more status types\\n            \"",
                "shipped: bool = True",
                "events: EventsFilter = SchemaField(title='Events', description='Order status events to subscribe to', default=EventsFilter(shipped=True))",
                "class Output(Slant3DTriggerBase.Output):\n    status: str = SchemaField(description='The new status of the order')\n    tracking_number: str = SchemaField(description='The tracking number for the shipment')\n    carrier_code: str = SchemaField(description=\"The carrier code (e.g., 'usps')\")",
                "status: str = SchemaField(description='The new status of the order')",
                "tracking_number: str = SchemaField(description='The tracking number for the shipment')",
                "carrier_code: str = SchemaField(description=\"The carrier code (e.g., 'usps')\")",
                "def __init__(self):\n    super().__init__(id='8a74c2ad-0104-4640-962f-26c6b69e58cd', description='This block triggers on Slant3D order status updates and outputs the event details, including tracking information when orders are shipped.', disabled=settings.Settings().config.behave_as == BehaveAs.CLOUD and settings.Settings().config.app_env != AppEnvironment.LOCAL, categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=self.Input, output_schema=self.Output, webhook_config=BlockWebhookConfig(provider='slant3d', webhook_type='orders', resource_format='', event_filter_input='events', event_format='order.{event}'), test_input={'credentials': TEST_CREDENTIALS_INPUT, 'events': {'shipped': True}, 'payload': {'orderId': '1234567890', 'status': 'SHIPPED', 'trackingNumber': 'ABCDEF123456', 'carrierCode': 'usps'}}, test_credentials=TEST_CREDENTIALS, test_output=[('payload', {'orderId': '1234567890', 'status': 'SHIPPED', 'trackingNumber': 'ABCDEF123456', 'carrierCode': 'usps'}), ('order_id', '1234567890'), ('status', 'SHIPPED'), ('tracking_number', 'ABCDEF123456'), ('carrier_code', 'usps')])",
                "super().__init__()",
                "def run(self, input_data: Input, **kwargs) -> BlockOutput:\n    yield from super().run(input_data, **kwargs)\n    yield ('status', input_data.payload['status'])\n    yield ('tracking_number', input_data.payload['trackingNumber'])\n    yield ('carrier_code', input_data.payload['carrierCode'])",
                "(yield from super().run(input_data, **kwargs))",
                "(yield ('status', input_data.payload['status']))",
                "(yield ('tracking_number', input_data.payload['trackingNumber']))",
                "(yield ('carrier_code', input_data.payload['carrierCode']))"
            ]
        }
    ],
    "edges": []
}