{
    "nodes": [
        {
            "id": "1",
            "type": "block",
            "statements": [
                "import logging",
                "import time",
                "from typing import Sequence",
                "from backend.data import db",
                "from backend.data.block import Block, initialize_blocks",
                "from backend.data.execution import ExecutionResult, ExecutionStatus",
                "from backend.data.model import CREDENTIALS_FIELD_NAME",
                "from backend.data.user import create_default_user",
                "from backend.executor import DatabaseManager, ExecutionManager, ExecutionScheduler",
                "from backend.server.rest_api import AgentServer",
                "from backend.server.utils import get_user_id",
                "log = logging.getLogger(__name__)",
                "class SpinTestServer:\n\n    def __init__(self):\n        self.db_api = DatabaseManager()\n        self.exec_manager = ExecutionManager()\n        self.agent_server = AgentServer()\n        self.scheduler = ExecutionScheduler()\n\n    @staticmethod\n    def test_get_user_id():\n        return '3e53486c-cf57-477e-ba2a-cb02dc828e1a'\n\n    async def __aenter__(self):\n        self.setup_dependency_overrides()\n        self.db_api.__enter__()\n        self.agent_server.__enter__()\n        self.exec_manager.__enter__()\n        self.scheduler.__enter__()\n        await db.connect()\n        await initialize_blocks()\n        await create_default_user()\n        return self\n\n    async def __aexit__(self, exc_type, exc_val, exc_tb):\n        await db.disconnect()\n        self.scheduler.__exit__(exc_type, exc_val, exc_tb)\n        self.exec_manager.__exit__(exc_type, exc_val, exc_tb)\n        self.agent_server.__exit__(exc_type, exc_val, exc_tb)\n        self.db_api.__exit__(exc_type, exc_val, exc_tb)\n\n    def setup_dependency_overrides(self):\n        self.agent_server.set_test_dependency_overrides({get_user_id: self.test_get_user_id})",
                "def __init__(self):\n    self.db_api = DatabaseManager()\n    self.exec_manager = ExecutionManager()\n    self.agent_server = AgentServer()\n    self.scheduler = ExecutionScheduler()",
                "self.db_api = DatabaseManager()",
                "self.exec_manager = ExecutionManager()",
                "self.agent_server = AgentServer()",
                "self.scheduler = ExecutionScheduler()",
                "@staticmethod\ndef test_get_user_id():\n    return '3e53486c-cf57-477e-ba2a-cb02dc828e1a'",
                "return '3e53486c-cf57-477e-ba2a-cb02dc828e1a'"
            ]
        },
        {
            "id": "2",
            "type": "block",
            "statements": [
                "async def __aenter__(self):\n    self.setup_dependency_overrides()\n    self.db_api.__enter__()\n    self.agent_server.__enter__()\n    self.exec_manager.__enter__()\n    self.scheduler.__enter__()\n    await db.connect()\n    await initialize_blocks()\n    await create_default_user()\n    return self",
                "self.setup_dependency_overrides()",
                "self.db_api.__enter__()",
                "self.agent_server.__enter__()",
                "self.exec_manager.__enter__()",
                "self.scheduler.__enter__()",
                "await db.connect()",
                "await initialize_blocks()",
                "await create_default_user()",
                "return self"
            ]
        },
        {
            "id": "3",
            "type": "block",
            "statements": [
                "async def __aexit__(self, exc_type, exc_val, exc_tb):\n    await db.disconnect()\n    self.scheduler.__exit__(exc_type, exc_val, exc_tb)\n    self.exec_manager.__exit__(exc_type, exc_val, exc_tb)\n    self.agent_server.__exit__(exc_type, exc_val, exc_tb)\n    self.db_api.__exit__(exc_type, exc_val, exc_tb)",
                "await db.disconnect()",
                "self.scheduler.__exit__(exc_type, exc_val, exc_tb)",
                "self.exec_manager.__exit__(exc_type, exc_val, exc_tb)",
                "self.agent_server.__exit__(exc_type, exc_val, exc_tb)",
                "self.db_api.__exit__(exc_type, exc_val, exc_tb)",
                "def setup_dependency_overrides(self):\n    self.agent_server.set_test_dependency_overrides({get_user_id: self.test_get_user_id})",
                "self.agent_server.set_test_dependency_overrides({get_user_id: self.test_get_user_id})",
                "async def wait_execution(user_id: str, graph_id: str, graph_exec_id: str, timeout: int=20) -> Sequence[ExecutionResult]:\n\n    async def is_execution_completed():\n        status = await AgentServer().test_get_graph_run_status(graph_exec_id, user_id)\n        log.info(f'Execution status: {status}')\n        if status == ExecutionStatus.FAILED:\n            log.info('Execution failed')\n            raise Exception('Execution failed')\n        return status == ExecutionStatus.COMPLETED\n    for i in range(timeout):\n        if await is_execution_completed():\n            return await AgentServer().test_get_graph_run_node_execution_results(graph_id, graph_exec_id, user_id)\n        time.sleep(1)\n    assert False, 'Execution did not complete in time.'",
                "async def is_execution_completed():\n    status = await AgentServer().test_get_graph_run_status(graph_exec_id, user_id)\n    log.info(f'Execution status: {status}')\n    if status == ExecutionStatus.FAILED:\n        log.info('Execution failed')\n        raise Exception('Execution failed')\n    return status == ExecutionStatus.COMPLETED",
                "status = await AgentServer().test_get_graph_run_status(graph_exec_id, user_id)",
                "log.info(f'Execution status: {status}')",
                "status Eq ExecutionStatus.FAILED"
            ]
        },
        {
            "id": "4",
            "type": "block",
            "statements": [
                "log.info('Execution failed')",
                "raise Exception('Execution failed')"
            ]
        },
        {
            "id": "5",
            "type": "block",
            "statements": []
        },
        {
            "id": "6",
            "type": "block",
            "statements": [
                "return status == ExecutionStatus.COMPLETED"
            ]
        },
        {
            "id": "7",
            "type": "block",
            "statements": [
                "i",
                "range(timeout)"
            ]
        },
        {
            "id": "8",
            "type": "block",
            "statements": [
                "await is_execution_completed()"
            ]
        },
        {
            "id": "9",
            "type": "block",
            "statements": [
                "assert False, 'Execution did not complete in time.'",
                "def execute_block_test(block: Block):\n    prefix = f'[Test-{block.name}]'\n    if not block.test_input or not block.test_output:\n        log.info(f'{prefix} No test data provided')\n        return\n    if not isinstance(block.test_input, list):\n        block.test_input = [block.test_input]\n    if not isinstance(block.test_output, list):\n        block.test_output = [block.test_output]\n    output_index = 0\n    log.info(f'{prefix} Executing {len(block.test_input)} tests...')\n    prefix = ' ' * 4 + prefix\n    for (mock_name, mock_obj) in (block.test_mock or {}).items():\n        log.info(f'{prefix} mocking {mock_name}...')\n        if hasattr(block, mock_name):\n            setattr(block, mock_name, mock_obj)\n        else:\n            log.info(f'{prefix} mock {mock_name} not found in block')\n    extra_exec_kwargs = {}\n    if CREDENTIALS_FIELD_NAME in block.input_schema.model_fields:\n        if not block.test_credentials:\n            raise ValueError(f'{prefix} requires credentials but has no test_credentials')\n        extra_exec_kwargs[CREDENTIALS_FIELD_NAME] = block.test_credentials\n    for input_data in block.test_input:\n        log.info(f'{prefix} in: {input_data}')\n        for (output_name, output_data) in block.execute(input_data, **extra_exec_kwargs):\n            if output_index >= len(block.test_output):\n                raise ValueError(f'{prefix} produced output more than expected')\n            (ex_output_name, ex_output_data) = block.test_output[output_index]\n\n            def compare(data, expected_data):\n                if data == expected_data:\n                    is_matching = True\n                elif isinstance(expected_data, type):\n                    is_matching = isinstance(data, expected_data)\n                elif callable(expected_data):\n                    is_matching = expected_data(data)\n                else:\n                    is_matching = False\n                mark = '\u2705' if is_matching else '\u274c'\n                log.info(f'{prefix} {mark} comparing `{data}` vs `{expected_data}`')\n                if not is_matching:\n                    raise ValueError(f'{prefix}: wrong output {data} vs {expected_data}')\n            compare(output_data, ex_output_data)\n            compare(output_name, ex_output_name)\n            output_index += 1\n    if output_index < len(block.test_output):\n        raise ValueError(f'{prefix} produced output less than expected. output_index={output_index}, len(block.test_output)={len(block.test_output)}')",
                "prefix = f'[Test-{block.name}]'",
                "not block.test_input or not block.test_output"
            ]
        },
        {
            "id": "10",
            "type": "block",
            "statements": [
                "return await AgentServer().test_get_graph_run_node_execution_results(graph_id, graph_exec_id, user_id)"
            ]
        },
        {
            "id": "11",
            "type": "block",
            "statements": []
        },
        {
            "id": "12",
            "type": "block",
            "statements": [
                "time.sleep(1)"
            ]
        },
        {
            "id": "13",
            "type": "block",
            "statements": [
                "log.info(f'{prefix} No test data provided')",
                "return"
            ]
        },
        {
            "id": "14",
            "type": "block",
            "statements": []
        },
        {
            "id": "15",
            "type": "block",
            "statements": [
                "not isinstance(block.test_input, list)"
            ]
        },
        {
            "id": "16",
            "type": "block",
            "statements": [
                "block.test_input = [block.test_input]"
            ]
        },
        {
            "id": "17",
            "type": "block",
            "statements": []
        },
        {
            "id": "18",
            "type": "block",
            "statements": [
                "not isinstance(block.test_output, list)"
            ]
        },
        {
            "id": "19",
            "type": "block",
            "statements": [
                "block.test_output = [block.test_output]"
            ]
        },
        {
            "id": "20",
            "type": "block",
            "statements": []
        },
        {
            "id": "21",
            "type": "block",
            "statements": [
                "output_index = 0",
                "log.info(f'{prefix} Executing {len(block.test_input)} tests...')",
                "prefix = ' ' * 4 + prefix"
            ]
        },
        {
            "id": "22",
            "type": "block",
            "statements": [
                "(mock_name, mock_obj)",
                "(block.test_mock or {}).items()"
            ]
        },
        {
            "id": "23",
            "type": "block",
            "statements": [
                "log.info(f'{prefix} mocking {mock_name}...')",
                "hasattr(block, mock_name)"
            ]
        },
        {
            "id": "24",
            "type": "block",
            "statements": [
                "extra_exec_kwargs = {}",
                "CREDENTIALS_FIELD_NAME In block.input_schema.model_fields"
            ]
        },
        {
            "id": "25",
            "type": "block",
            "statements": [
                "setattr(block, mock_name, mock_obj)"
            ]
        },
        {
            "id": "26",
            "type": "block",
            "statements": [
                "log.info(f'{prefix} mock {mock_name} not found in block')"
            ]
        },
        {
            "id": "27",
            "type": "block",
            "statements": []
        },
        {
            "id": "28",
            "type": "block",
            "statements": [
                "not block.test_credentials"
            ]
        },
        {
            "id": "29",
            "type": "block",
            "statements": []
        },
        {
            "id": "30",
            "type": "block",
            "statements": []
        },
        {
            "id": "31",
            "type": "block",
            "statements": [
                "raise ValueError(f'{prefix} requires credentials but has no test_credentials')"
            ]
        },
        {
            "id": "32",
            "type": "block",
            "statements": []
        },
        {
            "id": "33",
            "type": "block",
            "statements": [
                "extra_exec_kwargs[CREDENTIALS_FIELD_NAME] = block.test_credentials"
            ]
        },
        {
            "id": "34",
            "type": "block",
            "statements": [
                "input_data",
                "block.test_input"
            ]
        },
        {
            "id": "35",
            "type": "block",
            "statements": [
                "log.info(f'{prefix} in: {input_data}')"
            ]
        },
        {
            "id": "36",
            "type": "block",
            "statements": [
                "output_index Lt len(block.test_output)"
            ]
        },
        {
            "id": "37",
            "type": "block",
            "statements": [
                "(output_name, output_data)",
                "block.execute(input_data)"
            ]
        },
        {
            "id": "38",
            "type": "block",
            "statements": [
                "output_index GtE len(block.test_output)"
            ]
        },
        {
            "id": "39",
            "type": "block",
            "statements": []
        },
        {
            "id": "40",
            "type": "block",
            "statements": [
                "raise ValueError(f'{prefix} produced output more than expected')"
            ]
        },
        {
            "id": "41",
            "type": "block",
            "statements": []
        },
        {
            "id": "42",
            "type": "block",
            "statements": [
                "(ex_output_name, ex_output_data) = block.test_output[output_index]",
                "def compare(data, expected_data):\n    if data == expected_data:\n        is_matching = True\n    elif isinstance(expected_data, type):\n        is_matching = isinstance(data, expected_data)\n    elif callable(expected_data):\n        is_matching = expected_data(data)\n    else:\n        is_matching = False\n    mark = '\u2705' if is_matching else '\u274c'\n    log.info(f'{prefix} {mark} comparing `{data}` vs `{expected_data}`')\n    if not is_matching:\n        raise ValueError(f'{prefix}: wrong output {data} vs {expected_data}')",
                "data Eq expected_data"
            ]
        },
        {
            "id": "43",
            "type": "block",
            "statements": [
                "is_matching = True"
            ]
        },
        {
            "id": "44",
            "type": "block",
            "statements": [
                "isinstance(expected_data, type)"
            ]
        },
        {
            "id": "45",
            "type": "block",
            "statements": [
                "mark = '\u2705' if is_matching else '\u274c'",
                "log.info(f'{prefix} {mark} comparing `{data}` vs `{expected_data}`')",
                "not is_matching"
            ]
        },
        {
            "id": "46",
            "type": "block",
            "statements": [
                "is_matching = isinstance(data, expected_data)"
            ]
        },
        {
            "id": "47",
            "type": "block",
            "statements": [
                "callable(expected_data)"
            ]
        },
        {
            "id": "48",
            "type": "block",
            "statements": []
        },
        {
            "id": "49",
            "type": "block",
            "statements": [
                "is_matching = expected_data(data)"
            ]
        },
        {
            "id": "50",
            "type": "block",
            "statements": [
                "is_matching = False"
            ]
        },
        {
            "id": "51",
            "type": "block",
            "statements": []
        },
        {
            "id": "52",
            "type": "block",
            "statements": [
                "raise ValueError(f'{prefix}: wrong output {data} vs {expected_data}')"
            ]
        },
        {
            "id": "53",
            "type": "block",
            "statements": []
        },
        {
            "id": "54",
            "type": "block",
            "statements": [
                "compare(output_data, ex_output_data)",
                "compare(output_name, ex_output_name)",
                "output_index += 1"
            ]
        },
        {
            "id": "55",
            "type": "block",
            "statements": [
                "raise ValueError(f'{prefix} produced output less than expected. output_index={output_index}, len(block.test_output)={len(block.test_output)}')"
            ]
        },
        {
            "id": "56",
            "type": "block",
            "statements": []
        },
        {
            "id": "57",
            "type": "block",
            "statements": []
        }
    ],
    "edges": [
        {
            "source": "3",
            "target": "4",
            "type": "true"
        },
        {
            "source": "3",
            "target": "5",
            "type": "false"
        },
        {
            "source": "4",
            "target": "6",
            "type": "next"
        },
        {
            "source": "5",
            "target": "6",
            "type": "next"
        },
        {
            "source": "7",
            "target": "8",
            "type": "true"
        },
        {
            "source": "7",
            "target": "9",
            "type": "false"
        },
        {
            "source": "8",
            "target": "10",
            "type": "true"
        },
        {
            "source": "8",
            "target": "11",
            "type": "false"
        },
        {
            "source": "9",
            "target": "13",
            "type": "true"
        },
        {
            "source": "9",
            "target": "14",
            "type": "false"
        },
        {
            "source": "11",
            "target": "12",
            "type": "next"
        },
        {
            "source": "12",
            "target": "7",
            "type": "next"
        },
        {
            "source": "14",
            "target": "15",
            "type": "next"
        },
        {
            "source": "15",
            "target": "16",
            "type": "true"
        },
        {
            "source": "15",
            "target": "17",
            "type": "false"
        },
        {
            "source": "16",
            "target": "18",
            "type": "next"
        },
        {
            "source": "17",
            "target": "18",
            "type": "next"
        },
        {
            "source": "18",
            "target": "19",
            "type": "true"
        },
        {
            "source": "18",
            "target": "20",
            "type": "false"
        },
        {
            "source": "19",
            "target": "21",
            "type": "next"
        },
        {
            "source": "20",
            "target": "21",
            "type": "next"
        },
        {
            "source": "21",
            "target": "22",
            "type": "next"
        },
        {
            "source": "22",
            "target": "23",
            "type": "true"
        },
        {
            "source": "22",
            "target": "24",
            "type": "false"
        },
        {
            "source": "23",
            "target": "25",
            "type": "true"
        },
        {
            "source": "23",
            "target": "26",
            "type": "false"
        },
        {
            "source": "24",
            "target": "28",
            "type": "true"
        },
        {
            "source": "24",
            "target": "29",
            "type": "false"
        },
        {
            "source": "25",
            "target": "27",
            "type": "next"
        },
        {
            "source": "26",
            "target": "27",
            "type": "next"
        },
        {
            "source": "27",
            "target": "22",
            "type": "next"
        },
        {
            "source": "28",
            "target": "31",
            "type": "true"
        },
        {
            "source": "28",
            "target": "32",
            "type": "false"
        },
        {
            "source": "29",
            "target": "30",
            "type": "next"
        },
        {
            "source": "30",
            "target": "34",
            "type": "next"
        },
        {
            "source": "31",
            "target": "33",
            "type": "next"
        },
        {
            "source": "32",
            "target": "33",
            "type": "next"
        },
        {
            "source": "33",
            "target": "30",
            "type": "next"
        },
        {
            "source": "34",
            "target": "35",
            "type": "true"
        },
        {
            "source": "34",
            "target": "36",
            "type": "false"
        },
        {
            "source": "35",
            "target": "37",
            "type": "next"
        },
        {
            "source": "36",
            "target": "55",
            "type": "true"
        },
        {
            "source": "36",
            "target": "56",
            "type": "false"
        },
        {
            "source": "37",
            "target": "38",
            "type": "true"
        },
        {
            "source": "37",
            "target": "39",
            "type": "false"
        },
        {
            "source": "38",
            "target": "40",
            "type": "true"
        },
        {
            "source": "38",
            "target": "41",
            "type": "false"
        },
        {
            "source": "39",
            "target": "34",
            "type": "next"
        },
        {
            "source": "40",
            "target": "42",
            "type": "next"
        },
        {
            "source": "41",
            "target": "42",
            "type": "next"
        },
        {
            "source": "42",
            "target": "43",
            "type": "true"
        },
        {
            "source": "42",
            "target": "44",
            "type": "false"
        },
        {
            "source": "43",
            "target": "45",
            "type": "next"
        },
        {
            "source": "44",
            "target": "46",
            "type": "true"
        },
        {
            "source": "44",
            "target": "47",
            "type": "false"
        },
        {
            "source": "45",
            "target": "52",
            "type": "true"
        },
        {
            "source": "45",
            "target": "53",
            "type": "false"
        },
        {
            "source": "46",
            "target": "48",
            "type": "next"
        },
        {
            "source": "47",
            "target": "49",
            "type": "true"
        },
        {
            "source": "47",
            "target": "50",
            "type": "false"
        },
        {
            "source": "48",
            "target": "45",
            "type": "next"
        },
        {
            "source": "49",
            "target": "51",
            "type": "next"
        },
        {
            "source": "50",
            "target": "51",
            "type": "next"
        },
        {
            "source": "51",
            "target": "48",
            "type": "next"
        },
        {
            "source": "52",
            "target": "54",
            "type": "next"
        },
        {
            "source": "53",
            "target": "54",
            "type": "next"
        },
        {
            "source": "54",
            "target": "37",
            "type": "next"
        },
        {
            "source": "55",
            "target": "57",
            "type": "next"
        },
        {
            "source": "56",
            "target": "57",
            "type": "next"
        }
    ]
}