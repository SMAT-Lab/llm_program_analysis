{
    "nodes": [
        {
            "id": "1",
            "type": "block",
            "statements": [
                "def get_1s_count(number: int) -> int:\n    \"\"\"\n    Count the number of set bits in a 32 bit integer using Brian Kernighan's way.\n    Ref - https://graphics.stanford.edu/~seander/bithacks.html#CountBitsSetKernighan\n    >>> get_1s_count(25)\n    3\n    >>> get_1s_count(37)\n    3\n    >>> get_1s_count(21)\n    3\n    >>> get_1s_count(58)\n    4\n    >>> get_1s_count(0)\n    0\n    >>> get_1s_count(256)\n    1\n    >>> get_1s_count(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    >>> get_1s_count(0.8)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    >>> get_1s_count(\"25\")\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    \"\"\"\n    if not isinstance(number, int) or number < 0:\n        raise ValueError('Input must be a non-negative integer')\n    count = 0\n    while number:\n        number &= number - 1\n        count += 1\n    return count",
                "'\\n    Count the number of set bits in a 32 bit integer using Brian Kernighan\\'s way.\\n    Ref - https://graphics.stanford.edu/~seander/bithacks.html#CountBitsSetKernighan\\n    >>> get_1s_count(25)\\n    3\\n    >>> get_1s_count(37)\\n    3\\n    >>> get_1s_count(21)\\n    3\\n    >>> get_1s_count(58)\\n    4\\n    >>> get_1s_count(0)\\n    0\\n    >>> get_1s_count(256)\\n    1\\n    >>> get_1s_count(-1)\\n    Traceback (most recent call last):\\n        ...\\n    ValueError: Input must be a non-negative integer\\n    >>> get_1s_count(0.8)\\n    Traceback (most recent call last):\\n        ...\\n    ValueError: Input must be a non-negative integer\\n    >>> get_1s_count(\"25\")\\n    Traceback (most recent call last):\\n        ...\\n    ValueError: Input must be a non-negative integer\\n    '",
                "not isinstance(number, int) or number < 0"
            ]
        },
        {
            "id": "2",
            "type": "block",
            "statements": [
                "raise ValueError('Input must be a non-negative integer')"
            ]
        },
        {
            "id": "3",
            "type": "block",
            "statements": []
        },
        {
            "id": "4",
            "type": "block",
            "statements": [
                "count = 0"
            ]
        },
        {
            "id": "5",
            "type": "block",
            "statements": [
                "number"
            ]
        },
        {
            "id": "6",
            "type": "block",
            "statements": [
                "number &= number - 1",
                "count += 1"
            ]
        },
        {
            "id": "7",
            "type": "block",
            "statements": [
                "return count"
            ]
        },
        {
            "id": "8",
            "type": "block",
            "statements": [
                "__name__ Eq '__main__'"
            ]
        },
        {
            "id": "9",
            "type": "block",
            "statements": [
                "import doctest",
                "doctest.testmod()"
            ]
        },
        {
            "id": "10",
            "type": "block",
            "statements": []
        },
        {
            "id": "11",
            "type": "block",
            "statements": []
        }
    ],
    "edges": [
        {
            "source": "1",
            "target": "2",
            "type": "true"
        },
        {
            "source": "1",
            "target": "3",
            "type": "false"
        },
        {
            "source": "2",
            "target": "4",
            "type": "next"
        },
        {
            "source": "3",
            "target": "4",
            "type": "next"
        },
        {
            "source": "4",
            "target": "5",
            "type": "next"
        },
        {
            "source": "5",
            "target": "6",
            "type": "true"
        },
        {
            "source": "5",
            "target": "7",
            "type": "false"
        },
        {
            "source": "6",
            "target": "5",
            "type": "next"
        },
        {
            "source": "8",
            "target": "9",
            "type": "true"
        },
        {
            "source": "8",
            "target": "10",
            "type": "false"
        },
        {
            "source": "9",
            "target": "11",
            "type": "next"
        },
        {
            "source": "10",
            "target": "11",
            "type": "next"
        }
    ]
}