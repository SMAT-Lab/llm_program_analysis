{
    "nodes": [
        {
            "id": "1",
            "type": "block",
            "statements": [
                "import uuid",
                "from typing import List",
                "import requests as baserequests",
                "from backend.data.block import BlockOutput, BlockSchema",
                "from backend.data.model import APIKeyCredentials, SchemaField",
                "from backend.util import settings",
                "from backend.util.settings import BehaveAs",
                "from ._api import TEST_CREDENTIALS, TEST_CREDENTIALS_INPUT, CustomerDetails, OrderItem, Slant3DCredentialsField, Slant3DCredentialsInput",
                "from .base import Slant3DBlockBase",
                "class Slant3DCreateOrderBlock(Slant3DBlockBase):\n    \"\"\"Block for creating new orders\"\"\"\n\n    class Input(BlockSchema):\n        credentials: Slant3DCredentialsInput = Slant3DCredentialsField()\n        order_number: str = SchemaField(description='Your custom order number (or leave blank for a random one)', default_factory=lambda : str(uuid.uuid4()))\n        customer: CustomerDetails = SchemaField(description='Customer details for where to ship the item', advanced=False)\n        items: List[OrderItem] = SchemaField(description='List of items to print', advanced=False)\n\n    class Output(BlockSchema):\n        order_id: str = SchemaField(description='Slant3D order ID')\n        error: str = SchemaField(description='Error message if order failed')\n\n    def __init__(self):\n        super().__init__(id='f73007d6-f48f-4aaf-9e6b-6883998a09b4', description='Create a new print order', input_schema=self.Input, output_schema=self.Output, test_input={'credentials': TEST_CREDENTIALS_INPUT, 'order_number': 'TEST-001', 'customer': {'name': 'John Doe', 'email': 'john@example.com', 'phone': '123-456-7890', 'address': '123 Test St', 'city': 'Test City', 'state': 'TS', 'zip': '12345'}, 'items': [{'file_url': 'https://example.com/model.stl', 'quantity': '1', 'color': 'black', 'profile': 'PLA'}]}, test_credentials=TEST_CREDENTIALS, test_output=[('order_id', '314144241')], test_mock={'_make_request': lambda *args, **kwargs: {'orderId': '314144241'}, '_convert_to_color': lambda *args, **kwargs: 'black'})\n\n    def run(self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs) -> BlockOutput:\n        try:\n            order_data = self._format_order_data(input_data.customer, input_data.order_number, input_data.items, credentials.api_key.get_secret_value())\n            result = self._make_request('POST', 'order', credentials.api_key.get_secret_value(), json=order_data)\n            yield ('order_id', result['orderId'])\n        except Exception as e:\n            yield ('error', str(e))\n            raise",
                "'Block for creating new orders'",
                "class Input(BlockSchema):\n    credentials: Slant3DCredentialsInput = Slant3DCredentialsField()\n    order_number: str = SchemaField(description='Your custom order number (or leave blank for a random one)', default_factory=lambda : str(uuid.uuid4()))\n    customer: CustomerDetails = SchemaField(description='Customer details for where to ship the item', advanced=False)\n    items: List[OrderItem] = SchemaField(description='List of items to print', advanced=False)",
                "credentials: Slant3DCredentialsInput = Slant3DCredentialsField()",
                "order_number: str = SchemaField(description='Your custom order number (or leave blank for a random one)', default_factory=lambda : str(uuid.uuid4()))",
                "customer: CustomerDetails = SchemaField(description='Customer details for where to ship the item', advanced=False)",
                "items: List[OrderItem] = SchemaField(description='List of items to print', advanced=False)",
                "class Output(BlockSchema):\n    order_id: str = SchemaField(description='Slant3D order ID')\n    error: str = SchemaField(description='Error message if order failed')",
                "order_id: str = SchemaField(description='Slant3D order ID')",
                "error: str = SchemaField(description='Error message if order failed')",
                "def __init__(self):\n    super().__init__(id='f73007d6-f48f-4aaf-9e6b-6883998a09b4', description='Create a new print order', input_schema=self.Input, output_schema=self.Output, test_input={'credentials': TEST_CREDENTIALS_INPUT, 'order_number': 'TEST-001', 'customer': {'name': 'John Doe', 'email': 'john@example.com', 'phone': '123-456-7890', 'address': '123 Test St', 'city': 'Test City', 'state': 'TS', 'zip': '12345'}, 'items': [{'file_url': 'https://example.com/model.stl', 'quantity': '1', 'color': 'black', 'profile': 'PLA'}]}, test_credentials=TEST_CREDENTIALS, test_output=[('order_id', '314144241')], test_mock={'_make_request': lambda *args, **kwargs: {'orderId': '314144241'}, '_convert_to_color': lambda *args, **kwargs: 'black'})",
                "super().__init__()",
                "def run(self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs) -> BlockOutput:\n    try:\n        order_data = self._format_order_data(input_data.customer, input_data.order_number, input_data.items, credentials.api_key.get_secret_value())\n        result = self._make_request('POST', 'order', credentials.api_key.get_secret_value(), json=order_data)\n        yield ('order_id', result['orderId'])\n    except Exception as e:\n        yield ('error', str(e))\n        raise",
                "try:\n    order_data = self._format_order_data(input_data.customer, input_data.order_number, input_data.items, credentials.api_key.get_secret_value())\n    result = self._make_request('POST', 'order', credentials.api_key.get_secret_value(), json=order_data)\n    yield ('order_id', result['orderId'])\nexcept Exception as e:\n    yield ('error', str(e))\n    raise",
                "order_data = self._format_order_data(input_data.customer, input_data.order_number, input_data.items, credentials.api_key.get_secret_value())",
                "result = self._make_request('POST', 'order', credentials.api_key.get_secret_value(), json=order_data)",
                "(yield ('order_id', result['orderId']))",
                "(yield ('error', str(e)))",
                "raise",
                "class Slant3DEstimateOrderBlock(Slant3DBlockBase):\n    \"\"\"Block for getting order cost estimates\"\"\"\n\n    class Input(BlockSchema):\n        credentials: Slant3DCredentialsInput = Slant3DCredentialsField()\n        order_number: str = SchemaField(description='Your custom order number (or leave blank for a random one)', default_factory=lambda : str(uuid.uuid4()))\n        customer: CustomerDetails = SchemaField(description='Customer details for where to ship the item', advanced=False)\n        items: List[OrderItem] = SchemaField(description='List of items to print', advanced=False)\n\n    class Output(BlockSchema):\n        total_price: float = SchemaField(description='Total price in USD')\n        shipping_cost: float = SchemaField(description='Shipping cost')\n        printing_cost: float = SchemaField(description='Printing cost')\n        error: str = SchemaField(description='Error message if estimation failed')\n\n    def __init__(self):\n        super().__init__(id='bf8823d6-b42a-48c7-b558-d7c117f2ae85', description='Get order cost estimate', input_schema=self.Input, output_schema=self.Output, test_input={'credentials': TEST_CREDENTIALS_INPUT, 'order_number': 'TEST-001', 'customer': {'name': 'John Doe', 'email': 'john@example.com', 'phone': '123-456-7890', 'address': '123 Test St', 'city': 'Test City', 'state': 'TS', 'zip': '12345'}, 'items': [{'file_url': 'https://example.com/model.stl', 'quantity': '1', 'color': 'black', 'profile': 'PLA'}]}, test_credentials=TEST_CREDENTIALS, test_output=[('total_price', 9.31), ('shipping_cost', 5.56), ('printing_cost', 3.75)], test_mock={'_make_request': lambda *args, **kwargs: {'totalPrice': 9.31, 'shippingCost': 5.56, 'printingCost': 3.75}, '_convert_to_color': lambda *args, **kwargs: 'black'})\n\n    def run(self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs) -> BlockOutput:\n        order_data = self._format_order_data(input_data.customer, input_data.order_number, input_data.items, credentials.api_key.get_secret_value())\n        try:\n            result = self._make_request('POST', 'order/estimate', credentials.api_key.get_secret_value(), json=order_data)\n            yield ('total_price', result['totalPrice'])\n            yield ('shipping_cost', result['shippingCost'])\n            yield ('printing_cost', result['printingCost'])\n        except baserequests.HTTPError as e:\n            yield ('error', str(f'Error estimating order: {e} {e.response.text}'))\n            raise",
                "'Block for getting order cost estimates'",
                "class Input(BlockSchema):\n    credentials: Slant3DCredentialsInput = Slant3DCredentialsField()\n    order_number: str = SchemaField(description='Your custom order number (or leave blank for a random one)', default_factory=lambda : str(uuid.uuid4()))\n    customer: CustomerDetails = SchemaField(description='Customer details for where to ship the item', advanced=False)\n    items: List[OrderItem] = SchemaField(description='List of items to print', advanced=False)",
                "credentials: Slant3DCredentialsInput = Slant3DCredentialsField()",
                "order_number: str = SchemaField(description='Your custom order number (or leave blank for a random one)', default_factory=lambda : str(uuid.uuid4()))",
                "customer: CustomerDetails = SchemaField(description='Customer details for where to ship the item', advanced=False)",
                "items: List[OrderItem] = SchemaField(description='List of items to print', advanced=False)",
                "class Output(BlockSchema):\n    total_price: float = SchemaField(description='Total price in USD')\n    shipping_cost: float = SchemaField(description='Shipping cost')\n    printing_cost: float = SchemaField(description='Printing cost')\n    error: str = SchemaField(description='Error message if estimation failed')",
                "total_price: float = SchemaField(description='Total price in USD')",
                "shipping_cost: float = SchemaField(description='Shipping cost')",
                "printing_cost: float = SchemaField(description='Printing cost')",
                "error: str = SchemaField(description='Error message if estimation failed')",
                "def __init__(self):\n    super().__init__(id='bf8823d6-b42a-48c7-b558-d7c117f2ae85', description='Get order cost estimate', input_schema=self.Input, output_schema=self.Output, test_input={'credentials': TEST_CREDENTIALS_INPUT, 'order_number': 'TEST-001', 'customer': {'name': 'John Doe', 'email': 'john@example.com', 'phone': '123-456-7890', 'address': '123 Test St', 'city': 'Test City', 'state': 'TS', 'zip': '12345'}, 'items': [{'file_url': 'https://example.com/model.stl', 'quantity': '1', 'color': 'black', 'profile': 'PLA'}]}, test_credentials=TEST_CREDENTIALS, test_output=[('total_price', 9.31), ('shipping_cost', 5.56), ('printing_cost', 3.75)], test_mock={'_make_request': lambda *args, **kwargs: {'totalPrice': 9.31, 'shippingCost': 5.56, 'printingCost': 3.75}, '_convert_to_color': lambda *args, **kwargs: 'black'})",
                "super().__init__()",
                "def run(self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs) -> BlockOutput:\n    order_data = self._format_order_data(input_data.customer, input_data.order_number, input_data.items, credentials.api_key.get_secret_value())\n    try:\n        result = self._make_request('POST', 'order/estimate', credentials.api_key.get_secret_value(), json=order_data)\n        yield ('total_price', result['totalPrice'])\n        yield ('shipping_cost', result['shippingCost'])\n        yield ('printing_cost', result['printingCost'])\n    except baserequests.HTTPError as e:\n        yield ('error', str(f'Error estimating order: {e} {e.response.text}'))\n        raise",
                "order_data = self._format_order_data(input_data.customer, input_data.order_number, input_data.items, credentials.api_key.get_secret_value())",
                "try:\n    result = self._make_request('POST', 'order/estimate', credentials.api_key.get_secret_value(), json=order_data)\n    yield ('total_price', result['totalPrice'])\n    yield ('shipping_cost', result['shippingCost'])\n    yield ('printing_cost', result['printingCost'])\nexcept baserequests.HTTPError as e:\n    yield ('error', str(f'Error estimating order: {e} {e.response.text}'))\n    raise",
                "result = self._make_request('POST', 'order/estimate', credentials.api_key.get_secret_value(), json=order_data)",
                "(yield ('total_price', result['totalPrice']))",
                "(yield ('shipping_cost', result['shippingCost']))",
                "(yield ('printing_cost', result['printingCost']))",
                "(yield ('error', str(f'Error estimating order: {e} {e.response.text}')))",
                "raise",
                "class Slant3DEstimateShippingBlock(Slant3DBlockBase):\n    \"\"\"Block for getting shipping cost estimates\"\"\"\n\n    class Input(BlockSchema):\n        credentials: Slant3DCredentialsInput = Slant3DCredentialsField()\n        order_number: str = SchemaField(description='Your custom order number (or leave blank for a random one)', default_factory=lambda : str(uuid.uuid4()))\n        customer: CustomerDetails = SchemaField(description='Customer details for where to ship the item')\n        items: List[OrderItem] = SchemaField(description='List of items to print', advanced=False)\n\n    class Output(BlockSchema):\n        shipping_cost: float = SchemaField(description='Estimated shipping cost')\n        currency_code: str = SchemaField(description=\"Currency code (e.g., 'usd')\")\n        error: str = SchemaField(description='Error message if estimation failed')\n\n    def __init__(self):\n        super().__init__(id='00aae2a1-caf6-4a74-8175-39a0615d44e1', description='Get shipping cost estimate', input_schema=self.Input, output_schema=self.Output, test_input={'credentials': TEST_CREDENTIALS_INPUT, 'order_number': 'TEST-001', 'customer': {'name': 'John Doe', 'email': 'john@example.com', 'phone': '123-456-7890', 'address': '123 Test St', 'city': 'Test City', 'state': 'TS', 'zip': '12345'}, 'items': [{'file_url': 'https://example.com/model.stl', 'quantity': '1', 'color': 'black', 'profile': 'PLA'}]}, test_credentials=TEST_CREDENTIALS, test_output=[('shipping_cost', 4.81), ('currency_code', 'usd')], test_mock={'_make_request': lambda *args, **kwargs: {'shippingCost': 4.81, 'currencyCode': 'usd'}, '_convert_to_color': lambda *args, **kwargs: 'black'})\n\n    def run(self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs) -> BlockOutput:\n        try:\n            order_data = self._format_order_data(input_data.customer, input_data.order_number, input_data.items, credentials.api_key.get_secret_value())\n            result = self._make_request('POST', 'order/estimateShipping', credentials.api_key.get_secret_value(), json=order_data)\n            yield ('shipping_cost', result['shippingCost'])\n            yield ('currency_code', result['currencyCode'])\n        except Exception as e:\n            yield ('error', str(e))\n            raise",
                "'Block for getting shipping cost estimates'",
                "class Input(BlockSchema):\n    credentials: Slant3DCredentialsInput = Slant3DCredentialsField()\n    order_number: str = SchemaField(description='Your custom order number (or leave blank for a random one)', default_factory=lambda : str(uuid.uuid4()))\n    customer: CustomerDetails = SchemaField(description='Customer details for where to ship the item')\n    items: List[OrderItem] = SchemaField(description='List of items to print', advanced=False)",
                "credentials: Slant3DCredentialsInput = Slant3DCredentialsField()",
                "order_number: str = SchemaField(description='Your custom order number (or leave blank for a random one)', default_factory=lambda : str(uuid.uuid4()))",
                "customer: CustomerDetails = SchemaField(description='Customer details for where to ship the item')",
                "items: List[OrderItem] = SchemaField(description='List of items to print', advanced=False)",
                "class Output(BlockSchema):\n    shipping_cost: float = SchemaField(description='Estimated shipping cost')\n    currency_code: str = SchemaField(description=\"Currency code (e.g., 'usd')\")\n    error: str = SchemaField(description='Error message if estimation failed')",
                "shipping_cost: float = SchemaField(description='Estimated shipping cost')",
                "currency_code: str = SchemaField(description=\"Currency code (e.g., 'usd')\")",
                "error: str = SchemaField(description='Error message if estimation failed')",
                "def __init__(self):\n    super().__init__(id='00aae2a1-caf6-4a74-8175-39a0615d44e1', description='Get shipping cost estimate', input_schema=self.Input, output_schema=self.Output, test_input={'credentials': TEST_CREDENTIALS_INPUT, 'order_number': 'TEST-001', 'customer': {'name': 'John Doe', 'email': 'john@example.com', 'phone': '123-456-7890', 'address': '123 Test St', 'city': 'Test City', 'state': 'TS', 'zip': '12345'}, 'items': [{'file_url': 'https://example.com/model.stl', 'quantity': '1', 'color': 'black', 'profile': 'PLA'}]}, test_credentials=TEST_CREDENTIALS, test_output=[('shipping_cost', 4.81), ('currency_code', 'usd')], test_mock={'_make_request': lambda *args, **kwargs: {'shippingCost': 4.81, 'currencyCode': 'usd'}, '_convert_to_color': lambda *args, **kwargs: 'black'})",
                "super().__init__()",
                "def run(self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs) -> BlockOutput:\n    try:\n        order_data = self._format_order_data(input_data.customer, input_data.order_number, input_data.items, credentials.api_key.get_secret_value())\n        result = self._make_request('POST', 'order/estimateShipping', credentials.api_key.get_secret_value(), json=order_data)\n        yield ('shipping_cost', result['shippingCost'])\n        yield ('currency_code', result['currencyCode'])\n    except Exception as e:\n        yield ('error', str(e))\n        raise",
                "try:\n    order_data = self._format_order_data(input_data.customer, input_data.order_number, input_data.items, credentials.api_key.get_secret_value())\n    result = self._make_request('POST', 'order/estimateShipping', credentials.api_key.get_secret_value(), json=order_data)\n    yield ('shipping_cost', result['shippingCost'])\n    yield ('currency_code', result['currencyCode'])\nexcept Exception as e:\n    yield ('error', str(e))\n    raise",
                "order_data = self._format_order_data(input_data.customer, input_data.order_number, input_data.items, credentials.api_key.get_secret_value())",
                "result = self._make_request('POST', 'order/estimateShipping', credentials.api_key.get_secret_value(), json=order_data)",
                "(yield ('shipping_cost', result['shippingCost']))",
                "(yield ('currency_code', result['currencyCode']))",
                "(yield ('error', str(e)))",
                "raise",
                "class Slant3DGetOrdersBlock(Slant3DBlockBase):\n    \"\"\"Block for retrieving all orders\"\"\"\n\n    class Input(BlockSchema):\n        credentials: Slant3DCredentialsInput = Slant3DCredentialsField()\n\n    class Output(BlockSchema):\n        orders: List[str] = SchemaField(description='List of orders with their details')\n        error: str = SchemaField(description='Error message if request failed')\n\n    def __init__(self):\n        super().__init__(id='42283bf5-8a32-4fb4-92a2-60a9ea48e105', description='Get all orders for the account', input_schema=self.Input, output_schema=self.Output, disabled=settings.Settings().config.behave_as == BehaveAs.CLOUD, test_input={'credentials': TEST_CREDENTIALS_INPUT}, test_credentials=TEST_CREDENTIALS, test_output=[('orders', ['1234567890'])], test_mock={'_make_request': lambda *args, **kwargs: {'ordersData': [{'orderId': 1234567890, 'orderTimestamp': {'_seconds': 1719510986, '_nanoseconds': 710000000}}]}})\n\n    def run(self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs) -> BlockOutput:\n        try:\n            result = self._make_request('GET', 'order', credentials.api_key.get_secret_value())\n            yield ('orders', [str(order['orderId']) for order in result['ordersData']])\n        except Exception as e:\n            yield ('error', str(e))\n            raise",
                "'Block for retrieving all orders'",
                "class Input(BlockSchema):\n    credentials: Slant3DCredentialsInput = Slant3DCredentialsField()",
                "credentials: Slant3DCredentialsInput = Slant3DCredentialsField()",
                "class Output(BlockSchema):\n    orders: List[str] = SchemaField(description='List of orders with their details')\n    error: str = SchemaField(description='Error message if request failed')",
                "orders: List[str] = SchemaField(description='List of orders with their details')",
                "error: str = SchemaField(description='Error message if request failed')",
                "def __init__(self):\n    super().__init__(id='42283bf5-8a32-4fb4-92a2-60a9ea48e105', description='Get all orders for the account', input_schema=self.Input, output_schema=self.Output, disabled=settings.Settings().config.behave_as == BehaveAs.CLOUD, test_input={'credentials': TEST_CREDENTIALS_INPUT}, test_credentials=TEST_CREDENTIALS, test_output=[('orders', ['1234567890'])], test_mock={'_make_request': lambda *args, **kwargs: {'ordersData': [{'orderId': 1234567890, 'orderTimestamp': {'_seconds': 1719510986, '_nanoseconds': 710000000}}]}})",
                "super().__init__()",
                "def run(self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs) -> BlockOutput:\n    try:\n        result = self._make_request('GET', 'order', credentials.api_key.get_secret_value())\n        yield ('orders', [str(order['orderId']) for order in result['ordersData']])\n    except Exception as e:\n        yield ('error', str(e))\n        raise",
                "try:\n    result = self._make_request('GET', 'order', credentials.api_key.get_secret_value())\n    yield ('orders', [str(order['orderId']) for order in result['ordersData']])\nexcept Exception as e:\n    yield ('error', str(e))\n    raise",
                "result = self._make_request('GET', 'order', credentials.api_key.get_secret_value())",
                "(yield ('orders', [str(order['orderId']) for order in result['ordersData']]))",
                "(yield ('error', str(e)))",
                "raise",
                "class Slant3DTrackingBlock(Slant3DBlockBase):\n    \"\"\"Block for tracking order status and shipping\"\"\"\n\n    class Input(BlockSchema):\n        credentials: Slant3DCredentialsInput = Slant3DCredentialsField()\n        order_id: str = SchemaField(description='Slant3D order ID to track')\n\n    class Output(BlockSchema):\n        status: str = SchemaField(description='Order status')\n        tracking_numbers: List[str] = SchemaField(description='List of tracking numbers')\n        error: str = SchemaField(description='Error message if tracking failed')\n\n    def __init__(self):\n        super().__init__(id='dd7c0293-c5af-4551-ba3e-fc162fb1fb89', description='Track order status and shipping', input_schema=self.Input, output_schema=self.Output, test_input={'credentials': TEST_CREDENTIALS_INPUT, 'order_id': '314144241'}, test_credentials=TEST_CREDENTIALS, test_output=[('status', 'awaiting_shipment'), ('tracking_numbers', [])], test_mock={'_make_request': lambda *args, **kwargs: {'status': 'awaiting_shipment', 'trackingNumbers': []}})\n\n    def run(self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs) -> BlockOutput:\n        try:\n            result = self._make_request('GET', f'order/{input_data.order_id}/get-tracking', credentials.api_key.get_secret_value())\n            yield ('status', result['status'])\n            yield ('tracking_numbers', result['trackingNumbers'])\n        except Exception as e:\n            yield ('error', str(e))\n            raise",
                "'Block for tracking order status and shipping'",
                "class Input(BlockSchema):\n    credentials: Slant3DCredentialsInput = Slant3DCredentialsField()\n    order_id: str = SchemaField(description='Slant3D order ID to track')",
                "credentials: Slant3DCredentialsInput = Slant3DCredentialsField()",
                "order_id: str = SchemaField(description='Slant3D order ID to track')",
                "class Output(BlockSchema):\n    status: str = SchemaField(description='Order status')\n    tracking_numbers: List[str] = SchemaField(description='List of tracking numbers')\n    error: str = SchemaField(description='Error message if tracking failed')",
                "status: str = SchemaField(description='Order status')",
                "tracking_numbers: List[str] = SchemaField(description='List of tracking numbers')",
                "error: str = SchemaField(description='Error message if tracking failed')",
                "def __init__(self):\n    super().__init__(id='dd7c0293-c5af-4551-ba3e-fc162fb1fb89', description='Track order status and shipping', input_schema=self.Input, output_schema=self.Output, test_input={'credentials': TEST_CREDENTIALS_INPUT, 'order_id': '314144241'}, test_credentials=TEST_CREDENTIALS, test_output=[('status', 'awaiting_shipment'), ('tracking_numbers', [])], test_mock={'_make_request': lambda *args, **kwargs: {'status': 'awaiting_shipment', 'trackingNumbers': []}})",
                "super().__init__()",
                "def run(self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs) -> BlockOutput:\n    try:\n        result = self._make_request('GET', f'order/{input_data.order_id}/get-tracking', credentials.api_key.get_secret_value())\n        yield ('status', result['status'])\n        yield ('tracking_numbers', result['trackingNumbers'])\n    except Exception as e:\n        yield ('error', str(e))\n        raise",
                "try:\n    result = self._make_request('GET', f'order/{input_data.order_id}/get-tracking', credentials.api_key.get_secret_value())\n    yield ('status', result['status'])\n    yield ('tracking_numbers', result['trackingNumbers'])\nexcept Exception as e:\n    yield ('error', str(e))\n    raise",
                "result = self._make_request('GET', f'order/{input_data.order_id}/get-tracking', credentials.api_key.get_secret_value())",
                "(yield ('status', result['status']))",
                "(yield ('tracking_numbers', result['trackingNumbers']))",
                "(yield ('error', str(e)))",
                "raise",
                "class Slant3DCancelOrderBlock(Slant3DBlockBase):\n    \"\"\"Block for canceling orders\"\"\"\n\n    class Input(BlockSchema):\n        credentials: Slant3DCredentialsInput = Slant3DCredentialsField()\n        order_id: str = SchemaField(description='Slant3D order ID to cancel')\n\n    class Output(BlockSchema):\n        status: str = SchemaField(description='Cancellation status message')\n        error: str = SchemaField(description='Error message if cancellation failed')\n\n    def __init__(self):\n        super().__init__(id='54de35e1-407f-450b-b5fa-3b5e2eba8185', description='Cancel an existing order', input_schema=self.Input, output_schema=self.Output, test_input={'credentials': TEST_CREDENTIALS_INPUT, 'order_id': '314144241'}, test_credentials=TEST_CREDENTIALS, test_output=[('status', 'Order cancelled')], test_mock={'_make_request': lambda *args, **kwargs: {'status': 'Order cancelled'}})\n\n    def run(self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs) -> BlockOutput:\n        try:\n            result = self._make_request('DELETE', f'order/{input_data.order_id}', credentials.api_key.get_secret_value())\n            yield ('status', result['status'])\n        except Exception as e:\n            yield ('error', str(e))\n            raise",
                "'Block for canceling orders'",
                "class Input(BlockSchema):\n    credentials: Slant3DCredentialsInput = Slant3DCredentialsField()\n    order_id: str = SchemaField(description='Slant3D order ID to cancel')",
                "credentials: Slant3DCredentialsInput = Slant3DCredentialsField()",
                "order_id: str = SchemaField(description='Slant3D order ID to cancel')",
                "class Output(BlockSchema):\n    status: str = SchemaField(description='Cancellation status message')\n    error: str = SchemaField(description='Error message if cancellation failed')",
                "status: str = SchemaField(description='Cancellation status message')",
                "error: str = SchemaField(description='Error message if cancellation failed')",
                "def __init__(self):\n    super().__init__(id='54de35e1-407f-450b-b5fa-3b5e2eba8185', description='Cancel an existing order', input_schema=self.Input, output_schema=self.Output, test_input={'credentials': TEST_CREDENTIALS_INPUT, 'order_id': '314144241'}, test_credentials=TEST_CREDENTIALS, test_output=[('status', 'Order cancelled')], test_mock={'_make_request': lambda *args, **kwargs: {'status': 'Order cancelled'}})",
                "super().__init__()",
                "def run(self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs) -> BlockOutput:\n    try:\n        result = self._make_request('DELETE', f'order/{input_data.order_id}', credentials.api_key.get_secret_value())\n        yield ('status', result['status'])\n    except Exception as e:\n        yield ('error', str(e))\n        raise",
                "try:\n    result = self._make_request('DELETE', f'order/{input_data.order_id}', credentials.api_key.get_secret_value())\n    yield ('status', result['status'])\nexcept Exception as e:\n    yield ('error', str(e))\n    raise",
                "result = self._make_request('DELETE', f'order/{input_data.order_id}', credentials.api_key.get_secret_value())",
                "(yield ('status', result['status']))",
                "(yield ('error', str(e)))",
                "raise"
            ]
        }
    ],
    "edges": []
}