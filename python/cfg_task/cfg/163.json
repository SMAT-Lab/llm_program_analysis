{
    "nodes": [
        {
            "id": "1",
            "type": "block",
            "statements": [
                "class PagesDataStore(object):\n\n    def __init__(self, db):\n        self.db = db\n        pass\n\n    def add_link_to_crawl(self, url):\n        \"\"\"Add the given link to `links_to_crawl`.\"\"\"\n        pass\n\n    def remove_link_to_crawl(self, url):\n        \"\"\"Remove the given link from `links_to_crawl`.\"\"\"\n        pass\n\n    def reduce_priority_link_to_crawl(self, url):\n        \"\"\"Reduce the priority of a link in `links_to_crawl` to avoid cycles.\"\"\"\n        pass\n\n    def extract_max_priority_page(self):\n        \"\"\"Return the highest priority link in `links_to_crawl`.\"\"\"\n        pass\n\n    def insert_crawled_link(self, url, signature):\n        \"\"\"Add the given link to `crawled_links`.\"\"\"\n        pass\n\n    def crawled_similar(self, signature):\n        \"\"\"Determine if we've already crawled a page matching the given signature\"\"\"\n        pass",
                "def __init__(self, db):\n    self.db = db\n    pass",
                "self.db = db",
                "pass",
                "def add_link_to_crawl(self, url):\n    \"\"\"Add the given link to `links_to_crawl`.\"\"\"\n    pass",
                "'Add the given link to `links_to_crawl`.'",
                "pass",
                "def remove_link_to_crawl(self, url):\n    \"\"\"Remove the given link from `links_to_crawl`.\"\"\"\n    pass",
                "'Remove the given link from `links_to_crawl`.'",
                "pass",
                "def reduce_priority_link_to_crawl(self, url):\n    \"\"\"Reduce the priority of a link in `links_to_crawl` to avoid cycles.\"\"\"\n    pass",
                "'Reduce the priority of a link in `links_to_crawl` to avoid cycles.'",
                "pass",
                "def extract_max_priority_page(self):\n    \"\"\"Return the highest priority link in `links_to_crawl`.\"\"\"\n    pass",
                "'Return the highest priority link in `links_to_crawl`.'",
                "pass",
                "def insert_crawled_link(self, url, signature):\n    \"\"\"Add the given link to `crawled_links`.\"\"\"\n    pass",
                "'Add the given link to `crawled_links`.'",
                "pass",
                "def crawled_similar(self, signature):\n    \"\"\"Determine if we've already crawled a page matching the given signature\"\"\"\n    pass",
                "\"Determine if we've already crawled a page matching the given signature\"",
                "pass",
                "class Page(object):\n\n    def __init__(self, url, contents, child_urls):\n        self.url = url\n        self.contents = contents\n        self.child_urls = child_urls\n        self.signature = self.create_signature()\n\n    def create_signature(self):\n        pass",
                "def __init__(self, url, contents, child_urls):\n    self.url = url\n    self.contents = contents\n    self.child_urls = child_urls\n    self.signature = self.create_signature()",
                "self.url = url",
                "self.contents = contents",
                "self.child_urls = child_urls",
                "self.signature = self.create_signature()",
                "def create_signature(self):\n    pass",
                "pass",
                "class Crawler(object):\n\n    def __init__(self, pages, data_store, reverse_index_queue, doc_index_queue):\n        self.pages = pages\n        self.data_store = data_store\n        self.reverse_index_queue = reverse_index_queue\n        self.doc_index_queue = doc_index_queue\n\n    def crawl_page(self, page):\n        for url in page.child_urls:\n            self.data_store.add_link_to_crawl(url)\n        self.reverse_index_queue.generate(page)\n        self.doc_index_queue.generate(page)\n        self.data_store.remove_link_to_crawl(page.url)\n        self.data_store.insert_crawled_link(page.url, page.signature)\n\n    def crawl(self):\n        while True:\n            page = self.data_store.extract_max_priority_page()\n            if page is None:\n                break\n            if self.data_store.crawled_similar(page.signature):\n                self.data_store.reduce_priority_link_to_crawl(page.url)\n            else:\n                self.crawl_page(page)\n            page = self.data_store.extract_max_priority_page()",
                "def __init__(self, pages, data_store, reverse_index_queue, doc_index_queue):\n    self.pages = pages\n    self.data_store = data_store\n    self.reverse_index_queue = reverse_index_queue\n    self.doc_index_queue = doc_index_queue",
                "self.pages = pages",
                "self.data_store = data_store",
                "self.reverse_index_queue = reverse_index_queue",
                "self.doc_index_queue = doc_index_queue",
                "def crawl_page(self, page):\n    for url in page.child_urls:\n        self.data_store.add_link_to_crawl(url)\n    self.reverse_index_queue.generate(page)\n    self.doc_index_queue.generate(page)\n    self.data_store.remove_link_to_crawl(page.url)\n    self.data_store.insert_crawled_link(page.url, page.signature)"
            ]
        },
        {
            "id": "2",
            "type": "block",
            "statements": [
                "url",
                "page.child_urls"
            ]
        },
        {
            "id": "3",
            "type": "block",
            "statements": [
                "self.data_store.add_link_to_crawl(url)"
            ]
        },
        {
            "id": "4",
            "type": "block",
            "statements": [
                "self.reverse_index_queue.generate(page)",
                "self.doc_index_queue.generate(page)",
                "self.data_store.remove_link_to_crawl(page.url)",
                "self.data_store.insert_crawled_link(page.url, page.signature)",
                "def crawl(self):\n    while True:\n        page = self.data_store.extract_max_priority_page()\n        if page is None:\n            break\n        if self.data_store.crawled_similar(page.signature):\n            self.data_store.reduce_priority_link_to_crawl(page.url)\n        else:\n            self.crawl_page(page)\n        page = self.data_store.extract_max_priority_page()"
            ]
        },
        {
            "id": "5",
            "type": "block",
            "statements": [
                "True"
            ]
        },
        {
            "id": "6",
            "type": "block",
            "statements": [
                "page = self.data_store.extract_max_priority_page()",
                "page Is None"
            ]
        },
        {
            "id": "7",
            "type": "block",
            "statements": []
        },
        {
            "id": "8",
            "type": "block",
            "statements": [
                "break"
            ]
        },
        {
            "id": "9",
            "type": "block",
            "statements": []
        },
        {
            "id": "10",
            "type": "block",
            "statements": [
                "self.data_store.crawled_similar(page.signature)"
            ]
        },
        {
            "id": "11",
            "type": "block",
            "statements": [
                "self.data_store.reduce_priority_link_to_crawl(page.url)"
            ]
        },
        {
            "id": "12",
            "type": "block",
            "statements": [
                "self.crawl_page(page)"
            ]
        },
        {
            "id": "13",
            "type": "block",
            "statements": [
                "page = self.data_store.extract_max_priority_page()"
            ]
        }
    ],
    "edges": [
        {
            "source": "1",
            "target": "2",
            "type": "next"
        },
        {
            "source": "2",
            "target": "3",
            "type": "true"
        },
        {
            "source": "2",
            "target": "4",
            "type": "false"
        },
        {
            "source": "3",
            "target": "2",
            "type": "next"
        },
        {
            "source": "4",
            "target": "5",
            "type": "next"
        },
        {
            "source": "5",
            "target": "6",
            "type": "true"
        },
        {
            "source": "5",
            "target": "7",
            "type": "false"
        },
        {
            "source": "6",
            "target": "8",
            "type": "true"
        },
        {
            "source": "6",
            "target": "9",
            "type": "false"
        },
        {
            "source": "8",
            "target": "10",
            "type": "next"
        },
        {
            "source": "9",
            "target": "10",
            "type": "next"
        },
        {
            "source": "10",
            "target": "11",
            "type": "true"
        },
        {
            "source": "10",
            "target": "12",
            "type": "false"
        },
        {
            "source": "11",
            "target": "13",
            "type": "next"
        },
        {
            "source": "12",
            "target": "13",
            "type": "next"
        },
        {
            "source": "13",
            "target": "5",
            "type": "next"
        }
    ]
}