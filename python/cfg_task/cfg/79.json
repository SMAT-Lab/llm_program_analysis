{
    "nodes": [
        {
            "id": "1",
            "type": "block",
            "statements": [
                "def binary_and(a: int, b: int) -> str:\n    \"\"\"\n    Take in 2 integers, convert them to binary,\n    return a binary number that is the\n    result of a binary and operation on the integers provided.\n\n    >>> binary_and(25, 32)\n    '0b000000'\n    >>> binary_and(37, 50)\n    '0b100000'\n    >>> binary_and(21, 30)\n    '0b10100'\n    >>> binary_and(58, 73)\n    '0b0001000'\n    >>> binary_and(0, 255)\n    '0b00000000'\n    >>> binary_and(256, 256)\n    '0b100000000'\n    >>> binary_and(0, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: the value of both inputs must be positive\n    >>> binary_and(0, 1.1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Unknown format code 'b' for object of type 'float'\n    >>> binary_and(\"0\", \"1\")\n    Traceback (most recent call last):\n        ...\n    TypeError: '<' not supported between instances of 'str' and 'int'\n    \"\"\"\n    if a < 0 or b < 0:\n        raise ValueError('the value of both inputs must be positive')\n    a_binary = format(a, 'b')\n    b_binary = format(b, 'b')\n    max_len = max(len(a_binary), len(b_binary))\n    return '0b' + ''.join((str(int(char_a == '1' and char_b == '1')) for (char_a, char_b) in zip(a_binary.zfill(max_len), b_binary.zfill(max_len))))",
                "'\\n    Take in 2 integers, convert them to binary,\\n    return a binary number that is the\\n    result of a binary and operation on the integers provided.\\n\\n    >>> binary_and(25, 32)\\n    \\'0b000000\\'\\n    >>> binary_and(37, 50)\\n    \\'0b100000\\'\\n    >>> binary_and(21, 30)\\n    \\'0b10100\\'\\n    >>> binary_and(58, 73)\\n    \\'0b0001000\\'\\n    >>> binary_and(0, 255)\\n    \\'0b00000000\\'\\n    >>> binary_and(256, 256)\\n    \\'0b100000000\\'\\n    >>> binary_and(0, -1)\\n    Traceback (most recent call last):\\n        ...\\n    ValueError: the value of both inputs must be positive\\n    >>> binary_and(0, 1.1)\\n    Traceback (most recent call last):\\n        ...\\n    ValueError: Unknown format code \\'b\\' for object of type \\'float\\'\\n    >>> binary_and(\"0\", \"1\")\\n    Traceback (most recent call last):\\n        ...\\n    TypeError: \\'<\\' not supported between instances of \\'str\\' and \\'int\\'\\n    '",
                "a < 0 or b < 0"
            ]
        },
        {
            "id": "2",
            "type": "block",
            "statements": [
                "raise ValueError('the value of both inputs must be positive')"
            ]
        },
        {
            "id": "3",
            "type": "block",
            "statements": []
        },
        {
            "id": "4",
            "type": "block",
            "statements": [
                "a_binary = format(a, 'b')",
                "b_binary = format(b, 'b')",
                "max_len = max(len(a_binary), len(b_binary))",
                "return '0b' + ''.join((str(int(char_a == '1' and char_b == '1')) for (char_a, char_b) in zip(a_binary.zfill(max_len), b_binary.zfill(max_len))))"
            ]
        },
        {
            "id": "5",
            "type": "block",
            "statements": [
                "__name__ Eq '__main__'"
            ]
        },
        {
            "id": "6",
            "type": "block",
            "statements": [
                "import doctest",
                "doctest.testmod()"
            ]
        },
        {
            "id": "7",
            "type": "block",
            "statements": []
        },
        {
            "id": "8",
            "type": "block",
            "statements": []
        }
    ],
    "edges": [
        {
            "source": "1",
            "target": "2",
            "type": "true"
        },
        {
            "source": "1",
            "target": "3",
            "type": "false"
        },
        {
            "source": "2",
            "target": "4",
            "type": "next"
        },
        {
            "source": "3",
            "target": "4",
            "type": "next"
        },
        {
            "source": "5",
            "target": "6",
            "type": "true"
        },
        {
            "source": "5",
            "target": "7",
            "type": "false"
        },
        {
            "source": "6",
            "target": "8",
            "type": "next"
        },
        {
            "source": "7",
            "target": "8",
            "type": "next"
        }
    ]
}