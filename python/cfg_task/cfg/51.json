{
    "nodes": [
        {
            "id": "1",
            "type": "block",
            "statements": [
                "'\\nIn the Combination Sum problem, we are given a list consisting of distinct integers.\\nWe need to find all the combinations whose sum equals to target given.\\nWe can use an element more than one.\\n\\nTime complexity(Average Case): O(n!)\\n\\nConstraints:\\n1 <= candidates.length <= 30\\n2 <= candidates[i] <= 40\\nAll elements of candidates are distinct.\\n1 <= target <= 40\\n'",
                "def backtrack(candidates: list, path: list, answer: list, target: int, previous_index: int) -> None:\n    \"\"\"\n    A recursive function that searches for possible combinations. Backtracks in case\n    of a bigger current combination value than the target value.\n\n    Parameters\n    ----------\n    previous_index: Last index from the previous search\n    target: The value we need to obtain by summing our integers in the path list.\n    answer: A list of possible combinations\n    path: Current combination\n    candidates: A list of integers we can use.\n    \"\"\"\n    if target == 0:\n        answer.append(path.copy())\n    else:\n        for index in range(previous_index, len(candidates)):\n            if target >= candidates[index]:\n                path.append(candidates[index])\n                backtrack(candidates, path, answer, target - candidates[index], index)\n                path.pop(len(path) - 1)",
                "'\\n    A recursive function that searches for possible combinations. Backtracks in case\\n    of a bigger current combination value than the target value.\\n\\n    Parameters\\n    ----------\\n    previous_index: Last index from the previous search\\n    target: The value we need to obtain by summing our integers in the path list.\\n    answer: A list of possible combinations\\n    path: Current combination\\n    candidates: A list of integers we can use.\\n    '",
                "target Eq 0"
            ]
        },
        {
            "id": "2",
            "type": "block",
            "statements": [
                "answer.append(path.copy())"
            ]
        },
        {
            "id": "3",
            "type": "block",
            "statements": []
        },
        {
            "id": "4",
            "type": "block",
            "statements": [
                "def combination_sum(candidates: list, target: int) -> list:\n    \"\"\"\n    >>> combination_sum([2, 3, 5], 8)\n    [[2, 2, 2, 2], [2, 3, 3], [3, 5]]\n    >>> combination_sum([2, 3, 6, 7], 7)\n    [[2, 2, 3], [7]]\n    >>> combination_sum([-8, 2.3, 0], 1)\n    Traceback (most recent call last):\n        ...\n    RecursionError: maximum recursion depth exceeded\n    \"\"\"\n    path = []\n    answer = []\n    backtrack(candidates, path, answer, target, 0)\n    return answer",
                "'\\n    >>> combination_sum([2, 3, 5], 8)\\n    [[2, 2, 2, 2], [2, 3, 3], [3, 5]]\\n    >>> combination_sum([2, 3, 6, 7], 7)\\n    [[2, 2, 3], [7]]\\n    >>> combination_sum([-8, 2.3, 0], 1)\\n    Traceback (most recent call last):\\n        ...\\n    RecursionError: maximum recursion depth exceeded\\n    '",
                "path = []",
                "answer = []",
                "backtrack(candidates, path, answer, target, 0)",
                "return answer"
            ]
        },
        {
            "id": "5",
            "type": "block",
            "statements": [
                "index",
                "range(previous_index, len(candidates))"
            ]
        },
        {
            "id": "6",
            "type": "block",
            "statements": [
                "target GtE candidates[index]"
            ]
        },
        {
            "id": "7",
            "type": "block",
            "statements": []
        },
        {
            "id": "8",
            "type": "block",
            "statements": [
                "path.append(candidates[index])",
                "backtrack(candidates, path, answer, target Sub candidates[index], index)",
                "path.pop(len(path) Sub 1)"
            ]
        },
        {
            "id": "9",
            "type": "block",
            "statements": []
        },
        {
            "id": "10",
            "type": "block",
            "statements": []
        },
        {
            "id": "11",
            "type": "block",
            "statements": [
                "def main() -> None:\n    print(combination_sum([-8, 2.3, 0], 1))",
                "print(combination_sum([-8, 2.3, 0], 1))",
                "__name__ Eq '__main__'"
            ]
        },
        {
            "id": "12",
            "type": "block",
            "statements": [
                "import doctest",
                "doctest.testmod()",
                "main()"
            ]
        },
        {
            "id": "13",
            "type": "block",
            "statements": []
        },
        {
            "id": "14",
            "type": "block",
            "statements": []
        }
    ],
    "edges": [
        {
            "source": "1",
            "target": "2",
            "type": "true"
        },
        {
            "source": "1",
            "target": "3",
            "type": "false"
        },
        {
            "source": "2",
            "target": "4",
            "type": "next"
        },
        {
            "source": "3",
            "target": "5",
            "type": "next"
        },
        {
            "source": "5",
            "target": "6",
            "type": "true"
        },
        {
            "source": "5",
            "target": "7",
            "type": "false"
        },
        {
            "source": "6",
            "target": "8",
            "type": "true"
        },
        {
            "source": "6",
            "target": "9",
            "type": "false"
        },
        {
            "source": "7",
            "target": "4",
            "type": "next"
        },
        {
            "source": "8",
            "target": "10",
            "type": "next"
        },
        {
            "source": "9",
            "target": "10",
            "type": "next"
        },
        {
            "source": "10",
            "target": "5",
            "type": "next"
        },
        {
            "source": "11",
            "target": "12",
            "type": "true"
        },
        {
            "source": "11",
            "target": "13",
            "type": "false"
        },
        {
            "source": "12",
            "target": "14",
            "type": "next"
        },
        {
            "source": "13",
            "target": "14",
            "type": "next"
        }
    ]
}