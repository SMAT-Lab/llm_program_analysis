{
    "nodes": [
        {
            "id": "1",
            "type": "block",
            "statements": [
                "import time",
                "from datetime import datetime, timedelta, timezone",
                "from typing import Any",
                "import feedparser",
                "import pydantic",
                "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema",
                "from backend.data.model import SchemaField",
                "class RSSEntry(pydantic.BaseModel):\n    title: str\n    link: str\n    description: str\n    pub_date: datetime\n    author: str\n    categories: list[str]",
                "title: str",
                "link: str",
                "description: str",
                "pub_date: datetime",
                "author: str",
                "categories: list[str]",
                "class ReadRSSFeedBlock(Block):\n\n    class Input(BlockSchema):\n        rss_url: str = SchemaField(description='The URL of the RSS feed to read', placeholder='https://example.com/rss')\n        time_period: int = SchemaField(description='The time period to check in minutes relative to the run block runtime, e.g. 60 would check for new entries in the last hour.', placeholder='1440', default=1440)\n        polling_rate: int = SchemaField(description='The number of seconds to wait between polling attempts.', placeholder='300')\n        run_continuously: bool = SchemaField(description='Whether to run the block continuously or just once.', default=True)\n\n    class Output(BlockSchema):\n        entry: RSSEntry = SchemaField(description='The RSS item')\n\n    def __init__(self):\n        super().__init__(id='5ebe6768-8e5d-41e3-9134-1c7bd89a8d52', input_schema=ReadRSSFeedBlock.Input, output_schema=ReadRSSFeedBlock.Output, description='Reads RSS feed entries from a given URL.', categories={BlockCategory.INPUT}, test_input={'rss_url': 'https://example.com/rss', 'time_period': 10000000, 'polling_rate': 1, 'run_continuously': False}, test_output=[('entry', RSSEntry(title='Example RSS Item', link='https://example.com/article', description='This is an example RSS item description.', pub_date=datetime(2023, 6, 23, 12, 30, 0, tzinfo=timezone.utc), author='John Doe', categories=['Technology', 'News']))], test_mock={'parse_feed': lambda *args, **kwargs: {'entries': [{'title': 'Example RSS Item', 'link': 'https://example.com/article', 'summary': 'This is an example RSS item description.', 'published_parsed': (2023, 6, 23, 12, 30, 0, 4, 174, 0), 'author': 'John Doe', 'tags': [{'term': 'Technology'}, {'term': 'News'}]}]}})\n\n    @staticmethod\n    def parse_feed(url: str) -> dict[str, Any]:\n        return feedparser.parse(url)\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        keep_going = True\n        start_time = datetime.now(timezone.utc) - timedelta(minutes=input_data.time_period)\n        while keep_going:\n            keep_going = input_data.run_continuously\n            feed = self.parse_feed(input_data.rss_url)\n            for entry in feed['entries']:\n                pub_date = datetime(*entry['published_parsed'][:6], tzinfo=timezone.utc)\n                if pub_date > start_time:\n                    yield ('entry', RSSEntry(title=entry['title'], link=entry['link'], description=entry.get('summary', ''), pub_date=pub_date, author=entry.get('author', ''), categories=[tag['term'] for tag in entry.get('tags', [])]))\n            time.sleep(input_data.polling_rate)",
                "class Input(BlockSchema):\n    rss_url: str = SchemaField(description='The URL of the RSS feed to read', placeholder='https://example.com/rss')\n    time_period: int = SchemaField(description='The time period to check in minutes relative to the run block runtime, e.g. 60 would check for new entries in the last hour.', placeholder='1440', default=1440)\n    polling_rate: int = SchemaField(description='The number of seconds to wait between polling attempts.', placeholder='300')\n    run_continuously: bool = SchemaField(description='Whether to run the block continuously or just once.', default=True)",
                "rss_url: str = SchemaField(description='The URL of the RSS feed to read', placeholder='https://example.com/rss')",
                "time_period: int = SchemaField(description='The time period to check in minutes relative to the run block runtime, e.g. 60 would check for new entries in the last hour.', placeholder='1440', default=1440)",
                "polling_rate: int = SchemaField(description='The number of seconds to wait between polling attempts.', placeholder='300')",
                "run_continuously: bool = SchemaField(description='Whether to run the block continuously or just once.', default=True)",
                "class Output(BlockSchema):\n    entry: RSSEntry = SchemaField(description='The RSS item')",
                "entry: RSSEntry = SchemaField(description='The RSS item')",
                "def __init__(self):\n    super().__init__(id='5ebe6768-8e5d-41e3-9134-1c7bd89a8d52', input_schema=ReadRSSFeedBlock.Input, output_schema=ReadRSSFeedBlock.Output, description='Reads RSS feed entries from a given URL.', categories={BlockCategory.INPUT}, test_input={'rss_url': 'https://example.com/rss', 'time_period': 10000000, 'polling_rate': 1, 'run_continuously': False}, test_output=[('entry', RSSEntry(title='Example RSS Item', link='https://example.com/article', description='This is an example RSS item description.', pub_date=datetime(2023, 6, 23, 12, 30, 0, tzinfo=timezone.utc), author='John Doe', categories=['Technology', 'News']))], test_mock={'parse_feed': lambda *args, **kwargs: {'entries': [{'title': 'Example RSS Item', 'link': 'https://example.com/article', 'summary': 'This is an example RSS item description.', 'published_parsed': (2023, 6, 23, 12, 30, 0, 4, 174, 0), 'author': 'John Doe', 'tags': [{'term': 'Technology'}, {'term': 'News'}]}]}})",
                "super().__init__()",
                "@staticmethod\ndef parse_feed(url: str) -> dict[str, Any]:\n    return feedparser.parse(url)",
                "return feedparser.parse(url)"
            ]
        },
        {
            "id": "2",
            "type": "block",
            "statements": [
                "def run(self, input_data: Input, **kwargs) -> BlockOutput:\n    keep_going = True\n    start_time = datetime.now(timezone.utc) - timedelta(minutes=input_data.time_period)\n    while keep_going:\n        keep_going = input_data.run_continuously\n        feed = self.parse_feed(input_data.rss_url)\n        for entry in feed['entries']:\n            pub_date = datetime(*entry['published_parsed'][:6], tzinfo=timezone.utc)\n            if pub_date > start_time:\n                yield ('entry', RSSEntry(title=entry['title'], link=entry['link'], description=entry.get('summary', ''), pub_date=pub_date, author=entry.get('author', ''), categories=[tag['term'] for tag in entry.get('tags', [])]))\n        time.sleep(input_data.polling_rate)",
                "keep_going = True",
                "start_time = datetime.now(timezone.utc) - timedelta(minutes=input_data.time_period)"
            ]
        },
        {
            "id": "3",
            "type": "block",
            "statements": [
                "keep_going"
            ]
        },
        {
            "id": "4",
            "type": "block",
            "statements": [
                "keep_going = input_data.run_continuously",
                "feed = self.parse_feed(input_data.rss_url)"
            ]
        },
        {
            "id": "5",
            "type": "block",
            "statements": []
        },
        {
            "id": "6",
            "type": "block",
            "statements": [
                "entry",
                "feed['entries']"
            ]
        },
        {
            "id": "7",
            "type": "block",
            "statements": [
                "pub_date = datetime(*entry['published_parsed'][:6], tzinfo=timezone.utc)",
                "pub_date Gt start_time"
            ]
        },
        {
            "id": "8",
            "type": "block",
            "statements": [
                "time.sleep(input_data.polling_rate)"
            ]
        },
        {
            "id": "9",
            "type": "block",
            "statements": [
                "(yield ('entry', RSSEntry(title=entry['title'], link=entry['link'], description=entry.get('summary', ''), pub_date=pub_date, author=entry.get('author', ''), categories=[tag['term'] for tag in entry.get('tags', [])])))"
            ]
        },
        {
            "id": "10",
            "type": "block",
            "statements": []
        },
        {
            "id": "11",
            "type": "block",
            "statements": []
        }
    ],
    "edges": [
        {
            "source": "2",
            "target": "3",
            "type": "next"
        },
        {
            "source": "3",
            "target": "4",
            "type": "true"
        },
        {
            "source": "3",
            "target": "5",
            "type": "false"
        },
        {
            "source": "4",
            "target": "6",
            "type": "next"
        },
        {
            "source": "6",
            "target": "7",
            "type": "true"
        },
        {
            "source": "6",
            "target": "8",
            "type": "false"
        },
        {
            "source": "7",
            "target": "9",
            "type": "true"
        },
        {
            "source": "7",
            "target": "10",
            "type": "false"
        },
        {
            "source": "8",
            "target": "3",
            "type": "next"
        },
        {
            "source": "9",
            "target": "11",
            "type": "next"
        },
        {
            "source": "10",
            "target": "11",
            "type": "next"
        },
        {
            "source": "11",
            "target": "6",
            "type": "next"
        }
    ]
}