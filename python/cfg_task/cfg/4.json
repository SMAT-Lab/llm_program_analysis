{
    "nodes": [
        {
            "id": "1",
            "type": "block",
            "statements": [
                "import atexit",
                "import logging",
                "import multiprocessing",
                "import os",
                "import signal",
                "import sys",
                "import threading",
                "from concurrent.futures import Future, ProcessPoolExecutor",
                "from contextlib import contextmanager",
                "from multiprocessing.pool import AsyncResult, Pool",
                "from typing import TYPE_CHECKING, Any, Generator, TypeVar, cast",
                "from pydantic import BaseModel",
                "from redis.lock import Lock as RedisLock",
                "TYPE_CHECKING"
            ]
        },
        {
            "id": "2",
            "type": "block",
            "statements": [
                "from backend.executor import DatabaseManager"
            ]
        },
        {
            "id": "3",
            "type": "block",
            "statements": []
        },
        {
            "id": "4",
            "type": "block",
            "statements": [
                "from autogpt_libs.utils.cache import thread_cached",
                "from backend.blocks.agent import AgentExecutorBlock",
                "from backend.data import redis",
                "from backend.data.block import Block, BlockData, BlockInput, BlockType, get_block",
                "from backend.data.execution import ExecutionQueue, ExecutionResult, ExecutionStatus, GraphExecutionEntry, NodeExecutionEntry, merge_execution_input, parse_execution_output",
                "from backend.data.graph import GraphModel, Link, Node",
                "from backend.data.model import CREDENTIALS_FIELD_NAME, CredentialsMetaInput",
                "from backend.integrations.creds_manager import IntegrationCredentialsManager",
                "from backend.util import json",
                "from backend.util.decorator import error_logged, time_measured",
                "from backend.util.logging import configure_logging",
                "from backend.util.process import set_service_name",
                "from backend.util.service import AppService, close_service_client, expose, get_service_client",
                "from backend.util.settings import Settings",
                "from backend.util.type import convert",
                "logger = logging.getLogger(__name__)",
                "settings = Settings()",
                "class LogMetadata:\n\n    def __init__(self, user_id: str, graph_eid: str, graph_id: str, node_eid: str, node_id: str, block_name: str):\n        self.metadata = {'component': 'ExecutionManager', 'user_id': user_id, 'graph_eid': graph_eid, 'graph_id': graph_id, 'node_eid': node_eid, 'node_id': node_id, 'block_name': block_name}\n        self.prefix = f'[ExecutionManager|uid:{user_id}|gid:{graph_id}|nid:{node_id}]|geid:{graph_eid}|nid:{node_eid}|{block_name}]'\n\n    def info(self, msg: str, **extra):\n        msg = self._wrap(msg, **extra)\n        logger.info(msg, extra={'json_fields': {**self.metadata, **extra}})\n\n    def warning(self, msg: str, **extra):\n        msg = self._wrap(msg, **extra)\n        logger.warning(msg, extra={'json_fields': {**self.metadata, **extra}})\n\n    def error(self, msg: str, **extra):\n        msg = self._wrap(msg, **extra)\n        logger.error(msg, extra={'json_fields': {**self.metadata, **extra}})\n\n    def debug(self, msg: str, **extra):\n        msg = self._wrap(msg, **extra)\n        logger.debug(msg, extra={'json_fields': {**self.metadata, **extra}})\n\n    def exception(self, msg: str, **extra):\n        msg = self._wrap(msg, **extra)\n        logger.exception(msg, extra={'json_fields': {**self.metadata, **extra}})\n\n    def _wrap(self, msg: str, **extra):\n        return f'{self.prefix} {msg} {extra}'",
                "def __init__(self, user_id: str, graph_eid: str, graph_id: str, node_eid: str, node_id: str, block_name: str):\n    self.metadata = {'component': 'ExecutionManager', 'user_id': user_id, 'graph_eid': graph_eid, 'graph_id': graph_id, 'node_eid': node_eid, 'node_id': node_id, 'block_name': block_name}\n    self.prefix = f'[ExecutionManager|uid:{user_id}|gid:{graph_id}|nid:{node_id}]|geid:{graph_eid}|nid:{node_eid}|{block_name}]'",
                "self.metadata = {'component': 'ExecutionManager', 'user_id': user_id, 'graph_eid': graph_eid, 'graph_id': graph_id, 'node_eid': node_eid, 'node_id': node_id, 'block_name': block_name}",
                "self.prefix = f'[ExecutionManager|uid:{user_id}|gid:{graph_id}|nid:{node_id}]|geid:{graph_eid}|nid:{node_eid}|{block_name}]'",
                "def info(self, msg: str, **extra):\n    msg = self._wrap(msg, **extra)\n    logger.info(msg, extra={'json_fields': {**self.metadata, **extra}})",
                "msg = self._wrap(msg, **extra)",
                "logger.info(msg)",
                "def warning(self, msg: str, **extra):\n    msg = self._wrap(msg, **extra)\n    logger.warning(msg, extra={'json_fields': {**self.metadata, **extra}})",
                "msg = self._wrap(msg, **extra)",
                "logger.warning(msg)",
                "def error(self, msg: str, **extra):\n    msg = self._wrap(msg, **extra)\n    logger.error(msg, extra={'json_fields': {**self.metadata, **extra}})",
                "msg = self._wrap(msg, **extra)",
                "logger.error(msg)",
                "def debug(self, msg: str, **extra):\n    msg = self._wrap(msg, **extra)\n    logger.debug(msg, extra={'json_fields': {**self.metadata, **extra}})",
                "msg = self._wrap(msg, **extra)",
                "logger.debug(msg)",
                "def exception(self, msg: str, **extra):\n    msg = self._wrap(msg, **extra)\n    logger.exception(msg, extra={'json_fields': {**self.metadata, **extra}})",
                "msg = self._wrap(msg, **extra)",
                "logger.exception(msg)",
                "def _wrap(self, msg: str, **extra):\n    return f'{self.prefix} {msg} {extra}'",
                "return f'{self.prefix} {msg} {extra}'"
            ]
        },
        {
            "id": "5",
            "type": "block",
            "statements": [
                "T = TypeVar('T')",
                "ExecutionStream = Generator[NodeExecutionEntry, None, None]",
                "def execute_node(db_client: 'DatabaseManager', creds_manager: IntegrationCredentialsManager, data: NodeExecutionEntry, execution_stats: dict[str, Any] | None=None) -> ExecutionStream:\n    \"\"\"\n    Execute a node in the graph. This will trigger a block execution on a node,\n    persist the execution result, and return the subsequent node to be executed.\n\n    Args:\n        db_client: The client to send execution updates to the server.\n        creds_manager: The manager to acquire and release credentials.\n        data: The execution data for executing the current node.\n        execution_stats: The execution statistics to be updated.\n\n    Returns:\n        The subsequent node to be enqueued, or None if there is no subsequent node.\n    \"\"\"\n    user_id = data.user_id\n    graph_exec_id = data.graph_exec_id\n    graph_id = data.graph_id\n    node_exec_id = data.node_exec_id\n    node_id = data.node_id\n\n    def update_execution(status: ExecutionStatus) -> ExecutionResult:\n        exec_update = db_client.update_execution_status(node_exec_id, status)\n        db_client.send_execution_update(exec_update)\n        return exec_update\n    node = db_client.get_node(node_id)\n    node_block = get_block(node.block_id)\n    if not node_block:\n        logger.error(f'Block {node.block_id} not found.')\n        return\n    log_metadata = LogMetadata(user_id=user_id, graph_eid=graph_exec_id, graph_id=graph_id, node_eid=node_exec_id, node_id=node_id, block_name=node_block.name)\n    (input_data, error) = validate_exec(node, data.data, resolve_input=False)\n    if input_data is None:\n        log_metadata.error(f'Skip execution, input validation error: {error}')\n        db_client.upsert_execution_output(node_exec_id, 'error', error)\n        update_execution(ExecutionStatus.FAILED)\n        return\n    if isinstance(node_block, AgentExecutorBlock):\n        input_data = {**node.input_default, 'data': input_data}\n    input_data_str = json.dumps(input_data)\n    input_size = len(input_data_str)\n    log_metadata.info('Executed node with input', input=input_data_str)\n    update_execution(ExecutionStatus.RUNNING)\n    extra_exec_kwargs = {}\n    creds_lock = None\n    if CREDENTIALS_FIELD_NAME in input_data:\n        credentials_meta = CredentialsMetaInput(**input_data[CREDENTIALS_FIELD_NAME])\n        (credentials, creds_lock) = creds_manager.acquire(user_id, credentials_meta.id)\n        extra_exec_kwargs['credentials'] = credentials\n    output_size = 0\n    end_status = ExecutionStatus.COMPLETED\n    credit = db_client.get_or_refill_credit(user_id)\n    if credit < 0:\n        raise ValueError(f'Insufficient credit: {credit}')\n    try:\n        for (output_name, output_data) in node_block.execute(input_data, **extra_exec_kwargs):\n            output_size += len(json.dumps(output_data))\n            log_metadata.info('Node produced output', **{output_name: output_data})\n            db_client.upsert_execution_output(node_exec_id, output_name, output_data)\n            for execution in _enqueue_next_nodes(db_client=db_client, node=node, output=(output_name, output_data), user_id=user_id, graph_exec_id=graph_exec_id, graph_id=graph_id, log_metadata=log_metadata):\n                yield execution\n    except Exception as e:\n        end_status = ExecutionStatus.FAILED\n        error_msg = str(e)\n        log_metadata.exception(f'Node execution failed with error {error_msg}')\n        db_client.upsert_execution_output(node_exec_id, 'error', error_msg)\n        for execution in _enqueue_next_nodes(db_client=db_client, node=node, output=('error', error_msg), user_id=user_id, graph_exec_id=graph_exec_id, graph_id=graph_id, log_metadata=log_metadata):\n            yield execution\n        raise e\n    finally:\n        if creds_lock:\n            try:\n                creds_lock.release()\n            except Exception as e:\n                log_metadata.error(f'Failed to release credentials lock: {e}')\n        res = update_execution(end_status)\n        if end_status == ExecutionStatus.COMPLETED:\n            s = input_size + output_size\n            t = (res.end_time - res.start_time).total_seconds() if res.end_time and res.start_time else 0\n            db_client.spend_credits(user_id, credit, node_block.id, input_data, s, t)\n        if execution_stats is not None:\n            execution_stats.update(node_block.execution_stats)\n            execution_stats['input_size'] = input_size\n            execution_stats['output_size'] = output_size",
                "'\\n    Execute a node in the graph. This will trigger a block execution on a node,\\n    persist the execution result, and return the subsequent node to be executed.\\n\\n    Args:\\n        db_client: The client to send execution updates to the server.\\n        creds_manager: The manager to acquire and release credentials.\\n        data: The execution data for executing the current node.\\n        execution_stats: The execution statistics to be updated.\\n\\n    Returns:\\n        The subsequent node to be enqueued, or None if there is no subsequent node.\\n    '",
                "user_id = data.user_id",
                "graph_exec_id = data.graph_exec_id",
                "graph_id = data.graph_id",
                "node_exec_id = data.node_exec_id",
                "node_id = data.node_id",
                "def update_execution(status: ExecutionStatus) -> ExecutionResult:\n    exec_update = db_client.update_execution_status(node_exec_id, status)\n    db_client.send_execution_update(exec_update)\n    return exec_update",
                "exec_update = db_client.update_execution_status(node_exec_id, status)",
                "db_client.send_execution_update(exec_update)",
                "return exec_update"
            ]
        },
        {
            "id": "6",
            "type": "block",
            "statements": [
                "node = db_client.get_node(node_id)",
                "node_block = get_block(node.block_id)",
                "not node_block"
            ]
        },
        {
            "id": "7",
            "type": "block",
            "statements": [
                "logger.error(f'Block {node.block_id} not found.')",
                "return"
            ]
        },
        {
            "id": "8",
            "type": "block",
            "statements": []
        },
        {
            "id": "9",
            "type": "block",
            "statements": [
                "log_metadata = LogMetadata(user_id=user_id, graph_eid=graph_exec_id, graph_id=graph_id, node_eid=node_exec_id, node_id=node_id, block_name=node_block.name)",
                "(input_data, error) = validate_exec(node, data.data, resolve_input=False)",
                "input_data Is None"
            ]
        },
        {
            "id": "10",
            "type": "block",
            "statements": [
                "log_metadata.error(f'Skip execution, input validation error: {error}')",
                "db_client.upsert_execution_output(node_exec_id, 'error', error)",
                "update_execution(ExecutionStatus.FAILED)",
                "return"
            ]
        },
        {
            "id": "11",
            "type": "block",
            "statements": []
        },
        {
            "id": "12",
            "type": "block",
            "statements": [
                "isinstance(node_block, AgentExecutorBlock)"
            ]
        },
        {
            "id": "13",
            "type": "block",
            "statements": [
                "input_data = {**node.input_default, 'data': input_data}"
            ]
        },
        {
            "id": "14",
            "type": "block",
            "statements": []
        },
        {
            "id": "15",
            "type": "block",
            "statements": [
                "input_data_str = json.dumps(input_data)",
                "input_size = len(input_data_str)",
                "log_metadata.info('Executed node with input')",
                "update_execution(ExecutionStatus.RUNNING)",
                "extra_exec_kwargs = {}",
                "creds_lock = None",
                "CREDENTIALS_FIELD_NAME In input_data"
            ]
        },
        {
            "id": "16",
            "type": "block",
            "statements": [
                "credentials_meta = CredentialsMetaInput(**input_data[CREDENTIALS_FIELD_NAME])",
                "(credentials, creds_lock) = creds_manager.acquire(user_id, credentials_meta.id)",
                "extra_exec_kwargs['credentials'] = credentials"
            ]
        },
        {
            "id": "17",
            "type": "block",
            "statements": []
        },
        {
            "id": "18",
            "type": "block",
            "statements": [
                "output_size = 0",
                "end_status = ExecutionStatus.COMPLETED",
                "credit = db_client.get_or_refill_credit(user_id)",
                "credit Lt 0"
            ]
        },
        {
            "id": "19",
            "type": "block",
            "statements": [
                "raise ValueError(f'Insufficient credit: {credit}')"
            ]
        },
        {
            "id": "20",
            "type": "block",
            "statements": []
        },
        {
            "id": "21",
            "type": "block",
            "statements": [
                "try:\n    for (output_name, output_data) in node_block.execute(input_data, **extra_exec_kwargs):\n        output_size += len(json.dumps(output_data))\n        log_metadata.info('Node produced output', **{output_name: output_data})\n        db_client.upsert_execution_output(node_exec_id, output_name, output_data)\n        for execution in _enqueue_next_nodes(db_client=db_client, node=node, output=(output_name, output_data), user_id=user_id, graph_exec_id=graph_exec_id, graph_id=graph_id, log_metadata=log_metadata):\n            yield execution\nexcept Exception as e:\n    end_status = ExecutionStatus.FAILED\n    error_msg = str(e)\n    log_metadata.exception(f'Node execution failed with error {error_msg}')\n    db_client.upsert_execution_output(node_exec_id, 'error', error_msg)\n    for execution in _enqueue_next_nodes(db_client=db_client, node=node, output=('error', error_msg), user_id=user_id, graph_exec_id=graph_exec_id, graph_id=graph_id, log_metadata=log_metadata):\n        yield execution\n    raise e\nfinally:\n    if creds_lock:\n        try:\n            creds_lock.release()\n        except Exception as e:\n            log_metadata.error(f'Failed to release credentials lock: {e}')\n    res = update_execution(end_status)\n    if end_status == ExecutionStatus.COMPLETED:\n        s = input_size + output_size\n        t = (res.end_time - res.start_time).total_seconds() if res.end_time and res.start_time else 0\n        db_client.spend_credits(user_id, credit, node_block.id, input_data, s, t)\n    if execution_stats is not None:\n        execution_stats.update(node_block.execution_stats)\n        execution_stats['input_size'] = input_size\n        execution_stats['output_size'] = output_size"
            ]
        },
        {
            "id": "22",
            "type": "block",
            "statements": [
                "(output_name, output_data)",
                "node_block.execute(input_data)"
            ]
        },
        {
            "id": "23",
            "type": "block",
            "statements": [
                "output_size += len(json.dumps(output_data))",
                "log_metadata.info('Node produced output')",
                "db_client.upsert_execution_output(node_exec_id, output_name, output_data)"
            ]
        },
        {
            "id": "24",
            "type": "block",
            "statements": [
                "end_status = ExecutionStatus.FAILED",
                "error_msg = str(e)",
                "log_metadata.exception(f'Node execution failed with error {error_msg}')",
                "db_client.upsert_execution_output(node_exec_id, 'error', error_msg)"
            ]
        },
        {
            "id": "25",
            "type": "block",
            "statements": [
                "execution",
                "_enqueue_next_nodes()"
            ]
        },
        {
            "id": "26",
            "type": "block",
            "statements": [
                "(yield execution)"
            ]
        },
        {
            "id": "27",
            "type": "block",
            "statements": []
        },
        {
            "id": "28",
            "type": "block",
            "statements": [
                "execution",
                "_enqueue_next_nodes()"
            ]
        },
        {
            "id": "29",
            "type": "block",
            "statements": [
                "(yield execution)"
            ]
        },
        {
            "id": "30",
            "type": "block",
            "statements": [
                "raise e",
                "creds_lock"
            ]
        },
        {
            "id": "31",
            "type": "block",
            "statements": [
                "try:\n    creds_lock.release()\nexcept Exception as e:\n    log_metadata.error(f'Failed to release credentials lock: {e}')",
                "creds_lock.release()",
                "log_metadata.error(f'Failed to release credentials lock: {e}')"
            ]
        },
        {
            "id": "32",
            "type": "block",
            "statements": []
        },
        {
            "id": "33",
            "type": "block",
            "statements": [
                "res = update_execution(end_status)",
                "end_status Eq ExecutionStatus.COMPLETED"
            ]
        },
        {
            "id": "34",
            "type": "block",
            "statements": [
                "s = input_size + output_size",
                "t = (res.end_time - res.start_time).total_seconds() if res.end_time and res.start_time else 0",
                "db_client.spend_credits(user_id, credit, node_block.id, input_data, s, t)"
            ]
        },
        {
            "id": "35",
            "type": "block",
            "statements": []
        },
        {
            "id": "36",
            "type": "block",
            "statements": [
                "execution_stats IsNot None"
            ]
        },
        {
            "id": "37",
            "type": "block",
            "statements": [
                "execution_stats.update(node_block.execution_stats)",
                "execution_stats['input_size'] = input_size",
                "execution_stats['output_size'] = output_size"
            ]
        },
        {
            "id": "38",
            "type": "block",
            "statements": []
        },
        {
            "id": "39",
            "type": "block",
            "statements": [
                "def _enqueue_next_nodes(db_client: 'DatabaseManager', node: Node, output: BlockData, user_id: str, graph_exec_id: str, graph_id: str, log_metadata: LogMetadata) -> list[NodeExecutionEntry]:\n\n    def add_enqueued_execution(node_exec_id: str, node_id: str, data: BlockInput) -> NodeExecutionEntry:\n        exec_update = db_client.update_execution_status(node_exec_id, ExecutionStatus.QUEUED, data)\n        db_client.send_execution_update(exec_update)\n        return NodeExecutionEntry(user_id=user_id, graph_exec_id=graph_exec_id, graph_id=graph_id, node_exec_id=node_exec_id, node_id=node_id, data=data)\n\n    def register_next_executions(node_link: Link) -> list[NodeExecutionEntry]:\n        enqueued_executions = []\n        next_output_name = node_link.source_name\n        next_input_name = node_link.sink_name\n        next_node_id = node_link.sink_id\n        next_data = parse_execution_output(output, next_output_name)\n        if next_data is None:\n            return enqueued_executions\n        next_node = db_client.get_node(next_node_id)\n        with synchronized(f'upsert_input-{next_node_id}-{graph_exec_id}'):\n            (next_node_exec_id, next_node_input) = db_client.upsert_execution_input(node_id=next_node_id, graph_exec_id=graph_exec_id, input_name=next_input_name, input_data=next_data)\n            static_link_names = {link.sink_name for link in next_node.input_links if link.is_static and link.sink_name not in next_node_input}\n            if static_link_names and (latest_execution := db_client.get_latest_execution(next_node_id, graph_exec_id)):\n                for name in static_link_names:\n                    next_node_input[name] = latest_execution.input_data.get(name)\n            (next_node_input, validation_msg) = validate_exec(next_node, next_node_input)\n            suffix = f'{next_output_name}>{next_input_name}~{next_node_exec_id}:{validation_msg}'\n            if not next_node_input:\n                log_metadata.warning(f'Skipped queueing {suffix}')\n                return enqueued_executions\n            log_metadata.info(f'Enqueued {suffix}')\n            enqueued_executions.append(add_enqueued_execution(next_node_exec_id, next_node_id, next_node_input))\n            if not node_link.is_static:\n                return enqueued_executions\n            for iexec in db_client.get_incomplete_executions(next_node_id, graph_exec_id):\n                idata = iexec.input_data\n                ineid = iexec.node_exec_id\n                static_link_names = {link.sink_name for link in next_node.input_links if link.is_static and link.sink_name not in idata}\n                for input_name in static_link_names:\n                    idata[input_name] = next_node_input[input_name]\n                (idata, msg) = validate_exec(next_node, idata)\n                suffix = f'{next_output_name}>{next_input_name}~{ineid}:{msg}'\n                if not idata:\n                    log_metadata.info(f'Enqueueing static-link skipped: {suffix}')\n                    continue\n                log_metadata.info(f'Enqueueing static-link execution {suffix}')\n                enqueued_executions.append(add_enqueued_execution(iexec.node_exec_id, next_node_id, idata))\n            return enqueued_executions\n    return [execution for link in node.output_links for execution in register_next_executions(link)]",
                "def add_enqueued_execution(node_exec_id: str, node_id: str, data: BlockInput) -> NodeExecutionEntry:\n    exec_update = db_client.update_execution_status(node_exec_id, ExecutionStatus.QUEUED, data)\n    db_client.send_execution_update(exec_update)\n    return NodeExecutionEntry(user_id=user_id, graph_exec_id=graph_exec_id, graph_id=graph_id, node_exec_id=node_exec_id, node_id=node_id, data=data)",
                "exec_update = db_client.update_execution_status(node_exec_id, ExecutionStatus.QUEUED, data)",
                "db_client.send_execution_update(exec_update)",
                "return NodeExecutionEntry(user_id=user_id, graph_exec_id=graph_exec_id, graph_id=graph_id, node_exec_id=node_exec_id, node_id=node_id, data=data)"
            ]
        },
        {
            "id": "40",
            "type": "block",
            "statements": [
                "def register_next_executions(node_link: Link) -> list[NodeExecutionEntry]:\n    enqueued_executions = []\n    next_output_name = node_link.source_name\n    next_input_name = node_link.sink_name\n    next_node_id = node_link.sink_id\n    next_data = parse_execution_output(output, next_output_name)\n    if next_data is None:\n        return enqueued_executions\n    next_node = db_client.get_node(next_node_id)\n    with synchronized(f'upsert_input-{next_node_id}-{graph_exec_id}'):\n        (next_node_exec_id, next_node_input) = db_client.upsert_execution_input(node_id=next_node_id, graph_exec_id=graph_exec_id, input_name=next_input_name, input_data=next_data)\n        static_link_names = {link.sink_name for link in next_node.input_links if link.is_static and link.sink_name not in next_node_input}\n        if static_link_names and (latest_execution := db_client.get_latest_execution(next_node_id, graph_exec_id)):\n            for name in static_link_names:\n                next_node_input[name] = latest_execution.input_data.get(name)\n        (next_node_input, validation_msg) = validate_exec(next_node, next_node_input)\n        suffix = f'{next_output_name}>{next_input_name}~{next_node_exec_id}:{validation_msg}'\n        if not next_node_input:\n            log_metadata.warning(f'Skipped queueing {suffix}')\n            return enqueued_executions\n        log_metadata.info(f'Enqueued {suffix}')\n        enqueued_executions.append(add_enqueued_execution(next_node_exec_id, next_node_id, next_node_input))\n        if not node_link.is_static:\n            return enqueued_executions\n        for iexec in db_client.get_incomplete_executions(next_node_id, graph_exec_id):\n            idata = iexec.input_data\n            ineid = iexec.node_exec_id\n            static_link_names = {link.sink_name for link in next_node.input_links if link.is_static and link.sink_name not in idata}\n            for input_name in static_link_names:\n                idata[input_name] = next_node_input[input_name]\n            (idata, msg) = validate_exec(next_node, idata)\n            suffix = f'{next_output_name}>{next_input_name}~{ineid}:{msg}'\n            if not idata:\n                log_metadata.info(f'Enqueueing static-link skipped: {suffix}')\n                continue\n            log_metadata.info(f'Enqueueing static-link execution {suffix}')\n            enqueued_executions.append(add_enqueued_execution(iexec.node_exec_id, next_node_id, idata))\n        return enqueued_executions",
                "enqueued_executions = []",
                "next_output_name = node_link.source_name",
                "next_input_name = node_link.sink_name",
                "next_node_id = node_link.sink_id",
                "next_data = parse_execution_output(output, next_output_name)",
                "next_data Is None"
            ]
        },
        {
            "id": "41",
            "type": "block",
            "statements": [
                "return enqueued_executions"
            ]
        },
        {
            "id": "42",
            "type": "block",
            "statements": []
        },
        {
            "id": "43",
            "type": "block",
            "statements": [
                "next_node = db_client.get_node(next_node_id)",
                "with synchronized(f'upsert_input-{next_node_id}-{graph_exec_id}'):\n    (next_node_exec_id, next_node_input) = db_client.upsert_execution_input(node_id=next_node_id, graph_exec_id=graph_exec_id, input_name=next_input_name, input_data=next_data)\n    static_link_names = {link.sink_name for link in next_node.input_links if link.is_static and link.sink_name not in next_node_input}\n    if static_link_names and (latest_execution := db_client.get_latest_execution(next_node_id, graph_exec_id)):\n        for name in static_link_names:\n            next_node_input[name] = latest_execution.input_data.get(name)\n    (next_node_input, validation_msg) = validate_exec(next_node, next_node_input)\n    suffix = f'{next_output_name}>{next_input_name}~{next_node_exec_id}:{validation_msg}'\n    if not next_node_input:\n        log_metadata.warning(f'Skipped queueing {suffix}')\n        return enqueued_executions\n    log_metadata.info(f'Enqueued {suffix}')\n    enqueued_executions.append(add_enqueued_execution(next_node_exec_id, next_node_id, next_node_input))\n    if not node_link.is_static:\n        return enqueued_executions\n    for iexec in db_client.get_incomplete_executions(next_node_id, graph_exec_id):\n        idata = iexec.input_data\n        ineid = iexec.node_exec_id\n        static_link_names = {link.sink_name for link in next_node.input_links if link.is_static and link.sink_name not in idata}\n        for input_name in static_link_names:\n            idata[input_name] = next_node_input[input_name]\n        (idata, msg) = validate_exec(next_node, idata)\n        suffix = f'{next_output_name}>{next_input_name}~{ineid}:{msg}'\n        if not idata:\n            log_metadata.info(f'Enqueueing static-link skipped: {suffix}')\n            continue\n        log_metadata.info(f'Enqueueing static-link execution {suffix}')\n        enqueued_executions.append(add_enqueued_execution(iexec.node_exec_id, next_node_id, idata))\n    return enqueued_executions",
                "(next_node_exec_id, next_node_input) = db_client.upsert_execution_input(node_id=next_node_id, graph_exec_id=graph_exec_id, input_name=next_input_name, input_data=next_data)",
                "static_link_names = {link.sink_name for link in next_node.input_links if link.is_static and link.sink_name not in next_node_input}",
                "static_link_names and (latest_execution := db_client.get_latest_execution(next_node_id, graph_exec_id))"
            ]
        },
        {
            "id": "44",
            "type": "block",
            "statements": []
        },
        {
            "id": "45",
            "type": "block",
            "statements": []
        },
        {
            "id": "46",
            "type": "block",
            "statements": [
                "(next_node_input, validation_msg) = validate_exec(next_node, next_node_input)",
                "suffix = f'{next_output_name}>{next_input_name}~{next_node_exec_id}:{validation_msg}'",
                "not next_node_input"
            ]
        },
        {
            "id": "47",
            "type": "block",
            "statements": [
                "name",
                "static_link_names"
            ]
        },
        {
            "id": "48",
            "type": "block",
            "statements": [
                "next_node_input[name] = latest_execution.input_data.get(name)"
            ]
        },
        {
            "id": "49",
            "type": "block",
            "statements": []
        },
        {
            "id": "50",
            "type": "block",
            "statements": [
                "log_metadata.warning(f'Skipped queueing {suffix}')",
                "return enqueued_executions"
            ]
        },
        {
            "id": "51",
            "type": "block",
            "statements": []
        },
        {
            "id": "52",
            "type": "block",
            "statements": [
                "log_metadata.info(f'Enqueued {suffix}')",
                "enqueued_executions.append(add_enqueued_execution(next_node_exec_id, next_node_id, next_node_input))",
                "not node_link.is_static"
            ]
        },
        {
            "id": "53",
            "type": "block",
            "statements": [
                "return enqueued_executions"
            ]
        },
        {
            "id": "54",
            "type": "block",
            "statements": []
        },
        {
            "id": "55",
            "type": "block",
            "statements": []
        },
        {
            "id": "56",
            "type": "block",
            "statements": [
                "iexec",
                "db_client.get_incomplete_executions(next_node_id, graph_exec_id)"
            ]
        },
        {
            "id": "57",
            "type": "block",
            "statements": [
                "idata = iexec.input_data",
                "ineid = iexec.node_exec_id",
                "static_link_names = {link.sink_name for link in next_node.input_links if link.is_static and link.sink_name not in idata}"
            ]
        },
        {
            "id": "58",
            "type": "block",
            "statements": [
                "return enqueued_executions"
            ]
        },
        {
            "id": "59",
            "type": "block",
            "statements": [
                "input_name",
                "static_link_names"
            ]
        },
        {
            "id": "60",
            "type": "block",
            "statements": [
                "idata[input_name] = next_node_input[input_name]"
            ]
        },
        {
            "id": "61",
            "type": "block",
            "statements": [
                "(idata, msg) = validate_exec(next_node, idata)",
                "suffix = f'{next_output_name}>{next_input_name}~{ineid}:{msg}'",
                "not idata"
            ]
        },
        {
            "id": "62",
            "type": "block",
            "statements": [
                "log_metadata.info(f'Enqueueing static-link skipped: {suffix}')",
                "continue"
            ]
        },
        {
            "id": "63",
            "type": "block",
            "statements": []
        },
        {
            "id": "64",
            "type": "block",
            "statements": [
                "log_metadata.info(f'Enqueueing static-link execution {suffix}')",
                "enqueued_executions.append(add_enqueued_execution(iexec.node_exec_id, next_node_id, idata))"
            ]
        },
        {
            "id": "65",
            "type": "block",
            "statements": [
                "return [execution for link in node.output_links for execution in register_next_executions(link)]"
            ]
        },
        {
            "id": "66",
            "type": "block",
            "statements": [
                "def validate_exec(node: Node, data: BlockInput, resolve_input: bool=True) -> tuple[BlockInput | None, str]:\n    \"\"\"\n    Validate the input data for a node execution.\n\n    Args:\n        node: The node to execute.\n        data: The input data for the node execution.\n        resolve_input: Whether to resolve dynamic pins into dict/list/object.\n\n    Returns:\n        A tuple of the validated data and the block name.\n        If the data is invalid, the first element will be None, and the second element\n        will be an error message.\n        If the data is valid, the first element will be the resolved input data, and\n        the second element will be the block name.\n    \"\"\"\n    node_block: Block | None = get_block(node.block_id)\n    if not node_block:\n        return (None, f'Block for {node.block_id} not found.')\n    if isinstance(node_block, AgentExecutorBlock):\n        try:\n            exec_data = AgentExecutorBlock.Input(**node.input_default)\n        except Exception as e:\n            return (None, f\"Input data doesn't match {node_block.name}: {str(e)}\")\n        input_schema = exec_data.input_schema\n        required_fields = set(input_schema['required'])\n        input_default = exec_data.data\n    else:\n        for (name, data_type) in node_block.input_schema.__annotations__.items():\n            if (value := data.get(name)) and type(value) is not data_type:\n                data[name] = convert(value, data_type)\n        input_schema = node_block.input_schema.jsonschema()\n        required_fields = node_block.input_schema.get_required_fields()\n        input_default = node.input_default\n    error_prefix = f'Input data missing or mismatch for `{node_block.name}`:'\n    input_fields_from_nodes = {link.sink_name for link in node.input_links}\n    if not input_fields_from_nodes.issubset(data):\n        return (None, f'{error_prefix} {input_fields_from_nodes - set(data)}')\n    data = {**input_default, **data}\n    if resolve_input:\n        data = merge_execution_input(data)\n    if not required_fields.issubset(data):\n        return (None, f'{error_prefix} {required_fields - set(data)}')\n    if (error := json.validate_with_jsonschema(schema=input_schema, data=data)):\n        error_message = f'{error_prefix} {error}'\n        logger.error(error_message)\n        return (None, error_message)\n    return (data, node_block.name)",
                "'\\n    Validate the input data for a node execution.\\n\\n    Args:\\n        node: The node to execute.\\n        data: The input data for the node execution.\\n        resolve_input: Whether to resolve dynamic pins into dict/list/object.\\n\\n    Returns:\\n        A tuple of the validated data and the block name.\\n        If the data is invalid, the first element will be None, and the second element\\n        will be an error message.\\n        If the data is valid, the first element will be the resolved input data, and\\n        the second element will be the block name.\\n    '",
                "node_block: Block | None = get_block(node.block_id)",
                "not node_block"
            ]
        },
        {
            "id": "67",
            "type": "block",
            "statements": [
                "return (None, f'Block for {node.block_id} not found.')"
            ]
        },
        {
            "id": "68",
            "type": "block",
            "statements": []
        },
        {
            "id": "69",
            "type": "block",
            "statements": [
                "isinstance(node_block, AgentExecutorBlock)"
            ]
        },
        {
            "id": "70",
            "type": "block",
            "statements": [
                "try:\n    exec_data = AgentExecutorBlock.Input(**node.input_default)\nexcept Exception as e:\n    return (None, f\"Input data doesn't match {node_block.name}: {str(e)}\")",
                "exec_data = AgentExecutorBlock.Input(**node.input_default)",
                "return (None, f\"Input data doesn't match {node_block.name}: {str(e)}\")"
            ]
        },
        {
            "id": "71",
            "type": "block",
            "statements": []
        },
        {
            "id": "72",
            "type": "block",
            "statements": [
                "error_prefix = f'Input data missing or mismatch for `{node_block.name}`:'",
                "input_fields_from_nodes = {link.sink_name for link in node.input_links}",
                "not input_fields_from_nodes.issubset(data)"
            ]
        },
        {
            "id": "73",
            "type": "block",
            "statements": [
                "input_schema = exec_data.input_schema",
                "required_fields = set(input_schema['required'])",
                "input_default = exec_data.data"
            ]
        },
        {
            "id": "74",
            "type": "block",
            "statements": [
                "(name, data_type)",
                "node_block.input_schema.__annotations__.items()"
            ]
        },
        {
            "id": "75",
            "type": "block",
            "statements": [
                "(value := data.get(name)) and type(value) is not data_type"
            ]
        },
        {
            "id": "76",
            "type": "block",
            "statements": [
                "input_schema = node_block.input_schema.jsonschema()",
                "required_fields = node_block.input_schema.get_required_fields()",
                "input_default = node.input_default"
            ]
        },
        {
            "id": "77",
            "type": "block",
            "statements": [
                "data[name] = convert(value, data_type)"
            ]
        },
        {
            "id": "78",
            "type": "block",
            "statements": []
        },
        {
            "id": "79",
            "type": "block",
            "statements": []
        },
        {
            "id": "80",
            "type": "block",
            "statements": [
                "return (None, f'{error_prefix} {input_fields_from_nodes - set(data)}')"
            ]
        },
        {
            "id": "81",
            "type": "block",
            "statements": []
        },
        {
            "id": "82",
            "type": "block",
            "statements": [
                "data = {**input_default, **data}",
                "resolve_input"
            ]
        },
        {
            "id": "83",
            "type": "block",
            "statements": [
                "data = merge_execution_input(data)"
            ]
        },
        {
            "id": "84",
            "type": "block",
            "statements": []
        },
        {
            "id": "85",
            "type": "block",
            "statements": [
                "not required_fields.issubset(data)"
            ]
        },
        {
            "id": "86",
            "type": "block",
            "statements": [
                "return (None, f'{error_prefix} {required_fields - set(data)}')"
            ]
        },
        {
            "id": "87",
            "type": "block",
            "statements": []
        },
        {
            "id": "88",
            "type": "block",
            "statements": [
                "(error := json.validate_with_jsonschema(schema=input_schema, data=data))"
            ]
        },
        {
            "id": "89",
            "type": "block",
            "statements": [
                "error_message = f'{error_prefix} {error}'",
                "logger.error(error_message)",
                "return (None, error_message)"
            ]
        },
        {
            "id": "90",
            "type": "block",
            "statements": []
        },
        {
            "id": "91",
            "type": "block",
            "statements": [
                "return (data, node_block.name)"
            ]
        },
        {
            "id": "92",
            "type": "block",
            "statements": [
                "class Executor:\n    \"\"\"\n    This class contains event handlers for the process pool executor events.\n\n    The main events are:\n        on_node_executor_start: Initialize the process that executes the node.\n        on_node_execution: Execution logic for a node.\n\n        on_graph_executor_start: Initialize the process that executes the graph.\n        on_graph_execution: Execution logic for a graph.\n\n    The execution flow:\n        1. Graph execution request is added to the queue.\n        2. Graph executor loop picks the request from the queue.\n        3. Graph executor loop submits the graph execution request to the executor pool.\n      [on_graph_execution]\n        4. Graph executor initialize the node execution queue.\n        5. Graph executor adds the starting nodes to the node execution queue.\n        6. Graph executor waits for all nodes to be executed.\n      [on_node_execution]\n        7. Node executor picks the node execution request from the queue.\n        8. Node executor executes the node.\n        9. Node executor enqueues the next executed nodes to the node execution queue.\n    \"\"\"\n\n    @classmethod\n    def on_node_executor_start(cls):\n        configure_logging()\n        set_service_name('NodeExecutor')\n        redis.connect()\n        cls.pid = os.getpid()\n        cls.db_client = get_db_client()\n        cls.creds_manager = IntegrationCredentialsManager()\n        cls.shutdown_lock = threading.Lock()\n        atexit.register(cls.on_node_executor_stop)\n        signal.signal(signal.SIGTERM, lambda _, __: cls.on_node_executor_sigterm())\n\n    @classmethod\n    def on_node_executor_stop(cls):\n        if not cls.shutdown_lock.acquire(blocking=False):\n            return\n        logger.info(f'[on_node_executor_stop {cls.pid}] \u23f3 Releasing locks...')\n        cls.creds_manager.release_all_locks()\n        logger.info(f'[on_node_executor_stop {cls.pid}] \u23f3 Disconnecting Redis...')\n        redis.disconnect()\n        logger.info(f'[on_node_executor_stop {cls.pid}] \u23f3 Disconnecting DB manager...')\n        close_service_client(cls.db_client)\n        logger.info(f'[on_node_executor_stop {cls.pid}] \u2705 Finished cleanup')\n\n    @classmethod\n    def on_node_executor_sigterm(cls):\n        llprint(f'[on_node_executor_sigterm {cls.pid}] \u26a0\ufe0f SIGTERM received')\n        if not cls.shutdown_lock.acquire(blocking=False):\n            return\n        llprint(f'[on_node_executor_stop {cls.pid}] \u23f3 Releasing locks...')\n        cls.creds_manager.release_all_locks()\n        llprint(f'[on_node_executor_stop {cls.pid}] \u23f3 Disconnecting Redis...')\n        redis.disconnect()\n        llprint(f'[on_node_executor_stop {cls.pid}] \u2705 Finished cleanup')\n        sys.exit(0)\n\n    @classmethod\n    @error_logged\n    def on_node_execution(cls, q: ExecutionQueue[NodeExecutionEntry], node_exec: NodeExecutionEntry) -> dict[str, Any]:\n        log_metadata = LogMetadata(user_id=node_exec.user_id, graph_eid=node_exec.graph_exec_id, graph_id=node_exec.graph_id, node_eid=node_exec.node_exec_id, node_id=node_exec.node_id, block_name='-')\n        execution_stats = {}\n        (timing_info, _) = cls._on_node_execution(q, node_exec, log_metadata, execution_stats)\n        execution_stats['walltime'] = timing_info.wall_time\n        execution_stats['cputime'] = timing_info.cpu_time\n        cls.db_client.update_node_execution_stats(node_exec.node_exec_id, execution_stats)\n        return execution_stats\n\n    @classmethod\n    @time_measured\n    def _on_node_execution(cls, q: ExecutionQueue[NodeExecutionEntry], node_exec: NodeExecutionEntry, log_metadata: LogMetadata, stats: dict[str, Any] | None=None):\n        try:\n            log_metadata.info(f'Start node execution {node_exec.node_exec_id}')\n            for execution in execute_node(cls.db_client, cls.creds_manager, node_exec, stats):\n                q.add(execution)\n            log_metadata.info(f'Finished node execution {node_exec.node_exec_id}')\n        except Exception as e:\n            log_metadata.exception(f'Failed node execution {node_exec.node_exec_id}: {e}')\n\n    @classmethod\n    def on_graph_executor_start(cls):\n        configure_logging()\n        set_service_name('GraphExecutor')\n        cls.db_client = get_db_client()\n        cls.pool_size = settings.config.num_node_workers\n        cls.pid = os.getpid()\n        cls._init_node_executor_pool()\n        logger.info(f'Graph executor {cls.pid} started with {cls.pool_size} node workers')\n        atexit.register(cls.on_graph_executor_stop)\n\n    @classmethod\n    def on_graph_executor_stop(cls):\n        prefix = f'[on_graph_executor_stop {cls.pid}]'\n        logger.info(f'{prefix} \u23f3 Terminating node executor pool...')\n        cls.executor.terminate()\n        logger.info(f'{prefix} \u23f3 Disconnecting DB manager...')\n        close_service_client(cls.db_client)\n        logger.info(f'{prefix} \u2705 Finished cleanup')\n\n    @classmethod\n    def _init_node_executor_pool(cls):\n        cls.executor = Pool(processes=cls.pool_size, initializer=cls.on_node_executor_start)\n\n    @classmethod\n    @error_logged\n    def on_graph_execution(cls, graph_exec: GraphExecutionEntry, cancel: threading.Event):\n        log_metadata = LogMetadata(user_id=graph_exec.user_id, graph_eid=graph_exec.graph_exec_id, graph_id=graph_exec.graph_id, node_id='*', node_eid='*', block_name='-')\n        (timing_info, (exec_stats, error)) = cls._on_graph_execution(graph_exec, cancel, log_metadata)\n        exec_stats['walltime'] = timing_info.wall_time\n        exec_stats['cputime'] = timing_info.cpu_time\n        exec_stats['error'] = str(error) if error else None\n        result = cls.db_client.update_graph_execution_stats(graph_exec_id=graph_exec.graph_exec_id, stats=exec_stats)\n        cls.db_client.send_execution_update(result)\n\n    @classmethod\n    @time_measured\n    def _on_graph_execution(cls, graph_exec: GraphExecutionEntry, cancel: threading.Event, log_metadata: LogMetadata) -> tuple[dict[str, Any], Exception | None]:\n        \"\"\"\n        Returns:\n            The execution statistics of the graph execution.\n            The error that occurred during the execution.\n        \"\"\"\n        log_metadata.info(f'Start graph execution {graph_exec.graph_exec_id}')\n        exec_stats = {'nodes_walltime': 0, 'nodes_cputime': 0, 'node_count': 0}\n        error = None\n        finished = False\n\n        def cancel_handler():\n            while not cancel.is_set():\n                cancel.wait(1)\n            if finished:\n                return\n            cls.executor.terminate()\n            log_metadata.info(f'Terminated graph execution {graph_exec.graph_exec_id}')\n            cls._init_node_executor_pool()\n        cancel_thread = threading.Thread(target=cancel_handler)\n        cancel_thread.start()\n        try:\n            queue = ExecutionQueue[NodeExecutionEntry]()\n            for node_exec in graph_exec.start_node_execs:\n                queue.add(node_exec)\n            running_executions: dict[str, AsyncResult] = {}\n\n            def make_exec_callback(exec_data: NodeExecutionEntry):\n                node_id = exec_data.node_id\n\n                def callback(result: object):\n                    running_executions.pop(node_id)\n                    nonlocal exec_stats\n                    if isinstance(result, dict):\n                        exec_stats['node_count'] += 1\n                        exec_stats['nodes_cputime'] += result.get('cputime', 0)\n                        exec_stats['nodes_walltime'] += result.get('walltime', 0)\n                return callback\n            while not queue.empty():\n                if cancel.is_set():\n                    error = RuntimeError('Execution is cancelled')\n                    return (exec_stats, error)\n                exec_data = queue.get()\n                execution = running_executions.get(exec_data.node_id)\n                if execution and (not execution.ready()):\n                    execution.wait()\n                log_metadata.debug(f'Dispatching node execution {exec_data.node_exec_id} for node {exec_data.node_id}')\n                running_executions[exec_data.node_id] = cls.executor.apply_async(cls.on_node_execution, (queue, exec_data), callback=make_exec_callback(exec_data))\n                while queue.empty() and running_executions:\n                    log_metadata.debug(f'Queue empty; running nodes: {list(running_executions.keys())}')\n                    for (node_id, execution) in list(running_executions.items()):\n                        if cancel.is_set():\n                            error = RuntimeError('Execution is cancelled')\n                            return (exec_stats, error)\n                        if not queue.empty():\n                            break\n                        log_metadata.debug(f'Waiting on execution of node {node_id}')\n                        execution.wait(3)\n            log_metadata.info(f'Finished graph execution {graph_exec.graph_exec_id}')\n        except Exception as e:\n            log_metadata.exception(f'Failed graph execution {graph_exec.graph_exec_id}: {e}')\n            error = e\n        finally:\n            if not cancel.is_set():\n                finished = True\n                cancel.set()\n            cancel_thread.join()\n            return (exec_stats, error)",
                "'\\n    This class contains event handlers for the process pool executor events.\\n\\n    The main events are:\\n        on_node_executor_start: Initialize the process that executes the node.\\n        on_node_execution: Execution logic for a node.\\n\\n        on_graph_executor_start: Initialize the process that executes the graph.\\n        on_graph_execution: Execution logic for a graph.\\n\\n    The execution flow:\\n        1. Graph execution request is added to the queue.\\n        2. Graph executor loop picks the request from the queue.\\n        3. Graph executor loop submits the graph execution request to the executor pool.\\n      [on_graph_execution]\\n        4. Graph executor initialize the node execution queue.\\n        5. Graph executor adds the starting nodes to the node execution queue.\\n        6. Graph executor waits for all nodes to be executed.\\n      [on_node_execution]\\n        7. Node executor picks the node execution request from the queue.\\n        8. Node executor executes the node.\\n        9. Node executor enqueues the next executed nodes to the node execution queue.\\n    '",
                "@classmethod\ndef on_node_executor_start(cls):\n    configure_logging()\n    set_service_name('NodeExecutor')\n    redis.connect()\n    cls.pid = os.getpid()\n    cls.db_client = get_db_client()\n    cls.creds_manager = IntegrationCredentialsManager()\n    cls.shutdown_lock = threading.Lock()\n    atexit.register(cls.on_node_executor_stop)\n    signal.signal(signal.SIGTERM, lambda _, __: cls.on_node_executor_sigterm())",
                "configure_logging()",
                "set_service_name('NodeExecutor')",
                "redis.connect()",
                "cls.pid = os.getpid()",
                "cls.db_client = get_db_client()",
                "cls.creds_manager = IntegrationCredentialsManager()",
                "cls.shutdown_lock = threading.Lock()",
                "atexit.register(cls.on_node_executor_stop)",
                "signal.signal(signal.SIGTERM, lambda _, __: cls.on_node_executor_sigterm())",
                "@classmethod\ndef on_node_executor_stop(cls):\n    if not cls.shutdown_lock.acquire(blocking=False):\n        return\n    logger.info(f'[on_node_executor_stop {cls.pid}] \u23f3 Releasing locks...')\n    cls.creds_manager.release_all_locks()\n    logger.info(f'[on_node_executor_stop {cls.pid}] \u23f3 Disconnecting Redis...')\n    redis.disconnect()\n    logger.info(f'[on_node_executor_stop {cls.pid}] \u23f3 Disconnecting DB manager...')\n    close_service_client(cls.db_client)\n    logger.info(f'[on_node_executor_stop {cls.pid}] \u2705 Finished cleanup')",
                "not cls.shutdown_lock.acquire(blocking=False)"
            ]
        },
        {
            "id": "93",
            "type": "block",
            "statements": [
                "return"
            ]
        },
        {
            "id": "94",
            "type": "block",
            "statements": []
        },
        {
            "id": "95",
            "type": "block",
            "statements": [
                "logger.info(f'[on_node_executor_stop {cls.pid}] \u23f3 Releasing locks...')",
                "cls.creds_manager.release_all_locks()",
                "logger.info(f'[on_node_executor_stop {cls.pid}] \u23f3 Disconnecting Redis...')",
                "redis.disconnect()",
                "logger.info(f'[on_node_executor_stop {cls.pid}] \u23f3 Disconnecting DB manager...')",
                "close_service_client(cls.db_client)",
                "logger.info(f'[on_node_executor_stop {cls.pid}] \u2705 Finished cleanup')",
                "@classmethod\ndef on_node_executor_sigterm(cls):\n    llprint(f'[on_node_executor_sigterm {cls.pid}] \u26a0\ufe0f SIGTERM received')\n    if not cls.shutdown_lock.acquire(blocking=False):\n        return\n    llprint(f'[on_node_executor_stop {cls.pid}] \u23f3 Releasing locks...')\n    cls.creds_manager.release_all_locks()\n    llprint(f'[on_node_executor_stop {cls.pid}] \u23f3 Disconnecting Redis...')\n    redis.disconnect()\n    llprint(f'[on_node_executor_stop {cls.pid}] \u2705 Finished cleanup')\n    sys.exit(0)",
                "llprint(f'[on_node_executor_sigterm {cls.pid}] \u26a0\ufe0f SIGTERM received')",
                "not cls.shutdown_lock.acquire(blocking=False)"
            ]
        },
        {
            "id": "96",
            "type": "block",
            "statements": [
                "return"
            ]
        },
        {
            "id": "97",
            "type": "block",
            "statements": []
        },
        {
            "id": "98",
            "type": "block",
            "statements": [
                "llprint(f'[on_node_executor_stop {cls.pid}] \u23f3 Releasing locks...')",
                "cls.creds_manager.release_all_locks()",
                "llprint(f'[on_node_executor_stop {cls.pid}] \u23f3 Disconnecting Redis...')",
                "redis.disconnect()",
                "llprint(f'[on_node_executor_stop {cls.pid}] \u2705 Finished cleanup')",
                "sys.exit(0)",
                "@classmethod\n@error_logged\ndef on_node_execution(cls, q: ExecutionQueue[NodeExecutionEntry], node_exec: NodeExecutionEntry) -> dict[str, Any]:\n    log_metadata = LogMetadata(user_id=node_exec.user_id, graph_eid=node_exec.graph_exec_id, graph_id=node_exec.graph_id, node_eid=node_exec.node_exec_id, node_id=node_exec.node_id, block_name='-')\n    execution_stats = {}\n    (timing_info, _) = cls._on_node_execution(q, node_exec, log_metadata, execution_stats)\n    execution_stats['walltime'] = timing_info.wall_time\n    execution_stats['cputime'] = timing_info.cpu_time\n    cls.db_client.update_node_execution_stats(node_exec.node_exec_id, execution_stats)\n    return execution_stats",
                "log_metadata = LogMetadata(user_id=node_exec.user_id, graph_eid=node_exec.graph_exec_id, graph_id=node_exec.graph_id, node_eid=node_exec.node_exec_id, node_id=node_exec.node_id, block_name='-')",
                "execution_stats = {}",
                "(timing_info, _) = cls._on_node_execution(q, node_exec, log_metadata, execution_stats)",
                "execution_stats['walltime'] = timing_info.wall_time",
                "execution_stats['cputime'] = timing_info.cpu_time",
                "cls.db_client.update_node_execution_stats(node_exec.node_exec_id, execution_stats)",
                "return execution_stats"
            ]
        },
        {
            "id": "99",
            "type": "block",
            "statements": [
                "@classmethod\n@time_measured\ndef _on_node_execution(cls, q: ExecutionQueue[NodeExecutionEntry], node_exec: NodeExecutionEntry, log_metadata: LogMetadata, stats: dict[str, Any] | None=None):\n    try:\n        log_metadata.info(f'Start node execution {node_exec.node_exec_id}')\n        for execution in execute_node(cls.db_client, cls.creds_manager, node_exec, stats):\n            q.add(execution)\n        log_metadata.info(f'Finished node execution {node_exec.node_exec_id}')\n    except Exception as e:\n        log_metadata.exception(f'Failed node execution {node_exec.node_exec_id}: {e}')",
                "try:\n    log_metadata.info(f'Start node execution {node_exec.node_exec_id}')\n    for execution in execute_node(cls.db_client, cls.creds_manager, node_exec, stats):\n        q.add(execution)\n    log_metadata.info(f'Finished node execution {node_exec.node_exec_id}')\nexcept Exception as e:\n    log_metadata.exception(f'Failed node execution {node_exec.node_exec_id}: {e}')",
                "log_metadata.info(f'Start node execution {node_exec.node_exec_id}')"
            ]
        },
        {
            "id": "100",
            "type": "block",
            "statements": [
                "execution",
                "execute_node(cls.db_client, cls.creds_manager, node_exec, stats)"
            ]
        },
        {
            "id": "101",
            "type": "block",
            "statements": [
                "q.add(execution)"
            ]
        },
        {
            "id": "102",
            "type": "block",
            "statements": [
                "log_metadata.info(f'Finished node execution {node_exec.node_exec_id}')",
                "log_metadata.exception(f'Failed node execution {node_exec.node_exec_id}: {e}')",
                "@classmethod\ndef on_graph_executor_start(cls):\n    configure_logging()\n    set_service_name('GraphExecutor')\n    cls.db_client = get_db_client()\n    cls.pool_size = settings.config.num_node_workers\n    cls.pid = os.getpid()\n    cls._init_node_executor_pool()\n    logger.info(f'Graph executor {cls.pid} started with {cls.pool_size} node workers')\n    atexit.register(cls.on_graph_executor_stop)",
                "configure_logging()",
                "set_service_name('GraphExecutor')",
                "cls.db_client = get_db_client()",
                "cls.pool_size = settings.config.num_node_workers",
                "cls.pid = os.getpid()",
                "cls._init_node_executor_pool()",
                "logger.info(f'Graph executor {cls.pid} started with {cls.pool_size} node workers')",
                "atexit.register(cls.on_graph_executor_stop)",
                "@classmethod\ndef on_graph_executor_stop(cls):\n    prefix = f'[on_graph_executor_stop {cls.pid}]'\n    logger.info(f'{prefix} \u23f3 Terminating node executor pool...')\n    cls.executor.terminate()\n    logger.info(f'{prefix} \u23f3 Disconnecting DB manager...')\n    close_service_client(cls.db_client)\n    logger.info(f'{prefix} \u2705 Finished cleanup')",
                "prefix = f'[on_graph_executor_stop {cls.pid}]'",
                "logger.info(f'{prefix} \u23f3 Terminating node executor pool...')",
                "cls.executor.terminate()",
                "logger.info(f'{prefix} \u23f3 Disconnecting DB manager...')",
                "close_service_client(cls.db_client)",
                "logger.info(f'{prefix} \u2705 Finished cleanup')",
                "@classmethod\ndef _init_node_executor_pool(cls):\n    cls.executor = Pool(processes=cls.pool_size, initializer=cls.on_node_executor_start)",
                "cls.executor = Pool(processes=cls.pool_size, initializer=cls.on_node_executor_start)",
                "@classmethod\n@error_logged\ndef on_graph_execution(cls, graph_exec: GraphExecutionEntry, cancel: threading.Event):\n    log_metadata = LogMetadata(user_id=graph_exec.user_id, graph_eid=graph_exec.graph_exec_id, graph_id=graph_exec.graph_id, node_id='*', node_eid='*', block_name='-')\n    (timing_info, (exec_stats, error)) = cls._on_graph_execution(graph_exec, cancel, log_metadata)\n    exec_stats['walltime'] = timing_info.wall_time\n    exec_stats['cputime'] = timing_info.cpu_time\n    exec_stats['error'] = str(error) if error else None\n    result = cls.db_client.update_graph_execution_stats(graph_exec_id=graph_exec.graph_exec_id, stats=exec_stats)\n    cls.db_client.send_execution_update(result)",
                "log_metadata = LogMetadata(user_id=graph_exec.user_id, graph_eid=graph_exec.graph_exec_id, graph_id=graph_exec.graph_id, node_id='*', node_eid='*', block_name='-')",
                "(timing_info, (exec_stats, error)) = cls._on_graph_execution(graph_exec, cancel, log_metadata)",
                "exec_stats['walltime'] = timing_info.wall_time",
                "exec_stats['cputime'] = timing_info.cpu_time",
                "exec_stats['error'] = str(error) if error else None",
                "result = cls.db_client.update_graph_execution_stats(graph_exec_id=graph_exec.graph_exec_id, stats=exec_stats)",
                "cls.db_client.send_execution_update(result)",
                "@classmethod\n@time_measured\ndef _on_graph_execution(cls, graph_exec: GraphExecutionEntry, cancel: threading.Event, log_metadata: LogMetadata) -> tuple[dict[str, Any], Exception | None]:\n    \"\"\"\n        Returns:\n            The execution statistics of the graph execution.\n            The error that occurred during the execution.\n        \"\"\"\n    log_metadata.info(f'Start graph execution {graph_exec.graph_exec_id}')\n    exec_stats = {'nodes_walltime': 0, 'nodes_cputime': 0, 'node_count': 0}\n    error = None\n    finished = False\n\n    def cancel_handler():\n        while not cancel.is_set():\n            cancel.wait(1)\n        if finished:\n            return\n        cls.executor.terminate()\n        log_metadata.info(f'Terminated graph execution {graph_exec.graph_exec_id}')\n        cls._init_node_executor_pool()\n    cancel_thread = threading.Thread(target=cancel_handler)\n    cancel_thread.start()\n    try:\n        queue = ExecutionQueue[NodeExecutionEntry]()\n        for node_exec in graph_exec.start_node_execs:\n            queue.add(node_exec)\n        running_executions: dict[str, AsyncResult] = {}\n\n        def make_exec_callback(exec_data: NodeExecutionEntry):\n            node_id = exec_data.node_id\n\n            def callback(result: object):\n                running_executions.pop(node_id)\n                nonlocal exec_stats\n                if isinstance(result, dict):\n                    exec_stats['node_count'] += 1\n                    exec_stats['nodes_cputime'] += result.get('cputime', 0)\n                    exec_stats['nodes_walltime'] += result.get('walltime', 0)\n            return callback\n        while not queue.empty():\n            if cancel.is_set():\n                error = RuntimeError('Execution is cancelled')\n                return (exec_stats, error)\n            exec_data = queue.get()\n            execution = running_executions.get(exec_data.node_id)\n            if execution and (not execution.ready()):\n                execution.wait()\n            log_metadata.debug(f'Dispatching node execution {exec_data.node_exec_id} for node {exec_data.node_id}')\n            running_executions[exec_data.node_id] = cls.executor.apply_async(cls.on_node_execution, (queue, exec_data), callback=make_exec_callback(exec_data))\n            while queue.empty() and running_executions:\n                log_metadata.debug(f'Queue empty; running nodes: {list(running_executions.keys())}')\n                for (node_id, execution) in list(running_executions.items()):\n                    if cancel.is_set():\n                        error = RuntimeError('Execution is cancelled')\n                        return (exec_stats, error)\n                    if not queue.empty():\n                        break\n                    log_metadata.debug(f'Waiting on execution of node {node_id}')\n                    execution.wait(3)\n        log_metadata.info(f'Finished graph execution {graph_exec.graph_exec_id}')\n    except Exception as e:\n        log_metadata.exception(f'Failed graph execution {graph_exec.graph_exec_id}: {e}')\n        error = e\n    finally:\n        if not cancel.is_set():\n            finished = True\n            cancel.set()\n        cancel_thread.join()\n        return (exec_stats, error)",
                "'\\n        Returns:\\n            The execution statistics of the graph execution.\\n            The error that occurred during the execution.\\n        '",
                "log_metadata.info(f'Start graph execution {graph_exec.graph_exec_id}')",
                "exec_stats = {'nodes_walltime': 0, 'nodes_cputime': 0, 'node_count': 0}",
                "error = None",
                "finished = False",
                "def cancel_handler():\n    while not cancel.is_set():\n        cancel.wait(1)\n    if finished:\n        return\n    cls.executor.terminate()\n    log_metadata.info(f'Terminated graph execution {graph_exec.graph_exec_id}')\n    cls._init_node_executor_pool()"
            ]
        },
        {
            "id": "103",
            "type": "block",
            "statements": [
                "not cancel.is_set()"
            ]
        },
        {
            "id": "104",
            "type": "block",
            "statements": [
                "cancel.wait(1)"
            ]
        },
        {
            "id": "105",
            "type": "block",
            "statements": [
                "finished"
            ]
        },
        {
            "id": "106",
            "type": "block",
            "statements": [
                "return"
            ]
        },
        {
            "id": "107",
            "type": "block",
            "statements": []
        },
        {
            "id": "108",
            "type": "block",
            "statements": [
                "cls.executor.terminate()",
                "log_metadata.info(f'Terminated graph execution {graph_exec.graph_exec_id}')",
                "cls._init_node_executor_pool()",
                "cancel_thread = threading.Thread(target=cancel_handler)",
                "cancel_thread.start()",
                "try:\n    queue = ExecutionQueue[NodeExecutionEntry]()\n    for node_exec in graph_exec.start_node_execs:\n        queue.add(node_exec)\n    running_executions: dict[str, AsyncResult] = {}\n\n    def make_exec_callback(exec_data: NodeExecutionEntry):\n        node_id = exec_data.node_id\n\n        def callback(result: object):\n            running_executions.pop(node_id)\n            nonlocal exec_stats\n            if isinstance(result, dict):\n                exec_stats['node_count'] += 1\n                exec_stats['nodes_cputime'] += result.get('cputime', 0)\n                exec_stats['nodes_walltime'] += result.get('walltime', 0)\n        return callback\n    while not queue.empty():\n        if cancel.is_set():\n            error = RuntimeError('Execution is cancelled')\n            return (exec_stats, error)\n        exec_data = queue.get()\n        execution = running_executions.get(exec_data.node_id)\n        if execution and (not execution.ready()):\n            execution.wait()\n        log_metadata.debug(f'Dispatching node execution {exec_data.node_exec_id} for node {exec_data.node_id}')\n        running_executions[exec_data.node_id] = cls.executor.apply_async(cls.on_node_execution, (queue, exec_data), callback=make_exec_callback(exec_data))\n        while queue.empty() and running_executions:\n            log_metadata.debug(f'Queue empty; running nodes: {list(running_executions.keys())}')\n            for (node_id, execution) in list(running_executions.items()):\n                if cancel.is_set():\n                    error = RuntimeError('Execution is cancelled')\n                    return (exec_stats, error)\n                if not queue.empty():\n                    break\n                log_metadata.debug(f'Waiting on execution of node {node_id}')\n                execution.wait(3)\n    log_metadata.info(f'Finished graph execution {graph_exec.graph_exec_id}')\nexcept Exception as e:\n    log_metadata.exception(f'Failed graph execution {graph_exec.graph_exec_id}: {e}')\n    error = e\nfinally:\n    if not cancel.is_set():\n        finished = True\n        cancel.set()\n    cancel_thread.join()\n    return (exec_stats, error)",
                "queue = ExecutionQueue[NodeExecutionEntry]()"
            ]
        },
        {
            "id": "109",
            "type": "block",
            "statements": [
                "node_exec",
                "graph_exec.start_node_execs"
            ]
        },
        {
            "id": "110",
            "type": "block",
            "statements": [
                "queue.add(node_exec)"
            ]
        },
        {
            "id": "111",
            "type": "block",
            "statements": [
                "running_executions: dict[str, AsyncResult] = {}",
                "def make_exec_callback(exec_data: NodeExecutionEntry):\n    node_id = exec_data.node_id\n\n    def callback(result: object):\n        running_executions.pop(node_id)\n        nonlocal exec_stats\n        if isinstance(result, dict):\n            exec_stats['node_count'] += 1\n            exec_stats['nodes_cputime'] += result.get('cputime', 0)\n            exec_stats['nodes_walltime'] += result.get('walltime', 0)\n    return callback",
                "node_id = exec_data.node_id",
                "def callback(result: object):\n    running_executions.pop(node_id)\n    nonlocal exec_stats\n    if isinstance(result, dict):\n        exec_stats['node_count'] += 1\n        exec_stats['nodes_cputime'] += result.get('cputime', 0)\n        exec_stats['nodes_walltime'] += result.get('walltime', 0)",
                "running_executions.pop(node_id)",
                "nonlocal exec_stats",
                "isinstance(result, dict)"
            ]
        },
        {
            "id": "112",
            "type": "block",
            "statements": [
                "exec_stats['node_count'] += 1",
                "exec_stats['nodes_cputime'] += result.get('cputime', 0)",
                "exec_stats['nodes_walltime'] += result.get('walltime', 0)"
            ]
        },
        {
            "id": "113",
            "type": "block",
            "statements": []
        },
        {
            "id": "114",
            "type": "block",
            "statements": [
                "return callback"
            ]
        },
        {
            "id": "115",
            "type": "block",
            "statements": [
                "not queue.empty()"
            ]
        },
        {
            "id": "116",
            "type": "block",
            "statements": [
                "cancel.is_set()"
            ]
        },
        {
            "id": "117",
            "type": "block",
            "statements": [
                "log_metadata.info(f'Finished graph execution {graph_exec.graph_exec_id}')",
                "log_metadata.exception(f'Failed graph execution {graph_exec.graph_exec_id}: {e}')",
                "error = e",
                "not cancel.is_set()"
            ]
        },
        {
            "id": "118",
            "type": "block",
            "statements": [
                "error = RuntimeError('Execution is cancelled')",
                "return (exec_stats, error)"
            ]
        },
        {
            "id": "119",
            "type": "block",
            "statements": []
        },
        {
            "id": "120",
            "type": "block",
            "statements": [
                "exec_data = queue.get()",
                "execution = running_executions.get(exec_data.node_id)",
                "execution and (not execution.ready())"
            ]
        },
        {
            "id": "121",
            "type": "block",
            "statements": [
                "execution.wait()"
            ]
        },
        {
            "id": "122",
            "type": "block",
            "statements": []
        },
        {
            "id": "123",
            "type": "block",
            "statements": [
                "log_metadata.debug(f'Dispatching node execution {exec_data.node_exec_id} for node {exec_data.node_id}')",
                "running_executions[exec_data.node_id] = cls.executor.apply_async(cls.on_node_execution, (queue, exec_data), callback=make_exec_callback(exec_data))"
            ]
        },
        {
            "id": "124",
            "type": "block",
            "statements": [
                "queue.empty() and running_executions"
            ]
        },
        {
            "id": "125",
            "type": "block",
            "statements": [
                "log_metadata.debug(f'Queue empty; running nodes: {list(running_executions.keys())}')"
            ]
        },
        {
            "id": "126",
            "type": "block",
            "statements": []
        },
        {
            "id": "127",
            "type": "block",
            "statements": [
                "(node_id, execution)",
                "list(running_executions.items())"
            ]
        },
        {
            "id": "128",
            "type": "block",
            "statements": [
                "cancel.is_set()"
            ]
        },
        {
            "id": "129",
            "type": "block",
            "statements": []
        },
        {
            "id": "130",
            "type": "block",
            "statements": [
                "error = RuntimeError('Execution is cancelled')",
                "return (exec_stats, error)"
            ]
        },
        {
            "id": "131",
            "type": "block",
            "statements": []
        },
        {
            "id": "132",
            "type": "block",
            "statements": [
                "not queue.empty()"
            ]
        },
        {
            "id": "133",
            "type": "block",
            "statements": [
                "break"
            ]
        },
        {
            "id": "134",
            "type": "block",
            "statements": []
        },
        {
            "id": "135",
            "type": "block",
            "statements": [
                "log_metadata.debug(f'Waiting on execution of node {node_id}')",
                "execution.wait(3)"
            ]
        },
        {
            "id": "136",
            "type": "block",
            "statements": [
                "finished = True",
                "cancel.set()"
            ]
        },
        {
            "id": "137",
            "type": "block",
            "statements": []
        },
        {
            "id": "138",
            "type": "block",
            "statements": [
                "cancel_thread.join()",
                "return (exec_stats, error)"
            ]
        },
        {
            "id": "139",
            "type": "block",
            "statements": [
                "class ExecutionManager(AppService):\n\n    def __init__(self):\n        super().__init__()\n        self.use_redis = True\n        self.use_supabase = True\n        self.pool_size = settings.config.num_graph_workers\n        self.queue = ExecutionQueue[GraphExecutionEntry]()\n        self.active_graph_runs: dict[str, tuple[Future, threading.Event]] = {}\n\n    @classmethod\n    def get_port(cls) -> int:\n        return settings.config.execution_manager_port\n\n    def run_service(self):\n        from backend.integrations.credentials_store import IntegrationCredentialsStore\n        self.credentials_store = IntegrationCredentialsStore()\n        self.executor = ProcessPoolExecutor(max_workers=self.pool_size, initializer=Executor.on_graph_executor_start)\n        sync_manager = multiprocessing.Manager()\n        logger.info(f'[{self.service_name}] Started with max-{self.pool_size} graph workers')\n        while True:\n            graph_exec_data = self.queue.get()\n            graph_exec_id = graph_exec_data.graph_exec_id\n            logger.debug(f'[ExecutionManager] Dispatching graph execution {graph_exec_id}')\n            cancel_event = sync_manager.Event()\n            future = self.executor.submit(Executor.on_graph_execution, graph_exec_data, cancel_event)\n            self.active_graph_runs[graph_exec_id] = (future, cancel_event)\n            future.add_done_callback(lambda _: self.active_graph_runs.pop(graph_exec_id, None))\n\n    def cleanup(self):\n        logger.info(f'[{__class__.__name__}] \u23f3 Shutting down graph executor pool...')\n        self.executor.shutdown(cancel_futures=True)\n        super().cleanup()\n\n    @property\n    def db_client(self) -> 'DatabaseManager':\n        return get_db_client()\n\n    @expose\n    def add_execution(self, graph_id: str, data: BlockInput, user_id: str, graph_version: int | None=None) -> GraphExecutionEntry:\n        graph: GraphModel | None = self.db_client.get_graph(graph_id=graph_id, user_id=user_id, version=graph_version)\n        if not graph:\n            raise ValueError(f'Graph #{graph_id} not found.')\n        graph.validate_graph(for_run=True)\n        self._validate_node_input_credentials(graph, user_id)\n        nodes_input = []\n        for node in graph.starting_nodes:\n            input_data = {}\n            block = get_block(node.block_id)\n            if not block or block.block_type == BlockType.NOTE:\n                continue\n            if block.block_type == BlockType.INPUT:\n                name = node.input_default.get('name')\n                if name and name in data:\n                    input_data = {'value': data[name]}\n            webhook_payload_key = f'webhook_{node.webhook_id}_payload'\n            if block.block_type in (BlockType.WEBHOOK, BlockType.WEBHOOK_MANUAL) and node.webhook_id:\n                if webhook_payload_key not in data:\n                    raise ValueError(f'Node {block.name} #{node.id} webhook payload is missing')\n                input_data = {'payload': data[webhook_payload_key]}\n            (input_data, error) = validate_exec(node, input_data)\n            if input_data is None:\n                raise ValueError(error)\n            else:\n                nodes_input.append((node.id, input_data))\n        (graph_exec_id, node_execs) = self.db_client.create_graph_execution(graph_id=graph_id, graph_version=graph.version, nodes_input=nodes_input, user_id=user_id)\n        starting_node_execs = []\n        for node_exec in node_execs:\n            starting_node_execs.append(NodeExecutionEntry(user_id=user_id, graph_exec_id=node_exec.graph_exec_id, graph_id=node_exec.graph_id, node_exec_id=node_exec.node_exec_id, node_id=node_exec.node_id, data=node_exec.input_data))\n            exec_update = self.db_client.update_execution_status(node_exec.node_exec_id, ExecutionStatus.QUEUED, node_exec.input_data)\n            self.db_client.send_execution_update(exec_update)\n        graph_exec = GraphExecutionEntry(user_id=user_id, graph_id=graph_id, graph_exec_id=graph_exec_id, start_node_execs=starting_node_execs)\n        self.queue.add(graph_exec)\n        return graph_exec\n\n    @expose\n    def cancel_execution(self, graph_exec_id: str) -> None:\n        \"\"\"\n        Mechanism:\n        1. Set the cancel event\n        2. Graph executor's cancel handler thread detects the event, terminates workers,\n           reinitializes worker pool, and returns.\n        3. Update execution statuses in DB and set `error` outputs to `\"TERMINATED\"`.\n        \"\"\"\n        if graph_exec_id not in self.active_graph_runs:\n            raise Exception(f'Graph execution #{graph_exec_id} not active/running: possibly already completed/cancelled.')\n        (future, cancel_event) = self.active_graph_runs[graph_exec_id]\n        if cancel_event.is_set():\n            return\n        cancel_event.set()\n        future.result()\n        node_execs = self.db_client.get_execution_results(graph_exec_id)\n        for node_exec in node_execs:\n            if node_exec.status not in (ExecutionStatus.COMPLETED, ExecutionStatus.FAILED):\n                self.db_client.upsert_execution_output(node_exec.node_exec_id, 'error', 'TERMINATED')\n                exec_update = self.db_client.update_execution_status(node_exec.node_exec_id, ExecutionStatus.FAILED)\n                self.db_client.send_execution_update(exec_update)\n\n    def _validate_node_input_credentials(self, graph: GraphModel, user_id: str):\n        \"\"\"Checks all credentials for all nodes of the graph\"\"\"\n        for node in graph.nodes:\n            block = get_block(node.block_id)\n            if not block:\n                raise ValueError(f'Unknown block {node.block_id} for node #{node.id}')\n            model_fields = cast(type[BaseModel], block.input_schema).model_fields\n            if CREDENTIALS_FIELD_NAME not in model_fields:\n                continue\n            field = model_fields[CREDENTIALS_FIELD_NAME]\n            credentials_meta_type = cast(CredentialsMetaInput, field.annotation)\n            credentials_meta = credentials_meta_type.model_validate(node.input_default[CREDENTIALS_FIELD_NAME])\n            credentials = self.credentials_store.get_creds_by_id(user_id, credentials_meta.id)\n            if not credentials:\n                raise ValueError(f'Unknown credentials #{credentials_meta.id} for node #{node.id}')\n            if credentials.provider != credentials_meta.provider or credentials.type != credentials_meta.type:\n                logger.warning(f'Invalid credentials #{credentials.id} for node #{node.id}: type/provider mismatch: {credentials_meta.type}<>{credentials.type};{credentials_meta.provider}<>{credentials.provider}')\n                raise ValueError(f'Invalid credentials #{credentials.id} for node #{node.id}: type/provider mismatch')",
                "def __init__(self):\n    super().__init__()\n    self.use_redis = True\n    self.use_supabase = True\n    self.pool_size = settings.config.num_graph_workers\n    self.queue = ExecutionQueue[GraphExecutionEntry]()\n    self.active_graph_runs: dict[str, tuple[Future, threading.Event]] = {}",
                "super().__init__()",
                "self.use_redis = True",
                "self.use_supabase = True",
                "self.pool_size = settings.config.num_graph_workers",
                "self.queue = ExecutionQueue[GraphExecutionEntry]()",
                "self.active_graph_runs: dict[str, tuple[Future, threading.Event]] = {}",
                "@classmethod\ndef get_port(cls) -> int:\n    return settings.config.execution_manager_port",
                "return settings.config.execution_manager_port"
            ]
        },
        {
            "id": "140",
            "type": "block",
            "statements": [
                "def run_service(self):\n    from backend.integrations.credentials_store import IntegrationCredentialsStore\n    self.credentials_store = IntegrationCredentialsStore()\n    self.executor = ProcessPoolExecutor(max_workers=self.pool_size, initializer=Executor.on_graph_executor_start)\n    sync_manager = multiprocessing.Manager()\n    logger.info(f'[{self.service_name}] Started with max-{self.pool_size} graph workers')\n    while True:\n        graph_exec_data = self.queue.get()\n        graph_exec_id = graph_exec_data.graph_exec_id\n        logger.debug(f'[ExecutionManager] Dispatching graph execution {graph_exec_id}')\n        cancel_event = sync_manager.Event()\n        future = self.executor.submit(Executor.on_graph_execution, graph_exec_data, cancel_event)\n        self.active_graph_runs[graph_exec_id] = (future, cancel_event)\n        future.add_done_callback(lambda _: self.active_graph_runs.pop(graph_exec_id, None))",
                "from backend.integrations.credentials_store import IntegrationCredentialsStore",
                "self.credentials_store = IntegrationCredentialsStore()",
                "self.executor = ProcessPoolExecutor(max_workers=self.pool_size, initializer=Executor.on_graph_executor_start)",
                "sync_manager = multiprocessing.Manager()",
                "logger.info(f'[{self.service_name}] Started with max-{self.pool_size} graph workers')"
            ]
        },
        {
            "id": "141",
            "type": "block",
            "statements": [
                "True"
            ]
        },
        {
            "id": "142",
            "type": "block",
            "statements": [
                "graph_exec_data = self.queue.get()",
                "graph_exec_id = graph_exec_data.graph_exec_id",
                "logger.debug(f'[ExecutionManager] Dispatching graph execution {graph_exec_id}')",
                "cancel_event = sync_manager.Event()",
                "future = self.executor.submit(Executor.on_graph_execution, graph_exec_data, cancel_event)",
                "self.active_graph_runs[graph_exec_id] = (future, cancel_event)",
                "future.add_done_callback(lambda _: self.active_graph_runs.pop(graph_exec_id, None))"
            ]
        },
        {
            "id": "143",
            "type": "block",
            "statements": [
                "def cleanup(self):\n    logger.info(f'[{__class__.__name__}] \u23f3 Shutting down graph executor pool...')\n    self.executor.shutdown(cancel_futures=True)\n    super().cleanup()",
                "logger.info(f'[{__class__.__name__}] \u23f3 Shutting down graph executor pool...')",
                "self.executor.shutdown()",
                "super().cleanup()",
                "@property\ndef db_client(self) -> 'DatabaseManager':\n    return get_db_client()",
                "return get_db_client()"
            ]
        },
        {
            "id": "144",
            "type": "block",
            "statements": [
                "@expose\ndef add_execution(self, graph_id: str, data: BlockInput, user_id: str, graph_version: int | None=None) -> GraphExecutionEntry:\n    graph: GraphModel | None = self.db_client.get_graph(graph_id=graph_id, user_id=user_id, version=graph_version)\n    if not graph:\n        raise ValueError(f'Graph #{graph_id} not found.')\n    graph.validate_graph(for_run=True)\n    self._validate_node_input_credentials(graph, user_id)\n    nodes_input = []\n    for node in graph.starting_nodes:\n        input_data = {}\n        block = get_block(node.block_id)\n        if not block or block.block_type == BlockType.NOTE:\n            continue\n        if block.block_type == BlockType.INPUT:\n            name = node.input_default.get('name')\n            if name and name in data:\n                input_data = {'value': data[name]}\n        webhook_payload_key = f'webhook_{node.webhook_id}_payload'\n        if block.block_type in (BlockType.WEBHOOK, BlockType.WEBHOOK_MANUAL) and node.webhook_id:\n            if webhook_payload_key not in data:\n                raise ValueError(f'Node {block.name} #{node.id} webhook payload is missing')\n            input_data = {'payload': data[webhook_payload_key]}\n        (input_data, error) = validate_exec(node, input_data)\n        if input_data is None:\n            raise ValueError(error)\n        else:\n            nodes_input.append((node.id, input_data))\n    (graph_exec_id, node_execs) = self.db_client.create_graph_execution(graph_id=graph_id, graph_version=graph.version, nodes_input=nodes_input, user_id=user_id)\n    starting_node_execs = []\n    for node_exec in node_execs:\n        starting_node_execs.append(NodeExecutionEntry(user_id=user_id, graph_exec_id=node_exec.graph_exec_id, graph_id=node_exec.graph_id, node_exec_id=node_exec.node_exec_id, node_id=node_exec.node_id, data=node_exec.input_data))\n        exec_update = self.db_client.update_execution_status(node_exec.node_exec_id, ExecutionStatus.QUEUED, node_exec.input_data)\n        self.db_client.send_execution_update(exec_update)\n    graph_exec = GraphExecutionEntry(user_id=user_id, graph_id=graph_id, graph_exec_id=graph_exec_id, start_node_execs=starting_node_execs)\n    self.queue.add(graph_exec)\n    return graph_exec",
                "graph: GraphModel | None = self.db_client.get_graph(graph_id=graph_id, user_id=user_id, version=graph_version)",
                "not graph"
            ]
        },
        {
            "id": "145",
            "type": "block",
            "statements": [
                "raise ValueError(f'Graph #{graph_id} not found.')"
            ]
        },
        {
            "id": "146",
            "type": "block",
            "statements": []
        },
        {
            "id": "147",
            "type": "block",
            "statements": [
                "graph.validate_graph()",
                "self._validate_node_input_credentials(graph, user_id)",
                "nodes_input = []"
            ]
        },
        {
            "id": "148",
            "type": "block",
            "statements": [
                "node",
                "graph.starting_nodes"
            ]
        },
        {
            "id": "149",
            "type": "block",
            "statements": [
                "input_data = {}",
                "block = get_block(node.block_id)",
                "not block or block.block_type == BlockType.NOTE"
            ]
        },
        {
            "id": "150",
            "type": "block",
            "statements": [
                "(graph_exec_id, node_execs) = self.db_client.create_graph_execution(graph_id=graph_id, graph_version=graph.version, nodes_input=nodes_input, user_id=user_id)",
                "starting_node_execs = []"
            ]
        },
        {
            "id": "151",
            "type": "block",
            "statements": [
                "continue"
            ]
        },
        {
            "id": "152",
            "type": "block",
            "statements": []
        },
        {
            "id": "153",
            "type": "block",
            "statements": [
                "block.block_type Eq BlockType.INPUT"
            ]
        },
        {
            "id": "154",
            "type": "block",
            "statements": [
                "name = node.input_default.get('name')",
                "name and name in data"
            ]
        },
        {
            "id": "155",
            "type": "block",
            "statements": []
        },
        {
            "id": "156",
            "type": "block",
            "statements": [
                "webhook_payload_key = f'webhook_{node.webhook_id}_payload'",
                "block.block_type in (BlockType.WEBHOOK, BlockType.WEBHOOK_MANUAL) and node.webhook_id"
            ]
        },
        {
            "id": "157",
            "type": "block",
            "statements": [
                "input_data = {'value': data[name]}"
            ]
        },
        {
            "id": "158",
            "type": "block",
            "statements": []
        },
        {
            "id": "159",
            "type": "block",
            "statements": []
        },
        {
            "id": "160",
            "type": "block",
            "statements": [
                "webhook_payload_key NotIn data"
            ]
        },
        {
            "id": "161",
            "type": "block",
            "statements": []
        },
        {
            "id": "162",
            "type": "block",
            "statements": [
                "(input_data, error) = validate_exec(node, input_data)",
                "input_data Is None"
            ]
        },
        {
            "id": "163",
            "type": "block",
            "statements": [
                "raise ValueError(f'Node {block.name} #{node.id} webhook payload is missing')"
            ]
        },
        {
            "id": "164",
            "type": "block",
            "statements": []
        },
        {
            "id": "165",
            "type": "block",
            "statements": [
                "input_data = {'payload': data[webhook_payload_key]}"
            ]
        },
        {
            "id": "166",
            "type": "block",
            "statements": [
                "raise ValueError(error)"
            ]
        },
        {
            "id": "167",
            "type": "block",
            "statements": [
                "nodes_input.append((node.id, input_data))"
            ]
        },
        {
            "id": "168",
            "type": "block",
            "statements": []
        },
        {
            "id": "169",
            "type": "block",
            "statements": [
                "node_exec",
                "node_execs"
            ]
        },
        {
            "id": "170",
            "type": "block",
            "statements": [
                "starting_node_execs.append(NodeExecutionEntry())",
                "exec_update = self.db_client.update_execution_status(node_exec.node_exec_id, ExecutionStatus.QUEUED, node_exec.input_data)",
                "self.db_client.send_execution_update(exec_update)"
            ]
        },
        {
            "id": "171",
            "type": "block",
            "statements": [
                "graph_exec = GraphExecutionEntry(user_id=user_id, graph_id=graph_id, graph_exec_id=graph_exec_id, start_node_execs=starting_node_execs)",
                "self.queue.add(graph_exec)",
                "return graph_exec"
            ]
        },
        {
            "id": "172",
            "type": "block",
            "statements": [
                "@expose\ndef cancel_execution(self, graph_exec_id: str) -> None:\n    \"\"\"\n        Mechanism:\n        1. Set the cancel event\n        2. Graph executor's cancel handler thread detects the event, terminates workers,\n           reinitializes worker pool, and returns.\n        3. Update execution statuses in DB and set `error` outputs to `\"TERMINATED\"`.\n        \"\"\"\n    if graph_exec_id not in self.active_graph_runs:\n        raise Exception(f'Graph execution #{graph_exec_id} not active/running: possibly already completed/cancelled.')\n    (future, cancel_event) = self.active_graph_runs[graph_exec_id]\n    if cancel_event.is_set():\n        return\n    cancel_event.set()\n    future.result()\n    node_execs = self.db_client.get_execution_results(graph_exec_id)\n    for node_exec in node_execs:\n        if node_exec.status not in (ExecutionStatus.COMPLETED, ExecutionStatus.FAILED):\n            self.db_client.upsert_execution_output(node_exec.node_exec_id, 'error', 'TERMINATED')\n            exec_update = self.db_client.update_execution_status(node_exec.node_exec_id, ExecutionStatus.FAILED)\n            self.db_client.send_execution_update(exec_update)",
                "'\\n        Mechanism:\\n        1. Set the cancel event\\n        2. Graph executor\\'s cancel handler thread detects the event, terminates workers,\\n           reinitializes worker pool, and returns.\\n        3. Update execution statuses in DB and set `error` outputs to `\"TERMINATED\"`.\\n        '",
                "graph_exec_id NotIn self.active_graph_runs"
            ]
        },
        {
            "id": "173",
            "type": "block",
            "statements": [
                "raise Exception(f'Graph execution #{graph_exec_id} not active/running: possibly already completed/cancelled.')"
            ]
        },
        {
            "id": "174",
            "type": "block",
            "statements": []
        },
        {
            "id": "175",
            "type": "block",
            "statements": [
                "(future, cancel_event) = self.active_graph_runs[graph_exec_id]",
                "cancel_event.is_set()"
            ]
        },
        {
            "id": "176",
            "type": "block",
            "statements": [
                "return"
            ]
        },
        {
            "id": "177",
            "type": "block",
            "statements": []
        },
        {
            "id": "178",
            "type": "block",
            "statements": [
                "cancel_event.set()",
                "future.result()",
                "node_execs = self.db_client.get_execution_results(graph_exec_id)"
            ]
        },
        {
            "id": "179",
            "type": "block",
            "statements": [
                "node_exec",
                "node_execs"
            ]
        },
        {
            "id": "180",
            "type": "block",
            "statements": [
                "node_exec.status NotIn (ExecutionStatus.COMPLETED, ExecutionStatus.FAILED)"
            ]
        },
        {
            "id": "181",
            "type": "block",
            "statements": [
                "def _validate_node_input_credentials(self, graph: GraphModel, user_id: str):\n    \"\"\"Checks all credentials for all nodes of the graph\"\"\"\n    for node in graph.nodes:\n        block = get_block(node.block_id)\n        if not block:\n            raise ValueError(f'Unknown block {node.block_id} for node #{node.id}')\n        model_fields = cast(type[BaseModel], block.input_schema).model_fields\n        if CREDENTIALS_FIELD_NAME not in model_fields:\n            continue\n        field = model_fields[CREDENTIALS_FIELD_NAME]\n        credentials_meta_type = cast(CredentialsMetaInput, field.annotation)\n        credentials_meta = credentials_meta_type.model_validate(node.input_default[CREDENTIALS_FIELD_NAME])\n        credentials = self.credentials_store.get_creds_by_id(user_id, credentials_meta.id)\n        if not credentials:\n            raise ValueError(f'Unknown credentials #{credentials_meta.id} for node #{node.id}')\n        if credentials.provider != credentials_meta.provider or credentials.type != credentials_meta.type:\n            logger.warning(f'Invalid credentials #{credentials.id} for node #{node.id}: type/provider mismatch: {credentials_meta.type}<>{credentials.type};{credentials_meta.provider}<>{credentials.provider}')\n            raise ValueError(f'Invalid credentials #{credentials.id} for node #{node.id}: type/provider mismatch')",
                "'Checks all credentials for all nodes of the graph'"
            ]
        },
        {
            "id": "182",
            "type": "block",
            "statements": [
                "self.db_client.upsert_execution_output(node_exec.node_exec_id, 'error', 'TERMINATED')",
                "exec_update = self.db_client.update_execution_status(node_exec.node_exec_id, ExecutionStatus.FAILED)",
                "self.db_client.send_execution_update(exec_update)"
            ]
        },
        {
            "id": "183",
            "type": "block",
            "statements": []
        },
        {
            "id": "184",
            "type": "block",
            "statements": []
        },
        {
            "id": "185",
            "type": "block",
            "statements": [
                "node",
                "graph.nodes"
            ]
        },
        {
            "id": "186",
            "type": "block",
            "statements": [
                "block = get_block(node.block_id)",
                "not block"
            ]
        },
        {
            "id": "187",
            "type": "block",
            "statements": [
                "@thread_cached\ndef get_db_client() -> 'DatabaseManager':\n    from backend.executor import DatabaseManager\n    return get_service_client(DatabaseManager)",
                "from backend.executor import DatabaseManager",
                "return get_service_client(DatabaseManager)"
            ]
        },
        {
            "id": "188",
            "type": "block",
            "statements": [
                "raise ValueError(f'Unknown block {node.block_id} for node #{node.id}')"
            ]
        },
        {
            "id": "189",
            "type": "block",
            "statements": []
        },
        {
            "id": "190",
            "type": "block",
            "statements": [
                "model_fields = cast(type[BaseModel], block.input_schema).model_fields",
                "CREDENTIALS_FIELD_NAME NotIn model_fields"
            ]
        },
        {
            "id": "191",
            "type": "block",
            "statements": [
                "continue"
            ]
        },
        {
            "id": "192",
            "type": "block",
            "statements": []
        },
        {
            "id": "193",
            "type": "block",
            "statements": [
                "field = model_fields[CREDENTIALS_FIELD_NAME]",
                "credentials_meta_type = cast(CredentialsMetaInput, field.annotation)",
                "credentials_meta = credentials_meta_type.model_validate(node.input_default[CREDENTIALS_FIELD_NAME])",
                "credentials = self.credentials_store.get_creds_by_id(user_id, credentials_meta.id)",
                "not credentials"
            ]
        },
        {
            "id": "194",
            "type": "block",
            "statements": [
                "raise ValueError(f'Unknown credentials #{credentials_meta.id} for node #{node.id}')"
            ]
        },
        {
            "id": "195",
            "type": "block",
            "statements": []
        },
        {
            "id": "196",
            "type": "block",
            "statements": [
                "credentials.provider != credentials_meta.provider or credentials.type != credentials_meta.type"
            ]
        },
        {
            "id": "197",
            "type": "block",
            "statements": [
                "logger.warning(f'Invalid credentials #{credentials.id} for node #{node.id}: type/provider mismatch: {credentials_meta.type}<>{credentials.type};{credentials_meta.provider}<>{credentials.provider}')",
                "raise ValueError(f'Invalid credentials #{credentials.id} for node #{node.id}: type/provider mismatch')"
            ]
        },
        {
            "id": "198",
            "type": "block",
            "statements": []
        },
        {
            "id": "199",
            "type": "block",
            "statements": []
        },
        {
            "id": "200",
            "type": "block",
            "statements": [
                "@contextmanager\ndef synchronized(key: str, timeout: int=60):\n    lock: RedisLock = redis.get_redis().lock(f'lock:{key}', timeout=timeout)\n    try:\n        lock.acquire()\n        yield\n    finally:\n        if lock.locked():\n            lock.release()",
                "lock: RedisLock = redis.get_redis().lock(f'lock:{key}', timeout=timeout)",
                "try:\n    lock.acquire()\n    yield\nfinally:\n    if lock.locked():\n        lock.release()",
                "lock.acquire()",
                "(yield)",
                "lock.locked()"
            ]
        },
        {
            "id": "201",
            "type": "block",
            "statements": [
                "lock.release()"
            ]
        },
        {
            "id": "202",
            "type": "block",
            "statements": []
        },
        {
            "id": "203",
            "type": "block",
            "statements": [
                "def llprint(message: str):\n    \"\"\"\n    Low-level print/log helper function for use in signal handlers.\n    Regular log/print statements are not allowed in signal handlers.\n    \"\"\"\n    if logger.getEffectiveLevel() == logging.DEBUG:\n        os.write(sys.stdout.fileno(), (message + '\\n').encode())",
                "'\\n    Low-level print/log helper function for use in signal handlers.\\n    Regular log/print statements are not allowed in signal handlers.\\n    '",
                "logger.getEffectiveLevel() Eq logging.DEBUG"
            ]
        },
        {
            "id": "204",
            "type": "block",
            "statements": [
                "os.write(sys.stdout.fileno(), (message + '\\n').encode())"
            ]
        },
        {
            "id": "205",
            "type": "block",
            "statements": []
        },
        {
            "id": "206",
            "type": "block",
            "statements": []
        }
    ],
    "edges": [
        {
            "source": "1",
            "target": "2",
            "type": "true"
        },
        {
            "source": "1",
            "target": "3",
            "type": "false"
        },
        {
            "source": "2",
            "target": "4",
            "type": "next"
        },
        {
            "source": "3",
            "target": "4",
            "type": "next"
        },
        {
            "source": "6",
            "target": "7",
            "type": "true"
        },
        {
            "source": "6",
            "target": "8",
            "type": "false"
        },
        {
            "source": "8",
            "target": "9",
            "type": "next"
        },
        {
            "source": "9",
            "target": "10",
            "type": "true"
        },
        {
            "source": "9",
            "target": "11",
            "type": "false"
        },
        {
            "source": "11",
            "target": "12",
            "type": "next"
        },
        {
            "source": "12",
            "target": "13",
            "type": "true"
        },
        {
            "source": "12",
            "target": "14",
            "type": "false"
        },
        {
            "source": "13",
            "target": "15",
            "type": "next"
        },
        {
            "source": "14",
            "target": "15",
            "type": "next"
        },
        {
            "source": "15",
            "target": "16",
            "type": "true"
        },
        {
            "source": "15",
            "target": "17",
            "type": "false"
        },
        {
            "source": "16",
            "target": "18",
            "type": "next"
        },
        {
            "source": "17",
            "target": "18",
            "type": "next"
        },
        {
            "source": "18",
            "target": "19",
            "type": "true"
        },
        {
            "source": "18",
            "target": "20",
            "type": "false"
        },
        {
            "source": "19",
            "target": "21",
            "type": "next"
        },
        {
            "source": "20",
            "target": "21",
            "type": "next"
        },
        {
            "source": "21",
            "target": "22",
            "type": "next"
        },
        {
            "source": "22",
            "target": "23",
            "type": "true"
        },
        {
            "source": "22",
            "target": "24",
            "type": "false"
        },
        {
            "source": "23",
            "target": "25",
            "type": "next"
        },
        {
            "source": "24",
            "target": "28",
            "type": "next"
        },
        {
            "source": "25",
            "target": "26",
            "type": "true"
        },
        {
            "source": "25",
            "target": "27",
            "type": "false"
        },
        {
            "source": "26",
            "target": "25",
            "type": "next"
        },
        {
            "source": "27",
            "target": "22",
            "type": "next"
        },
        {
            "source": "28",
            "target": "29",
            "type": "true"
        },
        {
            "source": "28",
            "target": "30",
            "type": "false"
        },
        {
            "source": "29",
            "target": "28",
            "type": "next"
        },
        {
            "source": "30",
            "target": "31",
            "type": "true"
        },
        {
            "source": "30",
            "target": "32",
            "type": "false"
        },
        {
            "source": "31",
            "target": "33",
            "type": "next"
        },
        {
            "source": "32",
            "target": "33",
            "type": "next"
        },
        {
            "source": "33",
            "target": "34",
            "type": "true"
        },
        {
            "source": "33",
            "target": "35",
            "type": "false"
        },
        {
            "source": "34",
            "target": "36",
            "type": "next"
        },
        {
            "source": "35",
            "target": "36",
            "type": "next"
        },
        {
            "source": "36",
            "target": "37",
            "type": "true"
        },
        {
            "source": "36",
            "target": "38",
            "type": "false"
        },
        {
            "source": "37",
            "target": "39",
            "type": "next"
        },
        {
            "source": "38",
            "target": "39",
            "type": "next"
        },
        {
            "source": "40",
            "target": "41",
            "type": "true"
        },
        {
            "source": "40",
            "target": "42",
            "type": "false"
        },
        {
            "source": "42",
            "target": "43",
            "type": "next"
        },
        {
            "source": "43",
            "target": "44",
            "type": "true"
        },
        {
            "source": "43",
            "target": "45",
            "type": "false"
        },
        {
            "source": "44",
            "target": "47",
            "type": "next"
        },
        {
            "source": "45",
            "target": "46",
            "type": "next"
        },
        {
            "source": "46",
            "target": "50",
            "type": "true"
        },
        {
            "source": "46",
            "target": "51",
            "type": "false"
        },
        {
            "source": "47",
            "target": "48",
            "type": "true"
        },
        {
            "source": "47",
            "target": "49",
            "type": "false"
        },
        {
            "source": "48",
            "target": "47",
            "type": "next"
        },
        {
            "source": "49",
            "target": "46",
            "type": "next"
        },
        {
            "source": "51",
            "target": "52",
            "type": "next"
        },
        {
            "source": "52",
            "target": "53",
            "type": "true"
        },
        {
            "source": "52",
            "target": "54",
            "type": "false"
        },
        {
            "source": "54",
            "target": "55",
            "type": "next"
        },
        {
            "source": "55",
            "target": "56",
            "type": "next"
        },
        {
            "source": "56",
            "target": "57",
            "type": "true"
        },
        {
            "source": "56",
            "target": "58",
            "type": "false"
        },
        {
            "source": "57",
            "target": "59",
            "type": "next"
        },
        {
            "source": "59",
            "target": "60",
            "type": "true"
        },
        {
            "source": "59",
            "target": "61",
            "type": "false"
        },
        {
            "source": "60",
            "target": "59",
            "type": "next"
        },
        {
            "source": "61",
            "target": "62",
            "type": "true"
        },
        {
            "source": "61",
            "target": "63",
            "type": "false"
        },
        {
            "source": "62",
            "target": "64",
            "type": "next"
        },
        {
            "source": "63",
            "target": "64",
            "type": "next"
        },
        {
            "source": "64",
            "target": "56",
            "type": "next"
        },
        {
            "source": "66",
            "target": "67",
            "type": "true"
        },
        {
            "source": "66",
            "target": "68",
            "type": "false"
        },
        {
            "source": "68",
            "target": "69",
            "type": "next"
        },
        {
            "source": "69",
            "target": "70",
            "type": "true"
        },
        {
            "source": "69",
            "target": "71",
            "type": "false"
        },
        {
            "source": "71",
            "target": "74",
            "type": "next"
        },
        {
            "source": "72",
            "target": "80",
            "type": "true"
        },
        {
            "source": "72",
            "target": "81",
            "type": "false"
        },
        {
            "source": "73",
            "target": "72",
            "type": "next"
        },
        {
            "source": "74",
            "target": "75",
            "type": "true"
        },
        {
            "source": "74",
            "target": "76",
            "type": "false"
        },
        {
            "source": "75",
            "target": "77",
            "type": "true"
        },
        {
            "source": "75",
            "target": "78",
            "type": "false"
        },
        {
            "source": "76",
            "target": "72",
            "type": "next"
        },
        {
            "source": "77",
            "target": "79",
            "type": "next"
        },
        {
            "source": "78",
            "target": "79",
            "type": "next"
        },
        {
            "source": "79",
            "target": "74",
            "type": "next"
        },
        {
            "source": "81",
            "target": "82",
            "type": "next"
        },
        {
            "source": "82",
            "target": "83",
            "type": "true"
        },
        {
            "source": "82",
            "target": "84",
            "type": "false"
        },
        {
            "source": "83",
            "target": "85",
            "type": "next"
        },
        {
            "source": "84",
            "target": "85",
            "type": "next"
        },
        {
            "source": "85",
            "target": "86",
            "type": "true"
        },
        {
            "source": "85",
            "target": "87",
            "type": "false"
        },
        {
            "source": "87",
            "target": "88",
            "type": "next"
        },
        {
            "source": "88",
            "target": "89",
            "type": "true"
        },
        {
            "source": "88",
            "target": "90",
            "type": "false"
        },
        {
            "source": "90",
            "target": "91",
            "type": "next"
        },
        {
            "source": "92",
            "target": "93",
            "type": "true"
        },
        {
            "source": "92",
            "target": "94",
            "type": "false"
        },
        {
            "source": "94",
            "target": "95",
            "type": "next"
        },
        {
            "source": "95",
            "target": "96",
            "type": "true"
        },
        {
            "source": "95",
            "target": "97",
            "type": "false"
        },
        {
            "source": "97",
            "target": "98",
            "type": "next"
        },
        {
            "source": "99",
            "target": "100",
            "type": "next"
        },
        {
            "source": "100",
            "target": "101",
            "type": "true"
        },
        {
            "source": "100",
            "target": "102",
            "type": "false"
        },
        {
            "source": "101",
            "target": "100",
            "type": "next"
        },
        {
            "source": "102",
            "target": "103",
            "type": "next"
        },
        {
            "source": "103",
            "target": "104",
            "type": "true"
        },
        {
            "source": "103",
            "target": "105",
            "type": "false"
        },
        {
            "source": "104",
            "target": "103",
            "type": "next"
        },
        {
            "source": "105",
            "target": "106",
            "type": "true"
        },
        {
            "source": "105",
            "target": "107",
            "type": "false"
        },
        {
            "source": "107",
            "target": "108",
            "type": "next"
        },
        {
            "source": "108",
            "target": "109",
            "type": "next"
        },
        {
            "source": "109",
            "target": "110",
            "type": "true"
        },
        {
            "source": "109",
            "target": "111",
            "type": "false"
        },
        {
            "source": "110",
            "target": "109",
            "type": "next"
        },
        {
            "source": "111",
            "target": "112",
            "type": "true"
        },
        {
            "source": "111",
            "target": "113",
            "type": "false"
        },
        {
            "source": "112",
            "target": "114",
            "type": "next"
        },
        {
            "source": "113",
            "target": "114",
            "type": "next"
        },
        {
            "source": "115",
            "target": "116",
            "type": "true"
        },
        {
            "source": "115",
            "target": "117",
            "type": "false"
        },
        {
            "source": "116",
            "target": "118",
            "type": "true"
        },
        {
            "source": "116",
            "target": "119",
            "type": "false"
        },
        {
            "source": "117",
            "target": "136",
            "type": "true"
        },
        {
            "source": "117",
            "target": "137",
            "type": "false"
        },
        {
            "source": "119",
            "target": "120",
            "type": "next"
        },
        {
            "source": "120",
            "target": "121",
            "type": "true"
        },
        {
            "source": "120",
            "target": "122",
            "type": "false"
        },
        {
            "source": "121",
            "target": "123",
            "type": "next"
        },
        {
            "source": "122",
            "target": "123",
            "type": "next"
        },
        {
            "source": "123",
            "target": "124",
            "type": "next"
        },
        {
            "source": "124",
            "target": "125",
            "type": "true"
        },
        {
            "source": "124",
            "target": "126",
            "type": "false"
        },
        {
            "source": "125",
            "target": "127",
            "type": "next"
        },
        {
            "source": "126",
            "target": "115",
            "type": "next"
        },
        {
            "source": "127",
            "target": "128",
            "type": "true"
        },
        {
            "source": "127",
            "target": "129",
            "type": "false"
        },
        {
            "source": "128",
            "target": "130",
            "type": "true"
        },
        {
            "source": "128",
            "target": "131",
            "type": "false"
        },
        {
            "source": "129",
            "target": "124",
            "type": "next"
        },
        {
            "source": "131",
            "target": "132",
            "type": "next"
        },
        {
            "source": "132",
            "target": "133",
            "type": "true"
        },
        {
            "source": "132",
            "target": "134",
            "type": "false"
        },
        {
            "source": "133",
            "target": "135",
            "type": "next"
        },
        {
            "source": "134",
            "target": "135",
            "type": "next"
        },
        {
            "source": "135",
            "target": "127",
            "type": "next"
        },
        {
            "source": "136",
            "target": "138",
            "type": "next"
        },
        {
            "source": "137",
            "target": "138",
            "type": "next"
        },
        {
            "source": "140",
            "target": "141",
            "type": "next"
        },
        {
            "source": "141",
            "target": "142",
            "type": "true"
        },
        {
            "source": "141",
            "target": "143",
            "type": "false"
        },
        {
            "source": "142",
            "target": "141",
            "type": "next"
        },
        {
            "source": "144",
            "target": "145",
            "type": "true"
        },
        {
            "source": "144",
            "target": "146",
            "type": "false"
        },
        {
            "source": "145",
            "target": "147",
            "type": "next"
        },
        {
            "source": "146",
            "target": "147",
            "type": "next"
        },
        {
            "source": "147",
            "target": "148",
            "type": "next"
        },
        {
            "source": "148",
            "target": "149",
            "type": "true"
        },
        {
            "source": "148",
            "target": "150",
            "type": "false"
        },
        {
            "source": "149",
            "target": "151",
            "type": "true"
        },
        {
            "source": "149",
            "target": "152",
            "type": "false"
        },
        {
            "source": "150",
            "target": "169",
            "type": "next"
        },
        {
            "source": "151",
            "target": "153",
            "type": "next"
        },
        {
            "source": "152",
            "target": "153",
            "type": "next"
        },
        {
            "source": "153",
            "target": "154",
            "type": "true"
        },
        {
            "source": "153",
            "target": "155",
            "type": "false"
        },
        {
            "source": "154",
            "target": "157",
            "type": "true"
        },
        {
            "source": "154",
            "target": "158",
            "type": "false"
        },
        {
            "source": "155",
            "target": "156",
            "type": "next"
        },
        {
            "source": "156",
            "target": "160",
            "type": "true"
        },
        {
            "source": "156",
            "target": "161",
            "type": "false"
        },
        {
            "source": "157",
            "target": "159",
            "type": "next"
        },
        {
            "source": "158",
            "target": "159",
            "type": "next"
        },
        {
            "source": "159",
            "target": "156",
            "type": "next"
        },
        {
            "source": "160",
            "target": "163",
            "type": "true"
        },
        {
            "source": "160",
            "target": "164",
            "type": "false"
        },
        {
            "source": "161",
            "target": "162",
            "type": "next"
        },
        {
            "source": "162",
            "target": "166",
            "type": "true"
        },
        {
            "source": "162",
            "target": "167",
            "type": "false"
        },
        {
            "source": "163",
            "target": "165",
            "type": "next"
        },
        {
            "source": "164",
            "target": "165",
            "type": "next"
        },
        {
            "source": "165",
            "target": "162",
            "type": "next"
        },
        {
            "source": "166",
            "target": "168",
            "type": "next"
        },
        {
            "source": "167",
            "target": "168",
            "type": "next"
        },
        {
            "source": "168",
            "target": "148",
            "type": "next"
        },
        {
            "source": "169",
            "target": "170",
            "type": "true"
        },
        {
            "source": "169",
            "target": "171",
            "type": "false"
        },
        {
            "source": "170",
            "target": "169",
            "type": "next"
        },
        {
            "source": "172",
            "target": "173",
            "type": "true"
        },
        {
            "source": "172",
            "target": "174",
            "type": "false"
        },
        {
            "source": "173",
            "target": "175",
            "type": "next"
        },
        {
            "source": "174",
            "target": "175",
            "type": "next"
        },
        {
            "source": "175",
            "target": "176",
            "type": "true"
        },
        {
            "source": "175",
            "target": "177",
            "type": "false"
        },
        {
            "source": "177",
            "target": "178",
            "type": "next"
        },
        {
            "source": "178",
            "target": "179",
            "type": "next"
        },
        {
            "source": "179",
            "target": "180",
            "type": "true"
        },
        {
            "source": "179",
            "target": "181",
            "type": "false"
        },
        {
            "source": "180",
            "target": "182",
            "type": "true"
        },
        {
            "source": "180",
            "target": "183",
            "type": "false"
        },
        {
            "source": "181",
            "target": "185",
            "type": "next"
        },
        {
            "source": "182",
            "target": "184",
            "type": "next"
        },
        {
            "source": "183",
            "target": "184",
            "type": "next"
        },
        {
            "source": "184",
            "target": "179",
            "type": "next"
        },
        {
            "source": "185",
            "target": "186",
            "type": "true"
        },
        {
            "source": "185",
            "target": "187",
            "type": "false"
        },
        {
            "source": "186",
            "target": "188",
            "type": "true"
        },
        {
            "source": "186",
            "target": "189",
            "type": "false"
        },
        {
            "source": "188",
            "target": "190",
            "type": "next"
        },
        {
            "source": "189",
            "target": "190",
            "type": "next"
        },
        {
            "source": "190",
            "target": "191",
            "type": "true"
        },
        {
            "source": "190",
            "target": "192",
            "type": "false"
        },
        {
            "source": "191",
            "target": "193",
            "type": "next"
        },
        {
            "source": "192",
            "target": "193",
            "type": "next"
        },
        {
            "source": "193",
            "target": "194",
            "type": "true"
        },
        {
            "source": "193",
            "target": "195",
            "type": "false"
        },
        {
            "source": "194",
            "target": "196",
            "type": "next"
        },
        {
            "source": "195",
            "target": "196",
            "type": "next"
        },
        {
            "source": "196",
            "target": "197",
            "type": "true"
        },
        {
            "source": "196",
            "target": "198",
            "type": "false"
        },
        {
            "source": "197",
            "target": "199",
            "type": "next"
        },
        {
            "source": "198",
            "target": "199",
            "type": "next"
        },
        {
            "source": "199",
            "target": "185",
            "type": "next"
        },
        {
            "source": "200",
            "target": "201",
            "type": "true"
        },
        {
            "source": "200",
            "target": "202",
            "type": "false"
        },
        {
            "source": "201",
            "target": "203",
            "type": "next"
        },
        {
            "source": "202",
            "target": "203",
            "type": "next"
        },
        {
            "source": "203",
            "target": "204",
            "type": "true"
        },
        {
            "source": "203",
            "target": "205",
            "type": "false"
        },
        {
            "source": "204",
            "target": "206",
            "type": "next"
        },
        {
            "source": "205",
            "target": "206",
            "type": "next"
        }
    ]
}