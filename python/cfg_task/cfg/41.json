{
    "nodes": [
        {
            "id": "1",
            "type": "block",
            "statements": [
                "'\\n    The approach taken is explained below. I decided to do it simply.\\n    Initially I was considering parsing the data into some sort of\\n    structure and then generating an appropriate README. I am still\\n    considering doing it - but for now this should work. The only issue\\n    I see is that it only sorts the entries at the lowest level, and that\\n    the order of the top-level contents do not match the order of the actual\\n    entries.\\n\\n    This could be extended by having nested blocks, sorting them recursively\\n    and flattening the end structure into a list of lines. Revision 2 maybe ^.^.\\n'",
                "def sort_blocks():\n    with open('README.md', 'r') as read_me_file:\n        read_me = read_me_file.read()\n    table_of_contents = ''.join(read_me.split('- - -')[0])\n    blocks = ''.join(read_me.split('- - -')[1]).split('\\n# ')\n    for i in range(len(blocks)):\n        if i == 0:\n            blocks[i] = blocks[i] + '\\n'\n        else:\n            blocks[i] = '# ' + blocks[i] + '\\n'\n    inner_blocks = sorted(blocks[0].split('##'))\n    for i in range(1, len(inner_blocks)):\n        if inner_blocks[i][0] != '#':\n            inner_blocks[i] = '##' + inner_blocks[i]\n    inner_blocks = ''.join(inner_blocks)\n    blocks[0] = inner_blocks\n    final_README = table_of_contents + '- - -' + ''.join(blocks)\n    with open('README.md', 'w+') as sorted_file:\n        sorted_file.write(final_README)",
                "with open('README.md', 'r') as read_me_file:\n    read_me = read_me_file.read()",
                "read_me = read_me_file.read()",
                "table_of_contents = ''.join(read_me.split('- - -')[0])",
                "blocks = ''.join(read_me.split('- - -')[1]).split('\\n# ')"
            ]
        },
        {
            "id": "2",
            "type": "block",
            "statements": [
                "i",
                "range(len(blocks))"
            ]
        },
        {
            "id": "3",
            "type": "block",
            "statements": [
                "i Eq 0"
            ]
        },
        {
            "id": "4",
            "type": "block",
            "statements": [
                "inner_blocks = sorted(blocks[0].split('##'))"
            ]
        },
        {
            "id": "5",
            "type": "block",
            "statements": [
                "blocks[i] = blocks[i] + '\\n'"
            ]
        },
        {
            "id": "6",
            "type": "block",
            "statements": [
                "blocks[i] = '# ' + blocks[i] + '\\n'"
            ]
        },
        {
            "id": "7",
            "type": "block",
            "statements": []
        },
        {
            "id": "8",
            "type": "block",
            "statements": [
                "i",
                "range(1, len(inner_blocks))"
            ]
        },
        {
            "id": "9",
            "type": "block",
            "statements": [
                "inner_blocks[i][0] NotEq '#'"
            ]
        },
        {
            "id": "10",
            "type": "block",
            "statements": [
                "inner_blocks = ''.join(inner_blocks)",
                "blocks[0] = inner_blocks",
                "final_README = table_of_contents + '- - -' + ''.join(blocks)",
                "with open('README.md', 'w+') as sorted_file:\n    sorted_file.write(final_README)",
                "sorted_file.write(final_README)",
                "def main():\n    with open('README.md', 'r') as read_me_file:\n        read_me = read_me_file.readlines()\n    blocks = []\n    last_indent = None\n    for line in read_me:\n        s_line = line.lstrip()\n        indent = len(line) - len(s_line)\n        if any([s_line.startswith(s) for s in ['* [', '- [']]):\n            if indent == last_indent:\n                blocks[-1].append(line)\n            else:\n                blocks.append([line])\n            last_indent = indent\n        else:\n            blocks.append([line])\n            last_indent = None\n    with open('README.md', 'w+') as sorted_file:\n        blocks = [''.join(sorted(block, key=str.lower)) for block in blocks]\n        sorted_file.write(''.join(blocks))\n    sort_blocks()",
                "with open('README.md', 'r') as read_me_file:\n    read_me = read_me_file.readlines()",
                "read_me = read_me_file.readlines()",
                "blocks = []",
                "last_indent = None"
            ]
        },
        {
            "id": "11",
            "type": "block",
            "statements": [
                "inner_blocks[i] = '##' + inner_blocks[i]"
            ]
        },
        {
            "id": "12",
            "type": "block",
            "statements": []
        },
        {
            "id": "13",
            "type": "block",
            "statements": []
        },
        {
            "id": "14",
            "type": "block",
            "statements": [
                "line",
                "read_me"
            ]
        },
        {
            "id": "15",
            "type": "block",
            "statements": [
                "s_line = line.lstrip()",
                "indent = len(line) - len(s_line)",
                "any([s_line.startswith(s) for s in ['* [', '- [']])"
            ]
        },
        {
            "id": "16",
            "type": "block",
            "statements": [
                "with open('README.md', 'w+') as sorted_file:\n    blocks = [''.join(sorted(block, key=str.lower)) for block in blocks]\n    sorted_file.write(''.join(blocks))",
                "blocks = [''.join(sorted(block, key=str.lower)) for block in blocks]",
                "sorted_file.write(''.join(blocks))",
                "sort_blocks()",
                "__name__ Eq '__main__'"
            ]
        },
        {
            "id": "17",
            "type": "block",
            "statements": [
                "indent Eq last_indent"
            ]
        },
        {
            "id": "18",
            "type": "block",
            "statements": [
                "blocks.append([line])",
                "last_indent = None"
            ]
        },
        {
            "id": "19",
            "type": "block",
            "statements": []
        },
        {
            "id": "20",
            "type": "block",
            "statements": [
                "blocks[-1].append(line)"
            ]
        },
        {
            "id": "21",
            "type": "block",
            "statements": [
                "blocks.append([line])"
            ]
        },
        {
            "id": "22",
            "type": "block",
            "statements": [
                "last_indent = indent"
            ]
        },
        {
            "id": "23",
            "type": "block",
            "statements": [
                "main()"
            ]
        },
        {
            "id": "24",
            "type": "block",
            "statements": []
        },
        {
            "id": "25",
            "type": "block",
            "statements": []
        }
    ],
    "edges": [
        {
            "source": "1",
            "target": "2",
            "type": "next"
        },
        {
            "source": "2",
            "target": "3",
            "type": "true"
        },
        {
            "source": "2",
            "target": "4",
            "type": "false"
        },
        {
            "source": "3",
            "target": "5",
            "type": "true"
        },
        {
            "source": "3",
            "target": "6",
            "type": "false"
        },
        {
            "source": "4",
            "target": "8",
            "type": "next"
        },
        {
            "source": "5",
            "target": "7",
            "type": "next"
        },
        {
            "source": "6",
            "target": "7",
            "type": "next"
        },
        {
            "source": "7",
            "target": "2",
            "type": "next"
        },
        {
            "source": "8",
            "target": "9",
            "type": "true"
        },
        {
            "source": "8",
            "target": "10",
            "type": "false"
        },
        {
            "source": "9",
            "target": "11",
            "type": "true"
        },
        {
            "source": "9",
            "target": "12",
            "type": "false"
        },
        {
            "source": "10",
            "target": "14",
            "type": "next"
        },
        {
            "source": "11",
            "target": "13",
            "type": "next"
        },
        {
            "source": "12",
            "target": "13",
            "type": "next"
        },
        {
            "source": "13",
            "target": "8",
            "type": "next"
        },
        {
            "source": "14",
            "target": "15",
            "type": "true"
        },
        {
            "source": "14",
            "target": "16",
            "type": "false"
        },
        {
            "source": "15",
            "target": "17",
            "type": "true"
        },
        {
            "source": "15",
            "target": "18",
            "type": "false"
        },
        {
            "source": "16",
            "target": "23",
            "type": "true"
        },
        {
            "source": "16",
            "target": "24",
            "type": "false"
        },
        {
            "source": "17",
            "target": "20",
            "type": "true"
        },
        {
            "source": "17",
            "target": "21",
            "type": "false"
        },
        {
            "source": "18",
            "target": "19",
            "type": "next"
        },
        {
            "source": "19",
            "target": "14",
            "type": "next"
        },
        {
            "source": "20",
            "target": "22",
            "type": "next"
        },
        {
            "source": "21",
            "target": "22",
            "type": "next"
        },
        {
            "source": "22",
            "target": "19",
            "type": "next"
        },
        {
            "source": "23",
            "target": "25",
            "type": "next"
        },
        {
            "source": "24",
            "target": "25",
            "type": "next"
        }
    ]
}