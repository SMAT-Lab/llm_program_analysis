{
    "nodes": [
        {
            "id": "1",
            "type": "block",
            "statements": [
                "'Analytics API'",
                "from typing import Annotated",
                "import fastapi",
                "import backend.data.analytics",
                "from backend.server.utils import get_user_id",
                "router = fastapi.APIRouter()",
                "@router.post(path='/log_raw_metric')\nasync def log_raw_metric(user_id: Annotated[str, fastapi.Depends(get_user_id)], metric_name: Annotated[str, fastapi.Body(..., embed=True)], metric_value: Annotated[float, fastapi.Body(..., embed=True)], data_string: Annotated[str, fastapi.Body(..., embed=True)]):\n    result = await backend.data.analytics.log_raw_metric(user_id=user_id, metric_name=metric_name, metric_value=metric_value, data_string=data_string)\n    return result.id",
                "result = await backend.data.analytics.log_raw_metric(user_id=user_id, metric_name=metric_name, metric_value=metric_value, data_string=data_string)",
                "return result.id"
            ]
        },
        {
            "id": "2",
            "type": "block",
            "statements": [
                "@router.post('/log_raw_analytics')\nasync def log_raw_analytics(user_id: Annotated[str, fastapi.Depends(get_user_id)], type: Annotated[str, fastapi.Body(..., embed=True)], data: Annotated[dict, fastapi.Body(..., embed=True, description='The data to log')], data_index: Annotated[str, fastapi.Body(..., embed=True, description='Indexable field for any count based analytical measures like page order clicking, tutorial step completion, etc.')]):\n    result = await backend.data.analytics.log_raw_analytics(user_id, type, data, data_index)\n    return result.id",
                "result = await backend.data.analytics.log_raw_analytics(user_id, type, data, data_index)",
                "return result.id"
            ]
        }
    ],
    "edges": []
}