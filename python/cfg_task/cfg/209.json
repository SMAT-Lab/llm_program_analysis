{
    "nodes": [
        {
            "id": "1",
            "type": "block",
            "statements": [
                "from typing import Any, Dict",
                "import jwt",
                "from .config import settings",
                "def parse_jwt_token(token: str) -> Dict[str, Any]:\n    \"\"\"\n    Parse and validate a JWT token.\n\n    :param token: The token to parse\n    :return: The decoded payload\n    :raises ValueError: If the token is invalid or expired\n    \"\"\"\n    try:\n        payload = jwt.decode(token, settings.JWT_SECRET_KEY, algorithms=[settings.JWT_ALGORITHM], audience='authenticated')\n        return payload\n    except jwt.ExpiredSignatureError:\n        raise ValueError('Token has expired')\n    except jwt.InvalidTokenError as e:\n        raise ValueError(f'Invalid token: {str(e)}')",
                "'\\n    Parse and validate a JWT token.\\n\\n    :param token: The token to parse\\n    :return: The decoded payload\\n    :raises ValueError: If the token is invalid or expired\\n    '",
                "try:\n    payload = jwt.decode(token, settings.JWT_SECRET_KEY, algorithms=[settings.JWT_ALGORITHM], audience='authenticated')\n    return payload\nexcept jwt.ExpiredSignatureError:\n    raise ValueError('Token has expired')\nexcept jwt.InvalidTokenError as e:\n    raise ValueError(f'Invalid token: {str(e)}')",
                "payload = jwt.decode(token, settings.JWT_SECRET_KEY, algorithms=[settings.JWT_ALGORITHM], audience='authenticated')",
                "return payload"
            ]
        },
        {
            "id": "2",
            "type": "block",
            "statements": [
                "raise ValueError('Token has expired')",
                "raise ValueError(f'Invalid token: {str(e)}')"
            ]
        }
    ],
    "edges": []
}