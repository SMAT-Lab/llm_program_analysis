{
    "nodes": [
        {
            "id": "1",
            "type": "block",
            "statements": [
                "from abc import ABCMeta, abstractmethod",
                "from collections import deque",
                "from enum import Enum",
                "class Rank(Enum):\n    OPERATOR = 0\n    SUPERVISOR = 1\n    DIRECTOR = 2",
                "OPERATOR = 0",
                "SUPERVISOR = 1",
                "DIRECTOR = 2",
                "class Employee(metaclass=ABCMeta):\n\n    def __init__(self, employee_id, name, rank, call_center):\n        self.employee_id = employee_id\n        self.name = name\n        self.rank = rank\n        self.call = None\n        self.call_center = call_center\n\n    def take_call(self, call):\n        \"\"\"Assume the employee will always successfully take the call.\"\"\"\n        self.call = call\n        self.call.employee = self\n        self.call.state = CallState.IN_PROGRESS\n\n    def complete_call(self):\n        self.call.state = CallState.COMPLETE\n        self.call_center.notify_call_completed(self.call)\n\n    @abstractmethod\n    def escalate_call(self):\n        pass\n\n    def _escalate_call(self):\n        self.call.state = CallState.READY\n        call = self.call\n        self.call = None\n        self.call_center.notify_call_escalated(call)",
                "def __init__(self, employee_id, name, rank, call_center):\n    self.employee_id = employee_id\n    self.name = name\n    self.rank = rank\n    self.call = None\n    self.call_center = call_center",
                "self.employee_id = employee_id",
                "self.name = name",
                "self.rank = rank",
                "self.call = None",
                "self.call_center = call_center",
                "def take_call(self, call):\n    \"\"\"Assume the employee will always successfully take the call.\"\"\"\n    self.call = call\n    self.call.employee = self\n    self.call.state = CallState.IN_PROGRESS",
                "'Assume the employee will always successfully take the call.'",
                "self.call = call",
                "self.call.employee = self",
                "self.call.state = CallState.IN_PROGRESS",
                "def complete_call(self):\n    self.call.state = CallState.COMPLETE\n    self.call_center.notify_call_completed(self.call)",
                "self.call.state = CallState.COMPLETE",
                "self.call_center.notify_call_completed(self.call)",
                "@abstractmethod\ndef escalate_call(self):\n    pass",
                "pass",
                "def _escalate_call(self):\n    self.call.state = CallState.READY\n    call = self.call\n    self.call = None\n    self.call_center.notify_call_escalated(call)",
                "self.call.state = CallState.READY",
                "call = self.call",
                "self.call = None",
                "self.call_center.notify_call_escalated(call)",
                "class Operator(Employee):\n\n    def __init__(self, employee_id, name):\n        super(Operator, self).__init__(employee_id, name, Rank.OPERATOR)\n\n    def escalate_call(self):\n        self.call.level = Rank.SUPERVISOR\n        self._escalate_call()",
                "def __init__(self, employee_id, name):\n    super(Operator, self).__init__(employee_id, name, Rank.OPERATOR)",
                "super(Operator, self).__init__(employee_id, name, Rank.OPERATOR)",
                "def escalate_call(self):\n    self.call.level = Rank.SUPERVISOR\n    self._escalate_call()",
                "self.call.level = Rank.SUPERVISOR",
                "self._escalate_call()",
                "class Supervisor(Employee):\n\n    def __init__(self, employee_id, name):\n        super(Operator, self).__init__(employee_id, name, Rank.SUPERVISOR)\n\n    def escalate_call(self):\n        self.call.level = Rank.DIRECTOR\n        self._escalate_call()",
                "def __init__(self, employee_id, name):\n    super(Operator, self).__init__(employee_id, name, Rank.SUPERVISOR)",
                "super(Operator, self).__init__(employee_id, name, Rank.SUPERVISOR)",
                "def escalate_call(self):\n    self.call.level = Rank.DIRECTOR\n    self._escalate_call()",
                "self.call.level = Rank.DIRECTOR",
                "self._escalate_call()",
                "class Director(Employee):\n\n    def __init__(self, employee_id, name):\n        super(Operator, self).__init__(employee_id, name, Rank.DIRECTOR)\n\n    def escalate_call(self):\n        raise NotImplementedError('Directors must be able to handle any call')",
                "def __init__(self, employee_id, name):\n    super(Operator, self).__init__(employee_id, name, Rank.DIRECTOR)",
                "super(Operator, self).__init__(employee_id, name, Rank.DIRECTOR)",
                "def escalate_call(self):\n    raise NotImplementedError('Directors must be able to handle any call')",
                "raise NotImplementedError('Directors must be able to handle any call')",
                "class CallState(Enum):\n    READY = 0\n    IN_PROGRESS = 1\n    COMPLETE = 2",
                "READY = 0",
                "IN_PROGRESS = 1",
                "COMPLETE = 2",
                "class Call(object):\n\n    def __init__(self, rank):\n        self.state = CallState.READY\n        self.rank = rank\n        self.employee = None",
                "def __init__(self, rank):\n    self.state = CallState.READY\n    self.rank = rank\n    self.employee = None",
                "self.state = CallState.READY",
                "self.rank = rank",
                "self.employee = None",
                "class CallCenter(object):\n\n    def __init__(self, operators, supervisors, directors):\n        self.operators = operators\n        self.supervisors = supervisors\n        self.directors = directors\n        self.queued_calls = deque()\n\n    def dispatch_call(self, call):\n        if call.rank not in (Rank.OPERATOR, Rank.SUPERVISOR, Rank.DIRECTOR):\n            raise ValueError('Invalid call rank: {}'.format(call.rank))\n        employee = None\n        if call.rank == Rank.OPERATOR:\n            employee = self._dispatch_call(call, self.operators)\n        if call.rank == Rank.SUPERVISOR or employee is None:\n            employee = self._dispatch_call(call, self.supervisors)\n        if call.rank == Rank.DIRECTOR or employee is None:\n            employee = self._dispatch_call(call, self.directors)\n        if employee is None:\n            self.queued_calls.append(call)\n\n    def _dispatch_call(self, call, employees):\n        for employee in employees:\n            if employee.call is None:\n                employee.take_call(call)\n                return employee\n        return None\n\n    def notify_call_escalated(self, call):\n        pass\n\n    def notify_call_completed(self, call):\n        pass\n\n    def dispatch_queued_call_to_newly_freed_employee(self, call, employee):\n        pass",
                "def __init__(self, operators, supervisors, directors):\n    self.operators = operators\n    self.supervisors = supervisors\n    self.directors = directors\n    self.queued_calls = deque()",
                "self.operators = operators",
                "self.supervisors = supervisors",
                "self.directors = directors",
                "self.queued_calls = deque()",
                "def dispatch_call(self, call):\n    if call.rank not in (Rank.OPERATOR, Rank.SUPERVISOR, Rank.DIRECTOR):\n        raise ValueError('Invalid call rank: {}'.format(call.rank))\n    employee = None\n    if call.rank == Rank.OPERATOR:\n        employee = self._dispatch_call(call, self.operators)\n    if call.rank == Rank.SUPERVISOR or employee is None:\n        employee = self._dispatch_call(call, self.supervisors)\n    if call.rank == Rank.DIRECTOR or employee is None:\n        employee = self._dispatch_call(call, self.directors)\n    if employee is None:\n        self.queued_calls.append(call)",
                "call.rank NotIn (Rank.OPERATOR, Rank.SUPERVISOR, Rank.DIRECTOR)"
            ]
        },
        {
            "id": "2",
            "type": "block",
            "statements": [
                "raise ValueError('Invalid call rank: {}'.format(call.rank))"
            ]
        },
        {
            "id": "3",
            "type": "block",
            "statements": []
        },
        {
            "id": "4",
            "type": "block",
            "statements": [
                "employee = None",
                "call.rank Eq Rank.OPERATOR"
            ]
        },
        {
            "id": "5",
            "type": "block",
            "statements": [
                "employee = self._dispatch_call(call, self.operators)"
            ]
        },
        {
            "id": "6",
            "type": "block",
            "statements": []
        },
        {
            "id": "7",
            "type": "block",
            "statements": [
                "call.rank == Rank.SUPERVISOR or employee is None"
            ]
        },
        {
            "id": "8",
            "type": "block",
            "statements": [
                "employee = self._dispatch_call(call, self.supervisors)"
            ]
        },
        {
            "id": "9",
            "type": "block",
            "statements": []
        },
        {
            "id": "10",
            "type": "block",
            "statements": [
                "call.rank == Rank.DIRECTOR or employee is None"
            ]
        },
        {
            "id": "11",
            "type": "block",
            "statements": [
                "employee = self._dispatch_call(call, self.directors)"
            ]
        },
        {
            "id": "12",
            "type": "block",
            "statements": []
        },
        {
            "id": "13",
            "type": "block",
            "statements": [
                "employee Is None"
            ]
        },
        {
            "id": "14",
            "type": "block",
            "statements": [
                "self.queued_calls.append(call)"
            ]
        },
        {
            "id": "15",
            "type": "block",
            "statements": []
        },
        {
            "id": "16",
            "type": "block",
            "statements": [
                "def _dispatch_call(self, call, employees):\n    for employee in employees:\n        if employee.call is None:\n            employee.take_call(call)\n            return employee\n    return None"
            ]
        },
        {
            "id": "17",
            "type": "block",
            "statements": [
                "employee",
                "employees"
            ]
        },
        {
            "id": "18",
            "type": "block",
            "statements": [
                "employee.call Is None"
            ]
        },
        {
            "id": "19",
            "type": "block",
            "statements": [
                "return None"
            ]
        },
        {
            "id": "20",
            "type": "block",
            "statements": [
                "employee.take_call(call)",
                "return employee"
            ]
        },
        {
            "id": "21",
            "type": "block",
            "statements": []
        },
        {
            "id": "22",
            "type": "block",
            "statements": []
        },
        {
            "id": "23",
            "type": "block",
            "statements": [
                "def notify_call_escalated(self, call):\n    pass",
                "pass",
                "def notify_call_completed(self, call):\n    pass",
                "pass",
                "def dispatch_queued_call_to_newly_freed_employee(self, call, employee):\n    pass",
                "pass"
            ]
        }
    ],
    "edges": [
        {
            "source": "1",
            "target": "2",
            "type": "true"
        },
        {
            "source": "1",
            "target": "3",
            "type": "false"
        },
        {
            "source": "2",
            "target": "4",
            "type": "next"
        },
        {
            "source": "3",
            "target": "4",
            "type": "next"
        },
        {
            "source": "4",
            "target": "5",
            "type": "true"
        },
        {
            "source": "4",
            "target": "6",
            "type": "false"
        },
        {
            "source": "5",
            "target": "7",
            "type": "next"
        },
        {
            "source": "6",
            "target": "7",
            "type": "next"
        },
        {
            "source": "7",
            "target": "8",
            "type": "true"
        },
        {
            "source": "7",
            "target": "9",
            "type": "false"
        },
        {
            "source": "8",
            "target": "10",
            "type": "next"
        },
        {
            "source": "9",
            "target": "10",
            "type": "next"
        },
        {
            "source": "10",
            "target": "11",
            "type": "true"
        },
        {
            "source": "10",
            "target": "12",
            "type": "false"
        },
        {
            "source": "11",
            "target": "13",
            "type": "next"
        },
        {
            "source": "12",
            "target": "13",
            "type": "next"
        },
        {
            "source": "13",
            "target": "14",
            "type": "true"
        },
        {
            "source": "13",
            "target": "15",
            "type": "false"
        },
        {
            "source": "14",
            "target": "16",
            "type": "next"
        },
        {
            "source": "15",
            "target": "16",
            "type": "next"
        },
        {
            "source": "16",
            "target": "17",
            "type": "next"
        },
        {
            "source": "17",
            "target": "18",
            "type": "true"
        },
        {
            "source": "17",
            "target": "19",
            "type": "false"
        },
        {
            "source": "18",
            "target": "20",
            "type": "true"
        },
        {
            "source": "18",
            "target": "21",
            "type": "false"
        },
        {
            "source": "21",
            "target": "22",
            "type": "next"
        },
        {
            "source": "22",
            "target": "17",
            "type": "next"
        }
    ]
}