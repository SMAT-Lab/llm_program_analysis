{
    "nodes": [
        {
            "id": "1",
            "type": "block",
            "statements": [
                "from collections import deque",
                "from enum import Enum",
                "class State(Enum):\n    unvisited = 0\n    visited = 1",
                "unvisited = 0",
                "visited = 1",
                "class Graph(object):\n\n    def bfs(self, source, dest):\n        if source is None:\n            return False\n        queue = deque()\n        queue.append(source)\n        source.visit_state = State.visited\n        while queue:\n            node = queue.popleft()\n            print(node)\n            if dest is node:\n                return True\n            for adjacent_node in node.adj_nodes.values():\n                if adjacent_node.visit_state == State.unvisited:\n                    queue.append(adjacent_node)\n                    adjacent_node.visit_state = State.visited\n        return False",
                "def bfs(self, source, dest):\n    if source is None:\n        return False\n    queue = deque()\n    queue.append(source)\n    source.visit_state = State.visited\n    while queue:\n        node = queue.popleft()\n        print(node)\n        if dest is node:\n            return True\n        for adjacent_node in node.adj_nodes.values():\n            if adjacent_node.visit_state == State.unvisited:\n                queue.append(adjacent_node)\n                adjacent_node.visit_state = State.visited\n    return False",
                "source Is None"
            ]
        },
        {
            "id": "2",
            "type": "block",
            "statements": [
                "return False"
            ]
        },
        {
            "id": "3",
            "type": "block",
            "statements": []
        },
        {
            "id": "4",
            "type": "block",
            "statements": [
                "queue = deque()",
                "queue.append(source)",
                "source.visit_state = State.visited"
            ]
        },
        {
            "id": "5",
            "type": "block",
            "statements": [
                "queue"
            ]
        },
        {
            "id": "6",
            "type": "block",
            "statements": [
                "node = queue.popleft()",
                "print(node)",
                "dest Is node"
            ]
        },
        {
            "id": "7",
            "type": "block",
            "statements": [
                "return False"
            ]
        },
        {
            "id": "8",
            "type": "block",
            "statements": [
                "return True"
            ]
        },
        {
            "id": "9",
            "type": "block",
            "statements": []
        },
        {
            "id": "10",
            "type": "block",
            "statements": []
        },
        {
            "id": "11",
            "type": "block",
            "statements": [
                "adjacent_node",
                "node.adj_nodes.values()"
            ]
        },
        {
            "id": "12",
            "type": "block",
            "statements": [
                "adjacent_node.visit_state Eq State.unvisited"
            ]
        },
        {
            "id": "13",
            "type": "block",
            "statements": []
        },
        {
            "id": "14",
            "type": "block",
            "statements": [
                "queue.append(adjacent_node)",
                "adjacent_node.visit_state = State.visited"
            ]
        },
        {
            "id": "15",
            "type": "block",
            "statements": []
        },
        {
            "id": "16",
            "type": "block",
            "statements": []
        },
        {
            "id": "17",
            "type": "block",
            "statements": [
                "class Person(object):\n\n    def __init__(self, id, name):\n        self.id = id\n        self.name = name\n        self.friend_ids = []",
                "def __init__(self, id, name):\n    self.id = id\n    self.name = name\n    self.friend_ids = []",
                "self.id = id",
                "self.name = name",
                "self.friend_ids = []",
                "class LookupService(object):\n\n    def __init__(self):\n        self.lookup = {}\n\n    def get_person(self, person_id):\n        person_server = self.lookup[person_id]\n        return person_server.people[person_id]",
                "def __init__(self):\n    self.lookup = {}",
                "self.lookup = {}",
                "def get_person(self, person_id):\n    person_server = self.lookup[person_id]\n    return person_server.people[person_id]",
                "person_server = self.lookup[person_id]",
                "return person_server.people[person_id]"
            ]
        },
        {
            "id": "18",
            "type": "block",
            "statements": [
                "class PersonServer(object):\n\n    def __init__(self):\n        self.people = {}\n\n    def get_people(self, ids):\n        results = []\n        for id in ids:\n            if id in self.people:\n                results.append(self.people[id])\n        return results",
                "def __init__(self):\n    self.people = {}",
                "self.people = {}",
                "def get_people(self, ids):\n    results = []\n    for id in ids:\n        if id in self.people:\n            results.append(self.people[id])\n    return results",
                "results = []"
            ]
        },
        {
            "id": "19",
            "type": "block",
            "statements": [
                "id",
                "ids"
            ]
        },
        {
            "id": "20",
            "type": "block",
            "statements": [
                "id In self.people"
            ]
        },
        {
            "id": "21",
            "type": "block",
            "statements": [
                "return results"
            ]
        },
        {
            "id": "22",
            "type": "block",
            "statements": [
                "results.append(self.people[id])"
            ]
        },
        {
            "id": "23",
            "type": "block",
            "statements": []
        },
        {
            "id": "24",
            "type": "block",
            "statements": []
        },
        {
            "id": "25",
            "type": "block",
            "statements": [
                "class UserGraphService(object):\n\n    def __init__(self, person_ids, lookup):\n        self.lookup = lookup\n        self.person_ids = person_ids\n        self.visited_ids = set()\n\n    def bfs(self, source, dest):\n        pass",
                "def __init__(self, person_ids, lookup):\n    self.lookup = lookup\n    self.person_ids = person_ids\n    self.visited_ids = set()",
                "self.lookup = lookup",
                "self.person_ids = person_ids",
                "self.visited_ids = set()",
                "def bfs(self, source, dest):\n    pass",
                "pass"
            ]
        }
    ],
    "edges": [
        {
            "source": "1",
            "target": "2",
            "type": "true"
        },
        {
            "source": "1",
            "target": "3",
            "type": "false"
        },
        {
            "source": "3",
            "target": "4",
            "type": "next"
        },
        {
            "source": "4",
            "target": "5",
            "type": "next"
        },
        {
            "source": "5",
            "target": "6",
            "type": "true"
        },
        {
            "source": "5",
            "target": "7",
            "type": "false"
        },
        {
            "source": "6",
            "target": "8",
            "type": "true"
        },
        {
            "source": "6",
            "target": "9",
            "type": "false"
        },
        {
            "source": "9",
            "target": "10",
            "type": "next"
        },
        {
            "source": "10",
            "target": "11",
            "type": "next"
        },
        {
            "source": "11",
            "target": "12",
            "type": "true"
        },
        {
            "source": "11",
            "target": "13",
            "type": "false"
        },
        {
            "source": "12",
            "target": "14",
            "type": "true"
        },
        {
            "source": "12",
            "target": "15",
            "type": "false"
        },
        {
            "source": "13",
            "target": "5",
            "type": "next"
        },
        {
            "source": "14",
            "target": "16",
            "type": "next"
        },
        {
            "source": "15",
            "target": "16",
            "type": "next"
        },
        {
            "source": "16",
            "target": "11",
            "type": "next"
        },
        {
            "source": "18",
            "target": "19",
            "type": "next"
        },
        {
            "source": "19",
            "target": "20",
            "type": "true"
        },
        {
            "source": "19",
            "target": "21",
            "type": "false"
        },
        {
            "source": "20",
            "target": "22",
            "type": "true"
        },
        {
            "source": "20",
            "target": "23",
            "type": "false"
        },
        {
            "source": "22",
            "target": "24",
            "type": "next"
        },
        {
            "source": "23",
            "target": "24",
            "type": "next"
        },
        {
            "source": "24",
            "target": "19",
            "type": "next"
        }
    ]
}