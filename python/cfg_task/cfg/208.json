{
    "nodes": [
        {
            "id": "1",
            "type": "block",
            "statements": [
                "import asyncio",
                "import pytest",
                "from backend.util.retry import conn_retry",
                "def test_conn_retry_sync_function():\n    retry_count = 0\n\n    @conn_retry('Test', 'Test function', max_retry=2, max_wait=0.1, min_wait=0.1)\n    def test_function():\n        nonlocal retry_count\n        retry_count -= 1\n        if retry_count > 0:\n            raise ValueError('Test error')\n        return 'Success'\n    retry_count = 2\n    res = test_function()\n    assert res == 'Success'\n    retry_count = 100\n    with pytest.raises(ValueError) as e:\n        test_function()\n        assert str(e.value) == 'Test error'",
                "retry_count = 0",
                "@conn_retry('Test', 'Test function', max_retry=2, max_wait=0.1, min_wait=0.1)\ndef test_function():\n    nonlocal retry_count\n    retry_count -= 1\n    if retry_count > 0:\n        raise ValueError('Test error')\n    return 'Success'",
                "nonlocal retry_count",
                "retry_count -= 1",
                "retry_count Gt 0"
            ]
        },
        {
            "id": "2",
            "type": "block",
            "statements": [
                "raise ValueError('Test error')"
            ]
        },
        {
            "id": "3",
            "type": "block",
            "statements": []
        },
        {
            "id": "4",
            "type": "block",
            "statements": [
                "return 'Success'"
            ]
        },
        {
            "id": "5",
            "type": "block",
            "statements": [
                "retry_count = 2",
                "res = test_function()",
                "assert res == 'Success'",
                "retry_count = 100",
                "with pytest.raises(ValueError) as e:\n    test_function()\n    assert str(e.value) == 'Test error'",
                "test_function()",
                "assert str(e.value) == 'Test error'",
                "@pytest.mark.asyncio\nasync def test_conn_retry_async_function():\n    retry_count = 0\n\n    @conn_retry('Test', 'Test function', max_retry=2, max_wait=0.1, min_wait=0.1)\n    async def test_function():\n        nonlocal retry_count\n        await asyncio.sleep(1)\n        retry_count -= 1\n        if retry_count > 0:\n            raise ValueError('Test error')\n        return 'Success'\n    retry_count = 2\n    res = await test_function()\n    assert res == 'Success'\n    retry_count = 100\n    with pytest.raises(ValueError) as e:\n        await test_function()\n        assert str(e.value) == 'Test error'",
                "retry_count = 0",
                "@conn_retry('Test', 'Test function', max_retry=2, max_wait=0.1, min_wait=0.1)\nasync def test_function():\n    nonlocal retry_count\n    await asyncio.sleep(1)\n    retry_count -= 1\n    if retry_count > 0:\n        raise ValueError('Test error')\n    return 'Success'",
                "nonlocal retry_count",
                "await asyncio.sleep(1)",
                "retry_count -= 1",
                "retry_count Gt 0"
            ]
        },
        {
            "id": "6",
            "type": "block",
            "statements": [
                "raise ValueError('Test error')"
            ]
        },
        {
            "id": "7",
            "type": "block",
            "statements": []
        },
        {
            "id": "8",
            "type": "block",
            "statements": [
                "return 'Success'"
            ]
        },
        {
            "id": "9",
            "type": "block",
            "statements": [
                "retry_count = 2",
                "res = await test_function()",
                "assert res == 'Success'",
                "retry_count = 100",
                "with pytest.raises(ValueError) as e:\n    await test_function()\n    assert str(e.value) == 'Test error'",
                "await test_function()",
                "assert str(e.value) == 'Test error'"
            ]
        }
    ],
    "edges": [
        {
            "source": "1",
            "target": "2",
            "type": "true"
        },
        {
            "source": "1",
            "target": "3",
            "type": "false"
        },
        {
            "source": "2",
            "target": "4",
            "type": "next"
        },
        {
            "source": "3",
            "target": "4",
            "type": "next"
        },
        {
            "source": "5",
            "target": "6",
            "type": "true"
        },
        {
            "source": "5",
            "target": "7",
            "type": "false"
        },
        {
            "source": "6",
            "target": "8",
            "type": "next"
        },
        {
            "source": "7",
            "target": "8",
            "type": "next"
        }
    ]
}