{
    "nodes": [
        {
            "id": "1",
            "type": "block",
            "statements": [
                "from datetime import datetime, timedelta",
                "from backend.blocks.hubspot._auth import HubSpotCredentials, HubSpotCredentialsField, HubSpotCredentialsInput",
                "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema",
                "from backend.data.model import SchemaField",
                "from backend.util.request import requests",
                "class HubSpotEngagementBlock(Block):\n\n    class Input(BlockSchema):\n        credentials: HubSpotCredentialsInput = HubSpotCredentialsField()\n        operation: str = SchemaField(description='Operation to perform (send_email, track_engagement)', default='send_email')\n        email_data: dict = SchemaField(description='Email data including recipient, subject, content', default={})\n        contact_id: str = SchemaField(description='Contact ID for engagement tracking', default='')\n        timeframe_days: int = SchemaField(description='Number of days to look back for engagement', default=30, optional=True)\n\n    class Output(BlockSchema):\n        result: dict = SchemaField(description='Operation result')\n        status: str = SchemaField(description='Operation status')\n\n    def __init__(self):\n        super().__init__(id='c6524385-7d87-49d6-a470-248bd29ca765', description='Manages HubSpot engagements - sends emails and tracks engagement metrics', categories={BlockCategory.CRM, BlockCategory.COMMUNICATION}, input_schema=HubSpotEngagementBlock.Input, output_schema=HubSpotEngagementBlock.Output)\n\n    def run(self, input_data: Input, *, credentials: HubSpotCredentials, **kwargs) -> BlockOutput:\n        base_url = 'https://api.hubapi.com'\n        headers = {'Authorization': f'Bearer {credentials.api_key.get_secret_value()}', 'Content-Type': 'application/json'}\n        if input_data.operation == 'send_email':\n            email_url = f'{base_url}/crm/v3/objects/emails'\n            email_data = {'properties': {'hs_timestamp': datetime.now().isoformat(), 'hubspot_owner_id': '1', 'hs_email_direction': 'OUTBOUND', 'hs_email_status': 'SEND', 'hs_email_subject': input_data.email_data.get('subject'), 'hs_email_text': input_data.email_data.get('content'), 'hs_email_to_email': input_data.email_data.get('recipient')}}\n            response = requests.post(email_url, headers=headers, json=email_data)\n            result = response.json()\n            yield ('result', result)\n            yield ('status', 'email_sent')\n        elif input_data.operation == 'track_engagement':\n            from_date = datetime.now() - timedelta(days=input_data.timeframe_days)\n            engagement_url = f'{base_url}/crm/v3/objects/contacts/{input_data.contact_id}/engagement'\n            params = {'limit': 100, 'after': from_date.isoformat()}\n            response = requests.get(engagement_url, headers=headers, params=params)\n            engagements = response.json()\n            metrics = {'email_opens': 0, 'email_clicks': 0, 'email_replies': 0, 'last_engagement': None, 'engagement_score': 0}\n            for engagement in engagements.get('results', []):\n                eng_type = engagement.get('properties', {}).get('hs_engagement_type')\n                if eng_type == 'EMAIL':\n                    metrics['email_opens'] += 1\n                elif eng_type == 'EMAIL_CLICK':\n                    metrics['email_clicks'] += 1\n                elif eng_type == 'EMAIL_REPLY':\n                    metrics['email_replies'] += 1\n                eng_time = engagement.get('properties', {}).get('hs_timestamp')\n                if eng_time and (not metrics['last_engagement'] or eng_time > metrics['last_engagement']):\n                    metrics['last_engagement'] = eng_time\n            metrics['engagement_score'] = metrics['email_opens'] + metrics['email_clicks'] * 2 + metrics['email_replies'] * 3\n            yield ('result', metrics)\n            yield ('status', 'engagement_tracked')",
                "class Input(BlockSchema):\n    credentials: HubSpotCredentialsInput = HubSpotCredentialsField()\n    operation: str = SchemaField(description='Operation to perform (send_email, track_engagement)', default='send_email')\n    email_data: dict = SchemaField(description='Email data including recipient, subject, content', default={})\n    contact_id: str = SchemaField(description='Contact ID for engagement tracking', default='')\n    timeframe_days: int = SchemaField(description='Number of days to look back for engagement', default=30, optional=True)",
                "credentials: HubSpotCredentialsInput = HubSpotCredentialsField()",
                "operation: str = SchemaField(description='Operation to perform (send_email, track_engagement)', default='send_email')",
                "email_data: dict = SchemaField(description='Email data including recipient, subject, content', default={})",
                "contact_id: str = SchemaField(description='Contact ID for engagement tracking', default='')",
                "timeframe_days: int = SchemaField(description='Number of days to look back for engagement', default=30, optional=True)",
                "class Output(BlockSchema):\n    result: dict = SchemaField(description='Operation result')\n    status: str = SchemaField(description='Operation status')",
                "result: dict = SchemaField(description='Operation result')",
                "status: str = SchemaField(description='Operation status')",
                "def __init__(self):\n    super().__init__(id='c6524385-7d87-49d6-a470-248bd29ca765', description='Manages HubSpot engagements - sends emails and tracks engagement metrics', categories={BlockCategory.CRM, BlockCategory.COMMUNICATION}, input_schema=HubSpotEngagementBlock.Input, output_schema=HubSpotEngagementBlock.Output)",
                "super().__init__()",
                "def run(self, input_data: Input, *, credentials: HubSpotCredentials, **kwargs) -> BlockOutput:\n    base_url = 'https://api.hubapi.com'\n    headers = {'Authorization': f'Bearer {credentials.api_key.get_secret_value()}', 'Content-Type': 'application/json'}\n    if input_data.operation == 'send_email':\n        email_url = f'{base_url}/crm/v3/objects/emails'\n        email_data = {'properties': {'hs_timestamp': datetime.now().isoformat(), 'hubspot_owner_id': '1', 'hs_email_direction': 'OUTBOUND', 'hs_email_status': 'SEND', 'hs_email_subject': input_data.email_data.get('subject'), 'hs_email_text': input_data.email_data.get('content'), 'hs_email_to_email': input_data.email_data.get('recipient')}}\n        response = requests.post(email_url, headers=headers, json=email_data)\n        result = response.json()\n        yield ('result', result)\n        yield ('status', 'email_sent')\n    elif input_data.operation == 'track_engagement':\n        from_date = datetime.now() - timedelta(days=input_data.timeframe_days)\n        engagement_url = f'{base_url}/crm/v3/objects/contacts/{input_data.contact_id}/engagement'\n        params = {'limit': 100, 'after': from_date.isoformat()}\n        response = requests.get(engagement_url, headers=headers, params=params)\n        engagements = response.json()\n        metrics = {'email_opens': 0, 'email_clicks': 0, 'email_replies': 0, 'last_engagement': None, 'engagement_score': 0}\n        for engagement in engagements.get('results', []):\n            eng_type = engagement.get('properties', {}).get('hs_engagement_type')\n            if eng_type == 'EMAIL':\n                metrics['email_opens'] += 1\n            elif eng_type == 'EMAIL_CLICK':\n                metrics['email_clicks'] += 1\n            elif eng_type == 'EMAIL_REPLY':\n                metrics['email_replies'] += 1\n            eng_time = engagement.get('properties', {}).get('hs_timestamp')\n            if eng_time and (not metrics['last_engagement'] or eng_time > metrics['last_engagement']):\n                metrics['last_engagement'] = eng_time\n        metrics['engagement_score'] = metrics['email_opens'] + metrics['email_clicks'] * 2 + metrics['email_replies'] * 3\n        yield ('result', metrics)\n        yield ('status', 'engagement_tracked')",
                "base_url = 'https://api.hubapi.com'",
                "headers = {'Authorization': f'Bearer {credentials.api_key.get_secret_value()}', 'Content-Type': 'application/json'}",
                "input_data.operation Eq 'send_email'"
            ]
        },
        {
            "id": "2",
            "type": "block",
            "statements": [
                "email_url = f'{base_url}/crm/v3/objects/emails'",
                "email_data = {'properties': {'hs_timestamp': datetime.now().isoformat(), 'hubspot_owner_id': '1', 'hs_email_direction': 'OUTBOUND', 'hs_email_status': 'SEND', 'hs_email_subject': input_data.email_data.get('subject'), 'hs_email_text': input_data.email_data.get('content'), 'hs_email_to_email': input_data.email_data.get('recipient')}}",
                "response = requests.post(email_url, headers=headers, json=email_data)",
                "result = response.json()",
                "(yield ('result', result))",
                "(yield ('status', 'email_sent'))"
            ]
        },
        {
            "id": "3",
            "type": "block",
            "statements": [
                "input_data.operation Eq 'track_engagement'"
            ]
        },
        {
            "id": "4",
            "type": "block",
            "statements": []
        },
        {
            "id": "5",
            "type": "block",
            "statements": [
                "from_date = datetime.now() - timedelta(days=input_data.timeframe_days)",
                "engagement_url = f'{base_url}/crm/v3/objects/contacts/{input_data.contact_id}/engagement'",
                "params = {'limit': 100, 'after': from_date.isoformat()}",
                "response = requests.get(engagement_url, headers=headers, params=params)",
                "engagements = response.json()",
                "metrics = {'email_opens': 0, 'email_clicks': 0, 'email_replies': 0, 'last_engagement': None, 'engagement_score': 0}"
            ]
        },
        {
            "id": "6",
            "type": "block",
            "statements": []
        },
        {
            "id": "7",
            "type": "block",
            "statements": []
        },
        {
            "id": "8",
            "type": "block",
            "statements": [
                "engagement",
                "engagements.get('results', [])"
            ]
        },
        {
            "id": "9",
            "type": "block",
            "statements": [
                "eng_type = engagement.get('properties', {}).get('hs_engagement_type')",
                "eng_type Eq 'EMAIL'"
            ]
        },
        {
            "id": "10",
            "type": "block",
            "statements": [
                "metrics['engagement_score'] = metrics['email_opens'] + metrics['email_clicks'] * 2 + metrics['email_replies'] * 3",
                "(yield ('result', metrics))",
                "(yield ('status', 'engagement_tracked'))"
            ]
        },
        {
            "id": "11",
            "type": "block",
            "statements": [
                "metrics['email_opens'] += 1"
            ]
        },
        {
            "id": "12",
            "type": "block",
            "statements": [
                "eng_type Eq 'EMAIL_CLICK'"
            ]
        },
        {
            "id": "13",
            "type": "block",
            "statements": [
                "eng_time = engagement.get('properties', {}).get('hs_timestamp')",
                "eng_time and (not metrics['last_engagement'] or eng_time > metrics['last_engagement'])"
            ]
        },
        {
            "id": "14",
            "type": "block",
            "statements": [
                "metrics['email_clicks'] += 1"
            ]
        },
        {
            "id": "15",
            "type": "block",
            "statements": [
                "eng_type Eq 'EMAIL_REPLY'"
            ]
        },
        {
            "id": "16",
            "type": "block",
            "statements": []
        },
        {
            "id": "17",
            "type": "block",
            "statements": [
                "metrics['email_replies'] += 1"
            ]
        },
        {
            "id": "18",
            "type": "block",
            "statements": []
        },
        {
            "id": "19",
            "type": "block",
            "statements": []
        },
        {
            "id": "20",
            "type": "block",
            "statements": [
                "metrics['last_engagement'] = eng_time"
            ]
        },
        {
            "id": "21",
            "type": "block",
            "statements": []
        },
        {
            "id": "22",
            "type": "block",
            "statements": []
        }
    ],
    "edges": [
        {
            "source": "1",
            "target": "2",
            "type": "true"
        },
        {
            "source": "1",
            "target": "3",
            "type": "false"
        },
        {
            "source": "2",
            "target": "4",
            "type": "next"
        },
        {
            "source": "3",
            "target": "5",
            "type": "true"
        },
        {
            "source": "3",
            "target": "6",
            "type": "false"
        },
        {
            "source": "5",
            "target": "8",
            "type": "next"
        },
        {
            "source": "6",
            "target": "7",
            "type": "next"
        },
        {
            "source": "7",
            "target": "4",
            "type": "next"
        },
        {
            "source": "8",
            "target": "9",
            "type": "true"
        },
        {
            "source": "8",
            "target": "10",
            "type": "false"
        },
        {
            "source": "9",
            "target": "11",
            "type": "true"
        },
        {
            "source": "9",
            "target": "12",
            "type": "false"
        },
        {
            "source": "10",
            "target": "7",
            "type": "next"
        },
        {
            "source": "11",
            "target": "13",
            "type": "next"
        },
        {
            "source": "12",
            "target": "14",
            "type": "true"
        },
        {
            "source": "12",
            "target": "15",
            "type": "false"
        },
        {
            "source": "13",
            "target": "20",
            "type": "true"
        },
        {
            "source": "13",
            "target": "21",
            "type": "false"
        },
        {
            "source": "14",
            "target": "16",
            "type": "next"
        },
        {
            "source": "15",
            "target": "17",
            "type": "true"
        },
        {
            "source": "15",
            "target": "18",
            "type": "false"
        },
        {
            "source": "16",
            "target": "13",
            "type": "next"
        },
        {
            "source": "17",
            "target": "19",
            "type": "next"
        },
        {
            "source": "18",
            "target": "19",
            "type": "next"
        },
        {
            "source": "19",
            "target": "16",
            "type": "next"
        },
        {
            "source": "20",
            "target": "22",
            "type": "next"
        },
        {
            "source": "21",
            "target": "22",
            "type": "next"
        },
        {
            "source": "22",
            "target": "8",
            "type": "next"
        }
    ]
}