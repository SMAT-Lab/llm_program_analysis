{
    "nodes": [
        {
            "id": "1",
            "type": "block",
            "statements": [
                "import json",
                "import os",
                "from enum import Enum",
                "from typing import Any, Dict, Generic, List, Set, Tuple, Type, TypeVar",
                "from pydantic import BaseModel, Field, PrivateAttr, ValidationInfo, field_validator",
                "from pydantic_settings import BaseSettings, JsonConfigSettingsSource, PydanticBaseSettingsSource, SettingsConfigDict",
                "from backend.util.data import get_data_path",
                "T = TypeVar('T', bound=BaseSettings)",
                "class AppEnvironment(str, Enum):\n    LOCAL = 'local'\n    DEVELOPMENT = 'dev'\n    PRODUCTION = 'prod'",
                "LOCAL = 'local'",
                "DEVELOPMENT = 'dev'",
                "PRODUCTION = 'prod'",
                "class BehaveAs(str, Enum):\n    LOCAL = 'local'\n    CLOUD = 'cloud'",
                "LOCAL = 'local'",
                "CLOUD = 'cloud'",
                "class UpdateTrackingModel(BaseModel, Generic[T]):\n    _updated_fields: Set[str] = PrivateAttr(default_factory=set)\n\n    def __setattr__(self, name: str, value) -> None:\n        if name in self.model_fields:\n            self._updated_fields.add(name)\n        super().__setattr__(name, value)\n\n    def mark_updated(self, field_name: str) -> None:\n        if field_name in self.model_fields:\n            self._updated_fields.add(field_name)\n\n    def clear_updates(self) -> None:\n        self._updated_fields.clear()\n\n    def get_updates(self) -> Dict[str, Any]:\n        return {field: getattr(self, field) for field in self._updated_fields}\n\n    @property\n    def updated_fields(self):\n        return self._updated_fields",
                "_updated_fields: Set[str] = PrivateAttr(default_factory=set)",
                "def __setattr__(self, name: str, value) -> None:\n    if name in self.model_fields:\n        self._updated_fields.add(name)\n    super().__setattr__(name, value)",
                "name In self.model_fields"
            ]
        },
        {
            "id": "2",
            "type": "block",
            "statements": [
                "self._updated_fields.add(name)"
            ]
        },
        {
            "id": "3",
            "type": "block",
            "statements": []
        },
        {
            "id": "4",
            "type": "block",
            "statements": [
                "super().__setattr__(name, value)",
                "def mark_updated(self, field_name: str) -> None:\n    if field_name in self.model_fields:\n        self._updated_fields.add(field_name)",
                "field_name In self.model_fields"
            ]
        },
        {
            "id": "5",
            "type": "block",
            "statements": [
                "self._updated_fields.add(field_name)"
            ]
        },
        {
            "id": "6",
            "type": "block",
            "statements": []
        },
        {
            "id": "7",
            "type": "block",
            "statements": [
                "def clear_updates(self) -> None:\n    self._updated_fields.clear()",
                "self._updated_fields.clear()",
                "def get_updates(self) -> Dict[str, Any]:\n    return {field: getattr(self, field) for field in self._updated_fields}",
                "return {field: getattr(self, field) for field in self._updated_fields}"
            ]
        },
        {
            "id": "8",
            "type": "block",
            "statements": [
                "@property\ndef updated_fields(self):\n    return self._updated_fields",
                "return self._updated_fields"
            ]
        },
        {
            "id": "9",
            "type": "block",
            "statements": [
                "class Config(UpdateTrackingModel['Config'], BaseSettings):\n    \"\"\"Config for the server.\"\"\"\n    num_graph_workers: int = Field(default=10, ge=1, le=1000, description='Maximum number of workers to use for graph execution.')\n    num_node_workers: int = Field(default=5, ge=1, le=1000, description='Maximum number of workers to use for node execution within a single graph.')\n    pyro_host: str = Field(default='localhost', description='The default hostname of the Pyro server.')\n    pyro_client_comm_timeout: float = Field(default=15, description='The default timeout in seconds, for Pyro client connections.')\n    pyro_client_comm_retry: int = Field(default=3, description='The default number of retries for Pyro client connections.')\n    enable_auth: bool = Field(default=True, description='If authentication is enabled or not')\n    enable_credit: str = Field(default='false', description='If user credit system is enabled or not')\n    num_user_credits_refill: int = Field(default=1500, description='Number of credits to refill for each user')\n    model_config = SettingsConfigDict(env_file='.env', extra='allow')\n    websocket_server_host: str = Field(default='0.0.0.0', description='The host for the websocket server to run on')\n    websocket_server_port: int = Field(default=8001, description='The port for the websocket server to run on')\n    execution_manager_port: int = Field(default=8002, description='The port for execution manager daemon to run on')\n    execution_scheduler_port: int = Field(default=8003, description='The port for execution scheduler daemon to run on')\n    agent_server_port: int = Field(default=8004, description='The port for agent server daemon to run on')\n    database_api_port: int = Field(default=8005, description='The port for database server API to run on')\n    agent_api_host: str = Field(default='0.0.0.0', description='The host for agent server API to run on')\n    agent_api_port: int = Field(default=8006, description='The port for agent server API to run on')\n    platform_base_url: str = Field(default='', description=\"Must be set so the application knows where it's hosted at. This is necessary to make sure webhooks find their way.\")\n    frontend_base_url: str = Field(default='', description='Can be used to explicitly set the base URL for the frontend. This value is then used to generate redirect URLs for OAuth flows.')\n    media_gcs_bucket_name: str = Field(default='', description='The name of the Google Cloud Storage bucket for media files')\n\n    @field_validator('platform_base_url', 'frontend_base_url')\n    @classmethod\n    def validate_platform_base_url(cls, v: str, info: ValidationInfo) -> str:\n        if not v:\n            return v\n        if not v.startswith(('http://', 'https://')):\n            raise ValueError(f'{info.field_name} must be a full URL including a http:// or https:// schema')\n        if v.endswith('/'):\n            return v.rstrip('/')\n        return v\n    app_env: AppEnvironment = Field(default=AppEnvironment.LOCAL, description='The name of the app environment: local or dev or prod')\n    behave_as: BehaveAs = Field(default=BehaveAs.LOCAL, description='What environment to behave as: local or cloud')\n    execution_event_bus_name: str = Field(default='execution_event', description='Name of the event bus')\n    trust_endpoints_for_requests: List[str] = Field(default_factory=list, description='A whitelist of trusted internal endpoints for the backend to make requests to.')\n    backend_cors_allow_origins: List[str] = Field(default_factory=list)\n\n    @field_validator('backend_cors_allow_origins')\n    @classmethod\n    def validate_cors_allow_origins(cls, v: List[str]) -> List[str]:\n        out = []\n        port = None\n        has_localhost = False\n        has_127_0_0_1 = False\n        for url in v:\n            url = url.strip()\n            if url.startswith(('http://', 'https://')):\n                if 'localhost' in url:\n                    port = url.split(':')[2]\n                    has_localhost = True\n                if '127.0.0.1' in url:\n                    port = url.split(':')[2]\n                    has_127_0_0_1 = True\n                out.append(url)\n            else:\n                raise ValueError(f'Invalid URL: {url}')\n        if has_127_0_0_1 and (not has_localhost):\n            out.append(f'http://localhost:{port}')\n        if has_localhost and (not has_127_0_0_1):\n            out.append(f'http://127.0.0.1:{port}')\n        return out\n\n    @classmethod\n    def settings_customise_sources(cls, settings_cls: Type[BaseSettings], init_settings: PydanticBaseSettingsSource, env_settings: PydanticBaseSettingsSource, dotenv_settings: PydanticBaseSettingsSource, file_secret_settings: PydanticBaseSettingsSource) -> Tuple[PydanticBaseSettingsSource, ...]:\n        return (env_settings, file_secret_settings, dotenv_settings, JsonConfigSettingsSource(settings_cls), init_settings)",
                "'Config for the server.'",
                "num_graph_workers: int = Field(default=10, ge=1, le=1000, description='Maximum number of workers to use for graph execution.')",
                "num_node_workers: int = Field(default=5, ge=1, le=1000, description='Maximum number of workers to use for node execution within a single graph.')",
                "pyro_host: str = Field(default='localhost', description='The default hostname of the Pyro server.')",
                "pyro_client_comm_timeout: float = Field(default=15, description='The default timeout in seconds, for Pyro client connections.')",
                "pyro_client_comm_retry: int = Field(default=3, description='The default number of retries for Pyro client connections.')",
                "enable_auth: bool = Field(default=True, description='If authentication is enabled or not')",
                "enable_credit: str = Field(default='false', description='If user credit system is enabled or not')",
                "num_user_credits_refill: int = Field(default=1500, description='Number of credits to refill for each user')",
                "model_config = SettingsConfigDict(env_file='.env', extra='allow')",
                "websocket_server_host: str = Field(default='0.0.0.0', description='The host for the websocket server to run on')",
                "websocket_server_port: int = Field(default=8001, description='The port for the websocket server to run on')",
                "execution_manager_port: int = Field(default=8002, description='The port for execution manager daemon to run on')",
                "execution_scheduler_port: int = Field(default=8003, description='The port for execution scheduler daemon to run on')",
                "agent_server_port: int = Field(default=8004, description='The port for agent server daemon to run on')",
                "database_api_port: int = Field(default=8005, description='The port for database server API to run on')",
                "agent_api_host: str = Field(default='0.0.0.0', description='The host for agent server API to run on')",
                "agent_api_port: int = Field(default=8006, description='The port for agent server API to run on')",
                "platform_base_url: str = Field(default='', description=\"Must be set so the application knows where it's hosted at. This is necessary to make sure webhooks find their way.\")",
                "frontend_base_url: str = Field(default='', description='Can be used to explicitly set the base URL for the frontend. This value is then used to generate redirect URLs for OAuth flows.')",
                "media_gcs_bucket_name: str = Field(default='', description='The name of the Google Cloud Storage bucket for media files')",
                "@field_validator('platform_base_url', 'frontend_base_url')\n@classmethod\ndef validate_platform_base_url(cls, v: str, info: ValidationInfo) -> str:\n    if not v:\n        return v\n    if not v.startswith(('http://', 'https://')):\n        raise ValueError(f'{info.field_name} must be a full URL including a http:// or https:// schema')\n    if v.endswith('/'):\n        return v.rstrip('/')\n    return v",
                "not v"
            ]
        },
        {
            "id": "10",
            "type": "block",
            "statements": [
                "return v"
            ]
        },
        {
            "id": "11",
            "type": "block",
            "statements": []
        },
        {
            "id": "12",
            "type": "block",
            "statements": [
                "not v.startswith(('http://', 'https://'))"
            ]
        },
        {
            "id": "13",
            "type": "block",
            "statements": [
                "raise ValueError(f'{info.field_name} must be a full URL including a http:// or https:// schema')"
            ]
        },
        {
            "id": "14",
            "type": "block",
            "statements": []
        },
        {
            "id": "15",
            "type": "block",
            "statements": [
                "v.endswith('/')"
            ]
        },
        {
            "id": "16",
            "type": "block",
            "statements": [
                "return v.rstrip('/')"
            ]
        },
        {
            "id": "17",
            "type": "block",
            "statements": []
        },
        {
            "id": "18",
            "type": "block",
            "statements": [
                "return v"
            ]
        },
        {
            "id": "19",
            "type": "block",
            "statements": [
                "app_env: AppEnvironment = Field(default=AppEnvironment.LOCAL, description='The name of the app environment: local or dev or prod')",
                "behave_as: BehaveAs = Field(default=BehaveAs.LOCAL, description='What environment to behave as: local or cloud')",
                "execution_event_bus_name: str = Field(default='execution_event', description='Name of the event bus')",
                "trust_endpoints_for_requests: List[str] = Field(default_factory=list, description='A whitelist of trusted internal endpoints for the backend to make requests to.')",
                "backend_cors_allow_origins: List[str] = Field(default_factory=list)",
                "@field_validator('backend_cors_allow_origins')\n@classmethod\ndef validate_cors_allow_origins(cls, v: List[str]) -> List[str]:\n    out = []\n    port = None\n    has_localhost = False\n    has_127_0_0_1 = False\n    for url in v:\n        url = url.strip()\n        if url.startswith(('http://', 'https://')):\n            if 'localhost' in url:\n                port = url.split(':')[2]\n                has_localhost = True\n            if '127.0.0.1' in url:\n                port = url.split(':')[2]\n                has_127_0_0_1 = True\n            out.append(url)\n        else:\n            raise ValueError(f'Invalid URL: {url}')\n    if has_127_0_0_1 and (not has_localhost):\n        out.append(f'http://localhost:{port}')\n    if has_localhost and (not has_127_0_0_1):\n        out.append(f'http://127.0.0.1:{port}')\n    return out",
                "out = []",
                "port = None",
                "has_localhost = False",
                "has_127_0_0_1 = False"
            ]
        },
        {
            "id": "20",
            "type": "block",
            "statements": [
                "url",
                "v"
            ]
        },
        {
            "id": "21",
            "type": "block",
            "statements": [
                "url = url.strip()",
                "url.startswith(('http://', 'https://'))"
            ]
        },
        {
            "id": "22",
            "type": "block",
            "statements": [
                "has_127_0_0_1 and (not has_localhost)"
            ]
        },
        {
            "id": "23",
            "type": "block",
            "statements": [
                "'localhost' In url"
            ]
        },
        {
            "id": "24",
            "type": "block",
            "statements": [
                "raise ValueError(f'Invalid URL: {url}')"
            ]
        },
        {
            "id": "25",
            "type": "block",
            "statements": []
        },
        {
            "id": "26",
            "type": "block",
            "statements": [
                "port = url.split(':')[2]",
                "has_localhost = True"
            ]
        },
        {
            "id": "27",
            "type": "block",
            "statements": []
        },
        {
            "id": "28",
            "type": "block",
            "statements": [
                "'127.0.0.1' In url"
            ]
        },
        {
            "id": "29",
            "type": "block",
            "statements": [
                "port = url.split(':')[2]",
                "has_127_0_0_1 = True"
            ]
        },
        {
            "id": "30",
            "type": "block",
            "statements": []
        },
        {
            "id": "31",
            "type": "block",
            "statements": [
                "out.append(url)"
            ]
        },
        {
            "id": "32",
            "type": "block",
            "statements": [
                "out.append(f'http://localhost:{port}')"
            ]
        },
        {
            "id": "33",
            "type": "block",
            "statements": []
        },
        {
            "id": "34",
            "type": "block",
            "statements": [
                "has_localhost and (not has_127_0_0_1)"
            ]
        },
        {
            "id": "35",
            "type": "block",
            "statements": [
                "out.append(f'http://127.0.0.1:{port}')"
            ]
        },
        {
            "id": "36",
            "type": "block",
            "statements": []
        },
        {
            "id": "37",
            "type": "block",
            "statements": [
                "return out"
            ]
        },
        {
            "id": "38",
            "type": "block",
            "statements": [
                "@classmethod\ndef settings_customise_sources(cls, settings_cls: Type[BaseSettings], init_settings: PydanticBaseSettingsSource, env_settings: PydanticBaseSettingsSource, dotenv_settings: PydanticBaseSettingsSource, file_secret_settings: PydanticBaseSettingsSource) -> Tuple[PydanticBaseSettingsSource, ...]:\n    return (env_settings, file_secret_settings, dotenv_settings, JsonConfigSettingsSource(settings_cls), init_settings)",
                "return (env_settings, file_secret_settings, dotenv_settings, JsonConfigSettingsSource(settings_cls), init_settings)"
            ]
        },
        {
            "id": "39",
            "type": "block",
            "statements": [
                "class Secrets(UpdateTrackingModel['Secrets'], BaseSettings):\n    \"\"\"Secrets for the server.\"\"\"\n    supabase_url: str = Field(default='', description='Supabase URL')\n    supabase_service_role_key: str = Field(default='', description='Supabase service role key')\n    encryption_key: str = Field(default='', description='Encryption key')\n    github_client_id: str = Field(default='', description='GitHub OAuth client ID')\n    github_client_secret: str = Field(default='', description='GitHub OAuth client secret')\n    google_client_id: str = Field(default='', description='Google OAuth client ID')\n    google_client_secret: str = Field(default='', description='Google OAuth client secret')\n    notion_client_id: str = Field(default='', description='Notion OAuth client ID')\n    notion_client_secret: str = Field(default='', description='Notion OAuth client secret')\n    openai_api_key: str = Field(default='', description='OpenAI API key')\n    anthropic_api_key: str = Field(default='', description='Anthropic API key')\n    groq_api_key: str = Field(default='', description='Groq API key')\n    open_router_api_key: str = Field(default='', description='Open Router API Key')\n    reddit_client_id: str = Field(default='', description='Reddit client ID')\n    reddit_client_secret: str = Field(default='', description='Reddit client secret')\n    reddit_username: str = Field(default='', description='Reddit username')\n    reddit_password: str = Field(default='', description='Reddit password')\n    openweathermap_api_key: str = Field(default='', description='OpenWeatherMap API key')\n    medium_api_key: str = Field(default='', description='Medium API key')\n    medium_author_id: str = Field(default='', description='Medium author ID')\n    did_api_key: str = Field(default='', description='D-ID API Key')\n    revid_api_key: str = Field(default='', description='revid.ai API key')\n    discord_bot_token: str = Field(default='', description='Discord bot token')\n    smtp_server: str = Field(default='', description='SMTP server IP')\n    smtp_port: str = Field(default='', description='SMTP server port')\n    smtp_username: str = Field(default='', description='SMTP username')\n    smtp_password: str = Field(default='', description='SMTP password')\n    sentry_dsn: str = Field(default='', description='Sentry DSN')\n    google_maps_api_key: str = Field(default='', description='Google Maps API Key')\n    replicate_api_key: str = Field(default='', description='Replicate API Key')\n    unreal_speech_api_key: str = Field(default='', description='Unreal Speech API Key')\n    ideogram_api_key: str = Field(default='', description='Ideogram API Key')\n    jina_api_key: str = Field(default='', description='Jina API Key')\n    unreal_speech_api_key: str = Field(default='', description='Unreal Speech API Key')\n    fal_key: str = Field(default='', description='FAL API key')\n    model_config = SettingsConfigDict(env_file='.env', env_file_encoding='utf-8', extra='allow')",
                "'Secrets for the server.'",
                "supabase_url: str = Field(default='', description='Supabase URL')",
                "supabase_service_role_key: str = Field(default='', description='Supabase service role key')",
                "encryption_key: str = Field(default='', description='Encryption key')",
                "github_client_id: str = Field(default='', description='GitHub OAuth client ID')",
                "github_client_secret: str = Field(default='', description='GitHub OAuth client secret')",
                "google_client_id: str = Field(default='', description='Google OAuth client ID')",
                "google_client_secret: str = Field(default='', description='Google OAuth client secret')",
                "notion_client_id: str = Field(default='', description='Notion OAuth client ID')",
                "notion_client_secret: str = Field(default='', description='Notion OAuth client secret')",
                "openai_api_key: str = Field(default='', description='OpenAI API key')",
                "anthropic_api_key: str = Field(default='', description='Anthropic API key')",
                "groq_api_key: str = Field(default='', description='Groq API key')",
                "open_router_api_key: str = Field(default='', description='Open Router API Key')",
                "reddit_client_id: str = Field(default='', description='Reddit client ID')",
                "reddit_client_secret: str = Field(default='', description='Reddit client secret')",
                "reddit_username: str = Field(default='', description='Reddit username')",
                "reddit_password: str = Field(default='', description='Reddit password')",
                "openweathermap_api_key: str = Field(default='', description='OpenWeatherMap API key')",
                "medium_api_key: str = Field(default='', description='Medium API key')",
                "medium_author_id: str = Field(default='', description='Medium author ID')",
                "did_api_key: str = Field(default='', description='D-ID API Key')",
                "revid_api_key: str = Field(default='', description='revid.ai API key')",
                "discord_bot_token: str = Field(default='', description='Discord bot token')",
                "smtp_server: str = Field(default='', description='SMTP server IP')",
                "smtp_port: str = Field(default='', description='SMTP server port')",
                "smtp_username: str = Field(default='', description='SMTP username')",
                "smtp_password: str = Field(default='', description='SMTP password')",
                "sentry_dsn: str = Field(default='', description='Sentry DSN')",
                "google_maps_api_key: str = Field(default='', description='Google Maps API Key')",
                "replicate_api_key: str = Field(default='', description='Replicate API Key')",
                "unreal_speech_api_key: str = Field(default='', description='Unreal Speech API Key')",
                "ideogram_api_key: str = Field(default='', description='Ideogram API Key')",
                "jina_api_key: str = Field(default='', description='Jina API Key')",
                "unreal_speech_api_key: str = Field(default='', description='Unreal Speech API Key')",
                "fal_key: str = Field(default='', description='FAL API key')",
                "model_config = SettingsConfigDict(env_file='.env', env_file_encoding='utf-8', extra='allow')",
                "class Settings(BaseModel):\n    config: Config = Config()\n    secrets: Secrets = Secrets()\n\n    def save(self) -> None:\n        if self.config.updated_fields:\n            config_to_save = self.config.get_updates()\n            config_path = os.path.join(get_data_path(), 'config.json')\n            if os.path.exists(config_path):\n                with open(config_path, 'r+') as f:\n                    existing_config: Dict[str, Any] = json.load(f)\n                    existing_config.update(config_to_save)\n                    f.seek(0)\n                    json.dump(existing_config, f, indent=2)\n                    f.truncate()\n            else:\n                with open(config_path, 'w') as f:\n                    json.dump(config_to_save, f, indent=2)\n            self.config.clear_updates()",
                "config: Config = Config()",
                "secrets: Secrets = Secrets()",
                "def save(self) -> None:\n    if self.config.updated_fields:\n        config_to_save = self.config.get_updates()\n        config_path = os.path.join(get_data_path(), 'config.json')\n        if os.path.exists(config_path):\n            with open(config_path, 'r+') as f:\n                existing_config: Dict[str, Any] = json.load(f)\n                existing_config.update(config_to_save)\n                f.seek(0)\n                json.dump(existing_config, f, indent=2)\n                f.truncate()\n        else:\n            with open(config_path, 'w') as f:\n                json.dump(config_to_save, f, indent=2)\n        self.config.clear_updates()",
                "self.config.updated_fields"
            ]
        },
        {
            "id": "40",
            "type": "block",
            "statements": [
                "config_to_save = self.config.get_updates()",
                "config_path = os.path.join(get_data_path(), 'config.json')",
                "os.path.exists(config_path)"
            ]
        },
        {
            "id": "41",
            "type": "block",
            "statements": []
        },
        {
            "id": "42",
            "type": "block",
            "statements": []
        },
        {
            "id": "43",
            "type": "block",
            "statements": [
                "with open(config_path, 'r+') as f:\n    existing_config: Dict[str, Any] = json.load(f)\n    existing_config.update(config_to_save)\n    f.seek(0)\n    json.dump(existing_config, f, indent=2)\n    f.truncate()",
                "existing_config: Dict[str, Any] = json.load(f)",
                "existing_config.update(config_to_save)",
                "f.seek(0)",
                "json.dump(existing_config, f)",
                "f.truncate()"
            ]
        },
        {
            "id": "44",
            "type": "block",
            "statements": [
                "with open(config_path, 'w') as f:\n    json.dump(config_to_save, f, indent=2)",
                "json.dump(config_to_save, f)"
            ]
        },
        {
            "id": "45",
            "type": "block",
            "statements": [
                "self.config.clear_updates()"
            ]
        }
    ],
    "edges": [
        {
            "source": "1",
            "target": "2",
            "type": "true"
        },
        {
            "source": "1",
            "target": "3",
            "type": "false"
        },
        {
            "source": "2",
            "target": "4",
            "type": "next"
        },
        {
            "source": "3",
            "target": "4",
            "type": "next"
        },
        {
            "source": "4",
            "target": "5",
            "type": "true"
        },
        {
            "source": "4",
            "target": "6",
            "type": "false"
        },
        {
            "source": "5",
            "target": "7",
            "type": "next"
        },
        {
            "source": "6",
            "target": "7",
            "type": "next"
        },
        {
            "source": "9",
            "target": "10",
            "type": "true"
        },
        {
            "source": "9",
            "target": "11",
            "type": "false"
        },
        {
            "source": "11",
            "target": "12",
            "type": "next"
        },
        {
            "source": "12",
            "target": "13",
            "type": "true"
        },
        {
            "source": "12",
            "target": "14",
            "type": "false"
        },
        {
            "source": "13",
            "target": "15",
            "type": "next"
        },
        {
            "source": "14",
            "target": "15",
            "type": "next"
        },
        {
            "source": "15",
            "target": "16",
            "type": "true"
        },
        {
            "source": "15",
            "target": "17",
            "type": "false"
        },
        {
            "source": "17",
            "target": "18",
            "type": "next"
        },
        {
            "source": "19",
            "target": "20",
            "type": "next"
        },
        {
            "source": "20",
            "target": "21",
            "type": "true"
        },
        {
            "source": "20",
            "target": "22",
            "type": "false"
        },
        {
            "source": "21",
            "target": "23",
            "type": "true"
        },
        {
            "source": "21",
            "target": "24",
            "type": "false"
        },
        {
            "source": "22",
            "target": "32",
            "type": "true"
        },
        {
            "source": "22",
            "target": "33",
            "type": "false"
        },
        {
            "source": "23",
            "target": "26",
            "type": "true"
        },
        {
            "source": "23",
            "target": "27",
            "type": "false"
        },
        {
            "source": "24",
            "target": "25",
            "type": "next"
        },
        {
            "source": "25",
            "target": "20",
            "type": "next"
        },
        {
            "source": "26",
            "target": "28",
            "type": "next"
        },
        {
            "source": "27",
            "target": "28",
            "type": "next"
        },
        {
            "source": "28",
            "target": "29",
            "type": "true"
        },
        {
            "source": "28",
            "target": "30",
            "type": "false"
        },
        {
            "source": "29",
            "target": "31",
            "type": "next"
        },
        {
            "source": "30",
            "target": "31",
            "type": "next"
        },
        {
            "source": "31",
            "target": "25",
            "type": "next"
        },
        {
            "source": "32",
            "target": "34",
            "type": "next"
        },
        {
            "source": "33",
            "target": "34",
            "type": "next"
        },
        {
            "source": "34",
            "target": "35",
            "type": "true"
        },
        {
            "source": "34",
            "target": "36",
            "type": "false"
        },
        {
            "source": "35",
            "target": "37",
            "type": "next"
        },
        {
            "source": "36",
            "target": "37",
            "type": "next"
        },
        {
            "source": "39",
            "target": "40",
            "type": "true"
        },
        {
            "source": "39",
            "target": "41",
            "type": "false"
        },
        {
            "source": "40",
            "target": "43",
            "type": "true"
        },
        {
            "source": "40",
            "target": "44",
            "type": "false"
        },
        {
            "source": "41",
            "target": "42",
            "type": "next"
        },
        {
            "source": "43",
            "target": "45",
            "type": "next"
        },
        {
            "source": "44",
            "target": "45",
            "type": "next"
        },
        {
            "source": "45",
            "target": "42",
            "type": "next"
        }
    ]
}