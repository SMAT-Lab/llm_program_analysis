{
    "nodes": [
        {
            "id": "1",
            "type": "block",
            "statements": [
                "import json",
                "from enum import Enum",
                "from typing import Any",
                "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema",
                "from backend.data.model import SchemaField",
                "from backend.util.request import requests",
                "class HttpMethod(Enum):\n    GET = 'GET'\n    POST = 'POST'\n    PUT = 'PUT'\n    DELETE = 'DELETE'\n    PATCH = 'PATCH'\n    OPTIONS = 'OPTIONS'\n    HEAD = 'HEAD'",
                "GET = 'GET'",
                "POST = 'POST'",
                "PUT = 'PUT'",
                "DELETE = 'DELETE'",
                "PATCH = 'PATCH'",
                "OPTIONS = 'OPTIONS'",
                "HEAD = 'HEAD'",
                "class SendWebRequestBlock(Block):\n\n    class Input(BlockSchema):\n        url: str = SchemaField(description='The URL to send the request to', placeholder='https://api.example.com')\n        method: HttpMethod = SchemaField(description='The HTTP method to use for the request', default=HttpMethod.POST)\n        headers: dict[str, str] = SchemaField(description='The headers to include in the request', default={})\n        json_format: bool = SchemaField(title='JSON format', description='Whether to send and receive body as JSON', default=True)\n        body: Any = SchemaField(description='The body of the request', default=None)\n\n    class Output(BlockSchema):\n        response: object = SchemaField(description='The response from the server')\n        client_error: object = SchemaField(description='The error on 4xx status codes')\n        server_error: object = SchemaField(description='The error on 5xx status codes')\n\n    def __init__(self):\n        super().__init__(id='6595ae1f-b924-42cb-9a41-551a0611c4b4', description='This block makes an HTTP request to the given URL.', categories={BlockCategory.OUTPUT}, input_schema=SendWebRequestBlock.Input, output_schema=SendWebRequestBlock.Output)\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        if isinstance(input_data.body, str):\n            input_data.body = json.loads(input_data.body)\n        response = requests.request(input_data.method.value, input_data.url, headers=input_data.headers, json=input_data.body if input_data.json_format else None, data=input_data.body if not input_data.json_format else None)\n        result = response.json() if input_data.json_format else response.text\n        if response.status_code // 100 == 2:\n            yield ('response', result)\n        elif response.status_code // 100 == 4:\n            yield ('client_error', result)\n        elif response.status_code // 100 == 5:\n            yield ('server_error', result)\n        else:\n            raise ValueError(f'Unexpected status code: {response.status_code}')",
                "class Input(BlockSchema):\n    url: str = SchemaField(description='The URL to send the request to', placeholder='https://api.example.com')\n    method: HttpMethod = SchemaField(description='The HTTP method to use for the request', default=HttpMethod.POST)\n    headers: dict[str, str] = SchemaField(description='The headers to include in the request', default={})\n    json_format: bool = SchemaField(title='JSON format', description='Whether to send and receive body as JSON', default=True)\n    body: Any = SchemaField(description='The body of the request', default=None)",
                "url: str = SchemaField(description='The URL to send the request to', placeholder='https://api.example.com')",
                "method: HttpMethod = SchemaField(description='The HTTP method to use for the request', default=HttpMethod.POST)",
                "headers: dict[str, str] = SchemaField(description='The headers to include in the request', default={})",
                "json_format: bool = SchemaField(title='JSON format', description='Whether to send and receive body as JSON', default=True)",
                "body: Any = SchemaField(description='The body of the request', default=None)",
                "class Output(BlockSchema):\n    response: object = SchemaField(description='The response from the server')\n    client_error: object = SchemaField(description='The error on 4xx status codes')\n    server_error: object = SchemaField(description='The error on 5xx status codes')",
                "response: object = SchemaField(description='The response from the server')",
                "client_error: object = SchemaField(description='The error on 4xx status codes')",
                "server_error: object = SchemaField(description='The error on 5xx status codes')",
                "def __init__(self):\n    super().__init__(id='6595ae1f-b924-42cb-9a41-551a0611c4b4', description='This block makes an HTTP request to the given URL.', categories={BlockCategory.OUTPUT}, input_schema=SendWebRequestBlock.Input, output_schema=SendWebRequestBlock.Output)",
                "super().__init__()",
                "def run(self, input_data: Input, **kwargs) -> BlockOutput:\n    if isinstance(input_data.body, str):\n        input_data.body = json.loads(input_data.body)\n    response = requests.request(input_data.method.value, input_data.url, headers=input_data.headers, json=input_data.body if input_data.json_format else None, data=input_data.body if not input_data.json_format else None)\n    result = response.json() if input_data.json_format else response.text\n    if response.status_code // 100 == 2:\n        yield ('response', result)\n    elif response.status_code // 100 == 4:\n        yield ('client_error', result)\n    elif response.status_code // 100 == 5:\n        yield ('server_error', result)\n    else:\n        raise ValueError(f'Unexpected status code: {response.status_code}')",
                "isinstance(input_data.body, str)"
            ]
        },
        {
            "id": "2",
            "type": "block",
            "statements": [
                "input_data.body = json.loads(input_data.body)"
            ]
        },
        {
            "id": "3",
            "type": "block",
            "statements": []
        },
        {
            "id": "4",
            "type": "block",
            "statements": [
                "response = requests.request(input_data.method.value, input_data.url, headers=input_data.headers, json=input_data.body if input_data.json_format else None, data=input_data.body if not input_data.json_format else None)",
                "result = response.json() if input_data.json_format else response.text",
                "response.status_code FloorDiv 100 Eq 2"
            ]
        },
        {
            "id": "5",
            "type": "block",
            "statements": [
                "(yield ('response', result))"
            ]
        },
        {
            "id": "6",
            "type": "block",
            "statements": [
                "response.status_code FloorDiv 100 Eq 4"
            ]
        },
        {
            "id": "7",
            "type": "block",
            "statements": []
        },
        {
            "id": "8",
            "type": "block",
            "statements": [
                "(yield ('client_error', result))"
            ]
        },
        {
            "id": "9",
            "type": "block",
            "statements": [
                "response.status_code FloorDiv 100 Eq 5"
            ]
        },
        {
            "id": "10",
            "type": "block",
            "statements": []
        },
        {
            "id": "11",
            "type": "block",
            "statements": [
                "(yield ('server_error', result))"
            ]
        },
        {
            "id": "12",
            "type": "block",
            "statements": [
                "raise ValueError(f'Unexpected status code: {response.status_code}')"
            ]
        },
        {
            "id": "13",
            "type": "block",
            "statements": []
        }
    ],
    "edges": [
        {
            "source": "1",
            "target": "2",
            "type": "true"
        },
        {
            "source": "1",
            "target": "3",
            "type": "false"
        },
        {
            "source": "2",
            "target": "4",
            "type": "next"
        },
        {
            "source": "3",
            "target": "4",
            "type": "next"
        },
        {
            "source": "4",
            "target": "5",
            "type": "true"
        },
        {
            "source": "4",
            "target": "6",
            "type": "false"
        },
        {
            "source": "5",
            "target": "7",
            "type": "next"
        },
        {
            "source": "6",
            "target": "8",
            "type": "true"
        },
        {
            "source": "6",
            "target": "9",
            "type": "false"
        },
        {
            "source": "8",
            "target": "10",
            "type": "next"
        },
        {
            "source": "9",
            "target": "11",
            "type": "true"
        },
        {
            "source": "9",
            "target": "12",
            "type": "false"
        },
        {
            "source": "10",
            "target": "7",
            "type": "next"
        },
        {
            "source": "11",
            "target": "13",
            "type": "next"
        },
        {
            "source": "12",
            "target": "13",
            "type": "next"
        },
        {
            "source": "13",
            "target": "10",
            "type": "next"
        }
    ]
}