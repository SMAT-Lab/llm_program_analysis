{
    "nodes": [
        {
            "id": "1",
            "type": "block",
            "statements": [
                "from fastapi import HTTPException, Request",
                "from starlette.middleware.base import RequestResponseEndpoint",
                "from .limiter import RateLimiter",
                "async def rate_limit_middleware(request: Request, call_next: RequestResponseEndpoint):\n    \"\"\"FastAPI middleware for rate limiting API requests.\"\"\"\n    limiter = RateLimiter()\n    if not request.url.path.startswith('/api'):\n        return await call_next(request)\n    api_key = request.headers.get('Authorization')\n    if not api_key:\n        return await call_next(request)\n    api_key = api_key.replace('Bearer ', '')\n    (is_allowed, remaining, reset_time) = await limiter.check_rate_limit(api_key)\n    if not is_allowed:\n        raise HTTPException(status_code=429, detail='Rate limit exceeded. Please try again later.')\n    response = await call_next(request)\n    response.headers['X-RateLimit-Limit'] = str(limiter.max_requests)\n    response.headers['X-RateLimit-Remaining'] = str(remaining)\n    response.headers['X-RateLimit-Reset'] = str(reset_time)\n    return response",
                "'FastAPI middleware for rate limiting API requests.'",
                "limiter = RateLimiter()",
                "not request.url.path.startswith('/api')"
            ]
        },
        {
            "id": "2",
            "type": "block",
            "statements": [
                "return await call_next(request)"
            ]
        },
        {
            "id": "3",
            "type": "block",
            "statements": []
        },
        {
            "id": "4",
            "type": "block",
            "statements": [
                "api_key = request.headers.get('Authorization')",
                "not api_key"
            ]
        },
        {
            "id": "5",
            "type": "block",
            "statements": [
                "return await call_next(request)"
            ]
        },
        {
            "id": "6",
            "type": "block",
            "statements": []
        },
        {
            "id": "7",
            "type": "block",
            "statements": [
                "api_key = api_key.replace('Bearer ', '')",
                "(is_allowed, remaining, reset_time) = await limiter.check_rate_limit(api_key)",
                "not is_allowed"
            ]
        },
        {
            "id": "8",
            "type": "block",
            "statements": [
                "raise HTTPException(status_code=429, detail='Rate limit exceeded. Please try again later.')"
            ]
        },
        {
            "id": "9",
            "type": "block",
            "statements": []
        },
        {
            "id": "10",
            "type": "block",
            "statements": [
                "response = await call_next(request)",
                "response.headers['X-RateLimit-Limit'] = str(limiter.max_requests)",
                "response.headers['X-RateLimit-Remaining'] = str(remaining)",
                "response.headers['X-RateLimit-Reset'] = str(reset_time)",
                "return response"
            ]
        }
    ],
    "edges": [
        {
            "source": "1",
            "target": "2",
            "type": "true"
        },
        {
            "source": "1",
            "target": "3",
            "type": "false"
        },
        {
            "source": "3",
            "target": "4",
            "type": "next"
        },
        {
            "source": "4",
            "target": "5",
            "type": "true"
        },
        {
            "source": "4",
            "target": "6",
            "type": "false"
        },
        {
            "source": "6",
            "target": "7",
            "type": "next"
        },
        {
            "source": "7",
            "target": "8",
            "type": "true"
        },
        {
            "source": "7",
            "target": "9",
            "type": "false"
        },
        {
            "source": "8",
            "target": "10",
            "type": "next"
        },
        {
            "source": "9",
            "target": "10",
            "type": "next"
        }
    ]
}