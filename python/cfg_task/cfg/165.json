{
    "nodes": [
        {
            "id": "1",
            "type": "block",
            "statements": [
                "import pytest",
                "from ldclient import LDClient",
                "from autogpt_libs.feature_flag.client import feature_flag, mock_flag_variation",
                "@pytest.fixture\ndef ld_client(mocker):\n    client = mocker.Mock(spec=LDClient)\n    mocker.patch('ldclient.get', return_value=client)\n    client.is_initialized.return_value = True\n    return client",
                "client = mocker.Mock(spec=LDClient)",
                "mocker.patch('ldclient.get')",
                "client.is_initialized.return_value = True",
                "return client"
            ]
        },
        {
            "id": "2",
            "type": "block",
            "statements": [
                "@pytest.mark.asyncio\nasync def test_feature_flag_enabled(ld_client):\n    ld_client.variation.return_value = True\n\n    @feature_flag('test-flag')\n    async def test_function(user_id: str):\n        return 'success'\n    result = test_function(user_id='test-user')\n    assert result == 'success'\n    ld_client.variation.assert_called_once()",
                "ld_client.variation.return_value = True",
                "@feature_flag('test-flag')\nasync def test_function(user_id: str):\n    return 'success'",
                "return 'success'"
            ]
        },
        {
            "id": "3",
            "type": "block",
            "statements": [
                "result = test_function(user_id='test-user')",
                "assert result == 'success'",
                "ld_client.variation.assert_called_once()",
                "@pytest.mark.asyncio\nasync def test_feature_flag_unauthorized_response(ld_client):\n    ld_client.variation.return_value = False\n\n    @feature_flag('test-flag')\n    async def test_function(user_id: str):\n        return 'success'\n    result = test_function(user_id='test-user')\n    assert result == {'error': 'disabled'}",
                "ld_client.variation.return_value = False",
                "@feature_flag('test-flag')\nasync def test_function(user_id: str):\n    return 'success'",
                "return 'success'"
            ]
        },
        {
            "id": "4",
            "type": "block",
            "statements": [
                "result = test_function(user_id='test-user')",
                "assert result == {'error': 'disabled'}",
                "def test_mock_flag_variation(ld_client):\n    with mock_flag_variation('test-flag', True):\n        assert ld_client.variation('test-flag', None, False)\n    with mock_flag_variation('test-flag', False):\n        assert ld_client.variation('test-flag', None, False)",
                "with mock_flag_variation('test-flag', True):\n    assert ld_client.variation('test-flag', None, False)",
                "assert ld_client.variation('test-flag', None, False)",
                "with mock_flag_variation('test-flag', False):\n    assert ld_client.variation('test-flag', None, False)",
                "assert ld_client.variation('test-flag', None, False)"
            ]
        }
    ],
    "edges": []
}