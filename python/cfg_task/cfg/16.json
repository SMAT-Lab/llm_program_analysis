{
    "nodes": [
        {
            "id": "1",
            "type": "block",
            "statements": [
                "from backend.blocks.hubspot._auth import HubSpotCredentials, HubSpotCredentialsField, HubSpotCredentialsInput",
                "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema",
                "from backend.data.model import SchemaField",
                "from backend.util.request import requests",
                "class HubSpotContactBlock(Block):\n\n    class Input(BlockSchema):\n        credentials: HubSpotCredentialsInput = HubSpotCredentialsField()\n        operation: str = SchemaField(description='Operation to perform (create, update, get)', default='get')\n        contact_data: dict = SchemaField(description='Contact data for create/update operations', default={})\n        email: str = SchemaField(description='Email address for get/update operations', default='')\n\n    class Output(BlockSchema):\n        contact: dict = SchemaField(description='Contact information')\n        status: str = SchemaField(description='Operation status')\n\n    def __init__(self):\n        super().__init__(id='5267326e-c4c1-4016-9f54-4e72ad02f813', description='Manages HubSpot contacts - create, update, and retrieve contact information', categories={BlockCategory.CRM}, input_schema=HubSpotContactBlock.Input, output_schema=HubSpotContactBlock.Output)\n\n    def run(self, input_data: Input, *, credentials: HubSpotCredentials, **kwargs) -> BlockOutput:\n        base_url = 'https://api.hubapi.com/crm/v3/objects/contacts'\n        headers = {'Authorization': f'Bearer {credentials.api_key.get_secret_value()}', 'Content-Type': 'application/json'}\n        if input_data.operation == 'create':\n            response = requests.post(base_url, headers=headers, json={'properties': input_data.contact_data})\n            result = response.json()\n            yield ('contact', result)\n            yield ('status', 'created')\n        elif input_data.operation == 'get':\n            search_url = f'{base_url}/search'\n            search_data = {'filterGroups': [{'filters': [{'propertyName': 'email', 'operator': 'EQ', 'value': input_data.email}]}]}\n            response = requests.post(search_url, headers=headers, json=search_data)\n            result = response.json()\n            yield ('contact', result.get('results', [{}])[0])\n            yield ('status', 'retrieved')\n        elif input_data.operation == 'update':\n            search_response = requests.post(f'{base_url}/search', headers=headers, json={'filterGroups': [{'filters': [{'propertyName': 'email', 'operator': 'EQ', 'value': input_data.email}]}]})\n            contact_id = search_response.json().get('results', [{}])[0].get('id')\n            if contact_id:\n                response = requests.patch(f'{base_url}/{contact_id}', headers=headers, json={'properties': input_data.contact_data})\n                result = response.json()\n                yield ('contact', result)\n                yield ('status', 'updated')\n            else:\n                yield ('contact', {})\n                yield ('status', 'contact_not_found')",
                "class Input(BlockSchema):\n    credentials: HubSpotCredentialsInput = HubSpotCredentialsField()\n    operation: str = SchemaField(description='Operation to perform (create, update, get)', default='get')\n    contact_data: dict = SchemaField(description='Contact data for create/update operations', default={})\n    email: str = SchemaField(description='Email address for get/update operations', default='')",
                "credentials: HubSpotCredentialsInput = HubSpotCredentialsField()",
                "operation: str = SchemaField(description='Operation to perform (create, update, get)', default='get')",
                "contact_data: dict = SchemaField(description='Contact data for create/update operations', default={})",
                "email: str = SchemaField(description='Email address for get/update operations', default='')",
                "class Output(BlockSchema):\n    contact: dict = SchemaField(description='Contact information')\n    status: str = SchemaField(description='Operation status')",
                "contact: dict = SchemaField(description='Contact information')",
                "status: str = SchemaField(description='Operation status')",
                "def __init__(self):\n    super().__init__(id='5267326e-c4c1-4016-9f54-4e72ad02f813', description='Manages HubSpot contacts - create, update, and retrieve contact information', categories={BlockCategory.CRM}, input_schema=HubSpotContactBlock.Input, output_schema=HubSpotContactBlock.Output)",
                "super().__init__()",
                "def run(self, input_data: Input, *, credentials: HubSpotCredentials, **kwargs) -> BlockOutput:\n    base_url = 'https://api.hubapi.com/crm/v3/objects/contacts'\n    headers = {'Authorization': f'Bearer {credentials.api_key.get_secret_value()}', 'Content-Type': 'application/json'}\n    if input_data.operation == 'create':\n        response = requests.post(base_url, headers=headers, json={'properties': input_data.contact_data})\n        result = response.json()\n        yield ('contact', result)\n        yield ('status', 'created')\n    elif input_data.operation == 'get':\n        search_url = f'{base_url}/search'\n        search_data = {'filterGroups': [{'filters': [{'propertyName': 'email', 'operator': 'EQ', 'value': input_data.email}]}]}\n        response = requests.post(search_url, headers=headers, json=search_data)\n        result = response.json()\n        yield ('contact', result.get('results', [{}])[0])\n        yield ('status', 'retrieved')\n    elif input_data.operation == 'update':\n        search_response = requests.post(f'{base_url}/search', headers=headers, json={'filterGroups': [{'filters': [{'propertyName': 'email', 'operator': 'EQ', 'value': input_data.email}]}]})\n        contact_id = search_response.json().get('results', [{}])[0].get('id')\n        if contact_id:\n            response = requests.patch(f'{base_url}/{contact_id}', headers=headers, json={'properties': input_data.contact_data})\n            result = response.json()\n            yield ('contact', result)\n            yield ('status', 'updated')\n        else:\n            yield ('contact', {})\n            yield ('status', 'contact_not_found')",
                "base_url = 'https://api.hubapi.com/crm/v3/objects/contacts'",
                "headers = {'Authorization': f'Bearer {credentials.api_key.get_secret_value()}', 'Content-Type': 'application/json'}",
                "input_data.operation Eq 'create'"
            ]
        },
        {
            "id": "2",
            "type": "block",
            "statements": [
                "response = requests.post(base_url, headers=headers, json={'properties': input_data.contact_data})",
                "result = response.json()",
                "(yield ('contact', result))",
                "(yield ('status', 'created'))"
            ]
        },
        {
            "id": "3",
            "type": "block",
            "statements": [
                "input_data.operation Eq 'get'"
            ]
        },
        {
            "id": "4",
            "type": "block",
            "statements": []
        },
        {
            "id": "5",
            "type": "block",
            "statements": [
                "search_url = f'{base_url}/search'",
                "search_data = {'filterGroups': [{'filters': [{'propertyName': 'email', 'operator': 'EQ', 'value': input_data.email}]}]}",
                "response = requests.post(search_url, headers=headers, json=search_data)",
                "result = response.json()",
                "(yield ('contact', result.get('results', [{}])[0]))",
                "(yield ('status', 'retrieved'))"
            ]
        },
        {
            "id": "6",
            "type": "block",
            "statements": [
                "input_data.operation Eq 'update'"
            ]
        },
        {
            "id": "7",
            "type": "block",
            "statements": []
        },
        {
            "id": "8",
            "type": "block",
            "statements": [
                "search_response = requests.post(f'{base_url}/search', headers=headers, json={'filterGroups': [{'filters': [{'propertyName': 'email', 'operator': 'EQ', 'value': input_data.email}]}]})",
                "contact_id = search_response.json().get('results', [{}])[0].get('id')",
                "contact_id"
            ]
        },
        {
            "id": "9",
            "type": "block",
            "statements": []
        },
        {
            "id": "10",
            "type": "block",
            "statements": []
        },
        {
            "id": "11",
            "type": "block",
            "statements": [
                "response = requests.patch(f'{base_url}/{contact_id}', headers=headers, json={'properties': input_data.contact_data})",
                "result = response.json()",
                "(yield ('contact', result))",
                "(yield ('status', 'updated'))"
            ]
        },
        {
            "id": "12",
            "type": "block",
            "statements": [
                "(yield ('contact', {}))",
                "(yield ('status', 'contact_not_found'))"
            ]
        },
        {
            "id": "13",
            "type": "block",
            "statements": []
        }
    ],
    "edges": [
        {
            "source": "1",
            "target": "2",
            "type": "true"
        },
        {
            "source": "1",
            "target": "3",
            "type": "false"
        },
        {
            "source": "2",
            "target": "4",
            "type": "next"
        },
        {
            "source": "3",
            "target": "5",
            "type": "true"
        },
        {
            "source": "3",
            "target": "6",
            "type": "false"
        },
        {
            "source": "5",
            "target": "7",
            "type": "next"
        },
        {
            "source": "6",
            "target": "8",
            "type": "true"
        },
        {
            "source": "6",
            "target": "9",
            "type": "false"
        },
        {
            "source": "7",
            "target": "4",
            "type": "next"
        },
        {
            "source": "8",
            "target": "11",
            "type": "true"
        },
        {
            "source": "8",
            "target": "12",
            "type": "false"
        },
        {
            "source": "9",
            "target": "10",
            "type": "next"
        },
        {
            "source": "10",
            "target": "7",
            "type": "next"
        },
        {
            "source": "11",
            "target": "13",
            "type": "next"
        },
        {
            "source": "12",
            "target": "13",
            "type": "next"
        },
        {
            "source": "13",
            "target": "10",
            "type": "next"
        }
    ]
}