{
    "nodes": [
        {
            "id": "1",
            "type": "block",
            "statements": [
                "def get_highest_set_bit_position(number: int) -> int:\n    \"\"\"\n    Returns position of the highest set bit of a number.\n    Ref - https://graphics.stanford.edu/~seander/bithacks.html#IntegerLogObvious\n    >>> get_highest_set_bit_position(25)\n    5\n    >>> get_highest_set_bit_position(37)\n    6\n    >>> get_highest_set_bit_position(1)\n    1\n    >>> get_highest_set_bit_position(4)\n    3\n    >>> get_highest_set_bit_position(0)\n    0\n    >>> get_highest_set_bit_position(0.8)\n    Traceback (most recent call last):\n        ...\n    TypeError: Input value must be an 'int' type\n    \"\"\"\n    if not isinstance(number, int):\n        raise TypeError(\"Input value must be an 'int' type\")\n    position = 0\n    while number:\n        position += 1\n        number >>= 1\n    return position",
                "\"\\n    Returns position of the highest set bit of a number.\\n    Ref - https://graphics.stanford.edu/~seander/bithacks.html#IntegerLogObvious\\n    >>> get_highest_set_bit_position(25)\\n    5\\n    >>> get_highest_set_bit_position(37)\\n    6\\n    >>> get_highest_set_bit_position(1)\\n    1\\n    >>> get_highest_set_bit_position(4)\\n    3\\n    >>> get_highest_set_bit_position(0)\\n    0\\n    >>> get_highest_set_bit_position(0.8)\\n    Traceback (most recent call last):\\n        ...\\n    TypeError: Input value must be an 'int' type\\n    \"",
                "not isinstance(number, int)"
            ]
        },
        {
            "id": "2",
            "type": "block",
            "statements": [
                "raise TypeError(\"Input value must be an 'int' type\")"
            ]
        },
        {
            "id": "3",
            "type": "block",
            "statements": []
        },
        {
            "id": "4",
            "type": "block",
            "statements": [
                "position = 0"
            ]
        },
        {
            "id": "5",
            "type": "block",
            "statements": [
                "number"
            ]
        },
        {
            "id": "6",
            "type": "block",
            "statements": [
                "position += 1",
                "number >>= 1"
            ]
        },
        {
            "id": "7",
            "type": "block",
            "statements": [
                "return position"
            ]
        },
        {
            "id": "8",
            "type": "block",
            "statements": [
                "__name__ Eq '__main__'"
            ]
        },
        {
            "id": "9",
            "type": "block",
            "statements": [
                "import doctest",
                "doctest.testmod()"
            ]
        },
        {
            "id": "10",
            "type": "block",
            "statements": []
        },
        {
            "id": "11",
            "type": "block",
            "statements": []
        }
    ],
    "edges": [
        {
            "source": "1",
            "target": "2",
            "type": "true"
        },
        {
            "source": "1",
            "target": "3",
            "type": "false"
        },
        {
            "source": "2",
            "target": "4",
            "type": "next"
        },
        {
            "source": "3",
            "target": "4",
            "type": "next"
        },
        {
            "source": "4",
            "target": "5",
            "type": "next"
        },
        {
            "source": "5",
            "target": "6",
            "type": "true"
        },
        {
            "source": "5",
            "target": "7",
            "type": "false"
        },
        {
            "source": "6",
            "target": "5",
            "type": "next"
        },
        {
            "source": "8",
            "target": "9",
            "type": "true"
        },
        {
            "source": "8",
            "target": "10",
            "type": "false"
        },
        {
            "source": "9",
            "target": "11",
            "type": "next"
        },
        {
            "source": "10",
            "target": "11",
            "type": "next"
        }
    ]
}