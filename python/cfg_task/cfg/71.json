{
    "nodes": [
        {
            "id": "1",
            "type": "block",
            "statements": [
                "'\\nGiven a partially filled 9x9 2D array, the objective is to fill a 9x9\\nsquare grid with digits numbered 1 to 9, so that every row, column, and\\nand each of the nine 3x3 sub-grids contains all of the digits.\\n\\nThis can be solved using Backtracking and is similar to n-queens.\\nWe check to see if a cell is safe or not and recursively call the\\nfunction on the next column to see if it returns True. if yes, we\\nhave solved the puzzle. else, we backtrack and place another number\\nin that cell and repeat this process.\\n'",
                "from __future__ import annotations",
                "Matrix = list[list[int]]",
                "initial_grid: Matrix = [[3, 0, 6, 5, 0, 8, 4, 0, 0], [5, 2, 0, 0, 0, 0, 0, 0, 0], [0, 8, 7, 0, 0, 0, 0, 3, 1], [0, 0, 3, 0, 1, 0, 0, 8, 0], [9, 0, 0, 8, 6, 3, 0, 0, 5], [0, 5, 0, 0, 9, 0, 6, 0, 0], [1, 3, 0, 0, 0, 0, 2, 5, 0], [0, 0, 0, 0, 0, 0, 0, 7, 4], [0, 0, 5, 2, 0, 6, 3, 0, 0]]",
                "no_solution: Matrix = [[5, 0, 6, 5, 0, 8, 4, 0, 3], [5, 2, 0, 0, 0, 0, 0, 0, 2], [1, 8, 7, 0, 0, 0, 0, 3, 1], [0, 0, 3, 0, 1, 0, 0, 8, 0], [9, 0, 0, 8, 6, 3, 0, 0, 5], [0, 5, 0, 0, 9, 0, 6, 0, 0], [1, 3, 0, 0, 0, 0, 2, 5, 0], [0, 0, 0, 0, 0, 0, 0, 7, 4], [0, 0, 5, 2, 0, 6, 3, 0, 0]]",
                "def is_safe(grid: Matrix, row: int, column: int, n: int) -> bool:\n    \"\"\"\n    This function checks the grid to see if each row,\n    column, and the 3x3 subgrids contain the digit 'n'.\n    It returns False if it is not 'safe' (a duplicate digit\n    is found) else returns True if it is 'safe'\n    \"\"\"\n    for i in range(9):\n        if n in {grid[row][i], grid[i][column]}:\n            return False\n    for i in range(3):\n        for j in range(3):\n            if grid[row - row % 3 + i][column - column % 3 + j] == n:\n                return False\n    return True",
                "\"\\n    This function checks the grid to see if each row,\\n    column, and the 3x3 subgrids contain the digit 'n'.\\n    It returns False if it is not 'safe' (a duplicate digit\\n    is found) else returns True if it is 'safe'\\n    \""
            ]
        },
        {
            "id": "2",
            "type": "block",
            "statements": [
                "i",
                "range(9)"
            ]
        },
        {
            "id": "3",
            "type": "block",
            "statements": [
                "n In {grid[row][i], grid[i][column]}"
            ]
        },
        {
            "id": "4",
            "type": "block",
            "statements": []
        },
        {
            "id": "5",
            "type": "block",
            "statements": [
                "return False"
            ]
        },
        {
            "id": "6",
            "type": "block",
            "statements": []
        },
        {
            "id": "7",
            "type": "block",
            "statements": []
        },
        {
            "id": "8",
            "type": "block",
            "statements": [
                "i",
                "range(3)"
            ]
        },
        {
            "id": "9",
            "type": "block",
            "statements": []
        },
        {
            "id": "10",
            "type": "block",
            "statements": [
                "return True"
            ]
        },
        {
            "id": "11",
            "type": "block",
            "statements": [
                "j",
                "range(3)"
            ]
        },
        {
            "id": "12",
            "type": "block",
            "statements": [
                "grid[row - row % 3 + i][column - column % 3 + j] Eq n"
            ]
        },
        {
            "id": "13",
            "type": "block",
            "statements": []
        },
        {
            "id": "14",
            "type": "block",
            "statements": [
                "return False"
            ]
        },
        {
            "id": "15",
            "type": "block",
            "statements": []
        },
        {
            "id": "16",
            "type": "block",
            "statements": []
        },
        {
            "id": "17",
            "type": "block",
            "statements": [
                "def find_empty_location(grid: Matrix) -> tuple[int, int] | None:\n    \"\"\"\n    This function finds an empty location so that we can assign a number\n    for that particular row and column.\n    \"\"\"\n    for i in range(9):\n        for j in range(9):\n            if grid[i][j] == 0:\n                return (i, j)\n    return None",
                "'\\n    This function finds an empty location so that we can assign a number\\n    for that particular row and column.\\n    '"
            ]
        },
        {
            "id": "18",
            "type": "block",
            "statements": [
                "i",
                "range(9)"
            ]
        },
        {
            "id": "19",
            "type": "block",
            "statements": []
        },
        {
            "id": "20",
            "type": "block",
            "statements": [
                "return None"
            ]
        },
        {
            "id": "21",
            "type": "block",
            "statements": [
                "j",
                "range(9)"
            ]
        },
        {
            "id": "22",
            "type": "block",
            "statements": [
                "grid[i][j] Eq 0"
            ]
        },
        {
            "id": "23",
            "type": "block",
            "statements": []
        },
        {
            "id": "24",
            "type": "block",
            "statements": [
                "return (i, j)"
            ]
        },
        {
            "id": "25",
            "type": "block",
            "statements": []
        },
        {
            "id": "26",
            "type": "block",
            "statements": []
        },
        {
            "id": "27",
            "type": "block",
            "statements": [
                "def sudoku(grid: Matrix) -> Matrix | None:\n    \"\"\"\n    Takes a partially filled-in grid and attempts to assign values to\n    all unassigned locations in such a way to meet the requirements\n    for Sudoku solution (non-duplication across rows, columns, and boxes)\n\n    >>> sudoku(initial_grid)  # doctest: +NORMALIZE_WHITESPACE\n    [[3, 1, 6, 5, 7, 8, 4, 9, 2],\n     [5, 2, 9, 1, 3, 4, 7, 6, 8],\n     [4, 8, 7, 6, 2, 9, 5, 3, 1],\n     [2, 6, 3, 4, 1, 5, 9, 8, 7],\n     [9, 7, 4, 8, 6, 3, 1, 2, 5],\n     [8, 5, 1, 7, 9, 2, 6, 4, 3],\n     [1, 3, 8, 9, 4, 7, 2, 5, 6],\n     [6, 9, 2, 3, 5, 1, 8, 7, 4],\n     [7, 4, 5, 2, 8, 6, 3, 1, 9]]\n     >>> sudoku(no_solution) is None\n     True\n    \"\"\"\n    if (location := find_empty_location(grid)):\n        (row, column) = location\n    else:\n        return grid\n    for digit in range(1, 10):\n        if is_safe(grid, row, column, digit):\n            grid[row][column] = digit\n            if sudoku(grid) is not None:\n                return grid\n            grid[row][column] = 0\n    return None",
                "'\\n    Takes a partially filled-in grid and attempts to assign values to\\n    all unassigned locations in such a way to meet the requirements\\n    for Sudoku solution (non-duplication across rows, columns, and boxes)\\n\\n    >>> sudoku(initial_grid)  # doctest: +NORMALIZE_WHITESPACE\\n    [[3, 1, 6, 5, 7, 8, 4, 9, 2],\\n     [5, 2, 9, 1, 3, 4, 7, 6, 8],\\n     [4, 8, 7, 6, 2, 9, 5, 3, 1],\\n     [2, 6, 3, 4, 1, 5, 9, 8, 7],\\n     [9, 7, 4, 8, 6, 3, 1, 2, 5],\\n     [8, 5, 1, 7, 9, 2, 6, 4, 3],\\n     [1, 3, 8, 9, 4, 7, 2, 5, 6],\\n     [6, 9, 2, 3, 5, 1, 8, 7, 4],\\n     [7, 4, 5, 2, 8, 6, 3, 1, 9]]\\n     >>> sudoku(no_solution) is None\\n     True\\n    '",
                "(location := find_empty_location(grid))"
            ]
        },
        {
            "id": "28",
            "type": "block",
            "statements": [
                "(row, column) = location"
            ]
        },
        {
            "id": "29",
            "type": "block",
            "statements": [
                "return grid"
            ]
        },
        {
            "id": "30",
            "type": "block",
            "statements": []
        },
        {
            "id": "31",
            "type": "block",
            "statements": [
                "digit",
                "range(1, 10)"
            ]
        },
        {
            "id": "32",
            "type": "block",
            "statements": [
                "is_safe(grid, row, column, digit)"
            ]
        },
        {
            "id": "33",
            "type": "block",
            "statements": [
                "return None"
            ]
        },
        {
            "id": "34",
            "type": "block",
            "statements": [
                "grid[row][column] = digit",
                "sudoku(grid) IsNot None"
            ]
        },
        {
            "id": "35",
            "type": "block",
            "statements": []
        },
        {
            "id": "36",
            "type": "block",
            "statements": []
        },
        {
            "id": "37",
            "type": "block",
            "statements": [
                "return grid"
            ]
        },
        {
            "id": "38",
            "type": "block",
            "statements": []
        },
        {
            "id": "39",
            "type": "block",
            "statements": [
                "grid[row][column] = 0"
            ]
        },
        {
            "id": "40",
            "type": "block",
            "statements": [
                "def print_solution(grid: Matrix) -> None:\n    \"\"\"\n    A function to print the solution in the form\n    of a 9x9 grid\n    \"\"\"\n    for row in grid:\n        for cell in row:\n            print(cell, end=' ')\n        print()",
                "'\\n    A function to print the solution in the form\\n    of a 9x9 grid\\n    '"
            ]
        },
        {
            "id": "41",
            "type": "block",
            "statements": [
                "row",
                "grid"
            ]
        },
        {
            "id": "42",
            "type": "block",
            "statements": []
        },
        {
            "id": "43",
            "type": "block",
            "statements": [
                "__name__ Eq '__main__'"
            ]
        },
        {
            "id": "44",
            "type": "block",
            "statements": [
                "cell",
                "row"
            ]
        },
        {
            "id": "45",
            "type": "block",
            "statements": [
                "print(cell)"
            ]
        },
        {
            "id": "46",
            "type": "block",
            "statements": [
                "print()"
            ]
        },
        {
            "id": "47",
            "type": "block",
            "statements": []
        },
        {
            "id": "48",
            "type": "block",
            "statements": []
        },
        {
            "id": "49",
            "type": "block",
            "statements": []
        },
        {
            "id": "50",
            "type": "block",
            "statements": [
                "example_grid",
                "(initial_grid, no_solution)"
            ]
        },
        {
            "id": "51",
            "type": "block",
            "statements": [
                "print('\\nExample grid:\\n' Add '=' Mult 20)",
                "print_solution(example_grid)",
                "print('\\nExample grid solution:')",
                "solution = sudoku(example_grid)",
                "solution IsNot None"
            ]
        },
        {
            "id": "52",
            "type": "block",
            "statements": []
        },
        {
            "id": "53",
            "type": "block",
            "statements": [
                "print_solution(solution)"
            ]
        },
        {
            "id": "54",
            "type": "block",
            "statements": [
                "print('Cannot find a solution.')"
            ]
        },
        {
            "id": "55",
            "type": "block",
            "statements": []
        }
    ],
    "edges": [
        {
            "source": "1",
            "target": "2",
            "type": "next"
        },
        {
            "source": "2",
            "target": "3",
            "type": "true"
        },
        {
            "source": "2",
            "target": "4",
            "type": "false"
        },
        {
            "source": "3",
            "target": "5",
            "type": "true"
        },
        {
            "source": "3",
            "target": "6",
            "type": "false"
        },
        {
            "source": "4",
            "target": "8",
            "type": "next"
        },
        {
            "source": "6",
            "target": "7",
            "type": "next"
        },
        {
            "source": "7",
            "target": "2",
            "type": "next"
        },
        {
            "source": "8",
            "target": "9",
            "type": "true"
        },
        {
            "source": "8",
            "target": "10",
            "type": "false"
        },
        {
            "source": "9",
            "target": "11",
            "type": "next"
        },
        {
            "source": "11",
            "target": "12",
            "type": "true"
        },
        {
            "source": "11",
            "target": "13",
            "type": "false"
        },
        {
            "source": "12",
            "target": "14",
            "type": "true"
        },
        {
            "source": "12",
            "target": "15",
            "type": "false"
        },
        {
            "source": "13",
            "target": "8",
            "type": "next"
        },
        {
            "source": "15",
            "target": "16",
            "type": "next"
        },
        {
            "source": "16",
            "target": "11",
            "type": "next"
        },
        {
            "source": "17",
            "target": "18",
            "type": "next"
        },
        {
            "source": "18",
            "target": "19",
            "type": "true"
        },
        {
            "source": "18",
            "target": "20",
            "type": "false"
        },
        {
            "source": "19",
            "target": "21",
            "type": "next"
        },
        {
            "source": "21",
            "target": "22",
            "type": "true"
        },
        {
            "source": "21",
            "target": "23",
            "type": "false"
        },
        {
            "source": "22",
            "target": "24",
            "type": "true"
        },
        {
            "source": "22",
            "target": "25",
            "type": "false"
        },
        {
            "source": "23",
            "target": "18",
            "type": "next"
        },
        {
            "source": "25",
            "target": "26",
            "type": "next"
        },
        {
            "source": "26",
            "target": "21",
            "type": "next"
        },
        {
            "source": "27",
            "target": "28",
            "type": "true"
        },
        {
            "source": "27",
            "target": "29",
            "type": "false"
        },
        {
            "source": "28",
            "target": "30",
            "type": "next"
        },
        {
            "source": "30",
            "target": "31",
            "type": "next"
        },
        {
            "source": "31",
            "target": "32",
            "type": "true"
        },
        {
            "source": "31",
            "target": "33",
            "type": "false"
        },
        {
            "source": "32",
            "target": "34",
            "type": "true"
        },
        {
            "source": "32",
            "target": "35",
            "type": "false"
        },
        {
            "source": "34",
            "target": "37",
            "type": "true"
        },
        {
            "source": "34",
            "target": "38",
            "type": "false"
        },
        {
            "source": "35",
            "target": "36",
            "type": "next"
        },
        {
            "source": "36",
            "target": "31",
            "type": "next"
        },
        {
            "source": "38",
            "target": "39",
            "type": "next"
        },
        {
            "source": "39",
            "target": "36",
            "type": "next"
        },
        {
            "source": "40",
            "target": "41",
            "type": "next"
        },
        {
            "source": "41",
            "target": "42",
            "type": "true"
        },
        {
            "source": "41",
            "target": "43",
            "type": "false"
        },
        {
            "source": "42",
            "target": "44",
            "type": "next"
        },
        {
            "source": "43",
            "target": "47",
            "type": "true"
        },
        {
            "source": "43",
            "target": "48",
            "type": "false"
        },
        {
            "source": "44",
            "target": "45",
            "type": "true"
        },
        {
            "source": "44",
            "target": "46",
            "type": "false"
        },
        {
            "source": "45",
            "target": "44",
            "type": "next"
        },
        {
            "source": "46",
            "target": "41",
            "type": "next"
        },
        {
            "source": "47",
            "target": "50",
            "type": "next"
        },
        {
            "source": "48",
            "target": "49",
            "type": "next"
        },
        {
            "source": "50",
            "target": "51",
            "type": "true"
        },
        {
            "source": "50",
            "target": "52",
            "type": "false"
        },
        {
            "source": "51",
            "target": "53",
            "type": "true"
        },
        {
            "source": "51",
            "target": "54",
            "type": "false"
        },
        {
            "source": "52",
            "target": "49",
            "type": "next"
        },
        {
            "source": "53",
            "target": "55",
            "type": "next"
        },
        {
            "source": "54",
            "target": "55",
            "type": "next"
        },
        {
            "source": "55",
            "target": "50",
            "type": "next"
        }
    ]
}