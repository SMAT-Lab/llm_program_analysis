{
    "nodes": [
        {
            "id": "1",
            "type": "block",
            "statements": [
                "import logging",
                "import os",
                "import uuid",
                "import fastapi",
                "from google.cloud import storage",
                "import backend.server.v2.store.exceptions",
                "from backend.util.settings import Settings",
                "logger = logging.getLogger(__name__)",
                "ALLOWED_IMAGE_TYPES = {'image/jpeg', 'image/png', 'image/gif', 'image/webp'}",
                "ALLOWED_VIDEO_TYPES = {'video/mp4', 'video/webm'}",
                "MAX_FILE_SIZE = 50 * 1024 * 1024",
                "async def check_media_exists(user_id: str, filename: str) -> str | None:\n    \"\"\"\n    Check if a media file exists in storage for the given user.\n    Tries both images and videos directories.\n\n    Args:\n        user_id (str): ID of the user who uploaded the file\n        filename (str): Name of the file to check\n\n    Returns:\n        str | None: URL of the blob if it exists, None otherwise\n    \"\"\"\n    try:\n        settings = Settings()\n        storage_client = storage.Client()\n        bucket = storage_client.bucket(settings.config.media_gcs_bucket_name)\n        image_path = f'users/{user_id}/images/{filename}'\n        image_blob = bucket.blob(image_path)\n        if image_blob.exists():\n            return image_blob.public_url\n        video_path = f'users/{user_id}/videos/{filename}'\n        video_blob = bucket.blob(video_path)\n        if video_blob.exists():\n            return video_blob.public_url\n        return None\n    except Exception as e:\n        logger.error(f'Error checking if media file exists: {str(e)}')\n        return None",
                "'\\n    Check if a media file exists in storage for the given user.\\n    Tries both images and videos directories.\\n\\n    Args:\\n        user_id (str): ID of the user who uploaded the file\\n        filename (str): Name of the file to check\\n\\n    Returns:\\n        str | None: URL of the blob if it exists, None otherwise\\n    '",
                "try:\n    settings = Settings()\n    storage_client = storage.Client()\n    bucket = storage_client.bucket(settings.config.media_gcs_bucket_name)\n    image_path = f'users/{user_id}/images/{filename}'\n    image_blob = bucket.blob(image_path)\n    if image_blob.exists():\n        return image_blob.public_url\n    video_path = f'users/{user_id}/videos/{filename}'\n    video_blob = bucket.blob(video_path)\n    if video_blob.exists():\n        return video_blob.public_url\n    return None\nexcept Exception as e:\n    logger.error(f'Error checking if media file exists: {str(e)}')\n    return None",
                "settings = Settings()",
                "storage_client = storage.Client()",
                "bucket = storage_client.bucket(settings.config.media_gcs_bucket_name)",
                "image_path = f'users/{user_id}/images/{filename}'",
                "image_blob = bucket.blob(image_path)",
                "image_blob.exists()"
            ]
        },
        {
            "id": "2",
            "type": "block",
            "statements": [
                "return image_blob.public_url"
            ]
        },
        {
            "id": "3",
            "type": "block",
            "statements": []
        },
        {
            "id": "4",
            "type": "block",
            "statements": [
                "video_path = f'users/{user_id}/videos/{filename}'",
                "video_blob = bucket.blob(video_path)",
                "video_blob.exists()"
            ]
        },
        {
            "id": "5",
            "type": "block",
            "statements": [
                "return video_blob.public_url"
            ]
        },
        {
            "id": "6",
            "type": "block",
            "statements": []
        },
        {
            "id": "7",
            "type": "block",
            "statements": [
                "return None"
            ]
        },
        {
            "id": "8",
            "type": "block",
            "statements": [
                "logger.error(f'Error checking if media file exists: {str(e)}')",
                "return None"
            ]
        },
        {
            "id": "9",
            "type": "block",
            "statements": [
                "async def upload_media(user_id: str, file: fastapi.UploadFile, use_file_name: bool=False) -> str:\n    try:\n        content = await file.read(1024)\n        await file.seek(0)\n    except Exception as e:\n        logger.error(f'Error reading file content: {str(e)}')\n        raise backend.server.v2.store.exceptions.FileReadError('Failed to read file content') from e\n    if file.content_type in ALLOWED_IMAGE_TYPES:\n        if content.startswith(b'\\xff\\xd8\\xff'):\n            if file.content_type != 'image/jpeg':\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError('File signature does not match content type')\n        elif content.startswith(b'\\x89PNG\\r\\n\\x1a\\n'):\n            if file.content_type != 'image/png':\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError('File signature does not match content type')\n        elif content.startswith(b'GIF87a') or content.startswith(b'GIF89a'):\n            if file.content_type != 'image/gif':\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError('File signature does not match content type')\n        elif content.startswith(b'RIFF') and content[8:12] == b'WEBP':\n            if file.content_type != 'image/webp':\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError('File signature does not match content type')\n        else:\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError('Invalid image file signature')\n    elif file.content_type in ALLOWED_VIDEO_TYPES:\n        if content.startswith(b'\\x00\\x00\\x00') and content[4:8] == b'ftyp':\n            if file.content_type != 'video/mp4':\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError('File signature does not match content type')\n        elif content.startswith(b'\\x1aE\\xdf\\xa3'):\n            if file.content_type != 'video/webm':\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError('File signature does not match content type')\n        else:\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError('Invalid video file signature')\n    settings = Settings()\n    if not settings.config.media_gcs_bucket_name:\n        logger.error('Missing GCS bucket name setting')\n        raise backend.server.v2.store.exceptions.StorageConfigError('Missing storage bucket configuration')\n    try:\n        content_type = file.content_type\n        if content_type is None:\n            content_type = 'image/jpeg'\n        if content_type not in ALLOWED_IMAGE_TYPES and content_type not in ALLOWED_VIDEO_TYPES:\n            logger.warning(f'Invalid file type attempted: {content_type}')\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(f'File type not supported. Must be jpeg, png, gif, webp, mp4 or webm. Content type: {content_type}')\n        file_size = 0\n        chunk_size = 8192\n        try:\n            while (chunk := (await file.read(chunk_size))):\n                file_size += len(chunk)\n                if file_size > MAX_FILE_SIZE:\n                    logger.warning(f'File size too large: {file_size} bytes')\n                    raise backend.server.v2.store.exceptions.FileSizeTooLargeError('File too large. Maximum size is 50MB')\n        except backend.server.v2.store.exceptions.FileSizeTooLargeError:\n            raise\n        except Exception as e:\n            logger.error(f'Error reading file chunks: {str(e)}')\n            raise backend.server.v2.store.exceptions.FileReadError('Failed to read uploaded file') from e\n        await file.seek(0)\n        filename = file.filename or ''\n        file_ext = os.path.splitext(filename)[1].lower()\n        if use_file_name:\n            unique_filename = filename\n        else:\n            unique_filename = f'{uuid.uuid4()}{file_ext}'\n        media_type = 'images' if content_type in ALLOWED_IMAGE_TYPES else 'videos'\n        storage_path = f'users/{user_id}/{media_type}/{unique_filename}'\n        try:\n            storage_client = storage.Client()\n            bucket = storage_client.bucket(settings.config.media_gcs_bucket_name)\n            blob = bucket.blob(storage_path)\n            blob.content_type = content_type\n            file_bytes = await file.read()\n            blob.upload_from_string(file_bytes, content_type=content_type)\n            public_url = blob.public_url\n            logger.info(f'Successfully uploaded file to: {storage_path}')\n            return public_url\n        except Exception as e:\n            logger.error(f'GCS storage error: {str(e)}')\n            raise backend.server.v2.store.exceptions.StorageUploadError('Failed to upload file to storage') from e\n    except backend.server.v2.store.exceptions.MediaUploadError:\n        raise\n    except Exception as e:\n        logger.exception('Unexpected error in upload_media')\n        raise backend.server.v2.store.exceptions.MediaUploadError('Unexpected error during media upload') from e",
                "try:\n    content = await file.read(1024)\n    await file.seek(0)\nexcept Exception as e:\n    logger.error(f'Error reading file content: {str(e)}')\n    raise backend.server.v2.store.exceptions.FileReadError('Failed to read file content') from e",
                "content = await file.read(1024)",
                "await file.seek(0)",
                "logger.error(f'Error reading file content: {str(e)}')",
                "raise backend.server.v2.store.exceptions.FileReadError('Failed to read file content') from e",
                "file.content_type In ALLOWED_IMAGE_TYPES"
            ]
        },
        {
            "id": "10",
            "type": "block",
            "statements": [
                "content.startswith(b'\\xff\\xd8\\xff')"
            ]
        },
        {
            "id": "11",
            "type": "block",
            "statements": [
                "file.content_type In ALLOWED_VIDEO_TYPES"
            ]
        },
        {
            "id": "12",
            "type": "block",
            "statements": [
                "settings = Settings()",
                "not settings.config.media_gcs_bucket_name"
            ]
        },
        {
            "id": "13",
            "type": "block",
            "statements": [
                "file.content_type NotEq 'image/jpeg'"
            ]
        },
        {
            "id": "14",
            "type": "block",
            "statements": [
                "content.startswith(b'\\x89PNG\\r\\n\\x1a\\n')"
            ]
        },
        {
            "id": "15",
            "type": "block",
            "statements": []
        },
        {
            "id": "16",
            "type": "block",
            "statements": [
                "raise backend.server.v2.store.exceptions.InvalidFileTypeError('File signature does not match content type')"
            ]
        },
        {
            "id": "17",
            "type": "block",
            "statements": []
        },
        {
            "id": "18",
            "type": "block",
            "statements": []
        },
        {
            "id": "19",
            "type": "block",
            "statements": [
                "file.content_type NotEq 'image/png'"
            ]
        },
        {
            "id": "20",
            "type": "block",
            "statements": [
                "content.startswith(b'GIF87a') or content.startswith(b'GIF89a')"
            ]
        },
        {
            "id": "21",
            "type": "block",
            "statements": []
        },
        {
            "id": "22",
            "type": "block",
            "statements": [
                "raise backend.server.v2.store.exceptions.InvalidFileTypeError('File signature does not match content type')"
            ]
        },
        {
            "id": "23",
            "type": "block",
            "statements": []
        },
        {
            "id": "24",
            "type": "block",
            "statements": []
        },
        {
            "id": "25",
            "type": "block",
            "statements": [
                "file.content_type NotEq 'image/gif'"
            ]
        },
        {
            "id": "26",
            "type": "block",
            "statements": [
                "content.startswith(b'RIFF') and content[8:12] == b'WEBP'"
            ]
        },
        {
            "id": "27",
            "type": "block",
            "statements": []
        },
        {
            "id": "28",
            "type": "block",
            "statements": [
                "raise backend.server.v2.store.exceptions.InvalidFileTypeError('File signature does not match content type')"
            ]
        },
        {
            "id": "29",
            "type": "block",
            "statements": []
        },
        {
            "id": "30",
            "type": "block",
            "statements": []
        },
        {
            "id": "31",
            "type": "block",
            "statements": [
                "file.content_type NotEq 'image/webp'"
            ]
        },
        {
            "id": "32",
            "type": "block",
            "statements": [
                "raise backend.server.v2.store.exceptions.InvalidFileTypeError('Invalid image file signature')"
            ]
        },
        {
            "id": "33",
            "type": "block",
            "statements": []
        },
        {
            "id": "34",
            "type": "block",
            "statements": [
                "raise backend.server.v2.store.exceptions.InvalidFileTypeError('File signature does not match content type')"
            ]
        },
        {
            "id": "35",
            "type": "block",
            "statements": []
        },
        {
            "id": "36",
            "type": "block",
            "statements": []
        },
        {
            "id": "37",
            "type": "block",
            "statements": [
                "content.startswith(b'\\x00\\x00\\x00') and content[4:8] == b'ftyp'"
            ]
        },
        {
            "id": "38",
            "type": "block",
            "statements": []
        },
        {
            "id": "39",
            "type": "block",
            "statements": []
        },
        {
            "id": "40",
            "type": "block",
            "statements": [
                "file.content_type NotEq 'video/mp4'"
            ]
        },
        {
            "id": "41",
            "type": "block",
            "statements": [
                "content.startswith(b'\\x1aE\\xdf\\xa3')"
            ]
        },
        {
            "id": "42",
            "type": "block",
            "statements": []
        },
        {
            "id": "43",
            "type": "block",
            "statements": [
                "raise backend.server.v2.store.exceptions.InvalidFileTypeError('File signature does not match content type')"
            ]
        },
        {
            "id": "44",
            "type": "block",
            "statements": []
        },
        {
            "id": "45",
            "type": "block",
            "statements": []
        },
        {
            "id": "46",
            "type": "block",
            "statements": [
                "file.content_type NotEq 'video/webm'"
            ]
        },
        {
            "id": "47",
            "type": "block",
            "statements": [
                "raise backend.server.v2.store.exceptions.InvalidFileTypeError('Invalid video file signature')"
            ]
        },
        {
            "id": "48",
            "type": "block",
            "statements": []
        },
        {
            "id": "49",
            "type": "block",
            "statements": [
                "raise backend.server.v2.store.exceptions.InvalidFileTypeError('File signature does not match content type')"
            ]
        },
        {
            "id": "50",
            "type": "block",
            "statements": []
        },
        {
            "id": "51",
            "type": "block",
            "statements": []
        },
        {
            "id": "52",
            "type": "block",
            "statements": [
                "logger.error('Missing GCS bucket name setting')",
                "raise backend.server.v2.store.exceptions.StorageConfigError('Missing storage bucket configuration')"
            ]
        },
        {
            "id": "53",
            "type": "block",
            "statements": []
        },
        {
            "id": "54",
            "type": "block",
            "statements": [
                "try:\n    content_type = file.content_type\n    if content_type is None:\n        content_type = 'image/jpeg'\n    if content_type not in ALLOWED_IMAGE_TYPES and content_type not in ALLOWED_VIDEO_TYPES:\n        logger.warning(f'Invalid file type attempted: {content_type}')\n        raise backend.server.v2.store.exceptions.InvalidFileTypeError(f'File type not supported. Must be jpeg, png, gif, webp, mp4 or webm. Content type: {content_type}')\n    file_size = 0\n    chunk_size = 8192\n    try:\n        while (chunk := (await file.read(chunk_size))):\n            file_size += len(chunk)\n            if file_size > MAX_FILE_SIZE:\n                logger.warning(f'File size too large: {file_size} bytes')\n                raise backend.server.v2.store.exceptions.FileSizeTooLargeError('File too large. Maximum size is 50MB')\n    except backend.server.v2.store.exceptions.FileSizeTooLargeError:\n        raise\n    except Exception as e:\n        logger.error(f'Error reading file chunks: {str(e)}')\n        raise backend.server.v2.store.exceptions.FileReadError('Failed to read uploaded file') from e\n    await file.seek(0)\n    filename = file.filename or ''\n    file_ext = os.path.splitext(filename)[1].lower()\n    if use_file_name:\n        unique_filename = filename\n    else:\n        unique_filename = f'{uuid.uuid4()}{file_ext}'\n    media_type = 'images' if content_type in ALLOWED_IMAGE_TYPES else 'videos'\n    storage_path = f'users/{user_id}/{media_type}/{unique_filename}'\n    try:\n        storage_client = storage.Client()\n        bucket = storage_client.bucket(settings.config.media_gcs_bucket_name)\n        blob = bucket.blob(storage_path)\n        blob.content_type = content_type\n        file_bytes = await file.read()\n        blob.upload_from_string(file_bytes, content_type=content_type)\n        public_url = blob.public_url\n        logger.info(f'Successfully uploaded file to: {storage_path}')\n        return public_url\n    except Exception as e:\n        logger.error(f'GCS storage error: {str(e)}')\n        raise backend.server.v2.store.exceptions.StorageUploadError('Failed to upload file to storage') from e\nexcept backend.server.v2.store.exceptions.MediaUploadError:\n    raise\nexcept Exception as e:\n    logger.exception('Unexpected error in upload_media')\n    raise backend.server.v2.store.exceptions.MediaUploadError('Unexpected error during media upload') from e",
                "content_type = file.content_type",
                "content_type Is None"
            ]
        },
        {
            "id": "55",
            "type": "block",
            "statements": [
                "content_type = 'image/jpeg'"
            ]
        },
        {
            "id": "56",
            "type": "block",
            "statements": []
        },
        {
            "id": "57",
            "type": "block",
            "statements": [
                "content_type not in ALLOWED_IMAGE_TYPES and content_type not in ALLOWED_VIDEO_TYPES"
            ]
        },
        {
            "id": "58",
            "type": "block",
            "statements": [
                "logger.warning(f'Invalid file type attempted: {content_type}')",
                "raise backend.server.v2.store.exceptions.InvalidFileTypeError(f'File type not supported. Must be jpeg, png, gif, webp, mp4 or webm. Content type: {content_type}')"
            ]
        },
        {
            "id": "59",
            "type": "block",
            "statements": []
        },
        {
            "id": "60",
            "type": "block",
            "statements": [
                "file_size = 0",
                "chunk_size = 8192",
                "try:\n    while (chunk := (await file.read(chunk_size))):\n        file_size += len(chunk)\n        if file_size > MAX_FILE_SIZE:\n            logger.warning(f'File size too large: {file_size} bytes')\n            raise backend.server.v2.store.exceptions.FileSizeTooLargeError('File too large. Maximum size is 50MB')\nexcept backend.server.v2.store.exceptions.FileSizeTooLargeError:\n    raise\nexcept Exception as e:\n    logger.error(f'Error reading file chunks: {str(e)}')\n    raise backend.server.v2.store.exceptions.FileReadError('Failed to read uploaded file') from e"
            ]
        },
        {
            "id": "61",
            "type": "block",
            "statements": [
                "(chunk := (await file.read(chunk_size)))"
            ]
        },
        {
            "id": "62",
            "type": "block",
            "statements": [
                "file_size += len(chunk)",
                "file_size Gt MAX_FILE_SIZE"
            ]
        },
        {
            "id": "63",
            "type": "block",
            "statements": [
                "raise",
                "logger.error(f'Error reading file chunks: {str(e)}')",
                "raise backend.server.v2.store.exceptions.FileReadError('Failed to read uploaded file') from e",
                "await file.seek(0)",
                "filename = file.filename or ''",
                "file_ext = os.path.splitext(filename)[1].lower()",
                "use_file_name"
            ]
        },
        {
            "id": "64",
            "type": "block",
            "statements": [
                "logger.warning(f'File size too large: {file_size} bytes')",
                "raise backend.server.v2.store.exceptions.FileSizeTooLargeError('File too large. Maximum size is 50MB')"
            ]
        },
        {
            "id": "65",
            "type": "block",
            "statements": []
        },
        {
            "id": "66",
            "type": "block",
            "statements": []
        },
        {
            "id": "67",
            "type": "block",
            "statements": [
                "unique_filename = filename"
            ]
        },
        {
            "id": "68",
            "type": "block",
            "statements": [
                "unique_filename = f'{uuid.uuid4()}{file_ext}'"
            ]
        },
        {
            "id": "69",
            "type": "block",
            "statements": [
                "media_type = 'images' if content_type in ALLOWED_IMAGE_TYPES else 'videos'",
                "storage_path = f'users/{user_id}/{media_type}/{unique_filename}'",
                "try:\n    storage_client = storage.Client()\n    bucket = storage_client.bucket(settings.config.media_gcs_bucket_name)\n    blob = bucket.blob(storage_path)\n    blob.content_type = content_type\n    file_bytes = await file.read()\n    blob.upload_from_string(file_bytes, content_type=content_type)\n    public_url = blob.public_url\n    logger.info(f'Successfully uploaded file to: {storage_path}')\n    return public_url\nexcept Exception as e:\n    logger.error(f'GCS storage error: {str(e)}')\n    raise backend.server.v2.store.exceptions.StorageUploadError('Failed to upload file to storage') from e",
                "storage_client = storage.Client()",
                "bucket = storage_client.bucket(settings.config.media_gcs_bucket_name)",
                "blob = bucket.blob(storage_path)",
                "blob.content_type = content_type",
                "file_bytes = await file.read()",
                "blob.upload_from_string(file_bytes)",
                "public_url = blob.public_url",
                "logger.info(f'Successfully uploaded file to: {storage_path}')",
                "return public_url"
            ]
        },
        {
            "id": "70",
            "type": "block",
            "statements": [
                "logger.error(f'GCS storage error: {str(e)}')",
                "raise backend.server.v2.store.exceptions.StorageUploadError('Failed to upload file to storage') from e",
                "raise",
                "logger.exception('Unexpected error in upload_media')",
                "raise backend.server.v2.store.exceptions.MediaUploadError('Unexpected error during media upload') from e"
            ]
        }
    ],
    "edges": [
        {
            "source": "1",
            "target": "2",
            "type": "true"
        },
        {
            "source": "1",
            "target": "3",
            "type": "false"
        },
        {
            "source": "3",
            "target": "4",
            "type": "next"
        },
        {
            "source": "4",
            "target": "5",
            "type": "true"
        },
        {
            "source": "4",
            "target": "6",
            "type": "false"
        },
        {
            "source": "6",
            "target": "7",
            "type": "next"
        },
        {
            "source": "9",
            "target": "10",
            "type": "true"
        },
        {
            "source": "9",
            "target": "11",
            "type": "false"
        },
        {
            "source": "10",
            "target": "13",
            "type": "true"
        },
        {
            "source": "10",
            "target": "14",
            "type": "false"
        },
        {
            "source": "11",
            "target": "37",
            "type": "true"
        },
        {
            "source": "11",
            "target": "38",
            "type": "false"
        },
        {
            "source": "12",
            "target": "52",
            "type": "true"
        },
        {
            "source": "12",
            "target": "53",
            "type": "false"
        },
        {
            "source": "13",
            "target": "16",
            "type": "true"
        },
        {
            "source": "13",
            "target": "17",
            "type": "false"
        },
        {
            "source": "14",
            "target": "19",
            "type": "true"
        },
        {
            "source": "14",
            "target": "20",
            "type": "false"
        },
        {
            "source": "15",
            "target": "12",
            "type": "next"
        },
        {
            "source": "16",
            "target": "18",
            "type": "next"
        },
        {
            "source": "17",
            "target": "18",
            "type": "next"
        },
        {
            "source": "18",
            "target": "15",
            "type": "next"
        },
        {
            "source": "19",
            "target": "22",
            "type": "true"
        },
        {
            "source": "19",
            "target": "23",
            "type": "false"
        },
        {
            "source": "20",
            "target": "25",
            "type": "true"
        },
        {
            "source": "20",
            "target": "26",
            "type": "false"
        },
        {
            "source": "21",
            "target": "15",
            "type": "next"
        },
        {
            "source": "22",
            "target": "24",
            "type": "next"
        },
        {
            "source": "23",
            "target": "24",
            "type": "next"
        },
        {
            "source": "24",
            "target": "21",
            "type": "next"
        },
        {
            "source": "25",
            "target": "28",
            "type": "true"
        },
        {
            "source": "25",
            "target": "29",
            "type": "false"
        },
        {
            "source": "26",
            "target": "31",
            "type": "true"
        },
        {
            "source": "26",
            "target": "32",
            "type": "false"
        },
        {
            "source": "27",
            "target": "21",
            "type": "next"
        },
        {
            "source": "28",
            "target": "30",
            "type": "next"
        },
        {
            "source": "29",
            "target": "30",
            "type": "next"
        },
        {
            "source": "30",
            "target": "27",
            "type": "next"
        },
        {
            "source": "31",
            "target": "34",
            "type": "true"
        },
        {
            "source": "31",
            "target": "35",
            "type": "false"
        },
        {
            "source": "32",
            "target": "33",
            "type": "next"
        },
        {
            "source": "33",
            "target": "27",
            "type": "next"
        },
        {
            "source": "34",
            "target": "36",
            "type": "next"
        },
        {
            "source": "35",
            "target": "36",
            "type": "next"
        },
        {
            "source": "36",
            "target": "33",
            "type": "next"
        },
        {
            "source": "37",
            "target": "40",
            "type": "true"
        },
        {
            "source": "37",
            "target": "41",
            "type": "false"
        },
        {
            "source": "38",
            "target": "39",
            "type": "next"
        },
        {
            "source": "39",
            "target": "12",
            "type": "next"
        },
        {
            "source": "40",
            "target": "43",
            "type": "true"
        },
        {
            "source": "40",
            "target": "44",
            "type": "false"
        },
        {
            "source": "41",
            "target": "46",
            "type": "true"
        },
        {
            "source": "41",
            "target": "47",
            "type": "false"
        },
        {
            "source": "42",
            "target": "39",
            "type": "next"
        },
        {
            "source": "43",
            "target": "45",
            "type": "next"
        },
        {
            "source": "44",
            "target": "45",
            "type": "next"
        },
        {
            "source": "45",
            "target": "42",
            "type": "next"
        },
        {
            "source": "46",
            "target": "49",
            "type": "true"
        },
        {
            "source": "46",
            "target": "50",
            "type": "false"
        },
        {
            "source": "47",
            "target": "48",
            "type": "next"
        },
        {
            "source": "48",
            "target": "42",
            "type": "next"
        },
        {
            "source": "49",
            "target": "51",
            "type": "next"
        },
        {
            "source": "50",
            "target": "51",
            "type": "next"
        },
        {
            "source": "51",
            "target": "48",
            "type": "next"
        },
        {
            "source": "52",
            "target": "54",
            "type": "next"
        },
        {
            "source": "53",
            "target": "54",
            "type": "next"
        },
        {
            "source": "54",
            "target": "55",
            "type": "true"
        },
        {
            "source": "54",
            "target": "56",
            "type": "false"
        },
        {
            "source": "55",
            "target": "57",
            "type": "next"
        },
        {
            "source": "56",
            "target": "57",
            "type": "next"
        },
        {
            "source": "57",
            "target": "58",
            "type": "true"
        },
        {
            "source": "57",
            "target": "59",
            "type": "false"
        },
        {
            "source": "58",
            "target": "60",
            "type": "next"
        },
        {
            "source": "59",
            "target": "60",
            "type": "next"
        },
        {
            "source": "60",
            "target": "61",
            "type": "next"
        },
        {
            "source": "61",
            "target": "62",
            "type": "true"
        },
        {
            "source": "61",
            "target": "63",
            "type": "false"
        },
        {
            "source": "62",
            "target": "64",
            "type": "true"
        },
        {
            "source": "62",
            "target": "65",
            "type": "false"
        },
        {
            "source": "63",
            "target": "67",
            "type": "true"
        },
        {
            "source": "63",
            "target": "68",
            "type": "false"
        },
        {
            "source": "64",
            "target": "66",
            "type": "next"
        },
        {
            "source": "65",
            "target": "66",
            "type": "next"
        },
        {
            "source": "66",
            "target": "61",
            "type": "next"
        },
        {
            "source": "67",
            "target": "69",
            "type": "next"
        },
        {
            "source": "68",
            "target": "69",
            "type": "next"
        }
    ]
}