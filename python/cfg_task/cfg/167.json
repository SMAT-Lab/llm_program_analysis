{
    "nodes": [
        {
            "id": "1",
            "type": "block",
            "statements": [
                "import json",
                "from typing import Optional",
                "from cryptography.fernet import Fernet",
                "from backend.util.settings import Settings",
                "ENCRYPTION_KEY = Settings().secrets.encryption_key",
                "class JSONCryptor:\n\n    def __init__(self, key: Optional[str]=None):\n        self.key = key or ENCRYPTION_KEY\n        if not self.key:\n            raise ValueError('Encryption key must be provided or set in ENCRYPTION_KEY environment variable')\n        self.fernet = Fernet(self.key.encode() if isinstance(self.key, str) else self.key)\n\n    def encrypt(self, data: dict) -> str:\n        \"\"\"Encrypt dictionary data to string\"\"\"\n        json_str = json.dumps(data)\n        encrypted = self.fernet.encrypt(json_str.encode())\n        return encrypted.decode()\n\n    def decrypt(self, encrypted_str: str) -> dict:\n        \"\"\"Decrypt string to dictionary\"\"\"\n        if not encrypted_str:\n            return {}\n        decrypted = self.fernet.decrypt(encrypted_str.encode())\n        return json.loads(decrypted.decode())",
                "def __init__(self, key: Optional[str]=None):\n    self.key = key or ENCRYPTION_KEY\n    if not self.key:\n        raise ValueError('Encryption key must be provided or set in ENCRYPTION_KEY environment variable')\n    self.fernet = Fernet(self.key.encode() if isinstance(self.key, str) else self.key)",
                "self.key = key or ENCRYPTION_KEY",
                "not self.key"
            ]
        },
        {
            "id": "2",
            "type": "block",
            "statements": [
                "raise ValueError('Encryption key must be provided or set in ENCRYPTION_KEY environment variable')"
            ]
        },
        {
            "id": "3",
            "type": "block",
            "statements": []
        },
        {
            "id": "4",
            "type": "block",
            "statements": [
                "self.fernet = Fernet(self.key.encode() if isinstance(self.key, str) else self.key)",
                "def encrypt(self, data: dict) -> str:\n    \"\"\"Encrypt dictionary data to string\"\"\"\n    json_str = json.dumps(data)\n    encrypted = self.fernet.encrypt(json_str.encode())\n    return encrypted.decode()",
                "'Encrypt dictionary data to string'",
                "json_str = json.dumps(data)",
                "encrypted = self.fernet.encrypt(json_str.encode())",
                "return encrypted.decode()"
            ]
        },
        {
            "id": "5",
            "type": "block",
            "statements": [
                "def decrypt(self, encrypted_str: str) -> dict:\n    \"\"\"Decrypt string to dictionary\"\"\"\n    if not encrypted_str:\n        return {}\n    decrypted = self.fernet.decrypt(encrypted_str.encode())\n    return json.loads(decrypted.decode())",
                "'Decrypt string to dictionary'",
                "not encrypted_str"
            ]
        },
        {
            "id": "6",
            "type": "block",
            "statements": [
                "return {}"
            ]
        },
        {
            "id": "7",
            "type": "block",
            "statements": []
        },
        {
            "id": "8",
            "type": "block",
            "statements": [
                "decrypted = self.fernet.decrypt(encrypted_str.encode())",
                "return json.loads(decrypted.decode())"
            ]
        }
    ],
    "edges": [
        {
            "source": "1",
            "target": "2",
            "type": "true"
        },
        {
            "source": "1",
            "target": "3",
            "type": "false"
        },
        {
            "source": "2",
            "target": "4",
            "type": "next"
        },
        {
            "source": "3",
            "target": "4",
            "type": "next"
        },
        {
            "source": "5",
            "target": "6",
            "type": "true"
        },
        {
            "source": "5",
            "target": "7",
            "type": "false"
        },
        {
            "source": "7",
            "target": "8",
            "type": "next"
        }
    ]
}