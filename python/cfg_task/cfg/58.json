{
    "nodes": [
        {
            "id": "1",
            "type": "block",
            "statements": [
                "from enum import Enum",
                "from typing import Any",
                "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema",
                "from backend.data.model import SchemaField",
                "class ComparisonOperator(Enum):\n    EQUAL = '=='\n    NOT_EQUAL = '!='\n    GREATER_THAN = '>'\n    LESS_THAN = '<'\n    GREATER_THAN_OR_EQUAL = '>='\n    LESS_THAN_OR_EQUAL = '<='",
                "EQUAL = '=='",
                "NOT_EQUAL = '!='",
                "GREATER_THAN = '>'",
                "LESS_THAN = '<'",
                "GREATER_THAN_OR_EQUAL = '>='",
                "LESS_THAN_OR_EQUAL = '<='",
                "class ConditionBlock(Block):\n\n    class Input(BlockSchema):\n        value1: Any = SchemaField(description='Enter the first value for comparison', placeholder=\"For example: 10 or 'hello' or True\")\n        operator: ComparisonOperator = SchemaField(description='Choose the comparison operator', placeholder='Select an operator')\n        value2: Any = SchemaField(description='Enter the second value for comparison', placeholder=\"For example: 20 or 'world' or False\")\n        yes_value: Any = SchemaField(description='(Optional) Value to output if the condition is true. If not provided, value1 will be used.', placeholder='Leave empty to use value1, or enter a specific value', default=None)\n        no_value: Any = SchemaField(description='(Optional) Value to output if the condition is false. If not provided, value1 will be used.', placeholder='Leave empty to use value1, or enter a specific value', default=None)\n\n    class Output(BlockSchema):\n        result: bool = SchemaField(description='The result of the condition evaluation (True or False)')\n        yes_output: Any = SchemaField(description='The output value if the condition is true')\n        no_output: Any = SchemaField(description='The output value if the condition is false')\n\n    def __init__(self):\n        super().__init__(id='715696a0-e1da-45c8-b209-c2fa9c3b0be6', input_schema=ConditionBlock.Input, output_schema=ConditionBlock.Output, description='Handles conditional logic based on comparison operators', categories={BlockCategory.LOGIC}, test_input={'value1': 10, 'operator': ComparisonOperator.GREATER_THAN.value, 'value2': 5, 'yes_value': 'Greater', 'no_value': 'Not greater'}, test_output=[('result', True), ('yes_output', 'Greater')])\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        operator = input_data.operator\n        value1 = input_data.value1\n        if isinstance(value1, str):\n            try:\n                value1 = float(value1.strip())\n            except ValueError:\n                value1 = value1.strip()\n        value2 = input_data.value2\n        if isinstance(value2, str):\n            try:\n                value2 = float(value2.strip())\n            except ValueError:\n                value2 = value2.strip()\n        yes_value = input_data.yes_value if input_data.yes_value is not None else value1\n        no_value = input_data.no_value if input_data.no_value is not None else value2\n        comparison_funcs = {ComparisonOperator.EQUAL: lambda a, b: a == b, ComparisonOperator.NOT_EQUAL: lambda a, b: a != b, ComparisonOperator.GREATER_THAN: lambda a, b: a > b, ComparisonOperator.LESS_THAN: lambda a, b: a < b, ComparisonOperator.GREATER_THAN_OR_EQUAL: lambda a, b: a >= b, ComparisonOperator.LESS_THAN_OR_EQUAL: lambda a, b: a <= b}\n        result = comparison_funcs[operator](value1, value2)\n        yield ('result', result)\n        if result:\n            yield ('yes_output', yes_value)\n        else:\n            yield ('no_output', no_value)",
                "class Input(BlockSchema):\n    value1: Any = SchemaField(description='Enter the first value for comparison', placeholder=\"For example: 10 or 'hello' or True\")\n    operator: ComparisonOperator = SchemaField(description='Choose the comparison operator', placeholder='Select an operator')\n    value2: Any = SchemaField(description='Enter the second value for comparison', placeholder=\"For example: 20 or 'world' or False\")\n    yes_value: Any = SchemaField(description='(Optional) Value to output if the condition is true. If not provided, value1 will be used.', placeholder='Leave empty to use value1, or enter a specific value', default=None)\n    no_value: Any = SchemaField(description='(Optional) Value to output if the condition is false. If not provided, value1 will be used.', placeholder='Leave empty to use value1, or enter a specific value', default=None)",
                "value1: Any = SchemaField(description='Enter the first value for comparison', placeholder=\"For example: 10 or 'hello' or True\")",
                "operator: ComparisonOperator = SchemaField(description='Choose the comparison operator', placeholder='Select an operator')",
                "value2: Any = SchemaField(description='Enter the second value for comparison', placeholder=\"For example: 20 or 'world' or False\")",
                "yes_value: Any = SchemaField(description='(Optional) Value to output if the condition is true. If not provided, value1 will be used.', placeholder='Leave empty to use value1, or enter a specific value', default=None)",
                "no_value: Any = SchemaField(description='(Optional) Value to output if the condition is false. If not provided, value1 will be used.', placeholder='Leave empty to use value1, or enter a specific value', default=None)",
                "class Output(BlockSchema):\n    result: bool = SchemaField(description='The result of the condition evaluation (True or False)')\n    yes_output: Any = SchemaField(description='The output value if the condition is true')\n    no_output: Any = SchemaField(description='The output value if the condition is false')",
                "result: bool = SchemaField(description='The result of the condition evaluation (True or False)')",
                "yes_output: Any = SchemaField(description='The output value if the condition is true')",
                "no_output: Any = SchemaField(description='The output value if the condition is false')",
                "def __init__(self):\n    super().__init__(id='715696a0-e1da-45c8-b209-c2fa9c3b0be6', input_schema=ConditionBlock.Input, output_schema=ConditionBlock.Output, description='Handles conditional logic based on comparison operators', categories={BlockCategory.LOGIC}, test_input={'value1': 10, 'operator': ComparisonOperator.GREATER_THAN.value, 'value2': 5, 'yes_value': 'Greater', 'no_value': 'Not greater'}, test_output=[('result', True), ('yes_output', 'Greater')])",
                "super().__init__()",
                "def run(self, input_data: Input, **kwargs) -> BlockOutput:\n    operator = input_data.operator\n    value1 = input_data.value1\n    if isinstance(value1, str):\n        try:\n            value1 = float(value1.strip())\n        except ValueError:\n            value1 = value1.strip()\n    value2 = input_data.value2\n    if isinstance(value2, str):\n        try:\n            value2 = float(value2.strip())\n        except ValueError:\n            value2 = value2.strip()\n    yes_value = input_data.yes_value if input_data.yes_value is not None else value1\n    no_value = input_data.no_value if input_data.no_value is not None else value2\n    comparison_funcs = {ComparisonOperator.EQUAL: lambda a, b: a == b, ComparisonOperator.NOT_EQUAL: lambda a, b: a != b, ComparisonOperator.GREATER_THAN: lambda a, b: a > b, ComparisonOperator.LESS_THAN: lambda a, b: a < b, ComparisonOperator.GREATER_THAN_OR_EQUAL: lambda a, b: a >= b, ComparisonOperator.LESS_THAN_OR_EQUAL: lambda a, b: a <= b}\n    result = comparison_funcs[operator](value1, value2)\n    yield ('result', result)\n    if result:\n        yield ('yes_output', yes_value)\n    else:\n        yield ('no_output', no_value)",
                "operator = input_data.operator",
                "value1 = input_data.value1",
                "isinstance(value1, str)"
            ]
        },
        {
            "id": "2",
            "type": "block",
            "statements": [
                "try:\n    value1 = float(value1.strip())\nexcept ValueError:\n    value1 = value1.strip()",
                "value1 = float(value1.strip())",
                "value1 = value1.strip()"
            ]
        },
        {
            "id": "3",
            "type": "block",
            "statements": []
        },
        {
            "id": "4",
            "type": "block",
            "statements": [
                "value2 = input_data.value2",
                "isinstance(value2, str)"
            ]
        },
        {
            "id": "5",
            "type": "block",
            "statements": [
                "try:\n    value2 = float(value2.strip())\nexcept ValueError:\n    value2 = value2.strip()",
                "value2 = float(value2.strip())",
                "value2 = value2.strip()"
            ]
        },
        {
            "id": "6",
            "type": "block",
            "statements": []
        },
        {
            "id": "7",
            "type": "block",
            "statements": [
                "yes_value = input_data.yes_value if input_data.yes_value is not None else value1",
                "no_value = input_data.no_value if input_data.no_value is not None else value2",
                "comparison_funcs = {ComparisonOperator.EQUAL: lambda a, b: a == b, ComparisonOperator.NOT_EQUAL: lambda a, b: a != b, ComparisonOperator.GREATER_THAN: lambda a, b: a > b, ComparisonOperator.LESS_THAN: lambda a, b: a < b, ComparisonOperator.GREATER_THAN_OR_EQUAL: lambda a, b: a >= b, ComparisonOperator.LESS_THAN_OR_EQUAL: lambda a, b: a <= b}",
                "result = comparison_funcs[operator](value1, value2)",
                "(yield ('result', result))",
                "result"
            ]
        },
        {
            "id": "8",
            "type": "block",
            "statements": [
                "(yield ('yes_output', yes_value))"
            ]
        },
        {
            "id": "9",
            "type": "block",
            "statements": [
                "(yield ('no_output', no_value))"
            ]
        },
        {
            "id": "10",
            "type": "block",
            "statements": []
        }
    ],
    "edges": [
        {
            "source": "1",
            "target": "2",
            "type": "true"
        },
        {
            "source": "1",
            "target": "3",
            "type": "false"
        },
        {
            "source": "2",
            "target": "4",
            "type": "next"
        },
        {
            "source": "3",
            "target": "4",
            "type": "next"
        },
        {
            "source": "4",
            "target": "5",
            "type": "true"
        },
        {
            "source": "4",
            "target": "6",
            "type": "false"
        },
        {
            "source": "5",
            "target": "7",
            "type": "next"
        },
        {
            "source": "6",
            "target": "7",
            "type": "next"
        },
        {
            "source": "7",
            "target": "8",
            "type": "true"
        },
        {
            "source": "7",
            "target": "9",
            "type": "false"
        },
        {
            "source": "8",
            "target": "10",
            "type": "next"
        },
        {
            "source": "9",
            "target": "10",
            "type": "next"
        }
    ]
}