{
    "nodes": [
        {
            "id": "1",
            "type": "block",
            "statements": [
                "import json",
                "from typing import Any, Type, TypeVar, overload",
                "import jsonschema",
                "from fastapi.encoders import jsonable_encoder",
                "from .type import type_match",
                "def to_dict(data) -> dict:\n    return jsonable_encoder(data)",
                "return jsonable_encoder(data)"
            ]
        },
        {
            "id": "2",
            "type": "block",
            "statements": [
                "def dumps(data) -> str:\n    return json.dumps(jsonable_encoder(data))",
                "return json.dumps(jsonable_encoder(data))"
            ]
        },
        {
            "id": "3",
            "type": "block",
            "statements": [
                "T = TypeVar('T')",
                "@overload\ndef loads(data: str, *args, target_type: Type[T], **kwargs) -> T:\n    ...",
                "Ellipsis",
                "@overload\ndef loads(data: str, *args, **kwargs) -> Any:\n    ...",
                "Ellipsis",
                "def loads(data: str, *args, target_type: Type[T] | None=None, **kwargs) -> Any:\n    parsed = json.loads(data, *args, **kwargs)\n    if target_type:\n        return type_match(parsed, target_type)\n    return parsed",
                "parsed = json.loads(data, *args, **kwargs)",
                "target_type"
            ]
        },
        {
            "id": "4",
            "type": "block",
            "statements": [
                "return type_match(parsed, target_type)"
            ]
        },
        {
            "id": "5",
            "type": "block",
            "statements": []
        },
        {
            "id": "6",
            "type": "block",
            "statements": [
                "return parsed"
            ]
        },
        {
            "id": "7",
            "type": "block",
            "statements": [
                "def validate_with_jsonschema(schema: dict[str, Any], data: dict[str, Any]) -> str | None:\n    \"\"\"\n    Validate the data against the schema.\n    Returns the validation error message if the data does not match the schema.\n    \"\"\"\n    try:\n        jsonschema.validate(data, schema)\n        return None\n    except jsonschema.ValidationError as e:\n        return str(e)",
                "'\\n    Validate the data against the schema.\\n    Returns the validation error message if the data does not match the schema.\\n    '",
                "try:\n    jsonschema.validate(data, schema)\n    return None\nexcept jsonschema.ValidationError as e:\n    return str(e)",
                "jsonschema.validate(data, schema)",
                "return None"
            ]
        },
        {
            "id": "8",
            "type": "block",
            "statements": [
                "return str(e)"
            ]
        }
    ],
    "edges": [
        {
            "source": "3",
            "target": "4",
            "type": "true"
        },
        {
            "source": "3",
            "target": "5",
            "type": "false"
        },
        {
            "source": "5",
            "target": "6",
            "type": "next"
        }
    ]
}