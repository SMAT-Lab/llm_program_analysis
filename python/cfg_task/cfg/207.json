{
    "nodes": [
        {
            "id": "1",
            "type": "block",
            "statements": [
                "'\\nWord Ladder is a classic problem in computer science.\\nThe problem is to transform a start word into an end word\\nby changing one letter at a time.\\nEach intermediate word must be a valid word from a given list of words.\\nThe goal is to find a transformation sequence\\nfrom the start word to the end word.\\n\\nWikipedia: https://en.wikipedia.org/wiki/Word_ladder\\n'",
                "import string",
                "def backtrack(current_word: str, path: list[str], end_word: str, word_set: set[str]) -> list[str]:\n    \"\"\"\n    Helper function to perform backtracking to find the transformation\n    from the current_word to the end_word.\n\n    Parameters:\n    current_word (str): The current word in the transformation sequence.\n    path (list[str]): The list of transformations from begin_word to current_word.\n    end_word (str): The target word for transformation.\n    word_set (set[str]): The set of valid words for transformation.\n\n    Returns:\n    list[str]: The list of transformations from begin_word to end_word.\n               Returns an empty list if there is no valid\n                transformation from current_word to end_word.\n\n    Example:\n    >>> backtrack(\"hit\", [\"hit\"], \"cog\", {\"hot\", \"dot\", \"dog\", \"lot\", \"log\", \"cog\"})\n    ['hit', 'hot', 'dot', 'lot', 'log', 'cog']\n\n    >>> backtrack(\"hit\", [\"hit\"], \"cog\", {\"hot\", \"dot\", \"dog\", \"lot\", \"log\"})\n    []\n\n    >>> backtrack(\"lead\", [\"lead\"], \"gold\", {\"load\", \"goad\", \"gold\", \"lead\", \"lord\"})\n    ['lead', 'lead', 'load', 'goad', 'gold']\n\n    >>> backtrack(\"game\", [\"game\"], \"code\", {\"came\", \"cage\", \"code\", \"cade\", \"gave\"})\n    ['game', 'came', 'cade', 'code']\n    \"\"\"\n    if current_word == end_word:\n        return path\n    for i in range(len(current_word)):\n        for c in string.ascii_lowercase:\n            transformed_word = current_word[:i] + c + current_word[i + 1:]\n            if transformed_word in word_set:\n                word_set.remove(transformed_word)\n                result = backtrack(transformed_word, [*path, transformed_word], end_word, word_set)\n                if result:\n                    return result\n                word_set.add(transformed_word)\n    return []",
                "'\\n    Helper function to perform backtracking to find the transformation\\n    from the current_word to the end_word.\\n\\n    Parameters:\\n    current_word (str): The current word in the transformation sequence.\\n    path (list[str]): The list of transformations from begin_word to current_word.\\n    end_word (str): The target word for transformation.\\n    word_set (set[str]): The set of valid words for transformation.\\n\\n    Returns:\\n    list[str]: The list of transformations from begin_word to end_word.\\n               Returns an empty list if there is no valid\\n                transformation from current_word to end_word.\\n\\n    Example:\\n    >>> backtrack(\"hit\", [\"hit\"], \"cog\", {\"hot\", \"dot\", \"dog\", \"lot\", \"log\", \"cog\"})\\n    [\\'hit\\', \\'hot\\', \\'dot\\', \\'lot\\', \\'log\\', \\'cog\\']\\n\\n    >>> backtrack(\"hit\", [\"hit\"], \"cog\", {\"hot\", \"dot\", \"dog\", \"lot\", \"log\"})\\n    []\\n\\n    >>> backtrack(\"lead\", [\"lead\"], \"gold\", {\"load\", \"goad\", \"gold\", \"lead\", \"lord\"})\\n    [\\'lead\\', \\'lead\\', \\'load\\', \\'goad\\', \\'gold\\']\\n\\n    >>> backtrack(\"game\", [\"game\"], \"code\", {\"came\", \"cage\", \"code\", \"cade\", \"gave\"})\\n    [\\'game\\', \\'came\\', \\'cade\\', \\'code\\']\\n    '",
                "current_word Eq end_word"
            ]
        },
        {
            "id": "2",
            "type": "block",
            "statements": [
                "return path"
            ]
        },
        {
            "id": "3",
            "type": "block",
            "statements": []
        },
        {
            "id": "4",
            "type": "block",
            "statements": []
        },
        {
            "id": "5",
            "type": "block",
            "statements": [
                "i",
                "range(len(current_word))"
            ]
        },
        {
            "id": "6",
            "type": "block",
            "statements": []
        },
        {
            "id": "7",
            "type": "block",
            "statements": [
                "return []"
            ]
        },
        {
            "id": "8",
            "type": "block",
            "statements": [
                "c",
                "string.ascii_lowercase"
            ]
        },
        {
            "id": "9",
            "type": "block",
            "statements": [
                "transformed_word = current_word[:i] + c + current_word[i + 1:]",
                "transformed_word In word_set"
            ]
        },
        {
            "id": "10",
            "type": "block",
            "statements": []
        },
        {
            "id": "11",
            "type": "block",
            "statements": [
                "word_set.remove(transformed_word)",
                "result = backtrack(transformed_word, [*path, transformed_word], end_word, word_set)",
                "result"
            ]
        },
        {
            "id": "12",
            "type": "block",
            "statements": []
        },
        {
            "id": "13",
            "type": "block",
            "statements": []
        },
        {
            "id": "14",
            "type": "block",
            "statements": [
                "return result"
            ]
        },
        {
            "id": "15",
            "type": "block",
            "statements": []
        },
        {
            "id": "16",
            "type": "block",
            "statements": [
                "word_set.add(transformed_word)"
            ]
        },
        {
            "id": "17",
            "type": "block",
            "statements": [
                "def word_ladder(begin_word: str, end_word: str, word_set: set[str]) -> list[str]:\n    \"\"\"\n    Solve the Word Ladder problem using Backtracking and return\n    the list of transformations from begin_word to end_word.\n\n    Parameters:\n    begin_word (str): The word from which the transformation starts.\n    end_word (str): The target word for transformation.\n    word_list (list[str]): The list of valid words for transformation.\n\n    Returns:\n    list[str]: The list of transformations from begin_word to end_word.\n               Returns an empty list if there is no valid transformation.\n\n    Example:\n    >>> word_ladder(\"hit\", \"cog\", [\"hot\", \"dot\", \"dog\", \"lot\", \"log\", \"cog\"])\n    ['hit', 'hot', 'dot', 'lot', 'log', 'cog']\n\n    >>> word_ladder(\"hit\", \"cog\", [\"hot\", \"dot\", \"dog\", \"lot\", \"log\"])\n    []\n\n    >>> word_ladder(\"lead\", \"gold\", [\"load\", \"goad\", \"gold\", \"lead\", \"lord\"])\n    ['lead', 'lead', 'load', 'goad', 'gold']\n\n    >>> word_ladder(\"game\", \"code\", [\"came\", \"cage\", \"code\", \"cade\", \"gave\"])\n    ['game', 'came', 'cade', 'code']\n    \"\"\"\n    if end_word not in word_set:\n        return []\n    return backtrack(begin_word, [begin_word], end_word, word_set)",
                "'\\n    Solve the Word Ladder problem using Backtracking and return\\n    the list of transformations from begin_word to end_word.\\n\\n    Parameters:\\n    begin_word (str): The word from which the transformation starts.\\n    end_word (str): The target word for transformation.\\n    word_list (list[str]): The list of valid words for transformation.\\n\\n    Returns:\\n    list[str]: The list of transformations from begin_word to end_word.\\n               Returns an empty list if there is no valid transformation.\\n\\n    Example:\\n    >>> word_ladder(\"hit\", \"cog\", [\"hot\", \"dot\", \"dog\", \"lot\", \"log\", \"cog\"])\\n    [\\'hit\\', \\'hot\\', \\'dot\\', \\'lot\\', \\'log\\', \\'cog\\']\\n\\n    >>> word_ladder(\"hit\", \"cog\", [\"hot\", \"dot\", \"dog\", \"lot\", \"log\"])\\n    []\\n\\n    >>> word_ladder(\"lead\", \"gold\", [\"load\", \"goad\", \"gold\", \"lead\", \"lord\"])\\n    [\\'lead\\', \\'lead\\', \\'load\\', \\'goad\\', \\'gold\\']\\n\\n    >>> word_ladder(\"game\", \"code\", [\"came\", \"cage\", \"code\", \"cade\", \"gave\"])\\n    [\\'game\\', \\'came\\', \\'cade\\', \\'code\\']\\n    '",
                "end_word NotIn word_set"
            ]
        },
        {
            "id": "18",
            "type": "block",
            "statements": [
                "return []"
            ]
        },
        {
            "id": "19",
            "type": "block",
            "statements": []
        },
        {
            "id": "20",
            "type": "block",
            "statements": [
                "return backtrack(begin_word, [begin_word], end_word, word_set)"
            ]
        }
    ],
    "edges": [
        {
            "source": "1",
            "target": "2",
            "type": "true"
        },
        {
            "source": "1",
            "target": "3",
            "type": "false"
        },
        {
            "source": "3",
            "target": "4",
            "type": "next"
        },
        {
            "source": "4",
            "target": "5",
            "type": "next"
        },
        {
            "source": "5",
            "target": "6",
            "type": "true"
        },
        {
            "source": "5",
            "target": "7",
            "type": "false"
        },
        {
            "source": "6",
            "target": "8",
            "type": "next"
        },
        {
            "source": "8",
            "target": "9",
            "type": "true"
        },
        {
            "source": "8",
            "target": "10",
            "type": "false"
        },
        {
            "source": "9",
            "target": "11",
            "type": "true"
        },
        {
            "source": "9",
            "target": "12",
            "type": "false"
        },
        {
            "source": "10",
            "target": "5",
            "type": "next"
        },
        {
            "source": "11",
            "target": "14",
            "type": "true"
        },
        {
            "source": "11",
            "target": "15",
            "type": "false"
        },
        {
            "source": "12",
            "target": "13",
            "type": "next"
        },
        {
            "source": "13",
            "target": "8",
            "type": "next"
        },
        {
            "source": "15",
            "target": "16",
            "type": "next"
        },
        {
            "source": "16",
            "target": "13",
            "type": "next"
        },
        {
            "source": "17",
            "target": "18",
            "type": "true"
        },
        {
            "source": "17",
            "target": "19",
            "type": "false"
        },
        {
            "source": "19",
            "target": "20",
            "type": "next"
        }
    ]
}