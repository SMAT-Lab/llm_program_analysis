{
    "nodes": [
        {
            "id": "1",
            "type": "block",
            "statements": [
                "import subprocess",
                "import sys",
                "import time",
                "def wait_for_postgres(max_retries=5, delay=5):\n    for _ in range(max_retries):\n        try:\n            result = subprocess.run(['docker', 'compose', '-f', 'docker-compose.test.yaml', 'exec', 'postgres-test', 'pg_isready', '-U', 'postgres', '-d', 'postgres'], check=True, capture_output=True, text=True)\n            if 'accepting connections' in result.stdout:\n                print('PostgreSQL is ready.')\n                return True\n        except subprocess.CalledProcessError:\n            print(f'PostgreSQL is not ready yet. Retrying in {delay} seconds...')\n            time.sleep(delay)\n    print('Failed to connect to PostgreSQL.')\n    return False"
            ]
        },
        {
            "id": "2",
            "type": "block",
            "statements": [
                "_",
                "range(max_retries)"
            ]
        },
        {
            "id": "3",
            "type": "block",
            "statements": [
                "try:\n    result = subprocess.run(['docker', 'compose', '-f', 'docker-compose.test.yaml', 'exec', 'postgres-test', 'pg_isready', '-U', 'postgres', '-d', 'postgres'], check=True, capture_output=True, text=True)\n    if 'accepting connections' in result.stdout:\n        print('PostgreSQL is ready.')\n        return True\nexcept subprocess.CalledProcessError:\n    print(f'PostgreSQL is not ready yet. Retrying in {delay} seconds...')\n    time.sleep(delay)",
                "result = subprocess.run(['docker', 'compose', '-f', 'docker-compose.test.yaml', 'exec', 'postgres-test', 'pg_isready', '-U', 'postgres', '-d', 'postgres'], check=True, capture_output=True, text=True)",
                "'accepting connections' In result.stdout"
            ]
        },
        {
            "id": "4",
            "type": "block",
            "statements": [
                "print('Failed to connect to PostgreSQL.')",
                "return False"
            ]
        },
        {
            "id": "5",
            "type": "block",
            "statements": [
                "print('PostgreSQL is ready.')",
                "return True"
            ]
        },
        {
            "id": "6",
            "type": "block",
            "statements": []
        },
        {
            "id": "7",
            "type": "block",
            "statements": [
                "print(f'PostgreSQL is not ready yet. Retrying in {delay} seconds...')",
                "time.sleep(delay)"
            ]
        },
        {
            "id": "8",
            "type": "block",
            "statements": [
                "def run_command(command, check=True):\n    try:\n        subprocess.run(command, check=check)\n    except subprocess.CalledProcessError as e:\n        print(f'Command failed: {e}')\n        sys.exit(1)",
                "try:\n    subprocess.run(command, check=check)\nexcept subprocess.CalledProcessError as e:\n    print(f'Command failed: {e}')\n    sys.exit(1)",
                "subprocess.run(command)",
                "print(f'Command failed: {e}')",
                "sys.exit(1)",
                "def test():\n    run_command(['docker', 'compose', '-f', 'docker-compose.test.yaml', 'up', '-d', 'postgres-test'])\n    if not wait_for_postgres():\n        run_command(['docker', 'compose', '-f', 'docker-compose.test.yaml', 'down'])\n        sys.exit(1)\n    run_command(['prisma', 'migrate', 'dev'])\n    result = subprocess.run(['pytest'] + sys.argv[1:], check=False)\n    run_command(['docker', 'compose', '-f', 'docker-compose.test.yaml', 'down'])\n    sys.exit(result.returncode)",
                "run_command(['docker', 'compose', '-f', 'docker-compose.test.yaml', 'up', '-d', 'postgres-test'])",
                "not wait_for_postgres()"
            ]
        },
        {
            "id": "9",
            "type": "block",
            "statements": [
                "run_command(['docker', 'compose', '-f', 'docker-compose.test.yaml', 'down'])",
                "sys.exit(1)"
            ]
        },
        {
            "id": "10",
            "type": "block",
            "statements": []
        },
        {
            "id": "11",
            "type": "block",
            "statements": [
                "run_command(['prisma', 'migrate', 'dev'])",
                "result = subprocess.run(['pytest'] + sys.argv[1:], check=False)",
                "run_command(['docker', 'compose', '-f', 'docker-compose.test.yaml', 'down'])",
                "sys.exit(result.returncode)"
            ]
        }
    ],
    "edges": [
        {
            "source": "1",
            "target": "2",
            "type": "next"
        },
        {
            "source": "2",
            "target": "3",
            "type": "true"
        },
        {
            "source": "2",
            "target": "4",
            "type": "false"
        },
        {
            "source": "3",
            "target": "5",
            "type": "true"
        },
        {
            "source": "3",
            "target": "6",
            "type": "false"
        },
        {
            "source": "6",
            "target": "7",
            "type": "next"
        },
        {
            "source": "7",
            "target": "2",
            "type": "next"
        },
        {
            "source": "8",
            "target": "9",
            "type": "true"
        },
        {
            "source": "8",
            "target": "10",
            "type": "false"
        },
        {
            "source": "9",
            "target": "11",
            "type": "next"
        },
        {
            "source": "10",
            "target": "11",
            "type": "next"
        }
    ]
}