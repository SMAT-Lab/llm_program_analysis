{
    "nodes": [
        {
            "id": "1",
            "type": "block",
            "statements": [
                "from datetime import datetime",
                "import prisma.errors",
                "import prisma.models",
                "import pytest",
                "from prisma import Prisma",
                "import backend.server.v2.store.db as db",
                "from backend.server.v2.store.model import Profile",
                "@pytest.fixture(autouse=True)\nasync def setup_prisma():\n    try:\n        Prisma()\n    except prisma.errors.ClientAlreadyRegisteredError:\n        pass\n    yield",
                "try:\n    Prisma()\nexcept prisma.errors.ClientAlreadyRegisteredError:\n    pass",
                "Prisma()",
                "pass",
                "(yield)",
                "@pytest.mark.asyncio\nasync def test_get_store_agents(mocker):\n    mock_agents = [prisma.models.StoreAgent(listing_id='test-id', storeListingVersionId='version123', slug='test-agent', agent_name='Test Agent', agent_video=None, agent_image=['image.jpg'], featured=False, creator_username='creator', creator_avatar='avatar.jpg', sub_heading='Test heading', description='Test description', categories=[], runs=10, rating=4.5, versions=['1.0'], updated_at=datetime.now())]\n    mock_store_agent = mocker.patch('prisma.models.StoreAgent.prisma')\n    mock_store_agent.return_value.find_many = mocker.AsyncMock(return_value=mock_agents)\n    mock_store_agent.return_value.count = mocker.AsyncMock(return_value=1)\n    result = await db.get_store_agents()\n    assert len(result.agents) == 1\n    assert result.agents[0].slug == 'test-agent'\n    assert result.pagination.total_items == 1\n    mock_store_agent.return_value.find_many.assert_called_once()\n    mock_store_agent.return_value.count.assert_called_once()",
                "mock_agents = [prisma.models.StoreAgent(listing_id='test-id', storeListingVersionId='version123', slug='test-agent', agent_name='Test Agent', agent_video=None, agent_image=['image.jpg'], featured=False, creator_username='creator', creator_avatar='avatar.jpg', sub_heading='Test heading', description='Test description', categories=[], runs=10, rating=4.5, versions=['1.0'], updated_at=datetime.now())]",
                "mock_store_agent = mocker.patch('prisma.models.StoreAgent.prisma')",
                "mock_store_agent.return_value.find_many = mocker.AsyncMock(return_value=mock_agents)",
                "mock_store_agent.return_value.count = mocker.AsyncMock(return_value=1)",
                "result = await db.get_store_agents()",
                "assert len(result.agents) == 1",
                "assert result.agents[0].slug == 'test-agent'",
                "assert result.pagination.total_items == 1",
                "mock_store_agent.return_value.find_many.assert_called_once()",
                "mock_store_agent.return_value.count.assert_called_once()",
                "@pytest.mark.asyncio\nasync def test_get_store_agent_details(mocker):\n    mock_agent = prisma.models.StoreAgent(listing_id='test-id', storeListingVersionId='version123', slug='test-agent', agent_name='Test Agent', agent_video='video.mp4', agent_image=['image.jpg'], featured=False, creator_username='creator', creator_avatar='avatar.jpg', sub_heading='Test heading', description='Test description', categories=['test'], runs=10, rating=4.5, versions=['1.0'], updated_at=datetime.now())\n    mock_store_agent = mocker.patch('prisma.models.StoreAgent.prisma')\n    mock_store_agent.return_value.find_first = mocker.AsyncMock(return_value=mock_agent)\n    result = await db.get_store_agent_details('creator', 'test-agent')\n    assert result.slug == 'test-agent'\n    assert result.agent_name == 'Test Agent'\n    mock_store_agent.return_value.find_first.assert_called_once_with(where={'creator_username': 'creator', 'slug': 'test-agent'})",
                "mock_agent = prisma.models.StoreAgent(listing_id='test-id', storeListingVersionId='version123', slug='test-agent', agent_name='Test Agent', agent_video='video.mp4', agent_image=['image.jpg'], featured=False, creator_username='creator', creator_avatar='avatar.jpg', sub_heading='Test heading', description='Test description', categories=['test'], runs=10, rating=4.5, versions=['1.0'], updated_at=datetime.now())",
                "mock_store_agent = mocker.patch('prisma.models.StoreAgent.prisma')",
                "mock_store_agent.return_value.find_first = mocker.AsyncMock(return_value=mock_agent)",
                "result = await db.get_store_agent_details('creator', 'test-agent')",
                "assert result.slug == 'test-agent'",
                "assert result.agent_name == 'Test Agent'",
                "mock_store_agent.return_value.find_first.assert_called_once_with()",
                "@pytest.mark.asyncio\nasync def test_get_store_creator_details(mocker):\n    mock_creator_data = prisma.models.Creator(name='Test Creator', username='creator', description='Test description', links=['link1'], avatar_url='avatar.jpg', num_agents=1, agent_rating=4.5, agent_runs=10, top_categories=['test'], is_featured=False)\n    mock_creator = mocker.patch('prisma.models.Creator.prisma')\n    mock_creator.return_value.find_unique = mocker.AsyncMock()\n    mock_creator.return_value.find_unique.return_value = mock_creator_data\n    result = await db.get_store_creator_details('creator')\n    assert result.username == 'creator'\n    assert result.name == 'Test Creator'\n    assert result.description == 'Test description'\n    assert result.avatar_url == 'avatar.jpg'\n    mock_creator.return_value.find_unique.assert_called_once_with(where={'username': 'creator'})",
                "mock_creator_data = prisma.models.Creator(name='Test Creator', username='creator', description='Test description', links=['link1'], avatar_url='avatar.jpg', num_agents=1, agent_rating=4.5, agent_runs=10, top_categories=['test'], is_featured=False)",
                "mock_creator = mocker.patch('prisma.models.Creator.prisma')",
                "mock_creator.return_value.find_unique = mocker.AsyncMock()",
                "mock_creator.return_value.find_unique.return_value = mock_creator_data",
                "result = await db.get_store_creator_details('creator')",
                "assert result.username == 'creator'",
                "assert result.name == 'Test Creator'",
                "assert result.description == 'Test description'",
                "assert result.avatar_url == 'avatar.jpg'",
                "mock_creator.return_value.find_unique.assert_called_once_with()",
                "@pytest.mark.asyncio\nasync def test_create_store_submission(mocker):\n    mock_agent = prisma.models.AgentGraph(id='agent-id', version=1, userId='user-id', createdAt=datetime.now(), isActive=True, isTemplate=False)\n    mock_listing = prisma.models.StoreListing(id='listing-id', createdAt=datetime.now(), updatedAt=datetime.now(), isDeleted=False, isApproved=False, agentId='agent-id', agentVersion=1, owningUserId='user-id')\n    mock_agent_graph = mocker.patch('prisma.models.AgentGraph.prisma')\n    mock_agent_graph.return_value.find_first = mocker.AsyncMock(return_value=mock_agent)\n    mock_store_listing = mocker.patch('prisma.models.StoreListing.prisma')\n    mock_store_listing.return_value.find_first = mocker.AsyncMock(return_value=None)\n    mock_store_listing.return_value.create = mocker.AsyncMock(return_value=mock_listing)\n    result = await db.create_store_submission(user_id='user-id', agent_id='agent-id', agent_version=1, slug='test-agent', name='Test Agent', description='Test description')\n    assert result.name == 'Test Agent'\n    assert result.description == 'Test description'\n    mock_agent_graph.return_value.find_first.assert_called_once()\n    mock_store_listing.return_value.find_first.assert_called_once()\n    mock_store_listing.return_value.create.assert_called_once()",
                "mock_agent = prisma.models.AgentGraph(id='agent-id', version=1, userId='user-id', createdAt=datetime.now(), isActive=True, isTemplate=False)",
                "mock_listing = prisma.models.StoreListing(id='listing-id', createdAt=datetime.now(), updatedAt=datetime.now(), isDeleted=False, isApproved=False, agentId='agent-id', agentVersion=1, owningUserId='user-id')",
                "mock_agent_graph = mocker.patch('prisma.models.AgentGraph.prisma')",
                "mock_agent_graph.return_value.find_first = mocker.AsyncMock(return_value=mock_agent)",
                "mock_store_listing = mocker.patch('prisma.models.StoreListing.prisma')",
                "mock_store_listing.return_value.find_first = mocker.AsyncMock(return_value=None)",
                "mock_store_listing.return_value.create = mocker.AsyncMock(return_value=mock_listing)",
                "result = await db.create_store_submission(user_id='user-id', agent_id='agent-id', agent_version=1, slug='test-agent', name='Test Agent', description='Test description')",
                "assert result.name == 'Test Agent'",
                "assert result.description == 'Test description'",
                "mock_agent_graph.return_value.find_first.assert_called_once()",
                "mock_store_listing.return_value.find_first.assert_called_once()",
                "mock_store_listing.return_value.create.assert_called_once()",
                "@pytest.mark.asyncio\nasync def test_update_profile(mocker):\n    mock_profile = prisma.models.Profile(id='profile-id', name='Test Creator', username='creator', description='Test description', links=['link1'], avatarUrl='avatar.jpg', isFeatured=False, createdAt=datetime.now(), updatedAt=datetime.now())\n    mock_profile_db = mocker.patch('prisma.models.Profile.prisma')\n    mock_profile_db.return_value.find_first = mocker.AsyncMock(return_value=mock_profile)\n    mock_profile_db.return_value.update = mocker.AsyncMock(return_value=mock_profile)\n    profile = Profile(name='Test Creator', username='creator', description='Test description', links=['link1'], avatar_url='avatar.jpg', is_featured=False)\n    result = await db.update_or_create_profile('user-id', profile)\n    assert result.username == 'creator'\n    assert result.name == 'Test Creator'\n    mock_profile_db.return_value.find_first.assert_called_once()\n    mock_profile_db.return_value.update.assert_called_once()",
                "mock_profile = prisma.models.Profile(id='profile-id', name='Test Creator', username='creator', description='Test description', links=['link1'], avatarUrl='avatar.jpg', isFeatured=False, createdAt=datetime.now(), updatedAt=datetime.now())",
                "mock_profile_db = mocker.patch('prisma.models.Profile.prisma')",
                "mock_profile_db.return_value.find_first = mocker.AsyncMock(return_value=mock_profile)",
                "mock_profile_db.return_value.update = mocker.AsyncMock(return_value=mock_profile)",
                "profile = Profile(name='Test Creator', username='creator', description='Test description', links=['link1'], avatar_url='avatar.jpg', is_featured=False)",
                "result = await db.update_or_create_profile('user-id', profile)",
                "assert result.username == 'creator'",
                "assert result.name == 'Test Creator'",
                "mock_profile_db.return_value.find_first.assert_called_once()",
                "mock_profile_db.return_value.update.assert_called_once()",
                "@pytest.mark.asyncio\nasync def test_get_user_profile(mocker):\n    mock_profile = prisma.models.Profile(id='profile-id', name='No Profile Data', username='testuser', description='Test description', links=['link1', 'link2'], avatarUrl='avatar.jpg', isFeatured=False, createdAt=datetime.now(), updatedAt=datetime.now())\n    mock_profile_db = mocker.patch('prisma.models.Profile.prisma')\n    mock_profile_db.return_value.find_unique = mocker.AsyncMock(return_value=mock_profile)\n    result = await db.get_user_profile('user-id')\n    assert result.name == 'No Profile Data'\n    assert result.username == 'No Profile Data'\n    assert result.description == 'No Profile Data'\n    assert result.links == []\n    assert result.avatar_url == ''",
                "mock_profile = prisma.models.Profile(id='profile-id', name='No Profile Data', username='testuser', description='Test description', links=['link1', 'link2'], avatarUrl='avatar.jpg', isFeatured=False, createdAt=datetime.now(), updatedAt=datetime.now())",
                "mock_profile_db = mocker.patch('prisma.models.Profile.prisma')",
                "mock_profile_db.return_value.find_unique = mocker.AsyncMock(return_value=mock_profile)",
                "result = await db.get_user_profile('user-id')",
                "assert result.name == 'No Profile Data'",
                "assert result.username == 'No Profile Data'",
                "assert result.description == 'No Profile Data'",
                "assert result.links == []",
                "assert result.avatar_url == ''"
            ]
        }
    ],
    "edges": []
}