{
    "nodes": [
        {
            "id": "1",
            "type": "block",
            "statements": [
                "from enum import Enum",
                "from typing import Literal",
                "from e2b_code_interpreter import Sandbox",
                "from pydantic import SecretStr",
                "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema",
                "from backend.data.model import APIKeyCredentials, CredentialsField, CredentialsMetaInput, SchemaField",
                "from backend.integrations.providers import ProviderName",
                "TEST_CREDENTIALS = APIKeyCredentials(id='01234567-89ab-cdef-0123-456789abcdef', provider='e2b', api_key=SecretStr('mock-e2b-api-key'), title='Mock E2B API key', expires_at=None)",
                "TEST_CREDENTIALS_INPUT = {'provider': TEST_CREDENTIALS.provider, 'id': TEST_CREDENTIALS.id, 'type': TEST_CREDENTIALS.type, 'title': TEST_CREDENTIALS.type}",
                "class ProgrammingLanguage(Enum):\n    PYTHON = 'python'\n    JAVASCRIPT = 'js'\n    BASH = 'bash'\n    R = 'r'\n    JAVA = 'java'",
                "PYTHON = 'python'",
                "JAVASCRIPT = 'js'",
                "BASH = 'bash'",
                "R = 'r'",
                "JAVA = 'java'",
                "class CodeExecutionBlock(Block):\n\n    class Input(BlockSchema):\n        credentials: CredentialsMetaInput[Literal[ProviderName.E2B], Literal['api_key']] = CredentialsField(description='Enter your api key for the E2B Sandbox. You can get it in here - https://e2b.dev/docs')\n        setup_commands: list[str] = SchemaField(description='Shell commands to set up the sandbox before running the code. You can use `curl` or `git` to install your desired Debian based package manager. `pip` and `npm` are pre-installed.\\n\\nThese commands are executed with `sh`, in the foreground.', placeholder='pip install cowsay', default=[], advanced=False)\n        code: str = SchemaField(description='Code to execute in the sandbox', placeholder=\"print('Hello, World!')\", default='', advanced=False)\n        language: ProgrammingLanguage = SchemaField(description='Programming language to execute', default=ProgrammingLanguage.PYTHON, advanced=False)\n        timeout: int = SchemaField(description='Execution timeout in seconds', default=300)\n        template_id: str = SchemaField(description='You can use an E2B sandbox template by entering its ID here. Check out the E2B docs for more details: [E2B - Sandbox template](https://e2b.dev/docs/sandbox-template)', default='', advanced=True)\n\n    class Output(BlockSchema):\n        response: str = SchemaField(description='Response from code execution')\n        stdout_logs: str = SchemaField(description='Standard output logs from execution')\n        stderr_logs: str = SchemaField(description='Standard error logs from execution')\n        error: str = SchemaField(description='Error message if execution failed')\n\n    def __init__(self):\n        super().__init__(id='0b02b072-abe7-11ef-8372-fb5d162dd712', description='Executes code in an isolated sandbox environment with internet access.', categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=CodeExecutionBlock.Input, output_schema=CodeExecutionBlock.Output, test_credentials=TEST_CREDENTIALS, test_input={'credentials': TEST_CREDENTIALS_INPUT, 'code': \"print('Hello World')\", 'language': ProgrammingLanguage.PYTHON.value, 'setup_commands': [], 'timeout': 300, 'template_id': ''}, test_output=[('response', 'Hello World'), ('stdout_logs', 'Hello World\\n')], test_mock={'execute_code': lambda code, language, setup_commands, timeout, api_key, template_id: ('Hello World', 'Hello World\\n', '')})\n\n    def execute_code(self, code: str, language: ProgrammingLanguage, setup_commands: list[str], timeout: int, api_key: str, template_id: str):\n        try:\n            sandbox = None\n            if template_id:\n                sandbox = Sandbox(template=template_id, api_key=api_key, timeout=timeout)\n            else:\n                sandbox = Sandbox(api_key=api_key, timeout=timeout)\n            if not sandbox:\n                raise Exception('Sandbox not created')\n            for cmd in setup_commands:\n                sandbox.commands.run(cmd)\n            execution = sandbox.run_code(code, language=language.value, on_error=lambda e: sandbox.kill())\n            if execution.error:\n                raise Exception(execution.error)\n            response = execution.text\n            stdout_logs = ''.join(execution.logs.stdout)\n            stderr_logs = ''.join(execution.logs.stderr)\n            return (response, stdout_logs, stderr_logs)\n        except Exception as e:\n            raise e\n\n    def run(self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs) -> BlockOutput:\n        try:\n            (response, stdout_logs, stderr_logs) = self.execute_code(input_data.code, input_data.language, input_data.setup_commands, input_data.timeout, credentials.api_key.get_secret_value(), input_data.template_id)\n            if response:\n                yield ('response', response)\n            if stdout_logs:\n                yield ('stdout_logs', stdout_logs)\n            if stderr_logs:\n                yield ('stderr_logs', stderr_logs)\n        except Exception as e:\n            yield ('error', str(e))",
                "class Input(BlockSchema):\n    credentials: CredentialsMetaInput[Literal[ProviderName.E2B], Literal['api_key']] = CredentialsField(description='Enter your api key for the E2B Sandbox. You can get it in here - https://e2b.dev/docs')\n    setup_commands: list[str] = SchemaField(description='Shell commands to set up the sandbox before running the code. You can use `curl` or `git` to install your desired Debian based package manager. `pip` and `npm` are pre-installed.\\n\\nThese commands are executed with `sh`, in the foreground.', placeholder='pip install cowsay', default=[], advanced=False)\n    code: str = SchemaField(description='Code to execute in the sandbox', placeholder=\"print('Hello, World!')\", default='', advanced=False)\n    language: ProgrammingLanguage = SchemaField(description='Programming language to execute', default=ProgrammingLanguage.PYTHON, advanced=False)\n    timeout: int = SchemaField(description='Execution timeout in seconds', default=300)\n    template_id: str = SchemaField(description='You can use an E2B sandbox template by entering its ID here. Check out the E2B docs for more details: [E2B - Sandbox template](https://e2b.dev/docs/sandbox-template)', default='', advanced=True)",
                "credentials: CredentialsMetaInput[Literal[ProviderName.E2B], Literal['api_key']] = CredentialsField(description='Enter your api key for the E2B Sandbox. You can get it in here - https://e2b.dev/docs')",
                "setup_commands: list[str] = SchemaField(description='Shell commands to set up the sandbox before running the code. You can use `curl` or `git` to install your desired Debian based package manager. `pip` and `npm` are pre-installed.\\n\\nThese commands are executed with `sh`, in the foreground.', placeholder='pip install cowsay', default=[], advanced=False)",
                "code: str = SchemaField(description='Code to execute in the sandbox', placeholder=\"print('Hello, World!')\", default='', advanced=False)",
                "language: ProgrammingLanguage = SchemaField(description='Programming language to execute', default=ProgrammingLanguage.PYTHON, advanced=False)",
                "timeout: int = SchemaField(description='Execution timeout in seconds', default=300)",
                "template_id: str = SchemaField(description='You can use an E2B sandbox template by entering its ID here. Check out the E2B docs for more details: [E2B - Sandbox template](https://e2b.dev/docs/sandbox-template)', default='', advanced=True)",
                "class Output(BlockSchema):\n    response: str = SchemaField(description='Response from code execution')\n    stdout_logs: str = SchemaField(description='Standard output logs from execution')\n    stderr_logs: str = SchemaField(description='Standard error logs from execution')\n    error: str = SchemaField(description='Error message if execution failed')",
                "response: str = SchemaField(description='Response from code execution')",
                "stdout_logs: str = SchemaField(description='Standard output logs from execution')",
                "stderr_logs: str = SchemaField(description='Standard error logs from execution')",
                "error: str = SchemaField(description='Error message if execution failed')",
                "def __init__(self):\n    super().__init__(id='0b02b072-abe7-11ef-8372-fb5d162dd712', description='Executes code in an isolated sandbox environment with internet access.', categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=CodeExecutionBlock.Input, output_schema=CodeExecutionBlock.Output, test_credentials=TEST_CREDENTIALS, test_input={'credentials': TEST_CREDENTIALS_INPUT, 'code': \"print('Hello World')\", 'language': ProgrammingLanguage.PYTHON.value, 'setup_commands': [], 'timeout': 300, 'template_id': ''}, test_output=[('response', 'Hello World'), ('stdout_logs', 'Hello World\\n')], test_mock={'execute_code': lambda code, language, setup_commands, timeout, api_key, template_id: ('Hello World', 'Hello World\\n', '')})",
                "super().__init__()",
                "def execute_code(self, code: str, language: ProgrammingLanguage, setup_commands: list[str], timeout: int, api_key: str, template_id: str):\n    try:\n        sandbox = None\n        if template_id:\n            sandbox = Sandbox(template=template_id, api_key=api_key, timeout=timeout)\n        else:\n            sandbox = Sandbox(api_key=api_key, timeout=timeout)\n        if not sandbox:\n            raise Exception('Sandbox not created')\n        for cmd in setup_commands:\n            sandbox.commands.run(cmd)\n        execution = sandbox.run_code(code, language=language.value, on_error=lambda e: sandbox.kill())\n        if execution.error:\n            raise Exception(execution.error)\n        response = execution.text\n        stdout_logs = ''.join(execution.logs.stdout)\n        stderr_logs = ''.join(execution.logs.stderr)\n        return (response, stdout_logs, stderr_logs)\n    except Exception as e:\n        raise e",
                "try:\n    sandbox = None\n    if template_id:\n        sandbox = Sandbox(template=template_id, api_key=api_key, timeout=timeout)\n    else:\n        sandbox = Sandbox(api_key=api_key, timeout=timeout)\n    if not sandbox:\n        raise Exception('Sandbox not created')\n    for cmd in setup_commands:\n        sandbox.commands.run(cmd)\n    execution = sandbox.run_code(code, language=language.value, on_error=lambda e: sandbox.kill())\n    if execution.error:\n        raise Exception(execution.error)\n    response = execution.text\n    stdout_logs = ''.join(execution.logs.stdout)\n    stderr_logs = ''.join(execution.logs.stderr)\n    return (response, stdout_logs, stderr_logs)\nexcept Exception as e:\n    raise e",
                "sandbox = None",
                "template_id"
            ]
        },
        {
            "id": "2",
            "type": "block",
            "statements": [
                "sandbox = Sandbox(template=template_id, api_key=api_key, timeout=timeout)"
            ]
        },
        {
            "id": "3",
            "type": "block",
            "statements": [
                "sandbox = Sandbox(api_key=api_key, timeout=timeout)"
            ]
        },
        {
            "id": "4",
            "type": "block",
            "statements": [
                "not sandbox"
            ]
        },
        {
            "id": "5",
            "type": "block",
            "statements": [
                "raise Exception('Sandbox not created')"
            ]
        },
        {
            "id": "6",
            "type": "block",
            "statements": []
        },
        {
            "id": "7",
            "type": "block",
            "statements": []
        },
        {
            "id": "8",
            "type": "block",
            "statements": [
                "cmd",
                "setup_commands"
            ]
        },
        {
            "id": "9",
            "type": "block",
            "statements": [
                "sandbox.commands.run(cmd)"
            ]
        },
        {
            "id": "10",
            "type": "block",
            "statements": [
                "execution = sandbox.run_code(code, language=language.value, on_error=lambda e: sandbox.kill())",
                "execution.error"
            ]
        },
        {
            "id": "11",
            "type": "block",
            "statements": [
                "raise Exception(execution.error)"
            ]
        },
        {
            "id": "12",
            "type": "block",
            "statements": []
        },
        {
            "id": "13",
            "type": "block",
            "statements": [
                "response = execution.text",
                "stdout_logs = ''.join(execution.logs.stdout)",
                "stderr_logs = ''.join(execution.logs.stderr)",
                "return (response, stdout_logs, stderr_logs)"
            ]
        },
        {
            "id": "14",
            "type": "block",
            "statements": [
                "raise e",
                "def run(self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs) -> BlockOutput:\n    try:\n        (response, stdout_logs, stderr_logs) = self.execute_code(input_data.code, input_data.language, input_data.setup_commands, input_data.timeout, credentials.api_key.get_secret_value(), input_data.template_id)\n        if response:\n            yield ('response', response)\n        if stdout_logs:\n            yield ('stdout_logs', stdout_logs)\n        if stderr_logs:\n            yield ('stderr_logs', stderr_logs)\n    except Exception as e:\n        yield ('error', str(e))",
                "try:\n    (response, stdout_logs, stderr_logs) = self.execute_code(input_data.code, input_data.language, input_data.setup_commands, input_data.timeout, credentials.api_key.get_secret_value(), input_data.template_id)\n    if response:\n        yield ('response', response)\n    if stdout_logs:\n        yield ('stdout_logs', stdout_logs)\n    if stderr_logs:\n        yield ('stderr_logs', stderr_logs)\nexcept Exception as e:\n    yield ('error', str(e))",
                "(response, stdout_logs, stderr_logs) = self.execute_code(input_data.code, input_data.language, input_data.setup_commands, input_data.timeout, credentials.api_key.get_secret_value(), input_data.template_id)",
                "response"
            ]
        },
        {
            "id": "15",
            "type": "block",
            "statements": [
                "(yield ('response', response))"
            ]
        },
        {
            "id": "16",
            "type": "block",
            "statements": []
        },
        {
            "id": "17",
            "type": "block",
            "statements": [
                "stdout_logs"
            ]
        },
        {
            "id": "18",
            "type": "block",
            "statements": [
                "(yield ('stdout_logs', stdout_logs))"
            ]
        },
        {
            "id": "19",
            "type": "block",
            "statements": []
        },
        {
            "id": "20",
            "type": "block",
            "statements": [
                "stderr_logs"
            ]
        },
        {
            "id": "21",
            "type": "block",
            "statements": [
                "(yield ('stderr_logs', stderr_logs))"
            ]
        },
        {
            "id": "22",
            "type": "block",
            "statements": []
        },
        {
            "id": "23",
            "type": "block",
            "statements": [
                "(yield ('error', str(e)))"
            ]
        }
    ],
    "edges": [
        {
            "source": "1",
            "target": "2",
            "type": "true"
        },
        {
            "source": "1",
            "target": "3",
            "type": "false"
        },
        {
            "source": "2",
            "target": "4",
            "type": "next"
        },
        {
            "source": "3",
            "target": "4",
            "type": "next"
        },
        {
            "source": "4",
            "target": "5",
            "type": "true"
        },
        {
            "source": "4",
            "target": "6",
            "type": "false"
        },
        {
            "source": "5",
            "target": "7",
            "type": "next"
        },
        {
            "source": "6",
            "target": "7",
            "type": "next"
        },
        {
            "source": "7",
            "target": "8",
            "type": "next"
        },
        {
            "source": "8",
            "target": "9",
            "type": "true"
        },
        {
            "source": "8",
            "target": "10",
            "type": "false"
        },
        {
            "source": "9",
            "target": "8",
            "type": "next"
        },
        {
            "source": "10",
            "target": "11",
            "type": "true"
        },
        {
            "source": "10",
            "target": "12",
            "type": "false"
        },
        {
            "source": "11",
            "target": "13",
            "type": "next"
        },
        {
            "source": "12",
            "target": "13",
            "type": "next"
        },
        {
            "source": "14",
            "target": "15",
            "type": "true"
        },
        {
            "source": "14",
            "target": "16",
            "type": "false"
        },
        {
            "source": "15",
            "target": "17",
            "type": "next"
        },
        {
            "source": "16",
            "target": "17",
            "type": "next"
        },
        {
            "source": "17",
            "target": "18",
            "type": "true"
        },
        {
            "source": "17",
            "target": "19",
            "type": "false"
        },
        {
            "source": "18",
            "target": "20",
            "type": "next"
        },
        {
            "source": "19",
            "target": "20",
            "type": "next"
        },
        {
            "source": "20",
            "target": "21",
            "type": "true"
        },
        {
            "source": "20",
            "target": "22",
            "type": "false"
        },
        {
            "source": "21",
            "target": "23",
            "type": "next"
        },
        {
            "source": "22",
            "target": "23",
            "type": "next"
        }
    ]
}