{
    "nodes": [
        {
            "id": "1",
            "type": "block",
            "statements": [
                "import logging",
                "import requests",
                "from fastapi import Request",
                "from backend.data import integrations",
                "from backend.data.model import APIKeyCredentials, Credentials",
                "from backend.integrations.providers import ProviderName",
                "from backend.integrations.webhooks._base import BaseWebhooksManager",
                "logger = logging.getLogger(__name__)",
                "class Slant3DWebhooksManager(BaseWebhooksManager):\n    \"\"\"Manager for Slant3D webhooks\"\"\"\n    PROVIDER_NAME = ProviderName.SLANT3D\n    BASE_URL = 'https://www.slant3dapi.com/api'\n\n    async def _register_webhook(self, credentials: Credentials, webhook_type: str, resource: str, events: list[str], ingress_url: str, secret: str) -> tuple[str, dict]:\n        \"\"\"Register a new webhook with Slant3D\"\"\"\n        if not isinstance(credentials, APIKeyCredentials):\n            raise ValueError('API key is required to register a webhook')\n        headers = {'api-key': credentials.api_key.get_secret_value(), 'Content-Type': 'application/json'}\n        payload = {'endPoint': ingress_url}\n        response = requests.post(f'{self.BASE_URL}/customer/webhookSubscribe', headers=headers, json=payload)\n        if not response.ok:\n            error = response.json().get('error', 'Unknown error')\n            raise RuntimeError(f'Failed to register webhook: {error}')\n        webhook_config = {'endpoint': ingress_url, 'provider': self.PROVIDER_NAME, 'events': ['order.shipped'], 'type': webhook_type}\n        return ('', webhook_config)\n\n    @classmethod\n    async def validate_payload(cls, webhook: integrations.Webhook, request: Request) -> tuple[dict, str]:\n        \"\"\"Validate incoming webhook payload from Slant3D\"\"\"\n        payload = await request.json()\n        required_fields = ['orderId', 'status', 'trackingNumber', 'carrierCode']\n        missing_fields = [field for field in required_fields if field not in payload]\n        if missing_fields:\n            raise ValueError(f\"Missing required fields: {', '.join(missing_fields)}\")\n        normalized_payload = {'orderId': payload['orderId'], 'status': payload['status'], 'trackingNumber': payload['trackingNumber'], 'carrierCode': payload['carrierCode']}\n        event_type = f\"order.{payload['status'].lower()}\"\n        return (normalized_payload, event_type)\n\n    async def _deregister_webhook(self, webhook: integrations.Webhook, credentials: Credentials) -> None:\n        \"\"\"\n        Note: Slant3D API currently doesn't provide a deregistration endpoint.\n        This would need to be handled through support.\n        \"\"\"\n        logger.warning(f'Warning: Manual deregistration required for webhook {webhook.id}')\n        pass",
                "'Manager for Slant3D webhooks'",
                "PROVIDER_NAME = ProviderName.SLANT3D",
                "BASE_URL = 'https://www.slant3dapi.com/api'",
                "async def _register_webhook(self, credentials: Credentials, webhook_type: str, resource: str, events: list[str], ingress_url: str, secret: str) -> tuple[str, dict]:\n    \"\"\"Register a new webhook with Slant3D\"\"\"\n    if not isinstance(credentials, APIKeyCredentials):\n        raise ValueError('API key is required to register a webhook')\n    headers = {'api-key': credentials.api_key.get_secret_value(), 'Content-Type': 'application/json'}\n    payload = {'endPoint': ingress_url}\n    response = requests.post(f'{self.BASE_URL}/customer/webhookSubscribe', headers=headers, json=payload)\n    if not response.ok:\n        error = response.json().get('error', 'Unknown error')\n        raise RuntimeError(f'Failed to register webhook: {error}')\n    webhook_config = {'endpoint': ingress_url, 'provider': self.PROVIDER_NAME, 'events': ['order.shipped'], 'type': webhook_type}\n    return ('', webhook_config)",
                "'Register a new webhook with Slant3D'",
                "not isinstance(credentials, APIKeyCredentials)"
            ]
        },
        {
            "id": "2",
            "type": "block",
            "statements": [
                "raise ValueError('API key is required to register a webhook')"
            ]
        },
        {
            "id": "3",
            "type": "block",
            "statements": []
        },
        {
            "id": "4",
            "type": "block",
            "statements": [
                "headers = {'api-key': credentials.api_key.get_secret_value(), 'Content-Type': 'application/json'}",
                "payload = {'endPoint': ingress_url}",
                "response = requests.post(f'{self.BASE_URL}/customer/webhookSubscribe', headers=headers, json=payload)",
                "not response.ok"
            ]
        },
        {
            "id": "5",
            "type": "block",
            "statements": [
                "error = response.json().get('error', 'Unknown error')",
                "raise RuntimeError(f'Failed to register webhook: {error}')"
            ]
        },
        {
            "id": "6",
            "type": "block",
            "statements": []
        },
        {
            "id": "7",
            "type": "block",
            "statements": [
                "webhook_config = {'endpoint': ingress_url, 'provider': self.PROVIDER_NAME, 'events': ['order.shipped'], 'type': webhook_type}",
                "return ('', webhook_config)"
            ]
        },
        {
            "id": "8",
            "type": "block",
            "statements": [
                "@classmethod\nasync def validate_payload(cls, webhook: integrations.Webhook, request: Request) -> tuple[dict, str]:\n    \"\"\"Validate incoming webhook payload from Slant3D\"\"\"\n    payload = await request.json()\n    required_fields = ['orderId', 'status', 'trackingNumber', 'carrierCode']\n    missing_fields = [field for field in required_fields if field not in payload]\n    if missing_fields:\n        raise ValueError(f\"Missing required fields: {', '.join(missing_fields)}\")\n    normalized_payload = {'orderId': payload['orderId'], 'status': payload['status'], 'trackingNumber': payload['trackingNumber'], 'carrierCode': payload['carrierCode']}\n    event_type = f\"order.{payload['status'].lower()}\"\n    return (normalized_payload, event_type)",
                "'Validate incoming webhook payload from Slant3D'",
                "payload = await request.json()",
                "required_fields = ['orderId', 'status', 'trackingNumber', 'carrierCode']",
                "missing_fields = [field for field in required_fields if field not in payload]",
                "missing_fields"
            ]
        },
        {
            "id": "9",
            "type": "block",
            "statements": [
                "raise ValueError(f\"Missing required fields: {', '.join(missing_fields)}\")"
            ]
        },
        {
            "id": "10",
            "type": "block",
            "statements": []
        },
        {
            "id": "11",
            "type": "block",
            "statements": [
                "normalized_payload = {'orderId': payload['orderId'], 'status': payload['status'], 'trackingNumber': payload['trackingNumber'], 'carrierCode': payload['carrierCode']}",
                "event_type = f\"order.{payload['status'].lower()}\"",
                "return (normalized_payload, event_type)"
            ]
        },
        {
            "id": "12",
            "type": "block",
            "statements": [
                "async def _deregister_webhook(self, webhook: integrations.Webhook, credentials: Credentials) -> None:\n    \"\"\"\n        Note: Slant3D API currently doesn't provide a deregistration endpoint.\n        This would need to be handled through support.\n        \"\"\"\n    logger.warning(f'Warning: Manual deregistration required for webhook {webhook.id}')\n    pass",
                "\"\\n        Note: Slant3D API currently doesn't provide a deregistration endpoint.\\n        This would need to be handled through support.\\n        \"",
                "logger.warning(f'Warning: Manual deregistration required for webhook {webhook.id}')",
                "pass"
            ]
        }
    ],
    "edges": [
        {
            "source": "1",
            "target": "2",
            "type": "true"
        },
        {
            "source": "1",
            "target": "3",
            "type": "false"
        },
        {
            "source": "2",
            "target": "4",
            "type": "next"
        },
        {
            "source": "3",
            "target": "4",
            "type": "next"
        },
        {
            "source": "4",
            "target": "5",
            "type": "true"
        },
        {
            "source": "4",
            "target": "6",
            "type": "false"
        },
        {
            "source": "5",
            "target": "7",
            "type": "next"
        },
        {
            "source": "6",
            "target": "7",
            "type": "next"
        },
        {
            "source": "8",
            "target": "9",
            "type": "true"
        },
        {
            "source": "8",
            "target": "10",
            "type": "false"
        },
        {
            "source": "9",
            "target": "11",
            "type": "next"
        },
        {
            "source": "10",
            "target": "11",
            "type": "next"
        }
    ]
}