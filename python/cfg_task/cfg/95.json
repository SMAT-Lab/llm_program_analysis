{
    "nodes": [
        {
            "id": "1",
            "type": "block",
            "statements": [
                "from typing import Any",
                "from uuid import UUID",
                "import pytest",
                "from backend.blocks.basic import AgentInputBlock, AgentOutputBlock, StoreValueBlock",
                "from backend.data.block import BlockSchema",
                "from backend.data.graph import Graph, Link, Node",
                "from backend.data.model import SchemaField",
                "from backend.data.user import DEFAULT_USER_ID",
                "from backend.server.model import CreateGraph",
                "from backend.util.test import SpinTestServer",
                "@pytest.mark.asyncio(scope='session')\nasync def test_graph_creation(server: SpinTestServer):\n    \"\"\"\n    Test the creation of a graph with nodes and links.\n\n    This test ensures that:\n    1. A graph can be successfully created with valid connections.\n    2. The created graph has the correct structure and properties.\n\n    Args:\n        server (SpinTestServer): The test server instance.\n    \"\"\"\n    value_block = StoreValueBlock().id\n    input_block = AgentInputBlock().id\n    graph = Graph(id='test_graph', name='TestGraph', description='Test graph', nodes=[Node(id='node_1', block_id=value_block), Node(id='node_2', block_id=input_block, input_default={'name': 'input'}), Node(id='node_3', block_id=value_block)], links=[Link(source_id='node_1', sink_id='node_2', source_name='output', sink_name='name')])\n    create_graph = CreateGraph(graph=graph)\n    created_graph = await server.agent_server.test_create_graph(create_graph, DEFAULT_USER_ID)\n    assert UUID(created_graph.id)\n    assert created_graph.name == 'TestGraph'\n    assert len(created_graph.nodes) == 3\n    assert UUID(created_graph.nodes[0].id)\n    assert UUID(created_graph.nodes[1].id)\n    assert UUID(created_graph.nodes[2].id)\n    nodes = created_graph.nodes\n    links = created_graph.links\n    assert len(links) == 1\n    assert links[0].source_id != links[0].sink_id\n    assert links[0].source_id in {nodes[0].id, nodes[1].id, nodes[2].id}\n    assert links[0].sink_id in {nodes[0].id, nodes[1].id, nodes[2].id}",
                "'\\n    Test the creation of a graph with nodes and links.\\n\\n    This test ensures that:\\n    1. A graph can be successfully created with valid connections.\\n    2. The created graph has the correct structure and properties.\\n\\n    Args:\\n        server (SpinTestServer): The test server instance.\\n    '",
                "value_block = StoreValueBlock().id",
                "input_block = AgentInputBlock().id",
                "graph = Graph(id='test_graph', name='TestGraph', description='Test graph', nodes=[Node(id='node_1', block_id=value_block), Node(id='node_2', block_id=input_block, input_default={'name': 'input'}), Node(id='node_3', block_id=value_block)], links=[Link(source_id='node_1', sink_id='node_2', source_name='output', sink_name='name')])",
                "create_graph = CreateGraph(graph=graph)",
                "created_graph = await server.agent_server.test_create_graph(create_graph, DEFAULT_USER_ID)",
                "assert UUID(created_graph.id)",
                "assert created_graph.name == 'TestGraph'",
                "assert len(created_graph.nodes) == 3",
                "assert UUID(created_graph.nodes[0].id)",
                "assert UUID(created_graph.nodes[1].id)",
                "assert UUID(created_graph.nodes[2].id)",
                "nodes = created_graph.nodes",
                "links = created_graph.links",
                "assert len(links) == 1",
                "assert links[0].source_id != links[0].sink_id",
                "assert links[0].source_id in {nodes[0].id, nodes[1].id, nodes[2].id}",
                "assert links[0].sink_id in {nodes[0].id, nodes[1].id, nodes[2].id}",
                "@pytest.mark.asyncio(scope='session')\nasync def test_get_input_schema(server: SpinTestServer):\n    \"\"\"\n    Test the get_input_schema method of a created graph.\n\n    This test ensures that:\n    1. A graph can be created with a single node.\n    2. The input schema of the created graph is correctly generated.\n    3. The input schema contains the expected input name and node id.\n\n    Args:\n        server (SpinTestServer): The test server instance.\n    \"\"\"\n    value_block = StoreValueBlock().id\n    input_block = AgentInputBlock().id\n    output_block = AgentOutputBlock().id\n    graph = Graph(name='TestInputSchema', description='Test input schema', nodes=[Node(id='node_0_a', block_id=input_block, input_default={'name': 'in_key_a', 'title': 'Key A', 'value': 'A'}, metadata={'id': 'node_0_a'}), Node(id='node_0_b', block_id=input_block, input_default={'name': 'in_key_b', 'advanced': True}, metadata={'id': 'node_0_b'}), Node(id='node_1', block_id=value_block, metadata={'id': 'node_1'}), Node(id='node_2', block_id=output_block, input_default={'name': 'out_key', 'description': 'This is an output key'}, metadata={'id': 'node_2'})], links=[Link(source_id='node_0_a', sink_id='node_1', source_name='result', sink_name='input'), Link(source_id='node_0_b', sink_id='node_1', source_name='result', sink_name='input'), Link(source_id='node_1', sink_id='node_2', source_name='output', sink_name='value')])\n    create_graph = CreateGraph(graph=graph)\n    created_graph = await server.agent_server.test_create_graph(create_graph, DEFAULT_USER_ID)\n\n    class ExpectedInputSchema(BlockSchema):\n        in_key_a: Any = SchemaField(title='Key A', default='A', advanced=False)\n        in_key_b: Any = SchemaField(title='in_key_b', advanced=True)\n\n    class ExpectedOutputSchema(BlockSchema):\n        out_key: Any = SchemaField(description='This is an output key', title='out_key', advanced=False)\n    input_schema = created_graph.input_schema\n    input_schema['title'] = 'ExpectedInputSchema'\n    assert input_schema == ExpectedInputSchema.jsonschema()\n    output_schema = created_graph.output_schema\n    output_schema['title'] = 'ExpectedOutputSchema'\n    assert output_schema == ExpectedOutputSchema.jsonschema()",
                "'\\n    Test the get_input_schema method of a created graph.\\n\\n    This test ensures that:\\n    1. A graph can be created with a single node.\\n    2. The input schema of the created graph is correctly generated.\\n    3. The input schema contains the expected input name and node id.\\n\\n    Args:\\n        server (SpinTestServer): The test server instance.\\n    '",
                "value_block = StoreValueBlock().id",
                "input_block = AgentInputBlock().id",
                "output_block = AgentOutputBlock().id",
                "graph = Graph(name='TestInputSchema', description='Test input schema', nodes=[Node(id='node_0_a', block_id=input_block, input_default={'name': 'in_key_a', 'title': 'Key A', 'value': 'A'}, metadata={'id': 'node_0_a'}), Node(id='node_0_b', block_id=input_block, input_default={'name': 'in_key_b', 'advanced': True}, metadata={'id': 'node_0_b'}), Node(id='node_1', block_id=value_block, metadata={'id': 'node_1'}), Node(id='node_2', block_id=output_block, input_default={'name': 'out_key', 'description': 'This is an output key'}, metadata={'id': 'node_2'})], links=[Link(source_id='node_0_a', sink_id='node_1', source_name='result', sink_name='input'), Link(source_id='node_0_b', sink_id='node_1', source_name='result', sink_name='input'), Link(source_id='node_1', sink_id='node_2', source_name='output', sink_name='value')])",
                "create_graph = CreateGraph(graph=graph)",
                "created_graph = await server.agent_server.test_create_graph(create_graph, DEFAULT_USER_ID)",
                "class ExpectedInputSchema(BlockSchema):\n    in_key_a: Any = SchemaField(title='Key A', default='A', advanced=False)\n    in_key_b: Any = SchemaField(title='in_key_b', advanced=True)",
                "in_key_a: Any = SchemaField(title='Key A', default='A', advanced=False)",
                "in_key_b: Any = SchemaField(title='in_key_b', advanced=True)",
                "class ExpectedOutputSchema(BlockSchema):\n    out_key: Any = SchemaField(description='This is an output key', title='out_key', advanced=False)",
                "out_key: Any = SchemaField(description='This is an output key', title='out_key', advanced=False)",
                "input_schema = created_graph.input_schema",
                "input_schema['title'] = 'ExpectedInputSchema'",
                "assert input_schema == ExpectedInputSchema.jsonschema()",
                "output_schema = created_graph.output_schema",
                "output_schema['title'] = 'ExpectedOutputSchema'",
                "assert output_schema == ExpectedOutputSchema.jsonschema()"
            ]
        }
    ],
    "edges": []
}