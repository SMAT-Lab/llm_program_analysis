{
    "nodes": [
        {
            "id": "1",
            "type": "block",
            "statements": [
                "class Item(object):\n\n    def __init__(self, key, value):\n        self.key = key\n        self.value = value",
                "def __init__(self, key, value):\n    self.key = key\n    self.value = value",
                "self.key = key",
                "self.value = value",
                "class HashTable(object):\n\n    def __init__(self, size):\n        self.size = size\n        self.table = [[] for _ in range(self.size)]\n\n    def _hash_function(self, key):\n        return key % self.size\n\n    def set(self, key, value):\n        hash_index = self._hash_function(key)\n        for item in self.table[hash_index]:\n            if item.key == key:\n                item.value = value\n                return\n        self.table[hash_index].append(Item(key, value))\n\n    def get(self, key):\n        hash_index = self._hash_function(key)\n        for item in self.table[hash_index]:\n            if item.key == key:\n                return item.value\n        raise KeyError('Key not found')\n\n    def remove(self, key):\n        hash_index = self._hash_function(key)\n        for (index, item) in enumerate(self.table[hash_index]):\n            if item.key == key:\n                del self.table[hash_index][index]\n                return\n        raise KeyError('Key not found')",
                "def __init__(self, size):\n    self.size = size\n    self.table = [[] for _ in range(self.size)]",
                "self.size = size",
                "self.table = [[] for _ in range(self.size)]",
                "def _hash_function(self, key):\n    return key % self.size",
                "return key % self.size"
            ]
        },
        {
            "id": "2",
            "type": "block",
            "statements": [
                "def set(self, key, value):\n    hash_index = self._hash_function(key)\n    for item in self.table[hash_index]:\n        if item.key == key:\n            item.value = value\n            return\n    self.table[hash_index].append(Item(key, value))",
                "hash_index = self._hash_function(key)"
            ]
        },
        {
            "id": "3",
            "type": "block",
            "statements": [
                "item",
                "self.table[hash_index]"
            ]
        },
        {
            "id": "4",
            "type": "block",
            "statements": [
                "item.key Eq key"
            ]
        },
        {
            "id": "5",
            "type": "block",
            "statements": [
                "self.table[hash_index].append(Item(key, value))",
                "def get(self, key):\n    hash_index = self._hash_function(key)\n    for item in self.table[hash_index]:\n        if item.key == key:\n            return item.value\n    raise KeyError('Key not found')",
                "hash_index = self._hash_function(key)"
            ]
        },
        {
            "id": "6",
            "type": "block",
            "statements": [
                "item.value = value",
                "return"
            ]
        },
        {
            "id": "7",
            "type": "block",
            "statements": []
        },
        {
            "id": "8",
            "type": "block",
            "statements": []
        },
        {
            "id": "9",
            "type": "block",
            "statements": [
                "item",
                "self.table[hash_index]"
            ]
        },
        {
            "id": "10",
            "type": "block",
            "statements": [
                "item.key Eq key"
            ]
        },
        {
            "id": "11",
            "type": "block",
            "statements": [
                "raise KeyError('Key not found')",
                "def remove(self, key):\n    hash_index = self._hash_function(key)\n    for (index, item) in enumerate(self.table[hash_index]):\n        if item.key == key:\n            del self.table[hash_index][index]\n            return\n    raise KeyError('Key not found')",
                "hash_index = self._hash_function(key)"
            ]
        },
        {
            "id": "12",
            "type": "block",
            "statements": [
                "return item.value"
            ]
        },
        {
            "id": "13",
            "type": "block",
            "statements": []
        },
        {
            "id": "14",
            "type": "block",
            "statements": []
        },
        {
            "id": "15",
            "type": "block",
            "statements": [
                "(index, item)",
                "enumerate(self.table[hash_index])"
            ]
        },
        {
            "id": "16",
            "type": "block",
            "statements": [
                "item.key Eq key"
            ]
        },
        {
            "id": "17",
            "type": "block",
            "statements": [
                "raise KeyError('Key not found')"
            ]
        },
        {
            "id": "18",
            "type": "block",
            "statements": [
                "del self.table[hash_index][index]",
                "return"
            ]
        },
        {
            "id": "19",
            "type": "block",
            "statements": []
        },
        {
            "id": "20",
            "type": "block",
            "statements": []
        }
    ],
    "edges": [
        {
            "source": "2",
            "target": "3",
            "type": "next"
        },
        {
            "source": "3",
            "target": "4",
            "type": "true"
        },
        {
            "source": "3",
            "target": "5",
            "type": "false"
        },
        {
            "source": "4",
            "target": "6",
            "type": "true"
        },
        {
            "source": "4",
            "target": "7",
            "type": "false"
        },
        {
            "source": "5",
            "target": "9",
            "type": "next"
        },
        {
            "source": "7",
            "target": "8",
            "type": "next"
        },
        {
            "source": "8",
            "target": "3",
            "type": "next"
        },
        {
            "source": "9",
            "target": "10",
            "type": "true"
        },
        {
            "source": "9",
            "target": "11",
            "type": "false"
        },
        {
            "source": "10",
            "target": "12",
            "type": "true"
        },
        {
            "source": "10",
            "target": "13",
            "type": "false"
        },
        {
            "source": "11",
            "target": "15",
            "type": "next"
        },
        {
            "source": "13",
            "target": "14",
            "type": "next"
        },
        {
            "source": "14",
            "target": "9",
            "type": "next"
        },
        {
            "source": "15",
            "target": "16",
            "type": "true"
        },
        {
            "source": "15",
            "target": "17",
            "type": "false"
        },
        {
            "source": "16",
            "target": "18",
            "type": "true"
        },
        {
            "source": "16",
            "target": "19",
            "type": "false"
        },
        {
            "source": "19",
            "target": "20",
            "type": "next"
        },
        {
            "source": "20",
            "target": "15",
            "type": "next"
        }
    ]
}