{
    "nodes": [
        {
            "id": "1",
            "type": "block",
            "statements": [
                "def twos_complement(number: int) -> str:\n    \"\"\"\n    Take in a negative integer 'number'.\n    Return the two's complement representation of 'number'.\n\n    >>> twos_complement(0)\n    '0b0'\n    >>> twos_complement(-1)\n    '0b11'\n    >>> twos_complement(-5)\n    '0b1011'\n    >>> twos_complement(-17)\n    '0b101111'\n    >>> twos_complement(-207)\n    '0b100110001'\n    >>> twos_complement(1)\n    Traceback (most recent call last):\n        ...\n    ValueError: input must be a negative integer\n    \"\"\"\n    if number > 0:\n        raise ValueError('input must be a negative integer')\n    binary_number_length = len(bin(number)[3:])\n    twos_complement_number = bin(abs(number) - (1 << binary_number_length))[3:]\n    twos_complement_number = '1' + '0' * (binary_number_length - len(twos_complement_number)) + twos_complement_number if number < 0 else '0'\n    return '0b' + twos_complement_number",
                "\"\\n    Take in a negative integer 'number'.\\n    Return the two's complement representation of 'number'.\\n\\n    >>> twos_complement(0)\\n    '0b0'\\n    >>> twos_complement(-1)\\n    '0b11'\\n    >>> twos_complement(-5)\\n    '0b1011'\\n    >>> twos_complement(-17)\\n    '0b101111'\\n    >>> twos_complement(-207)\\n    '0b100110001'\\n    >>> twos_complement(1)\\n    Traceback (most recent call last):\\n        ...\\n    ValueError: input must be a negative integer\\n    \"",
                "number Gt 0"
            ]
        },
        {
            "id": "2",
            "type": "block",
            "statements": [
                "raise ValueError('input must be a negative integer')"
            ]
        },
        {
            "id": "3",
            "type": "block",
            "statements": []
        },
        {
            "id": "4",
            "type": "block",
            "statements": [
                "binary_number_length = len(bin(number)[3:])",
                "twos_complement_number = bin(abs(number) - (1 << binary_number_length))[3:]",
                "twos_complement_number = '1' + '0' * (binary_number_length - len(twos_complement_number)) + twos_complement_number if number < 0 else '0'",
                "return '0b' + twos_complement_number"
            ]
        },
        {
            "id": "5",
            "type": "block",
            "statements": [
                "__name__ Eq '__main__'"
            ]
        },
        {
            "id": "6",
            "type": "block",
            "statements": [
                "import doctest",
                "doctest.testmod()"
            ]
        },
        {
            "id": "7",
            "type": "block",
            "statements": []
        },
        {
            "id": "8",
            "type": "block",
            "statements": []
        }
    ],
    "edges": [
        {
            "source": "1",
            "target": "2",
            "type": "true"
        },
        {
            "source": "1",
            "target": "3",
            "type": "false"
        },
        {
            "source": "2",
            "target": "4",
            "type": "next"
        },
        {
            "source": "3",
            "target": "4",
            "type": "next"
        },
        {
            "source": "5",
            "target": "6",
            "type": "true"
        },
        {
            "source": "5",
            "target": "7",
            "type": "false"
        },
        {
            "source": "6",
            "target": "8",
            "type": "next"
        },
        {
            "source": "7",
            "target": "8",
            "type": "next"
        }
    ]
}