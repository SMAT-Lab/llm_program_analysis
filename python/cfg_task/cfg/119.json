{
    "nodes": [
        {
            "id": "1",
            "type": "block",
            "statements": [
                "from timeit import timeit",
                "def get_set_bits_count_using_brian_kernighans_algorithm(number: int) -> int:\n    \"\"\"\n    Count the number of set bits in a 32 bit integer\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(25)\n    3\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(37)\n    3\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(21)\n    3\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(58)\n    4\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(0)\n    0\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(256)\n    1\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: the value of input must not be negative\n    \"\"\"\n    if number < 0:\n        raise ValueError('the value of input must not be negative')\n    result = 0\n    while number:\n        number &= number - 1\n        result += 1\n    return result",
                "'\\n    Count the number of set bits in a 32 bit integer\\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(25)\\n    3\\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(37)\\n    3\\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(21)\\n    3\\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(58)\\n    4\\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(0)\\n    0\\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(256)\\n    1\\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(-1)\\n    Traceback (most recent call last):\\n        ...\\n    ValueError: the value of input must not be negative\\n    '",
                "number Lt 0"
            ]
        },
        {
            "id": "2",
            "type": "block",
            "statements": [
                "raise ValueError('the value of input must not be negative')"
            ]
        },
        {
            "id": "3",
            "type": "block",
            "statements": []
        },
        {
            "id": "4",
            "type": "block",
            "statements": [
                "result = 0"
            ]
        },
        {
            "id": "5",
            "type": "block",
            "statements": [
                "number"
            ]
        },
        {
            "id": "6",
            "type": "block",
            "statements": [
                "number &= number - 1",
                "result += 1"
            ]
        },
        {
            "id": "7",
            "type": "block",
            "statements": [
                "return result"
            ]
        },
        {
            "id": "8",
            "type": "block",
            "statements": [
                "def get_set_bits_count_using_modulo_operator(number: int) -> int:\n    \"\"\"\n    Count the number of set bits in a 32 bit integer\n    >>> get_set_bits_count_using_modulo_operator(25)\n    3\n    >>> get_set_bits_count_using_modulo_operator(37)\n    3\n    >>> get_set_bits_count_using_modulo_operator(21)\n    3\n    >>> get_set_bits_count_using_modulo_operator(58)\n    4\n    >>> get_set_bits_count_using_modulo_operator(0)\n    0\n    >>> get_set_bits_count_using_modulo_operator(256)\n    1\n    >>> get_set_bits_count_using_modulo_operator(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: the value of input must not be negative\n    \"\"\"\n    if number < 0:\n        raise ValueError('the value of input must not be negative')\n    result = 0\n    while number:\n        if number % 2 == 1:\n            result += 1\n        number >>= 1\n    return result",
                "'\\n    Count the number of set bits in a 32 bit integer\\n    >>> get_set_bits_count_using_modulo_operator(25)\\n    3\\n    >>> get_set_bits_count_using_modulo_operator(37)\\n    3\\n    >>> get_set_bits_count_using_modulo_operator(21)\\n    3\\n    >>> get_set_bits_count_using_modulo_operator(58)\\n    4\\n    >>> get_set_bits_count_using_modulo_operator(0)\\n    0\\n    >>> get_set_bits_count_using_modulo_operator(256)\\n    1\\n    >>> get_set_bits_count_using_modulo_operator(-1)\\n    Traceback (most recent call last):\\n        ...\\n    ValueError: the value of input must not be negative\\n    '",
                "number Lt 0"
            ]
        },
        {
            "id": "9",
            "type": "block",
            "statements": [
                "raise ValueError('the value of input must not be negative')"
            ]
        },
        {
            "id": "10",
            "type": "block",
            "statements": []
        },
        {
            "id": "11",
            "type": "block",
            "statements": [
                "result = 0"
            ]
        },
        {
            "id": "12",
            "type": "block",
            "statements": [
                "number"
            ]
        },
        {
            "id": "13",
            "type": "block",
            "statements": [
                "number Mod 2 Eq 1"
            ]
        },
        {
            "id": "14",
            "type": "block",
            "statements": [
                "return result"
            ]
        },
        {
            "id": "15",
            "type": "block",
            "statements": [
                "result += 1"
            ]
        },
        {
            "id": "16",
            "type": "block",
            "statements": []
        },
        {
            "id": "17",
            "type": "block",
            "statements": [
                "number >>= 1"
            ]
        },
        {
            "id": "18",
            "type": "block",
            "statements": [
                "def benchmark() -> None:\n    \"\"\"\n    Benchmark code for comparing 2 functions, with different length int values.\n    Brian Kernighan's algorithm is consistently faster than using modulo_operator.\n    \"\"\"\n\n    def do_benchmark(number: int) -> None:\n        setup = 'import __main__ as z'\n        print(f'Benchmark when number = {number!r}:')\n        print(f'get_set_bits_count_using_modulo_operator(number) = {get_set_bits_count_using_modulo_operator(number)!r}')\n        timing = timeit(f'z.get_set_bits_count_using_modulo_operator({number})', setup=setup)\n        print(f'timeit() runs in {timing} seconds')\n        print(f'get_set_bits_count_using_brian_kernighans_algorithm(number) = {get_set_bits_count_using_brian_kernighans_algorithm(number)!r}')\n        timing = timeit(f'z.get_set_bits_count_using_brian_kernighans_algorithm({number})', setup=setup)\n        print(f'timeit() runs in {timing} seconds')\n    for number in (25, 37, 58, 0):\n        do_benchmark(number)\n        print()",
                "\"\\n    Benchmark code for comparing 2 functions, with different length int values.\\n    Brian Kernighan's algorithm is consistently faster than using modulo_operator.\\n    \"",
                "def do_benchmark(number: int) -> None:\n    setup = 'import __main__ as z'\n    print(f'Benchmark when number = {number!r}:')\n    print(f'get_set_bits_count_using_modulo_operator(number) = {get_set_bits_count_using_modulo_operator(number)!r}')\n    timing = timeit(f'z.get_set_bits_count_using_modulo_operator({number})', setup=setup)\n    print(f'timeit() runs in {timing} seconds')\n    print(f'get_set_bits_count_using_brian_kernighans_algorithm(number) = {get_set_bits_count_using_brian_kernighans_algorithm(number)!r}')\n    timing = timeit(f'z.get_set_bits_count_using_brian_kernighans_algorithm({number})', setup=setup)\n    print(f'timeit() runs in {timing} seconds')",
                "setup = 'import __main__ as z'",
                "print(f'Benchmark when number = {number!r}:')",
                "print(f'get_set_bits_count_using_modulo_operator(number) = {get_set_bits_count_using_modulo_operator(number)!r}')",
                "timing = timeit(f'z.get_set_bits_count_using_modulo_operator({number})', setup=setup)",
                "print(f'timeit() runs in {timing} seconds')",
                "print(f'get_set_bits_count_using_brian_kernighans_algorithm(number) = {get_set_bits_count_using_brian_kernighans_algorithm(number)!r}')",
                "timing = timeit(f'z.get_set_bits_count_using_brian_kernighans_algorithm({number})', setup=setup)",
                "print(f'timeit() runs in {timing} seconds')"
            ]
        },
        {
            "id": "19",
            "type": "block",
            "statements": [
                "number",
                "(25, 37, 58, 0)"
            ]
        },
        {
            "id": "20",
            "type": "block",
            "statements": [
                "do_benchmark(number)",
                "print()"
            ]
        },
        {
            "id": "21",
            "type": "block",
            "statements": [
                "__name__ Eq '__main__'"
            ]
        },
        {
            "id": "22",
            "type": "block",
            "statements": [
                "import doctest",
                "doctest.testmod()",
                "benchmark()"
            ]
        },
        {
            "id": "23",
            "type": "block",
            "statements": []
        },
        {
            "id": "24",
            "type": "block",
            "statements": []
        }
    ],
    "edges": [
        {
            "source": "1",
            "target": "2",
            "type": "true"
        },
        {
            "source": "1",
            "target": "3",
            "type": "false"
        },
        {
            "source": "2",
            "target": "4",
            "type": "next"
        },
        {
            "source": "3",
            "target": "4",
            "type": "next"
        },
        {
            "source": "4",
            "target": "5",
            "type": "next"
        },
        {
            "source": "5",
            "target": "6",
            "type": "true"
        },
        {
            "source": "5",
            "target": "7",
            "type": "false"
        },
        {
            "source": "6",
            "target": "5",
            "type": "next"
        },
        {
            "source": "8",
            "target": "9",
            "type": "true"
        },
        {
            "source": "8",
            "target": "10",
            "type": "false"
        },
        {
            "source": "9",
            "target": "11",
            "type": "next"
        },
        {
            "source": "10",
            "target": "11",
            "type": "next"
        },
        {
            "source": "11",
            "target": "12",
            "type": "next"
        },
        {
            "source": "12",
            "target": "13",
            "type": "true"
        },
        {
            "source": "12",
            "target": "14",
            "type": "false"
        },
        {
            "source": "13",
            "target": "15",
            "type": "true"
        },
        {
            "source": "13",
            "target": "16",
            "type": "false"
        },
        {
            "source": "15",
            "target": "17",
            "type": "next"
        },
        {
            "source": "16",
            "target": "17",
            "type": "next"
        },
        {
            "source": "17",
            "target": "12",
            "type": "next"
        },
        {
            "source": "18",
            "target": "19",
            "type": "next"
        },
        {
            "source": "19",
            "target": "20",
            "type": "true"
        },
        {
            "source": "19",
            "target": "21",
            "type": "false"
        },
        {
            "source": "20",
            "target": "19",
            "type": "next"
        },
        {
            "source": "21",
            "target": "22",
            "type": "true"
        },
        {
            "source": "21",
            "target": "23",
            "type": "false"
        },
        {
            "source": "22",
            "target": "24",
            "type": "next"
        },
        {
            "source": "23",
            "target": "24",
            "type": "next"
        }
    ]
}