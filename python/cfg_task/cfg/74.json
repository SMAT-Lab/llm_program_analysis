{
    "nodes": [
        {
            "id": "1",
            "type": "block",
            "statements": [
                "import logging",
                "from google.auth.external_account_authorized_user import Credentials as ExternalAccountCredentials",
                "from google.auth.transport.requests import AuthorizedSession, Request",
                "from google.oauth2.credentials import Credentials",
                "from google_auth_oauthlib.flow import Flow",
                "from pydantic import SecretStr",
                "from backend.data.model import OAuth2Credentials",
                "from backend.integrations.providers import ProviderName",
                "from .base import BaseOAuthHandler",
                "logger = logging.getLogger(__name__)",
                "class GoogleOAuthHandler(BaseOAuthHandler):\n    \"\"\"\n    Based on the documentation at https://developers.google.com/identity/protocols/oauth2/web-server\n    \"\"\"\n    PROVIDER_NAME = ProviderName.GOOGLE\n    EMAIL_ENDPOINT = 'https://www.googleapis.com/oauth2/v2/userinfo'\n    DEFAULT_SCOPES = ['https://www.googleapis.com/auth/userinfo.email', 'https://www.googleapis.com/auth/userinfo.profile', 'openid']\n\n    def __init__(self, client_id: str, client_secret: str, redirect_uri: str):\n        self.client_id = client_id\n        self.client_secret = client_secret\n        self.redirect_uri = redirect_uri\n        self.token_uri = 'https://oauth2.googleapis.com/token'\n        self.revoke_uri = 'https://oauth2.googleapis.com/revoke'\n\n    def get_login_url(self, scopes: list[str], state: str) -> str:\n        all_scopes = list(set(scopes + self.DEFAULT_SCOPES))\n        logger.debug(f'Setting up OAuth flow with scopes: {all_scopes}')\n        flow = self._setup_oauth_flow(all_scopes)\n        flow.redirect_uri = self.redirect_uri\n        (authorization_url, _) = flow.authorization_url(access_type='offline', include_granted_scopes='true', state=state, prompt='consent')\n        return authorization_url\n\n    def exchange_code_for_tokens(self, code: str, scopes: list[str]) -> OAuth2Credentials:\n        logger.debug(f'Exchanging code for tokens with scopes: {scopes}')\n        flow = self._setup_oauth_flow(scopes)\n        flow.redirect_uri = self.redirect_uri\n        logger.debug('Fetching token from Google')\n        flow.oauth2session.scope = None\n        token = flow.fetch_token(code=code)\n        logger.debug('Token fetched successfully')\n        granted_scopes: list[str] = token.get('scope', [])\n        logger.debug(f'Scopes granted by Google: {granted_scopes}')\n        google_creds = flow.credentials\n        logger.debug(f'Received credentials: {google_creds}')\n        logger.debug('Requesting user email')\n        username = self._request_email(google_creds)\n        logger.debug(f'User email retrieved: {username}')\n        assert google_creds.token\n        assert google_creds.refresh_token\n        assert google_creds.expiry\n        assert granted_scopes\n        credentials = OAuth2Credentials(provider=self.PROVIDER_NAME, title=None, username=username, access_token=SecretStr(google_creds.token), refresh_token=SecretStr(google_creds.refresh_token), access_token_expires_at=int(google_creds.expiry.timestamp()) if google_creds.expiry else None, refresh_token_expires_at=None, scopes=granted_scopes)\n        logger.debug(f'OAuth2Credentials object created successfully with scopes: {credentials.scopes}')\n        return credentials\n\n    def revoke_tokens(self, credentials: OAuth2Credentials) -> bool:\n        session = AuthorizedSession(credentials)\n        session.post(self.revoke_uri, params={'token': credentials.access_token.get_secret_value()}, headers={'content-type': 'application/x-www-form-urlencoded'})\n        return True\n\n    def _request_email(self, creds: Credentials | ExternalAccountCredentials) -> str | None:\n        session = AuthorizedSession(creds)\n        response = session.get(self.EMAIL_ENDPOINT)\n        if not response.ok:\n            logger.error(f'Failed to get user email. Status code: {response.status_code}')\n            return None\n        return response.json()['email']\n\n    def _refresh_tokens(self, credentials: OAuth2Credentials) -> OAuth2Credentials:\n        assert credentials.refresh_token\n        google_creds = Credentials(token=credentials.access_token.get_secret_value(), refresh_token=credentials.refresh_token.get_secret_value(), token_uri=self.token_uri, client_id=self.client_id, client_secret=self.client_secret, scopes=credentials.scopes)\n        assert google_creds.refresh_token\n        assert google_creds.scopes\n        google_creds.refresh(Request())\n        assert google_creds.expiry\n        return OAuth2Credentials(provider=self.PROVIDER_NAME, id=credentials.id, title=credentials.title, username=credentials.username, access_token=SecretStr(google_creds.token), refresh_token=SecretStr(google_creds.refresh_token), access_token_expires_at=int(google_creds.expiry.timestamp()), refresh_token_expires_at=None, scopes=google_creds.scopes)\n\n    def _setup_oauth_flow(self, scopes: list[str]) -> Flow:\n        return Flow.from_client_config({'web': {'client_id': self.client_id, 'client_secret': self.client_secret, 'auth_uri': 'https://accounts.google.com/o/oauth2/auth', 'token_uri': self.token_uri}}, scopes=scopes)",
                "'\\n    Based on the documentation at https://developers.google.com/identity/protocols/oauth2/web-server\\n    '",
                "PROVIDER_NAME = ProviderName.GOOGLE",
                "EMAIL_ENDPOINT = 'https://www.googleapis.com/oauth2/v2/userinfo'",
                "DEFAULT_SCOPES = ['https://www.googleapis.com/auth/userinfo.email', 'https://www.googleapis.com/auth/userinfo.profile', 'openid']",
                "def __init__(self, client_id: str, client_secret: str, redirect_uri: str):\n    self.client_id = client_id\n    self.client_secret = client_secret\n    self.redirect_uri = redirect_uri\n    self.token_uri = 'https://oauth2.googleapis.com/token'\n    self.revoke_uri = 'https://oauth2.googleapis.com/revoke'",
                "self.client_id = client_id",
                "self.client_secret = client_secret",
                "self.redirect_uri = redirect_uri",
                "self.token_uri = 'https://oauth2.googleapis.com/token'",
                "self.revoke_uri = 'https://oauth2.googleapis.com/revoke'",
                "def get_login_url(self, scopes: list[str], state: str) -> str:\n    all_scopes = list(set(scopes + self.DEFAULT_SCOPES))\n    logger.debug(f'Setting up OAuth flow with scopes: {all_scopes}')\n    flow = self._setup_oauth_flow(all_scopes)\n    flow.redirect_uri = self.redirect_uri\n    (authorization_url, _) = flow.authorization_url(access_type='offline', include_granted_scopes='true', state=state, prompt='consent')\n    return authorization_url",
                "all_scopes = list(set(scopes + self.DEFAULT_SCOPES))",
                "logger.debug(f'Setting up OAuth flow with scopes: {all_scopes}')",
                "flow = self._setup_oauth_flow(all_scopes)",
                "flow.redirect_uri = self.redirect_uri",
                "(authorization_url, _) = flow.authorization_url(access_type='offline', include_granted_scopes='true', state=state, prompt='consent')",
                "return authorization_url"
            ]
        },
        {
            "id": "2",
            "type": "block",
            "statements": [
                "def exchange_code_for_tokens(self, code: str, scopes: list[str]) -> OAuth2Credentials:\n    logger.debug(f'Exchanging code for tokens with scopes: {scopes}')\n    flow = self._setup_oauth_flow(scopes)\n    flow.redirect_uri = self.redirect_uri\n    logger.debug('Fetching token from Google')\n    flow.oauth2session.scope = None\n    token = flow.fetch_token(code=code)\n    logger.debug('Token fetched successfully')\n    granted_scopes: list[str] = token.get('scope', [])\n    logger.debug(f'Scopes granted by Google: {granted_scopes}')\n    google_creds = flow.credentials\n    logger.debug(f'Received credentials: {google_creds}')\n    logger.debug('Requesting user email')\n    username = self._request_email(google_creds)\n    logger.debug(f'User email retrieved: {username}')\n    assert google_creds.token\n    assert google_creds.refresh_token\n    assert google_creds.expiry\n    assert granted_scopes\n    credentials = OAuth2Credentials(provider=self.PROVIDER_NAME, title=None, username=username, access_token=SecretStr(google_creds.token), refresh_token=SecretStr(google_creds.refresh_token), access_token_expires_at=int(google_creds.expiry.timestamp()) if google_creds.expiry else None, refresh_token_expires_at=None, scopes=granted_scopes)\n    logger.debug(f'OAuth2Credentials object created successfully with scopes: {credentials.scopes}')\n    return credentials",
                "logger.debug(f'Exchanging code for tokens with scopes: {scopes}')",
                "flow = self._setup_oauth_flow(scopes)",
                "flow.redirect_uri = self.redirect_uri",
                "logger.debug('Fetching token from Google')",
                "flow.oauth2session.scope = None",
                "token = flow.fetch_token(code=code)",
                "logger.debug('Token fetched successfully')",
                "granted_scopes: list[str] = token.get('scope', [])",
                "logger.debug(f'Scopes granted by Google: {granted_scopes}')",
                "google_creds = flow.credentials",
                "logger.debug(f'Received credentials: {google_creds}')",
                "logger.debug('Requesting user email')",
                "username = self._request_email(google_creds)",
                "logger.debug(f'User email retrieved: {username}')",
                "assert google_creds.token",
                "assert google_creds.refresh_token",
                "assert google_creds.expiry",
                "assert granted_scopes",
                "credentials = OAuth2Credentials(provider=self.PROVIDER_NAME, title=None, username=username, access_token=SecretStr(google_creds.token), refresh_token=SecretStr(google_creds.refresh_token), access_token_expires_at=int(google_creds.expiry.timestamp()) if google_creds.expiry else None, refresh_token_expires_at=None, scopes=granted_scopes)",
                "logger.debug(f'OAuth2Credentials object created successfully with scopes: {credentials.scopes}')",
                "return credentials"
            ]
        },
        {
            "id": "3",
            "type": "block",
            "statements": [
                "def revoke_tokens(self, credentials: OAuth2Credentials) -> bool:\n    session = AuthorizedSession(credentials)\n    session.post(self.revoke_uri, params={'token': credentials.access_token.get_secret_value()}, headers={'content-type': 'application/x-www-form-urlencoded'})\n    return True",
                "session = AuthorizedSession(credentials)",
                "session.post(self.revoke_uri)",
                "return True"
            ]
        },
        {
            "id": "4",
            "type": "block",
            "statements": [
                "def _request_email(self, creds: Credentials | ExternalAccountCredentials) -> str | None:\n    session = AuthorizedSession(creds)\n    response = session.get(self.EMAIL_ENDPOINT)\n    if not response.ok:\n        logger.error(f'Failed to get user email. Status code: {response.status_code}')\n        return None\n    return response.json()['email']",
                "session = AuthorizedSession(creds)",
                "response = session.get(self.EMAIL_ENDPOINT)",
                "not response.ok"
            ]
        },
        {
            "id": "5",
            "type": "block",
            "statements": [
                "logger.error(f'Failed to get user email. Status code: {response.status_code}')",
                "return None"
            ]
        },
        {
            "id": "6",
            "type": "block",
            "statements": []
        },
        {
            "id": "7",
            "type": "block",
            "statements": [
                "return response.json()['email']"
            ]
        },
        {
            "id": "8",
            "type": "block",
            "statements": [
                "def _refresh_tokens(self, credentials: OAuth2Credentials) -> OAuth2Credentials:\n    assert credentials.refresh_token\n    google_creds = Credentials(token=credentials.access_token.get_secret_value(), refresh_token=credentials.refresh_token.get_secret_value(), token_uri=self.token_uri, client_id=self.client_id, client_secret=self.client_secret, scopes=credentials.scopes)\n    assert google_creds.refresh_token\n    assert google_creds.scopes\n    google_creds.refresh(Request())\n    assert google_creds.expiry\n    return OAuth2Credentials(provider=self.PROVIDER_NAME, id=credentials.id, title=credentials.title, username=credentials.username, access_token=SecretStr(google_creds.token), refresh_token=SecretStr(google_creds.refresh_token), access_token_expires_at=int(google_creds.expiry.timestamp()), refresh_token_expires_at=None, scopes=google_creds.scopes)",
                "assert credentials.refresh_token",
                "google_creds = Credentials(token=credentials.access_token.get_secret_value(), refresh_token=credentials.refresh_token.get_secret_value(), token_uri=self.token_uri, client_id=self.client_id, client_secret=self.client_secret, scopes=credentials.scopes)",
                "assert google_creds.refresh_token",
                "assert google_creds.scopes",
                "google_creds.refresh(Request())",
                "assert google_creds.expiry",
                "return OAuth2Credentials(provider=self.PROVIDER_NAME, id=credentials.id, title=credentials.title, username=credentials.username, access_token=SecretStr(google_creds.token), refresh_token=SecretStr(google_creds.refresh_token), access_token_expires_at=int(google_creds.expiry.timestamp()), refresh_token_expires_at=None, scopes=google_creds.scopes)"
            ]
        },
        {
            "id": "9",
            "type": "block",
            "statements": [
                "def _setup_oauth_flow(self, scopes: list[str]) -> Flow:\n    return Flow.from_client_config({'web': {'client_id': self.client_id, 'client_secret': self.client_secret, 'auth_uri': 'https://accounts.google.com/o/oauth2/auth', 'token_uri': self.token_uri}}, scopes=scopes)",
                "return Flow.from_client_config({'web': {'client_id': self.client_id, 'client_secret': self.client_secret, 'auth_uri': 'https://accounts.google.com/o/oauth2/auth', 'token_uri': self.token_uri}}, scopes=scopes)"
            ]
        }
    ],
    "edges": [
        {
            "source": "4",
            "target": "5",
            "type": "true"
        },
        {
            "source": "4",
            "target": "6",
            "type": "false"
        },
        {
            "source": "6",
            "target": "7",
            "type": "next"
        }
    ]
}