{
    "nodes": [
        {
            "id": "1",
            "type": "block",
            "statements": [
                "import asyncio",
                "import json",
                "import logging",
                "from abc import ABC, abstractmethod",
                "from datetime import datetime",
                "from typing import Any, AsyncGenerator, Generator, Generic, Optional, TypeVar",
                "from pydantic import BaseModel",
                "from redis.asyncio.client import PubSub as AsyncPubSub",
                "from redis.client import PubSub",
                "from backend.data import redis",
                "logger = logging.getLogger(__name__)",
                "class DateTimeEncoder(json.JSONEncoder):\n\n    def default(self, o):\n        if isinstance(o, datetime):\n            return o.isoformat()\n        return super().default(o)",
                "def default(self, o):\n    if isinstance(o, datetime):\n        return o.isoformat()\n    return super().default(o)",
                "isinstance(o, datetime)"
            ]
        },
        {
            "id": "2",
            "type": "block",
            "statements": [
                "return o.isoformat()"
            ]
        },
        {
            "id": "3",
            "type": "block",
            "statements": []
        },
        {
            "id": "4",
            "type": "block",
            "statements": [
                "return super().default(o)"
            ]
        },
        {
            "id": "5",
            "type": "block",
            "statements": [
                "M = TypeVar('M', bound=BaseModel)",
                "class BaseRedisEventBus(Generic[M], ABC):\n    Model: type[M]\n\n    @property\n    @abstractmethod\n    def event_bus_name(self) -> str:\n        pass\n\n    def _serialize_message(self, item: M, channel_key: str) -> tuple[str, str]:\n        message = json.dumps(item.model_dump(), cls=DateTimeEncoder)\n        channel_name = f'{self.event_bus_name}/{channel_key}'\n        logger.info(f'[{channel_name}] Publishing an event to Redis {message}')\n        return (message, channel_name)\n\n    def _deserialize_message(self, msg: Any, channel_key: str) -> M | None:\n        message_type = 'pmessage' if '*' in channel_key else 'message'\n        if msg['type'] != message_type:\n            return None\n        try:\n            data = json.loads(msg['data'])\n            logger.info(f'Consuming an event from Redis {data}')\n            return self.Model(**data)\n        except Exception as e:\n            logger.error(f'Failed to parse event result from Redis {msg} {e}')\n\n    def _get_pubsub_channel(self, connection: redis.Redis | redis.AsyncRedis, channel_key: str) -> tuple[PubSub | AsyncPubSub, str]:\n        full_channel_name = f'{self.event_bus_name}/{channel_key}'\n        pubsub = connection.pubsub()\n        return (pubsub, full_channel_name)",
                "Model: type[M]",
                "@property\n@abstractmethod\ndef event_bus_name(self) -> str:\n    pass",
                "pass",
                "def _serialize_message(self, item: M, channel_key: str) -> tuple[str, str]:\n    message = json.dumps(item.model_dump(), cls=DateTimeEncoder)\n    channel_name = f'{self.event_bus_name}/{channel_key}'\n    logger.info(f'[{channel_name}] Publishing an event to Redis {message}')\n    return (message, channel_name)",
                "message = json.dumps(item.model_dump(), cls=DateTimeEncoder)",
                "channel_name = f'{self.event_bus_name}/{channel_key}'",
                "logger.info(f'[{channel_name}] Publishing an event to Redis {message}')",
                "return (message, channel_name)"
            ]
        },
        {
            "id": "6",
            "type": "block",
            "statements": [
                "def _deserialize_message(self, msg: Any, channel_key: str) -> M | None:\n    message_type = 'pmessage' if '*' in channel_key else 'message'\n    if msg['type'] != message_type:\n        return None\n    try:\n        data = json.loads(msg['data'])\n        logger.info(f'Consuming an event from Redis {data}')\n        return self.Model(**data)\n    except Exception as e:\n        logger.error(f'Failed to parse event result from Redis {msg} {e}')",
                "message_type = 'pmessage' if '*' in channel_key else 'message'",
                "msg['type'] NotEq message_type"
            ]
        },
        {
            "id": "7",
            "type": "block",
            "statements": [
                "return None"
            ]
        },
        {
            "id": "8",
            "type": "block",
            "statements": []
        },
        {
            "id": "9",
            "type": "block",
            "statements": [
                "try:\n    data = json.loads(msg['data'])\n    logger.info(f'Consuming an event from Redis {data}')\n    return self.Model(**data)\nexcept Exception as e:\n    logger.error(f'Failed to parse event result from Redis {msg} {e}')",
                "data = json.loads(msg['data'])",
                "logger.info(f'Consuming an event from Redis {data}')",
                "return self.Model(**data)"
            ]
        },
        {
            "id": "10",
            "type": "block",
            "statements": [
                "logger.error(f'Failed to parse event result from Redis {msg} {e}')",
                "def _get_pubsub_channel(self, connection: redis.Redis | redis.AsyncRedis, channel_key: str) -> tuple[PubSub | AsyncPubSub, str]:\n    full_channel_name = f'{self.event_bus_name}/{channel_key}'\n    pubsub = connection.pubsub()\n    return (pubsub, full_channel_name)",
                "full_channel_name = f'{self.event_bus_name}/{channel_key}'",
                "pubsub = connection.pubsub()",
                "return (pubsub, full_channel_name)"
            ]
        },
        {
            "id": "11",
            "type": "block",
            "statements": [
                "class RedisEventBus(BaseRedisEventBus[M], ABC):\n    Model: type[M]\n\n    @property\n    def connection(self) -> redis.Redis:\n        return redis.get_redis()\n\n    def publish_event(self, event: M, channel_key: str):\n        (message, full_channel_name) = self._serialize_message(event, channel_key)\n        self.connection.publish(full_channel_name, message)\n\n    def listen_events(self, channel_key: str) -> Generator[M, None, None]:\n        (pubsub, full_channel_name) = self._get_pubsub_channel(self.connection, channel_key)\n        assert isinstance(pubsub, PubSub)\n        if '*' in channel_key:\n            pubsub.psubscribe(full_channel_name)\n        else:\n            pubsub.subscribe(full_channel_name)\n        for message in pubsub.listen():\n            if (event := self._deserialize_message(message, channel_key)):\n                yield event",
                "Model: type[M]",
                "@property\ndef connection(self) -> redis.Redis:\n    return redis.get_redis()",
                "return redis.get_redis()"
            ]
        },
        {
            "id": "12",
            "type": "block",
            "statements": [
                "def publish_event(self, event: M, channel_key: str):\n    (message, full_channel_name) = self._serialize_message(event, channel_key)\n    self.connection.publish(full_channel_name, message)",
                "(message, full_channel_name) = self._serialize_message(event, channel_key)",
                "self.connection.publish(full_channel_name, message)",
                "def listen_events(self, channel_key: str) -> Generator[M, None, None]:\n    (pubsub, full_channel_name) = self._get_pubsub_channel(self.connection, channel_key)\n    assert isinstance(pubsub, PubSub)\n    if '*' in channel_key:\n        pubsub.psubscribe(full_channel_name)\n    else:\n        pubsub.subscribe(full_channel_name)\n    for message in pubsub.listen():\n        if (event := self._deserialize_message(message, channel_key)):\n            yield event",
                "(pubsub, full_channel_name) = self._get_pubsub_channel(self.connection, channel_key)",
                "assert isinstance(pubsub, PubSub)",
                "'*' In channel_key"
            ]
        },
        {
            "id": "13",
            "type": "block",
            "statements": [
                "pubsub.psubscribe(full_channel_name)"
            ]
        },
        {
            "id": "14",
            "type": "block",
            "statements": [
                "pubsub.subscribe(full_channel_name)"
            ]
        },
        {
            "id": "15",
            "type": "block",
            "statements": []
        },
        {
            "id": "16",
            "type": "block",
            "statements": [
                "message",
                "pubsub.listen()"
            ]
        },
        {
            "id": "17",
            "type": "block",
            "statements": [
                "(event := self._deserialize_message(message, channel_key))"
            ]
        },
        {
            "id": "18",
            "type": "block",
            "statements": [
                "class AsyncRedisEventBus(BaseRedisEventBus[M], ABC):\n    Model: type[M]\n\n    @property\n    async def connection(self) -> redis.AsyncRedis:\n        return await redis.get_redis_async()\n\n    async def publish_event(self, event: M, channel_key: str):\n        (message, full_channel_name) = self._serialize_message(event, channel_key)\n        connection = await self.connection\n        await connection.publish(full_channel_name, message)\n\n    async def listen_events(self, channel_key: str) -> AsyncGenerator[M, None]:\n        (pubsub, full_channel_name) = self._get_pubsub_channel(await self.connection, channel_key)\n        assert isinstance(pubsub, AsyncPubSub)\n        if '*' in channel_key:\n            await pubsub.psubscribe(full_channel_name)\n        else:\n            await pubsub.subscribe(full_channel_name)\n        async for message in pubsub.listen():\n            if (event := self._deserialize_message(message, channel_key)):\n                yield event\n\n    async def wait_for_event(self, channel_key: str, timeout: Optional[float]=None) -> M | None:\n        try:\n            return await asyncio.wait_for(anext(aiter(self.listen_events(channel_key))), timeout)\n        except TimeoutError:\n            return None",
                "Model: type[M]",
                "@property\nasync def connection(self) -> redis.AsyncRedis:\n    return await redis.get_redis_async()",
                "return await redis.get_redis_async()"
            ]
        },
        {
            "id": "19",
            "type": "block",
            "statements": [
                "(yield event)"
            ]
        },
        {
            "id": "20",
            "type": "block",
            "statements": []
        },
        {
            "id": "21",
            "type": "block",
            "statements": []
        },
        {
            "id": "22",
            "type": "block",
            "statements": [
                "async def publish_event(self, event: M, channel_key: str):\n    (message, full_channel_name) = self._serialize_message(event, channel_key)\n    connection = await self.connection\n    await connection.publish(full_channel_name, message)",
                "(message, full_channel_name) = self._serialize_message(event, channel_key)",
                "connection = await self.connection",
                "await connection.publish(full_channel_name, message)",
                "async def listen_events(self, channel_key: str) -> AsyncGenerator[M, None]:\n    (pubsub, full_channel_name) = self._get_pubsub_channel(await self.connection, channel_key)\n    assert isinstance(pubsub, AsyncPubSub)\n    if '*' in channel_key:\n        await pubsub.psubscribe(full_channel_name)\n    else:\n        await pubsub.subscribe(full_channel_name)\n    async for message in pubsub.listen():\n        if (event := self._deserialize_message(message, channel_key)):\n            yield event",
                "(pubsub, full_channel_name) = self._get_pubsub_channel(await self.connection, channel_key)",
                "assert isinstance(pubsub, AsyncPubSub)",
                "'*' In channel_key"
            ]
        },
        {
            "id": "23",
            "type": "block",
            "statements": [
                "await pubsub.psubscribe(full_channel_name)"
            ]
        },
        {
            "id": "24",
            "type": "block",
            "statements": [
                "await pubsub.subscribe(full_channel_name)"
            ]
        },
        {
            "id": "25",
            "type": "block",
            "statements": [
                "async for message in pubsub.listen():\n    if (event := self._deserialize_message(message, channel_key)):\n        yield event",
                "(event := self._deserialize_message(message, channel_key))"
            ]
        },
        {
            "id": "26",
            "type": "block",
            "statements": [
                "(yield event)"
            ]
        },
        {
            "id": "27",
            "type": "block",
            "statements": []
        },
        {
            "id": "28",
            "type": "block",
            "statements": [
                "async def wait_for_event(self, channel_key: str, timeout: Optional[float]=None) -> M | None:\n    try:\n        return await asyncio.wait_for(anext(aiter(self.listen_events(channel_key))), timeout)\n    except TimeoutError:\n        return None",
                "try:\n    return await asyncio.wait_for(anext(aiter(self.listen_events(channel_key))), timeout)\nexcept TimeoutError:\n    return None",
                "return await asyncio.wait_for(anext(aiter(self.listen_events(channel_key))), timeout)"
            ]
        },
        {
            "id": "29",
            "type": "block",
            "statements": [
                "return None"
            ]
        }
    ],
    "edges": [
        {
            "source": "1",
            "target": "2",
            "type": "true"
        },
        {
            "source": "1",
            "target": "3",
            "type": "false"
        },
        {
            "source": "3",
            "target": "4",
            "type": "next"
        },
        {
            "source": "6",
            "target": "7",
            "type": "true"
        },
        {
            "source": "6",
            "target": "8",
            "type": "false"
        },
        {
            "source": "8",
            "target": "9",
            "type": "next"
        },
        {
            "source": "12",
            "target": "13",
            "type": "true"
        },
        {
            "source": "12",
            "target": "14",
            "type": "false"
        },
        {
            "source": "13",
            "target": "15",
            "type": "next"
        },
        {
            "source": "14",
            "target": "15",
            "type": "next"
        },
        {
            "source": "15",
            "target": "16",
            "type": "next"
        },
        {
            "source": "16",
            "target": "17",
            "type": "true"
        },
        {
            "source": "16",
            "target": "18",
            "type": "false"
        },
        {
            "source": "17",
            "target": "19",
            "type": "true"
        },
        {
            "source": "17",
            "target": "20",
            "type": "false"
        },
        {
            "source": "19",
            "target": "21",
            "type": "next"
        },
        {
            "source": "20",
            "target": "21",
            "type": "next"
        },
        {
            "source": "21",
            "target": "16",
            "type": "next"
        },
        {
            "source": "22",
            "target": "23",
            "type": "true"
        },
        {
            "source": "22",
            "target": "24",
            "type": "false"
        },
        {
            "source": "23",
            "target": "25",
            "type": "next"
        },
        {
            "source": "24",
            "target": "25",
            "type": "next"
        },
        {
            "source": "25",
            "target": "26",
            "type": "true"
        },
        {
            "source": "25",
            "target": "27",
            "type": "false"
        },
        {
            "source": "26",
            "target": "28",
            "type": "next"
        },
        {
            "source": "27",
            "target": "28",
            "type": "next"
        }
    ]
}