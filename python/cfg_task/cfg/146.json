{
    "nodes": [
        {
            "id": "1",
            "type": "block",
            "statements": [
                "import logging",
                "import typing",
                "import urllib.parse",
                "import autogpt_libs.auth.depends",
                "import autogpt_libs.auth.middleware",
                "import fastapi",
                "import fastapi.responses",
                "import backend.data.graph",
                "import backend.server.v2.store.db",
                "import backend.server.v2.store.image_gen",
                "import backend.server.v2.store.media",
                "import backend.server.v2.store.model",
                "logger = logging.getLogger(__name__)",
                "router = fastapi.APIRouter()",
                "@router.get('/profile', tags=['store', 'private'], response_model=backend.server.v2.store.model.ProfileDetails)\nasync def get_profile(user_id: typing.Annotated[str, fastapi.Depends(autogpt_libs.auth.depends.get_user_id)]):\n    \"\"\"\n    Get the profile details for the authenticated user.\n    \"\"\"\n    try:\n        profile = await backend.server.v2.store.db.get_user_profile(user_id)\n        return profile\n    except Exception:\n        logger.exception('Exception occurred whilst getting user profile')\n        return fastapi.responses.JSONResponse(status_code=500, content={'detail': 'An error occurred while retrieving the user profile'})",
                "'\\n    Get the profile details for the authenticated user.\\n    '",
                "try:\n    profile = await backend.server.v2.store.db.get_user_profile(user_id)\n    return profile\nexcept Exception:\n    logger.exception('Exception occurred whilst getting user profile')\n    return fastapi.responses.JSONResponse(status_code=500, content={'detail': 'An error occurred while retrieving the user profile'})",
                "profile = await backend.server.v2.store.db.get_user_profile(user_id)",
                "return profile"
            ]
        },
        {
            "id": "2",
            "type": "block",
            "statements": [
                "logger.exception('Exception occurred whilst getting user profile')",
                "return fastapi.responses.JSONResponse(status_code=500, content={'detail': 'An error occurred while retrieving the user profile'})"
            ]
        },
        {
            "id": "3",
            "type": "block",
            "statements": [
                "@router.post('/profile', tags=['store', 'private'], dependencies=[fastapi.Depends(autogpt_libs.auth.middleware.auth_middleware)], response_model=backend.server.v2.store.model.CreatorDetails)\nasync def update_or_create_profile(profile: backend.server.v2.store.model.Profile, user_id: typing.Annotated[str, fastapi.Depends(autogpt_libs.auth.depends.get_user_id)]):\n    \"\"\"\n    Update the store profile for the authenticated user.\n\n    Args:\n        profile (Profile): The updated profile details\n        user_id (str): ID of the authenticated user\n\n    Returns:\n        CreatorDetails: The updated profile\n\n    Raises:\n        HTTPException: If there is an error updating the profile\n    \"\"\"\n    try:\n        updated_profile = await backend.server.v2.store.db.update_or_create_profile(user_id=user_id, profile=profile)\n        return updated_profile\n    except Exception:\n        logger.exception('Exception occurred whilst updating profile')\n        return fastapi.responses.JSONResponse(status_code=500, content={'detail': 'An error occurred while updating the user profile'})",
                "'\\n    Update the store profile for the authenticated user.\\n\\n    Args:\\n        profile (Profile): The updated profile details\\n        user_id (str): ID of the authenticated user\\n\\n    Returns:\\n        CreatorDetails: The updated profile\\n\\n    Raises:\\n        HTTPException: If there is an error updating the profile\\n    '",
                "try:\n    updated_profile = await backend.server.v2.store.db.update_or_create_profile(user_id=user_id, profile=profile)\n    return updated_profile\nexcept Exception:\n    logger.exception('Exception occurred whilst updating profile')\n    return fastapi.responses.JSONResponse(status_code=500, content={'detail': 'An error occurred while updating the user profile'})",
                "updated_profile = await backend.server.v2.store.db.update_or_create_profile(user_id=user_id, profile=profile)",
                "return updated_profile"
            ]
        },
        {
            "id": "4",
            "type": "block",
            "statements": [
                "logger.exception('Exception occurred whilst updating profile')",
                "return fastapi.responses.JSONResponse(status_code=500, content={'detail': 'An error occurred while updating the user profile'})"
            ]
        },
        {
            "id": "5",
            "type": "block",
            "statements": [
                "@router.get('/agents', tags=['store', 'public'], response_model=backend.server.v2.store.model.StoreAgentsResponse)\nasync def get_agents(featured: bool=False, creator: str | None=None, sorted_by: str | None=None, search_query: str | None=None, category: str | None=None, page: int=1, page_size: int=20):\n    \"\"\"\n    Get a paginated list of agents from the store with optional filtering and sorting.\n\n    Args:\n        featured (bool, optional): Filter to only show featured agents. Defaults to False.\n        creator (str | None, optional): Filter agents by creator username. Defaults to None.\n        sorted_by (str | None, optional): Sort agents by \"runs\" or \"rating\". Defaults to None.\n        search_query (str | None, optional): Search agents by name, subheading and description. Defaults to None.\n        category (str | None, optional): Filter agents by category. Defaults to None.\n        page (int, optional): Page number for pagination. Defaults to 1.\n        page_size (int, optional): Number of agents per page. Defaults to 20.\n\n    Returns:\n        StoreAgentsResponse: Paginated list of agents matching the filters\n\n    Raises:\n        HTTPException: If page or page_size are less than 1\n\n    Used for:\n    - Home Page Featured Agents\n    - Home Page Top Agents\n    - Search Results\n    - Agent Details - Other Agents By Creator\n    - Agent Details - Similar Agents\n    - Creator Details - Agents By Creator\n    \"\"\"\n    if page < 1:\n        raise fastapi.HTTPException(status_code=422, detail='Page must be greater than 0')\n    if page_size < 1:\n        raise fastapi.HTTPException(status_code=422, detail='Page size must be greater than 0')\n    try:\n        agents = await backend.server.v2.store.db.get_store_agents(featured=featured, creator=creator, sorted_by=sorted_by, search_query=search_query, category=category, page=page, page_size=page_size)\n        return agents\n    except Exception:\n        logger.exception('Exception occured whilst getting store agents')\n        return fastapi.responses.JSONResponse(status_code=500, content={'detail': 'An error occurred while retrieving the store agents'})",
                "'\\n    Get a paginated list of agents from the store with optional filtering and sorting.\\n\\n    Args:\\n        featured (bool, optional): Filter to only show featured agents. Defaults to False.\\n        creator (str | None, optional): Filter agents by creator username. Defaults to None.\\n        sorted_by (str | None, optional): Sort agents by \"runs\" or \"rating\". Defaults to None.\\n        search_query (str | None, optional): Search agents by name, subheading and description. Defaults to None.\\n        category (str | None, optional): Filter agents by category. Defaults to None.\\n        page (int, optional): Page number for pagination. Defaults to 1.\\n        page_size (int, optional): Number of agents per page. Defaults to 20.\\n\\n    Returns:\\n        StoreAgentsResponse: Paginated list of agents matching the filters\\n\\n    Raises:\\n        HTTPException: If page or page_size are less than 1\\n\\n    Used for:\\n    - Home Page Featured Agents\\n    - Home Page Top Agents\\n    - Search Results\\n    - Agent Details - Other Agents By Creator\\n    - Agent Details - Similar Agents\\n    - Creator Details - Agents By Creator\\n    '",
                "page Lt 1"
            ]
        },
        {
            "id": "6",
            "type": "block",
            "statements": [
                "raise fastapi.HTTPException(status_code=422, detail='Page must be greater than 0')"
            ]
        },
        {
            "id": "7",
            "type": "block",
            "statements": []
        },
        {
            "id": "8",
            "type": "block",
            "statements": [
                "page_size Lt 1"
            ]
        },
        {
            "id": "9",
            "type": "block",
            "statements": [
                "raise fastapi.HTTPException(status_code=422, detail='Page size must be greater than 0')"
            ]
        },
        {
            "id": "10",
            "type": "block",
            "statements": []
        },
        {
            "id": "11",
            "type": "block",
            "statements": [
                "try:\n    agents = await backend.server.v2.store.db.get_store_agents(featured=featured, creator=creator, sorted_by=sorted_by, search_query=search_query, category=category, page=page, page_size=page_size)\n    return agents\nexcept Exception:\n    logger.exception('Exception occured whilst getting store agents')\n    return fastapi.responses.JSONResponse(status_code=500, content={'detail': 'An error occurred while retrieving the store agents'})",
                "agents = await backend.server.v2.store.db.get_store_agents(featured=featured, creator=creator, sorted_by=sorted_by, search_query=search_query, category=category, page=page, page_size=page_size)",
                "return agents"
            ]
        },
        {
            "id": "12",
            "type": "block",
            "statements": [
                "logger.exception('Exception occured whilst getting store agents')",
                "return fastapi.responses.JSONResponse(status_code=500, content={'detail': 'An error occurred while retrieving the store agents'})"
            ]
        },
        {
            "id": "13",
            "type": "block",
            "statements": [
                "@router.get('/agents/{username}/{agent_name}', tags=['store', 'public'], response_model=backend.server.v2.store.model.StoreAgentDetails)\nasync def get_agent(username: str, agent_name: str):\n    \"\"\"\n    This is only used on the AgentDetails Page\n\n    It returns the store listing agents details.\n    \"\"\"\n    try:\n        username = urllib.parse.unquote(username).lower()\n        agent_name = urllib.parse.unquote(agent_name).lower()\n        agent = await backend.server.v2.store.db.get_store_agent_details(username=username, agent_name=agent_name)\n        return agent\n    except Exception:\n        logger.exception('Exception occurred whilst getting store agent details')\n        return fastapi.responses.JSONResponse(status_code=500, content={'detail': 'An error occurred while retrieving the store agent details'})",
                "'\\n    This is only used on the AgentDetails Page\\n\\n    It returns the store listing agents details.\\n    '",
                "try:\n    username = urllib.parse.unquote(username).lower()\n    agent_name = urllib.parse.unquote(agent_name).lower()\n    agent = await backend.server.v2.store.db.get_store_agent_details(username=username, agent_name=agent_name)\n    return agent\nexcept Exception:\n    logger.exception('Exception occurred whilst getting store agent details')\n    return fastapi.responses.JSONResponse(status_code=500, content={'detail': 'An error occurred while retrieving the store agent details'})",
                "username = urllib.parse.unquote(username).lower()",
                "agent_name = urllib.parse.unquote(agent_name).lower()",
                "agent = await backend.server.v2.store.db.get_store_agent_details(username=username, agent_name=agent_name)",
                "return agent"
            ]
        },
        {
            "id": "14",
            "type": "block",
            "statements": [
                "logger.exception('Exception occurred whilst getting store agent details')",
                "return fastapi.responses.JSONResponse(status_code=500, content={'detail': 'An error occurred while retrieving the store agent details'})"
            ]
        },
        {
            "id": "15",
            "type": "block",
            "statements": [
                "@router.post('/agents/{username}/{agent_name}/review', tags=['store'], dependencies=[fastapi.Depends(autogpt_libs.auth.middleware.auth_middleware)], response_model=backend.server.v2.store.model.StoreReview)\nasync def create_review(username: str, agent_name: str, review: backend.server.v2.store.model.StoreReviewCreate, user_id: typing.Annotated[str, fastapi.Depends(autogpt_libs.auth.depends.get_user_id)]):\n    \"\"\"\n    Create a review for a store agent.\n\n    Args:\n        username: Creator's username\n        agent_name: Name/slug of the agent\n        review: Review details including score and optional comments\n        user_id: ID of authenticated user creating the review\n\n    Returns:\n        The created review\n    \"\"\"\n    try:\n        username = urllib.parse.unquote(username).lower()\n        agent_name = urllib.parse.unquote(agent_name)\n        created_review = await backend.server.v2.store.db.create_store_review(user_id=user_id, store_listing_version_id=review.store_listing_version_id, score=review.score, comments=review.comments)\n        return created_review\n    except Exception:\n        logger.exception('Exception occurred whilst creating store review')\n        return fastapi.responses.JSONResponse(status_code=500, content={'detail': 'An error occurred while creating the store review'})",
                "\"\\n    Create a review for a store agent.\\n\\n    Args:\\n        username: Creator's username\\n        agent_name: Name/slug of the agent\\n        review: Review details including score and optional comments\\n        user_id: ID of authenticated user creating the review\\n\\n    Returns:\\n        The created review\\n    \"",
                "try:\n    username = urllib.parse.unquote(username).lower()\n    agent_name = urllib.parse.unquote(agent_name)\n    created_review = await backend.server.v2.store.db.create_store_review(user_id=user_id, store_listing_version_id=review.store_listing_version_id, score=review.score, comments=review.comments)\n    return created_review\nexcept Exception:\n    logger.exception('Exception occurred whilst creating store review')\n    return fastapi.responses.JSONResponse(status_code=500, content={'detail': 'An error occurred while creating the store review'})",
                "username = urllib.parse.unquote(username).lower()",
                "agent_name = urllib.parse.unquote(agent_name)",
                "created_review = await backend.server.v2.store.db.create_store_review(user_id=user_id, store_listing_version_id=review.store_listing_version_id, score=review.score, comments=review.comments)",
                "return created_review"
            ]
        },
        {
            "id": "16",
            "type": "block",
            "statements": [
                "logger.exception('Exception occurred whilst creating store review')",
                "return fastapi.responses.JSONResponse(status_code=500, content={'detail': 'An error occurred while creating the store review'})"
            ]
        },
        {
            "id": "17",
            "type": "block",
            "statements": [
                "@router.get('/creators', tags=['store', 'public'], response_model=backend.server.v2.store.model.CreatorsResponse)\nasync def get_creators(featured: bool=False, search_query: str | None=None, sorted_by: str | None=None, page: int=1, page_size: int=20):\n    \"\"\"\n    This is needed for:\n    - Home Page Featured Creators\n    - Search Results Page\n\n    ---\n\n    To support this functionality we need:\n    - featured: bool - to limit the list to just featured agents\n    - search_query: str - vector search based on the creators profile description.\n    - sorted_by: [agent_rating, agent_runs] -\n    \"\"\"\n    if page < 1:\n        raise fastapi.HTTPException(status_code=422, detail='Page must be greater than 0')\n    if page_size < 1:\n        raise fastapi.HTTPException(status_code=422, detail='Page size must be greater than 0')\n    try:\n        creators = await backend.server.v2.store.db.get_store_creators(featured=featured, search_query=search_query, sorted_by=sorted_by, page=page, page_size=page_size)\n        return creators\n    except Exception:\n        logger.exception('Exception occurred whilst getting store creators')\n        return fastapi.responses.JSONResponse(status_code=500, content={'detail': 'An error occurred while retrieving the store creators'})",
                "'\\n    This is needed for:\\n    - Home Page Featured Creators\\n    - Search Results Page\\n\\n    ---\\n\\n    To support this functionality we need:\\n    - featured: bool - to limit the list to just featured agents\\n    - search_query: str - vector search based on the creators profile description.\\n    - sorted_by: [agent_rating, agent_runs] -\\n    '",
                "page Lt 1"
            ]
        },
        {
            "id": "18",
            "type": "block",
            "statements": [
                "raise fastapi.HTTPException(status_code=422, detail='Page must be greater than 0')"
            ]
        },
        {
            "id": "19",
            "type": "block",
            "statements": []
        },
        {
            "id": "20",
            "type": "block",
            "statements": [
                "page_size Lt 1"
            ]
        },
        {
            "id": "21",
            "type": "block",
            "statements": [
                "raise fastapi.HTTPException(status_code=422, detail='Page size must be greater than 0')"
            ]
        },
        {
            "id": "22",
            "type": "block",
            "statements": []
        },
        {
            "id": "23",
            "type": "block",
            "statements": [
                "try:\n    creators = await backend.server.v2.store.db.get_store_creators(featured=featured, search_query=search_query, sorted_by=sorted_by, page=page, page_size=page_size)\n    return creators\nexcept Exception:\n    logger.exception('Exception occurred whilst getting store creators')\n    return fastapi.responses.JSONResponse(status_code=500, content={'detail': 'An error occurred while retrieving the store creators'})",
                "creators = await backend.server.v2.store.db.get_store_creators(featured=featured, search_query=search_query, sorted_by=sorted_by, page=page, page_size=page_size)",
                "return creators"
            ]
        },
        {
            "id": "24",
            "type": "block",
            "statements": [
                "logger.exception('Exception occurred whilst getting store creators')",
                "return fastapi.responses.JSONResponse(status_code=500, content={'detail': 'An error occurred while retrieving the store creators'})"
            ]
        },
        {
            "id": "25",
            "type": "block",
            "statements": [
                "@router.get('/creator/{username}', tags=['store', 'public'], response_model=backend.server.v2.store.model.CreatorDetails)\nasync def get_creator(username: str):\n    \"\"\"\n    Get the details of a creator\n    - Creator Details Page\n    \"\"\"\n    try:\n        username = urllib.parse.unquote(username).lower()\n        creator = await backend.server.v2.store.db.get_store_creator_details(username=username.lower())\n        return creator\n    except Exception:\n        logger.exception('Exception occurred whilst getting creator details')\n        return fastapi.responses.JSONResponse(status_code=500, content={'detail': 'An error occurred while retrieving the creator details'})",
                "'\\n    Get the details of a creator\\n    - Creator Details Page\\n    '",
                "try:\n    username = urllib.parse.unquote(username).lower()\n    creator = await backend.server.v2.store.db.get_store_creator_details(username=username.lower())\n    return creator\nexcept Exception:\n    logger.exception('Exception occurred whilst getting creator details')\n    return fastapi.responses.JSONResponse(status_code=500, content={'detail': 'An error occurred while retrieving the creator details'})",
                "username = urllib.parse.unquote(username).lower()",
                "creator = await backend.server.v2.store.db.get_store_creator_details(username=username.lower())",
                "return creator"
            ]
        },
        {
            "id": "26",
            "type": "block",
            "statements": [
                "logger.exception('Exception occurred whilst getting creator details')",
                "return fastapi.responses.JSONResponse(status_code=500, content={'detail': 'An error occurred while retrieving the creator details'})"
            ]
        },
        {
            "id": "27",
            "type": "block",
            "statements": [
                "@router.get('/myagents', tags=['store', 'private'], dependencies=[fastapi.Depends(autogpt_libs.auth.middleware.auth_middleware)], response_model=backend.server.v2.store.model.MyAgentsResponse)\nasync def get_my_agents(user_id: typing.Annotated[str, fastapi.Depends(autogpt_libs.auth.depends.get_user_id)]):\n    try:\n        agents = await backend.server.v2.store.db.get_my_agents(user_id)\n        return agents\n    except Exception:\n        logger.exception('Exception occurred whilst getting my agents')\n        return fastapi.responses.JSONResponse(status_code=500, content={'detail': 'An error occurred while retrieving the my agents'})",
                "try:\n    agents = await backend.server.v2.store.db.get_my_agents(user_id)\n    return agents\nexcept Exception:\n    logger.exception('Exception occurred whilst getting my agents')\n    return fastapi.responses.JSONResponse(status_code=500, content={'detail': 'An error occurred while retrieving the my agents'})",
                "agents = await backend.server.v2.store.db.get_my_agents(user_id)",
                "return agents"
            ]
        },
        {
            "id": "28",
            "type": "block",
            "statements": [
                "logger.exception('Exception occurred whilst getting my agents')",
                "return fastapi.responses.JSONResponse(status_code=500, content={'detail': 'An error occurred while retrieving the my agents'})"
            ]
        },
        {
            "id": "29",
            "type": "block",
            "statements": [
                "@router.delete('/submissions/{submission_id}', tags=['store', 'private'], dependencies=[fastapi.Depends(autogpt_libs.auth.middleware.auth_middleware)], response_model=bool)\nasync def delete_submission(user_id: typing.Annotated[str, fastapi.Depends(autogpt_libs.auth.depends.get_user_id)], submission_id: str):\n    \"\"\"\n    Delete a store listing submission.\n\n    Args:\n        user_id (str): ID of the authenticated user\n        submission_id (str): ID of the submission to be deleted\n\n    Returns:\n        bool: True if the submission was successfully deleted, False otherwise\n    \"\"\"\n    try:\n        result = await backend.server.v2.store.db.delete_store_submission(user_id=user_id, submission_id=submission_id)\n        return result\n    except Exception:\n        logger.exception('Exception occurred whilst deleting store submission')\n        return fastapi.responses.JSONResponse(status_code=500, content={'detail': 'An error occurred while deleting the store submission'})",
                "'\\n    Delete a store listing submission.\\n\\n    Args:\\n        user_id (str): ID of the authenticated user\\n        submission_id (str): ID of the submission to be deleted\\n\\n    Returns:\\n        bool: True if the submission was successfully deleted, False otherwise\\n    '",
                "try:\n    result = await backend.server.v2.store.db.delete_store_submission(user_id=user_id, submission_id=submission_id)\n    return result\nexcept Exception:\n    logger.exception('Exception occurred whilst deleting store submission')\n    return fastapi.responses.JSONResponse(status_code=500, content={'detail': 'An error occurred while deleting the store submission'})",
                "result = await backend.server.v2.store.db.delete_store_submission(user_id=user_id, submission_id=submission_id)",
                "return result"
            ]
        },
        {
            "id": "30",
            "type": "block",
            "statements": [
                "logger.exception('Exception occurred whilst deleting store submission')",
                "return fastapi.responses.JSONResponse(status_code=500, content={'detail': 'An error occurred while deleting the store submission'})"
            ]
        },
        {
            "id": "31",
            "type": "block",
            "statements": [
                "@router.get('/submissions', tags=['store', 'private'], dependencies=[fastapi.Depends(autogpt_libs.auth.middleware.auth_middleware)], response_model=backend.server.v2.store.model.StoreSubmissionsResponse)\nasync def get_submissions(user_id: typing.Annotated[str, fastapi.Depends(autogpt_libs.auth.depends.get_user_id)], page: int=1, page_size: int=20):\n    \"\"\"\n    Get a paginated list of store submissions for the authenticated user.\n\n    Args:\n        user_id (str): ID of the authenticated user\n        page (int, optional): Page number for pagination. Defaults to 1.\n        page_size (int, optional): Number of submissions per page. Defaults to 20.\n\n    Returns:\n        StoreListingsResponse: Paginated list of store submissions\n\n    Raises:\n        HTTPException: If page or page_size are less than 1\n    \"\"\"\n    if page < 1:\n        raise fastapi.HTTPException(status_code=422, detail='Page must be greater than 0')\n    if page_size < 1:\n        raise fastapi.HTTPException(status_code=422, detail='Page size must be greater than 0')\n    try:\n        listings = await backend.server.v2.store.db.get_store_submissions(user_id=user_id, page=page, page_size=page_size)\n        return listings\n    except Exception:\n        logger.exception('Exception occurred whilst getting store submissions')\n        return fastapi.responses.JSONResponse(status_code=500, content={'detail': 'An error occurred while retrieving the store submissions'})",
                "'\\n    Get a paginated list of store submissions for the authenticated user.\\n\\n    Args:\\n        user_id (str): ID of the authenticated user\\n        page (int, optional): Page number for pagination. Defaults to 1.\\n        page_size (int, optional): Number of submissions per page. Defaults to 20.\\n\\n    Returns:\\n        StoreListingsResponse: Paginated list of store submissions\\n\\n    Raises:\\n        HTTPException: If page or page_size are less than 1\\n    '",
                "page Lt 1"
            ]
        },
        {
            "id": "32",
            "type": "block",
            "statements": [
                "raise fastapi.HTTPException(status_code=422, detail='Page must be greater than 0')"
            ]
        },
        {
            "id": "33",
            "type": "block",
            "statements": []
        },
        {
            "id": "34",
            "type": "block",
            "statements": [
                "page_size Lt 1"
            ]
        },
        {
            "id": "35",
            "type": "block",
            "statements": [
                "raise fastapi.HTTPException(status_code=422, detail='Page size must be greater than 0')"
            ]
        },
        {
            "id": "36",
            "type": "block",
            "statements": []
        },
        {
            "id": "37",
            "type": "block",
            "statements": [
                "try:\n    listings = await backend.server.v2.store.db.get_store_submissions(user_id=user_id, page=page, page_size=page_size)\n    return listings\nexcept Exception:\n    logger.exception('Exception occurred whilst getting store submissions')\n    return fastapi.responses.JSONResponse(status_code=500, content={'detail': 'An error occurred while retrieving the store submissions'})",
                "listings = await backend.server.v2.store.db.get_store_submissions(user_id=user_id, page=page, page_size=page_size)",
                "return listings"
            ]
        },
        {
            "id": "38",
            "type": "block",
            "statements": [
                "logger.exception('Exception occurred whilst getting store submissions')",
                "return fastapi.responses.JSONResponse(status_code=500, content={'detail': 'An error occurred while retrieving the store submissions'})"
            ]
        },
        {
            "id": "39",
            "type": "block",
            "statements": [
                "@router.post('/submissions', tags=['store', 'private'], dependencies=[fastapi.Depends(autogpt_libs.auth.middleware.auth_middleware)], response_model=backend.server.v2.store.model.StoreSubmission)\nasync def create_submission(submission_request: backend.server.v2.store.model.StoreSubmissionRequest, user_id: typing.Annotated[str, fastapi.Depends(autogpt_libs.auth.depends.get_user_id)]):\n    \"\"\"\n    Create a new store listing submission.\n\n    Args:\n        submission_request (StoreSubmissionRequest): The submission details\n        user_id (str): ID of the authenticated user submitting the listing\n\n    Returns:\n        StoreSubmission: The created store submission\n\n    Raises:\n        HTTPException: If there is an error creating the submission\n    \"\"\"\n    try:\n        submission = await backend.server.v2.store.db.create_store_submission(user_id=user_id, agent_id=submission_request.agent_id, agent_version=submission_request.agent_version, slug=submission_request.slug, name=submission_request.name, video_url=submission_request.video_url, image_urls=submission_request.image_urls, description=submission_request.description, sub_heading=submission_request.sub_heading, categories=submission_request.categories)\n        return submission\n    except Exception:\n        logger.exception('Exception occurred whilst creating store submission')\n        return fastapi.responses.JSONResponse(status_code=500, content={'detail': 'An error occurred while creating the store submission'})",
                "'\\n    Create a new store listing submission.\\n\\n    Args:\\n        submission_request (StoreSubmissionRequest): The submission details\\n        user_id (str): ID of the authenticated user submitting the listing\\n\\n    Returns:\\n        StoreSubmission: The created store submission\\n\\n    Raises:\\n        HTTPException: If there is an error creating the submission\\n    '",
                "try:\n    submission = await backend.server.v2.store.db.create_store_submission(user_id=user_id, agent_id=submission_request.agent_id, agent_version=submission_request.agent_version, slug=submission_request.slug, name=submission_request.name, video_url=submission_request.video_url, image_urls=submission_request.image_urls, description=submission_request.description, sub_heading=submission_request.sub_heading, categories=submission_request.categories)\n    return submission\nexcept Exception:\n    logger.exception('Exception occurred whilst creating store submission')\n    return fastapi.responses.JSONResponse(status_code=500, content={'detail': 'An error occurred while creating the store submission'})",
                "submission = await backend.server.v2.store.db.create_store_submission(user_id=user_id, agent_id=submission_request.agent_id, agent_version=submission_request.agent_version, slug=submission_request.slug, name=submission_request.name, video_url=submission_request.video_url, image_urls=submission_request.image_urls, description=submission_request.description, sub_heading=submission_request.sub_heading, categories=submission_request.categories)",
                "return submission"
            ]
        },
        {
            "id": "40",
            "type": "block",
            "statements": [
                "logger.exception('Exception occurred whilst creating store submission')",
                "return fastapi.responses.JSONResponse(status_code=500, content={'detail': 'An error occurred while creating the store submission'})"
            ]
        },
        {
            "id": "41",
            "type": "block",
            "statements": [
                "@router.post('/submissions/media', tags=['store', 'private'], dependencies=[fastapi.Depends(autogpt_libs.auth.middleware.auth_middleware)])\nasync def upload_submission_media(file: fastapi.UploadFile, user_id: typing.Annotated[str, fastapi.Depends(autogpt_libs.auth.depends.get_user_id)]):\n    \"\"\"\n    Upload media (images/videos) for a store listing submission.\n\n    Args:\n        file (UploadFile): The media file to upload\n        user_id (str): ID of the authenticated user uploading the media\n\n    Returns:\n        str: URL of the uploaded media file\n\n    Raises:\n        HTTPException: If there is an error uploading the media\n    \"\"\"\n    try:\n        media_url = await backend.server.v2.store.media.upload_media(user_id=user_id, file=file)\n        return media_url\n    except Exception:\n        logger.exception('Exception occurred whilst uploading submission media')\n        return fastapi.responses.JSONResponse(status_code=500, content={'detail': 'An error occurred while uploading the media file'})",
                "'\\n    Upload media (images/videos) for a store listing submission.\\n\\n    Args:\\n        file (UploadFile): The media file to upload\\n        user_id (str): ID of the authenticated user uploading the media\\n\\n    Returns:\\n        str: URL of the uploaded media file\\n\\n    Raises:\\n        HTTPException: If there is an error uploading the media\\n    '",
                "try:\n    media_url = await backend.server.v2.store.media.upload_media(user_id=user_id, file=file)\n    return media_url\nexcept Exception:\n    logger.exception('Exception occurred whilst uploading submission media')\n    return fastapi.responses.JSONResponse(status_code=500, content={'detail': 'An error occurred while uploading the media file'})",
                "media_url = await backend.server.v2.store.media.upload_media(user_id=user_id, file=file)",
                "return media_url"
            ]
        },
        {
            "id": "42",
            "type": "block",
            "statements": [
                "logger.exception('Exception occurred whilst uploading submission media')",
                "return fastapi.responses.JSONResponse(status_code=500, content={'detail': 'An error occurred while uploading the media file'})"
            ]
        },
        {
            "id": "43",
            "type": "block",
            "statements": [
                "@router.post('/submissions/generate_image', tags=['store', 'private'], dependencies=[fastapi.Depends(autogpt_libs.auth.middleware.auth_middleware)])\nasync def generate_image(agent_id: str, user_id: typing.Annotated[str, fastapi.Depends(autogpt_libs.auth.depends.get_user_id)]) -> fastapi.responses.Response:\n    \"\"\"\n    Generate an image for a store listing submission.\n\n    Args:\n        agent_id (str): ID of the agent to generate an image for\n        user_id (str): ID of the authenticated user\n\n    Returns:\n        JSONResponse: JSON containing the URL of the generated image\n    \"\"\"\n    try:\n        agent = await backend.data.graph.get_graph(agent_id, user_id=user_id)\n        if not agent:\n            raise fastapi.HTTPException(status_code=404, detail=f'Agent with ID {agent_id} not found')\n        filename = f'agent_{agent_id}.jpeg'\n        existing_url = await backend.server.v2.store.media.check_media_exists(user_id, filename)\n        if existing_url:\n            logger.info(f'Using existing image for agent {agent_id}')\n            return fastapi.responses.JSONResponse(content={'image_url': existing_url})\n        image = await backend.server.v2.store.image_gen.generate_agent_image(agent=agent)\n        image_file = fastapi.UploadFile(file=image, filename=filename)\n        image_url = await backend.server.v2.store.media.upload_media(user_id=user_id, file=image_file, use_file_name=True)\n        return fastapi.responses.JSONResponse(content={'image_url': image_url})\n    except Exception:\n        logger.exception('Exception occurred whilst generating submission image')\n        return fastapi.responses.JSONResponse(status_code=500, content={'detail': 'An error occurred while generating the image'})",
                "'\\n    Generate an image for a store listing submission.\\n\\n    Args:\\n        agent_id (str): ID of the agent to generate an image for\\n        user_id (str): ID of the authenticated user\\n\\n    Returns:\\n        JSONResponse: JSON containing the URL of the generated image\\n    '",
                "try:\n    agent = await backend.data.graph.get_graph(agent_id, user_id=user_id)\n    if not agent:\n        raise fastapi.HTTPException(status_code=404, detail=f'Agent with ID {agent_id} not found')\n    filename = f'agent_{agent_id}.jpeg'\n    existing_url = await backend.server.v2.store.media.check_media_exists(user_id, filename)\n    if existing_url:\n        logger.info(f'Using existing image for agent {agent_id}')\n        return fastapi.responses.JSONResponse(content={'image_url': existing_url})\n    image = await backend.server.v2.store.image_gen.generate_agent_image(agent=agent)\n    image_file = fastapi.UploadFile(file=image, filename=filename)\n    image_url = await backend.server.v2.store.media.upload_media(user_id=user_id, file=image_file, use_file_name=True)\n    return fastapi.responses.JSONResponse(content={'image_url': image_url})\nexcept Exception:\n    logger.exception('Exception occurred whilst generating submission image')\n    return fastapi.responses.JSONResponse(status_code=500, content={'detail': 'An error occurred while generating the image'})",
                "agent = await backend.data.graph.get_graph(agent_id, user_id=user_id)",
                "not agent"
            ]
        },
        {
            "id": "44",
            "type": "block",
            "statements": [
                "raise fastapi.HTTPException(status_code=404, detail=f'Agent with ID {agent_id} not found')"
            ]
        },
        {
            "id": "45",
            "type": "block",
            "statements": []
        },
        {
            "id": "46",
            "type": "block",
            "statements": [
                "filename = f'agent_{agent_id}.jpeg'",
                "existing_url = await backend.server.v2.store.media.check_media_exists(user_id, filename)",
                "existing_url"
            ]
        },
        {
            "id": "47",
            "type": "block",
            "statements": [
                "logger.info(f'Using existing image for agent {agent_id}')",
                "return fastapi.responses.JSONResponse(content={'image_url': existing_url})"
            ]
        },
        {
            "id": "48",
            "type": "block",
            "statements": []
        },
        {
            "id": "49",
            "type": "block",
            "statements": [
                "image = await backend.server.v2.store.image_gen.generate_agent_image(agent=agent)",
                "image_file = fastapi.UploadFile(file=image, filename=filename)",
                "image_url = await backend.server.v2.store.media.upload_media(user_id=user_id, file=image_file, use_file_name=True)",
                "return fastapi.responses.JSONResponse(content={'image_url': image_url})"
            ]
        },
        {
            "id": "50",
            "type": "block",
            "statements": [
                "logger.exception('Exception occurred whilst generating submission image')",
                "return fastapi.responses.JSONResponse(status_code=500, content={'detail': 'An error occurred while generating the image'})"
            ]
        }
    ],
    "edges": [
        {
            "source": "5",
            "target": "6",
            "type": "true"
        },
        {
            "source": "5",
            "target": "7",
            "type": "false"
        },
        {
            "source": "6",
            "target": "8",
            "type": "next"
        },
        {
            "source": "7",
            "target": "8",
            "type": "next"
        },
        {
            "source": "8",
            "target": "9",
            "type": "true"
        },
        {
            "source": "8",
            "target": "10",
            "type": "false"
        },
        {
            "source": "9",
            "target": "11",
            "type": "next"
        },
        {
            "source": "10",
            "target": "11",
            "type": "next"
        },
        {
            "source": "17",
            "target": "18",
            "type": "true"
        },
        {
            "source": "17",
            "target": "19",
            "type": "false"
        },
        {
            "source": "18",
            "target": "20",
            "type": "next"
        },
        {
            "source": "19",
            "target": "20",
            "type": "next"
        },
        {
            "source": "20",
            "target": "21",
            "type": "true"
        },
        {
            "source": "20",
            "target": "22",
            "type": "false"
        },
        {
            "source": "21",
            "target": "23",
            "type": "next"
        },
        {
            "source": "22",
            "target": "23",
            "type": "next"
        },
        {
            "source": "31",
            "target": "32",
            "type": "true"
        },
        {
            "source": "31",
            "target": "33",
            "type": "false"
        },
        {
            "source": "32",
            "target": "34",
            "type": "next"
        },
        {
            "source": "33",
            "target": "34",
            "type": "next"
        },
        {
            "source": "34",
            "target": "35",
            "type": "true"
        },
        {
            "source": "34",
            "target": "36",
            "type": "false"
        },
        {
            "source": "35",
            "target": "37",
            "type": "next"
        },
        {
            "source": "36",
            "target": "37",
            "type": "next"
        },
        {
            "source": "43",
            "target": "44",
            "type": "true"
        },
        {
            "source": "43",
            "target": "45",
            "type": "false"
        },
        {
            "source": "44",
            "target": "46",
            "type": "next"
        },
        {
            "source": "45",
            "target": "46",
            "type": "next"
        },
        {
            "source": "46",
            "target": "47",
            "type": "true"
        },
        {
            "source": "46",
            "target": "48",
            "type": "false"
        },
        {
            "source": "48",
            "target": "49",
            "type": "next"
        }
    ]
}