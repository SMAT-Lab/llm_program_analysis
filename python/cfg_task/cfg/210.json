{
    "nodes": [
        {
            "id": "1",
            "type": "block",
            "statements": [
                "def binary_coded_decimal(number: int) -> str:\n    \"\"\"\n    Find binary coded decimal (bcd) of integer base 10.\n    Each digit of the number is represented by a 4-bit binary.\n    Example:\n    >>> binary_coded_decimal(-2)\n    '0b0000'\n    >>> binary_coded_decimal(-1)\n    '0b0000'\n    >>> binary_coded_decimal(0)\n    '0b0000'\n    >>> binary_coded_decimal(3)\n    '0b0011'\n    >>> binary_coded_decimal(2)\n    '0b0010'\n    >>> binary_coded_decimal(12)\n    '0b00010010'\n    >>> binary_coded_decimal(987)\n    '0b100110000111'\n    \"\"\"\n    return '0b' + ''.join((str(bin(int(digit)))[2:].zfill(4) for digit in str(max(0, number))))",
                "\"\\n    Find binary coded decimal (bcd) of integer base 10.\\n    Each digit of the number is represented by a 4-bit binary.\\n    Example:\\n    >>> binary_coded_decimal(-2)\\n    '0b0000'\\n    >>> binary_coded_decimal(-1)\\n    '0b0000'\\n    >>> binary_coded_decimal(0)\\n    '0b0000'\\n    >>> binary_coded_decimal(3)\\n    '0b0011'\\n    >>> binary_coded_decimal(2)\\n    '0b0010'\\n    >>> binary_coded_decimal(12)\\n    '0b00010010'\\n    >>> binary_coded_decimal(987)\\n    '0b100110000111'\\n    \"",
                "return '0b' + ''.join((str(bin(int(digit)))[2:].zfill(4) for digit in str(max(0, number))))"
            ]
        },
        {
            "id": "2",
            "type": "block",
            "statements": [
                "__name__ Eq '__main__'"
            ]
        },
        {
            "id": "3",
            "type": "block",
            "statements": [
                "import doctest",
                "doctest.testmod()"
            ]
        },
        {
            "id": "4",
            "type": "block",
            "statements": []
        },
        {
            "id": "5",
            "type": "block",
            "statements": []
        }
    ],
    "edges": [
        {
            "source": "2",
            "target": "3",
            "type": "true"
        },
        {
            "source": "2",
            "target": "4",
            "type": "false"
        },
        {
            "source": "3",
            "target": "5",
            "type": "next"
        },
        {
            "source": "4",
            "target": "5",
            "type": "next"
        }
    ]
}