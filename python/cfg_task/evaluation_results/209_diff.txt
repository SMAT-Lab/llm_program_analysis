--- ground_truth
+++ llm_generated
@@ -1,5 +1,7 @@
 from typing import Any, Dict
+
 import jwt
+
 from .config import settings
 def parse_jwt_token(token: str) -> Dict[str, Any]:
     """
@@ -9,22 +11,16 @@
     :return: The decoded payload
     :raises ValueError: If the token is invalid or expired
     """
+
     try:
-        payload = jwt.decode(token, settings.JWT_SECRET_KEY, algorithms=[settings.JWT_ALGORITHM], audience='authenticated')
+        payload = jwt.decode(
+            token,
+            settings.JWT_SECRET_KEY,
+            algorithms=[settings.JWT_ALGORITHM],
+            audience="authenticated",
+        )
         return payload
-    except jwt.ExpiredSignatureError:
-        raise ValueError('Token has expired')
-    except jwt.InvalidTokenError as e:
-        raise ValueError(f'Invalid token: {str(e)}')
-'\n    Parse and validate a JWT token.\n\n    :param token: The token to parse\n    :return: The decoded payload\n    :raises ValueError: If the token is invalid or expired\n    '
-try:
-    payload = jwt.decode(token, settings.JWT_SECRET_KEY, algorithms=[settings.JWT_ALGORITHM], audience='authenticated')
-    return payload
+except jwt.InvalidTokenError as e:
+        raise ValueError(f"Invalid token: {str(e)}")
 except jwt.ExpiredSignatureError:
-    raise ValueError('Token has expired')
-except jwt.InvalidTokenError as e:
-    raise ValueError(f'Invalid token: {str(e)}')
-payload = jwt.decode(token, settings.JWT_SECRET_KEY, algorithms=[settings.JWT_ALGORITHM], audience='authenticated')
-return payload
-raise ValueError('Token has expired')
-raise ValueError(f'Invalid token: {str(e)}')+        raise ValueError("Token has expired")