--- ground_truth
+++ llm_generated
@@ -1,5 +1,7 @@
 import pytest
+
 from backend.util.service import AppService, expose, get_service_client
+
 TEST_SERVICE_PORT = 8765
 class ServiceTest(AppService):
 
@@ -20,48 +22,15 @@
 
     @expose
     def fun_with_async(self, a: int, b: int) -> int:
-
         async def add_async(a: int, b: int) -> int:
             return a + b
+
         return self.run_and_wait(add_async(a, b))
-def __init__(self):
-    super().__init__()
-super().__init__()
-@classmethod
-def get_port(cls) -> int:
-    return TEST_SERVICE_PORT
-return TEST_SERVICE_PORT
-@expose
-def add(self, a: int, b: int) -> int:
-    return a + b
-return a + b
-@expose
-def subtract(self, a: int, b: int) -> int:
-    return a - b
-return a - b
-@expose
-def fun_with_async(self, a: int, b: int) -> int:
+@pytest.mark.asyncio(scope="session")
+async def test_service_creation(server):
 
-    async def add_async(a: int, b: int) -> int:
-        return a + b
-    return self.run_and_wait(add_async(a, b))
-async def add_async(a: int, b: int) -> int:
-    return a + b
-return a + b
-return self.run_and_wait(add_async(a, b))
-@pytest.mark.asyncio(scope='session')
-async def test_service_creation(server):
     with ServiceTest():
         client = get_service_client(ServiceTest)
         assert client.add(5, 3) == 8
         assert client.subtract(10, 4) == 6
-        assert client.fun_with_async(5, 3) == 8
-with ServiceTest():
-    client = get_service_client(ServiceTest)
-    assert client.add(5, 3) == 8
-    assert client.subtract(10, 4) == 6
-    assert client.fun_with_async(5, 3) == 8
-client = get_service_client(ServiceTest)
-assert client.add(5, 3) == 8
-assert client.subtract(10, 4) == 6
-assert client.fun_with_async(5, 3) == 8+        assert client.fun_with_async(5, 3) == 8