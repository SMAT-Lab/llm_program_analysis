{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "import logging\nimport time\nfrom enum import Enum\nfrom typing import Literal\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "import replicate\nfrom pydantic import SecretStr\n"
        },
        {
            "id": "chunk_0_GlobalBlock_3",
            "code": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import (\n    APIKeyCredentials,\n    CredentialsField,\n    CredentialsMetaInput,\n    SchemaField,\n)\nfrom backend.integrations.providers import ProviderName\n"
        },
        {
            "id": "chunk_0_GlobalBlock_4",
            "code": "logger = logging.getLogger(__name__)\n"
        },
        {
            "id": "chunk_1_TEST_CREDENTIALS_1",
            "code": "TEST_CREDENTIALS = APIKeyCredentials(\n    id=\"01234567-89ab-cdef-0123-456789abcdef\",\n    provider=\"replicate\",\n    api_key=SecretStr(\"mock-replicate-api-key\"),\n    title=\"Mock Replicate API key\",\n    expires_at=None,\n)\n"
        },
        {
            "id": "chunk_2_TEST_CREDENTIALS_INPUT_1",
            "code": "TEST_CREDENTIALS_INPUT = {\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.type,\n}\n"
        },
        {
            "id": "chunk_3_MusicGenModelVersion_1",
            "code": "class MusicGenModelVersion(str, Enum):\n    STEREO_LARGE = \"stereo-large\"\n    MELODY_LARGE = \"melody-large\"\n    LARGE = \"large\"\n"
        },
        {
            "id": "chunk_4_AudioFormat_1",
            "code": "class AudioFormat(str, Enum):\n    WAV = \"wav\"\n    MP3 = \"mp3\"\n"
        },
        {
            "id": "chunk_5_NormalizationStrategy_1",
            "code": "class NormalizationStrategy(str, Enum):\n    LOUDNESS = \"loudness\"\n    CLIP = \"clip\"\n    PEAK = \"peak\"\n    RMS = \"rms\"\n"
        },
        {
            "id": "chunk_5_NormalizationStrategy_2",
            "code": "\n\n"
        },
        {
            "id": "chunk_6_AIMusicGeneratorBlock_1",
            "code": "class AIMusicGeneratorBlock(Block):\n"
        },
        {
            "id": "chunk_6_AIMusicGeneratorBlock_2",
            "code": "    class Input(BlockSchema):\n        credentials: CredentialsMetaInput[\n            Literal[ProviderName.REPLICATE], Literal[\"api_key\"]\n        ] = CredentialsField(\n            description=\"The Replicate integration can be used with \"\n            \"any API key with sufficient permissions for the blocks it is used on.\",\n        )\n        prompt: str = SchemaField(\n            description=\"A description of the music you want to generate\",\n            placeholder=\"e.g., 'An upbeat electronic dance track with heavy bass'\",\n            title=\"Prompt\",\n        )\n        music_gen_model_version: MusicGenModelVersion = SchemaField(\n            description=\"Model to use for generation\",\n            default=MusicGenModelVersion.STEREO_LARGE,\n            title=\"Model Version\",\n        )\n        duration: int = SchemaField(\n            description=\"Duration of the generated audio in seconds\",\n            default=8,\n            title=\"Duration\",\n        )\n        temperature: float = SchemaField(\n            description=\"Controls the 'conservativeness' of the sampling process. Higher temperature means more diversity\",\n            default=1.0,\n            title=\"Temperature\",\n        )\n        top_k: int = SchemaField(\n            description=\"Reduces sampling to the k most likely tokens\",\n            default=250,\n            title=\"Top K\",\n        )\n        top_p: float = SchemaField(\n            description=\"Reduces sampling to tokens with cumulative probability of p. When set to 0 (default), top_k sampling is used\",\n            default=0.0,\n            title=\"Top P\",\n        )\n        classifier_free_guidance: int = SchemaField(\n            description=\"Increases the influence of inputs on the output. Higher values produce lower-variance outputs that adhere more closely to inputs\",\n            default=3,\n            title=\"Classifier Free Guidance\",\n        )\n        output_format: AudioFormat = SchemaField(\n            description=\"Output format for generated audio\",\n            default=AudioFormat.WAV,\n            title=\"Output Format\",\n        )\n        normalization_strategy: NormalizationStrategy = SchemaField(\n            description=\"Strategy for normalizing audio\",\n            default=NormalizationStrategy.LOUDNESS,\n            title=\"Normalization Strategy\",\n        )\n"
        },
        {
            "id": "chunk_6_AIMusicGeneratorBlock_3",
            "code": "    class Output(BlockSchema):\n        result: str = SchemaField(description=\"URL of the generated audio file\")\n        error: str = SchemaField(description=\"Error message if the model run failed\")\n"
        },
        {
            "id": "chunk_6_AIMusicGeneratorBlock_4",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"44f6c8ad-d75c-4ae1-8209-aad1c0326928\",\n            description=\"This block generates music using Meta's MusicGen model on Replicate.\",\n            categories={BlockCategory.AI},\n            input_schema=AIMusicGeneratorBlock.Input,\n            output_schema=AIMusicGeneratorBlock.Output,\n            test_input={\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"prompt\": \"An upbeat electronic dance track with heavy bass\",\n                \"music_gen_model_version\": MusicGenModelVersion.STEREO_LARGE,\n                \"duration\": 8,\n                \"temperature\": 1.0,\n                \"top_k\": 250,\n                \"top_p\": 0.0,\n                \"classifier_free_guidance\": 3,\n                \"output_format\": AudioFormat.WAV,\n                \"normalization_strategy\": NormalizationStrategy.LOUDNESS,\n            },\n            test_output=[\n                (\n                    \"result\",\n                    \"https://replicate.com/output/generated-audio-url.wav\",\n                ),\n            ],\n            test_mock={\n                \"run_model\": lambda api_key, music_gen_model_version, prompt, duration, temperature, top_k, top_p, classifier_free_guidance, output_format, normalization_strategy: \"https://replicate.com/output/generated-audio-url.wav\",\n            },\n            test_credentials=TEST_CREDENTIALS,\n        )\n"
        },
        {
            "id": "chunk_6_AIMusicGeneratorBlock_5",
            "code": "    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n"
        },
        {
            "id": "chunk_6_AIMusicGeneratorBlock_6",
            "code": "        max_retries = 3\n        retry_delay = 5  # seconds\n        last_error = None\n\n"
        },
        {
            "id": "chunk_6_AIMusicGeneratorBlock_7",
            "code": "        for attempt in range(max_retries):\n"
        },
        {
            "id": "chunk_6_AIMusicGeneratorBlock_8",
            "code": "            try:\n                logger.debug(\n"
        },
        {
            "id": "chunk_6_AIMusicGeneratorBlock_9",
            "code": "                    f\"[AIMusicGeneratorBlock] - Running model (attempt {attempt + 1})\"\n                )\n"
        },
        {
            "id": "chunk_6_AIMusicGeneratorBlock_10",
            "code": "                result = self.run_model(\n                    api_key=credentials.api_key,\n                    music_gen_model_version=input_data.music_gen_model_version,\n                    prompt=input_data.prompt,\n                    duration=input_data.duration,\n                    temperature=input_data.temperature,\n                    top_k=input_data.top_k,\n                    top_p=input_data.top_p,\n                    classifier_free_guidance=input_data.classifier_free_guidance,\n                    output_format=input_data.output_format,\n                    normalization_strategy=input_data.normalization_strategy,\n                )\n"
        },
        {
            "id": "chunk_6_AIMusicGeneratorBlock_11",
            "code": "                if result and result != \"No output received\":\n                    yield \"result\", result\n"
        },
        {
            "id": "chunk_6_AIMusicGeneratorBlock_12",
            "code": "                    return\n"
        },
        {
            "id": "chunk_6_AIMusicGeneratorBlock_13",
            "code": "                else:\n                    last_error = \"Model returned empty or invalid response\"\n                    raise ValueError(last_error)\n"
        },
        {
            "id": "chunk_6_AIMusicGeneratorBlock_14",
            "code": "            except Exception as e:\n                last_error = f\"Unexpected error: {str(e)}\"\n                logger.error(f\"[AIMusicGeneratorBlock] - Error: {last_error}\")\n"
        },
        {
            "id": "chunk_6_AIMusicGeneratorBlock_15",
            "code": "                if attempt < max_retries - 1:\n                    time.sleep(retry_delay)\n"
        },
        {
            "id": "chunk_6_AIMusicGeneratorBlock_16",
            "code": "                    continue\n"
        },
        {
            "id": "chunk_6_AIMusicGeneratorBlock_17",
            "code": "        # If we've exhausted all retries, yield the error\n        yield \"error\", f\"Failed after {max_retries} attempts. Last error: {last_error}\"\n"
        },
        {
            "id": "chunk_6_AIMusicGeneratorBlock_18",
            "code": "    def run_model(\n        self,\n        api_key: SecretStr,\n        music_gen_model_version: MusicGenModelVersion,\n        prompt: str,\n        duration: int,\n        temperature: float,\n        top_k: int,\n        top_p: float,\n        classifier_free_guidance: int,\n        output_format: AudioFormat,\n        normalization_strategy: NormalizationStrategy,\n    ):\n"
        },
        {
            "id": "chunk_6_AIMusicGeneratorBlock_19",
            "code": "        # Initialize Replicate client with the API key\n        client = replicate.Client(api_token=api_key.get_secret_value())\n"
        },
        {
            "id": "chunk_6_AIMusicGeneratorBlock_20",
            "code": "        # Run the model with parameters\n        output = client.run(\n            \"meta/musicgen:671ac645ce5e552cc63a54a2bbff63fcf798043055d2dac5fc9e36a837eedcfb\",\n            input={\n                \"prompt\": prompt,\n                \"music_gen_model_version\": music_gen_model_version,\n                \"duration\": duration,\n                \"temperature\": temperature,\n                \"top_k\": top_k,\n                \"top_p\": top_p,\n                \"classifier_free_guidance\": classifier_free_guidance,\n                \"output_format\": output_format,\n                \"normalization_strategy\": normalization_strategy,\n            },\n        )\n"
        },
        {
            "id": "chunk_6_AIMusicGeneratorBlock_21",
            "code": "        # Handle the output\n        if isinstance(output, list) and len(output) > 0:\n            result_url = output[0]  # If output is a list, get the first element\n        elif isinstance(output, str):\n            result_url = output  # If output is a string, use it directly\n        else:\n            result_url = (\n                \"No output received\"  # Fallback message if output is not as expected\n            )\n"
        },
        {
            "id": "chunk_6_AIMusicGeneratorBlock_22",
            "code": "        return result_url\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_0_GlobalBlock_2",
            "to": "chunk_0_GlobalBlock_3"
        },
        {
            "from": "chunk_0_GlobalBlock_3",
            "to": "chunk_0_GlobalBlock_4"
        },
        {
            "from": "chunk_5_NormalizationStrategy_1",
            "to": "chunk_5_NormalizationStrategy_2"
        },
        {
            "from": "chunk_6_AIMusicGeneratorBlock_1",
            "to": "chunk_6_AIMusicGeneratorBlock_2"
        },
        {
            "from": "chunk_6_AIMusicGeneratorBlock_2",
            "to": "chunk_6_AIMusicGeneratorBlock_3"
        },
        {
            "from": "chunk_6_AIMusicGeneratorBlock_3",
            "to": "chunk_6_AIMusicGeneratorBlock_4"
        },
        {
            "from": "chunk_6_AIMusicGeneratorBlock_4",
            "to": "chunk_6_AIMusicGeneratorBlock_5"
        },
        {
            "from": "chunk_6_AIMusicGeneratorBlock_5",
            "to": "chunk_6_AIMusicGeneratorBlock_6"
        },
        {
            "from": "chunk_6_AIMusicGeneratorBlock_6",
            "to": "chunk_6_AIMusicGeneratorBlock_7"
        },
        {
            "from": "chunk_6_AIMusicGeneratorBlock_7",
            "to": "chunk_6_AIMusicGeneratorBlock_8"
        },
        {
            "from": "chunk_6_AIMusicGeneratorBlock_8",
            "to": "chunk_6_AIMusicGeneratorBlock_9"
        },
        {
            "from": "chunk_6_AIMusicGeneratorBlock_9",
            "to": "chunk_6_AIMusicGeneratorBlock_10"
        },
        {
            "from": "chunk_6_AIMusicGeneratorBlock_10",
            "to": "chunk_6_AIMusicGeneratorBlock_11"
        },
        {
            "from": "chunk_6_AIMusicGeneratorBlock_10",
            "to": "chunk_6_AIMusicGeneratorBlock_13"
        },
        {
            "from": "chunk_6_AIMusicGeneratorBlock_11",
            "to": "chunk_6_AIMusicGeneratorBlock_12"
        },
        {
            "from": "chunk_6_AIMusicGeneratorBlock_13",
            "to": "chunk_6_AIMusicGeneratorBlock_14"
        },
        {
            "from": "chunk_6_AIMusicGeneratorBlock_14",
            "to": "chunk_6_AIMusicGeneratorBlock_15"
        },
        {
            "from": "chunk_6_AIMusicGeneratorBlock_14",
            "to": "chunk_6_AIMusicGeneratorBlock_17"
        },
        {
            "from": "chunk_6_AIMusicGeneratorBlock_15",
            "to": "chunk_6_AIMusicGeneratorBlock_16"
        },
        {
            "from": "chunk_6_AIMusicGeneratorBlock_16",
            "to": "chunk_6_AIMusicGeneratorBlock_7"
        },
        {
            "from": "chunk_6_AIMusicGeneratorBlock_18",
            "to": "chunk_6_AIMusicGeneratorBlock_19"
        },
        {
            "from": "chunk_6_AIMusicGeneratorBlock_19",
            "to": "chunk_6_AIMusicGeneratorBlock_20"
        },
        {
            "from": "chunk_6_AIMusicGeneratorBlock_20",
            "to": "chunk_6_AIMusicGeneratorBlock_21"
        },
        {
            "from": "chunk_6_AIMusicGeneratorBlock_21",
            "to": "chunk_6_AIMusicGeneratorBlock_22"
        }
    ]
}