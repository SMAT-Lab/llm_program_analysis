{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "import logging\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "import requests\nfrom fastapi import Request\n"
        },
        {
            "id": "chunk_0_GlobalBlock_3",
            "code": "from backend.data import integrations\nfrom backend.data.model import APIKeyCredentials, Credentials\nfrom backend.integrations.providers import ProviderName\nfrom backend.integrations.webhooks._base import BaseWebhooksManager\n"
        },
        {
            "id": "chunk_0_GlobalBlock_4",
            "code": "logger = logging.getLogger(__name__)\n"
        },
        {
            "id": "chunk_1_Slant3DWebhooksManager_1",
            "code": "class Slant3DWebhooksManager(BaseWebhooksManager):\n    \"\"\"Manager for Slant3D webhooks\"\"\"\n\n    PROVIDER_NAME = ProviderName.SLANT3D\n    BASE_URL = \"https://www.slant3dapi.com/api\"\n\n"
        },
        {
            "id": "chunk_1_Slant3DWebhooksManager_2",
            "code": "    async def _register_webhook(\n        self,\n        credentials: Credentials,\n        webhook_type: str,\n        resource: str,\n        events: list[str],\n        ingress_url: str,\n        secret: str,\n    ) -> tuple[str, dict]:\n        \"\"\"Register a new webhook with Slant3D\"\"\"\n\n"
        },
        {
            "id": "chunk_1_Slant3DWebhooksManager_3",
            "code": "        if not isinstance(credentials, APIKeyCredentials):\n            raise ValueError(\"API key is required to register a webhook\")\n\n"
        },
        {
            "id": "chunk_1_Slant3DWebhooksManager_4",
            "code": "        headers = {\n            \"api-key\": credentials.api_key.get_secret_value(),\n            \"Content-Type\": \"application/json\",\n        }\n\n"
        },
        {
            "id": "chunk_1_Slant3DWebhooksManager_5",
            "code": "        # Slant3D's API doesn't use events list, just register for all order updates\n        payload = {\"endPoint\": ingress_url}\n\n"
        },
        {
            "id": "chunk_1_Slant3DWebhooksManager_6",
            "code": "        response = requests.post(\n            f\"{self.BASE_URL}/customer/webhookSubscribe\", headers=headers, json=payload\n        )\n\n"
        },
        {
            "id": "chunk_1_Slant3DWebhooksManager_7",
            "code": "        if not response.ok:\n            error = response.json().get(\"error\", \"Unknown error\")\n            raise RuntimeError(f\"Failed to register webhook: {error}\")\n\n"
        },
        {
            "id": "chunk_1_Slant3DWebhooksManager_8",
            "code": "        webhook_config = {\n            \"endpoint\": ingress_url,\n            \"provider\": self.PROVIDER_NAME,\n            \"events\": [\"order.shipped\"],  # Currently the only supported event\n            \"type\": webhook_type,\n        }\n\n"
        },
        {
            "id": "chunk_1_Slant3DWebhooksManager_9",
            "code": "        return \"\", webhook_config\n\n"
        },
        {
            "id": "chunk_1_Slant3DWebhooksManager_10",
            "code": "    @classmethod\n    async def validate_payload(\n        cls, webhook: integrations.Webhook, request: Request\n    ) -> tuple[dict, str]:\n        \"\"\"Validate incoming webhook payload from Slant3D\"\"\"\n\n"
        },
        {
            "id": "chunk_1_Slant3DWebhooksManager_11",
            "code": "        payload = await request.json()\n\n"
        },
        {
            "id": "chunk_1_Slant3DWebhooksManager_12",
            "code": "        # Validate required fields from Slant3D API spec\n        required_fields = [\"orderId\", \"status\", \"trackingNumber\", \"carrierCode\"]\n        missing_fields = [field for field in required_fields if field not in payload]\n\n"
        },
        {
            "id": "chunk_1_Slant3DWebhooksManager_13",
            "code": "        if missing_fields:\n            raise ValueError(f\"Missing required fields: {', '.join(missing_fields)}\")\n\n"
        },
        {
            "id": "chunk_1_Slant3DWebhooksManager_14",
            "code": "        # Normalize payload structure\n        normalized_payload = {\n            \"orderId\": payload[\"orderId\"],\n            \"status\": payload[\"status\"],\n            \"trackingNumber\": payload[\"trackingNumber\"],\n            \"carrierCode\": payload[\"carrierCode\"],\n        }\n\n"
        },
        {
            "id": "chunk_1_Slant3DWebhooksManager_15",
            "code": "        # Currently Slant3D only sends shipping notifications\n        # Convert status to lowercase for event format compatibility\n        event_type = f\"order.{payload['status'].lower()}\"\n\n"
        },
        {
            "id": "chunk_1_Slant3DWebhooksManager_16",
            "code": "        return normalized_payload, event_type\n\n"
        },
        {
            "id": "chunk_1_Slant3DWebhooksManager_17",
            "code": "    async def _deregister_webhook(\n        self, webhook: integrations.Webhook, credentials: Credentials\n    ) -> None:\n        \"\"\"\n        Note: Slant3D API currently doesn't provide a deregistration endpoint.\n        This would need to be handled through support.\n        \"\"\"\n"
        },
        {
            "id": "chunk_1_Slant3DWebhooksManager_18",
            "code": "        # Log warning since we can't properly deregister\n        logger.warning(\n            f\"Warning: Manual deregistration required for webhook {webhook.id}\"\n        )\n        pass\n"
        },
        {
            "id": "chunk_2__register_webhook_1",
            "code": "    async def _register_webhook(\n        self,\n        credentials: Credentials,\n        webhook_type: str,\n        resource: str,\n        events: list[str],\n        ingress_url: str,\n        secret: str,\n    ) -> tuple[str, dict]:\n        \"\"\"Register a new webhook with Slant3D\"\"\"\n\n"
        },
        {
            "id": "chunk_2__register_webhook_2",
            "code": "        if not isinstance(credentials, APIKeyCredentials):\n            raise ValueError(\"API key is required to register a webhook\")\n"
        },
        {
            "id": "chunk_2__register_webhook_3",
            "code": "        headers = {\n            \"api-key\": credentials.api_key.get_secret_value(),\n            \"Content-Type\": \"application/json\",\n        }\n"
        },
        {
            "id": "chunk_2__register_webhook_4",
            "code": "        # Slant3D's API doesn't use events list, just register for all order updates\n        payload = {\"endPoint\": ingress_url}\n"
        },
        {
            "id": "chunk_2__register_webhook_5",
            "code": "        response = requests.post(\n            f\"{self.BASE_URL}/customer/webhookSubscribe\", headers=headers, json=payload\n        )\n"
        },
        {
            "id": "chunk_2__register_webhook_6",
            "code": "        if not response.ok:\n            error = response.json().get(\"error\", \"Unknown error\")\n            raise RuntimeError(f\"Failed to register webhook: {error}\")\n"
        },
        {
            "id": "chunk_2__register_webhook_7",
            "code": "        webhook_config = {\n            \"endpoint\": ingress_url,\n            \"provider\": self.PROVIDER_NAME,\n            \"events\": [\"order.shipped\"],  # Currently the only supported event\n            \"type\": webhook_type,\n        }\n"
        },
        {
            "id": "chunk_2__register_webhook_8",
            "code": "        return \"\", webhook_config\n"
        },
        {
            "id": "chunk_3_validate_payload_1",
            "code": "    @classmethod\n    async def validate_payload(\n        cls, webhook: integrations.Webhook, request: Request\n    ) -> tuple[dict, str]:\n"
        },
        {
            "id": "chunk_3_validate_payload_2",
            "code": "        \"\"\"Validate incoming webhook payload from Slant3D\"\"\"\n"
        },
        {
            "id": "chunk_3_validate_payload_3",
            "code": "        payload = await request.json()\n"
        },
        {
            "id": "chunk_3_validate_payload_4",
            "code": "        # Validate required fields from Slant3D API spec\n        required_fields = [\"orderId\", \"status\", \"trackingNumber\", \"carrierCode\"]\n"
        },
        {
            "id": "chunk_3_validate_payload_5",
            "code": "        missing_fields = [field for field in required_fields if field not in payload]\n"
        },
        {
            "id": "chunk_3_validate_payload_6",
            "code": "        if missing_fields:\n            raise ValueError(f\"Missing required fields: {', '.join(missing_fields)}\")\n"
        },
        {
            "id": "chunk_3_validate_payload_7",
            "code": "        # Normalize payload structure\n        normalized_payload = {\n            \"orderId\": payload[\"orderId\"],\n            \"status\": payload[\"status\"],\n            \"trackingNumber\": payload[\"trackingNumber\"],\n            \"carrierCode\": payload[\"carrierCode\"],\n        }\n"
        },
        {
            "id": "chunk_3_validate_payload_8",
            "code": "        # Currently Slant3D only sends shipping notifications\n        # Convert status to lowercase for event format compatibility\n        event_type = f\"order.{payload['status'].lower()}\"\n"
        },
        {
            "id": "chunk_3_validate_payload_9",
            "code": "        return normalized_payload, event_type\n"
        },
        {
            "id": "chunk_4__deregister_webhook_1",
            "code": "    async def _deregister_webhook(\n        self, webhook: integrations.Webhook, credentials: Credentials\n    ) -> None:\n"
        },
        {
            "id": "chunk_4__deregister_webhook_2",
            "code": "        \"\"\"\n        Note: Slant3D API currently doesn't provide a deregistration endpoint.\n        This would need to be handled through support.\n        \"\"\"\n"
        },
        {
            "id": "chunk_4__deregister_webhook_3",
            "code": "        # Log warning since we can't properly deregister\n        logger.warning(\n            f\"Warning: Manual deregistration required for webhook {webhook.id}\"\n        )\n"
        },
        {
            "id": "chunk_4__deregister_webhook_4",
            "code": "        pass\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_0_GlobalBlock_2",
            "to": "chunk_0_GlobalBlock_3"
        },
        {
            "from": "chunk_0_GlobalBlock_3",
            "to": "chunk_0_GlobalBlock_4"
        },
        {
            "from": "chunk_1_Slant3DWebhooksManager_1",
            "to": "chunk_1_Slant3DWebhooksManager_2"
        },
        {
            "from": "chunk_1_Slant3DWebhooksManager_2",
            "to": "chunk_1_Slant3DWebhooksManager_3"
        },
        {
            "from": "chunk_1_Slant3DWebhooksManager_3",
            "to": "chunk_1_Slant3DWebhooksManager_4"
        },
        {
            "from": "chunk_1_Slant3DWebhooksManager_4",
            "to": "chunk_1_Slant3DWebhooksManager_5"
        },
        {
            "from": "chunk_1_Slant3DWebhooksManager_5",
            "to": "chunk_1_Slant3DWebhooksManager_6"
        },
        {
            "from": "chunk_1_Slant3DWebhooksManager_6",
            "to": "chunk_1_Slant3DWebhooksManager_7"
        },
        {
            "from": "chunk_1_Slant3DWebhooksManager_6",
            "to": "chunk_1_Slant3DWebhooksManager_8"
        },
        {
            "from": "chunk_1_Slant3DWebhooksManager_8",
            "to": "chunk_1_Slant3DWebhooksManager_9"
        },
        {
            "from": "chunk_1_Slant3DWebhooksManager_10",
            "to": "chunk_1_Slant3DWebhooksManager_11"
        },
        {
            "from": "chunk_1_Slant3DWebhooksManager_11",
            "to": "chunk_1_Slant3DWebhooksManager_12"
        },
        {
            "from": "chunk_1_Slant3DWebhooksManager_12",
            "to": "chunk_1_Slant3DWebhooksManager_13"
        },
        {
            "from": "chunk_1_Slant3DWebhooksManager_12",
            "to": "chunk_1_Slant3DWebhooksManager_14"
        },
        {
            "from": "chunk_1_Slant3DWebhooksManager_14",
            "to": "chunk_1_Slant3DWebhooksManager_15"
        },
        {
            "from": "chunk_1_Slant3DWebhooksManager_15",
            "to": "chunk_1_Slant3DWebhooksManager_16"
        },
        {
            "from": "chunk_1_Slant3DWebhooksManager_17",
            "to": "chunk_1_Slant3DWebhooksManager_18"
        },
        {
            "from": "chunk_2__register_webhook_1",
            "to": "chunk_2__register_webhook_2"
        },
        {
            "from": "chunk_2__register_webhook_2",
            "to": "chunk_2__register_webhook_3"
        },
        {
            "from": "chunk_2__register_webhook_3",
            "to": "chunk_2__register_webhook_4"
        },
        {
            "from": "chunk_2__register_webhook_4",
            "to": "chunk_2__register_webhook_5"
        },
        {
            "from": "chunk_2__register_webhook_5",
            "to": "chunk_2__register_webhook_6"
        },
        {
            "from": "chunk_2__register_webhook_5",
            "to": "chunk_2__register_webhook_7"
        },
        {
            "from": "chunk_2__register_webhook_7",
            "to": "chunk_2__register_webhook_8"
        },
        {
            "from": "chunk_3_validate_payload_1",
            "to": "chunk_3_validate_payload_2"
        },
        {
            "from": "chunk_3_validate_payload_2",
            "to": "chunk_3_validate_payload_3"
        },
        {
            "from": "chunk_3_validate_payload_3",
            "to": "chunk_3_validate_payload_4"
        },
        {
            "from": "chunk_3_validate_payload_4",
            "to": "chunk_3_validate_payload_5"
        },
        {
            "from": "chunk_3_validate_payload_5",
            "to": "chunk_3_validate_payload_6"
        },
        {
            "from": "chunk_3_validate_payload_6",
            "to": "chunk_3_validate_payload_7"
        },
        {
            "from": "chunk_3_validate_payload_6",
            "to": "chunk_3_validate_payload_9"
        },
        {
            "from": "chunk_3_validate_payload_7",
            "to": "chunk_3_validate_payload_8"
        },
        {
            "from": "chunk_3_validate_payload_8",
            "to": "chunk_3_validate_payload_9"
        },
        {
            "from": "chunk_4__deregister_webhook_1",
            "to": "chunk_4__deregister_webhook_2"
        },
        {
            "from": "chunk_4__deregister_webhook_2",
            "to": "chunk_4__deregister_webhook_3"
        },
        {
            "from": "chunk_4__deregister_webhook_3",
            "to": "chunk_4__deregister_webhook_4"
        }
    ]
}