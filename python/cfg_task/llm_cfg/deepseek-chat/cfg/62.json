{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "from urllib.parse import parse_qs, urlparse\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "from youtube_transcript_api import YouTubeTranscriptApi\nfrom youtube_transcript_api.formatters import TextFormatter\n"
        },
        {
            "id": "chunk_0_GlobalBlock_3",
            "code": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n"
        },
        {
            "id": "chunk_0_GlobalBlock_4",
            "code": "\n\n"
        },
        {
            "id": "chunk_1_TranscribeYoutubeVideoBlock_1",
            "code": "class TranscribeYoutubeVideoBlock(Block):\n    class Input(BlockSchema):\n        youtube_url: str = SchemaField(\n            title=\"YouTube URL\",\n            description=\"The URL of the YouTube video to transcribe\",\n            placeholder=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\",\n        )\n"
        },
        {
            "id": "chunk_1_TranscribeYoutubeVideoBlock_2",
            "code": "    class Output(BlockSchema):\n        video_id: str = SchemaField(description=\"The extracted YouTube video ID\")\n        transcript: str = SchemaField(description=\"The transcribed text of the video\")\n        error: str = SchemaField(\n            description=\"Any error message if the transcription fails\"\n        )\n"
        },
        {
            "id": "chunk_1_TranscribeYoutubeVideoBlock_3",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"f3a8f7e1-4b1d-4e5f-9f2a-7c3d5a2e6b4c\",\n            input_schema=TranscribeYoutubeVideoBlock.Input,\n            output_schema=TranscribeYoutubeVideoBlock.Output,\n            description=\"Transcribes a YouTube video.\",\n            categories={BlockCategory.SOCIAL},\n            test_input={\"youtube_url\": \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\"},\n            test_output=[\n                (\"video_id\", \"dQw4w9WgXcQ\"),\n                (\n                    \"transcript\",\n                    \"Never gonna give you up\\nNever gonna let you down\",\n                ),\n            ],\n            test_mock={\n                \"get_transcript\": lambda video_id: [\n                    {\"text\": \"Never gonna give you up\"},\n                    {\"text\": \"Never gonna let you down\"},\n                ],\n            },\n        )\n"
        },
        {
            "id": "chunk_1_TranscribeYoutubeVideoBlock_4",
            "code": "    @staticmethod\n    def extract_video_id(url: str) -> str:\n        parsed_url = urlparse(url)\n        if parsed_url.netloc == \"youtu.be\":\n            return parsed_url.path[1:]\n        if parsed_url.netloc in (\"www.youtube.com\", \"youtube.com\"):\n            if parsed_url.path == \"/watch\":\n                p = parse_qs(parsed_url.query)\n                return p[\"v\"][0]\n            if parsed_url.path[:7] == \"/embed/\":\n                return parsed_url.path.split(\"/\")[2]\n            if parsed_url.path[:3] == \"/v/\":\n                return parsed_url.path.split(\"/\")[2]\n        raise ValueError(f\"Invalid YouTube URL: {url}\")\n"
        },
        {
            "id": "chunk_1_TranscribeYoutubeVideoBlock_5",
            "code": "    @staticmethod\n    def get_transcript(video_id: str):\n        try:\n            transcript_list = YouTubeTranscriptApi.list_transcripts(video_id)\n\n            if not transcript_list:\n                raise ValueError(f\"No transcripts found for the video: {video_id}\")\n\n            for transcript in transcript_list:\n                first_transcript = transcript_list.find_transcript(\n                    [transcript.language_code]\n                )\n                return YouTubeTranscriptApi.get_transcript(\n                    video_id, languages=[first_transcript.language_code]\n                )\n\n        except Exception:\n            raise ValueError(f\"No transcripts found for the video: {video_id}\")\n"
        },
        {
            "id": "chunk_1_TranscribeYoutubeVideoBlock_6",
            "code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        video_id = self.extract_video_id(input_data.youtube_url)\n        yield \"video_id\", video_id\n\n        transcript = self.get_transcript(video_id)\n        formatter = TextFormatter()\n        transcript_text = formatter.format_transcript(transcript)\n\n        yield \"transcript\", transcript_text\n"
        },
        {
            "id": "chunk_2_Input_1",
            "code": "    class Input(BlockSchema):\n        youtube_url: str = SchemaField(\n            title=\"YouTube URL\",\n            description=\"The URL of the YouTube video to transcribe\",\n            placeholder=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\",\n        )\n"
        },
        {
            "id": "chunk_3_Output_1",
            "code": "    class Output(BlockSchema):\n"
        },
        {
            "id": "chunk_3_Output_2",
            "code": "        video_id: str = SchemaField(description=\"The extracted YouTube video ID\")\n        transcript: str = SchemaField(description=\"The transcribed text of the video\")\n"
        },
        {
            "id": "chunk_3_Output_3",
            "code": "        error: str = SchemaField(\n            description=\"Any error message if the transcription fails\"\n        )\n"
        },
        {
            "id": "chunk_4___init___1",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"f3a8f7e1-4b1d-4e5f-9f2a-7c3d5a2e6b4c\",\n            input_schema=TranscribeYoutubeVideoBlock.Input,\n            output_schema=TranscribeYoutubeVideoBlock.Output,\n            description=\"Transcribes a YouTube video.\",\n            categories={BlockCategory.SOCIAL},\n            test_input={\"youtube_url\": \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\"},\n            test_output=[\n                (\"video_id\", \"dQw4w9WgXcQ\"),\n                (\n                    \"transcript\",\n                    \"Never gonna give you up\\nNever gonna let you down\",\n                ),\n            ],\n            test_mock={\n                \"get_transcript\": lambda video_id: [\n                    {\"text\": \"Never gonna give you up\"},\n                    {\"text\": \"Never gonna let you down\"},\n                ],\n            },\n        )\n"
        },
        {
            "id": "chunk_5_extract_video_id_1",
            "code": "    @staticmethod\n    def extract_video_id(url: str) -> str:\n"
        },
        {
            "id": "chunk_5_extract_video_id_2",
            "code": "        parsed_url = urlparse(url)\n"
        },
        {
            "id": "chunk_5_extract_video_id_3",
            "code": "        if parsed_url.netloc == \"youtu.be\":\n            return parsed_url.path[1:]\n"
        },
        {
            "id": "chunk_5_extract_video_id_4",
            "code": "        if parsed_url.netloc in (\"www.youtube.com\", \"youtube.com\"):\n"
        },
        {
            "id": "chunk_5_extract_video_id_5",
            "code": "            if parsed_url.path == \"/watch\":\n                p = parse_qs(parsed_url.query)\n                return p[\"v\"][0]\n"
        },
        {
            "id": "chunk_5_extract_video_id_6",
            "code": "            if parsed_url.path[:7] == \"/embed/\":\n                return parsed_url.path.split(\"/\")[2]\n"
        },
        {
            "id": "chunk_5_extract_video_id_7",
            "code": "            if parsed_url.path[:3] == \"/v/\":\n                return parsed_url.path.split(\"/\")[2]\n"
        },
        {
            "id": "chunk_5_extract_video_id_8",
            "code": "        raise ValueError(f\"Invalid YouTube URL: {url}\")\n"
        },
        {
            "id": "chunk_6_get_transcript_1",
            "code": "    @staticmethod\n    def get_transcript(video_id: str):\n"
        },
        {
            "id": "chunk_6_get_transcript_2",
            "code": "        try:\n            transcript_list = YouTubeTranscriptApi.list_transcripts(video_id)\n"
        },
        {
            "id": "chunk_6_get_transcript_3",
            "code": "            if not transcript_list:\n                raise ValueError(f\"No transcripts found for the video: {video_id}\")\n"
        },
        {
            "id": "chunk_6_get_transcript_4",
            "code": "            for transcript in transcript_list:\n                first_transcript = transcript_list.find_transcript(\n                    [transcript.language_code]\n                )\n                return YouTubeTranscriptApi.get_transcript(\n                    video_id, languages=[first_transcript.language_code]\n                )\n"
        },
        {
            "id": "chunk_6_get_transcript_5",
            "code": "        except Exception:\n            raise ValueError(f\"No transcripts found for the video: {video_id}\")\n"
        },
        {
            "id": "chunk_7_run_1",
            "code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        video_id = self.extract_video_id(input_data.youtube_url)\n        yield \"video_id\", video_id\n"
        },
        {
            "id": "chunk_7_run_2",
            "code": "        transcript = self.get_transcript(video_id)\n        formatter = TextFormatter()\n        transcript_text = formatter.format_transcript(transcript)\n"
        },
        {
            "id": "chunk_7_run_3",
            "code": "        yield \"transcript\", transcript_text\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_0_GlobalBlock_2",
            "to": "chunk_0_GlobalBlock_3"
        },
        {
            "from": "chunk_0_GlobalBlock_3",
            "to": "chunk_0_GlobalBlock_4"
        },
        {
            "from": "chunk_1_TranscribeYoutubeVideoBlock_1",
            "to": "chunk_1_TranscribeYoutubeVideoBlock_2"
        },
        {
            "from": "chunk_1_TranscribeYoutubeVideoBlock_2",
            "to": "chunk_1_TranscribeYoutubeVideoBlock_3"
        },
        {
            "from": "chunk_1_TranscribeYoutubeVideoBlock_3",
            "to": "chunk_1_TranscribeYoutubeVideoBlock_4"
        },
        {
            "from": "chunk_1_TranscribeYoutubeVideoBlock_3",
            "to": "chunk_1_TranscribeYoutubeVideoBlock_5"
        },
        {
            "from": "chunk_1_TranscribeYoutubeVideoBlock_4",
            "to": "chunk_1_TranscribeYoutubeVideoBlock_6"
        },
        {
            "from": "chunk_1_TranscribeYoutubeVideoBlock_5",
            "to": "chunk_1_TranscribeYoutubeVideoBlock_6"
        },
        {
            "from": "chunk_3_Output_1",
            "to": "chunk_3_Output_2"
        },
        {
            "from": "chunk_3_Output_2",
            "to": "chunk_3_Output_3"
        },
        {
            "from": "chunk_5_extract_video_id_1",
            "to": "chunk_5_extract_video_id_2"
        },
        {
            "from": "chunk_5_extract_video_id_2",
            "to": "chunk_5_extract_video_id_3"
        },
        {
            "from": "chunk_5_extract_video_id_2",
            "to": "chunk_5_extract_video_id_4"
        },
        {
            "from": "chunk_5_extract_video_id_4",
            "to": "chunk_5_extract_video_id_5"
        },
        {
            "from": "chunk_5_extract_video_id_4",
            "to": "chunk_5_extract_video_id_6"
        },
        {
            "from": "chunk_5_extract_video_id_4",
            "to": "chunk_5_extract_video_id_7"
        },
        {
            "from": "chunk_5_extract_video_id_4",
            "to": "chunk_5_extract_video_id_8"
        },
        {
            "from": "chunk_6_get_transcript_1",
            "to": "chunk_6_get_transcript_2"
        },
        {
            "from": "chunk_6_get_transcript_2",
            "to": "chunk_6_get_transcript_3"
        },
        {
            "from": "chunk_6_get_transcript_3",
            "to": "chunk_6_get_transcript_4"
        },
        {
            "from": "chunk_6_get_transcript_3",
            "to": "chunk_6_get_transcript_5"
        },
        {
            "from": "chunk_7_run_1",
            "to": "chunk_7_run_2"
        },
        {
            "from": "chunk_7_run_2",
            "to": "chunk_7_run_3"
        }
    ]
}