{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "import subprocess\nimport sys\nimport time\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "\n\n"
        },
        {
            "id": "chunk_1_wait_for_postgres_1",
            "code": "def wait_for_postgres(max_retries=5, delay=5):\n"
        },
        {
            "id": "chunk_1_wait_for_postgres_2",
            "code": "    for _ in range(max_retries):\n"
        },
        {
            "id": "chunk_1_wait_for_postgres_3",
            "code": "        try:\n            result = subprocess.run(\n                [\n                    \"docker\",\n                    \"compose\",\n                    \"-f\",\n                    \"docker-compose.test.yaml\",\n                    \"exec\",\n                    \"postgres-test\",\n                    \"pg_isready\",\n                    \"-U\",\n                    \"postgres\",\n                    \"-d\",\n                    \"postgres\",\n                ],\n                check=True,\n                capture_output=True,\n                text=True,\n            )\n"
        },
        {
            "id": "chunk_1_wait_for_postgres_4",
            "code": "            if \"accepting connections\" in result.stdout:\n                print(\"PostgreSQL is ready.\")\n                return True\n"
        },
        {
            "id": "chunk_1_wait_for_postgres_5",
            "code": "        except subprocess.CalledProcessError:\n            print(f\"PostgreSQL is not ready yet. Retrying in {delay} seconds...\")\n            time.sleep(delay)\n"
        },
        {
            "id": "chunk_1_wait_for_postgres_6",
            "code": "    print(\"Failed to connect to PostgreSQL.\")\n    return False\n"
        },
        {
            "id": "chunk_2_GlobalBlock_1",
            "code": "\n\n\n"
        },
        {
            "id": "chunk_3_run_command_1",
            "code": "def run_command(command, check=True):\n"
        },
        {
            "id": "chunk_3_run_command_2",
            "code": "    try:\n        subprocess.run(command, check=check)\n"
        },
        {
            "id": "chunk_3_run_command_3",
            "code": "    except subprocess.CalledProcessError as e:\n        print(f\"Command failed: {e}\")\n        sys.exit(1)\n"
        },
        {
            "id": "chunk_4_GlobalBlock_1",
            "code": "\n\n"
        },
        {
            "id": "chunk_5_test_1",
            "code": "def test():\n    # Start PostgreSQL with Docker Compose\n    run_command(\n        [\n            \"docker\",\n            \"compose\",\n            \"-f\",\n            \"docker-compose.test.yaml\",\n            \"up\",\n            \"-d\",\n            \"postgres-test\",\n        ]\n    )\n"
        },
        {
            "id": "chunk_5_test_2",
            "code": "    if not wait_for_postgres():\n        run_command([\"docker\", \"compose\", \"-f\", \"docker-compose.test.yaml\", \"down\"])\n        sys.exit(1)\n"
        },
        {
            "id": "chunk_5_test_3",
            "code": "    # Run Prisma migrations\n    run_command([\"prisma\", \"migrate\", \"dev\"])\n"
        },
        {
            "id": "chunk_5_test_4",
            "code": "    # Run the tests\n    result = subprocess.run([\"pytest\"] + sys.argv[1:], check=False)\n"
        },
        {
            "id": "chunk_5_test_5",
            "code": "    run_command([\"docker\", \"compose\", \"-f\", \"docker-compose.test.yaml\", \"down\"])\n\n    sys.exit(result.returncode)\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_1_wait_for_postgres_1",
            "to": "chunk_1_wait_for_postgres_2"
        },
        {
            "from": "chunk_1_wait_for_postgres_2",
            "to": "chunk_1_wait_for_postgres_3"
        },
        {
            "from": "chunk_1_wait_for_postgres_2",
            "to": "chunk_1_wait_for_postgres_6"
        },
        {
            "from": "chunk_1_wait_for_postgres_3",
            "to": "chunk_1_wait_for_postgres_4"
        },
        {
            "from": "chunk_1_wait_for_postgres_3",
            "to": "chunk_1_wait_for_postgres_5"
        },
        {
            "from": "chunk_1_wait_for_postgres_5",
            "to": "chunk_1_wait_for_postgres_2"
        },
        {
            "from": "chunk_3_run_command_1",
            "to": "chunk_3_run_command_2"
        },
        {
            "from": "chunk_3_run_command_2",
            "to": "chunk_3_run_command_3"
        },
        {
            "from": "chunk_5_test_1",
            "to": "chunk_5_test_2"
        },
        {
            "from": "chunk_5_test_2",
            "to": "chunk_5_test_3"
        },
        {
            "from": "chunk_5_test_2",
            "to": "chunk_5_test_5"
        },
        {
            "from": "chunk_5_test_3",
            "to": "chunk_5_test_4"
        },
        {
            "from": "chunk_5_test_4",
            "to": "chunk_5_test_5"
        }
    ]
}