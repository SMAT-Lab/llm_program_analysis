{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "from abc import ABCMeta, abstractmethod\nfrom collections import deque\nfrom enum import Enum\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "\n\n\n"
        },
        {
            "id": "chunk_1_Rank_1",
            "code": "class Rank(Enum):\n"
        },
        {
            "id": "chunk_1_Rank_2",
            "code": "    OPERATOR = 0\n    SUPERVISOR = 1\n    DIRECTOR = 2\n"
        },
        {
            "id": "chunk_2_Employee_1",
            "code": "class Employee(metaclass=ABCMeta):\n"
        },
        {
            "id": "chunk_2_Employee_2",
            "code": "    def __init__(self, employee_id, name, rank, call_center):\n        self.employee_id = employee_id\n        self.name = name\n        self.rank = rank\n        self.call = None\n        self.call_center = call_center\n"
        },
        {
            "id": "chunk_2_Employee_3",
            "code": "    def take_call(self, call):\n        \"\"\"Assume the employee will always successfully take the call.\"\"\"\n        self.call = call\n        self.call.employee = self\n        self.call.state = CallState.IN_PROGRESS\n"
        },
        {
            "id": "chunk_2_Employee_4",
            "code": "    def complete_call(self):\n        self.call.state = CallState.COMPLETE\n        self.call_center.notify_call_completed(self.call)\n"
        },
        {
            "id": "chunk_2_Employee_5",
            "code": "    @abstractmethod\n    def escalate_call(self):\n        pass\n"
        },
        {
            "id": "chunk_2_Employee_6",
            "code": "    def _escalate_call(self):\n        self.call.state = CallState.READY\n        call = self.call\n        self.call = None\n        self.call_center.notify_call_escalated(call)\n"
        },
        {
            "id": "chunk_3_Operator_1",
            "code": "class Operator(Employee):\n"
        },
        {
            "id": "chunk_3_Operator_2",
            "code": "    def __init__(self, employee_id, name):\n        super(Operator, self).__init__(employee_id, name, Rank.OPERATOR)\n"
        },
        {
            "id": "chunk_3_Operator_3",
            "code": "    def escalate_call(self):\n        self.call.level = Rank.SUPERVISOR\n        self._escalate_call()\n"
        },
        {
            "id": "chunk_4_Supervisor_1",
            "code": "class Supervisor(Employee):\n"
        },
        {
            "id": "chunk_4_Supervisor_2",
            "code": "    def __init__(self, employee_id, name):\n        super(Operator, self).__init__(employee_id, name, Rank.SUPERVISOR)\n"
        },
        {
            "id": "chunk_4_Supervisor_3",
            "code": "    def escalate_call(self):\n        self.call.level = Rank.DIRECTOR\n        self._escalate_call()\n"
        },
        {
            "id": "chunk_5_Director_1",
            "code": "class Director(Employee):\n"
        },
        {
            "id": "chunk_5_Director_2",
            "code": "    def __init__(self, employee_id, name):\n        super(Operator, self).__init__(employee_id, name, Rank.DIRECTOR)\n"
        },
        {
            "id": "chunk_5_Director_3",
            "code": "    def escalate_call(self):\n        raise NotImplementedError('Directors must be able to handle any call')\n"
        },
        {
            "id": "chunk_6_CallState_1",
            "code": "class CallState(Enum):\n"
        },
        {
            "id": "chunk_6_CallState_2",
            "code": "    READY = 0\n    IN_PROGRESS = 1\n    COMPLETE = 2\n"
        },
        {
            "id": "chunk_7_Call_1",
            "code": "class Call(object):\n"
        },
        {
            "id": "chunk_7_Call_2",
            "code": "    def __init__(self, rank):\n        self.state = CallState.READY\n        self.rank = rank\n        self.employee = None\n"
        },
        {
            "id": "chunk_8_CallCenter_1",
            "code": "class CallCenter(object):\n\n"
        },
        {
            "id": "chunk_8_CallCenter_2",
            "code": "    def __init__(self, operators, supervisors, directors):\n        self.operators = operators\n        self.supervisors = supervisors\n        self.directors = directors\n        self.queued_calls = deque()\n"
        },
        {
            "id": "chunk_8_CallCenter_3",
            "code": "    def dispatch_call(self, call):\n        if call.rank not in (Rank.OPERATOR, Rank.SUPERVISOR, Rank.DIRECTOR):\n            raise ValueError('Invalid call rank: {}'.format(call.rank))\n"
        },
        {
            "id": "chunk_8_CallCenter_4",
            "code": "        employee = None\n"
        },
        {
            "id": "chunk_8_CallCenter_5",
            "code": "        if call.rank == Rank.OPERATOR:\n            employee = self._dispatch_call(call, self.operators)\n"
        },
        {
            "id": "chunk_8_CallCenter_6",
            "code": "        if call.rank == Rank.SUPERVISOR or employee is None:\n            employee = self._dispatch_call(call, self.supervisors)\n"
        },
        {
            "id": "chunk_8_CallCenter_7",
            "code": "        if call.rank == Rank.DIRECTOR or employee is None:\n            employee = self._dispatch_call(call, self.directors)\n"
        },
        {
            "id": "chunk_8_CallCenter_8",
            "code": "        if employee is None:\n            self.queued_calls.append(call)\n"
        },
        {
            "id": "chunk_8_CallCenter_9",
            "code": "    def _dispatch_call(self, call, employees):\n        for employee in employees:\n            if employee.call is None:\n                employee.take_call(call)\n                return employee\n        return None\n"
        },
        {
            "id": "chunk_8_CallCenter_10",
            "code": "    def notify_call_escalated(self, call):\n        pass\n"
        },
        {
            "id": "chunk_8_CallCenter_11",
            "code": "    def notify_call_completed(self, call):\n        pass\n"
        },
        {
            "id": "chunk_8_CallCenter_12",
            "code": "    def dispatch_queued_call_to_newly_freed_employee(self, call, employee):\n        pass\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_1_Rank_1",
            "to": "chunk_1_Rank_2"
        },
        {
            "from": "chunk_2_Employee_1",
            "to": "chunk_2_Employee_2"
        },
        {
            "from": "chunk_2_Employee_2",
            "to": "chunk_2_Employee_3"
        },
        {
            "from": "chunk_2_Employee_2",
            "to": "chunk_2_Employee_4"
        },
        {
            "from": "chunk_2_Employee_2",
            "to": "chunk_2_Employee_5"
        },
        {
            "from": "chunk_2_Employee_2",
            "to": "chunk_2_Employee_6"
        },
        {
            "from": "chunk_3_Operator_1",
            "to": "chunk_3_Operator_2"
        },
        {
            "from": "chunk_3_Operator_2",
            "to": "chunk_3_Operator_3"
        },
        {
            "from": "chunk_4_Supervisor_1",
            "to": "chunk_4_Supervisor_2"
        },
        {
            "from": "chunk_4_Supervisor_2",
            "to": "chunk_4_Supervisor_3"
        },
        {
            "from": "chunk_5_Director_1",
            "to": "chunk_5_Director_2"
        },
        {
            "from": "chunk_5_Director_2",
            "to": "chunk_5_Director_3"
        },
        {
            "from": "chunk_6_CallState_1",
            "to": "chunk_6_CallState_2"
        },
        {
            "from": "chunk_7_Call_1",
            "to": "chunk_7_Call_2"
        },
        {
            "from": "chunk_8_CallCenter_1",
            "to": "chunk_8_CallCenter_2"
        },
        {
            "from": "chunk_8_CallCenter_2",
            "to": "chunk_8_CallCenter_3"
        },
        {
            "from": "chunk_8_CallCenter_3",
            "to": "chunk_8_CallCenter_4"
        },
        {
            "from": "chunk_8_CallCenter_4",
            "to": "chunk_8_CallCenter_5"
        },
        {
            "from": "chunk_8_CallCenter_5",
            "to": "chunk_8_CallCenter_6"
        },
        {
            "from": "chunk_8_CallCenter_6",
            "to": "chunk_8_CallCenter_7"
        },
        {
            "from": "chunk_8_CallCenter_7",
            "to": "chunk_8_CallCenter_8"
        }
    ]
}