{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "from backend.blocks.jina._auth import (\n    JinaCredentials,\n    JinaCredentialsField,\n    JinaCredentialsInput,\n)\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\n"
        },
        {
            "id": "chunk_0_GlobalBlock_3",
            "code": "from backend.data.model import SchemaField\n"
        },
        {
            "id": "chunk_0_GlobalBlock_4",
            "code": "from backend.util.request import requests\n"
        },
        {
            "id": "chunk_0_GlobalBlock_5",
            "code": "\n\n\n"
        },
        {
            "id": "chunk_1_JinaChunkingBlock_1",
            "code": "class JinaChunkingBlock(Block):\n"
        },
        {
            "id": "chunk_1_JinaChunkingBlock_2",
            "code": "    class Input(BlockSchema):\n        texts: list = SchemaField(description=\"List of texts to chunk\")\n\n        credentials: JinaCredentialsInput = JinaCredentialsField()\n        max_chunk_length: int = SchemaField(\n            description=\"Maximum length of each chunk\", default=1000\n        )\n        return_tokens: bool = SchemaField(\n            description=\"Whether to return token information\", default=False\n        )\n"
        },
        {
            "id": "chunk_1_JinaChunkingBlock_3",
            "code": "    class Output(BlockSchema):\n        chunks: list = SchemaField(description=\"List of chunked texts\")\n        tokens: list = SchemaField(\n            description=\"List of token information for each chunk\", optional=True\n        )\n"
        },
        {
            "id": "chunk_1_JinaChunkingBlock_4",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"806fb15e-830f-4796-8692-557d300ff43c\",\n            description=\"Chunks texts using Jina AI's segmentation service\",\n            categories={BlockCategory.AI, BlockCategory.TEXT},\n            input_schema=JinaChunkingBlock.Input,\n            output_schema=JinaChunkingBlock.Output,\n        )\n"
        },
        {
            "id": "chunk_1_JinaChunkingBlock_5",
            "code": "    def run(\n        self, input_data: Input, *, credentials: JinaCredentials, **kwargs\n    ) -> BlockOutput:\n"
        },
        {
            "id": "chunk_1_JinaChunkingBlock_6",
            "code": "        url = \"https://segment.jina.ai/\"\n        headers = {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": f\"Bearer {credentials.api_key.get_secret_value()}\",\n        }\n"
        },
        {
            "id": "chunk_1_JinaChunkingBlock_7",
            "code": "        all_chunks = []\n        all_tokens = []\n"
        },
        {
            "id": "chunk_1_JinaChunkingBlock_8",
            "code": "        for text in input_data.texts:\n            data = {\n                \"content\": text,\n                \"return_tokens\": str(input_data.return_tokens).lower(),\n                \"return_chunks\": \"true\",\n                \"max_chunk_length\": str(input_data.max_chunk_length),\n            }\n"
        },
        {
            "id": "chunk_1_JinaChunkingBlock_9",
            "code": "            response = requests.post(url, headers=headers, json=data)\n            result = response.json()\n"
        },
        {
            "id": "chunk_1_JinaChunkingBlock_10",
            "code": "            all_chunks.extend(result.get(\"chunks\", []))\n            if input_data.return_tokens:\n                all_tokens.extend(result.get(\"tokens\", []))\n"
        },
        {
            "id": "chunk_1_JinaChunkingBlock_11",
            "code": "        yield \"chunks\", all_chunks\n"
        },
        {
            "id": "chunk_1_JinaChunkingBlock_12",
            "code": "        if input_data.return_tokens:\n            yield \"tokens\", all_tokens\n"
        },
        {
            "id": "chunk_2_JinaChunkingBlock.Input_1",
            "code": "    class Input(BlockSchema):\n        texts: list = SchemaField(description=\"List of texts to chunk\")\n"
        },
        {
            "id": "chunk_2_JinaChunkingBlock.Input_2",
            "code": "        credentials: JinaCredentialsInput = JinaCredentialsField()\n"
        },
        {
            "id": "chunk_2_JinaChunkingBlock.Input_3",
            "code": "        max_chunk_length: int = SchemaField(\n            description=\"Maximum length of each chunk\", default=1000\n        )\n"
        },
        {
            "id": "chunk_2_JinaChunkingBlock.Input_4",
            "code": "        return_tokens: bool = SchemaField(\n            description=\"Whether to return token information\", default=False\n        )\n"
        },
        {
            "id": "chunk_3_JinaChunkingBlock.Output_1",
            "code": "    class Output(BlockSchema):\n        chunks: list = SchemaField(description=\"List of chunked texts\")\n"
        },
        {
            "id": "chunk_3_JinaChunkingBlock.Output_2",
            "code": "        tokens: list = SchemaField(\n            description=\"List of token information for each chunk\", optional=True\n        )\n"
        },
        {
            "id": "chunk_4_JinaChunkingBlock.__init___1",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"806fb15e-830f-4796-8692-557d300ff43c\",\n            description=\"Chunks texts using Jina AI's segmentation service\",\n            categories={BlockCategory.AI, BlockCategory.TEXT},\n            input_schema=JinaChunkingBlock.Input,\n            output_schema=JinaChunkingBlock.Output,\n        )\n"
        },
        {
            "id": "chunk_5_JinaChunkingBlock.run_1",
            "code": "    def run(\n        self, input_data: Input, *, credentials: JinaCredentials, **kwargs\n    ) -> BlockOutput:\n"
        },
        {
            "id": "chunk_5_JinaChunkingBlock.run_2",
            "code": "        url = \"https://segment.jina.ai/\"\n        headers = {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": f\"Bearer {credentials.api_key.get_secret_value()}\",\n        }\n"
        },
        {
            "id": "chunk_5_JinaChunkingBlock.run_3",
            "code": "        all_chunks = []\n        all_tokens = []\n"
        },
        {
            "id": "chunk_5_JinaChunkingBlock.run_4",
            "code": "        for text in input_data.texts:\n            data = {\n                \"content\": text,\n                \"return_tokens\": str(input_data.return_tokens).lower(),\n                \"return_chunks\": \"true\",\n                \"max_chunk_length\": str(input_data.max_chunk_length),\n            }\n"
        },
        {
            "id": "chunk_5_JinaChunkingBlock.run_5",
            "code": "            response = requests.post(url, headers=headers, json=data)\n            result = response.json()\n"
        },
        {
            "id": "chunk_5_JinaChunkingBlock.run_6",
            "code": "            all_chunks.extend(result.get(\"chunks\", []))\n"
        },
        {
            "id": "chunk_5_JinaChunkingBlock.run_7",
            "code": "            if input_data.return_tokens:\n                all_tokens.extend(result.get(\"tokens\", []))\n"
        },
        {
            "id": "chunk_5_JinaChunkingBlock.run_8",
            "code": "        yield \"chunks\", all_chunks\n"
        },
        {
            "id": "chunk_5_JinaChunkingBlock.run_9",
            "code": "        if input_data.return_tokens:\n            yield \"tokens\", all_tokens\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_0_GlobalBlock_2",
            "to": "chunk_0_GlobalBlock_3"
        },
        {
            "from": "chunk_0_GlobalBlock_3",
            "to": "chunk_0_GlobalBlock_4"
        },
        {
            "from": "chunk_0_GlobalBlock_4",
            "to": "chunk_0_GlobalBlock_5"
        },
        {
            "from": "chunk_1_JinaChunkingBlock_1",
            "to": "chunk_1_JinaChunkingBlock_2"
        },
        {
            "from": "chunk_1_JinaChunkingBlock_2",
            "to": "chunk_1_JinaChunkingBlock_3"
        },
        {
            "from": "chunk_1_JinaChunkingBlock_3",
            "to": "chunk_1_JinaChunkingBlock_4"
        },
        {
            "from": "chunk_1_JinaChunkingBlock_4",
            "to": "chunk_1_JinaChunkingBlock_5"
        },
        {
            "from": "chunk_1_JinaChunkingBlock_5",
            "to": "chunk_1_JinaChunkingBlock_6"
        },
        {
            "from": "chunk_1_JinaChunkingBlock_6",
            "to": "chunk_1_JinaChunkingBlock_7"
        },
        {
            "from": "chunk_1_JinaChunkingBlock_7",
            "to": "chunk_1_JinaChunkingBlock_8"
        },
        {
            "from": "chunk_1_JinaChunkingBlock_8",
            "to": "chunk_1_JinaChunkingBlock_9"
        },
        {
            "from": "chunk_1_JinaChunkingBlock_9",
            "to": "chunk_1_JinaChunkingBlock_10"
        },
        {
            "from": "chunk_1_JinaChunkingBlock_10",
            "to": "chunk_1_JinaChunkingBlock_8"
        },
        {
            "from": "chunk_1_JinaChunkingBlock_10",
            "to": "chunk_1_JinaChunkingBlock_11"
        },
        {
            "from": "chunk_1_JinaChunkingBlock_11",
            "to": "chunk_1_JinaChunkingBlock_12"
        },
        {
            "from": "chunk_2_JinaChunkingBlock.Input_1",
            "to": "chunk_2_JinaChunkingBlock.Input_2"
        },
        {
            "from": "chunk_2_JinaChunkingBlock.Input_2",
            "to": "chunk_2_JinaChunkingBlock.Input_3"
        },
        {
            "from": "chunk_2_JinaChunkingBlock.Input_3",
            "to": "chunk_2_JinaChunkingBlock.Input_4"
        },
        {
            "from": "chunk_3_JinaChunkingBlock.Output_1",
            "to": "chunk_3_JinaChunkingBlock.Output_2"
        },
        {
            "from": "chunk_5_JinaChunkingBlock.run_1",
            "to": "chunk_5_JinaChunkingBlock.run_2"
        },
        {
            "from": "chunk_5_JinaChunkingBlock.run_2",
            "to": "chunk_5_JinaChunkingBlock.run_3"
        },
        {
            "from": "chunk_5_JinaChunkingBlock.run_3",
            "to": "chunk_5_JinaChunkingBlock.run_4"
        },
        {
            "from": "chunk_5_JinaChunkingBlock.run_4",
            "to": "chunk_5_JinaChunkingBlock.run_5"
        },
        {
            "from": "chunk_5_JinaChunkingBlock.run_5",
            "to": "chunk_5_JinaChunkingBlock.run_6"
        },
        {
            "from": "chunk_5_JinaChunkingBlock.run_6",
            "to": "chunk_5_JinaChunkingBlock.run_7"
        },
        {
            "from": "chunk_5_JinaChunkingBlock.run_6",
            "to": "chunk_5_JinaChunkingBlock.run_8"
        },
        {
            "from": "chunk_5_JinaChunkingBlock.run_7",
            "to": "chunk_5_JinaChunkingBlock.run_8"
        },
        {
            "from": "chunk_5_JinaChunkingBlock.run_8",
            "to": "chunk_5_JinaChunkingBlock.run_9"
        }
    ]
}