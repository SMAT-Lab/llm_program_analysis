{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "from typing import cast\nfrom unittest.mock import AsyncMock\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "import pytest\nfrom fastapi import WebSocket, WebSocketDisconnect\n"
        },
        {
            "id": "chunk_0_GlobalBlock_3",
            "code": "from backend.server.conn_manager import ConnectionManager\nfrom backend.server.ws_api import (\n    Methods,\n    WsMessage,\n    handle_subscribe,\n    handle_unsubscribe,\n    websocket_router,\n)\n"
        },
        {
            "id": "chunk_1_mock_websocket_1",
            "code": "@pytest.fixture\n"
        },
        {
            "id": "chunk_1_mock_websocket_2",
            "code": "def mock_websocket() -> AsyncMock:\n    return AsyncMock(spec=WebSocket)\n"
        },
        {
            "id": "chunk_2_mock_manager_1",
            "code": "@pytest.fixture\n"
        },
        {
            "id": "chunk_2_mock_manager_2",
            "code": "def mock_manager() -> AsyncMock:\n    return AsyncMock(spec=ConnectionManager)\n"
        },
        {
            "id": "chunk_3_test_websocket_router_subscribe_1",
            "code": "@pytest.mark.asyncio\nasync def test_websocket_router_subscribe(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n"
        },
        {
            "id": "chunk_3_test_websocket_router_subscribe_2",
            "code": "    mock_websocket.receive_text.side_effect = [\n        WsMessage(\n            method=Methods.SUBSCRIBE, data={\"graph_id\": \"test_graph\"}\n        ).model_dump_json(),\n        WebSocketDisconnect(),\n    ]\n"
        },
        {
            "id": "chunk_3_test_websocket_router_subscribe_3",
            "code": "    await websocket_router(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)\n    )\n"
        },
        {
            "id": "chunk_3_test_websocket_router_subscribe_4",
            "code": "    mock_manager.connect.assert_called_once_with(mock_websocket)\n    mock_manager.subscribe.assert_called_once_with(\"test_graph\", mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"subscribe\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]\n    mock_manager.disconnect.assert_called_once_with(mock_websocket)\n"
        },
        {
            "id": "chunk_4_test_websocket_router_unsubscribe_1",
            "code": "@pytest.mark.asyncio\nasync def test_websocket_router_unsubscribe(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n"
        },
        {
            "id": "chunk_4_test_websocket_router_unsubscribe_2",
            "code": "    mock_websocket.receive_text.side_effect = [\n        WsMessage(\n            method=Methods.UNSUBSCRIBE, data={\"graph_id\": \"test_graph\"}\n        ).model_dump_json(),\n        WebSocketDisconnect(),\n    ]\n"
        },
        {
            "id": "chunk_4_test_websocket_router_unsubscribe_3",
            "code": "    await websocket_router(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)\n    )\n"
        },
        {
            "id": "chunk_4_test_websocket_router_unsubscribe_4",
            "code": "    mock_manager.connect.assert_called_once_with(mock_websocket)\n    mock_manager.unsubscribe.assert_called_once_with(\"test_graph\", mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"unsubscribe\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]\n    mock_manager.disconnect.assert_called_once_with(mock_websocket)\n"
        },
        {
            "id": "chunk_5_test_websocket_router_invalid_method_1",
            "code": "@pytest.mark.asyncio\nasync def test_websocket_router_invalid_method(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n"
        },
        {
            "id": "chunk_5_test_websocket_router_invalid_method_2",
            "code": "    mock_websocket.receive_text.side_effect = [\n        WsMessage(method=Methods.EXECUTION_EVENT).model_dump_json(),\n        WebSocketDisconnect(),\n    ]\n"
        },
        {
            "id": "chunk_5_test_websocket_router_invalid_method_3",
            "code": "    await websocket_router(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager)\n    )\n"
        },
        {
            "id": "chunk_5_test_websocket_router_invalid_method_4",
            "code": "    mock_manager.connect.assert_called_once_with(mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":false' in mock_websocket.send_text.call_args[0][0]\n    mock_manager.disconnect.assert_called_once_with(mock_websocket)\n"
        },
        {
            "id": "chunk_6_test_handle_subscribe_success_1",
            "code": "@pytest.mark.asyncio\nasync def test_handle_subscribe_success(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n"
        },
        {
            "id": "chunk_6_test_handle_subscribe_success_2",
            "code": "    message = WsMessage(method=Methods.SUBSCRIBE, data={\"graph_id\": \"test_graph\"})\n"
        },
        {
            "id": "chunk_6_test_handle_subscribe_success_3",
            "code": "    await handle_subscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )\n"
        },
        {
            "id": "chunk_6_test_handle_subscribe_success_4",
            "code": "    mock_manager.subscribe.assert_called_once_with(\"test_graph\", mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"subscribe\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]\n"
        },
        {
            "id": "chunk_7_test_handle_subscribe_missing_data_1",
            "code": "@pytest.mark.asyncio\nasync def test_handle_subscribe_missing_data(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n"
        },
        {
            "id": "chunk_7_test_handle_subscribe_missing_data_2",
            "code": "    message = WsMessage(method=Methods.SUBSCRIBE)\n"
        },
        {
            "id": "chunk_7_test_handle_subscribe_missing_data_3",
            "code": "    await handle_subscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )\n"
        },
        {
            "id": "chunk_7_test_handle_subscribe_missing_data_4",
            "code": "    mock_manager.subscribe.assert_not_called()\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":false' in mock_websocket.send_text.call_args[0][0]\n"
        },
        {
            "id": "chunk_8_test_handle_unsubscribe_success_1",
            "code": "@pytest.mark.asyncio\nasync def test_handle_unsubscribe_success(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n"
        },
        {
            "id": "chunk_8_test_handle_unsubscribe_success_2",
            "code": "    message = WsMessage(method=Methods.UNSUBSCRIBE, data={\"graph_id\": \"test_graph\"})\n"
        },
        {
            "id": "chunk_8_test_handle_unsubscribe_success_3",
            "code": "    await handle_unsubscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )\n"
        },
        {
            "id": "chunk_8_test_handle_unsubscribe_success_4",
            "code": "    mock_manager.unsubscribe.assert_called_once_with(\"test_graph\", mock_websocket)\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"unsubscribe\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":true' in mock_websocket.send_text.call_args[0][0]\n"
        },
        {
            "id": "chunk_9_test_handle_unsubscribe_missing_data_1",
            "code": "@pytest.mark.asyncio\nasync def test_handle_unsubscribe_missing_data(\n    mock_websocket: AsyncMock, mock_manager: AsyncMock\n) -> None:\n"
        },
        {
            "id": "chunk_9_test_handle_unsubscribe_missing_data_2",
            "code": "    message = WsMessage(method=Methods.UNSUBSCRIBE)\n"
        },
        {
            "id": "chunk_9_test_handle_unsubscribe_missing_data_3",
            "code": "    await handle_unsubscribe(\n        cast(WebSocket, mock_websocket), cast(ConnectionManager, mock_manager), message\n    )\n"
        },
        {
            "id": "chunk_9_test_handle_unsubscribe_missing_data_4",
            "code": "    mock_manager.unsubscribe.assert_not_called()\n    mock_websocket.send_text.assert_called_once()\n    assert '\"method\":\"error\"' in mock_websocket.send_text.call_args[0][0]\n    assert '\"success\":false' in mock_websocket.send_text.call_args[0][0]\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_0_GlobalBlock_2",
            "to": "chunk_0_GlobalBlock_3"
        },
        {
            "from": "chunk_1_mock_websocket_1",
            "to": "chunk_1_mock_websocket_2"
        },
        {
            "from": "chunk_2_mock_manager_1",
            "to": "chunk_2_mock_manager_2"
        },
        {
            "from": "chunk_3_test_websocket_router_subscribe_1",
            "to": "chunk_3_test_websocket_router_subscribe_2"
        },
        {
            "from": "chunk_3_test_websocket_router_subscribe_2",
            "to": "chunk_3_test_websocket_router_subscribe_3"
        },
        {
            "from": "chunk_3_test_websocket_router_subscribe_3",
            "to": "chunk_3_test_websocket_router_subscribe_4"
        },
        {
            "from": "chunk_4_test_websocket_router_unsubscribe_1",
            "to": "chunk_4_test_websocket_router_unsubscribe_2"
        },
        {
            "from": "chunk_4_test_websocket_router_unsubscribe_2",
            "to": "chunk_4_test_websocket_router_unsubscribe_3"
        },
        {
            "from": "chunk_4_test_websocket_router_unsubscribe_3",
            "to": "chunk_4_test_websocket_router_unsubscribe_4"
        },
        {
            "from": "chunk_5_test_websocket_router_invalid_method_1",
            "to": "chunk_5_test_websocket_router_invalid_method_2"
        },
        {
            "from": "chunk_5_test_websocket_router_invalid_method_2",
            "to": "chunk_5_test_websocket_router_invalid_method_3"
        },
        {
            "from": "chunk_5_test_websocket_router_invalid_method_3",
            "to": "chunk_5_test_websocket_router_invalid_method_4"
        },
        {
            "from": "chunk_6_test_handle_subscribe_success_1",
            "to": "chunk_6_test_handle_subscribe_success_2"
        },
        {
            "from": "chunk_6_test_handle_subscribe_success_2",
            "to": "chunk_6_test_handle_subscribe_success_3"
        },
        {
            "from": "chunk_6_test_handle_subscribe_success_3",
            "to": "chunk_6_test_handle_subscribe_success_4"
        },
        {
            "from": "chunk_7_test_handle_subscribe_missing_data_1",
            "to": "chunk_7_test_handle_subscribe_missing_data_2"
        },
        {
            "from": "chunk_7_test_handle_subscribe_missing_data_2",
            "to": "chunk_7_test_handle_subscribe_missing_data_3"
        },
        {
            "from": "chunk_7_test_handle_subscribe_missing_data_3",
            "to": "chunk_7_test_handle_subscribe_missing_data_4"
        },
        {
            "from": "chunk_8_test_handle_unsubscribe_success_1",
            "to": "chunk_8_test_handle_unsubscribe_success_2"
        },
        {
            "from": "chunk_8_test_handle_unsubscribe_success_2",
            "to": "chunk_8_test_handle_unsubscribe_success_3"
        },
        {
            "from": "chunk_8_test_handle_unsubscribe_success_3",
            "to": "chunk_8_test_handle_unsubscribe_success_4"
        },
        {
            "from": "chunk_9_test_handle_unsubscribe_missing_data_1",
            "to": "chunk_9_test_handle_unsubscribe_missing_data_2"
        },
        {
            "from": "chunk_9_test_handle_unsubscribe_missing_data_2",
            "to": "chunk_9_test_handle_unsubscribe_missing_data_3"
        },
        {
            "from": "chunk_9_test_handle_unsubscribe_missing_data_3",
            "to": "chunk_9_test_handle_unsubscribe_missing_data_4"
        }
    ]
}