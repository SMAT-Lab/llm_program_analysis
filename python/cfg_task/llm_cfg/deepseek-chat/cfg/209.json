{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "from typing import Any, Dict\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "import jwt\n"
        },
        {
            "id": "chunk_0_GlobalBlock_3",
            "code": "from .config import settings\n"
        },
        {
            "id": "chunk_1_parse_jwt_token_1",
            "code": "def parse_jwt_token(token: str) -> Dict[str, Any]:\n    \"\"\"\n    Parse and validate a JWT token.\n\n    :param token: The token to parse\n    :return: The decoded payload\n    :raises ValueError: If the token is invalid or expired\n    \"\"\"\n"
        },
        {
            "id": "chunk_1_parse_jwt_token_2",
            "code": "    try:\n        payload = jwt.decode(\n            token,\n            settings.JWT_SECRET_KEY,\n            algorithms=[settings.JWT_ALGORITHM],\n            audience=\"authenticated\",\n        )\n        return payload\n"
        },
        {
            "id": "chunk_1_parse_jwt_token_3",
            "code": "    except jwt.ExpiredSignatureError:\n        raise ValueError(\"Token has expired\")\n"
        },
        {
            "id": "chunk_1_parse_jwt_token_4",
            "code": "    except jwt.InvalidTokenError as e:\n        raise ValueError(f\"Invalid token: {str(e)}\")\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_0_GlobalBlock_2",
            "to": "chunk_0_GlobalBlock_3"
        },
        {
            "from": "chunk_1_parse_jwt_token_1",
            "to": "chunk_1_parse_jwt_token_2"
        },
        {
            "from": "chunk_1_parse_jwt_token_2",
            "to": "chunk_1_parse_jwt_token_3"
        },
        {
            "from": "chunk_1_parse_jwt_token_2",
            "to": "chunk_1_parse_jwt_token_4"
        }
    ]
}