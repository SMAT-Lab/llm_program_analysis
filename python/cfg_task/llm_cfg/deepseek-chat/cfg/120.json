{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "import inspect\nfrom abc import ABC, abstractmethod\nfrom enum import Enum\nfrom typing import (\n    Any,\n    ClassVar,\n    Generator,\n    Generic,\n    Optional,\n    Type,\n    TypeVar,\n    cast,\n    get_origin,\n)\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "import jsonref\nimport jsonschema\nfrom prisma.models import AgentBlock\nfrom pydantic import BaseModel\n"
        },
        {
            "id": "chunk_0_GlobalBlock_3",
            "code": "from backend.util import json\nfrom backend.util.settings import Config\n"
        },
        {
            "id": "chunk_0_GlobalBlock_4",
            "code": "from .model import (\n    CREDENTIALS_FIELD_NAME,\n    ContributorDetails,\n    Credentials,\n    CredentialsMetaInput,\n)\n"
        },
        {
            "id": "chunk_1_GlobalBlock_1",
            "code": "app_config = Config()\n"
        },
        {
            "id": "chunk_1_GlobalBlock_2",
            "code": "BlockData = tuple[str, Any]  # Input & Output data should be a tuple of (name, data).\nBlockInput = dict[str, Any]  # Input: 1 input pin consumes 1 data.\nBlockOutput = Generator[BlockData, None, None]  # Output: 1 output pin produces n data.\nCompletedBlockOutput = dict[str, list[Any]]  # Completed stream, collected as a dict.\n"
        },
        {
            "id": "chunk_2_BlockType_1",
            "code": "class BlockType(Enum):\n    STANDARD = \"Standard\"\n    INPUT = \"Input\"\n    OUTPUT = \"Output\"\n    NOTE = \"Note\"\n    WEBHOOK = \"Webhook\"\n    WEBHOOK_MANUAL = \"Webhook (manual)\"\n    AGENT = \"Agent\"\n\n"
        },
        {
            "id": "chunk_3_BlockCategory_1",
            "code": "class BlockCategory(Enum):\n    AI = \"Block that leverages AI to perform a task.\"\n    SOCIAL = \"Block that interacts with social media platforms.\"\n    TEXT = \"Block that processes text data.\"\n    SEARCH = \"Block that searches or extracts information from the internet.\"\n    BASIC = \"Block that performs basic operations.\"\n    INPUT = \"Block that interacts with input of the graph.\"\n    OUTPUT = \"Block that interacts with output of the graph.\"\n    LOGIC = \"Programming logic to control the flow of your agent\"\n    COMMUNICATION = \"Block that interacts with communication platforms.\"\n    DEVELOPER_TOOLS = \"Developer tools such as GitHub blocks.\"\n    DATA = \"Block that interacts with structured data.\"\n    HARDWARE = \"Block that interacts with hardware.\"\n    AGENT = \"Block that interacts with other agents.\"\n    CRM = \"Block that interacts with CRM services.\"\n\n"
        },
        {
            "id": "chunk_3_BlockCategory_2",
            "code": "    def dict(self) -> dict[str, str]:\n        return {\"category\": self.name, \"description\": self.value}\n"
        },
        {
            "id": "chunk_4_BlockSchema_1",
            "code": "class BlockSchema(BaseModel):\n    cached_jsonschema: ClassVar[dict[str, Any]]\n"
        },
        {
            "id": "chunk_4_BlockSchema_2",
            "code": "    @classmethod\n    def jsonschema(cls) -> dict[str, Any]:\n"
        },
        {
            "id": "chunk_4_BlockSchema_3",
            "code": "        if cls.cached_jsonschema:\n            return cls.cached_jsonschema\n"
        },
        {
            "id": "chunk_4_BlockSchema_4",
            "code": "        model = jsonref.replace_refs(cls.model_json_schema(), merge_props=True)\n"
        },
        {
            "id": "chunk_4_BlockSchema_5",
            "code": "        def ref_to_dict(obj):\n            if isinstance(obj, dict):\n                # OpenAPI <3.1 does not support sibling fields that has a $ref key\n                # So sometimes, the schema has an \"allOf\"/\"anyOf\"/\"oneOf\" with 1 item.\n                keys = {\"allOf\", \"anyOf\", \"oneOf\"}\n                one_key = next((k for k in keys if k in obj and len(obj[k]) == 1), None)\n                if one_key:\n                    obj.update(obj[one_key][0])\n\n                return {\n                    key: ref_to_dict(value)\n                    for key, value in obj.items()\n                    if not key.startswith(\"$\") and key != one_key\n                }\n            elif isinstance(obj, list):\n                return [ref_to_dict(item) for item in obj]\n\n            return obj\n"
        },
        {
            "id": "chunk_4_BlockSchema_6",
            "code": "        cls.cached_jsonschema = cast(dict[str, Any], ref_to_dict(model))\n"
        },
        {
            "id": "chunk_4_BlockSchema_7",
            "code": "        # Set default properties values\n        for field in cls.cached_jsonschema.get(\"properties\", {}).values():\n            if isinstance(field, dict) and \"advanced\" not in field:\n                field[\"advanced\"] = True\n\n"
        },
        {
            "id": "chunk_4_BlockSchema_8",
            "code": "        return cls.cached_jsonschema\n"
        },
        {
            "id": "chunk_4_BlockSchema_9",
            "code": "    @classmethod\n    def validate_data(cls, data: BlockInput) -> str | None:\n"
        },
        {
            "id": "chunk_4_BlockSchema_10",
            "code": "        return json.validate_with_jsonschema(schema=cls.jsonschema(), data=data)\n"
        },
        {
            "id": "chunk_4_BlockSchema_11",
            "code": "    @classmethod\n    def validate_field(cls, field_name: str, data: BlockInput) -> str | None:\n"
        },
        {
            "id": "chunk_4_BlockSchema_12",
            "code": "        \"\"\"\n        Validate the data against a specific property (one of the input/output name).\n        Returns the validation error message if the data does not match the schema.\n        \"\"\"\n"
        },
        {
            "id": "chunk_4_BlockSchema_13",
            "code": "        model_schema = cls.jsonschema().get(\"properties\", {})\n        if not model_schema:\n            return f\"Invalid model schema {cls}\"\n"
        },
        {
            "id": "chunk_4_BlockSchema_14",
            "code": "        property_schema = model_schema.get(field_name)\n        if not property_schema:\n            return f\"Invalid property name {field_name}\"\n"
        },
        {
            "id": "chunk_4_BlockSchema_15",
            "code": "        try:\n            jsonschema.validate(json.to_dict(data), property_schema)\n            return None\n        except jsonschema.ValidationError as e:\n            return str(e)\n"
        },
        {
            "id": "chunk_4_BlockSchema_16",
            "code": "    @classmethod\n    def get_fields(cls) -> set[str]:\n"
        },
        {
            "id": "chunk_4_BlockSchema_17",
            "code": "        return set(cls.model_fields.keys())\n"
        },
        {
            "id": "chunk_4_BlockSchema_18",
            "code": "    @classmethod\n    def get_required_fields(cls) -> set[str]:\n"
        },
        {
            "id": "chunk_4_BlockSchema_19",
            "code": "        return {\n            field\n            for field, field_info in cls.model_fields.items()\n            if field_info.is_required()\n        }\n"
        },
        {
            "id": "chunk_4_BlockSchema_20",
            "code": "    @classmethod\n    def __pydantic_init_subclass__(cls, **kwargs):\n"
        },
        {
            "id": "chunk_4_BlockSchema_21",
            "code": "        \"\"\"Validates the schema definition. Rules:\n        - Only one `CredentialsMetaInput` field may be present.\n          - This field MUST be called `credentials`.\n        - A field that is called `credentials` MUST be a `CredentialsMetaInput`.\n        \"\"\"\n"
        },
        {
            "id": "chunk_4_BlockSchema_22",
            "code": "        super().__pydantic_init_subclass__(**kwargs)\n"
        },
        {
            "id": "chunk_4_BlockSchema_23",
            "code": "        # Reset cached JSON schema to prevent inheriting it from parent class\n        cls.cached_jsonschema = {}\n"
        },
        {
            "id": "chunk_4_BlockSchema_24",
            "code": "        credentials_fields = [\n            field_name\n            for field_name, info in cls.model_fields.items()\n            if (\n                inspect.isclass(info.annotation)\n                and issubclass(\n                    get_origin(info.annotation) or info.annotation,\n                    CredentialsMetaInput,\n                )\n            )\n        ]\n"
        },
        {
            "id": "chunk_4_BlockSchema_25",
            "code": "        if len(credentials_fields) > 1:\n            raise ValueError(\n                f\"{cls.__qualname__} can only have one CredentialsMetaInput field\"\n            )\n"
        },
        {
            "id": "chunk_4_BlockSchema_26",
            "code": "        elif (\n            len(credentials_fields) == 1\n            and credentials_fields[0] != CREDENTIALS_FIELD_NAME\n        ):\n            raise ValueError(\n                f\"CredentialsMetaInput field on {cls.__qualname__} \"\n                \"must be named 'credentials'\"\n            )\n"
        },
        {
            "id": "chunk_4_BlockSchema_27",
            "code": "        elif (\n            len(credentials_fields) == 0\n            and CREDENTIALS_FIELD_NAME in cls.model_fields.keys()\n        ):\n            raise TypeError(\n                f\"Field 'credentials' on {cls.__qualname__} \"\n                f\"must be of type {CredentialsMetaInput.__name__}\"\n            )\n"
        },
        {
            "id": "chunk_4_BlockSchema_28",
            "code": "        if credentials_field := cls.model_fields.get(CREDENTIALS_FIELD_NAME):\n            credentials_input_type = cast(\n                CredentialsMetaInput, credentials_field.annotation\n            )\n            credentials_input_type.validate_credentials_field_schema(cls)\n\n"
        },
        {
            "id": "chunk_5_GlobalBlock_1",
            "code": "BlockSchemaInputType = TypeVar(\"BlockSchemaInputType\", bound=BlockSchema)\n"
        },
        {
            "id": "chunk_5_GlobalBlock_2",
            "code": "BlockSchemaOutputType = TypeVar(\"BlockSchemaOutputType\", bound=BlockSchema)\n"
        },
        {
            "id": "chunk_5_GlobalBlock_3",
            "code": "\n"
        },
        {
            "id": "chunk_6_EmptySchema_1",
            "code": "class EmptySchema(BlockSchema):\n    pass\n"
        },
        {
            "id": "chunk_7_BlockManualWebhookConfig_1",
            "code": "class BlockManualWebhookConfig(BaseModel):\n    \"\"\"\n    Configuration model for webhook-triggered blocks on which\n    the user has to manually set up the webhook at the provider.\n    \"\"\"\n"
        },
        {
            "id": "chunk_7_BlockManualWebhookConfig_2",
            "code": "    provider: str\n    \"\"\"The service provider that the webhook connects to\"\"\"\n"
        },
        {
            "id": "chunk_7_BlockManualWebhookConfig_3",
            "code": "    webhook_type: str\n    \"\"\"\n    Identifier for the webhook type. E.g. GitHub has repo and organization level hooks.\n\n    Only for use in the corresponding `WebhooksManager`.\n    \"\"\"\n"
        },
        {
            "id": "chunk_7_BlockManualWebhookConfig_4",
            "code": "    event_filter_input: str = \"\"\n    \"\"\"\n    Name of the block's event filter input.\n    Leave empty if the corresponding webhook doesn't have distinct event/payload types.\n    \"\"\"\n"
        },
        {
            "id": "chunk_7_BlockManualWebhookConfig_5",
            "code": "    event_format: str = \"{event}\"\n    \"\"\"\n    Template string for the event(s) that a block instance subscribes to.\n    Applied individually to each event selected in the event filter input.\n\n    Example: `\"pull_request.{event}\"` -> `\"pull_request.opened\"`\n    \"\"\"\n"
        },
        {
            "id": "chunk_7_BlockManualWebhookConfig_6",
            "code": "class BlockWebhookConfig(BlockManualWebhookConfig):\n    \"\"\"\n    Configuration model for webhook-triggered blocks for which\n    the webhook can be automatically set up through the provider's API.\n    \"\"\"\n"
        },
        {
            "id": "chunk_7_BlockManualWebhookConfig_7",
            "code": "    resource_format: str\n    \"\"\"\n    Template string for the resource that a block instance subscribes to.\n    Fields will be filled from the block's inputs (except `payload`).\n\n    Example: `f\"{repo}/pull_requests\"` (note: not how it's actually implemented)\n\n    Only for use in the corresponding `WebhooksManager`.\n    \"\"\"\n"
        },
        {
            "id": "chunk_8_Block_1",
            "code": "class Block(ABC, Generic[BlockSchemaInputType, BlockSchemaOutputType]):\n"
        },
        {
            "id": "chunk_8_Block_2",
            "code": "    def __init__(\n        self,\n        id: str = \"\",\n        description: str = \"\",\n        contributors: list[ContributorDetails] = [],\n        categories: set[BlockCategory] | None = None,\n        input_schema: Type[BlockSchemaInputType] = EmptySchema,\n        output_schema: Type[BlockSchemaOutputType] = EmptySchema,\n        test_input: BlockInput | list[BlockInput] | None = None,\n        test_output: BlockData | list[BlockData] | None = None,\n        test_mock: dict[str, Any] | None = None,\n        test_credentials: Optional[Credentials] = None,\n        disabled: bool = False,\n        static_output: bool = False,\n        block_type: BlockType = BlockType.STANDARD,\n        webhook_config: Optional[BlockWebhookConfig | BlockManualWebhookConfig] = None,\n    ):\n"
        },
        {
            "id": "chunk_8_Block_3",
            "code": "        \"\"\"\n        Initialize the block with the given schema.\n\n        Args:\n            id: The unique identifier for the block, this value will be persisted in the\n                DB. So it should be a unique and constant across the application run.\n                Use the UUID format for the ID.\n            description: The description of the block, explaining what the block does.\n            contributors: The list of contributors who contributed to the block.\n            input_schema: The schema, defined as a Pydantic model, for the input data.\n            output_schema: The schema, defined as a Pydantic model, for the output data.\n            test_input: The list or single sample input data for the block, for testing.\n            test_output: The list or single expected output if the test_input is run.\n            test_mock: function names on the block implementation to mock on test run.\n            disabled: If the block is disabled, it will not be available for execution.\n            static_output: Whether the output links of the block are static by default.\n        \"\"\"\n"
        },
        {
            "id": "chunk_8_Block_4",
            "code": "        self.id = id\n        self.input_schema = input_schema\n        self.output_schema = output_schema\n        self.test_input = test_input\n        self.test_output = test_output\n        self.test_mock = test_mock\n        self.test_credentials = test_credentials\n        self.description = description\n        self.categories = categories or set()\n        self.contributors = contributors or set()\n        self.disabled = disabled\n        self.static_output = static_output\n        self.block_type = block_type\n        self.webhook_config = webhook_config\n        self.execution_stats = {}\n"
        },
        {
            "id": "chunk_8_Block_5",
            "code": "        if self.webhook_config:\n            if isinstance(self.webhook_config, BlockWebhookConfig):\n                # Enforce presence of credentials field on auto-setup webhook blocks\n                if CREDENTIALS_FIELD_NAME not in self.input_schema.model_fields:\n                    raise TypeError(\n                        \"credentials field is required on auto-setup webhook blocks\"\n                    )\n"
        },
        {
            "id": "chunk_8_Block_6",
            "code": "                self.block_type = BlockType.WEBHOOK\n"
        },
        {
            "id": "chunk_8_Block_7",
            "code": "            else:\n                self.block_type = BlockType.WEBHOOK_MANUAL\n"
        },
        {
            "id": "chunk_8_Block_8",
            "code": "            # Enforce shape of webhook event filter, if present\n            if self.webhook_config.event_filter_input:\n                event_filter_field = self.input_schema.model_fields[\n                    self.webhook_config.event_filter_input\n                ]\n                if not (\n                    isinstance(event_filter_field.annotation, type)\n                    and issubclass(event_filter_field.annotation, BaseModel)\n                    and all(\n                        field.annotation is bool\n                        for field in event_filter_field.annotation.model_fields.values()\n                    )\n                ):\n                    raise NotImplementedError(\n                        f\"{self.name} has an invalid webhook event selector: \"\n                        \"field must be a BaseModel and all its fields must be boolean\"\n                    )\n"
        },
        {
            "id": "chunk_8_Block_9",
            "code": "            # Enforce presence of 'payload' input\n            if \"payload\" not in self.input_schema.model_fields:\n                raise TypeError(\n                    f\"{self.name} is webhook-triggered but has no 'payload' input\"\n                )\n"
        },
        {
            "id": "chunk_8_Block_10",
            "code": "            # Disable webhook-triggered block if webhook functionality not available\n            if not app_config.platform_base_url:\n                self.disabled = True\n"
        },
        {
            "id": "chunk_8_Block_11",
            "code": "    @classmethod\n    def create(cls: Type[\"Block\"]) -> \"Block\":\n        return cls()\n"
        },
        {
            "id": "chunk_8_Block_12",
            "code": "    @abstractmethod\n    def run(self, input_data: BlockSchemaInputType, **kwargs) -> BlockOutput:\n        \"\"\"\n        Run the block with the given input data.\n        Args:\n            input_data: The input data with the structure of input_schema.\n        Returns:\n            A Generator that yields (output_name, output_data).\n            output_name: One of the output name defined in Block's output_schema.\n            output_data: The data for the output_name, matching the defined schema.\n        \"\"\"\n        pass\n"
        },
        {
            "id": "chunk_8_Block_13",
            "code": "    def run_once(self, input_data: BlockSchemaInputType, output: str, **kwargs) -> Any:\n        for name, data in self.run(input_data, **kwargs):\n            if name == output:\n                return data\n        raise ValueError(f\"{self.name} did not produce any output for {output}\")\n"
        },
        {
            "id": "chunk_8_Block_14",
            "code": "    def merge_stats(self, stats: dict[str, Any]) -> dict[str, Any]:\n        for key, value in stats.items():\n            if isinstance(value, dict):\n                self.execution_stats.setdefault(key, {}).update(value)\n            elif isinstance(value, (int, float)):\n                self.execution_stats.setdefault(key, 0)\n                self.execution_stats[key] += value\n            elif isinstance(value, list):\n                self.execution_stats.setdefault(key, [])\n                self.execution_stats[key].extend(value)\n            else:\n                self.execution_stats[key] = value\n        return self.execution_stats\n"
        },
        {
            "id": "chunk_8_Block_15",
            "code": "    @property\n    def name(self):\n        return self.__class__.__name__\n"
        },
        {
            "id": "chunk_8_Block_16",
            "code": "    def to_dict(self):\n        return {\n            \"id\": self.id,\n            \"name\": self.name,\n            \"inputSchema\": self.input_schema.jsonschema(),\n            \"outputSchema\": self.output_schema.jsonschema(),\n            \"description\": self.description,\n            \"categories\": [category.dict() for category in self.categories],\n            \"contributors\": [\n                contributor.model_dump() for contributor in self.contributors\n            ],\n            \"staticOutput\": self.static_output,\n            \"uiType\": self.block_type.value,\n        }\n"
        },
        {
            "id": "chunk_8_Block_17",
            "code": "    def execute(self, input_data: BlockInput, **kwargs) -> BlockOutput:\n        if error := self.input_schema.validate_data(input_data):\n            raise ValueError(\n                f\"Unable to execute block with invalid input data: {error}\"\n            )\n"
        },
        {
            "id": "chunk_8_Block_18",
            "code": "        for output_name, output_data in self.run(\n            self.input_schema(**input_data), **kwargs\n        ):\n            if output_name == \"error\":\n                raise RuntimeError(output_data)\n            if self.block_type == BlockType.STANDARD and (\n                error := self.output_schema.validate_field(output_name, output_data)\n            ):\n                raise ValueError(f\"Block produced an invalid output data: {error}\")\n            yield output_name, output_data\n"
        },
        {
            "id": "chunk_9_get_blocks_1",
            "code": "def get_blocks() -> dict[str, Type[Block]]:\n"
        },
        {
            "id": "chunk_9_get_blocks_2",
            "code": "    from backend.blocks import AVAILABLE_BLOCKS  # noqa: E402\n"
        },
        {
            "id": "chunk_9_get_blocks_3",
            "code": "    return AVAILABLE_BLOCKS\n"
        },
        {
            "id": "chunk_10_initialize_blocks_1",
            "code": "async def initialize_blocks() -> None:\n"
        },
        {
            "id": "chunk_10_initialize_blocks_2",
            "code": "    for cls in get_blocks().values():\n"
        },
        {
            "id": "chunk_10_initialize_blocks_3",
            "code": "        block = cls()\n        existing_block = await AgentBlock.prisma().find_first(\n            where={\"OR\": [{\"id\": block.id}, {\"name\": block.name}]}\n        )\n"
        },
        {
            "id": "chunk_10_initialize_blocks_4",
            "code": "        if not existing_block:\n"
        },
        {
            "id": "chunk_10_initialize_blocks_5",
            "code": "            await AgentBlock.prisma().create(\n                data={\n                    \"id\": block.id,\n                    \"name\": block.name,\n                    \"inputSchema\": json.dumps(block.input_schema.jsonschema()),\n                    \"outputSchema\": json.dumps(block.output_schema.jsonschema()),\n                }\n            )\n"
        },
        {
            "id": "chunk_10_initialize_blocks_6",
            "code": "            continue\n"
        },
        {
            "id": "chunk_10_initialize_blocks_7",
            "code": "        input_schema = json.dumps(block.input_schema.jsonschema())\n        output_schema = json.dumps(block.output_schema.jsonschema())\n"
        },
        {
            "id": "chunk_10_initialize_blocks_8",
            "code": "        if (\n            block.id != existing_block.id\n            or block.name != existing_block.name\n            or input_schema != existing_block.inputSchema\n            or output_schema != existing_block.outputSchema\n        ):\n"
        },
        {
            "id": "chunk_10_initialize_blocks_9",
            "code": "            await AgentBlock.prisma().update(\n                where={\"id\": existing_block.id},\n                data={\n                    \"id\": block.id,\n                    \"name\": block.name,\n                    \"inputSchema\": input_schema,\n                    \"outputSchema\": output_schema,\n                },\n            )\n"
        },
        {
            "id": "chunk_10_initialize_blocks_10",
            "code": "def get_block(block_id: str) -> Block | None:\n"
        },
        {
            "id": "chunk_10_initialize_blocks_11",
            "code": "    cls = get_blocks().get(block_id)\n    return cls() if cls else None\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_0_GlobalBlock_2",
            "to": "chunk_0_GlobalBlock_3"
        },
        {
            "from": "chunk_0_GlobalBlock_3",
            "to": "chunk_0_GlobalBlock_4"
        },
        {
            "from": "chunk_1_GlobalBlock_1",
            "to": "chunk_1_GlobalBlock_2"
        },
        {
            "from": "chunk_3_BlockCategory_1",
            "to": "chunk_3_BlockCategory_2"
        },
        {
            "from": "chunk_4_BlockSchema_1",
            "to": "chunk_4_BlockSchema_2"
        },
        {
            "from": "chunk_4_BlockSchema_2",
            "to": "chunk_4_BlockSchema_3"
        },
        {
            "from": "chunk_4_BlockSchema_3",
            "to": "chunk_4_BlockSchema_4"
        },
        {
            "from": "chunk_4_BlockSchema_3",
            "to": "chunk_4_BlockSchema_8"
        },
        {
            "from": "chunk_4_BlockSchema_4",
            "to": "chunk_4_BlockSchema_5"
        },
        {
            "from": "chunk_4_BlockSchema_5",
            "to": "chunk_4_BlockSchema_6"
        },
        {
            "from": "chunk_4_BlockSchema_6",
            "to": "chunk_4_BlockSchema_7"
        },
        {
            "from": "chunk_4_BlockSchema_7",
            "to": "chunk_4_BlockSchema_8"
        },
        {
            "from": "chunk_4_BlockSchema_9",
            "to": "chunk_4_BlockSchema_10"
        },
        {
            "from": "chunk_4_BlockSchema_11",
            "to": "chunk_4_BlockSchema_12"
        },
        {
            "from": "chunk_4_BlockSchema_12",
            "to": "chunk_4_BlockSchema_13"
        },
        {
            "from": "chunk_4_BlockSchema_13",
            "to": "chunk_4_BlockSchema_14"
        },
        {
            "from": "chunk_4_BlockSchema_14",
            "to": "chunk_4_BlockSchema_15"
        },
        {
            "from": "chunk_4_BlockSchema_16",
            "to": "chunk_4_BlockSchema_17"
        },
        {
            "from": "chunk_4_BlockSchema_18",
            "to": "chunk_4_BlockSchema_19"
        },
        {
            "from": "chunk_4_BlockSchema_20",
            "to": "chunk_4_BlockSchema_21"
        },
        {
            "from": "chunk_4_BlockSchema_21",
            "to": "chunk_4_BlockSchema_22"
        },
        {
            "from": "chunk_4_BlockSchema_22",
            "to": "chunk_4_BlockSchema_23"
        },
        {
            "from": "chunk_4_BlockSchema_23",
            "to": "chunk_4_BlockSchema_24"
        },
        {
            "from": "chunk_4_BlockSchema_24",
            "to": "chunk_4_BlockSchema_25"
        },
        {
            "from": "chunk_4_BlockSchema_24",
            "to": "chunk_4_BlockSchema_26"
        },
        {
            "from": "chunk_4_BlockSchema_24",
            "to": "chunk_4_BlockSchema_27"
        },
        {
            "from": "chunk_4_BlockSchema_27",
            "to": "chunk_4_BlockSchema_28"
        },
        {
            "from": "chunk_5_GlobalBlock_1",
            "to": "chunk_5_GlobalBlock_2"
        },
        {
            "from": "chunk_5_GlobalBlock_2",
            "to": "chunk_5_GlobalBlock_3"
        },
        {
            "from": "chunk_7_BlockManualWebhookConfig_1",
            "to": "chunk_7_BlockManualWebhookConfig_2"
        },
        {
            "from": "chunk_7_BlockManualWebhookConfig_2",
            "to": "chunk_7_BlockManualWebhookConfig_3"
        },
        {
            "from": "chunk_7_BlockManualWebhookConfig_3",
            "to": "chunk_7_BlockManualWebhookConfig_4"
        },
        {
            "from": "chunk_7_BlockManualWebhookConfig_4",
            "to": "chunk_7_BlockManualWebhookConfig_5"
        },
        {
            "from": "chunk_7_BlockManualWebhookConfig_5",
            "to": "chunk_7_BlockManualWebhookConfig_6"
        },
        {
            "from": "chunk_7_BlockManualWebhookConfig_6",
            "to": "chunk_7_BlockManualWebhookConfig_7"
        },
        {
            "from": "chunk_8_Block_1",
            "to": "chunk_8_Block_2"
        },
        {
            "from": "chunk_8_Block_2",
            "to": "chunk_8_Block_3"
        },
        {
            "from": "chunk_8_Block_3",
            "to": "chunk_8_Block_4"
        },
        {
            "from": "chunk_8_Block_4",
            "to": "chunk_8_Block_5"
        },
        {
            "from": "chunk_8_Block_5",
            "to": "chunk_8_Block_6"
        },
        {
            "from": "chunk_8_Block_5",
            "to": "chunk_8_Block_7"
        },
        {
            "from": "chunk_8_Block_6",
            "to": "chunk_8_Block_8"
        },
        {
            "from": "chunk_8_Block_7",
            "to": "chunk_8_Block_8"
        },
        {
            "from": "chunk_8_Block_8",
            "to": "chunk_8_Block_9"
        },
        {
            "from": "chunk_8_Block_9",
            "to": "chunk_8_Block_10"
        },
        {
            "from": "chunk_8_Block_10",
            "to": "chunk_8_Block_11"
        },
        {
            "from": "chunk_8_Block_11",
            "to": "chunk_8_Block_12"
        },
        {
            "from": "chunk_8_Block_12",
            "to": "chunk_8_Block_13"
        },
        {
            "from": "chunk_8_Block_13",
            "to": "chunk_8_Block_14"
        },
        {
            "from": "chunk_8_Block_14",
            "to": "chunk_8_Block_15"
        },
        {
            "from": "chunk_8_Block_15",
            "to": "chunk_8_Block_16"
        },
        {
            "from": "chunk_8_Block_16",
            "to": "chunk_8_Block_17"
        },
        {
            "from": "chunk_8_Block_17",
            "to": "chunk_8_Block_18"
        },
        {
            "from": "chunk_9_get_blocks_1",
            "to": "chunk_9_get_blocks_2"
        },
        {
            "from": "chunk_9_get_blocks_2",
            "to": "chunk_9_get_blocks_3"
        },
        {
            "from": "chunk_10_initialize_blocks_1",
            "to": "chunk_10_initialize_blocks_2"
        },
        {
            "from": "chunk_10_initialize_blocks_2",
            "to": "chunk_10_initialize_blocks_3"
        },
        {
            "from": "chunk_10_initialize_blocks_3",
            "to": "chunk_10_initialize_blocks_4"
        },
        {
            "from": "chunk_10_initialize_blocks_4",
            "to": "chunk_10_initialize_blocks_5"
        },
        {
            "from": "chunk_10_initialize_blocks_4",
            "to": "chunk_10_initialize_blocks_7"
        },
        {
            "from": "chunk_10_initialize_blocks_5",
            "to": "chunk_10_initialize_blocks_6"
        },
        {
            "from": "chunk_10_initialize_blocks_6",
            "to": "chunk_10_initialize_blocks_2"
        },
        {
            "from": "chunk_10_initialize_blocks_7",
            "to": "chunk_10_initialize_blocks_8"
        },
        {
            "from": "chunk_10_initialize_blocks_8",
            "to": "chunk_10_initialize_blocks_9"
        },
        {
            "from": "chunk_10_initialize_blocks_8",
            "to": "chunk_10_initialize_blocks_2"
        },
        {
            "from": "chunk_10_initialize_blocks_9",
            "to": "chunk_10_initialize_blocks_2"
        },
        {
            "from": "chunk_10_initialize_blocks_10",
            "to": "chunk_10_initialize_blocks_11"
        }
    ]
}