{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "import json\nfrom typing import Any, Type, TypeVar, cast, get_args, get_origin\n"
        },
        {
            "id": "chunk_1_ConversionError_1",
            "code": "class ConversionError(ValueError):\n    pass\n"
        },
        {
            "id": "chunk_2___convert_list_1",
            "code": "def __convert_list(value: Any) -> list:\n"
        },
        {
            "id": "chunk_2___convert_list_2",
            "code": "    if isinstance(value, (list, tuple, set)):\n        return list(value)\n"
        },
        {
            "id": "chunk_2___convert_list_3",
            "code": "    elif isinstance(value, dict):\n        return list(value.items())\n"
        },
        {
            "id": "chunk_2___convert_list_4",
            "code": "    elif isinstance(value, str):\n        value = value.strip()\n"
        },
        {
            "id": "chunk_2___convert_list_5",
            "code": "        if value.startswith(\"[\") and value.endswith(\"]\"):\n"
        },
        {
            "id": "chunk_2___convert_list_6",
            "code": "            try:\n                return json.loads(value)\n"
        },
        {
            "id": "chunk_2___convert_list_7",
            "code": "            except json.JSONDecodeError:\n                return [value]\n"
        },
        {
            "id": "chunk_2___convert_list_8",
            "code": "        else:\n            return [value]\n"
        },
        {
            "id": "chunk_2___convert_list_9",
            "code": "    else:\n        return [value]\n"
        },
        {
            "id": "chunk_3___convert_dict_1",
            "code": "def __convert_dict(value: Any) -> dict:\n"
        },
        {
            "id": "chunk_3___convert_dict_2",
            "code": "    if isinstance(value, str):\n"
        },
        {
            "id": "chunk_3___convert_dict_3",
            "code": "        try:\n            result = json.loads(value)\n            if isinstance(result, dict):\n                return result\n            else:\n                return {\"value\": result}\n        except json.JSONDecodeError:\n            return {\"value\": value}  # Fallback conversion\n"
        },
        {
            "id": "chunk_3___convert_dict_4",
            "code": "    elif isinstance(value, list):\n        return {i: value[i] for i in range(len(value))}\n"
        },
        {
            "id": "chunk_3___convert_dict_5",
            "code": "    elif isinstance(value, tuple):\n        return {i: value[i] for i in range(len(value))}\n"
        },
        {
            "id": "chunk_3___convert_dict_6",
            "code": "    elif isinstance(value, dict):\n        return value\n"
        },
        {
            "id": "chunk_3___convert_dict_7",
            "code": "    else:\n        return {\"value\": value}\n"
        },
        {
            "id": "chunk_4___convert_tuple_1",
            "code": "def __convert_tuple(value: Any) -> tuple:\n"
        },
        {
            "id": "chunk_4___convert_tuple_2",
            "code": "    if isinstance(value, (str, list, set)):\n        return tuple(value)\n"
        },
        {
            "id": "chunk_4___convert_tuple_3",
            "code": "    elif isinstance(value, dict):\n        return tuple(value.items())\n"
        },
        {
            "id": "chunk_4___convert_tuple_4",
            "code": "    elif isinstance(value, (int, float, bool)):\n        return (value,)\n"
        },
        {
            "id": "chunk_4___convert_tuple_5",
            "code": "    elif isinstance(value, tuple):\n        return value\n"
        },
        {
            "id": "chunk_4___convert_tuple_6",
            "code": "    else:\n        return (value,)\n"
        },
        {
            "id": "chunk_5___convert_set_1",
            "code": "def __convert_set(value: Any) -> set:\n"
        },
        {
            "id": "chunk_5___convert_set_2",
            "code": "    if isinstance(value, (str, list, tuple)):\n        return set(value)\n"
        },
        {
            "id": "chunk_5___convert_set_3",
            "code": "    elif isinstance(value, dict):\n        return set(value.items())\n"
        },
        {
            "id": "chunk_5___convert_set_4",
            "code": "    elif isinstance(value, set):\n        return value\n"
        },
        {
            "id": "chunk_5___convert_set_5",
            "code": "    else:\n        return {value}\n"
        },
        {
            "id": "chunk_6___convert_str_1",
            "code": "def __convert_str(value: Any) -> str:\n"
        },
        {
            "id": "chunk_6___convert_str_2",
            "code": "    if isinstance(value, str):\n        return value\n"
        },
        {
            "id": "chunk_6___convert_str_3",
            "code": "    else:\n        return json.dumps(value)\n"
        },
        {
            "id": "chunk_7_GlobalBlock_1",
            "code": "NUM = TypeVar(\"NUM\", int, float)\n"
        },
        {
            "id": "chunk_8___convert_num_1",
            "code": "def __convert_num(value: Any, num_type: Type[NUM]) -> NUM:\n"
        },
        {
            "id": "chunk_8___convert_num_2",
            "code": "    if isinstance(value, (list, dict, tuple, set)):\n        return num_type(len(value))\n"
        },
        {
            "id": "chunk_8___convert_num_3",
            "code": "    elif isinstance(value, num_type):\n        return value\n"
        },
        {
            "id": "chunk_8___convert_num_4",
            "code": "    else:\n        try:\n            return num_type(float(value))\n        except (ValueError, TypeError):\n            return num_type(0)  # Fallback conversion\n"
        },
        {
            "id": "chunk_9___convert_bool_1",
            "code": "def __convert_bool(value: Any) -> bool:\n"
        },
        {
            "id": "chunk_9___convert_bool_2",
            "code": "    if isinstance(value, bool):\n        return value\n"
        },
        {
            "id": "chunk_9___convert_bool_3",
            "code": "    elif isinstance(value, str):\n        if value.lower() in [\"true\", \"1\"]:\n            return True\n"
        },
        {
            "id": "chunk_9___convert_bool_4",
            "code": "        else:\n            return False\n"
        },
        {
            "id": "chunk_9___convert_bool_5",
            "code": "    else:\n        return bool(value)\n"
        },
        {
            "id": "chunk_10__try_convert_1",
            "code": "def _try_convert(value: Any, target_type: Type, raise_on_mismatch: bool) -> Any:\n    origin = get_origin(target_type)\n    args = get_args(target_type)\n"
        },
        {
            "id": "chunk_10__try_convert_2",
            "code": "    if origin is None:\n        origin = target_type\n"
        },
        {
            "id": "chunk_10__try_convert_3",
            "code": "    if origin not in [list, dict, tuple, str, set, int, float, bool]:\n        return value\n"
        },
        {
            "id": "chunk_10__try_convert_4",
            "code": "    # Handle the case when value is already of the target type\n    if isinstance(value, origin):\n"
        },
        {
            "id": "chunk_10__try_convert_5",
            "code": "        if not args:\n            return value\n"
        },
        {
            "id": "chunk_10__try_convert_6",
            "code": "        else:\n            # Need to convert elements\n"
        },
        {
            "id": "chunk_10__try_convert_7",
            "code": "            if origin is list:\n                return [convert(v, args[0]) for v in value]\n"
        },
        {
            "id": "chunk_10__try_convert_8",
            "code": "            elif origin is tuple:\n                # Tuples can have multiple types\n"
        },
        {
            "id": "chunk_10__try_convert_9",
            "code": "                if len(args) == 1:\n                    return tuple(convert(v, args[0]) for v in value)\n"
        },
        {
            "id": "chunk_10__try_convert_10",
            "code": "                else:\n                    return tuple(convert(v, t) for v, t in zip(value, args))\n"
        },
        {
            "id": "chunk_10__try_convert_11",
            "code": "            elif origin is dict:\n                key_type, val_type = args\n                return {\n                    convert(k, key_type): convert(v, val_type) for k, v in value.items()\n                }\n"
        },
        {
            "id": "chunk_10__try_convert_12",
            "code": "            elif origin is set:\n                return {convert(v, args[0]) for v in value}\n"
        },
        {
            "id": "chunk_10__try_convert_13",
            "code": "            else:\n                return value\n"
        },
        {
            "id": "chunk_10__try_convert_14",
            "code": "    elif raise_on_mismatch:\n        raise TypeError(f\"Value {value} is not of expected type {target_type}\")\n"
        },
        {
            "id": "chunk_10__try_convert_15",
            "code": "    else:\n        # Need to convert value to the origin type\n"
        },
        {
            "id": "chunk_10__try_convert_16",
            "code": "        if origin is list:\n            value = __convert_list(value)\n"
        },
        {
            "id": "chunk_10__try_convert_17",
            "code": "            if args:\n                return [convert(v, args[0]) for v in value]\n"
        },
        {
            "id": "chunk_10__try_convert_18",
            "code": "            else:\n                return value\n"
        },
        {
            "id": "chunk_10__try_convert_19",
            "code": "        elif origin is dict:\n            value = __convert_dict(value)\n"
        },
        {
            "id": "chunk_10__try_convert_20",
            "code": "            if args:\n                key_type, val_type = args\n                return {\n                    convert(k, key_type): convert(v, val_type) for k, v in value.items()\n                }\n"
        },
        {
            "id": "chunk_10__try_convert_21",
            "code": "            else:\n                return value\n"
        },
        {
            "id": "chunk_10__try_convert_22",
            "code": "        elif origin is tuple:\n            value = __convert_tuple(value)\n"
        },
        {
            "id": "chunk_10__try_convert_23",
            "code": "            if args:\n                if len(args) == 1:\n                    return tuple(convert(v, args[0]) for v in value)\n"
        },
        {
            "id": "chunk_10__try_convert_24",
            "code": "                else:\n                    return tuple(convert(v, t) for v, t in zip(value, args))\n"
        },
        {
            "id": "chunk_10__try_convert_25",
            "code": "            else:\n                return value\n"
        },
        {
            "id": "chunk_10__try_convert_26",
            "code": "        elif origin is str:\n            return __convert_str(value)\n"
        },
        {
            "id": "chunk_10__try_convert_27",
            "code": "        elif origin is set:\n            value = __convert_set(value)\n"
        },
        {
            "id": "chunk_10__try_convert_28",
            "code": "            if args:\n                return {convert(v, args[0]) for v in value}\n"
        },
        {
            "id": "chunk_10__try_convert_29",
            "code": "            else:\n                return value\n"
        },
        {
            "id": "chunk_10__try_convert_30",
            "code": "        elif origin is int:\n            return __convert_num(value, int)\n"
        },
        {
            "id": "chunk_10__try_convert_31",
            "code": "        elif origin is float:\n            return __convert_num(value, float)\n"
        },
        {
            "id": "chunk_10__try_convert_32",
            "code": "        elif origin is bool:\n            return __convert_bool(value)\n"
        },
        {
            "id": "chunk_10__try_convert_33",
            "code": "        else:\n            return value\n"
        },
        {
            "id": "chunk_11_GlobalBlock_1",
            "code": "T = TypeVar(\"T\")\n"
        },
        {
            "id": "chunk_11_GlobalBlock_2",
            "code": "\n\n\n"
        },
        {
            "id": "chunk_12_type_match_1",
            "code": "def type_match(value: Any, target_type: Type[T]) -> T:\n    return cast(T, _try_convert(value, target_type, raise_on_mismatch=True))\n"
        },
        {
            "id": "chunk_13_convert_1",
            "code": "def convert(value: Any, target_type: Type[T]) -> T:\n"
        },
        {
            "id": "chunk_13_convert_2",
            "code": "    try:\n        return cast(T, _try_convert(value, target_type, raise_on_mismatch=False))\n"
        },
        {
            "id": "chunk_13_convert_3",
            "code": "    except Exception as e:\n        raise ConversionError(f\"Failed to convert {value} to {target_type}\") from e\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_2___convert_list_1",
            "to": "chunk_2___convert_list_2"
        },
        {
            "from": "chunk_2___convert_list_2",
            "to": "chunk_2___convert_list_3"
        },
        {
            "from": "chunk_2___convert_list_2",
            "to": "chunk_2___convert_list_9"
        },
        {
            "from": "chunk_2___convert_list_3",
            "to": "chunk_2___convert_list_4"
        },
        {
            "from": "chunk_2___convert_list_3",
            "to": "chunk_2___convert_list_9"
        },
        {
            "from": "chunk_2___convert_list_4",
            "to": "chunk_2___convert_list_5"
        },
        {
            "from": "chunk_2___convert_list_5",
            "to": "chunk_2___convert_list_6"
        },
        {
            "from": "chunk_2___convert_list_5",
            "to": "chunk_2___convert_list_8"
        },
        {
            "from": "chunk_2___convert_list_6",
            "to": "chunk_2___convert_list_7"
        },
        {
            "from": "chunk_3___convert_dict_1",
            "to": "chunk_3___convert_dict_2"
        },
        {
            "from": "chunk_3___convert_dict_2",
            "to": "chunk_3___convert_dict_3"
        },
        {
            "from": "chunk_3___convert_dict_2",
            "to": "chunk_3___convert_dict_4"
        },
        {
            "from": "chunk_3___convert_dict_4",
            "to": "chunk_3___convert_dict_5"
        },
        {
            "from": "chunk_3___convert_dict_4",
            "to": "chunk_3___convert_dict_6"
        },
        {
            "from": "chunk_3___convert_dict_5",
            "to": "chunk_3___convert_dict_6"
        },
        {
            "from": "chunk_3___convert_dict_6",
            "to": "chunk_3___convert_dict_7"
        },
        {
            "from": "chunk_4___convert_tuple_1",
            "to": "chunk_4___convert_tuple_2"
        },
        {
            "from": "chunk_4___convert_tuple_2",
            "to": "chunk_4___convert_tuple_3"
        },
        {
            "from": "chunk_4___convert_tuple_2",
            "to": "chunk_4___convert_tuple_6"
        },
        {
            "from": "chunk_4___convert_tuple_3",
            "to": "chunk_4___convert_tuple_4"
        },
        {
            "from": "chunk_4___convert_tuple_3",
            "to": "chunk_4___convert_tuple_6"
        },
        {
            "from": "chunk_4___convert_tuple_4",
            "to": "chunk_4___convert_tuple_5"
        },
        {
            "from": "chunk_4___convert_tuple_4",
            "to": "chunk_4___convert_tuple_6"
        },
        {
            "from": "chunk_4___convert_tuple_5",
            "to": "chunk_4___convert_tuple_6"
        },
        {
            "from": "chunk_5___convert_set_1",
            "to": "chunk_5___convert_set_2"
        },
        {
            "from": "chunk_5___convert_set_2",
            "to": "chunk_5___convert_set_3"
        },
        {
            "from": "chunk_5___convert_set_2",
            "to": "chunk_5___convert_set_5"
        },
        {
            "from": "chunk_5___convert_set_3",
            "to": "chunk_5___convert_set_4"
        },
        {
            "from": "chunk_5___convert_set_3",
            "to": "chunk_5___convert_set_5"
        },
        {
            "from": "chunk_6___convert_str_1",
            "to": "chunk_6___convert_str_2"
        },
        {
            "from": "chunk_6___convert_str_2",
            "to": "chunk_6___convert_str_3"
        },
        {
            "from": "chunk_8___convert_num_1",
            "to": "chunk_8___convert_num_2"
        },
        {
            "from": "chunk_8___convert_num_2",
            "to": "chunk_8___convert_num_3"
        },
        {
            "from": "chunk_8___convert_num_2",
            "to": "chunk_8___convert_num_4"
        },
        {
            "from": "chunk_9___convert_bool_1",
            "to": "chunk_9___convert_bool_2"
        },
        {
            "from": "chunk_9___convert_bool_2",
            "to": "chunk_9___convert_bool_3"
        },
        {
            "from": "chunk_9___convert_bool_2",
            "to": "chunk_9___convert_bool_5"
        },
        {
            "from": "chunk_9___convert_bool_3",
            "to": "chunk_9___convert_bool_4"
        },
        {
            "from": "chunk_10__try_convert_1",
            "to": "chunk_10__try_convert_2"
        },
        {
            "from": "chunk_10__try_convert_2",
            "to": "chunk_10__try_convert_3"
        },
        {
            "from": "chunk_10__try_convert_3",
            "to": "chunk_10__try_convert_4"
        },
        {
            "from": "chunk_10__try_convert_3",
            "to": "chunk_10__try_convert_33"
        },
        {
            "from": "chunk_10__try_convert_4",
            "to": "chunk_10__try_convert_5"
        },
        {
            "from": "chunk_10__try_convert_4",
            "to": "chunk_10__try_convert_14"
        },
        {
            "from": "chunk_10__try_convert_5",
            "to": "chunk_10__try_convert_6"
        },
        {
            "from": "chunk_10__try_convert_5",
            "to": "chunk_10__try_convert_13"
        },
        {
            "from": "chunk_10__try_convert_6",
            "to": "chunk_10__try_convert_7"
        },
        {
            "from": "chunk_10__try_convert_6",
            "to": "chunk_10__try_convert_8"
        },
        {
            "from": "chunk_10__try_convert_6",
            "to": "chunk_10__try_convert_11"
        },
        {
            "from": "chunk_10__try_convert_6",
            "to": "chunk_10__try_convert_12"
        },
        {
            "from": "chunk_10__try_convert_6",
            "to": "chunk_10__try_convert_13"
        },
        {
            "from": "chunk_10__try_convert_8",
            "to": "chunk_10__try_convert_9"
        },
        {
            "from": "chunk_10__try_convert_8",
            "to": "chunk_10__try_convert_10"
        },
        {
            "from": "chunk_10__try_convert_14",
            "to": "chunk_10__try_convert_15"
        },
        {
            "from": "chunk_10__try_convert_15",
            "to": "chunk_10__try_convert_16"
        },
        {
            "from": "chunk_10__try_convert_15",
            "to": "chunk_10__try_convert_19"
        },
        {
            "from": "chunk_10__try_convert_15",
            "to": "chunk_10__try_convert_22"
        },
        {
            "from": "chunk_10__try_convert_15",
            "to": "chunk_10__try_convert_26"
        },
        {
            "from": "chunk_10__try_convert_15",
            "to": "chunk_10__try_convert_27"
        },
        {
            "from": "chunk_10__try_convert_15",
            "to": "chunk_10__try_convert_30"
        },
        {
            "from": "chunk_10__try_convert_15",
            "to": "chunk_10__try_convert_31"
        },
        {
            "from": "chunk_10__try_convert_15",
            "to": "chunk_10__try_convert_32"
        },
        {
            "from": "chunk_10__try_convert_15",
            "to": "chunk_10__try_convert_33"
        },
        {
            "from": "chunk_10__try_convert_16",
            "to": "chunk_10__try_convert_17"
        },
        {
            "from": "chunk_10__try_convert_16",
            "to": "chunk_10__try_convert_18"
        },
        {
            "from": "chunk_10__try_convert_19",
            "to": "chunk_10__try_convert_20"
        },
        {
            "from": "chunk_10__try_convert_19",
            "to": "chunk_10__try_convert_21"
        },
        {
            "from": "chunk_10__try_convert_22",
            "to": "chunk_10__try_convert_23"
        },
        {
            "from": "chunk_10__try_convert_22",
            "to": "chunk_10__try_convert_25"
        },
        {
            "from": "chunk_10__try_convert_23",
            "to": "chunk_10__try_convert_24"
        },
        {
            "from": "chunk_10__try_convert_23",
            "to": "chunk_10__try_convert_25"
        },
        {
            "from": "chunk_10__try_convert_27",
            "to": "chunk_10__try_convert_28"
        },
        {
            "from": "chunk_10__try_convert_27",
            "to": "chunk_10__try_convert_29"
        },
        {
            "from": "chunk_11_GlobalBlock_1",
            "to": "chunk_11_GlobalBlock_2"
        },
        {
            "from": "chunk_13_convert_1",
            "to": "chunk_13_convert_2"
        },
        {
            "from": "chunk_13_convert_2",
            "to": "chunk_13_convert_3"
        }
    ]
}