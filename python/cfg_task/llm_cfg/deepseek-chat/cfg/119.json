{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "from timeit import timeit\n"
        },
        {
            "id": "chunk_1_get_set_bits_count_using_brian_kernighans_algorithm_1",
            "code": "def get_set_bits_count_using_brian_kernighans_algorithm(number: int) -> int:\n    \"\"\"\n    Count the number of set bits in a 32 bit integer\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(25)\n    3\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(37)\n    3\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(21)\n    3\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(58)\n    4\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(0)\n    0\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(256)\n    1\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: the value of input must not be negative\n    \"\"\"\n"
        },
        {
            "id": "chunk_1_get_set_bits_count_using_brian_kernighans_algorithm_2",
            "code": "    if number < 0:\n        raise ValueError(\"the value of input must not be negative\")\n"
        },
        {
            "id": "chunk_1_get_set_bits_count_using_brian_kernighans_algorithm_3",
            "code": "    result = 0\n"
        },
        {
            "id": "chunk_1_get_set_bits_count_using_brian_kernighans_algorithm_4",
            "code": "    while number:\n        number &= number - 1\n        result += 1\n"
        },
        {
            "id": "chunk_1_get_set_bits_count_using_brian_kernighans_algorithm_5",
            "code": "    return result\n"
        },
        {
            "id": "chunk_2_GlobalBlock_1",
            "code": "\n\n\n"
        },
        {
            "id": "chunk_3_get_set_bits_count_using_modulo_operator_1",
            "code": "def get_set_bits_count_using_modulo_operator(number: int) -> int:\n    \"\"\"\n    Count the number of set bits in a 32 bit integer\n    >>> get_set_bits_count_using_modulo_operator(25)\n    3\n    >>> get_set_bits_count_using_modulo_operator(37)\n    3\n    >>> get_set_bits_count_using_modulo_operator(21)\n    3\n    >>> get_set_bits_count_using_modulo_operator(58)\n    4\n    >>> get_set_bits_count_using_modulo_operator(0)\n    0\n    >>> get_set_bits_count_using_modulo_operator(256)\n    1\n    >>> get_set_bits_count_using_modulo_operator(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: the value of input must not be negative\n    \"\"\"\n"
        },
        {
            "id": "chunk_3_get_set_bits_count_using_modulo_operator_2",
            "code": "    if number < 0:\n        raise ValueError(\"the value of input must not be negative\")\n"
        },
        {
            "id": "chunk_3_get_set_bits_count_using_modulo_operator_3",
            "code": "    result = 0\n"
        },
        {
            "id": "chunk_3_get_set_bits_count_using_modulo_operator_4",
            "code": "    while number:\n        if number % 2 == 1:\n            result += 1\n        number >>= 1\n"
        },
        {
            "id": "chunk_3_get_set_bits_count_using_modulo_operator_5",
            "code": "    return result\n"
        },
        {
            "id": "chunk_4_GlobalBlock_1",
            "code": "\n\n\n"
        },
        {
            "id": "chunk_5_benchmark_1",
            "code": "def benchmark() -> None:\n    \"\"\"\n    Benchmark code for comparing 2 functions, with different length int values.\n    Brian Kernighan's algorithm is consistently faster than using modulo_operator.\n    \"\"\"\n"
        },
        {
            "id": "chunk_5_benchmark_2",
            "code": "    def do_benchmark(number: int) -> None:\n        setup = \"import __main__ as z\"\n        print(f\"Benchmark when {number = }:\")\n        print(f\"{get_set_bits_count_using_modulo_operator(number) = }\")\n        timing = timeit(\n            f\"z.get_set_bits_count_using_modulo_operator({number})\", setup=setup\n        )\n        print(f\"timeit() runs in {timing} seconds\")\n        print(f\"{get_set_bits_count_using_brian_kernighans_algorithm(number) = }\")\n        timing = timeit(\n            f\"z.get_set_bits_count_using_brian_kernighans_algorithm({number})\",\n            setup=setup,\n        )\n        print(f\"timeit() runs in {timing} seconds\")\n"
        },
        {
            "id": "chunk_5_benchmark_3",
            "code": "    for number in (25, 37, 58, 0):\n        do_benchmark(number)\n        print()\n"
        },
        {
            "id": "chunk_6_GlobalBlock_1",
            "code": "if __name__ == \"__main__\":\n"
        },
        {
            "id": "chunk_6_GlobalBlock_2",
            "code": "    import doctest\n\n    doctest.testmod()\n"
        },
        {
            "id": "chunk_6_GlobalBlock_3",
            "code": "    benchmark()\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_1_get_set_bits_count_using_brian_kernighans_algorithm_1",
            "to": "chunk_1_get_set_bits_count_using_brian_kernighans_algorithm_2"
        },
        {
            "from": "chunk_1_get_set_bits_count_using_brian_kernighans_algorithm_2",
            "to": "chunk_1_get_set_bits_count_using_brian_kernighans_algorithm_3"
        },
        {
            "from": "chunk_1_get_set_bits_count_using_brian_kernighans_algorithm_2",
            "to": "chunk_1_get_set_bits_count_using_brian_kernighans_algorithm_5"
        },
        {
            "from": "chunk_1_get_set_bits_count_using_brian_kernighans_algorithm_3",
            "to": "chunk_1_get_set_bits_count_using_brian_kernighans_algorithm_4"
        },
        {
            "from": "chunk_1_get_set_bits_count_using_brian_kernighans_algorithm_4",
            "to": "chunk_1_get_set_bits_count_using_brian_kernighans_algorithm_4"
        },
        {
            "from": "chunk_1_get_set_bits_count_using_brian_kernighans_algorithm_4",
            "to": "chunk_1_get_set_bits_count_using_brian_kernighans_algorithm_5"
        },
        {
            "from": "chunk_3_get_set_bits_count_using_modulo_operator_1",
            "to": "chunk_3_get_set_bits_count_using_modulo_operator_2"
        },
        {
            "from": "chunk_3_get_set_bits_count_using_modulo_operator_2",
            "to": "chunk_3_get_set_bits_count_using_modulo_operator_3"
        },
        {
            "from": "chunk_3_get_set_bits_count_using_modulo_operator_3",
            "to": "chunk_3_get_set_bits_count_using_modulo_operator_4"
        },
        {
            "from": "chunk_3_get_set_bits_count_using_modulo_operator_4",
            "to": "chunk_3_get_set_bits_count_using_modulo_operator_4"
        },
        {
            "from": "chunk_3_get_set_bits_count_using_modulo_operator_4",
            "to": "chunk_3_get_set_bits_count_using_modulo_operator_5"
        },
        {
            "from": "chunk_5_benchmark_1",
            "to": "chunk_5_benchmark_2"
        },
        {
            "from": "chunk_5_benchmark_2",
            "to": "chunk_5_benchmark_3"
        },
        {
            "from": "chunk_6_GlobalBlock_1",
            "to": "chunk_6_GlobalBlock_2"
        },
        {
            "from": "chunk_6_GlobalBlock_2",
            "to": "chunk_6_GlobalBlock_3"
        }
    ]
}