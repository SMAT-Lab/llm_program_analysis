{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "import json\nfrom typing import Any, Type, TypeVar, overload\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "import jsonschema\nfrom fastapi.encoders import jsonable_encoder\n"
        },
        {
            "id": "chunk_0_GlobalBlock_3",
            "code": "from .type import type_match\n"
        },
        {
            "id": "chunk_1_to_dict_1",
            "code": "def to_dict(data) -> dict:\n    return jsonable_encoder(data)\n"
        },
        {
            "id": "chunk_2_dumps_1",
            "code": "def dumps(data) -> str:\n    return json.dumps(jsonable_encoder(data))\n"
        },
        {
            "id": "chunk_3_GlobalBlock_1",
            "code": "T = TypeVar(\"T\")\n"
        },
        {
            "id": "chunk_3_GlobalBlock_2",
            "code": "\n\n\n"
        },
        {
            "id": "chunk_4_loads_overload_1_1",
            "code": "@overload\ndef loads(data: str, *args, target_type: Type[T], **kwargs) -> T: ...\n"
        },
        {
            "id": "chunk_5_loads_overload_2_1",
            "code": "@overload\ndef loads(data: str, *args, **kwargs) -> Any: ...\n"
        },
        {
            "id": "chunk_6_loads_1",
            "code": "def loads(data: str, *args, target_type: Type[T] | None = None, **kwargs) -> Any:\n    parsed = json.loads(data, *args, **kwargs)\n"
        },
        {
            "id": "chunk_6_loads_2",
            "code": "    if target_type:\n        return type_match(parsed, target_type)\n"
        },
        {
            "id": "chunk_6_loads_3",
            "code": "    return parsed\n"
        },
        {
            "id": "chunk_7_validate_with_jsonschema_1",
            "code": "def validate_with_jsonschema(\n    schema: dict[str, Any], data: dict[str, Any]\n) -> str | None:\n    \"\"\"\n    Validate the data against the schema.\n    Returns the validation error message if the data does not match the schema.\n    \"\"\"\n"
        },
        {
            "id": "chunk_7_validate_with_jsonschema_2",
            "code": "    try:\n        jsonschema.validate(data, schema)\n        return None\n"
        },
        {
            "id": "chunk_7_validate_with_jsonschema_3",
            "code": "    except jsonschema.ValidationError as e:\n        return str(e)\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_0_GlobalBlock_2",
            "to": "chunk_0_GlobalBlock_3"
        },
        {
            "from": "chunk_3_GlobalBlock_1",
            "to": "chunk_3_GlobalBlock_2"
        },
        {
            "from": "chunk_6_loads_1",
            "to": "chunk_6_loads_2"
        },
        {
            "from": "chunk_6_loads_2",
            "to": "chunk_6_loads_3"
        },
        {
            "from": "chunk_7_validate_with_jsonschema_1",
            "to": "chunk_7_validate_with_jsonschema_2"
        },
        {
            "from": "chunk_7_validate_with_jsonschema_2",
            "to": "chunk_7_validate_with_jsonschema_3"
        }
    ]
}