{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "# Information on binary shifts:\n# https://docs.python.org/3/library/stdtypes.html#bitwise-operations-on-integer-types\n# https://www.interviewcake.com/concept/java/bit-shift\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "\n\n\n"
        },
        {
            "id": "chunk_1_logical_left_shift_1",
            "code": "def logical_left_shift(number: int, shift_amount: int) -> str:\n    \"\"\"\n    Take in 2 positive integers.\n    'number' is the integer to be logically left shifted 'shift_amount' times.\n    i.e. (number << shift_amount)\n    Return the shifted binary representation.\n\n    >>> logical_left_shift(0, 1)\n    '0b00'\n    >>> logical_left_shift(1, 1)\n    '0b10'\n    >>> logical_left_shift(1, 5)\n    '0b100000'\n    >>> logical_left_shift(17, 2)\n    '0b1000100'\n    >>> logical_left_shift(1983, 4)\n    '0b111101111110000'\n    >>> logical_left_shift(1, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: both inputs must be positive integers\n    \"\"\"\n"
        },
        {
            "id": "chunk_1_logical_left_shift_2",
            "code": "    if number < 0 or shift_amount < 0:\n        raise ValueError(\"both inputs must be positive integers\")\n"
        },
        {
            "id": "chunk_1_logical_left_shift_3",
            "code": "    binary_number = str(bin(number))\n    binary_number += \"0\" * shift_amount\n    return binary_number\n"
        },
        {
            "id": "chunk_2_GlobalBlock_1",
            "code": "\n\n\n"
        },
        {
            "id": "chunk_3_logical_right_shift_1",
            "code": "def logical_right_shift(number: int, shift_amount: int) -> str:\n    \"\"\"\n    Take in positive 2 integers.\n    'number' is the integer to be logically right shifted 'shift_amount' times.\n    i.e. (number >>> shift_amount)\n    Return the shifted binary representation.\n\n    >>> logical_right_shift(0, 1)\n    '0b0'\n    >>> logical_right_shift(1, 1)\n    '0b0'\n    >>> logical_right_shift(1, 5)\n    '0b0'\n    >>> logical_right_shift(17, 2)\n    '0b100'\n    >>> logical_right_shift(1983, 4)\n    '0b1111011'\n    >>> logical_right_shift(1, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: both inputs must be positive integers\n    \"\"\"\n"
        },
        {
            "id": "chunk_3_logical_right_shift_2",
            "code": "    if number < 0 or shift_amount < 0:\n        raise ValueError(\"both inputs must be positive integers\")\n"
        },
        {
            "id": "chunk_3_logical_right_shift_3",
            "code": "    binary_number = str(bin(number))[2:]\n"
        },
        {
            "id": "chunk_3_logical_right_shift_4",
            "code": "    if shift_amount >= len(binary_number):\n        return \"0b0\"\n"
        },
        {
            "id": "chunk_3_logical_right_shift_5",
            "code": "    shifted_binary_number = binary_number[: len(binary_number) - shift_amount]\n    return \"0b\" + shifted_binary_number\n"
        },
        {
            "id": "chunk_4_GlobalBlock_1",
            "code": "\n\n\n"
        },
        {
            "id": "chunk_5_arithmetic_right_shift_1",
            "code": "def arithmetic_right_shift(number: int, shift_amount: int) -> str:\n    \"\"\"\n    Take in 2 integers.\n    'number' is the integer to be arithmetically right shifted 'shift_amount' times.\n    i.e. (number >> shift_amount)\n    Return the shifted binary representation.\n\n    >>> arithmetic_right_shift(0, 1)\n    '0b00'\n    >>> arithmetic_right_shift(1, 1)\n    '0b00'\n    >>> arithmetic_right_shift(-1, 1)\n    '0b11'\n    >>> arithmetic_right_shift(17, 2)\n    '0b000100'\n    >>> arithmetic_right_shift(-17, 2)\n    '0b111011'\n    >>> arithmetic_right_shift(-1983, 4)\n    '0b111110000100'\n    \"\"\"\n"
        },
        {
            "id": "chunk_5_arithmetic_right_shift_2",
            "code": "    if number >= 0:  # Get binary representation of positive number\n        binary_number = \"0\" + str(bin(number)).strip(\"-\")[2:]\n"
        },
        {
            "id": "chunk_5_arithmetic_right_shift_3",
            "code": "    else:  # Get binary (2's complement) representation of negative number\n        binary_number_length = len(bin(number)[3:])  # Find 2's complement of number\n        binary_number = bin(abs(number) - (1 << binary_number_length))[3:]\n        binary_number = (\n            \"1\" + \"0\" * (binary_number_length - len(binary_number)) + binary_number\n        )\n"
        },
        {
            "id": "chunk_5_arithmetic_right_shift_4",
            "code": "    if shift_amount >= len(binary_number):\n        return \"0b\" + binary_number[0] * len(binary_number)\n"
        },
        {
            "id": "chunk_5_arithmetic_right_shift_5",
            "code": "    return (\n        \"0b\"\n        + binary_number[0] * shift_amount\n        + binary_number[: len(binary_number) - shift_amount]\n    )\n"
        },
        {
            "id": "chunk_6_GlobalBlock_1",
            "code": "\n\n\n"
        },
        {
            "id": "chunk_7_MainBlock_1",
            "code": "if __name__ == \"__main__\":\n"
        },
        {
            "id": "chunk_7_MainBlock_2",
            "code": "    import doctest\n\n    doctest.testmod()\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_1_logical_left_shift_1",
            "to": "chunk_1_logical_left_shift_2"
        },
        {
            "from": "chunk_1_logical_left_shift_2",
            "to": "chunk_1_logical_left_shift_3"
        },
        {
            "from": "chunk_3_logical_right_shift_1",
            "to": "chunk_3_logical_right_shift_2"
        },
        {
            "from": "chunk_3_logical_right_shift_2",
            "to": "chunk_3_logical_right_shift_3"
        },
        {
            "from": "chunk_3_logical_right_shift_3",
            "to": "chunk_3_logical_right_shift_4"
        },
        {
            "from": "chunk_3_logical_right_shift_4",
            "to": "chunk_3_logical_right_shift_5"
        },
        {
            "from": "chunk_5_arithmetic_right_shift_1",
            "to": "chunk_5_arithmetic_right_shift_2"
        },
        {
            "from": "chunk_5_arithmetic_right_shift_2",
            "to": "chunk_5_arithmetic_right_shift_3"
        },
        {
            "from": "chunk_5_arithmetic_right_shift_2",
            "to": "chunk_5_arithmetic_right_shift_4"
        },
        {
            "from": "chunk_5_arithmetic_right_shift_3",
            "to": "chunk_5_arithmetic_right_shift_4"
        },
        {
            "from": "chunk_5_arithmetic_right_shift_4",
            "to": "chunk_5_arithmetic_right_shift_5"
        },
        {
            "from": "chunk_7_MainBlock_1",
            "to": "chunk_7_MainBlock_2"
        }
    ]
}