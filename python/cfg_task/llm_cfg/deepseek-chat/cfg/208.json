{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "import asyncio\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "import pytest\n"
        },
        {
            "id": "chunk_0_GlobalBlock_3",
            "code": "from backend.util.retry import conn_retry\n"
        },
        {
            "id": "chunk_1_test_conn_retry_sync_function_1",
            "code": "def test_conn_retry_sync_function():\n    retry_count = 0\n"
        },
        {
            "id": "chunk_1_test_conn_retry_sync_function_2",
            "code": "    @conn_retry(\"Test\", \"Test function\", max_retry=2, max_wait=0.1, min_wait=0.1)\n    def test_function():\n"
        },
        {
            "id": "chunk_1_test_conn_retry_sync_function_3",
            "code": "        nonlocal retry_count\n        retry_count -= 1\n"
        },
        {
            "id": "chunk_1_test_conn_retry_sync_function_4",
            "code": "        if retry_count > 0:\n            raise ValueError(\"Test error\")\n"
        },
        {
            "id": "chunk_1_test_conn_retry_sync_function_5",
            "code": "        return \"Success\"\n"
        },
        {
            "id": "chunk_1_test_conn_retry_sync_function_6",
            "code": "    retry_count = 2\n    res = test_function()\n"
        },
        {
            "id": "chunk_1_test_conn_retry_sync_function_7",
            "code": "    assert res == \"Success\"\n"
        },
        {
            "id": "chunk_1_test_conn_retry_sync_function_8",
            "code": "    retry_count = 100\n    with pytest.raises(ValueError) as e:\n"
        },
        {
            "id": "chunk_1_test_conn_retry_sync_function_9",
            "code": "        test_function()\n        assert str(e.value) == \"Test error\"\n"
        },
        {
            "id": "chunk_2_test_conn_retry_async_function_1",
            "code": "@pytest.mark.asyncio\nasync def test_conn_retry_async_function():\n"
        },
        {
            "id": "chunk_2_test_conn_retry_async_function_2",
            "code": "    retry_count = 0\n"
        },
        {
            "id": "chunk_2_test_conn_retry_async_function_3",
            "code": "    @conn_retry(\"Test\", \"Test function\", max_retry=2, max_wait=0.1, min_wait=0.1)\n    async def test_function():\n"
        },
        {
            "id": "chunk_2_test_conn_retry_async_function_4",
            "code": "        nonlocal retry_count\n        await asyncio.sleep(1)\n        retry_count -= 1\n"
        },
        {
            "id": "chunk_2_test_conn_retry_async_function_5",
            "code": "        if retry_count > 0:\n            raise ValueError(\"Test error\")\n"
        },
        {
            "id": "chunk_2_test_conn_retry_async_function_6",
            "code": "        return \"Success\"\n"
        },
        {
            "id": "chunk_2_test_conn_retry_async_function_7",
            "code": "    retry_count = 2\n"
        },
        {
            "id": "chunk_2_test_conn_retry_async_function_8",
            "code": "    res = await test_function()\n    assert res == \"Success\"\n"
        },
        {
            "id": "chunk_2_test_conn_retry_async_function_9",
            "code": "    retry_count = 100\n"
        },
        {
            "id": "chunk_2_test_conn_retry_async_function_10",
            "code": "    with pytest.raises(ValueError) as e:\n        await test_function()\n        assert str(e.value) == \"Test error\"\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_0_GlobalBlock_2",
            "to": "chunk_0_GlobalBlock_3"
        },
        {
            "from": "chunk_1_test_conn_retry_sync_function_1",
            "to": "chunk_1_test_conn_retry_sync_function_2"
        },
        {
            "from": "chunk_1_test_conn_retry_sync_function_2",
            "to": "chunk_1_test_conn_retry_sync_function_3"
        },
        {
            "from": "chunk_1_test_conn_retry_sync_function_3",
            "to": "chunk_1_test_conn_retry_sync_function_4"
        },
        {
            "from": "chunk_1_test_conn_retry_sync_function_4",
            "to": "chunk_1_test_conn_retry_sync_function_5"
        },
        {
            "from": "chunk_1_test_conn_retry_sync_function_4",
            "to": "chunk_1_test_conn_retry_sync_function_6"
        },
        {
            "from": "chunk_1_test_conn_retry_sync_function_5",
            "to": "chunk_1_test_conn_retry_sync_function_6"
        },
        {
            "from": "chunk_1_test_conn_retry_sync_function_6",
            "to": "chunk_1_test_conn_retry_sync_function_7"
        },
        {
            "from": "chunk_1_test_conn_retry_sync_function_7",
            "to": "chunk_1_test_conn_retry_sync_function_8"
        },
        {
            "from": "chunk_1_test_conn_retry_sync_function_8",
            "to": "chunk_1_test_conn_retry_sync_function_9"
        },
        {
            "from": "chunk_2_test_conn_retry_async_function_1",
            "to": "chunk_2_test_conn_retry_async_function_2"
        },
        {
            "from": "chunk_2_test_conn_retry_async_function_2",
            "to": "chunk_2_test_conn_retry_async_function_3"
        },
        {
            "from": "chunk_2_test_conn_retry_async_function_3",
            "to": "chunk_2_test_conn_retry_async_function_4"
        },
        {
            "from": "chunk_2_test_conn_retry_async_function_4",
            "to": "chunk_2_test_conn_retry_async_function_5"
        },
        {
            "from": "chunk_2_test_conn_retry_async_function_5",
            "to": "chunk_2_test_conn_retry_async_function_6"
        },
        {
            "from": "chunk_2_test_conn_retry_async_function_5",
            "to": "chunk_2_test_conn_retry_async_function_4"
        },
        {
            "from": "chunk_2_test_conn_retry_async_function_6",
            "to": "chunk_2_test_conn_retry_async_function_7"
        },
        {
            "from": "chunk_2_test_conn_retry_async_function_7",
            "to": "chunk_2_test_conn_retry_async_function_8"
        },
        {
            "from": "chunk_2_test_conn_retry_async_function_8",
            "to": "chunk_2_test_conn_retry_async_function_9"
        },
        {
            "from": "chunk_2_test_conn_retry_async_function_9",
            "to": "chunk_2_test_conn_retry_async_function_10"
        }
    ]
}