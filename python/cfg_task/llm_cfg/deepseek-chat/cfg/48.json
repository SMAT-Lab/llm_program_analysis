{
    "nodes": [
        {
            "id": "chunk_0_match_word_pattern_1",
            "code": "def match_word_pattern(pattern: str, input_string: str) -> bool:\n    \"\"\"\n    Determine if a given pattern matches a string using backtracking.\n\n    pattern: The pattern to match.\n    input_string: The string to match against the pattern.\n    return: True if the pattern matches the string, False otherwise.\n\n    >>> match_word_pattern(\"aba\", \"GraphTreesGraph\")\n    True\n\n    >>> match_word_pattern(\"xyx\", \"PythonRubyPython\")\n    True\n\n    >>> match_word_pattern(\"GG\", \"PythonJavaPython\")\n    False\n    \"\"\"\n"
        },
        {
            "id": "chunk_0_match_word_pattern_2",
            "code": "    def backtrack(pattern_index: int, str_index: int) -> bool:\n        \"\"\"\n        >>> backtrack(0, 0)\n        True\n\n        >>> backtrack(0, 1)\n        True\n\n        >>> backtrack(0, 4)\n        False\n        \"\"\"\n"
        },
        {
            "id": "chunk_0_match_word_pattern_3",
            "code": "        if pattern_index == len(pattern) and str_index == len(input_string):\n            return True\n"
        },
        {
            "id": "chunk_0_match_word_pattern_4",
            "code": "        if pattern_index == len(pattern) or str_index == len(input_string):\n            return False\n"
        },
        {
            "id": "chunk_0_match_word_pattern_5",
            "code": "        char = pattern[pattern_index]\n"
        },
        {
            "id": "chunk_0_match_word_pattern_6",
            "code": "        if char in pattern_map:\n            mapped_str = pattern_map[char]\n            if input_string.startswith(mapped_str, str_index):\n                return backtrack(pattern_index + 1, str_index + len(mapped_str))\n"
        },
        {
            "id": "chunk_0_match_word_pattern_7",
            "code": "            else:\n                return False\n"
        },
        {
            "id": "chunk_0_match_word_pattern_8",
            "code": "        for end in range(str_index + 1, len(input_string) + 1):\n            substr = input_string[str_index:end]\n            if substr in str_map:\n                continue\n"
        },
        {
            "id": "chunk_0_match_word_pattern_9",
            "code": "            pattern_map[char] = substr\n            str_map[substr] = char\n            if backtrack(pattern_index + 1, end):\n                return True\n"
        },
        {
            "id": "chunk_0_match_word_pattern_10",
            "code": "            del pattern_map[char]\n            del str_map[substr]\n"
        },
        {
            "id": "chunk_0_match_word_pattern_11",
            "code": "        return False\n"
        },
        {
            "id": "chunk_0_match_word_pattern_12",
            "code": "    pattern_map: dict[str, str] = {}\n    str_map: dict[str, str] = {}\n"
        },
        {
            "id": "chunk_0_match_word_pattern_13",
            "code": "    return backtrack(0, 0)\n"
        },
        {
            "id": "chunk_1_GlobalBlock_1",
            "code": "if __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_match_word_pattern_1",
            "to": "chunk_0_match_word_pattern_2"
        },
        {
            "from": "chunk_0_match_word_pattern_2",
            "to": "chunk_0_match_word_pattern_3"
        },
        {
            "from": "chunk_0_match_word_pattern_3",
            "to": "chunk_0_match_word_pattern_4"
        },
        {
            "from": "chunk_0_match_word_pattern_3",
            "to": "chunk_0_match_word_pattern_13"
        },
        {
            "from": "chunk_0_match_word_pattern_4",
            "to": "chunk_0_match_word_pattern_5"
        },
        {
            "from": "chunk_0_match_word_pattern_4",
            "to": "chunk_0_match_word_pattern_11"
        },
        {
            "from": "chunk_0_match_word_pattern_5",
            "to": "chunk_0_match_word_pattern_6"
        },
        {
            "from": "chunk_0_match_word_pattern_6",
            "to": "chunk_0_match_word_pattern_7"
        },
        {
            "from": "chunk_0_match_word_pattern_6",
            "to": "chunk_0_match_word_pattern_8"
        },
        {
            "from": "chunk_0_match_word_pattern_7",
            "to": "chunk_0_match_word_pattern_11"
        },
        {
            "from": "chunk_0_match_word_pattern_8",
            "to": "chunk_0_match_word_pattern_9"
        },
        {
            "from": "chunk_0_match_word_pattern_8",
            "to": "chunk_0_match_word_pattern_10"
        },
        {
            "from": "chunk_0_match_word_pattern_9",
            "to": "chunk_0_match_word_pattern_13"
        },
        {
            "from": "chunk_0_match_word_pattern_9",
            "to": "chunk_0_match_word_pattern_10"
        },
        {
            "from": "chunk_0_match_word_pattern_10",
            "to": "chunk_0_match_word_pattern_8"
        },
        {
            "from": "chunk_0_match_word_pattern_12",
            "to": "chunk_0_match_word_pattern_13"
        }
    ]
}