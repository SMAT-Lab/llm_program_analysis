{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "from enum import Enum\nfrom typing import Literal\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "from e2b_code_interpreter import Sandbox\nfrom pydantic import SecretStr\n"
        },
        {
            "id": "chunk_0_GlobalBlock_3",
            "code": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import (\n    APIKeyCredentials,\n    CredentialsField,\n    CredentialsMetaInput,\n    SchemaField,\n)\n"
        },
        {
            "id": "chunk_0_GlobalBlock_4",
            "code": "from backend.integrations.providers import ProviderName\n"
        },
        {
            "id": "chunk_1_TEST_CREDENTIALS_1",
            "code": "TEST_CREDENTIALS = APIKeyCredentials(\n    id=\"01234567-89ab-cdef-0123-456789abcdef\",\n    provider=\"e2b\",\n    api_key=SecretStr(\"mock-e2b-api-key\"),\n    title=\"Mock E2B API key\",\n    expires_at=None,\n)\n"
        },
        {
            "id": "chunk_2_TEST_CREDENTIALS_INPUT_1",
            "code": "TEST_CREDENTIALS_INPUT = {\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.type,\n}\n"
        },
        {
            "id": "chunk_3_ProgrammingLanguage_1",
            "code": "class ProgrammingLanguage(Enum):\n    PYTHON = \"python\"\n    JAVASCRIPT = \"js\"\n    BASH = \"bash\"\n    R = \"r\"\n    JAVA = \"java\"\n"
        },
        {
            "id": "chunk_4_CodeExecutionBlock_1",
            "code": "class CodeExecutionBlock(Block):\n    # TODO : Add support to upload and download files\n    # Currently, You can customized the CPU and Memory, only by creating a pre customized sandbox template\n"
        },
        {
            "id": "chunk_4_CodeExecutionBlock_2",
            "code": "    class Input(BlockSchema):\n        credentials: CredentialsMetaInput[\n            Literal[ProviderName.E2B], Literal[\"api_key\"]\n        ] = CredentialsField(\n            description=\"Enter your api key for the E2B Sandbox. You can get it in here - https://e2b.dev/docs\",\n        )\n"
        },
        {
            "id": "chunk_4_CodeExecutionBlock_3",
            "code": "        # Todo : Option to run commond in background\n        setup_commands: list[str] = SchemaField(\n            description=(\n                \"Shell commands to set up the sandbox before running the code. \"\n                \"You can use `curl` or `git` to install your desired Debian based \"\n                \"package manager. `pip` and `npm` are pre-installed.\\n\\n\"\n                \"These commands are executed with `sh`, in the foreground.\"\n            ),\n            placeholder=\"pip install cowsay\",\n            default=[],\n            advanced=False,\n        )\n"
        },
        {
            "id": "chunk_4_CodeExecutionBlock_4",
            "code": "        code: str = SchemaField(\n            description=\"Code to execute in the sandbox\",\n            placeholder=\"print('Hello, World!')\",\n            default=\"\",\n            advanced=False,\n        )\n"
        },
        {
            "id": "chunk_4_CodeExecutionBlock_5",
            "code": "        language: ProgrammingLanguage = SchemaField(\n            description=\"Programming language to execute\",\n            default=ProgrammingLanguage.PYTHON,\n            advanced=False,\n        )\n"
        },
        {
            "id": "chunk_4_CodeExecutionBlock_6",
            "code": "        timeout: int = SchemaField(\n            description=\"Execution timeout in seconds\", default=300\n        )\n"
        },
        {
            "id": "chunk_4_CodeExecutionBlock_7",
            "code": "        template_id: str = SchemaField(\n            description=(\n                \"You can use an E2B sandbox template by entering its ID here. \"\n                \"Check out the E2B docs for more details: \"\n                \"[E2B - Sandbox template](https://e2b.dev/docs/sandbox-template)\"\n            ),\n            default=\"\",\n            advanced=True,\n        )\n"
        },
        {
            "id": "chunk_4_CodeExecutionBlock_8",
            "code": "    class Output(BlockSchema):\n        response: str = SchemaField(description=\"Response from code execution\")\n        stdout_logs: str = SchemaField(\n            description=\"Standard output logs from execution\"\n        )\n        stderr_logs: str = SchemaField(description=\"Standard error logs from execution\")\n        error: str = SchemaField(description=\"Error message if execution failed\")\n"
        },
        {
            "id": "chunk_4_CodeExecutionBlock_9",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"0b02b072-abe7-11ef-8372-fb5d162dd712\",\n            description=\"Executes code in an isolated sandbox environment with internet access.\",\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=CodeExecutionBlock.Input,\n            output_schema=CodeExecutionBlock.Output,\n            test_credentials=TEST_CREDENTIALS,\n            test_input={\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"code\": \"print('Hello World')\",\n                \"language\": ProgrammingLanguage.PYTHON.value,\n                \"setup_commands\": [],\n                \"timeout\": 300,\n                \"template_id\": \"\",\n            },\n            test_output=[\n                (\"response\", \"Hello World\"),\n                (\"stdout_logs\", \"Hello World\\n\"),\n            ],\n            test_mock={\n                \"execute_code\": lambda code, language, setup_commands, timeout, api_key, template_id: (\n                    \"Hello World\",\n                    \"Hello World\\n\",\n                    \"\",\n                ),\n            },\n        )\n"
        },
        {
            "id": "chunk_4_CodeExecutionBlock_10",
            "code": "    def execute_code(\n        self,\n        code: str,\n        language: ProgrammingLanguage,\n        setup_commands: list[str],\n        timeout: int,\n        api_key: str,\n        template_id: str,\n    ):\n"
        },
        {
            "id": "chunk_4_CodeExecutionBlock_11",
            "code": "        try:\n            sandbox = None\n"
        },
        {
            "id": "chunk_4_CodeExecutionBlock_12",
            "code": "            if template_id:\n                sandbox = Sandbox(\n                    template=template_id, api_key=api_key, timeout=timeout\n                )\n"
        },
        {
            "id": "chunk_4_CodeExecutionBlock_13",
            "code": "            else:\n                sandbox = Sandbox(api_key=api_key, timeout=timeout)\n"
        },
        {
            "id": "chunk_4_CodeExecutionBlock_14",
            "code": "            if not sandbox:\n                raise Exception(\"Sandbox not created\")\n"
        },
        {
            "id": "chunk_4_CodeExecutionBlock_15",
            "code": "            # Running setup commands\n            for cmd in setup_commands:\n                sandbox.commands.run(cmd)\n"
        },
        {
            "id": "chunk_4_CodeExecutionBlock_16",
            "code": "            # Executing the code\n            execution = sandbox.run_code(\n                code,\n                language=language.value,\n                on_error=lambda e: sandbox.kill(),  # Kill the sandbox if there is an error\n            )\n"
        },
        {
            "id": "chunk_4_CodeExecutionBlock_17",
            "code": "            if execution.error:\n                raise Exception(execution.error)\n"
        },
        {
            "id": "chunk_4_CodeExecutionBlock_18",
            "code": "            response = execution.text\n            stdout_logs = \"\".join(execution.logs.stdout)\n            stderr_logs = \"\".join(execution.logs.stderr)\n\n            return response, stdout_logs, stderr_logs\n"
        },
        {
            "id": "chunk_4_CodeExecutionBlock_19",
            "code": "        except Exception as e:\n            raise e\n"
        },
        {
            "id": "chunk_4_CodeExecutionBlock_20",
            "code": "    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n"
        },
        {
            "id": "chunk_4_CodeExecutionBlock_21",
            "code": "        try:\n            response, stdout_logs, stderr_logs = self.execute_code(\n                input_data.code,\n                input_data.language,\n                input_data.setup_commands,\n                input_data.timeout,\n                credentials.api_key.get_secret_value(),\n                input_data.template_id,\n            )\n"
        },
        {
            "id": "chunk_4_CodeExecutionBlock_22",
            "code": "            if response:\n                yield \"response\", response\n"
        },
        {
            "id": "chunk_4_CodeExecutionBlock_23",
            "code": "            if stdout_logs:\n                yield \"stdout_logs\", stdout_logs\n"
        },
        {
            "id": "chunk_4_CodeExecutionBlock_24",
            "code": "            if stderr_logs:\n                yield \"stderr_logs\", stderr_logs\n"
        },
        {
            "id": "chunk_4_CodeExecutionBlock_25",
            "code": "        except Exception as e:\n            yield \"error\", str(e)\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_0_GlobalBlock_2",
            "to": "chunk_0_GlobalBlock_3"
        },
        {
            "from": "chunk_0_GlobalBlock_3",
            "to": "chunk_0_GlobalBlock_4"
        },
        {
            "from": "chunk_4_CodeExecutionBlock_1",
            "to": "chunk_4_CodeExecutionBlock_2"
        },
        {
            "from": "chunk_4_CodeExecutionBlock_2",
            "to": "chunk_4_CodeExecutionBlock_3"
        },
        {
            "from": "chunk_4_CodeExecutionBlock_3",
            "to": "chunk_4_CodeExecutionBlock_4"
        },
        {
            "from": "chunk_4_CodeExecutionBlock_4",
            "to": "chunk_4_CodeExecutionBlock_5"
        },
        {
            "from": "chunk_4_CodeExecutionBlock_5",
            "to": "chunk_4_CodeExecutionBlock_6"
        },
        {
            "from": "chunk_4_CodeExecutionBlock_6",
            "to": "chunk_4_CodeExecutionBlock_7"
        },
        {
            "from": "chunk_4_CodeExecutionBlock_7",
            "to": "chunk_4_CodeExecutionBlock_8"
        },
        {
            "from": "chunk_4_CodeExecutionBlock_8",
            "to": "chunk_4_CodeExecutionBlock_9"
        },
        {
            "from": "chunk_4_CodeExecutionBlock_9",
            "to": "chunk_4_CodeExecutionBlock_10"
        },
        {
            "from": "chunk_4_CodeExecutionBlock_10",
            "to": "chunk_4_CodeExecutionBlock_11"
        },
        {
            "from": "chunk_4_CodeExecutionBlock_11",
            "to": "chunk_4_CodeExecutionBlock_12"
        },
        {
            "from": "chunk_4_CodeExecutionBlock_11",
            "to": "chunk_4_CodeExecutionBlock_13"
        },
        {
            "from": "chunk_4_CodeExecutionBlock_12",
            "to": "chunk_4_CodeExecutionBlock_14"
        },
        {
            "from": "chunk_4_CodeExecutionBlock_13",
            "to": "chunk_4_CodeExecutionBlock_14"
        },
        {
            "from": "chunk_4_CodeExecutionBlock_14",
            "to": "chunk_4_CodeExecutionBlock_15"
        },
        {
            "from": "chunk_4_CodeExecutionBlock_15",
            "to": "chunk_4_CodeExecutionBlock_16"
        },
        {
            "from": "chunk_4_CodeExecutionBlock_16",
            "to": "chunk_4_CodeExecutionBlock_17"
        },
        {
            "from": "chunk_4_CodeExecutionBlock_16",
            "to": "chunk_4_CodeExecutionBlock_18"
        },
        {
            "from": "chunk_4_CodeExecutionBlock_17",
            "to": "chunk_4_CodeExecutionBlock_19"
        },
        {
            "from": "chunk_4_CodeExecutionBlock_18",
            "to": "chunk_4_CodeExecutionBlock_19"
        },
        {
            "from": "chunk_4_CodeExecutionBlock_19",
            "to": "chunk_4_CodeExecutionBlock_20"
        },
        {
            "from": "chunk_4_CodeExecutionBlock_20",
            "to": "chunk_4_CodeExecutionBlock_21"
        },
        {
            "from": "chunk_4_CodeExecutionBlock_21",
            "to": "chunk_4_CodeExecutionBlock_22"
        },
        {
            "from": "chunk_4_CodeExecutionBlock_21",
            "to": "chunk_4_CodeExecutionBlock_23"
        },
        {
            "from": "chunk_4_CodeExecutionBlock_21",
            "to": "chunk_4_CodeExecutionBlock_24"
        },
        {
            "from": "chunk_4_CodeExecutionBlock_21",
            "to": "chunk_4_CodeExecutionBlock_25"
        }
    ]
}