{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "# Information on 2's complement: https://en.wikipedia.org/wiki/Two%27s_complement\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "\n\n\n"
        },
        {
            "id": "chunk_1_twos_complement_1",
            "code": "def twos_complement(number: int) -> str:\n    \"\"\"\n    Take in a negative integer 'number'.\n    Return the two's complement representation of 'number'.\n\n    >>> twos_complement(0)\n    '0b0'\n    >>> twos_complement(-1)\n    '0b11'\n    >>> twos_complement(-5)\n    '0b1011'\n    >>> twos_complement(-17)\n    '0b101111'\n    >>> twos_complement(-207)\n    '0b100110001'\n    >>> twos_complement(1)\n    Traceback (most recent call last):\n        ...\n    ValueError: input must be a negative integer\n    \"\"\"\n"
        },
        {
            "id": "chunk_1_twos_complement_2",
            "code": "    if number > 0:\n        raise ValueError(\"input must be a negative integer\")\n"
        },
        {
            "id": "chunk_1_twos_complement_3",
            "code": "    binary_number_length = len(bin(number)[3:])\n    twos_complement_number = bin(abs(number) - (1 << binary_number_length))[3:]\n"
        },
        {
            "id": "chunk_1_twos_complement_4",
            "code": "    twos_complement_number = (\n        (\n            \"1\"\n            + \"0\" * (binary_number_length - len(twos_complement_number))\n            + twos_complement_number\n        )\n        if number < 0\n        else \"0\"\n    )\n"
        },
        {
            "id": "chunk_1_twos_complement_5",
            "code": "    return \"0b\" + twos_complement_number\n"
        },
        {
            "id": "chunk_2_GlobalBlock_1",
            "code": "\n\n\n"
        },
        {
            "id": "chunk_3_MainBlock_1",
            "code": "if __name__ == \"__main__\":\n"
        },
        {
            "id": "chunk_3_MainBlock_2",
            "code": "    import doctest\n\n    doctest.testmod()\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_1_twos_complement_1",
            "to": "chunk_1_twos_complement_2"
        },
        {
            "from": "chunk_1_twos_complement_2",
            "to": "chunk_1_twos_complement_3"
        },
        {
            "from": "chunk_1_twos_complement_3",
            "to": "chunk_1_twos_complement_4"
        },
        {
            "from": "chunk_1_twos_complement_4",
            "to": "chunk_1_twos_complement_5"
        },
        {
            "from": "chunk_3_MainBlock_1",
            "to": "chunk_3_MainBlock_2"
        }
    ]
}