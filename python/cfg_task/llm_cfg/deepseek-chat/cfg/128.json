{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "import logging\nimport time\nfrom abc import ABC, abstractmethod\nfrom typing import ClassVar\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "from backend.data.model import OAuth2Credentials\nfrom backend.integrations.providers import ProviderName\n"
        },
        {
            "id": "chunk_0_GlobalBlock_3",
            "code": "logger = logging.getLogger(__name__)\n"
        },
        {
            "id": "chunk_1_BaseOAuthHandler_1",
            "code": "class BaseOAuthHandler(ABC):\n    # --8<-- [start:BaseOAuthHandler1]\n    PROVIDER_NAME: ClassVar[ProviderName]\n    DEFAULT_SCOPES: ClassVar[list[str]] = []\n    # --8<-- [end:BaseOAuthHandler1]\n"
        },
        {
            "id": "chunk_1_BaseOAuthHandler_2",
            "code": "    @abstractmethod\n    # --8<-- [start:BaseOAuthHandler2]\n    def __init__(self, client_id: str, client_secret: str, redirect_uri: str): ...\n\n    # --8<-- [end:BaseOAuthHandler2]\n"
        },
        {
            "id": "chunk_1_BaseOAuthHandler_3",
            "code": "    @abstractmethod\n    # --8<-- [start:BaseOAuthHandler3]\n    def get_login_url(self, scopes: list[str], state: str) -> str:\n        # --8<-- [end:BaseOAuthHandler3]\n"
        },
        {
            "id": "chunk_1_BaseOAuthHandler_4",
            "code": "        \"\"\"Constructs a login URL that the user can be redirected to\"\"\"\n        ...\n\n"
        },
        {
            "id": "chunk_1_BaseOAuthHandler_5",
            "code": "    @abstractmethod\n    # --8<-- [start:BaseOAuthHandler4]\n    def exchange_code_for_tokens(\n        self, code: str, scopes: list[str]\n    ) -> OAuth2Credentials:\n        # --8<-- [end:BaseOAuthHandler4]\n"
        },
        {
            "id": "chunk_1_BaseOAuthHandler_6",
            "code": "        \"\"\"Exchanges the acquired authorization code from login for a set of tokens\"\"\"\n        ...\n\n"
        },
        {
            "id": "chunk_1_BaseOAuthHandler_7",
            "code": "    @abstractmethod\n    # --8<-- [start:BaseOAuthHandler5]\n    def _refresh_tokens(self, credentials: OAuth2Credentials) -> OAuth2Credentials:\n        # --8<-- [end:BaseOAuthHandler5]\n"
        },
        {
            "id": "chunk_1_BaseOAuthHandler_8",
            "code": "        \"\"\"Implements the token refresh mechanism\"\"\"\n        ...\n\n"
        },
        {
            "id": "chunk_1_BaseOAuthHandler_9",
            "code": "    @abstractmethod\n    # --8<-- [start:BaseOAuthHandler6]\n    def revoke_tokens(self, credentials: OAuth2Credentials) -> bool:\n        # --8<-- [end:BaseOAuthHandler6]\n"
        },
        {
            "id": "chunk_1_BaseOAuthHandler_10",
            "code": "        \"\"\"Revokes the given token at provider,\n        returns False provider does not support it\"\"\"\n        ...\n\n"
        },
        {
            "id": "chunk_1_BaseOAuthHandler_11",
            "code": "    def refresh_tokens(self, credentials: OAuth2Credentials) -> OAuth2Credentials:\n        if credentials.provider != self.PROVIDER_NAME:\n            raise ValueError(\n                f\"{self.__class__.__name__} can not refresh tokens \"\n                f\"for other provider '{credentials.provider}'\"\n            )\n        return self._refresh_tokens(credentials)\n"
        },
        {
            "id": "chunk_1_BaseOAuthHandler_12",
            "code": "    def get_access_token(self, credentials: OAuth2Credentials) -> str:\n        \"\"\"Returns a valid access token, refreshing it first if needed\"\"\"\n        if self.needs_refresh(credentials):\n            credentials = self.refresh_tokens(credentials)\n        return credentials.access_token.get_secret_value()\n"
        },
        {
            "id": "chunk_1_BaseOAuthHandler_13",
            "code": "    def needs_refresh(self, credentials: OAuth2Credentials) -> bool:\n        \"\"\"Indicates whether the given tokens need to be refreshed\"\"\"\n        return (\n            credentials.access_token_expires_at is not None\n            and credentials.access_token_expires_at < int(time.time()) + 300\n        )\n"
        },
        {
            "id": "chunk_1_BaseOAuthHandler_14",
            "code": "    def handle_default_scopes(self, scopes: list[str]) -> list[str]:\n        \"\"\"Handles the default scopes for the provider\"\"\"\n        # If scopes are empty, use the default scopes for the provider\n        if not scopes:\n            logger.debug(\n                f\"Using default scopes for provider {self.PROVIDER_NAME.value}\"\n            )\n            scopes = self.DEFAULT_SCOPES\n        return scopes\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_0_GlobalBlock_2",
            "to": "chunk_0_GlobalBlock_3"
        },
        {
            "from": "chunk_1_BaseOAuthHandler_1",
            "to": "chunk_1_BaseOAuthHandler_2"
        },
        {
            "from": "chunk_1_BaseOAuthHandler_2",
            "to": "chunk_1_BaseOAuthHandler_3"
        },
        {
            "from": "chunk_1_BaseOAuthHandler_3",
            "to": "chunk_1_BaseOAuthHandler_4"
        },
        {
            "from": "chunk_1_BaseOAuthHandler_4",
            "to": "chunk_1_BaseOAuthHandler_5"
        },
        {
            "from": "chunk_1_BaseOAuthHandler_5",
            "to": "chunk_1_BaseOAuthHandler_6"
        },
        {
            "from": "chunk_1_BaseOAuthHandler_6",
            "to": "chunk_1_BaseOAuthHandler_7"
        },
        {
            "from": "chunk_1_BaseOAuthHandler_7",
            "to": "chunk_1_BaseOAuthHandler_8"
        },
        {
            "from": "chunk_1_BaseOAuthHandler_8",
            "to": "chunk_1_BaseOAuthHandler_9"
        },
        {
            "from": "chunk_1_BaseOAuthHandler_9",
            "to": "chunk_1_BaseOAuthHandler_10"
        },
        {
            "from": "chunk_1_BaseOAuthHandler_10",
            "to": "chunk_1_BaseOAuthHandler_11"
        },
        {
            "from": "chunk_1_BaseOAuthHandler_11",
            "to": "chunk_1_BaseOAuthHandler_12"
        },
        {
            "from": "chunk_1_BaseOAuthHandler_12",
            "to": "chunk_1_BaseOAuthHandler_13"
        },
        {
            "from": "chunk_1_BaseOAuthHandler_13",
            "to": "chunk_1_BaseOAuthHandler_14"
        }
    ]
}