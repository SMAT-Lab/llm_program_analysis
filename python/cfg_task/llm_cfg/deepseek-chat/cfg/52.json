{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "import hashlib\nimport secrets\nfrom typing import NamedTuple\n"
        },
        {
            "id": "chunk_1_APIKeyContainer_1",
            "code": "class APIKeyContainer(NamedTuple):\n    \"\"\"Container for API key parts.\"\"\"\n"
        },
        {
            "id": "chunk_1_APIKeyContainer_2",
            "code": "    raw: str\n    prefix: str\n    postfix: str\n    hash: str\n"
        },
        {
            "id": "chunk_2_APIKeyManager_1",
            "code": "class APIKeyManager:\n    PREFIX: str = \"agpt_\"\n    PREFIX_LENGTH: int = 8\n    POSTFIX_LENGTH: int = 8\n\n"
        },
        {
            "id": "chunk_2_APIKeyManager_2",
            "code": "    def generate_api_key(self) -> APIKeyContainer:\n        \"\"\"Generate a new API key with all its parts.\"\"\"\n        raw_key = f\"{self.PREFIX}{secrets.token_urlsafe(32)}\"\n        return APIKeyContainer(\n            raw=raw_key,\n            prefix=raw_key[: self.PREFIX_LENGTH],\n            postfix=raw_key[-self.POSTFIX_LENGTH :],\n            hash=hashlib.sha256(raw_key.encode()).hexdigest(),\n        )\n"
        },
        {
            "id": "chunk_2_APIKeyManager_3",
            "code": "    def verify_api_key(self, provided_key: str, stored_hash: str) -> bool:\n        \"\"\"Verify if a provided API key matches the stored hash.\"\"\"\n        if not provided_key.startswith(self.PREFIX):\n            return False\n        return hashlib.sha256(provided_key.encode()).hexdigest() == stored_hash\n"
        },
        {
            "id": "chunk_3_generate_api_key_1",
            "code": "    def generate_api_key(self) -> APIKeyContainer:\n        \"\"\"Generate a new API key with all its parts.\"\"\"\n"
        },
        {
            "id": "chunk_3_generate_api_key_2",
            "code": "        raw_key = f\"{self.PREFIX}{secrets.token_urlsafe(32)}\"\n"
        },
        {
            "id": "chunk_3_generate_api_key_3",
            "code": "        return APIKeyContainer(\n            raw=raw_key,\n            prefix=raw_key[: self.PREFIX_LENGTH],\n            postfix=raw_key[-self.POSTFIX_LENGTH :],\n            hash=hashlib.sha256(raw_key.encode()).hexdigest(),\n        )\n"
        },
        {
            "id": "chunk_4_verify_api_key_1",
            "code": "    def verify_api_key(self, provided_key: str, stored_hash: str) -> bool:\n        \"\"\"Verify if a provided API key matches the stored hash.\"\"\"\n"
        },
        {
            "id": "chunk_4_verify_api_key_2",
            "code": "        if not provided_key.startswith(self.PREFIX):\n            return False\n"
        },
        {
            "id": "chunk_4_verify_api_key_3",
            "code": "        return hashlib.sha256(provided_key.encode()).hexdigest() == stored_hash\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_1_APIKeyContainer_1",
            "to": "chunk_1_APIKeyContainer_2"
        },
        {
            "from": "chunk_2_APIKeyManager_1",
            "to": "chunk_2_APIKeyManager_2"
        },
        {
            "from": "chunk_2_APIKeyManager_1",
            "to": "chunk_2_APIKeyManager_3"
        },
        {
            "from": "chunk_3_generate_api_key_1",
            "to": "chunk_3_generate_api_key_2"
        },
        {
            "from": "chunk_3_generate_api_key_2",
            "to": "chunk_3_generate_api_key_3"
        },
        {
            "from": "chunk_4_verify_api_key_1",
            "to": "chunk_4_verify_api_key_2"
        },
        {
            "from": "chunk_4_verify_api_key_2",
            "to": "chunk_4_verify_api_key_3"
        }
    ]
}