{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "from math import log2\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "\n\n\n"
        },
        {
            "id": "chunk_1_binary_count_trailing_zeros_1",
            "code": "def binary_count_trailing_zeros(a: int) -> int:\n    \"\"\"\n    Take in 1 integer, return a number that is\n    the number of trailing zeros in binary representation of that number.\n\n    >>> binary_count_trailing_zeros(25)\n    0\n    >>> binary_count_trailing_zeros(36)\n    2\n    >>> binary_count_trailing_zeros(16)\n    4\n    >>> binary_count_trailing_zeros(58)\n    1\n    >>> binary_count_trailing_zeros(4294967296)\n    32\n    >>> binary_count_trailing_zeros(0)\n    0\n    >>> binary_count_trailing_zeros(-10)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input value must be a positive integer\n    >>> binary_count_trailing_zeros(0.8)\n    Traceback (most recent call last):\n        ...\n    TypeError: Input value must be a 'int' type\n    >>> binary_count_trailing_zeros(\"0\")\n    Traceback (most recent call last):\n        ...\n    TypeError: '<' not supported between instances of 'str' and 'int'\n    \"\"\"\n"
        },
        {
            "id": "chunk_1_binary_count_trailing_zeros_2",
            "code": "    if a < 0:\n        raise ValueError(\"Input value must be a positive integer\")\n"
        },
        {
            "id": "chunk_1_binary_count_trailing_zeros_3",
            "code": "    elif isinstance(a, float):\n        raise TypeError(\"Input value must be a 'int' type\")\n"
        },
        {
            "id": "chunk_1_binary_count_trailing_zeros_4",
            "code": "    return 0 if (a == 0) else int(log2(a & -a))\n"
        },
        {
            "id": "chunk_2_GlobalBlock_1",
            "code": "\n\n\n"
        },
        {
            "id": "chunk_3___main___1",
            "code": "if __name__ == \"__main__\":\n"
        },
        {
            "id": "chunk_3___main___2",
            "code": "    import doctest\n\n    doctest.testmod()\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_1_binary_count_trailing_zeros_1",
            "to": "chunk_1_binary_count_trailing_zeros_2"
        },
        {
            "from": "chunk_1_binary_count_trailing_zeros_2",
            "to": "chunk_1_binary_count_trailing_zeros_3"
        },
        {
            "from": "chunk_1_binary_count_trailing_zeros_2",
            "to": "chunk_1_binary_count_trailing_zeros_4"
        },
        {
            "from": "chunk_1_binary_count_trailing_zeros_3",
            "to": "chunk_1_binary_count_trailing_zeros_4"
        },
        {
            "from": "chunk_3___main___1",
            "to": "chunk_3___main___2"
        }
    ]
}