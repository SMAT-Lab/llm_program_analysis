{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "from datetime import datetime, timezone\nfrom typing import Iterator\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "import praw\nfrom pydantic import BaseModel, ConfigDict\n"
        },
        {
            "id": "chunk_0_GlobalBlock_3",
            "code": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import BlockSecret, SchemaField, SecretField\nfrom backend.util.mock import MockObject\n"
        },
        {
            "id": "chunk_0_GlobalBlock_4",
            "code": "\n"
        },
        {
            "id": "chunk_1_RedditCredentials_1",
            "code": "class RedditCredentials(BaseModel):\n"
        },
        {
            "id": "chunk_1_RedditCredentials_2",
            "code": "    client_id: BlockSecret = SecretField(key=\"reddit_client_id\")\n    client_secret: BlockSecret = SecretField(key=\"reddit_client_secret\")\n    username: BlockSecret = SecretField(key=\"reddit_username\")\n    password: BlockSecret = SecretField(key=\"reddit_password\")\n    user_agent: str = \"AutoGPT:1.0 (by /u/autogpt)\"\n"
        },
        {
            "id": "chunk_1_RedditCredentials_3",
            "code": "    model_config = ConfigDict(title=\"Reddit Credentials\")\n"
        },
        {
            "id": "chunk_2_RedditPost_1",
            "code": "class RedditPost(BaseModel):\n    id: str\n    subreddit: str\n    title: str\n    body: str\n"
        },
        {
            "id": "chunk_3_RedditComment_1",
            "code": "class RedditComment(BaseModel):\n    post_id: str\n    comment: str\n"
        },
        {
            "id": "chunk_4_get_praw_1",
            "code": "def get_praw(creds: RedditCredentials) -> praw.Reddit:\n    client = praw.Reddit(\n        client_id=creds.client_id.get_secret_value(),\n        client_secret=creds.client_secret.get_secret_value(),\n        username=creds.username.get_secret_value(),\n        password=creds.password.get_secret_value(),\n        user_agent=creds.user_agent,\n    )\n"
        },
        {
            "id": "chunk_4_get_praw_2",
            "code": "    me = client.user.me()\n"
        },
        {
            "id": "chunk_4_get_praw_3",
            "code": "    if not me:\n        raise ValueError(\"Invalid Reddit credentials.\")\n"
        },
        {
            "id": "chunk_4_get_praw_4",
            "code": "    print(f\"Logged in as Reddit user: {me.name}\")\n"
        },
        {
            "id": "chunk_4_get_praw_5",
            "code": "    return client\n"
        },
        {
            "id": "chunk_5_GetRedditPostsBlock_1",
            "code": "class GetRedditPostsBlock(Block):\n"
        },
        {
            "id": "chunk_5_GetRedditPostsBlock_2",
            "code": "    class Input(BlockSchema):\n        subreddit: str = SchemaField(description=\"Subreddit name\")\n        creds: RedditCredentials = SchemaField(\n            description=\"Reddit credentials\",\n            default=RedditCredentials(),\n        )\n        last_minutes: int | None = SchemaField(\n            description=\"Post time to stop minutes ago while fetching posts\",\n            default=None,\n        )\n        last_post: str | None = SchemaField(\n            description=\"Post ID to stop when reached while fetching posts\",\n            default=None,\n        )\n        post_limit: int | None = SchemaField(\n            description=\"Number of posts to fetch\", default=10\n        )\n"
        },
        {
            "id": "chunk_5_GetRedditPostsBlock_3",
            "code": "    class Output(BlockSchema):\n        post: RedditPost = SchemaField(description=\"Reddit post\")\n"
        },
        {
            "id": "chunk_5_GetRedditPostsBlock_4",
            "code": "    def __init__(self):\n        super().__init__(\n            disabled=True,\n            id=\"c6731acb-4285-4ee1-bc9b-03d0766c370f\",\n            description=\"This block fetches Reddit posts from a defined subreddit name.\",\n            categories={BlockCategory.SOCIAL},\n            input_schema=GetRedditPostsBlock.Input,\n            output_schema=GetRedditPostsBlock.Output,\n            test_input={\n                \"creds\": {\n                    \"client_id\": \"client_id\",\n                    \"client_secret\": \"client_secret\",\n                    \"username\": \"username\",\n                    \"password\": \"password\",\n                    \"user_agent\": \"user_agent\",\n                },\n                \"subreddit\": \"subreddit\",\n                \"last_post\": \"id3\",\n                \"post_limit\": 2,\n            },\n            test_output=[\n                (\n                    \"post\",\n                    RedditPost(\n                        id=\"id1\", subreddit=\"subreddit\", title=\"title1\", body=\"body1\"\n                    ),\n                ),\n                (\n                    \"post\",\n                    RedditPost(\n                        id=\"id2\", subreddit=\"subreddit\", title=\"title2\", body=\"body2\"\n                    ),\n                ),\n            ],\n            test_mock={\n                \"get_posts\": lambda _: [\n                    MockObject(id=\"id1\", title=\"title1\", selftext=\"body1\"),\n                    MockObject(id=\"id2\", title=\"title2\", selftext=\"body2\"),\n                    MockObject(id=\"id3\", title=\"title2\", selftext=\"body2\"),\n                ]\n            },\n        )\n"
        },
        {
            "id": "chunk_5_GetRedditPostsBlock_5",
            "code": "    @staticmethod\n    def get_posts(input_data: Input) -> Iterator[praw.reddit.Submission]:\n        client = get_praw(input_data.creds)\n        subreddit = client.subreddit(input_data.subreddit)\n        return subreddit.new(limit=input_data.post_limit or 10)\n"
        },
        {
            "id": "chunk_5_GetRedditPostsBlock_6",
            "code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        current_time = datetime.now(tz=timezone.utc)\n        for post in self.get_posts(input_data):\n            if input_data.last_minutes:\n                post_datetime = datetime.fromtimestamp(\n                    post.created_utc, tz=timezone.utc\n                )\n                time_difference = current_time - post_datetime\n                if time_difference.total_seconds() / 60 > input_data.last_minutes:\n                    continue\n\n            if input_data.last_post and post.id == input_data.last_post:\n                break\n\n            yield \"post\", RedditPost(\n                id=post.id,\n                subreddit=input_data.subreddit,\n                title=post.title,\n                body=post.selftext,\n            )\n"
        },
        {
            "id": "chunk_6_PostRedditCommentBlock_1",
            "code": "class PostRedditCommentBlock(Block):\n"
        },
        {
            "id": "chunk_6_PostRedditCommentBlock_2",
            "code": "    class Input(BlockSchema):\n        creds: RedditCredentials = SchemaField(\n            description=\"Reddit credentials\", default=RedditCredentials()\n        )\n        data: RedditComment = SchemaField(description=\"Reddit comment\")\n"
        },
        {
            "id": "chunk_6_PostRedditCommentBlock_3",
            "code": "    class Output(BlockSchema):\n        comment_id: str = SchemaField(description=\"Posted comment ID\")\n"
        },
        {
            "id": "chunk_6_PostRedditCommentBlock_4",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"4a92261b-701e-4ffb-8970-675fd28e261f\",\n            description=\"This block posts a Reddit comment on a specified Reddit post.\",\n            categories={BlockCategory.SOCIAL},\n            input_schema=PostRedditCommentBlock.Input,\n            output_schema=PostRedditCommentBlock.Output,\n            test_input={\"data\": {\"post_id\": \"id\", \"comment\": \"comment\"}},\n            test_output=[(\"comment_id\", \"dummy_comment_id\")],\n            test_mock={\"reply_post\": lambda creds, comment: \"dummy_comment_id\"},\n        )\n"
        },
        {
            "id": "chunk_6_PostRedditCommentBlock_5",
            "code": "    @staticmethod\n    def reply_post(creds: RedditCredentials, comment: RedditComment) -> str:\n        client = get_praw(creds)\n        submission = client.submission(id=comment.post_id)\n        new_comment = submission.reply(comment.comment)\n        if not new_comment:\n            raise ValueError(\"Failed to post comment.\")\n        return new_comment.id\n"
        },
        {
            "id": "chunk_6_PostRedditCommentBlock_6",
            "code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        yield \"comment_id\", self.reply_post(input_data.creds, input_data.data)\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_0_GlobalBlock_2",
            "to": "chunk_0_GlobalBlock_3"
        },
        {
            "from": "chunk_0_GlobalBlock_3",
            "to": "chunk_0_GlobalBlock_4"
        },
        {
            "from": "chunk_1_RedditCredentials_1",
            "to": "chunk_1_RedditCredentials_2"
        },
        {
            "from": "chunk_1_RedditCredentials_2",
            "to": "chunk_1_RedditCredentials_3"
        },
        {
            "from": "chunk_4_get_praw_1",
            "to": "chunk_4_get_praw_2"
        },
        {
            "from": "chunk_4_get_praw_2",
            "to": "chunk_4_get_praw_3"
        },
        {
            "from": "chunk_4_get_praw_3",
            "to": "chunk_4_get_praw_4"
        },
        {
            "from": "chunk_4_get_praw_3",
            "to": "chunk_4_get_praw_5"
        },
        {
            "from": "chunk_4_get_praw_4",
            "to": "chunk_4_get_praw_5"
        },
        {
            "from": "chunk_5_GetRedditPostsBlock_1",
            "to": "chunk_5_GetRedditPostsBlock_2"
        },
        {
            "from": "chunk_5_GetRedditPostsBlock_2",
            "to": "chunk_5_GetRedditPostsBlock_3"
        },
        {
            "from": "chunk_5_GetRedditPostsBlock_3",
            "to": "chunk_5_GetRedditPostsBlock_4"
        },
        {
            "from": "chunk_5_GetRedditPostsBlock_4",
            "to": "chunk_5_GetRedditPostsBlock_5"
        },
        {
            "from": "chunk_5_GetRedditPostsBlock_5",
            "to": "chunk_5_GetRedditPostsBlock_6"
        },
        {
            "from": "chunk_6_PostRedditCommentBlock_1",
            "to": "chunk_6_PostRedditCommentBlock_2"
        },
        {
            "from": "chunk_6_PostRedditCommentBlock_2",
            "to": "chunk_6_PostRedditCommentBlock_3"
        },
        {
            "from": "chunk_6_PostRedditCommentBlock_3",
            "to": "chunk_6_PostRedditCommentBlock_4"
        },
        {
            "from": "chunk_6_PostRedditCommentBlock_4",
            "to": "chunk_6_PostRedditCommentBlock_5"
        },
        {
            "from": "chunk_6_PostRedditCommentBlock_5",
            "to": "chunk_6_PostRedditCommentBlock_6"
        }
    ]
}