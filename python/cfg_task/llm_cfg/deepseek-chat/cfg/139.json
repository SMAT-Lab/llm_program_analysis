{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "from pydantic import BaseModel\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "from backend.data.block import (\n    Block,\n    BlockCategory,\n    BlockOutput,\n    BlockSchema,\n    BlockWebhookConfig,\n)\n"
        },
        {
            "id": "chunk_0_GlobalBlock_3",
            "code": "from backend.data.model import SchemaField\n"
        },
        {
            "id": "chunk_0_GlobalBlock_4",
            "code": "from backend.util import settings\nfrom backend.util.settings import AppEnvironment, BehaveAs\n"
        },
        {
            "id": "chunk_0_GlobalBlock_5",
            "code": "from ._api import (\n    TEST_CREDENTIALS,\n    TEST_CREDENTIALS_INPUT,\n    Slant3DCredentialsField,\n    Slant3DCredentialsInput,\n)\n"
        },
        {
            "id": "chunk_1_Slant3DTriggerBase_1",
            "code": "class Slant3DTriggerBase:\n    \"\"\"Base class for Slant3D webhook triggers\"\"\"\n\n"
        },
        {
            "id": "chunk_1_Slant3DTriggerBase_2",
            "code": "    class Input(BlockSchema):\n        credentials: Slant3DCredentialsInput = Slant3DCredentialsField()\n        # Webhook URL is handled by the webhook system\n        payload: dict = SchemaField(hidden=True, default={})\n\n"
        },
        {
            "id": "chunk_1_Slant3DTriggerBase_3",
            "code": "    class Output(BlockSchema):\n        payload: dict = SchemaField(\n            description=\"The complete webhook payload received from Slant3D\"\n        )\n        order_id: str = SchemaField(description=\"The ID of the affected order\")\n        error: str = SchemaField(\n            description=\"Error message if payload processing failed\"\n        )\n\n"
        },
        {
            "id": "chunk_1_Slant3DTriggerBase_4",
            "code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        yield \"payload\", input_data.payload\n        yield \"order_id\", input_data.payload[\"orderId\"]\n\n"
        },
        {
            "id": "chunk_2_Slant3DOrderWebhookBlock_1",
            "code": "class Slant3DOrderWebhookBlock(Slant3DTriggerBase, Block):\n    \"\"\"Block for handling Slant3D order webhooks\"\"\"\n"
        },
        {
            "id": "chunk_2_Slant3DOrderWebhookBlock_2",
            "code": "    class Input(Slant3DTriggerBase.Input):\n        class EventsFilter(BaseModel):\n            \"\"\"\n            Currently Slant3D only supports 'SHIPPED' status updates\n            Could be expanded in the future with more status types\n            \"\"\"\n\n            shipped: bool = True\n\n        events: EventsFilter = SchemaField(\n            title=\"Events\",\n            description=\"Order status events to subscribe to\",\n            default=EventsFilter(shipped=True),\n        )\n"
        },
        {
            "id": "chunk_2_Slant3DOrderWebhookBlock_3",
            "code": "    class Output(Slant3DTriggerBase.Output):\n        status: str = SchemaField(description=\"The new status of the order\")\n        tracking_number: str = SchemaField(\n            description=\"The tracking number for the shipment\"\n        )\n        carrier_code: str = SchemaField(description=\"The carrier code (e.g., 'usps')\")\n"
        },
        {
            "id": "chunk_2_Slant3DOrderWebhookBlock_4",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"8a74c2ad-0104-4640-962f-26c6b69e58cd\",\n            description=(\n                \"This block triggers on Slant3D order status updates and outputs \"\n                \"the event details, including tracking information when orders are shipped.\"\n            ),\n            # All webhooks are currently subscribed to for all orders. This works for self hosted, but not for cloud hosted prod\n            disabled=(\n                settings.Settings().config.behave_as == BehaveAs.CLOUD\n                and settings.Settings().config.app_env != AppEnvironment.LOCAL\n            ),\n            categories={BlockCategory.DEVELOPER_TOOLS},\n            input_schema=self.Input,\n            output_schema=self.Output,\n            webhook_config=BlockWebhookConfig(\n                provider=\"slant3d\",\n                webhook_type=\"orders\",  # Only one type for now\n                resource_format=\"\",  # No resource format needed\n                event_filter_input=\"events\",\n                event_format=\"order.{event}\",\n            ),\n            test_input={\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n                \"events\": {\"shipped\": True},\n                \"payload\": {\n                    \"orderId\": \"1234567890\",\n                    \"status\": \"SHIPPED\",\n                    \"trackingNumber\": \"ABCDEF123456\",\n                    \"carrierCode\": \"usps\",\n                },\n            },\n            test_credentials=TEST_CREDENTIALS,\n            test_output=[\n                (\n                    \"payload\",\n                    {\n                        \"orderId\": \"1234567890\",\n                        \"status\": \"SHIPPED\",\n                        \"trackingNumber\": \"ABCDEF123456\",\n                        \"carrierCode\": \"usps\",\n                    },\n                ),\n                (\"order_id\", \"1234567890\"),\n                (\"status\", \"SHIPPED\"),\n                (\"tracking_number\", \"ABCDEF123456\"),\n                (\"carrier_code\", \"usps\"),\n            ],\n        )\n"
        },
        {
            "id": "chunk_2_Slant3DOrderWebhookBlock_5",
            "code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:  # type: ignore\n        yield from super().run(input_data, **kwargs)\n"
        },
        {
            "id": "chunk_2_Slant3DOrderWebhookBlock_6",
            "code": "        # Extract and normalize values from the payload\n        yield \"status\", input_data.payload[\"status\"]\n        yield \"tracking_number\", input_data.payload[\"trackingNumber\"]\n        yield \"carrier_code\", input_data.payload[\"carrierCode\"]\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_0_GlobalBlock_2",
            "to": "chunk_0_GlobalBlock_3"
        },
        {
            "from": "chunk_0_GlobalBlock_3",
            "to": "chunk_0_GlobalBlock_4"
        },
        {
            "from": "chunk_0_GlobalBlock_4",
            "to": "chunk_0_GlobalBlock_5"
        },
        {
            "from": "chunk_1_Slant3DTriggerBase_1",
            "to": "chunk_1_Slant3DTriggerBase_2"
        },
        {
            "from": "chunk_1_Slant3DTriggerBase_2",
            "to": "chunk_1_Slant3DTriggerBase_3"
        },
        {
            "from": "chunk_1_Slant3DTriggerBase_3",
            "to": "chunk_1_Slant3DTriggerBase_4"
        },
        {
            "from": "chunk_2_Slant3DOrderWebhookBlock_1",
            "to": "chunk_2_Slant3DOrderWebhookBlock_2"
        },
        {
            "from": "chunk_2_Slant3DOrderWebhookBlock_2",
            "to": "chunk_2_Slant3DOrderWebhookBlock_3"
        },
        {
            "from": "chunk_2_Slant3DOrderWebhookBlock_3",
            "to": "chunk_2_Slant3DOrderWebhookBlock_4"
        },
        {
            "from": "chunk_2_Slant3DOrderWebhookBlock_4",
            "to": "chunk_2_Slant3DOrderWebhookBlock_5"
        },
        {
            "from": "chunk_2_Slant3DOrderWebhookBlock_5",
            "to": "chunk_2_Slant3DOrderWebhookBlock_6"
        }
    ]
}