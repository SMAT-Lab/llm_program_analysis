{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "import functools\nimport logging\nimport os\nimport time\nfrom typing import Callable, ParamSpec, Tuple, TypeVar\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "from pydantic import BaseModel\n"
        },
        {
            "id": "chunk_1_TimingInfo_1",
            "code": "class TimingInfo(BaseModel):\n    cpu_time: float\n    wall_time: float\n"
        },
        {
            "id": "chunk_2__start_measurement_1",
            "code": "def _start_measurement() -> Tuple[float, float]:\n    return time.time(), os.times()[0] + os.times()[1]\n"
        },
        {
            "id": "chunk_3__end_measurement_1",
            "code": "def _end_measurement(\n    start_wall_time: float, start_cpu_time: float\n) -> Tuple[float, float]:\n"
        },
        {
            "id": "chunk_3__end_measurement_2",
            "code": "    end_wall_time = time.time()\n    end_cpu_time = os.times()[0] + os.times()[1]\n"
        },
        {
            "id": "chunk_3__end_measurement_3",
            "code": "    return end_wall_time - start_wall_time, end_cpu_time - start_cpu_time\n"
        },
        {
            "id": "chunk_4_GlobalBlock_1",
            "code": "P = ParamSpec(\"P\")\nT = TypeVar(\"T\")\n"
        },
        {
            "id": "chunk_5_logger_1",
            "code": "logger = logging.getLogger(__name__)\n"
        },
        {
            "id": "chunk_6_time_measured_1",
            "code": "def time_measured(func: Callable[P, T]) -> Callable[P, Tuple[TimingInfo, T]]:\n    \"\"\"\n    Decorator to measure the time taken by a function to execute.\n    \"\"\"\n"
        },
        {
            "id": "chunk_6_time_measured_2",
            "code": "    @functools.wraps(func)\n    def wrapper(*args: P.args, **kwargs: P.kwargs) -> Tuple[TimingInfo, T]:\n"
        },
        {
            "id": "chunk_6_time_measured_3",
            "code": "        start_wall_time, start_cpu_time = _start_measurement()\n"
        },
        {
            "id": "chunk_6_time_measured_4",
            "code": "        try:\n            result = func(*args, **kwargs)\n"
        },
        {
            "id": "chunk_6_time_measured_5",
            "code": "        finally:\n            wall_duration, cpu_duration = _end_measurement(\n                start_wall_time, start_cpu_time\n            )\n"
        },
        {
            "id": "chunk_6_time_measured_6",
            "code": "            timing_info = TimingInfo(cpu_time=cpu_duration, wall_time=wall_duration)\n        return timing_info, result\n"
        },
        {
            "id": "chunk_6_time_measured_7",
            "code": "    return wrapper\n"
        },
        {
            "id": "chunk_7_error_logged_1",
            "code": "def error_logged(func: Callable[P, T]) -> Callable[P, T | None]:\n    \"\"\"\n    Decorator to suppress and log any exceptions raised by a function.\n    \"\"\"\n"
        },
        {
            "id": "chunk_7_error_logged_2",
            "code": "    @functools.wraps(func)\n    def wrapper(*args: P.args, **kwargs: P.kwargs) -> T | None:\n"
        },
        {
            "id": "chunk_7_error_logged_3",
            "code": "        try:\n            return func(*args, **kwargs)\n"
        },
        {
            "id": "chunk_7_error_logged_4",
            "code": "        except Exception as e:\n            logger.exception(\n                f\"Error when calling function {func.__name__} with arguments {args} {kwargs}: {e}\"\n            )\n"
        },
        {
            "id": "chunk_7_error_logged_5",
            "code": "    return wrapper\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_3__end_measurement_1",
            "to": "chunk_3__end_measurement_2"
        },
        {
            "from": "chunk_3__end_measurement_2",
            "to": "chunk_3__end_measurement_3"
        },
        {
            "from": "chunk_6_time_measured_1",
            "to": "chunk_6_time_measured_2"
        },
        {
            "from": "chunk_6_time_measured_2",
            "to": "chunk_6_time_measured_3"
        },
        {
            "from": "chunk_6_time_measured_3",
            "to": "chunk_6_time_measured_4"
        },
        {
            "from": "chunk_6_time_measured_4",
            "to": "chunk_6_time_measured_5"
        },
        {
            "from": "chunk_6_time_measured_5",
            "to": "chunk_6_time_measured_6"
        },
        {
            "from": "chunk_6_time_measured_6",
            "to": "chunk_6_time_measured_7"
        },
        {
            "from": "chunk_7_error_logged_1",
            "to": "chunk_7_error_logged_2"
        },
        {
            "from": "chunk_7_error_logged_2",
            "to": "chunk_7_error_logged_3"
        },
        {
            "from": "chunk_7_error_logged_3",
            "to": "chunk_7_error_logged_4"
        },
        {
            "from": "chunk_7_error_logged_3",
            "to": "chunk_7_error_logged_5"
        },
        {
            "from": "chunk_7_error_logged_4",
            "to": "chunk_7_error_logged_5"
        }
    ]
}