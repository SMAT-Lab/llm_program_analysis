{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "from abc import ABC, abstractmethod\nfrom datetime import datetime, timezone\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "from prisma import Json\nfrom prisma.enums import CreditTransactionType\nfrom prisma.errors import UniqueViolationError\nfrom prisma.models import CreditTransaction\n"
        },
        {
            "id": "chunk_0_GlobalBlock_3",
            "code": "from backend.data.block import Block, BlockInput, get_block\nfrom backend.data.block_cost_config import BLOCK_COSTS\nfrom backend.data.cost import BlockCost, BlockCostType\nfrom backend.util.settings import Config\n"
        },
        {
            "id": "chunk_0_GlobalBlock_4",
            "code": "config = Config()\n"
        },
        {
            "id": "chunk_1_UserCreditBase_1",
            "code": "class UserCreditBase(ABC):\n"
        },
        {
            "id": "chunk_1_UserCreditBase_2",
            "code": "    def __init__(self, num_user_credits_refill: int):\n        self.num_user_credits_refill = num_user_credits_refill\n"
        },
        {
            "id": "chunk_1_UserCreditBase_3",
            "code": "    @abstractmethod\n"
        },
        {
            "id": "chunk_1_UserCreditBase_4",
            "code": "    async def get_or_refill_credit(self, user_id: str) -> int:\n        \"\"\"\n        Get the current credit for the user and refill if no transaction has been made in the current cycle.\n\n        Returns:\n            int: The current credit for the user.\n        \"\"\"\n        pass\n"
        },
        {
            "id": "chunk_1_UserCreditBase_5",
            "code": "    @abstractmethod\n"
        },
        {
            "id": "chunk_1_UserCreditBase_6",
            "code": "    async def spend_credits(\n        self,\n        user_id: str,\n        user_credit: int,\n        block_id: str,\n        input_data: BlockInput,\n        data_size: float,\n        run_time: float,\n    ) -> int:\n        \"\"\"\n        Spend the credits for the user based on the block usage.\n\n        Args:\n            user_id (str): The user ID.\n            user_credit (int): The current credit for the user.\n            block_id (str): The block ID.\n            input_data (BlockInput): The input data for the block.\n            data_size (float): The size of the data being processed.\n            run_time (float): The time taken to run the block.\n\n        Returns:\n            int: amount of credit spent\n        \"\"\"\n        pass\n"
        },
        {
            "id": "chunk_1_UserCreditBase_7",
            "code": "    @abstractmethod\n"
        },
        {
            "id": "chunk_1_UserCreditBase_8",
            "code": "    async def top_up_credits(self, user_id: str, amount: int):\n        \"\"\"\n        Top up the credits for the user.\n\n        Args:\n            user_id (str): The user ID.\n            amount (int): The amount to top up.\n        \"\"\"\n        pass\n"
        },
        {
            "id": "chunk_2_UserCredit_1",
            "code": "class UserCredit(UserCreditBase):\n    async def get_or_refill_credit(self, user_id: str) -> int:\n"
        },
        {
            "id": "chunk_2_UserCredit_2",
            "code": "        cur_time = self.time_now()\n        cur_month = cur_time.replace(day=1, hour=0, minute=0, second=0, microsecond=0)\n        nxt_month = (\n            cur_month.replace(month=cur_month.month + 1)\n            if cur_month.month < 12\n            else cur_month.replace(year=cur_month.year + 1, month=1)\n        )\n"
        },
        {
            "id": "chunk_2_UserCredit_3",
            "code": "        user_credit = await CreditTransaction.prisma().group_by(\n            by=[\"userId\"],\n            sum={\"amount\": True},\n            where={\n                \"userId\": user_id,\n                \"createdAt\": {\"gte\": cur_month, \"lt\": nxt_month},\n                \"isActive\": True,\n            },\n        )\n"
        },
        {
            "id": "chunk_2_UserCredit_4",
            "code": "        if user_credit:\n            credit_sum = user_credit[0].get(\"_sum\") or {}\n            return credit_sum.get(\"amount\", 0)\n"
        },
        {
            "id": "chunk_2_UserCredit_5",
            "code": "        key = f\"MONTHLY-CREDIT-TOP-UP-{cur_month}\"\n"
        },
        {
            "id": "chunk_2_UserCredit_6",
            "code": "        try:\n            await CreditTransaction.prisma().create(\n                data={\n                    \"amount\": self.num_user_credits_refill,\n                    \"type\": CreditTransactionType.TOP_UP,\n                    \"userId\": user_id,\n                    \"transactionKey\": key,\n                    \"createdAt\": self.time_now(),\n                }\n            )\n"
        },
        {
            "id": "chunk_2_UserCredit_7",
            "code": "        except UniqueViolationError:\n            pass  # Already refilled this month\n"
        },
        {
            "id": "chunk_2_UserCredit_8",
            "code": "        return self.num_user_credits_refill\n"
        },
        {
            "id": "chunk_2_UserCredit_9",
            "code": "    @staticmethod\n    def time_now():\n        return datetime.now(timezone.utc)\n"
        },
        {
            "id": "chunk_2_UserCredit_10",
            "code": "    def _block_usage_cost(\n        self,\n        block: Block,\n        input_data: BlockInput,\n        data_size: float,\n        run_time: float,\n    ) -> tuple[int, BlockInput]:\n"
        },
        {
            "id": "chunk_2_UserCredit_11",
            "code": "        block_costs = BLOCK_COSTS.get(type(block))\n        if not block_costs:\n            return 0, {}\n"
        },
        {
            "id": "chunk_2_UserCredit_12",
            "code": "        for block_cost in block_costs:\n            if not self._is_cost_filter_match(block_cost.cost_filter, input_data):\n                continue\n"
        },
        {
            "id": "chunk_2_UserCredit_13",
            "code": "            if block_cost.cost_type == BlockCostType.RUN:\n                return block_cost.cost_amount, block_cost.cost_filter\n"
        },
        {
            "id": "chunk_2_UserCredit_14",
            "code": "            if block_cost.cost_type == BlockCostType.SECOND:\n                return (\n                    int(run_time * block_cost.cost_amount),\n                    block_cost.cost_filter,\n                )\n"
        },
        {
            "id": "chunk_2_UserCredit_15",
            "code": "            if block_cost.cost_type == BlockCostType.BYTE:\n                return (\n                    int(data_size * block_cost.cost_amount),\n                    block_cost.cost_filter,\n                )\n"
        },
        {
            "id": "chunk_2_UserCredit_16",
            "code": "        return 0, {}\n"
        },
        {
            "id": "chunk_2_UserCredit_17",
            "code": "    def _is_cost_filter_match(\n        self, cost_filter: BlockInput, input_data: BlockInput\n    ) -> bool:\n"
        },
        {
            "id": "chunk_2_UserCredit_18",
            "code": "        \"\"\"\n        Filter rules:\n          - If costFilter is an object, then check if costFilter is the subset of inputValues\n          - Otherwise, check if costFilter is equal to inputValues.\n          - Undefined, null, and empty string are considered as equal.\n        \"\"\"\n"
        },
        {
            "id": "chunk_2_UserCredit_19",
            "code": "        if not isinstance(cost_filter, dict) or not isinstance(input_data, dict):\n            return cost_filter == input_data\n"
        },
        {
            "id": "chunk_2_UserCredit_20",
            "code": "        return all(\n            (not input_data.get(k) and not v)\n            or (input_data.get(k) and self._is_cost_filter_match(v, input_data[k]))\n            for k, v in cost_filter.items()\n        )\n"
        },
        {
            "id": "chunk_2_UserCredit_21",
            "code": "    async def spend_credits(\n        self,\n        user_id: str,\n        user_credit: int,\n        block_id: str,\n        input_data: BlockInput,\n        data_size: float,\n        run_time: float,\n        validate_balance: bool = True,\n"
        },
        {
            "id": "chunk_2_UserCredit_22",
            "code": "        block = get_block(block_id)\n        if not block:\n            raise ValueError(f\"Block not found: {block_id}\")\n"
        },
        {
            "id": "chunk_2_UserCredit_23",
            "code": "        cost, matching_filter = self._block_usage_cost(\n            block=block, input_data=input_data, data_size=data_size, run_time=run_time\n        )\n"
        },
        {
            "id": "chunk_2_UserCredit_24",
            "code": "        if cost <= 0:\n            return 0\n"
        },
        {
            "id": "chunk_2_UserCredit_25",
            "code": "        if validate_balance and user_credit < cost:\n            raise ValueError(f\"Insufficient credit: {user_credit} < {cost}\")\n"
        },
        {
            "id": "chunk_2_UserCredit_26",
            "code": "        await CreditTransaction.prisma().create(\n            data={\n                \"userId\": user_id,\n                \"amount\": -cost,\n                \"type\": CreditTransactionType.USAGE,\n                \"blockId\": block.id,\n                \"metadata\": Json(\n                    {\n                        \"block\": block.name,\n                        \"input\": matching_filter,\n                    }\n                ),\n                \"createdAt\": self.time_now(),\n            }\n        )\n"
        },
        {
            "id": "chunk_2_UserCredit_27",
            "code": "        return cost\n"
        },
        {
            "id": "chunk_2_UserCredit_28",
            "code": "    async def top_up_credits(self, user_id: str, amount: int):\n        await CreditTransaction.prisma().create(\n            data={\n                \"userId\": user_id,\n                \"amount\": amount,\n                \"type\": CreditTransactionType.TOP_UP,\n                \"createdAt\": self.time_now(),\n            }\n        )\n"
        },
        {
            "id": "chunk_3_DisabledUserCredit_1",
            "code": "class DisabledUserCredit(UserCreditBase):\n"
        },
        {
            "id": "chunk_3_DisabledUserCredit_2",
            "code": "    async def get_or_refill_credit(self, *args, **kwargs) -> int:\n        return 0\n"
        },
        {
            "id": "chunk_3_DisabledUserCredit_3",
            "code": "    async def spend_credits(self, *args, **kwargs) -> int:\n        return 0\n"
        },
        {
            "id": "chunk_3_DisabledUserCredit_4",
            "code": "    async def top_up_credits(self, *args, **kwargs):\n        pass\n"
        },
        {
            "id": "chunk_4_get_user_credit_model_1",
            "code": "def get_user_credit_model() -> UserCreditBase:\n"
        },
        {
            "id": "chunk_4_get_user_credit_model_2",
            "code": "    if config.enable_credit.lower() == \"true\":\n"
        },
        {
            "id": "chunk_4_get_user_credit_model_3",
            "code": "        return UserCredit(config.num_user_credits_refill)\n"
        },
        {
            "id": "chunk_4_get_user_credit_model_4",
            "code": "    else:\n        return DisabledUserCredit(0)\n"
        },
        {
            "id": "chunk_5_get_block_costs_1",
            "code": "def get_block_costs() -> dict[str, list[BlockCost]]:\n    return {block().id: costs for block, costs in BLOCK_COSTS.items()}\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_0_GlobalBlock_2",
            "to": "chunk_0_GlobalBlock_3"
        },
        {
            "from": "chunk_0_GlobalBlock_3",
            "to": "chunk_0_GlobalBlock_4"
        },
        {
            "from": "chunk_1_UserCreditBase_1",
            "to": "chunk_1_UserCreditBase_2"
        },
        {
            "from": "chunk_1_UserCreditBase_2",
            "to": "chunk_1_UserCreditBase_3"
        },
        {
            "from": "chunk_1_UserCreditBase_3",
            "to": "chunk_1_UserCreditBase_4"
        },
        {
            "from": "chunk_1_UserCreditBase_4",
            "to": "chunk_1_UserCreditBase_5"
        },
        {
            "from": "chunk_1_UserCreditBase_5",
            "to": "chunk_1_UserCreditBase_6"
        },
        {
            "from": "chunk_1_UserCreditBase_6",
            "to": "chunk_1_UserCreditBase_7"
        },
        {
            "from": "chunk_1_UserCreditBase_7",
            "to": "chunk_1_UserCreditBase_8"
        },
        {
            "from": "chunk_2_UserCredit_1",
            "to": "chunk_2_UserCredit_2"
        },
        {
            "from": "chunk_2_UserCredit_2",
            "to": "chunk_2_UserCredit_3"
        },
        {
            "from": "chunk_2_UserCredit_3",
            "to": "chunk_2_UserCredit_4"
        },
        {
            "from": "chunk_2_UserCredit_3",
            "to": "chunk_2_UserCredit_5"
        },
        {
            "from": "chunk_2_UserCredit_4",
            "to": "chunk_2_UserCredit_8"
        },
        {
            "from": "chunk_2_UserCredit_5",
            "to": "chunk_2_UserCredit_6"
        },
        {
            "from": "chunk_2_UserCredit_6",
            "to": "chunk_2_UserCredit_7"
        },
        {
            "from": "chunk_2_UserCredit_6",
            "to": "chunk_2_UserCredit_8"
        },
        {
            "from": "chunk_2_UserCredit_7",
            "to": "chunk_2_UserCredit_8"
        },
        {
            "from": "chunk_2_UserCredit_10",
            "to": "chunk_2_UserCredit_11"
        },
        {
            "from": "chunk_2_UserCredit_11",
            "to": "chunk_2_UserCredit_12"
        },
        {
            "from": "chunk_2_UserCredit_11",
            "to": "chunk_2_UserCredit_16"
        },
        {
            "from": "chunk_2_UserCredit_12",
            "to": "chunk_2_UserCredit_13"
        },
        {
            "from": "chunk_2_UserCredit_12",
            "to": "chunk_2_UserCredit_14"
        },
        {
            "from": "chunk_2_UserCredit_12",
            "to": "chunk_2_UserCredit_15"
        },
        {
            "from": "chunk_2_UserCredit_12",
            "to": "chunk_2_UserCredit_16"
        },
        {
            "from": "chunk_2_UserCredit_17",
            "to": "chunk_2_UserCredit_18"
        },
        {
            "from": "chunk_2_UserCredit_18",
            "to": "chunk_2_UserCredit_19"
        },
        {
            "from": "chunk_2_UserCredit_19",
            "to": "chunk_2_UserCredit_20"
        },
        {
            "from": "chunk_2_UserCredit_21",
            "to": "chunk_2_UserCredit_22"
        },
        {
            "from": "chunk_2_UserCredit_22",
            "to": "chunk_2_UserCredit_23"
        },
        {
            "from": "chunk_2_UserCredit_23",
            "to": "chunk_2_UserCredit_24"
        },
        {
            "from": "chunk_2_UserCredit_24",
            "to": "chunk_2_UserCredit_25"
        },
        {
            "from": "chunk_2_UserCredit_24",
            "to": "chunk_2_UserCredit_26"
        },
        {
            "from": "chunk_2_UserCredit_26",
            "to": "chunk_2_UserCredit_27"
        },
        {
            "from": "chunk_3_DisabledUserCredit_1",
            "to": "chunk_3_DisabledUserCredit_2"
        },
        {
            "from": "chunk_3_DisabledUserCredit_2",
            "to": "chunk_3_DisabledUserCredit_3"
        },
        {
            "from": "chunk_3_DisabledUserCredit_3",
            "to": "chunk_3_DisabledUserCredit_4"
        },
        {
            "from": "chunk_4_get_user_credit_model_1",
            "to": "chunk_4_get_user_credit_model_2"
        },
        {
            "from": "chunk_4_get_user_credit_model_2",
            "to": "chunk_4_get_user_credit_model_3"
        },
        {
            "from": "chunk_4_get_user_credit_model_2",
            "to": "chunk_4_get_user_credit_model_4"
        }
    ]
}