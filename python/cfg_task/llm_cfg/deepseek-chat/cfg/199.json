{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "# Reference: https://www.geeksforgeeks.org/position-of-rightmost-set-bit/\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "\n\n\n"
        },
        {
            "id": "chunk_1_get_index_of_rightmost_set_bit_1",
            "code": "def get_index_of_rightmost_set_bit(number: int) -> int:\n    \"\"\"\n    Take in a positive integer 'number'.\n    Returns the zero-based index of first set bit in that 'number' from right.\n    Returns -1, If no set bit found.\n\n    >>> get_index_of_rightmost_set_bit(0)\n    -1\n    >>> get_index_of_rightmost_set_bit(5)\n    0\n    >>> get_index_of_rightmost_set_bit(36)\n    2\n    >>> get_index_of_rightmost_set_bit(8)\n    3\n    >>> get_index_of_rightmost_set_bit(-18)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    >>> get_index_of_rightmost_set_bit('test')\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    >>> get_index_of_rightmost_set_bit(1.25)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    \"\"\"\n"
        },
        {
            "id": "chunk_1_get_index_of_rightmost_set_bit_2",
            "code": "    if not isinstance(number, int) or number < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n"
        },
        {
            "id": "chunk_1_get_index_of_rightmost_set_bit_3",
            "code": "    intermediate = number & ~(number - 1)\n    index = 0\n"
        },
        {
            "id": "chunk_1_get_index_of_rightmost_set_bit_4",
            "code": "    while intermediate:\n        intermediate >>= 1\n        index += 1\n"
        },
        {
            "id": "chunk_1_get_index_of_rightmost_set_bit_5",
            "code": "    return index - 1\n"
        },
        {
            "id": "chunk_2_GlobalBlock_1",
            "code": "\n\n\n"
        },
        {
            "id": "chunk_3___main___1",
            "code": "if __name__ == \"__main__\":\n"
        },
        {
            "id": "chunk_3___main___2",
            "code": "    \"\"\"\n    Finding the index of rightmost set bit has some very peculiar use-cases,\n    especially in finding missing or/and repeating numbers in a list of\n    positive integers.\n    \"\"\"\n"
        },
        {
            "id": "chunk_3___main___3",
            "code": "    import doctest\n"
        },
        {
            "id": "chunk_3___main___4",
            "code": "    doctest.testmod(verbose=True)\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_1_get_index_of_rightmost_set_bit_1",
            "to": "chunk_1_get_index_of_rightmost_set_bit_2"
        },
        {
            "from": "chunk_1_get_index_of_rightmost_set_bit_2",
            "to": "chunk_1_get_index_of_rightmost_set_bit_3"
        },
        {
            "from": "chunk_1_get_index_of_rightmost_set_bit_3",
            "to": "chunk_1_get_index_of_rightmost_set_bit_4"
        },
        {
            "from": "chunk_1_get_index_of_rightmost_set_bit_4",
            "to": "chunk_1_get_index_of_rightmost_set_bit_4"
        },
        {
            "from": "chunk_1_get_index_of_rightmost_set_bit_4",
            "to": "chunk_1_get_index_of_rightmost_set_bit_5"
        },
        {
            "from": "chunk_3___main___1",
            "to": "chunk_3___main___2"
        },
        {
            "from": "chunk_3___main___2",
            "to": "chunk_3___main___3"
        },
        {
            "from": "chunk_3___main___3",
            "to": "chunk_3___main___4"
        }
    ]
}