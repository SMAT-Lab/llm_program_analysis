{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "import pytest\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "from backend.util.request import validate_url\n"
        },
        {
            "id": "chunk_1_test_validate_url_1",
            "code": "def test_validate_url():\n"
        },
        {
            "id": "chunk_1_test_validate_url_2",
            "code": "    # Rejected IP ranges\n    with pytest.raises(ValueError):\n        validate_url(\"localhost\", [])\n"
        },
        {
            "id": "chunk_1_test_validate_url_3",
            "code": "\n"
        },
        {
            "id": "chunk_1_test_validate_url_4",
            "code": "    with pytest.raises(ValueError):\n        validate_url(\"192.168.1.1\", [])\n"
        },
        {
            "id": "chunk_1_test_validate_url_5",
            "code": "\n"
        },
        {
            "id": "chunk_1_test_validate_url_6",
            "code": "    with pytest.raises(ValueError):\n        validate_url(\"127.0.0.1\", [])\n"
        },
        {
            "id": "chunk_1_test_validate_url_7",
            "code": "\n"
        },
        {
            "id": "chunk_1_test_validate_url_8",
            "code": "    with pytest.raises(ValueError):\n        validate_url(\"0.0.0.0\", [])\n"
        },
        {
            "id": "chunk_1_test_validate_url_9",
            "code": "\n"
        },
        {
            "id": "chunk_1_test_validate_url_10",
            "code": "    # Normal URLs\n    assert validate_url(\"google.com/a?b=c\", []) == \"http://google.com/a?b=c\"\n"
        },
        {
            "id": "chunk_1_test_validate_url_11",
            "code": "    assert validate_url(\"github.com?key=!@!@\", []) == \"http://github.com?key=!@!@\"\n"
        },
        {
            "id": "chunk_1_test_validate_url_12",
            "code": "\n"
        },
        {
            "id": "chunk_1_test_validate_url_13",
            "code": "    # Scheme Enforcement\n    with pytest.raises(ValueError):\n        validate_url(\"ftp://example.com\", [])\n"
        },
        {
            "id": "chunk_1_test_validate_url_14",
            "code": "    with pytest.raises(ValueError):\n        validate_url(\"file://example.com\", [])\n"
        },
        {
            "id": "chunk_1_test_validate_url_15",
            "code": "\n"
        },
        {
            "id": "chunk_1_test_validate_url_16",
            "code": "    # International domain that converts to punycode - should be allowed if public\n    assert validate_url(\"http://xn--exmple-cua.com\", []) == \"http://xn--exmple-cua.com\"\n"
        },
        {
            "id": "chunk_1_test_validate_url_17",
            "code": "    # If the domain fails IDNA encoding or is invalid, it should raise an error\n    with pytest.raises(ValueError):\n        validate_url(\"http://exa\u25ccmple.com\", [])\n"
        },
        {
            "id": "chunk_1_test_validate_url_18",
            "code": "\n"
        },
        {
            "id": "chunk_1_test_validate_url_19",
            "code": "    # IPv6 Addresses\n    with pytest.raises(ValueError):\n        validate_url(\"::1\", [])  # IPv6 loopback should be blocked\n"
        },
        {
            "id": "chunk_1_test_validate_url_20",
            "code": "    with pytest.raises(ValueError):\n        validate_url(\"http://[::1]\", [])  # IPv6 loopback in URL form\n"
        },
        {
            "id": "chunk_1_test_validate_url_21",
            "code": "\n"
        },
        {
            "id": "chunk_1_test_validate_url_22",
            "code": "    # Suspicious Characters in Hostname\n    with pytest.raises(ValueError):\n        validate_url(\"http://example_underscore.com\", [])\n"
        },
        {
            "id": "chunk_1_test_validate_url_23",
            "code": "    with pytest.raises(ValueError):\n        validate_url(\"http://exa mple.com\", [])  # Space in hostname\n"
        },
        {
            "id": "chunk_1_test_validate_url_24",
            "code": "\n"
        },
        {
            "id": "chunk_1_test_validate_url_25",
            "code": "    # Malformed URLs\n    with pytest.raises(ValueError):\n        validate_url(\"http://\", [])  # No hostname\n"
        },
        {
            "id": "chunk_1_test_validate_url_26",
            "code": "    with pytest.raises(ValueError):\n        validate_url(\"://missing-scheme\", [])  # Missing proper scheme\n"
        },
        {
            "id": "chunk_1_test_validate_url_27",
            "code": "\n"
        },
        {
            "id": "chunk_1_test_validate_url_28",
            "code": "    # Trusted Origins\n    trusted = [\"internal-api.company.com\", \"10.0.0.5\"]\n"
        },
        {
            "id": "chunk_1_test_validate_url_29",
            "code": "    assert (\n        validate_url(\"internal-api.company.com\", trusted)\n        == \"http://internal-api.company.com\"\n    )\n"
        },
        {
            "id": "chunk_1_test_validate_url_30",
            "code": "    assert validate_url(\"10.0.0.5\", [\"10.0.0.5\"]) == \"http://10.0.0.5\"\n"
        },
        {
            "id": "chunk_1_test_validate_url_31",
            "code": "\n"
        },
        {
            "id": "chunk_1_test_validate_url_32",
            "code": "    # Special Characters in Path or Query\n    assert (\n        validate_url(\"example.com/path%20with%20spaces\", [])\n        == \"http://example.com/path%20with%20spaces\"\n"
        },
        {
            "id": "chunk_1_test_validate_url_33",
            "code": "    )\n"
        },
        {
            "id": "chunk_1_test_validate_url_34",
            "code": "\n"
        },
        {
            "id": "chunk_1_test_validate_url_35",
            "code": "    # Backslashes should be replaced with forward slashes\n    assert (\n        validate_url(\"http://example.com\\\\backslash\", [])\n        == \"http://example.com/backslash\"\n"
        },
        {
            "id": "chunk_1_test_validate_url_36",
            "code": "    )\n"
        },
        {
            "id": "chunk_1_test_validate_url_37",
            "code": "\n"
        },
        {
            "id": "chunk_1_test_validate_url_38",
            "code": "    # Check defaulting scheme behavior for valid domains\n    assert validate_url(\"example.com\", []) == \"http://example.com\"\n"
        },
        {
            "id": "chunk_1_test_validate_url_39",
            "code": "    assert validate_url(\"https://secure.com\", []) == \"https://secure.com\"\n"
        },
        {
            "id": "chunk_1_test_validate_url_40",
            "code": "\n"
        },
        {
            "id": "chunk_1_test_validate_url_41",
            "code": "    # Non-ASCII Characters in Query/Fragment\n    assert validate_url(\"example.com?param=\u00e4\u00f6\u00fc\", []) == \"http://example.com?param=\u00e4\u00f6\u00fc\"\n"
        },
        {
            "id": "chunk_1_test_validate_url_42",
            "code": "\n\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_1_test_validate_url_1",
            "to": "chunk_1_test_validate_url_2"
        },
        {
            "from": "chunk_1_test_validate_url_2",
            "to": "chunk_1_test_validate_url_3"
        },
        {
            "from": "chunk_1_test_validate_url_3",
            "to": "chunk_1_test_validate_url_4"
        },
        {
            "from": "chunk_1_test_validate_url_4",
            "to": "chunk_1_test_validate_url_5"
        },
        {
            "from": "chunk_1_test_validate_url_5",
            "to": "chunk_1_test_validate_url_6"
        },
        {
            "from": "chunk_1_test_validate_url_6",
            "to": "chunk_1_test_validate_url_7"
        },
        {
            "from": "chunk_1_test_validate_url_7",
            "to": "chunk_1_test_validate_url_8"
        },
        {
            "from": "chunk_1_test_validate_url_8",
            "to": "chunk_1_test_validate_url_9"
        },
        {
            "from": "chunk_1_test_validate_url_9",
            "to": "chunk_1_test_validate_url_10"
        },
        {
            "from": "chunk_1_test_validate_url_10",
            "to": "chunk_1_test_validate_url_11"
        },
        {
            "from": "chunk_1_test_validate_url_11",
            "to": "chunk_1_test_validate_url_12"
        },
        {
            "from": "chunk_1_test_validate_url_12",
            "to": "chunk_1_test_validate_url_13"
        },
        {
            "from": "chunk_1_test_validate_url_13",
            "to": "chunk_1_test_validate_url_14"
        },
        {
            "from": "chunk_1_test_validate_url_14",
            "to": "chunk_1_test_validate_url_15"
        },
        {
            "from": "chunk_1_test_validate_url_15",
            "to": "chunk_1_test_validate_url_16"
        },
        {
            "from": "chunk_1_test_validate_url_16",
            "to": "chunk_1_test_validate_url_17"
        },
        {
            "from": "chunk_1_test_validate_url_17",
            "to": "chunk_1_test_validate_url_18"
        },
        {
            "from": "chunk_1_test_validate_url_18",
            "to": "chunk_1_test_validate_url_19"
        },
        {
            "from": "chunk_1_test_validate_url_19",
            "to": "chunk_1_test_validate_url_20"
        },
        {
            "from": "chunk_1_test_validate_url_20",
            "to": "chunk_1_test_validate_url_21"
        },
        {
            "from": "chunk_1_test_validate_url_21",
            "to": "chunk_1_test_validate_url_22"
        },
        {
            "from": "chunk_1_test_validate_url_22",
            "to": "chunk_1_test_validate_url_23"
        },
        {
            "from": "chunk_1_test_validate_url_23",
            "to": "chunk_1_test_validate_url_24"
        },
        {
            "from": "chunk_1_test_validate_url_24",
            "to": "chunk_1_test_validate_url_25"
        },
        {
            "from": "chunk_1_test_validate_url_25",
            "to": "chunk_1_test_validate_url_26"
        },
        {
            "from": "chunk_1_test_validate_url_26",
            "to": "chunk_1_test_validate_url_27"
        },
        {
            "from": "chunk_1_test_validate_url_27",
            "to": "chunk_1_test_validate_url_28"
        },
        {
            "from": "chunk_1_test_validate_url_28",
            "to": "chunk_1_test_validate_url_29"
        },
        {
            "from": "chunk_1_test_validate_url_29",
            "to": "chunk_1_test_validate_url_30"
        },
        {
            "from": "chunk_1_test_validate_url_30",
            "to": "chunk_1_test_validate_url_31"
        },
        {
            "from": "chunk_1_test_validate_url_31",
            "to": "chunk_1_test_validate_url_32"
        },
        {
            "from": "chunk_1_test_validate_url_32",
            "to": "chunk_1_test_validate_url_33"
        },
        {
            "from": "chunk_1_test_validate_url_33",
            "to": "chunk_1_test_validate_url_34"
        },
        {
            "from": "chunk_1_test_validate_url_34",
            "to": "chunk_1_test_validate_url_35"
        },
        {
            "from": "chunk_1_test_validate_url_35",
            "to": "chunk_1_test_validate_url_36"
        },
        {
            "from": "chunk_1_test_validate_url_36",
            "to": "chunk_1_test_validate_url_37"
        },
        {
            "from": "chunk_1_test_validate_url_37",
            "to": "chunk_1_test_validate_url_38"
        },
        {
            "from": "chunk_1_test_validate_url_38",
            "to": "chunk_1_test_validate_url_39"
        },
        {
            "from": "chunk_1_test_validate_url_39",
            "to": "chunk_1_test_validate_url_40"
        },
        {
            "from": "chunk_1_test_validate_url_40",
            "to": "chunk_1_test_validate_url_41"
        },
        {
            "from": "chunk_1_test_validate_url_41",
            "to": "chunk_1_test_validate_url_42"
        }
    ]
}