{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "import asyncio\nimport logging\nfrom contextlib import asynccontextmanager\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "import uvicorn\nfrom autogpt_libs.auth import parse_jwt_token\nfrom fastapi import Depends, FastAPI, WebSocket, WebSocketDisconnect\nfrom starlette.middleware.cors import CORSMiddleware\n"
        },
        {
            "id": "chunk_0_GlobalBlock_3",
            "code": "from backend.data import redis\nfrom backend.data.execution import AsyncRedisExecutionEventBus\nfrom backend.data.user import DEFAULT_USER_ID\nfrom backend.server.conn_manager import ConnectionManager\nfrom backend.server.model import ExecutionSubscription, Methods, WsMessage\nfrom backend.util.service import AppProcess\nfrom backend.util.settings import AppEnvironment, Config, Settings\n"
        },
        {
            "id": "chunk_0_GlobalBlock_4",
            "code": "logger = logging.getLogger(__name__)\nsettings = Settings()\n"
        },
        {
            "id": "chunk_1_lifespan_1",
            "code": "@asynccontextmanager\nasync def lifespan(app: FastAPI):\n"
        },
        {
            "id": "chunk_1_lifespan_2",
            "code": "    manager = get_connection_manager()\n    fut = asyncio.create_task(event_broadcaster(manager))\n    fut.add_done_callback(lambda _: logger.info(\"Event broadcaster stopped\"))\n"
        },
        {
            "id": "chunk_1_lifespan_3",
            "code": "    yield\n"
        },
        {
            "id": "chunk_2_GlobalBlock_1",
            "code": "docs_url = \"/docs\" if settings.config.app_env == AppEnvironment.LOCAL else None\n"
        },
        {
            "id": "chunk_2_GlobalBlock_2",
            "code": "app = FastAPI(lifespan=lifespan, docs_url=docs_url)\n"
        },
        {
            "id": "chunk_2_GlobalBlock_3",
            "code": "_connection_manager = None\n"
        },
        {
            "id": "chunk_3_get_connection_manager_1",
            "code": "def get_connection_manager():\n    global _connection_manager\n"
        },
        {
            "id": "chunk_3_get_connection_manager_2",
            "code": "    if _connection_manager is None:\n        _connection_manager = ConnectionManager()\n"
        },
        {
            "id": "chunk_3_get_connection_manager_3",
            "code": "    return _connection_manager\n"
        },
        {
            "id": "chunk_4_event_broadcaster_1",
            "code": "async def event_broadcaster(manager: ConnectionManager):\n"
        },
        {
            "id": "chunk_4_event_broadcaster_2",
            "code": "    try:\n        redis.connect()\n        event_queue = AsyncRedisExecutionEventBus()\n"
        },
        {
            "id": "chunk_4_event_broadcaster_3",
            "code": "        async for event in event_queue.listen():\n            await manager.send_execution_result(event)\n"
        },
        {
            "id": "chunk_4_event_broadcaster_4",
            "code": "    except Exception as e:\n        logger.exception(f\"Event broadcaster error: {e}\")\n        raise\n"
        },
        {
            "id": "chunk_4_event_broadcaster_5",
            "code": "    finally:\n        redis.disconnect()\n"
        },
        {
            "id": "chunk_5_authenticate_websocket_1",
            "code": "async def authenticate_websocket(websocket: WebSocket) -> str:\n"
        },
        {
            "id": "chunk_5_authenticate_websocket_2",
            "code": "    if not settings.config.enable_auth:\n        return DEFAULT_USER_ID\n"
        },
        {
            "id": "chunk_5_authenticate_websocket_3",
            "code": "    token = websocket.query_params.get(\"token\")\n"
        },
        {
            "id": "chunk_5_authenticate_websocket_4",
            "code": "    if not token:\n        await websocket.close(code=4001, reason=\"Missing authentication token\")\n        return \"\"\n"
        },
        {
            "id": "chunk_5_authenticate_websocket_5",
            "code": "    try:\n        payload = parse_jwt_token(token)\n        user_id = payload.get(\"sub\")\n"
        },
        {
            "id": "chunk_5_authenticate_websocket_6",
            "code": "        if not user_id:\n            await websocket.close(code=4002, reason=\"Invalid token\")\n            return \"\"\n"
        },
        {
            "id": "chunk_5_authenticate_websocket_7",
            "code": "        return user_id\n"
        },
        {
            "id": "chunk_5_authenticate_websocket_8",
            "code": "    except ValueError:\n        await websocket.close(code=4003, reason=\"Invalid token\")\n        return \"\"\n"
        },
        {
            "id": "chunk_6_handle_subscribe_1",
            "code": "async def handle_subscribe(\n    websocket: WebSocket, manager: ConnectionManager, message: WsMessage\n):\n"
        },
        {
            "id": "chunk_6_handle_subscribe_2",
            "code": "    if not message.data:\n        await websocket.send_text(\n            WsMessage(\n                method=Methods.ERROR,\n                success=False,\n                error=\"Subscription data missing\",\n            ).model_dump_json()\n        )\n"
        },
        {
            "id": "chunk_6_handle_subscribe_3",
            "code": "    else:\n        ex_sub = ExecutionSubscription.model_validate(message.data)\n        await manager.subscribe(ex_sub.graph_id, websocket)\n        logger.debug(f\"New execution subscription for graph {ex_sub.graph_id}\")\n        await websocket.send_text(\n            WsMessage(\n                method=Methods.SUBSCRIBE,\n                success=True,\n                channel=ex_sub.graph_id,\n            ).model_dump_json()\n        )\n"
        },
        {
            "id": "chunk_7_handle_unsubscribe_1",
            "code": "async def handle_unsubscribe(\n    websocket: WebSocket, manager: ConnectionManager, message: WsMessage\n):\n"
        },
        {
            "id": "chunk_7_handle_unsubscribe_2",
            "code": "    if not message.data:\n        await websocket.send_text(\n            WsMessage(\n                method=Methods.ERROR,\n                success=False,\n                error=\"Subscription data missing\",\n            ).model_dump_json()\n        )\n"
        },
        {
            "id": "chunk_7_handle_unsubscribe_3",
            "code": "    else:\n        ex_sub = ExecutionSubscription.model_validate(message.data)\n        await manager.unsubscribe(ex_sub.graph_id, websocket)\n        logger.debug(f\"Removed execution subscription for graph {ex_sub.graph_id}\")\n        await websocket.send_text(\n            WsMessage(\n                method=Methods.UNSUBSCRIBE,\n                success=True,\n                channel=ex_sub.graph_id,\n            ).model_dump_json()\n        )\n"
        },
        {
            "id": "chunk_8_health_1",
            "code": "@app.get(\"/\")\nasync def health():\n    return {\"status\": \"healthy\"}\n"
        },
        {
            "id": "chunk_9_websocket_router_1",
            "code": "@app.websocket(\"/ws\")\nasync def websocket_router(\n    websocket: WebSocket, manager: ConnectionManager = Depends(get_connection_manager)\n):\n"
        },
        {
            "id": "chunk_9_websocket_router_2",
            "code": "    user_id = await authenticate_websocket(websocket)\n"
        },
        {
            "id": "chunk_9_websocket_router_3",
            "code": "    if not user_id:\n        return\n"
        },
        {
            "id": "chunk_9_websocket_router_4",
            "code": "    await manager.connect(websocket)\n"
        },
        {
            "id": "chunk_9_websocket_router_5",
            "code": "    try:\n        while True:\n"
        },
        {
            "id": "chunk_9_websocket_router_6",
            "code": "            data = await websocket.receive_text()\n            message = WsMessage.model_validate_json(data)\n"
        },
        {
            "id": "chunk_9_websocket_router_7",
            "code": "            if message.method == Methods.HEARTBEAT:\n                await websocket.send_json(\n                    {\"method\": Methods.HEARTBEAT.value, \"data\": \"pong\", \"success\": True}\n                )\n                continue\n"
        },
        {
            "id": "chunk_9_websocket_router_8",
            "code": "            if message.method == Methods.SUBSCRIBE:\n                await handle_subscribe(websocket, manager, message)\n"
        },
        {
            "id": "chunk_9_websocket_router_9",
            "code": "            elif message.method == Methods.UNSUBSCRIBE:\n                await handle_unsubscribe(websocket, manager, message)\n"
        },
        {
            "id": "chunk_9_websocket_router_10",
            "code": "            elif message.method == Methods.ERROR:\n                logger.error(f\"WebSocket Error message received: {message.data}\")\n"
        },
        {
            "id": "chunk_9_websocket_router_11",
            "code": "            else:\n                logger.warning(\n                    f\"Unknown WebSocket message type {message.method} received: \"\n                    f\"{message.data}\"\n                )\n"
        },
        {
            "id": "chunk_9_websocket_router_12",
            "code": "                await websocket.send_text(\n                    WsMessage(\n                        method=Methods.ERROR,\n                        success=False,\n                        error=\"Message type is not processed by the server\",\n                    ).model_dump_json()\n                )\n"
        },
        {
            "id": "chunk_9_websocket_router_13",
            "code": "    except WebSocketDisconnect:\n        manager.disconnect(websocket)\n        logger.debug(\"WebSocket client disconnected\")\n"
        },
        {
            "id": "chunk_10_WebsocketServer_1",
            "code": "class WebsocketServer(AppProcess):\n"
        },
        {
            "id": "chunk_10_WebsocketServer_2",
            "code": "    def run(self):\n"
        },
        {
            "id": "chunk_10_WebsocketServer_3",
            "code": "        logger.info(f\"CORS allow origins: {settings.config.backend_cors_allow_origins}\")\n        server_app = CORSMiddleware(\n            app=app,\n            allow_origins=settings.config.backend_cors_allow_origins,\n            allow_credentials=True,\n            allow_methods=[\"*\"],\n            allow_headers=[\"*\"],\n        )\n"
        },
        {
            "id": "chunk_10_WebsocketServer_4",
            "code": "        uvicorn.run(\n            server_app,\n            host=Config().websocket_server_host,\n            port=Config().websocket_server_port,\n        )\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_0_GlobalBlock_2",
            "to": "chunk_0_GlobalBlock_3"
        },
        {
            "from": "chunk_0_GlobalBlock_3",
            "to": "chunk_0_GlobalBlock_4"
        },
        {
            "from": "chunk_1_lifespan_1",
            "to": "chunk_1_lifespan_2"
        },
        {
            "from": "chunk_1_lifespan_2",
            "to": "chunk_1_lifespan_3"
        },
        {
            "from": "chunk_2_GlobalBlock_1",
            "to": "chunk_2_GlobalBlock_2"
        },
        {
            "from": "chunk_2_GlobalBlock_2",
            "to": "chunk_2_GlobalBlock_3"
        },
        {
            "from": "chunk_3_get_connection_manager_1",
            "to": "chunk_3_get_connection_manager_2"
        },
        {
            "from": "chunk_3_get_connection_manager_2",
            "to": "chunk_3_get_connection_manager_3"
        },
        {
            "from": "chunk_4_event_broadcaster_1",
            "to": "chunk_4_event_broadcaster_2"
        },
        {
            "from": "chunk_4_event_broadcaster_2",
            "to": "chunk_4_event_broadcaster_3"
        },
        {
            "from": "chunk_4_event_broadcaster_2",
            "to": "chunk_4_event_broadcaster_4"
        },
        {
            "from": "chunk_4_event_broadcaster_3",
            "to": "chunk_4_event_broadcaster_3"
        },
        {
            "from": "chunk_4_event_broadcaster_3",
            "to": "chunk_4_event_broadcaster_5"
        },
        {
            "from": "chunk_4_event_broadcaster_4",
            "to": "chunk_4_event_broadcaster_5"
        },
        {
            "from": "chunk_5_authenticate_websocket_1",
            "to": "chunk_5_authenticate_websocket_2"
        },
        {
            "from": "chunk_5_authenticate_websocket_2",
            "to": "chunk_5_authenticate_websocket_3"
        },
        {
            "from": "chunk_5_authenticate_websocket_2",
            "to": "chunk_5_authenticate_websocket_7"
        },
        {
            "from": "chunk_5_authenticate_websocket_3",
            "to": "chunk_5_authenticate_websocket_4"
        },
        {
            "from": "chunk_5_authenticate_websocket_4",
            "to": "chunk_5_authenticate_websocket_5"
        },
        {
            "from": "chunk_5_authenticate_websocket_4",
            "to": "chunk_5_authenticate_websocket_8"
        },
        {
            "from": "chunk_5_authenticate_websocket_5",
            "to": "chunk_5_authenticate_websocket_6"
        },
        {
            "from": "chunk_5_authenticate_websocket_6",
            "to": "chunk_5_authenticate_websocket_7"
        },
        {
            "from": "chunk_5_authenticate_websocket_6",
            "to": "chunk_5_authenticate_websocket_8"
        },
        {
            "from": "chunk_6_handle_subscribe_1",
            "to": "chunk_6_handle_subscribe_2"
        },
        {
            "from": "chunk_6_handle_subscribe_2",
            "to": "chunk_6_handle_subscribe_3"
        },
        {
            "from": "chunk_7_handle_unsubscribe_1",
            "to": "chunk_7_handle_unsubscribe_2"
        },
        {
            "from": "chunk_7_handle_unsubscribe_2",
            "to": "chunk_7_handle_unsubscribe_3"
        },
        {
            "from": "chunk_9_websocket_router_1",
            "to": "chunk_9_websocket_router_2"
        },
        {
            "from": "chunk_9_websocket_router_2",
            "to": "chunk_9_websocket_router_3"
        },
        {
            "from": "chunk_9_websocket_router_3",
            "to": "chunk_9_websocket_router_4"
        },
        {
            "from": "chunk_9_websocket_router_3",
            "to": "chunk_9_websocket_router_13"
        },
        {
            "from": "chunk_9_websocket_router_4",
            "to": "chunk_9_websocket_router_5"
        },
        {
            "from": "chunk_9_websocket_router_5",
            "to": "chunk_9_websocket_router_6"
        },
        {
            "from": "chunk_9_websocket_router_6",
            "to": "chunk_9_websocket_router_7"
        },
        {
            "from": "chunk_9_websocket_router_7",
            "to": "chunk_9_websocket_router_5"
        },
        {
            "from": "chunk_9_websocket_router_7",
            "to": "chunk_9_websocket_router_8"
        },
        {
            "from": "chunk_9_websocket_router_8",
            "to": "chunk_9_websocket_router_5"
        },
        {
            "from": "chunk_9_websocket_router_8",
            "to": "chunk_9_websocket_router_9"
        },
        {
            "from": "chunk_9_websocket_router_9",
            "to": "chunk_9_websocket_router_5"
        },
        {
            "from": "chunk_9_websocket_router_9",
            "to": "chunk_9_websocket_router_10"
        },
        {
            "from": "chunk_9_websocket_router_10",
            "to": "chunk_9_websocket_router_5"
        },
        {
            "from": "chunk_9_websocket_router_10",
            "to": "chunk_9_websocket_router_11"
        },
        {
            "from": "chunk_9_websocket_router_11",
            "to": "chunk_9_websocket_router_12"
        },
        {
            "from": "chunk_9_websocket_router_12",
            "to": "chunk_9_websocket_router_5"
        },
        {
            "from": "chunk_10_WebsocketServer_1",
            "to": "chunk_10_WebsocketServer_2"
        },
        {
            "from": "chunk_10_WebsocketServer_2",
            "to": "chunk_10_WebsocketServer_3"
        },
        {
            "from": "chunk_10_WebsocketServer_3",
            "to": "chunk_10_WebsocketServer_4"
        }
    ]
}