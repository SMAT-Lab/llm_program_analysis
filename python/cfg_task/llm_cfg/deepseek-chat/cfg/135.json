{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "# -*- coding: utf-8 -*-\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "from mrjob.job import MRJob\n"
        },
        {
            "id": "chunk_1_HitCounts_1",
            "code": "class HitCounts(MRJob):\n\n"
        },
        {
            "id": "chunk_1_HitCounts_2",
            "code": "    def extract_url(self, line):\n        \"\"\"Extract the generated url from the log line.\"\"\"\n        pass\n"
        },
        {
            "id": "chunk_1_HitCounts_3",
            "code": "    def extract_year_month(self, line):\n        \"\"\"Return the year and month portions of the timestamp.\"\"\"\n        pass\n"
        },
        {
            "id": "chunk_1_HitCounts_4",
            "code": "    def mapper(self, _, line):\n        \"\"\"Parse each log line, extract and transform relevant lines.\n\n        Emit key value pairs of the form:\n\n        (2016-01, url0), 1\n        (2016-01, url0), 1\n        (2016-01, url1), 1\n        \"\"\"\n"
        },
        {
            "id": "chunk_1_HitCounts_5",
            "code": "        url = self.extract_url(line)\n        period = self.extract_year_month(line)\n        yield (period, url), 1\n"
        },
        {
            "id": "chunk_1_HitCounts_6",
            "code": "    def reducer(self, key, values):\n        \"\"\"Sum values for each key.\n\n        (2016-01, url0), 2\n        (2016-01, url1), 1\n        \"\"\"\n"
        },
        {
            "id": "chunk_1_HitCounts_7",
            "code": "        yield key, sum(values)\n"
        },
        {
            "id": "chunk_1_HitCounts_8",
            "code": "    def steps(self):\n        \"\"\"Run the map and reduce steps.\"\"\"\n        return [\n            self.mr(mapper=self.mapper,\n                    reducer=self.reducer)\n        ]\n"
        },
        {
            "id": "chunk_2_extract_url_1",
            "code": "    def extract_url(self, line):\n        \"\"\"Extract the generated url from the log line.\"\"\"\n        pass\n"
        },
        {
            "id": "chunk_3_extract_year_month_1",
            "code": "    def extract_year_month(self, line):\n        \"\"\"Return the year and month portions of the timestamp.\"\"\"\n        pass\n"
        },
        {
            "id": "chunk_4_mapper_1",
            "code": "    def mapper(self, _, line):\n        \"\"\"Parse each log line, extract and transform relevant lines.\n\n        Emit key value pairs of the form:\n\n        (2016-01, url0), 1\n        (2016-01, url0), 1\n        (2016-01, url1), 1\n        \"\"\"\n"
        },
        {
            "id": "chunk_4_mapper_2",
            "code": "        url = self.extract_url(line)\n        period = self.extract_year_month(line)\n        yield (period, url), 1\n"
        },
        {
            "id": "chunk_5_reducer_1",
            "code": "    def reducer(self, key, values):\n"
        },
        {
            "id": "chunk_5_reducer_2",
            "code": "        \"\"\"Sum values for each key.\n\n        (2016-01, url0), 2\n        (2016-01, url1), 1\n        \"\"\"\n"
        },
        {
            "id": "chunk_5_reducer_3",
            "code": "        yield key, sum(values)\n"
        },
        {
            "id": "chunk_6_steps_1",
            "code": "    def steps(self):\n        \"\"\"Run the map and reduce steps.\"\"\"\n"
        },
        {
            "id": "chunk_6_steps_2",
            "code": "        return [\n            self.mr(mapper=self.mapper,\n                    reducer=self.reducer)\n        ]\n"
        },
        {
            "id": "chunk_7_GlobalBlock_1",
            "code": "if __name__ == '__main__':\n    HitCounts.run()\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_1_HitCounts_1",
            "to": "chunk_1_HitCounts_2"
        },
        {
            "from": "chunk_1_HitCounts_1",
            "to": "chunk_1_HitCounts_3"
        },
        {
            "from": "chunk_1_HitCounts_1",
            "to": "chunk_1_HitCounts_4"
        },
        {
            "from": "chunk_1_HitCounts_1",
            "to": "chunk_1_HitCounts_6"
        },
        {
            "from": "chunk_1_HitCounts_1",
            "to": "chunk_1_HitCounts_8"
        },
        {
            "from": "chunk_1_HitCounts_4",
            "to": "chunk_1_HitCounts_5"
        },
        {
            "from": "chunk_1_HitCounts_6",
            "to": "chunk_1_HitCounts_7"
        },
        {
            "from": "chunk_4_mapper_1",
            "to": "chunk_4_mapper_2"
        },
        {
            "from": "chunk_5_reducer_1",
            "to": "chunk_5_reducer_2"
        },
        {
            "from": "chunk_5_reducer_2",
            "to": "chunk_5_reducer_3"
        },
        {
            "from": "chunk_6_steps_1",
            "to": "chunk_6_steps_2"
        }
    ]
}