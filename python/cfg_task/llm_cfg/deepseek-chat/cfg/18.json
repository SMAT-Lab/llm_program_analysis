{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "\"\"\"\nGraph Coloring also called \"m coloring problem\"\nconsists of coloring a given graph with at most m colors\nsuch that no adjacent vertices are assigned the same color\n\nWikipedia: https://en.wikipedia.org/wiki/Graph_coloring\n\"\"\"\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "\n\n\n"
        },
        {
            "id": "chunk_1_valid_coloring_1",
            "code": "def valid_coloring(\n    neighbours: list[int], colored_vertices: list[int], color: int\n) -> bool:\n"
        },
        {
            "id": "chunk_1_valid_coloring_2",
            "code": "    \"\"\"\n    For each neighbour check if the coloring constraint is satisfied\n    If any of the neighbours fail the constraint return False\n    If all neighbours validate the constraint return True\n\n    >>> neighbours = [0,1,0,1,0]\n    >>> colored_vertices = [0, 2, 1, 2, 0]\n\n    >>> color = 1\n    >>> valid_coloring(neighbours, colored_vertices, color)\n    True\n\n    >>> color = 2\n    >>> valid_coloring(neighbours, colored_vertices, color)\n    False\n    \"\"\"\n"
        },
        {
            "id": "chunk_1_valid_coloring_3",
            "code": "    # Does any neighbour not satisfy the constraints\n    return not any(\n        neighbour == 1 and colored_vertices[i] == color\n        for i, neighbour in enumerate(neighbours)\n    )\n"
        },
        {
            "id": "chunk_2_util_color_1",
            "code": "def util_color(\n    graph: list[list[int]], max_colors: int, colored_vertices: list[int], index: int\n) -> bool:\n"
        },
        {
            "id": "chunk_2_util_color_2",
            "code": "    \"\"\"\n    Pseudo-Code\n\n    Base Case:\n    1. Check if coloring is complete\n        1.1 If complete return True (meaning that we successfully colored the graph)\n\n    Recursive Step:\n    2. Iterates over each color:\n        Check if the current coloring is valid:\n            2.1. Color given vertex\n            2.2. Do recursive call, check if this coloring leads to a solution\n            2.4. if current coloring leads to a solution return\n            2.5. Uncolor given vertex\n\n    >>> graph = [[0, 1, 0, 0, 0],\n    ...          [1, 0, 1, 0, 1],\n    ...          [0, 1, 0, 1, 0],\n    ...          [0, 1, 1, 0, 0],\n    ...          [0, 1, 0, 0, 0]]\n    >>> max_colors = 3\n    >>> colored_vertices = [0, 1, 0, 0, 0]\n    >>> index = 3\n\n    >>> util_color(graph, max_colors, colored_vertices, index)\n    True\n\n    >>> max_colors = 2\n    >>> util_color(graph, max_colors, colored_vertices, index)\n    False\n    \"\"\"\n"
        },
        {
            "id": "chunk_2_util_color_3",
            "code": "    # Base Case\n    if index == len(graph):\n        return True\n"
        },
        {
            "id": "chunk_2_util_color_4",
            "code": "    # Recursive Step\n    for i in range(max_colors):\n"
        },
        {
            "id": "chunk_2_util_color_5",
            "code": "        if valid_coloring(graph[index], colored_vertices, i):\n            # Color current vertex\n            colored_vertices[index] = i\n"
        },
        {
            "id": "chunk_2_util_color_6",
            "code": "            # Validate coloring\n            if util_color(graph, max_colors, colored_vertices, index + 1):\n                return True\n"
        },
        {
            "id": "chunk_2_util_color_7",
            "code": "            # Backtrack\n            colored_vertices[index] = -1\n"
        },
        {
            "id": "chunk_2_util_color_8",
            "code": "    return False\n"
        },
        {
            "id": "chunk_3_color_1",
            "code": "def color(graph: list[list[int]], max_colors: int) -> list[int]:\n    \"\"\"\n    Wrapper function to call subroutine called util_color\n    which will either return True or False.\n    If True is returned colored_vertices list is filled with correct colorings\n\n    >>> graph = [[0, 1, 0, 0, 0],\n    ...          [1, 0, 1, 0, 1],\n    ...          [0, 1, 0, 1, 0],\n    ...          [0, 1, 1, 0, 0],\n    ...          [0, 1, 0, 0, 0]]\n\n    >>> max_colors = 3\n    >>> color(graph, max_colors)\n    [0, 1, 0, 2, 0]\n\n    >>> max_colors = 2\n    >>> color(graph, max_colors)\n    []\n    \"\"\"\n"
        },
        {
            "id": "chunk_3_color_2",
            "code": "    colored_vertices = [-1] * len(graph)\n"
        },
        {
            "id": "chunk_3_color_3",
            "code": "    if util_color(graph, max_colors, colored_vertices, 0):\n        return colored_vertices\n"
        },
        {
            "id": "chunk_3_color_4",
            "code": "    return []\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_1_valid_coloring_1",
            "to": "chunk_1_valid_coloring_2"
        },
        {
            "from": "chunk_1_valid_coloring_2",
            "to": "chunk_1_valid_coloring_3"
        },
        {
            "from": "chunk_2_util_color_1",
            "to": "chunk_2_util_color_2"
        },
        {
            "from": "chunk_2_util_color_2",
            "to": "chunk_2_util_color_3"
        },
        {
            "from": "chunk_2_util_color_3",
            "to": "chunk_2_util_color_4"
        },
        {
            "from": "chunk_2_util_color_3",
            "to": "chunk_2_util_color_8"
        },
        {
            "from": "chunk_2_util_color_4",
            "to": "chunk_2_util_color_5"
        },
        {
            "from": "chunk_2_util_color_5",
            "to": "chunk_2_util_color_6"
        },
        {
            "from": "chunk_2_util_color_5",
            "to": "chunk_2_util_color_7"
        },
        {
            "from": "chunk_2_util_color_6",
            "to": "chunk_2_util_color_8"
        },
        {
            "from": "chunk_2_util_color_7",
            "to": "chunk_2_util_color_4"
        },
        {
            "from": "chunk_3_color_1",
            "to": "chunk_3_color_2"
        },
        {
            "from": "chunk_3_color_2",
            "to": "chunk_3_color_3"
        },
        {
            "from": "chunk_3_color_3",
            "to": "chunk_3_color_4"
        }
    ]
}