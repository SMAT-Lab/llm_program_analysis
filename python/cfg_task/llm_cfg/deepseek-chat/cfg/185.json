{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "\"\"\"\nIn this problem, we want to determine all possible combinations of k\nnumbers out of 1 ... n. We use backtracking to solve this problem.\n\nTime complexity: O(C(n,k)) which is O(n choose k) = O((n!/(k! * (n - k)!))),\n\"\"\"\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "from __future__ import annotations\n"
        },
        {
            "id": "chunk_0_GlobalBlock_3",
            "code": "from itertools import combinations\n"
        },
        {
            "id": "chunk_0_GlobalBlock_4",
            "code": "\n\n"
        },
        {
            "id": "chunk_1_combination_lists_1",
            "code": "def combination_lists(n: int, k: int) -> list[list[int]]:\n"
        },
        {
            "id": "chunk_1_combination_lists_2",
            "code": "    \"\"\"\n    >>> combination_lists(n=4, k=2)\n    [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]\n    \"\"\"\n"
        },
        {
            "id": "chunk_1_combination_lists_3",
            "code": "    return [list(x) for x in combinations(range(1, n + 1), k)]\n"
        },
        {
            "id": "chunk_2_generate_all_combinations_1",
            "code": "def generate_all_combinations(n: int, k: int) -> list[list[int]]:\n    \"\"\"\n    >>> generate_all_combinations(n=4, k=2)\n    [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]\n    >>> generate_all_combinations(n=0, k=0)\n    [[]]\n    >>> generate_all_combinations(n=10, k=-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: k must not be negative\n    >>> generate_all_combinations(n=-1, k=10)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must not be negative\n    >>> generate_all_combinations(n=5, k=4)\n    [[1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 4, 5], [1, 3, 4, 5], [2, 3, 4, 5]]\n    >>> from itertools import combinations\n    >>> all(generate_all_combinations(n, k) == combination_lists(n, k)\n    ...     for n in range(1, 6) for k in range(1, 6))\n    True\n    \"\"\"\n"
        },
        {
            "id": "chunk_2_generate_all_combinations_2",
            "code": "    if k < 0:\n        raise ValueError(\"k must not be negative\")\n"
        },
        {
            "id": "chunk_2_generate_all_combinations_3",
            "code": "    if n < 0:\n        raise ValueError(\"n must not be negative\")\n"
        },
        {
            "id": "chunk_2_generate_all_combinations_4",
            "code": "    result: list[list[int]] = []\n    create_all_state(1, n, k, [], result)\n    return result\n"
        },
        {
            "id": "chunk_3_create_all_state_1",
            "code": "def create_all_state(\n    increment: int,\n    total_number: int,\n    level: int,\n    current_list: list[int],\n    total_list: list[list[int]],\n) -> None:\n"
        },
        {
            "id": "chunk_3_create_all_state_2",
            "code": "    if level == 0:\n        total_list.append(current_list[:])\n        return\n"
        },
        {
            "id": "chunk_3_create_all_state_3",
            "code": "    for i in range(increment, total_number - level + 2):\n        current_list.append(i)\n        create_all_state(i + 1, total_number, level - 1, current_list, total_list)\n        current_list.pop()\n"
        },
        {
            "id": "chunk_4_GlobalBlock_1",
            "code": "if __name__ == \"__main__\":\n"
        },
        {
            "id": "chunk_4_GlobalBlock_2",
            "code": "    from doctest import testmod\n\n    testmod()\n"
        },
        {
            "id": "chunk_4_GlobalBlock_3",
            "code": "    print(generate_all_combinations(n=4, k=2))\n"
        },
        {
            "id": "chunk_4_GlobalBlock_4",
            "code": "    tests = ((n, k) for n in range(1, 5) for k in range(1, 5))\n"
        },
        {
            "id": "chunk_4_GlobalBlock_5",
            "code": "    for n, k in tests:\n        print(n, k, generate_all_combinations(n, k) == combination_lists(n, k))\n"
        },
        {
            "id": "chunk_4_GlobalBlock_6",
            "code": "    print(\"Benchmark:\")\n"
        },
        {
            "id": "chunk_4_GlobalBlock_7",
            "code": "    from timeit import timeit\n"
        },
        {
            "id": "chunk_4_GlobalBlock_8",
            "code": "    for func in (\"combination_lists\", \"generate_all_combinations\"):\n        print(f\"{func:>25}(): {timeit(f'{func}(n=4, k = 2)', globals=globals())}\")\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_0_GlobalBlock_2",
            "to": "chunk_0_GlobalBlock_3"
        },
        {
            "from": "chunk_0_GlobalBlock_3",
            "to": "chunk_0_GlobalBlock_4"
        },
        {
            "from": "chunk_1_combination_lists_1",
            "to": "chunk_1_combination_lists_2"
        },
        {
            "from": "chunk_1_combination_lists_2",
            "to": "chunk_1_combination_lists_3"
        },
        {
            "from": "chunk_2_generate_all_combinations_1",
            "to": "chunk_2_generate_all_combinations_2"
        },
        {
            "from": "chunk_2_generate_all_combinations_2",
            "to": "chunk_2_generate_all_combinations_3"
        },
        {
            "from": "chunk_2_generate_all_combinations_3",
            "to": "chunk_2_generate_all_combinations_4"
        },
        {
            "from": "chunk_3_create_all_state_1",
            "to": "chunk_3_create_all_state_2"
        },
        {
            "from": "chunk_3_create_all_state_2",
            "to": "chunk_3_create_all_state_3"
        },
        {
            "from": "chunk_3_create_all_state_3",
            "to": "chunk_3_create_all_state_2"
        },
        {
            "from": "chunk_3_create_all_state_3",
            "to": "chunk_3_create_all_state_3"
        },
        {
            "from": "chunk_4_GlobalBlock_1",
            "to": "chunk_4_GlobalBlock_2"
        },
        {
            "from": "chunk_4_GlobalBlock_2",
            "to": "chunk_4_GlobalBlock_3"
        },
        {
            "from": "chunk_4_GlobalBlock_3",
            "to": "chunk_4_GlobalBlock_4"
        },
        {
            "from": "chunk_4_GlobalBlock_4",
            "to": "chunk_4_GlobalBlock_5"
        },
        {
            "from": "chunk_4_GlobalBlock_5",
            "to": "chunk_4_GlobalBlock_6"
        },
        {
            "from": "chunk_4_GlobalBlock_6",
            "to": "chunk_4_GlobalBlock_7"
        },
        {
            "from": "chunk_4_GlobalBlock_7",
            "to": "chunk_4_GlobalBlock_8"
        }
    ]
}