{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "# https://www.tutorialspoint.com/python3/bitwise_operators_example.htm\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "\n\n\n"
        },
        {
            "id": "chunk_1_binary_or_1",
            "code": "def binary_or(a: int, b: int) -> str:\n    \"\"\"\n    Take in 2 integers, convert them to binary, and return a binary number that is the\n    result of a binary or operation on the integers provided.\n\n    >>> binary_or(25, 32)\n    '0b111001'\n    >>> binary_or(37, 50)\n    '0b110111'\n    >>> binary_or(21, 30)\n    '0b11111'\n    >>> binary_or(58, 73)\n    '0b1111011'\n    >>> binary_or(0, 255)\n    '0b11111111'\n    >>> binary_or(0, 256)\n    '0b100000000'\n    >>> binary_or(0, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: the value of both inputs must be positive\n    >>> binary_or(0, 1.1)\n    Traceback (most recent call last):\n        ...\n    TypeError: 'float' object cannot be interpreted as an integer\n    >>> binary_or(\"0\", \"1\")\n    Traceback (most recent call last):\n        ...\n    TypeError: '<' not supported between instances of 'str' and 'int'\n    \"\"\"\n"
        },
        {
            "id": "chunk_1_binary_or_2",
            "code": "    if a < 0 or b < 0:\n        raise ValueError(\"the value of both inputs must be positive\")\n"
        },
        {
            "id": "chunk_1_binary_or_3",
            "code": "    a_binary = str(bin(a))[2:]  # remove the leading \"0b\"\n    b_binary = str(bin(b))[2:]\n"
        },
        {
            "id": "chunk_1_binary_or_4",
            "code": "    max_len = max(len(a_binary), len(b_binary))\n    return \"0b\" + \"\".join(\n        str(int(\"1\" in (char_a, char_b)))\n        for char_a, char_b in zip(a_binary.zfill(max_len), b_binary.zfill(max_len))\n    )\n"
        },
        {
            "id": "chunk_2_GlobalBlock_1",
            "code": "\n\n\n"
        },
        {
            "id": "chunk_3___main___1",
            "code": "if __name__ == \"__main__\":\n"
        },
        {
            "id": "chunk_3___main___2",
            "code": "    import doctest\n\n    doctest.testmod()\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_1_binary_or_1",
            "to": "chunk_1_binary_or_2"
        },
        {
            "from": "chunk_1_binary_or_2",
            "to": "chunk_1_binary_or_3"
        },
        {
            "from": "chunk_1_binary_or_2",
            "to": "chunk_1_binary_or_4"
        },
        {
            "from": "chunk_1_binary_or_3",
            "to": "chunk_1_binary_or_4"
        },
        {
            "from": "chunk_3___main___1",
            "to": "chunk_3___main___2"
        }
    ]
}