{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "import logging\nfrom typing import Optional, cast\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "from autogpt_libs.auth.models import DEFAULT_USER_ID\nfrom fastapi import HTTPException\nfrom prisma import Json\nfrom prisma.models import User\n"
        },
        {
            "id": "chunk_0_GlobalBlock_3",
            "code": "from backend.data.db import prisma\nfrom backend.data.model import UserIntegrations, UserMetadata, UserMetadataRaw\nfrom backend.util.encryption import JSONCryptor\n"
        },
        {
            "id": "chunk_0_GlobalBlock_4",
            "code": "logger = logging.getLogger(__name__)\n"
        },
        {
            "id": "chunk_1_get_or_create_user_1",
            "code": "async def get_or_create_user(user_data: dict) -> User:\n    user_id = user_data.get(\"sub\")\n"
        },
        {
            "id": "chunk_1_get_or_create_user_2",
            "code": "    if not user_id:\n        raise HTTPException(status_code=401, detail=\"User ID not found in token\")\n"
        },
        {
            "id": "chunk_1_get_or_create_user_3",
            "code": "    user_email = user_data.get(\"email\")\n"
        },
        {
            "id": "chunk_1_get_or_create_user_4",
            "code": "    if not user_email:\n        raise HTTPException(status_code=401, detail=\"Email not found in token\")\n"
        },
        {
            "id": "chunk_1_get_or_create_user_5",
            "code": "    user = await prisma.user.find_unique(where={\"id\": user_id})\n"
        },
        {
            "id": "chunk_1_get_or_create_user_6",
            "code": "    if not user:\n        user = await prisma.user.create(\n            data={\n                \"id\": user_id,\n                \"email\": user_email,\n                \"name\": user_data.get(\"user_metadata\", {}).get(\"name\"),\n            }\n        )\n"
        },
        {
            "id": "chunk_1_get_or_create_user_7",
            "code": "    return User.model_validate(user)\n"
        },
        {
            "id": "chunk_2_get_user_by_id_1",
            "code": "async def get_user_by_id(user_id: str) -> Optional[User]:\n"
        },
        {
            "id": "chunk_2_get_user_by_id_2",
            "code": "    user = await prisma.user.find_unique(where={\"id\": user_id})\n    return User.model_validate(user) if user else None\n"
        },
        {
            "id": "chunk_3_create_default_user_1",
            "code": "async def create_default_user() -> Optional[User]:\n    user = await prisma.user.find_unique(where={\"id\": DEFAULT_USER_ID})\n"
        },
        {
            "id": "chunk_3_create_default_user_2",
            "code": "    if not user:\n"
        },
        {
            "id": "chunk_3_create_default_user_3",
            "code": "        user = await prisma.user.create(\n            data={\n                \"id\": DEFAULT_USER_ID,\n                \"email\": \"default@example.com\",\n                \"name\": \"Default User\",\n            }\n        )\n"
        },
        {
            "id": "chunk_3_create_default_user_4",
            "code": "    return User.model_validate(user)\n"
        },
        {
            "id": "chunk_4_get_user_metadata_1",
            "code": "async def get_user_metadata(user_id: str) -> UserMetadata:\n    user = await User.prisma().find_unique_or_raise(\n        where={\"id\": user_id},\n    )\n"
        },
        {
            "id": "chunk_4_get_user_metadata_2",
            "code": "    metadata = cast(UserMetadataRaw, user.metadata)\n    return UserMetadata.model_validate(metadata)\n"
        },
        {
            "id": "chunk_5_update_user_metadata_1",
            "code": "async def update_user_metadata(user_id: str, metadata: UserMetadata):\n    await User.prisma().update(\n        where={\"id\": user_id},\n        data={\"metadata\": Json(metadata.model_dump())},\n    )\n"
        },
        {
            "id": "chunk_6_get_user_integrations_1",
            "code": "async def get_user_integrations(user_id: str) -> UserIntegrations:\n    user = await User.prisma().find_unique_or_raise(\n        where={\"id\": user_id},\n    )\n"
        },
        {
            "id": "chunk_6_get_user_integrations_2",
            "code": "    encrypted_integrations = user.integrations\n"
        },
        {
            "id": "chunk_6_get_user_integrations_3",
            "code": "    if not encrypted_integrations:\n        return UserIntegrations()\n"
        },
        {
            "id": "chunk_6_get_user_integrations_4",
            "code": "    else:\n        return UserIntegrations.model_validate(\n            JSONCryptor().decrypt(encrypted_integrations)\n        )\n"
        },
        {
            "id": "chunk_7_update_user_integrations_1",
            "code": "async def update_user_integrations(user_id: str, data: UserIntegrations):\n"
        },
        {
            "id": "chunk_7_update_user_integrations_2",
            "code": "    encrypted_data = JSONCryptor().encrypt(data.model_dump())\n"
        },
        {
            "id": "chunk_7_update_user_integrations_3",
            "code": "    await User.prisma().update(\n        where={\"id\": user_id},\n        data={\"integrations\": encrypted_data},\n    )\n"
        },
        {
            "id": "chunk_8_migrate_and_encrypt_user_integrations_1",
            "code": "async def migrate_and_encrypt_user_integrations():\n    \"\"\"Migrate integration credentials and OAuth states from metadata to integrations column.\"\"\"\n"
        },
        {
            "id": "chunk_8_migrate_and_encrypt_user_integrations_2",
            "code": "    users = await User.prisma().find_many(\n        where={\n            \"metadata\": {\n                \"path\": [\"integration_credentials\"],\n                \"not\": Json({\"a\": \"yolo\"}),  # bogus value works to check if key exists\n            }  # type: ignore\n        }\n    )\n"
        },
        {
            "id": "chunk_8_migrate_and_encrypt_user_integrations_3",
            "code": "    logger.info(f\"Migrating integration credentials for {len(users)} users\")\n"
        },
        {
            "id": "chunk_8_migrate_and_encrypt_user_integrations_4",
            "code": "    for user in users:\n        raw_metadata = cast(UserMetadataRaw, user.metadata)\n"
        },
        {
            "id": "chunk_8_migrate_and_encrypt_user_integrations_5",
            "code": "        metadata = UserMetadata.model_validate(raw_metadata)\n"
        },
        {
            "id": "chunk_8_migrate_and_encrypt_user_integrations_6",
            "code": "        # Get existing integrations data\n        integrations = await get_user_integrations(user_id=user.id)\n"
        },
        {
            "id": "chunk_8_migrate_and_encrypt_user_integrations_7",
            "code": "        # Copy credentials and oauth states from metadata if they exist\n        if metadata.integration_credentials and not integrations.credentials:\n"
        },
        {
            "id": "chunk_8_migrate_and_encrypt_user_integrations_8",
            "code": "            integrations.credentials = metadata.integration_credentials\n"
        },
        {
            "id": "chunk_8_migrate_and_encrypt_user_integrations_9",
            "code": "        if metadata.integration_oauth_states:\n            integrations.oauth_states = metadata.integration_oauth_states\n"
        },
        {
            "id": "chunk_8_migrate_and_encrypt_user_integrations_10",
            "code": "        # Save to integrations column\n        await update_user_integrations(user_id=user.id, data=integrations)\n"
        },
        {
            "id": "chunk_8_migrate_and_encrypt_user_integrations_11",
            "code": "        # Remove from metadata\n        raw_metadata = dict(raw_metadata)\n        raw_metadata.pop(\"integration_credentials\", None)\n        raw_metadata.pop(\"integration_oauth_states\", None)\n"
        },
        {
            "id": "chunk_8_migrate_and_encrypt_user_integrations_12",
            "code": "        # Update metadata without integration data\n        await User.prisma().update(\n            where={\"id\": user.id},\n            data={\"metadata\": Json(raw_metadata)},\n        )\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_0_GlobalBlock_2",
            "to": "chunk_0_GlobalBlock_3"
        },
        {
            "from": "chunk_0_GlobalBlock_3",
            "to": "chunk_0_GlobalBlock_4"
        },
        {
            "from": "chunk_1_get_or_create_user_1",
            "to": "chunk_1_get_or_create_user_2"
        },
        {
            "from": "chunk_1_get_or_create_user_2",
            "to": "chunk_1_get_or_create_user_3"
        },
        {
            "from": "chunk_1_get_or_create_user_3",
            "to": "chunk_1_get_or_create_user_4"
        },
        {
            "from": "chunk_1_get_or_create_user_4",
            "to": "chunk_1_get_or_create_user_5"
        },
        {
            "from": "chunk_1_get_or_create_user_5",
            "to": "chunk_1_get_or_create_user_6"
        },
        {
            "from": "chunk_1_get_or_create_user_5",
            "to": "chunk_1_get_or_create_user_7"
        },
        {
            "from": "chunk_1_get_or_create_user_6",
            "to": "chunk_1_get_or_create_user_7"
        },
        {
            "from": "chunk_2_get_user_by_id_1",
            "to": "chunk_2_get_user_by_id_2"
        },
        {
            "from": "chunk_3_create_default_user_1",
            "to": "chunk_3_create_default_user_2"
        },
        {
            "from": "chunk_3_create_default_user_2",
            "to": "chunk_3_create_default_user_3"
        },
        {
            "from": "chunk_3_create_default_user_2",
            "to": "chunk_3_create_default_user_4"
        },
        {
            "from": "chunk_3_create_default_user_3",
            "to": "chunk_3_create_default_user_4"
        },
        {
            "from": "chunk_4_get_user_metadata_1",
            "to": "chunk_4_get_user_metadata_2"
        },
        {
            "from": "chunk_6_get_user_integrations_1",
            "to": "chunk_6_get_user_integrations_2"
        },
        {
            "from": "chunk_6_get_user_integrations_2",
            "to": "chunk_6_get_user_integrations_3"
        },
        {
            "from": "chunk_6_get_user_integrations_3",
            "to": "chunk_6_get_user_integrations_4"
        },
        {
            "from": "chunk_7_update_user_integrations_1",
            "to": "chunk_7_update_user_integrations_2"
        },
        {
            "from": "chunk_7_update_user_integrations_2",
            "to": "chunk_7_update_user_integrations_3"
        },
        {
            "from": "chunk_8_migrate_and_encrypt_user_integrations_1",
            "to": "chunk_8_migrate_and_encrypt_user_integrations_2"
        },
        {
            "from": "chunk_8_migrate_and_encrypt_user_integrations_2",
            "to": "chunk_8_migrate_and_encrypt_user_integrations_3"
        },
        {
            "from": "chunk_8_migrate_and_encrypt_user_integrations_3",
            "to": "chunk_8_migrate_and_encrypt_user_integrations_4"
        },
        {
            "from": "chunk_8_migrate_and_encrypt_user_integrations_4",
            "to": "chunk_8_migrate_and_encrypt_user_integrations_5"
        },
        {
            "from": "chunk_8_migrate_and_encrypt_user_integrations_5",
            "to": "chunk_8_migrate_and_encrypt_user_integrations_6"
        },
        {
            "from": "chunk_8_migrate_and_encrypt_user_integrations_6",
            "to": "chunk_8_migrate_and_encrypt_user_integrations_7"
        },
        {
            "from": "chunk_8_migrate_and_encrypt_user_integrations_7",
            "to": "chunk_8_migrate_and_encrypt_user_integrations_8"
        },
        {
            "from": "chunk_8_migrate_and_encrypt_user_integrations_7",
            "to": "chunk_8_migrate_and_encrypt_user_integrations_9"
        },
        {
            "from": "chunk_8_migrate_and_encrypt_user_integrations_8",
            "to": "chunk_8_migrate_and_encrypt_user_integrations_9"
        },
        {
            "from": "chunk_8_migrate_and_encrypt_user_integrations_9",
            "to": "chunk_8_migrate_and_encrypt_user_integrations_10"
        },
        {
            "from": "chunk_8_migrate_and_encrypt_user_integrations_10",
            "to": "chunk_8_migrate_and_encrypt_user_integrations_11"
        },
        {
            "from": "chunk_8_migrate_and_encrypt_user_integrations_11",
            "to": "chunk_8_migrate_and_encrypt_user_integrations_12"
        },
        {
            "from": "chunk_8_migrate_and_encrypt_user_integrations_12",
            "to": "chunk_8_migrate_and_encrypt_user_integrations_4"
        }
    ]
}