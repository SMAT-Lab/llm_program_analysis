{
    "nodes": [
        {
            "id": "chunk_0_Docstring_1",
            "code": "\"\"\"\nMinimax helps to achieve maximum score in a game by checking all possible moves\ndepth is current depth in game tree.\n\nnodeIndex is index of current node in scores[].\nif move is of maximizer return true else false\nleaves of game tree is stored in scores[]\nheight is maximum height of Game tree\n\"\"\"\n"
        },
        {
            "id": "chunk_1_ImportStatements_1",
            "code": "from __future__ import annotations\n"
        },
        {
            "id": "chunk_1_ImportStatements_2",
            "code": "import math\n"
        },
        {
            "id": "chunk_2_Function_minimax_1",
            "code": "def minimax(\n    depth: int, node_index: int, is_max: bool, scores: list[int], height: float\n) -> int:\n"
        },
        {
            "id": "chunk_2_Function_minimax_2",
            "code": "    \"\"\"\n    This function implements the minimax algorithm, which helps achieve the optimal\n    score for a player in a two-player game by checking all possible moves.\n    If the player is the maximizer, then the score is maximized.\n    If the player is the minimizer, then the score is minimized.\n\n    Parameters:\n    - depth: Current depth in the game tree.\n    - node_index: Index of the current node in the scores list.\n    - is_max: A boolean indicating whether the current move\n              is for the maximizer (True) or minimizer (False).\n    - scores: A list containing the scores of the leaves of the game tree.\n    - height: The maximum height of the game tree.\n\n    Returns:\n    - An integer representing the optimal score for the current player.\n\n    >>> import math\n    >>> scores = [90, 23, 6, 33, 21, 65, 123, 34423]\n    >>> height = math.log(len(scores), 2)\n    >>> minimax(0, 0, True, scores, height)\n    65\n    >>> minimax(-1, 0, True, scores, height)\n    Traceback (most recent call last):\n        ...\n    ValueError: Depth cannot be less than 0\n    >>> minimax(0, 0, True, [], 2)\n    Traceback (most recent call last):\n        ...\n    ValueError: Scores cannot be empty\n    >>> scores = [3, 5, 2, 9, 12, 5, 23, 23]\n    >>> height = math.log(len(scores), 2)\n    >>> minimax(0, 0, True, scores, height)\n    12\n    \"\"\"\n"
        },
        {
            "id": "chunk_2_Function_minimax_3",
            "code": "\n"
        },
        {
            "id": "chunk_2_Function_minimax_4",
            "code": "    if depth < 0:\n        raise ValueError(\"Depth cannot be less than 0\")\n"
        },
        {
            "id": "chunk_2_Function_minimax_5",
            "code": "    if len(scores) == 0:\n        raise ValueError(\"Scores cannot be empty\")\n"
        },
        {
            "id": "chunk_2_Function_minimax_6",
            "code": "\n"
        },
        {
            "id": "chunk_2_Function_minimax_7",
            "code": "    # Base case: If the current depth equals the height of the tree,\n    # return the score of the current node.\n    if depth == height:\n        return scores[node_index]\n"
        },
        {
            "id": "chunk_2_Function_minimax_8",
            "code": "\n"
        },
        {
            "id": "chunk_2_Function_minimax_9",
            "code": "    # If it's the maximizer's turn, choose the maximum score\n    # between the two possible moves.\n    if is_max:\n        return max(\n            minimax(depth + 1, node_index * 2, False, scores, height),\n            minimax(depth + 1, node_index * 2 + 1, False, scores, height),\n        )\n"
        },
        {
            "id": "chunk_2_Function_minimax_10",
            "code": "\n"
        },
        {
            "id": "chunk_2_Function_minimax_11",
            "code": "    # If it's the minimizer's turn, choose the minimum score\n    # between the two possible moves.\n    return min(\n        minimax(depth + 1, node_index * 2, True, scores, height),\n        minimax(depth + 1, node_index * 2 + 1, True, scores, height),\n    )\n"
        },
        {
            "id": "chunk_2_Function_minimax_12",
            "code": "\n"
        },
        {
            "id": "chunk_3_Function_main_1",
            "code": "def main() -> None:\n"
        },
        {
            "id": "chunk_3_Function_main_2",
            "code": "    # Sample scores and height calculation\n    scores = [90, 23, 6, 33, 21, 65, 123, 34423]\n    height = math.log(len(scores), 2)\n"
        },
        {
            "id": "chunk_3_Function_main_3",
            "code": "    # Calculate and print the optimal value using the minimax algorithm\n    print(\"Optimal value : \", end=\"\")\n    print(minimax(0, 0, True, scores, height))\n"
        },
        {
            "id": "chunk_4_MainBlock_1",
            "code": "if __name__ == \"__main__\":\n"
        },
        {
            "id": "chunk_4_MainBlock_2",
            "code": "    import doctest\n\n    doctest.testmod()\n"
        },
        {
            "id": "chunk_4_MainBlock_3",
            "code": "    main()\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_1_ImportStatements_1",
            "to": "chunk_1_ImportStatements_2"
        },
        {
            "from": "chunk_2_Function_minimax_1",
            "to": "chunk_2_Function_minimax_2"
        },
        {
            "from": "chunk_2_Function_minimax_2",
            "to": "chunk_2_Function_minimax_3"
        },
        {
            "from": "chunk_2_Function_minimax_3",
            "to": "chunk_2_Function_minimax_4"
        },
        {
            "from": "chunk_2_Function_minimax_4",
            "to": "chunk_2_Function_minimax_5"
        },
        {
            "from": "chunk_2_Function_minimax_5",
            "to": "chunk_2_Function_minimax_6"
        },
        {
            "from": "chunk_2_Function_minimax_6",
            "to": "chunk_2_Function_minimax_7"
        },
        {
            "from": "chunk_2_Function_minimax_7",
            "to": "chunk_2_Function_minimax_8"
        },
        {
            "from": "chunk_2_Function_minimax_7",
            "to": "chunk_2_Function_minimax_9"
        },
        {
            "from": "chunk_2_Function_minimax_8",
            "to": "chunk_2_Function_minimax_12"
        },
        {
            "from": "chunk_2_Function_minimax_9",
            "to": "chunk_2_Function_minimax_10"
        },
        {
            "from": "chunk_2_Function_minimax_10",
            "to": "chunk_2_Function_minimax_11"
        },
        {
            "from": "chunk_2_Function_minimax_11",
            "to": "chunk_2_Function_minimax_12"
        },
        {
            "from": "chunk_3_Function_main_1",
            "to": "chunk_3_Function_main_2"
        },
        {
            "from": "chunk_3_Function_main_2",
            "to": "chunk_3_Function_main_3"
        },
        {
            "from": "chunk_4_MainBlock_1",
            "to": "chunk_4_MainBlock_2"
        },
        {
            "from": "chunk_4_MainBlock_2",
            "to": "chunk_4_MainBlock_3"
        }
    ]
}