{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "import time\nfrom datetime import datetime, timedelta\nfrom typing import Any, Union\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n"
        },
        {
            "id": "chunk_1_GetCurrentTimeBlock_1",
            "code": "class GetCurrentTimeBlock(Block):\n"
        },
        {
            "id": "chunk_1_GetCurrentTimeBlock_2",
            "code": "    class Input(BlockSchema):\n        trigger: str = SchemaField(\n            description=\"Trigger any data to output the current time\"\n        )\n        format: str = SchemaField(\n            description=\"Format of the time to output\", default=\"%H:%M:%S\"\n        )\n"
        },
        {
            "id": "chunk_1_GetCurrentTimeBlock_3",
            "code": "    class Output(BlockSchema):\n        time: str = SchemaField(\n            description=\"Current time in the specified format (default: %H:%M:%S)\"\n        )\n"
        },
        {
            "id": "chunk_1_GetCurrentTimeBlock_4",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"a892b8d9-3e4e-4e9c-9c1e-75f8efcf1bfa\",\n            description=\"This block outputs the current time.\",\n            categories={BlockCategory.TEXT},\n            input_schema=GetCurrentTimeBlock.Input,\n            output_schema=GetCurrentTimeBlock.Output,\n            test_input=[\n                {\"trigger\": \"Hello\"},\n                {\"trigger\": \"Hello\", \"format\": \"%H:%M\"},\n            ],\n            test_output=[\n                (\"time\", lambda _: time.strftime(\"%H:%M:%S\")),\n                (\"time\", lambda _: time.strftime(\"%H:%M\")),\n            ],\n        )\n"
        },
        {
            "id": "chunk_1_GetCurrentTimeBlock_5",
            "code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        current_time = time.strftime(input_data.format)\n        yield \"time\", current_time\n"
        },
        {
            "id": "chunk_2_GetCurrentDateBlock_1",
            "code": "class GetCurrentDateBlock(Block):\n"
        },
        {
            "id": "chunk_2_GetCurrentDateBlock_2",
            "code": "    class Input(BlockSchema):\n        trigger: str = SchemaField(\n            description=\"Trigger any data to output the current date\"\n        )\n        offset: Union[int, str] = SchemaField(\n            title=\"Days Offset\",\n            description=\"Offset in days from the current date\",\n            default=0,\n        )\n        format: str = SchemaField(\n            description=\"Format of the date to output\", default=\"%Y-%m-%d\"\n        )\n"
        },
        {
            "id": "chunk_2_GetCurrentDateBlock_3",
            "code": "    class Output(BlockSchema):\n        date: str = SchemaField(\n            description=\"Current date in the specified format (default: YYYY-MM-DD)\"\n        )\n"
        },
        {
            "id": "chunk_2_GetCurrentDateBlock_4",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"b29c1b50-5d0e-4d9f-8f9d-1b0e6fcbf0b1\",\n            description=\"This block outputs the current date with an optional offset.\",\n            categories={BlockCategory.TEXT},\n            input_schema=GetCurrentDateBlock.Input,\n            output_schema=GetCurrentDateBlock.Output,\n            test_input=[\n                {\"trigger\": \"Hello\", \"offset\": \"7\"},\n                {\"trigger\": \"Hello\", \"offset\": \"7\", \"format\": \"%m/%d/%Y\"},\n            ],\n            test_output=[\n                (\n                    \"date\",\n                    lambda t: abs(datetime.now() - datetime.strptime(t, \"%Y-%m-%d\"))\n                    < timedelta(days=8),  # 7 days difference + 1 day error margin.\n                ),\n                (\n                    \"date\",\n                    lambda t: abs(datetime.now() - datetime.strptime(t, \"%m/%d/%Y\"))\n                    < timedelta(days=8),\n                    # 7 days difference + 1 day error margin.\n                ),\n            ],\n        )\n"
        },
        {
            "id": "chunk_2_GetCurrentDateBlock_5",
            "code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        try:\n            offset = int(input_data.offset)\n        except ValueError:\n            offset = 0\n        current_date = datetime.now() - timedelta(days=offset)\n        yield \"date\", current_date.strftime(input_data.format)\n"
        },
        {
            "id": "chunk_3_GetCurrentDateAndTimeBlock_1",
            "code": "class GetCurrentDateAndTimeBlock(Block):\n"
        },
        {
            "id": "chunk_3_GetCurrentDateAndTimeBlock_2",
            "code": "    class Input(BlockSchema):\n        trigger: str = SchemaField(\n            description=\"Trigger any data to output the current date and time\"\n        )\n        format: str = SchemaField(\n            description=\"Format of the date and time to output\",\n            default=\"%Y-%m-%d %H:%M:%S\",\n        )\n"
        },
        {
            "id": "chunk_3_GetCurrentDateAndTimeBlock_3",
            "code": "    class Output(BlockSchema):\n        date_time: str = SchemaField(\n            description=\"Current date and time in the specified format (default: YYYY-MM-DD HH:MM:SS)\"\n        )\n"
        },
        {
            "id": "chunk_3_GetCurrentDateAndTimeBlock_4",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"716a67b3-6760-42e7-86dc-18645c6e00fc\",\n            description=\"This block outputs the current date and time.\",\n            categories={BlockCategory.TEXT},\n            input_schema=GetCurrentDateAndTimeBlock.Input,\n            output_schema=GetCurrentDateAndTimeBlock.Output,\n            test_input=[\n                {\"trigger\": \"Hello\"},\n            ],\n            test_output=[\n                (\n                    \"date_time\",\n                    lambda t: abs(\n                        datetime.now() - datetime.strptime(t, \"%Y-%m-%d %H:%M:%S\")\n                    )\n                    < timedelta(seconds=10),  # 10 seconds error margin.\n                ),\n            ],\n        )\n"
        },
        {
            "id": "chunk_3_GetCurrentDateAndTimeBlock_5",
            "code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        current_date_time = time.strftime(input_data.format)\n        yield \"date_time\", current_date_time\n"
        },
        {
            "id": "chunk_4_CountdownTimerBlock_1",
            "code": "class CountdownTimerBlock(Block):\n"
        },
        {
            "id": "chunk_4_CountdownTimerBlock_2",
            "code": "    class Input(BlockSchema):\n        input_message: Any = SchemaField(\n            advanced=False,\n            description=\"Message to output after the timer finishes\",\n            default=\"timer finished\",\n        )\n        seconds: Union[int, str] = SchemaField(\n            advanced=False, description=\"Duration in seconds\", default=0\n        )\n        minutes: Union[int, str] = SchemaField(\n            advanced=False, description=\"Duration in minutes\", default=0\n        )\n        hours: Union[int, str] = SchemaField(\n            advanced=False, description=\"Duration in hours\", default=0\n        )\n        days: Union[int, str] = SchemaField(\n            advanced=False, description=\"Duration in days\", default=0\n        )\n"
        },
        {
            "id": "chunk_4_CountdownTimerBlock_3",
            "code": "    class Output(BlockSchema):\n        output_message: Any = SchemaField(\n            description=\"Message after the timer finishes\"\n        )\n"
        },
        {
            "id": "chunk_4_CountdownTimerBlock_4",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"d67a9c52-5e4e-11e2-bcfd-0800200c9a71\",\n            description=\"This block triggers after a specified duration.\",\n            categories={BlockCategory.TEXT},\n            input_schema=CountdownTimerBlock.Input,\n            output_schema=CountdownTimerBlock.Output,\n            test_input=[\n                {\"seconds\": 1},\n                {\"input_message\": \"Custom message\"},\n            ],\n            test_output=[\n                (\"output_message\", \"timer finished\"),\n                (\"output_message\", \"Custom message\"),\n            ],\n        )\n"
        },
        {
            "id": "chunk_4_CountdownTimerBlock_5",
            "code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        seconds = int(input_data.seconds)\n        minutes = int(input_data.minutes)\n        hours = int(input_data.hours)\n        days = int(input_data.days)\n\n        total_seconds = seconds + minutes * 60 + hours * 3600 + days * 86400\n\n        time.sleep(total_seconds)\n        yield \"output_message\", input_data.input_message\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_1_GetCurrentTimeBlock_1",
            "to": "chunk_1_GetCurrentTimeBlock_2"
        },
        {
            "from": "chunk_1_GetCurrentTimeBlock_2",
            "to": "chunk_1_GetCurrentTimeBlock_3"
        },
        {
            "from": "chunk_1_GetCurrentTimeBlock_3",
            "to": "chunk_1_GetCurrentTimeBlock_4"
        },
        {
            "from": "chunk_1_GetCurrentTimeBlock_4",
            "to": "chunk_1_GetCurrentTimeBlock_5"
        },
        {
            "from": "chunk_2_GetCurrentDateBlock_1",
            "to": "chunk_2_GetCurrentDateBlock_2"
        },
        {
            "from": "chunk_2_GetCurrentDateBlock_2",
            "to": "chunk_2_GetCurrentDateBlock_3"
        },
        {
            "from": "chunk_2_GetCurrentDateBlock_3",
            "to": "chunk_2_GetCurrentDateBlock_4"
        },
        {
            "from": "chunk_2_GetCurrentDateBlock_4",
            "to": "chunk_2_GetCurrentDateBlock_5"
        },
        {
            "from": "chunk_3_GetCurrentDateAndTimeBlock_1",
            "to": "chunk_3_GetCurrentDateAndTimeBlock_2"
        },
        {
            "from": "chunk_3_GetCurrentDateAndTimeBlock_2",
            "to": "chunk_3_GetCurrentDateAndTimeBlock_3"
        },
        {
            "from": "chunk_3_GetCurrentDateAndTimeBlock_3",
            "to": "chunk_3_GetCurrentDateAndTimeBlock_4"
        },
        {
            "from": "chunk_3_GetCurrentDateAndTimeBlock_4",
            "to": "chunk_3_GetCurrentDateAndTimeBlock_5"
        },
        {
            "from": "chunk_4_CountdownTimerBlock_1",
            "to": "chunk_4_CountdownTimerBlock_2"
        },
        {
            "from": "chunk_4_CountdownTimerBlock_2",
            "to": "chunk_4_CountdownTimerBlock_3"
        },
        {
            "from": "chunk_4_CountdownTimerBlock_3",
            "to": "chunk_4_CountdownTimerBlock_4"
        },
        {
            "from": "chunk_4_CountdownTimerBlock_4",
            "to": "chunk_4_CountdownTimerBlock_5"
        }
    ]
}