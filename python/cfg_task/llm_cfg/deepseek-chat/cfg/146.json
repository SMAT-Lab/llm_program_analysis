{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "import logging\nimport typing\nimport urllib.parse\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "import autogpt_libs.auth.depends\nimport autogpt_libs.auth.middleware\nimport fastapi\nimport fastapi.responses\n"
        },
        {
            "id": "chunk_0_GlobalBlock_3",
            "code": "import backend.data.graph\nimport backend.server.v2.store.db\nimport backend.server.v2.store.image_gen\nimport backend.server.v2.store.media\nimport backend.server.v2.store.model\n"
        },
        {
            "id": "chunk_0_GlobalBlock_4",
            "code": "logger = logging.getLogger(__name__)\n"
        },
        {
            "id": "chunk_0_GlobalBlock_5",
            "code": "router = fastapi.APIRouter()\n"
        },
        {
            "id": "chunk_0_GlobalBlock_6",
            "code": "##############################################\n############### Profile Endpoints ############\n##############################################\n"
        },
        {
            "id": "chunk_1_get_profile_1",
            "code": "@router.get(\n    \"/profile\",\n    tags=[\"store\", \"private\"],\n    response_model=backend.server.v2.store.model.ProfileDetails,\n)\n"
        },
        {
            "id": "chunk_1_get_profile_2",
            "code": "async def get_profile(\n    user_id: typing.Annotated[\n        str, fastapi.Depends(autogpt_libs.auth.depends.get_user_id)\n    ]\n):\n"
        },
        {
            "id": "chunk_1_get_profile_3",
            "code": "    \"\"\"\n    Get the profile details for the authenticated user.\n    \"\"\"\n"
        },
        {
            "id": "chunk_1_get_profile_4",
            "code": "    try:\n        profile = await backend.server.v2.store.db.get_user_profile(user_id)\n        return profile\n"
        },
        {
            "id": "chunk_1_get_profile_5",
            "code": "    except Exception:\n        logger.exception(\"Exception occurred whilst getting user profile\")\n        return fastapi.responses.JSONResponse(\n            status_code=500,\n            content={\"detail\": \"An error occurred while retrieving the user profile\"},\n        )\n"
        },
        {
            "id": "chunk_2_update_or_create_profile_1",
            "code": "@router.post(\n    \"/profile\",\n    tags=[\"store\", \"private\"],\n    dependencies=[fastapi.Depends(autogpt_libs.auth.middleware.auth_middleware)],\n    response_model=backend.server.v2.store.model.CreatorDetails,\n)\n"
        },
        {
            "id": "chunk_2_update_or_create_profile_2",
            "code": "async def update_or_create_profile(\n    profile: backend.server.v2.store.model.Profile,\n    user_id: typing.Annotated[\n        str, fastapi.Depends(autogpt_libs.auth.depends.get_user_id)\n    ],\n):\n"
        },
        {
            "id": "chunk_2_update_or_create_profile_3",
            "code": "    \"\"\"\n    Update the store profile for the authenticated user.\n\n    Args:\n        profile (Profile): The updated profile details\n        user_id (str): ID of the authenticated user\n\n    Returns:\n        CreatorDetails: The updated profile\n\n    Raises:\n        HTTPException: If there is an error updating the profile\n    \"\"\"\n"
        },
        {
            "id": "chunk_2_update_or_create_profile_4",
            "code": "    try:\n        updated_profile = await backend.server.v2.store.db.update_or_create_profile(\n            user_id=user_id, profile=profile\n        )\n        return updated_profile\n"
        },
        {
            "id": "chunk_2_update_or_create_profile_5",
            "code": "    except Exception:\n        logger.exception(\"Exception occurred whilst updating profile\")\n        return fastapi.responses.JSONResponse(\n            status_code=500,\n            content={\"detail\": \"An error occurred while updating the user profile\"},\n        )\n"
        },
        {
            "id": "chunk_3_get_agents_1",
            "code": "@router.get(\n    \"/agents\",\n    tags=[\"store\", \"public\"],\n    response_model=backend.server.v2.store.model.StoreAgentsResponse,\n)\n"
        },
        {
            "id": "chunk_3_get_agents_2",
            "code": "async def get_agents(\n    featured: bool = False,\n    creator: str | None = None,\n    sorted_by: str | None = None,\n    search_query: str | None = None,\n    category: str | None = None,\n    page: int = 1,\n    page_size: int = 20,\n):\n"
        },
        {
            "id": "chunk_3_get_agents_3",
            "code": "    \"\"\"\n    Get a paginated list of agents from the store with optional filtering and sorting.\n\n    Args:\n        featured (bool, optional): Filter to only show featured agents. Defaults to False.\n        creator (str | None, optional): Filter agents by creator username. Defaults to None.\n        sorted_by (str | None, optional): Sort agents by \"runs\" or \"rating\". Defaults to None.\n        search_query (str | None, optional): Search agents by name, subheading and description. Defaults to None.\n        category (str | None, optional): Filter agents by category. Defaults to None.\n        page (int, optional): Page number for pagination. Defaults to 1.\n        page_size (int, optional): Number of agents per page. Defaults to 20.\n\n    Returns:\n        StoreAgentsResponse: Paginated list of agents matching the filters\n\n    Raises:\n        HTTPException: If page or page_size are less than 1\n\n    Used for:\n    - Home Page Featured Agents\n    - Home Page Top Agents\n    - Search Results\n    - Agent Details - Other Agents By Creator\n    - Agent Details - Similar Agents\n    - Creator Details - Agents By Creator\n    \"\"\"\n"
        },
        {
            "id": "chunk_3_get_agents_4",
            "code": "    if page < 1:\n        raise fastapi.HTTPException(\n            status_code=422, detail=\"Page must be greater than 0\"\n        )\n"
        },
        {
            "id": "chunk_3_get_agents_5",
            "code": "    if page_size < 1:\n        raise fastapi.HTTPException(\n            status_code=422, detail=\"Page size must be greater than 0\"\n        )\n"
        },
        {
            "id": "chunk_3_get_agents_6",
            "code": "    try:\n        agents = await backend.server.v2.store.db.get_store_agents(\n            featured=featured,\n            creator=creator,\n            sorted_by=sorted_by,\n            search_query=search_query,\n            category=category,\n            page=page,\n            page_size=page_size,\n        )\n        return agents\n"
        },
        {
            "id": "chunk_3_get_agents_7",
            "code": "    except Exception:\n        logger.exception(\"Exception occured whilst getting store agents\")\n        return fastapi.responses.JSONResponse(\n            status_code=500,\n            content={\"detail\": \"An error occurred while retrieving the store agents\"},\n        )\n"
        },
        {
            "id": "chunk_4_get_agent_1",
            "code": "@router.get(\n    \"/agents/{username}/{agent_name}\",\n    tags=[\"store\", \"public\"],\n    response_model=backend.server.v2.store.model.StoreAgentDetails,\n)\n"
        },
        {
            "id": "chunk_4_get_agent_2",
            "code": "async def get_agent(username: str, agent_name: str):\n    \"\"\"\n    This is only used on the AgentDetails Page\n\n    It returns the store listing agents details.\n    \"\"\"\n"
        },
        {
            "id": "chunk_4_get_agent_3",
            "code": "    try:\n        username = urllib.parse.unquote(username).lower()\n        # URL decode the agent name since it comes from the URL path\n        agent_name = urllib.parse.unquote(agent_name).lower()\n        agent = await backend.server.v2.store.db.get_store_agent_details(\n            username=username, agent_name=agent_name\n        )\n        return agent\n"
        },
        {
            "id": "chunk_4_get_agent_4",
            "code": "    except Exception:\n        logger.exception(\"Exception occurred whilst getting store agent details\")\n        return fastapi.responses.JSONResponse(\n            status_code=500,\n            content={\n                \"detail\": \"An error occurred while retrieving the store agent details\"\n            },\n        )\n"
        },
        {
            "id": "chunk_5_create_review_1",
            "code": "@router.post(\n    \"/agents/{username}/{agent_name}/review\",\n    tags=[\"store\"],\n    dependencies=[fastapi.Depends(autogpt_libs.auth.middleware.auth_middleware)],\n    response_model=backend.server.v2.store.model.StoreReview,\n)\n"
        },
        {
            "id": "chunk_5_create_review_2",
            "code": "async def create_review(\n    username: str,\n    agent_name: str,\n    review: backend.server.v2.store.model.StoreReviewCreate,\n    user_id: typing.Annotated[\n        str, fastapi.Depends(autogpt_libs.auth.depends.get_user_id)\n    ],\n):\n"
        },
        {
            "id": "chunk_5_create_review_3",
            "code": "    \"\"\"\n    Create a review for a store agent.\n\n    Args:\n        username: Creator's username\n        agent_name: Name/slug of the agent\n        review: Review details including score and optional comments\n        user_id: ID of authenticated user creating the review\n\n    Returns:\n        The created review\n    \"\"\"\n"
        },
        {
            "id": "chunk_5_create_review_4",
            "code": "    try:\n        username = urllib.parse.unquote(username).lower()\n"
        },
        {
            "id": "chunk_5_create_review_5",
            "code": "        agent_name = urllib.parse.unquote(agent_name)\n"
        },
        {
            "id": "chunk_5_create_review_6",
            "code": "        # Create the review\n        created_review = await backend.server.v2.store.db.create_store_review(\n            user_id=user_id,\n            store_listing_version_id=review.store_listing_version_id,\n            score=review.score,\n            comments=review.comments,\n        )\n"
        },
        {
            "id": "chunk_5_create_review_7",
            "code": "\n        return created_review\n"
        },
        {
            "id": "chunk_5_create_review_8",
            "code": "    except Exception:\n        logger.exception(\"Exception occurred whilst creating store review\")\n        return fastapi.responses.JSONResponse(\n            status_code=500,\n            content={\"detail\": \"An error occurred while creating the store review\"},\n        )\n"
        },
        {
            "id": "chunk_6_get_creators_1",
            "code": "@router.get(\n    \"/creators\",\n    tags=[\"store\", \"public\"],\n    response_model=backend.server.v2.store.model.CreatorsResponse,\n)\n"
        },
        {
            "id": "chunk_6_get_creators_2",
            "code": "async def get_creators(\n    featured: bool = False,\n    search_query: str | None = None,\n    sorted_by: str | None = None,\n    page: int = 1,\n    page_size: int = 20,\n):\n"
        },
        {
            "id": "chunk_6_get_creators_3",
            "code": "    \"\"\"\n    This is needed for:\n    - Home Page Featured Creators\n    - Search Results Page\n\n    ---\n\n    To support this functionality we need:\n    - featured: bool - to limit the list to just featured agents\n    - search_query: str - vector search based on the creators profile description.\n    - sorted_by: [agent_rating, agent_runs] -\n    \"\"\"\n"
        },
        {
            "id": "chunk_6_get_creators_4",
            "code": "    if page < 1:\n        raise fastapi.HTTPException(\n            status_code=422, detail=\"Page must be greater than 0\"\n        )\n"
        },
        {
            "id": "chunk_6_get_creators_5",
            "code": "    if page_size < 1:\n        raise fastapi.HTTPException(\n            status_code=422, detail=\"Page size must be greater than 0\"\n        )\n"
        },
        {
            "id": "chunk_6_get_creators_6",
            "code": "    try:\n        creators = await backend.server.v2.store.db.get_store_creators(\n            featured=featured,\n            search_query=search_query,\n            sorted_by=sorted_by,\n            page=page,\n            page_size=page_size,\n        )\n        return creators\n"
        },
        {
            "id": "chunk_6_get_creators_7",
            "code": "    except Exception:\n        logger.exception(\"Exception occurred whilst getting store creators\")\n        return fastapi.responses.JSONResponse(\n            status_code=500,\n            content={\"detail\": \"An error occurred while retrieving the store creators\"},\n        )\n"
        },
        {
            "id": "chunk_7_get_creator_1",
            "code": "@router.get(\n    \"/creator/{username}\",\n    tags=[\"store\", \"public\"],\n    response_model=backend.server.v2.store.model.CreatorDetails,\n)\n"
        },
        {
            "id": "chunk_7_get_creator_2",
            "code": "async def get_creator(\n    username: str,\n):\n"
        },
        {
            "id": "chunk_7_get_creator_3",
            "code": "    \"\"\"\n    Get the details of a creator\n    - Creator Details Page\n    \"\"\"\n"
        },
        {
            "id": "chunk_7_get_creator_4",
            "code": "    try:\n        username = urllib.parse.unquote(username).lower()\n        creator = await backend.server.v2.store.db.get_store_creator_details(\n            username=username.lower()\n        )\n        return creator\n"
        },
        {
            "id": "chunk_7_get_creator_5",
            "code": "    except Exception:\n        logger.exception(\"Exception occurred whilst getting creator details\")\n        return fastapi.responses.JSONResponse(\n            status_code=500,\n            content={\n                \"detail\": \"An error occurred while retrieving the creator details\"\n            },\n        )\n"
        },
        {
            "id": "chunk_8_get_my_agents_1",
            "code": "@router.get(\n    \"/myagents\",\n    tags=[\"store\", \"private\"],\n    dependencies=[fastapi.Depends(autogpt_libs.auth.middleware.auth_middleware)],\n    response_model=backend.server.v2.store.model.MyAgentsResponse,\n)\n"
        },
        {
            "id": "chunk_8_get_my_agents_2",
            "code": "async def get_my_agents(\n    user_id: typing.Annotated[\n        str, fastapi.Depends(autogpt_libs.auth.depends.get_user_id)\n    ]\n):\n"
        },
        {
            "id": "chunk_8_get_my_agents_3",
            "code": "    try:\n        agents = await backend.server.v2.store.db.get_my_agents(user_id)\n        return agents\n"
        },
        {
            "id": "chunk_8_get_my_agents_4",
            "code": "    except Exception:\n        logger.exception(\"Exception occurred whilst getting my agents\")\n        return fastapi.responses.JSONResponse(\n            status_code=500,\n            content={\"detail\": \"An error occurred while retrieving the my agents\"},\n        )\n"
        },
        {
            "id": "chunk_9_delete_submission_1",
            "code": "@router.delete(\n    \"/submissions/{submission_id}\",\n    tags=[\"store\", \"private\"],\n    dependencies=[fastapi.Depends(autogpt_libs.auth.middleware.auth_middleware)],\n    response_model=bool,\n)\n"
        },
        {
            "id": "chunk_9_delete_submission_2",
            "code": "async def delete_submission(\n    user_id: typing.Annotated[\n        str, fastapi.Depends(autogpt_libs.auth.depends.get_user_id)\n    ],\n    submission_id: str,\n):\n"
        },
        {
            "id": "chunk_9_delete_submission_3",
            "code": "    \"\"\"\n    Delete a store listing submission.\n\n    Args:\n        user_id (str): ID of the authenticated user\n        submission_id (str): ID of the submission to be deleted\n\n    Returns:\n        bool: True if the submission was successfully deleted, False otherwise\n    \"\"\"\n"
        },
        {
            "id": "chunk_9_delete_submission_4",
            "code": "    try:\n        result = await backend.server.v2.store.db.delete_store_submission(\n            user_id=user_id,\n            submission_id=submission_id,\n        )\n        return result\n"
        },
        {
            "id": "chunk_9_delete_submission_5",
            "code": "    except Exception:\n        logger.exception(\"Exception occurred whilst deleting store submission\")\n        return fastapi.responses.JSONResponse(\n            status_code=500,\n            content={\"detail\": \"An error occurred while deleting the store submission\"},\n        )\n"
        },
        {
            "id": "chunk_10_get_submissions_1",
            "code": "@router.get(\n    \"/submissions\",\n    tags=[\"store\", \"private\"],\n    dependencies=[fastapi.Depends(autogpt_libs.auth.middleware.auth_middleware)],\n    response_model=backend.server.v2.store.model.StoreSubmissionsResponse,\n)\n"
        },
        {
            "id": "chunk_10_get_submissions_2",
            "code": "async def get_submissions(\n    user_id: typing.Annotated[\n        str, fastapi.Depends(autogpt_libs.auth.depends.get_user_id)\n    ],\n    page: int = 1,\n    page_size: int = 20,\n):\n"
        },
        {
            "id": "chunk_10_get_submissions_3",
            "code": "    \"\"\"\n    Get a paginated list of store submissions for the authenticated user.\n\n    Args:\n        user_id (str): ID of the authenticated user\n        page (int, optional): Page number for pagination. Defaults to 1.\n        page_size (int, optional): Number of submissions per page. Defaults to 20.\n\n    Returns:\n        StoreListingsResponse: Paginated list of store submissions\n\n    Raises:\n        HTTPException: If page or page_size are less than 1\n    \"\"\"\n"
        },
        {
            "id": "chunk_10_get_submissions_4",
            "code": "    if page < 1:\n        raise fastapi.HTTPException(\n            status_code=422, detail=\"Page must be greater than 0\"\n        )\n"
        },
        {
            "id": "chunk_10_get_submissions_5",
            "code": "    if page_size < 1:\n        raise fastapi.HTTPException(\n            status_code=422, detail=\"Page size must be greater than 0\"\n        )\n"
        },
        {
            "id": "chunk_10_get_submissions_6",
            "code": "    try:\n        listings = await backend.server.v2.store.db.get_store_submissions(\n            user_id=user_id,\n            page=page,\n            page_size=page_size,\n        )\n        return listings\n"
        },
        {
            "id": "chunk_10_get_submissions_7",
            "code": "    except Exception:\n        logger.exception(\"Exception occurred whilst getting store submissions\")\n        return fastapi.responses.JSONResponse(\n            status_code=500,\n            content={\n                \"detail\": \"An error occurred while retrieving the store submissions\"\n            },\n        )\n"
        },
        {
            "id": "chunk_11_create_submission_1",
            "code": "@router.post(\n    \"/submissions\",\n    tags=[\"store\", \"private\"],\n    dependencies=[fastapi.Depends(autogpt_libs.auth.middleware.auth_middleware)],\n    response_model=backend.server.v2.store.model.StoreSubmission,\n)\n"
        },
        {
            "id": "chunk_11_create_submission_2",
            "code": "async def create_submission(\n    submission_request: backend.server.v2.store.model.StoreSubmissionRequest,\n    user_id: typing.Annotated[\n        str, fastapi.Depends(autogpt_libs.auth.depends.get_user_id)\n    ],\n):\n"
        },
        {
            "id": "chunk_11_create_submission_3",
            "code": "    \"\"\"\n    Create a new store listing submission.\n\n    Args:\n        submission_request (StoreSubmissionRequest): The submission details\n        user_id (str): ID of the authenticated user submitting the listing\n\n    Returns:\n        StoreSubmission: The created store submission\n\n    Raises:\n        HTTPException: If there is an error creating the submission\n    \"\"\"\n"
        },
        {
            "id": "chunk_11_create_submission_4",
            "code": "    try:\n        submission = await backend.server.v2.store.db.create_store_submission(\n            user_id=user_id,\n            agent_id=submission_request.agent_id,\n            agent_version=submission_request.agent_version,\n            slug=submission_request.slug,\n            name=submission_request.name,\n            video_url=submission_request.video_url,\n            image_urls=submission_request.image_urls,\n            description=submission_request.description,\n            sub_heading=submission_request.sub_heading,\n            categories=submission_request.categories,\n        )\n        return submission\n"
        },
        {
            "id": "chunk_11_create_submission_5",
            "code": "    except Exception:\n        logger.exception(\"Exception occurred whilst creating store submission\")\n        return fastapi.responses.JSONResponse(\n            status_code=500,\n            content={\"detail\": \"An error occurred while creating the store submission\"},\n        )\n"
        },
        {
            "id": "chunk_12_upload_submission_media_1",
            "code": "@router.post(\n    \"/submissions/media\",\n    tags=[\"store\", \"private\"],\n    dependencies=[fastapi.Depends(autogpt_libs.auth.middleware.auth_middleware)],\n)\n"
        },
        {
            "id": "chunk_12_upload_submission_media_2",
            "code": "async def upload_submission_media(\n    file: fastapi.UploadFile,\n    user_id: typing.Annotated[\n        str, fastapi.Depends(autogpt_libs.auth.depends.get_user_id)\n    ],\n):\n"
        },
        {
            "id": "chunk_12_upload_submission_media_3",
            "code": "    \"\"\"\n    Upload media (images/videos) for a store listing submission.\n\n    Args:\n        file (UploadFile): The media file to upload\n        user_id (str): ID of the authenticated user uploading the media\n\n    Returns:\n        str: URL of the uploaded media file\n\n    Raises:\n        HTTPException: If there is an error uploading the media\n    \"\"\"\n"
        },
        {
            "id": "chunk_12_upload_submission_media_4",
            "code": "    try:\n        media_url = await backend.server.v2.store.media.upload_media(\n            user_id=user_id, file=file\n        )\n        return media_url\n"
        },
        {
            "id": "chunk_12_upload_submission_media_5",
            "code": "    except Exception:\n        logger.exception(\"Exception occurred whilst uploading submission media\")\n        return fastapi.responses.JSONResponse(\n            status_code=500,\n            content={\"detail\": \"An error occurred while uploading the media file\"},\n        )\n"
        },
        {
            "id": "chunk_13_generate_image_1",
            "code": "@router.post(\n    \"/submissions/generate_image\",\n    tags=[\"store\", \"private\"],\n    dependencies=[fastapi.Depends(autogpt_libs.auth.middleware.auth_middleware)],\n)\n"
        },
        {
            "id": "chunk_13_generate_image_2",
            "code": "async def generate_image(\n    agent_id: str,\n    user_id: typing.Annotated[\n        str, fastapi.Depends(autogpt_libs.auth.depends.get_user_id)\n    ],\n) -> fastapi.responses.Response:\n"
        },
        {
            "id": "chunk_13_generate_image_3",
            "code": "    \"\"\"\n    Generate an image for a store listing submission.\n\n    Args:\n        agent_id (str): ID of the agent to generate an image for\n        user_id (str): ID of the authenticated user\n\n    Returns:\n        JSONResponse: JSON containing the URL of the generated image\n    \"\"\"\n"
        },
        {
            "id": "chunk_13_generate_image_4",
            "code": "    try:\n        agent = await backend.data.graph.get_graph(agent_id, user_id=user_id)\n"
        },
        {
            "id": "chunk_13_generate_image_5",
            "code": "        if not agent:\n            raise fastapi.HTTPException(\n                status_code=404, detail=f\"Agent with ID {agent_id} not found\"\n            )\n"
        },
        {
            "id": "chunk_13_generate_image_6",
            "code": "        # Use .jpeg here since we are generating JPEG images\n        filename = f\"agent_{agent_id}.jpeg\"\n"
        },
        {
            "id": "chunk_13_generate_image_7",
            "code": "        existing_url = await backend.server.v2.store.media.check_media_exists(\n            user_id, filename\n        )\n"
        },
        {
            "id": "chunk_13_generate_image_8",
            "code": "        if existing_url:\n            logger.info(f\"Using existing image for agent {agent_id}\")\n            return fastapi.responses.JSONResponse(content={\"image_url\": existing_url})\n"
        },
        {
            "id": "chunk_13_generate_image_9",
            "code": "        # Generate agent image as JPEG\n        image = await backend.server.v2.store.image_gen.generate_agent_image(\n            agent=agent\n        )\n"
        },
        {
            "id": "chunk_13_generate_image_10",
            "code": "        # Create UploadFile with the correct filename and content_type\n        image_file = fastapi.UploadFile(\n            file=image,\n            filename=filename,\n        )\n"
        },
        {
            "id": "chunk_13_generate_image_11",
            "code": "        image_url = await backend.server.v2.store.media.upload_media(\n            user_id=user_id, file=image_file, use_file_name=True\n        )\n"
        },
        {
            "id": "chunk_13_generate_image_12",
            "code": "        return fastapi.responses.JSONResponse(content={\"image_url\": image_url})\n"
        },
        {
            "id": "chunk_13_generate_image_13",
            "code": "    except Exception:\n        logger.exception(\"Exception occurred whilst generating submission image\")\n        return fastapi.responses.JSONResponse(\n            status_code=500,\n            content={\"detail\": \"An error occurred while generating the image\"},\n        )\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_0_GlobalBlock_2",
            "to": "chunk_0_GlobalBlock_3"
        },
        {
            "from": "chunk_0_GlobalBlock_3",
            "to": "chunk_0_GlobalBlock_4"
        },
        {
            "from": "chunk_0_GlobalBlock_4",
            "to": "chunk_0_GlobalBlock_5"
        },
        {
            "from": "chunk_0_GlobalBlock_5",
            "to": "chunk_0_GlobalBlock_6"
        },
        {
            "from": "chunk_1_get_profile_1",
            "to": "chunk_1_get_profile_2"
        },
        {
            "from": "chunk_1_get_profile_2",
            "to": "chunk_1_get_profile_3"
        },
        {
            "from": "chunk_1_get_profile_3",
            "to": "chunk_1_get_profile_4"
        },
        {
            "from": "chunk_1_get_profile_4",
            "to": "chunk_1_get_profile_5"
        },
        {
            "from": "chunk_2_update_or_create_profile_1",
            "to": "chunk_2_update_or_create_profile_2"
        },
        {
            "from": "chunk_2_update_or_create_profile_2",
            "to": "chunk_2_update_or_create_profile_3"
        },
        {
            "from": "chunk_2_update_or_create_profile_3",
            "to": "chunk_2_update_or_create_profile_4"
        },
        {
            "from": "chunk_2_update_or_create_profile_4",
            "to": "chunk_2_update_or_create_profile_5"
        },
        {
            "from": "chunk_3_get_agents_1",
            "to": "chunk_3_get_agents_2"
        },
        {
            "from": "chunk_3_get_agents_2",
            "to": "chunk_3_get_agents_3"
        },
        {
            "from": "chunk_3_get_agents_3",
            "to": "chunk_3_get_agents_4"
        },
        {
            "from": "chunk_3_get_agents_4",
            "to": "chunk_3_get_agents_5"
        },
        {
            "from": "chunk_3_get_agents_5",
            "to": "chunk_3_get_agents_6"
        },
        {
            "from": "chunk_3_get_agents_6",
            "to": "chunk_3_get_agents_7"
        },
        {
            "from": "chunk_4_get_agent_1",
            "to": "chunk_4_get_agent_2"
        },
        {
            "from": "chunk_4_get_agent_2",
            "to": "chunk_4_get_agent_3"
        },
        {
            "from": "chunk_4_get_agent_3",
            "to": "chunk_4_get_agent_4"
        },
        {
            "from": "chunk_5_create_review_1",
            "to": "chunk_5_create_review_2"
        },
        {
            "from": "chunk_5_create_review_2",
            "to": "chunk_5_create_review_3"
        },
        {
            "from": "chunk_5_create_review_3",
            "to": "chunk_5_create_review_4"
        },
        {
            "from": "chunk_5_create_review_4",
            "to": "chunk_5_create_review_5"
        },
        {
            "from": "chunk_5_create_review_5",
            "to": "chunk_5_create_review_6"
        },
        {
            "from": "chunk_5_create_review_6",
            "to": "chunk_5_create_review_7"
        },
        {
            "from": "chunk_6_get_creators_1",
            "to": "chunk_6_get_creators_2"
        },
        {
            "from": "chunk_6_get_creators_2",
            "to": "chunk_6_get_creators_3"
        },
        {
            "from": "chunk_6_get_creators_3",
            "to": "chunk_6_get_creators_4"
        },
        {
            "from": "chunk_6_get_creators_4",
            "to": "chunk_6_get_creators_5"
        },
        {
            "from": "chunk_6_get_creators_5",
            "to": "chunk_6_get_creators_6"
        },
        {
            "from": "chunk_6_get_creators_6",
            "to": "chunk_6_get_creators_7"
        },
        {
            "from": "chunk_7_get_creator_1",
            "to": "chunk_7_get_creator_2"
        },
        {
            "from": "chunk_7_get_creator_2",
            "to": "chunk_7_get_creator_3"
        },
        {
            "from": "chunk_7_get_creator_3",
            "to": "chunk_7_get_creator_4"
        },
        {
            "from": "chunk_7_get_creator_4",
            "to": "chunk_7_get_creator_5"
        },
        {
            "from": "chunk_8_get_my_agents_1",
            "to": "chunk_8_get_my_agents_2"
        },
        {
            "from": "chunk_8_get_my_agents_2",
            "to": "chunk_8_get_my_agents_3"
        },
        {
            "from": "chunk_8_get_my_agents_3",
            "to": "chunk_8_get_my_agents_4"
        },
        {
            "from": "chunk_9_delete_submission_1",
            "to": "chunk_9_delete_submission_2"
        },
        {
            "from": "chunk_9_delete_submission_2",
            "to": "chunk_9_delete_submission_3"
        },
        {
            "from": "chunk_9_delete_submission_3",
            "to": "chunk_9_delete_submission_4"
        },
        {
            "from": "chunk_9_delete_submission_4",
            "to": "chunk_9_delete_submission_5"
        },
        {
            "from": "chunk_10_get_submissions_1",
            "to": "chunk_10_get_submissions_2"
        },
        {
            "from": "chunk_10_get_submissions_2",
            "to": "chunk_10_get_submissions_3"
        },
        {
            "from": "chunk_10_get_submissions_3",
            "to": "chunk_10_get_submissions_4"
        },
        {
            "from": "chunk_10_get_submissions_4",
            "to": "chunk_10_get_submissions_5"
        },
        {
            "from": "chunk_10_get_submissions_5",
            "to": "chunk_10_get_submissions_6"
        },
        {
            "from": "chunk_11_create_submission_1",
            "to": "chunk_11_create_submission_2"
        },
        {
            "from": "chunk_11_create_submission_2",
            "to": "chunk_11_create_submission_3"
        },
        {
            "from": "chunk_11_create_submission_3",
            "to": "chunk_11_create_submission_4"
        },
        {
            "from": "chunk_11_create_submission_4",
            "to": "chunk_11_create_submission_5"
        },
        {
            "from": "chunk_12_upload_submission_media_1",
            "to": "chunk_12_upload_submission_media_2"
        },
        {
            "from": "chunk_12_upload_submission_media_2",
            "to": "chunk_12_upload_submission_media_3"
        },
        {
            "from": "chunk_12_upload_submission_media_3",
            "to": "chunk_12_upload_submission_media_4"
        },
        {
            "from": "chunk_12_upload_submission_media_4",
            "to": "chunk_12_upload_submission_media_5"
        },
        {
            "from": "chunk_13_generate_image_1",
            "to": "chunk_13_generate_image_2"
        },
        {
            "from": "chunk_13_generate_image_2",
            "to": "chunk_13_generate_image_3"
        },
        {
            "from": "chunk_13_generate_image_3",
            "to": "chunk_13_generate_image_4"
        },
        {
            "from": "chunk_13_generate_image_4",
            "to": "chunk_13_generate_image_5"
        },
        {
            "from": "chunk_13_generate_image_5",
            "to": "chunk_13_generate_image_6"
        },
        {
            "from": "chunk_13_generate_image_5",
            "to": "chunk_13_generate_image_13"
        },
        {
            "from": "chunk_13_generate_image_6",
            "to": "chunk_13_generate_image_7"
        },
        {
            "from": "chunk_13_generate_image_7",
            "to": "chunk_13_generate_image_8"
        },
        {
            "from": "chunk_13_generate_image_7",
            "to": "chunk_13_generate_image_9"
        },
        {
            "from": "chunk_13_generate_image_9",
            "to": "chunk_13_generate_image_10"
        },
        {
            "from": "chunk_13_generate_image_10",
            "to": "chunk_13_generate_image_11"
        },
        {
            "from": "chunk_13_generate_image_11",
            "to": "chunk_13_generate_image_12"
        }
    ]
}