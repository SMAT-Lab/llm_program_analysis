{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "#!/usr/bin/env python\n# coding: utf-8\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "\"\"\"\n    The approach taken is explained below. I decided to do it simply.\n    Initially I was considering parsing the data into some sort of\n    structure and then generating an appropriate README. I am still\n    considering doing it - but for now this should work. The only issue\n    I see is that it only sorts the entries at the lowest level, and that\n    the order of the top-level contents do not match the order of the actual\n    entries.\n\n    This could be extended by having nested blocks, sorting them recursively\n    and flattening the end structure into a list of lines. Revision 2 maybe ^.^.\n\"\"\"\n"
        },
        {
            "id": "chunk_0_GlobalBlock_3",
            "code": "\n\n"
        },
        {
            "id": "chunk_1_sort_blocks_1",
            "code": "def sort_blocks():\n"
        },
        {
            "id": "chunk_1_sort_blocks_2",
            "code": "    # First, we load the current README into memory\n    with open('README.md', 'r') as read_me_file:\n        read_me = read_me_file.read()\n"
        },
        {
            "id": "chunk_1_sort_blocks_3",
            "code": "    # Separating the 'table of contents' from the contents (blocks)\n    table_of_contents = ''.join(read_me.split('- - -')[0])\n    blocks = ''.join(read_me.split('- - -')[1]).split('\\n# ')\n"
        },
        {
            "id": "chunk_1_sort_blocks_4",
            "code": "    for i in range(len(blocks)):\n        if i == 0:\n            blocks[i] = blocks[i] + '\\n'\n        else:\n            blocks[i] = '# ' + blocks[i] + '\\n'\n"
        },
        {
            "id": "chunk_1_sort_blocks_5",
            "code": "    # Sorting the libraries\n    inner_blocks = sorted(blocks[0].split('##'))\n    for i in range(1, len(inner_blocks)):\n        if inner_blocks[i][0] != '#':\n            inner_blocks[i] = '##' + inner_blocks[i]\n    inner_blocks = ''.join(inner_blocks)\n"
        },
        {
            "id": "chunk_1_sort_blocks_6",
            "code": "    # Replacing the non-sorted libraries by the sorted ones and gathering all at the final_README file\n    blocks[0] = inner_blocks\n    final_README = table_of_contents + '- - -' + ''.join(blocks)\n"
        },
        {
            "id": "chunk_1_sort_blocks_7",
            "code": "    with open('README.md', 'w+') as sorted_file:\n        sorted_file.write(final_README)\n"
        },
        {
            "id": "chunk_2_main_1",
            "code": "def main():\n"
        },
        {
            "id": "chunk_2_main_2",
            "code": "    # First, we load the current README into memory as an array of lines\n    with open('README.md', 'r') as read_me_file:\n        read_me = read_me_file.readlines()\n"
        },
        {
            "id": "chunk_2_main_3",
            "code": "\n"
        },
        {
            "id": "chunk_2_main_4",
            "code": "    # Then we cluster the lines together as blocks\n    # Each block represents a collection of lines that should be sorted\n    # This was done by assuming only links ([...](...)) are meant to be sorted\n    # Clustering is done by indentation\n"
        },
        {
            "id": "chunk_2_main_5",
            "code": "    blocks = []\n    last_indent = None\n"
        },
        {
            "id": "chunk_2_main_6",
            "code": "    for line in read_me:\n        s_line = line.lstrip()\n        indent = len(line) - len(s_line)\n"
        },
        {
            "id": "chunk_2_main_7",
            "code": "\n"
        },
        {
            "id": "chunk_2_main_8",
            "code": "        if any([s_line.startswith(s) for s in ['* [', '- [']]):\n"
        },
        {
            "id": "chunk_2_main_9",
            "code": "            if indent == last_indent:\n                blocks[-1].append(line)\n"
        },
        {
            "id": "chunk_2_main_10",
            "code": "            else:\n                blocks.append([line])\n"
        },
        {
            "id": "chunk_2_main_11",
            "code": "            last_indent = indent\n"
        },
        {
            "id": "chunk_2_main_12",
            "code": "        else:\n            blocks.append([line])\n"
        },
        {
            "id": "chunk_2_main_13",
            "code": "            last_indent = None\n"
        },
        {
            "id": "chunk_2_main_14",
            "code": "\n"
        },
        {
            "id": "chunk_2_main_15",
            "code": "    with open('README.md', 'w+') as sorted_file:\n"
        },
        {
            "id": "chunk_2_main_16",
            "code": "        # Then all of the blocks are sorted individually\n        blocks = [\n            ''.join(sorted(block, key=str.lower)) for block in blocks\n        ]\n"
        },
        {
            "id": "chunk_2_main_17",
            "code": "        # And the result is written back to README.md\n        sorted_file.write(''.join(blocks))\n"
        },
        {
            "id": "chunk_2_main_18",
            "code": "\n"
        },
        {
            "id": "chunk_2_main_19",
            "code": "    # Then we call the sorting method\n    sort_blocks()\n"
        },
        {
            "id": "chunk_2_main_20",
            "code": "\n\n\n"
        },
        {
            "id": "chunk_3_GlobalBlock_1",
            "code": "if __name__ == \"__main__\":\n    main()\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_0_GlobalBlock_2",
            "to": "chunk_0_GlobalBlock_3"
        },
        {
            "from": "chunk_1_sort_blocks_1",
            "to": "chunk_1_sort_blocks_2"
        },
        {
            "from": "chunk_1_sort_blocks_2",
            "to": "chunk_1_sort_blocks_3"
        },
        {
            "from": "chunk_1_sort_blocks_3",
            "to": "chunk_1_sort_blocks_4"
        },
        {
            "from": "chunk_1_sort_blocks_4",
            "to": "chunk_1_sort_blocks_5"
        },
        {
            "from": "chunk_1_sort_blocks_5",
            "to": "chunk_1_sort_blocks_6"
        },
        {
            "from": "chunk_1_sort_blocks_6",
            "to": "chunk_1_sort_blocks_7"
        },
        {
            "from": "chunk_2_main_1",
            "to": "chunk_2_main_2"
        },
        {
            "from": "chunk_2_main_2",
            "to": "chunk_2_main_3"
        },
        {
            "from": "chunk_2_main_3",
            "to": "chunk_2_main_4"
        },
        {
            "from": "chunk_2_main_4",
            "to": "chunk_2_main_5"
        },
        {
            "from": "chunk_2_main_5",
            "to": "chunk_2_main_6"
        },
        {
            "from": "chunk_2_main_6",
            "to": "chunk_2_main_7"
        },
        {
            "from": "chunk_2_main_6",
            "to": "chunk_2_main_8"
        },
        {
            "from": "chunk_2_main_7",
            "to": "chunk_2_main_6"
        },
        {
            "from": "chunk_2_main_8",
            "to": "chunk_2_main_9"
        },
        {
            "from": "chunk_2_main_8",
            "to": "chunk_2_main_12"
        },
        {
            "from": "chunk_2_main_9",
            "to": "chunk_2_main_10"
        },
        {
            "from": "chunk_2_main_9",
            "to": "chunk_2_main_11"
        },
        {
            "from": "chunk_2_main_10",
            "to": "chunk_2_main_11"
        },
        {
            "from": "chunk_2_main_11",
            "to": "chunk_2_main_14"
        },
        {
            "from": "chunk_2_main_12",
            "to": "chunk_2_main_13"
        },
        {
            "from": "chunk_2_main_13",
            "to": "chunk_2_main_14"
        },
        {
            "from": "chunk_2_main_14",
            "to": "chunk_2_main_15"
        },
        {
            "from": "chunk_2_main_15",
            "to": "chunk_2_main_16"
        },
        {
            "from": "chunk_2_main_16",
            "to": "chunk_2_main_17"
        },
        {
            "from": "chunk_2_main_17",
            "to": "chunk_2_main_18"
        },
        {
            "from": "chunk_2_main_18",
            "to": "chunk_2_main_19"
        },
        {
            "from": "chunk_2_main_19",
            "to": "chunk_2_main_20"
        }
    ]
}