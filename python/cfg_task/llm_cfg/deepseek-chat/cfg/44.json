{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "from enum import Enum\nfrom typing import List, Literal\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "from pydantic import SecretStr\n"
        },
        {
            "id": "chunk_0_GlobalBlock_3",
            "code": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\n"
        },
        {
            "id": "chunk_0_GlobalBlock_4",
            "code": "from backend.data.model import (\n    APIKeyCredentials,\n    BlockSecret,\n    CredentialsField,\n    CredentialsMetaInput,\n    SchemaField,\n    SecretField,\n)\n"
        },
        {
            "id": "chunk_0_GlobalBlock_5",
            "code": "from backend.integrations.providers import ProviderName\nfrom backend.util.request import requests\n"
        },
        {
            "id": "chunk_1_TEST_CREDENTIALS_1",
            "code": "TEST_CREDENTIALS = APIKeyCredentials(\n    id=\"01234567-89ab-cdef-0123-456789abcdef\",\n    provider=\"medium\",\n    api_key=SecretStr(\"mock-medium-api-key\"),\n    title=\"Mock Medium API key\",\n    expires_at=None,\n)\n"
        },
        {
            "id": "chunk_2_TEST_CREDENTIALS_INPUT_1",
            "code": "TEST_CREDENTIALS_INPUT = {\n    \"provider\": TEST_CREDENTIALS.provider,\n    \"id\": TEST_CREDENTIALS.id,\n    \"type\": TEST_CREDENTIALS.type,\n    \"title\": TEST_CREDENTIALS.type,\n}\n"
        },
        {
            "id": "chunk_3_PublishToMediumStatus_1",
            "code": "class PublishToMediumStatus(str, Enum):\n    PUBLIC = \"public\"\n    DRAFT = \"draft\"\n    UNLISTED = \"unlisted\"\n"
        },
        {
            "id": "chunk_4_PublishToMediumBlock_1",
            "code": "class PublishToMediumBlock(Block):\n"
        },
        {
            "id": "chunk_4_PublishToMediumBlock_2",
            "code": "    class Input(BlockSchema):\n        author_id: BlockSecret = SecretField(\n            key=\"medium_author_id\",\n            description=\"\"\"The Medium AuthorID of the user. You can get this by calling the /me endpoint of the Medium API.\\n\\ncurl -H \"Authorization: Bearer YOUR_ACCESS_TOKEN\" https://api.medium.com/v1/me\" the response will contain the authorId field.\"\"\",\n            placeholder=\"Enter the author's Medium AuthorID\",\n        )\n        title: str = SchemaField(\n            description=\"The title of your Medium post\",\n            placeholder=\"Enter your post title\",\n        )\n        content: str = SchemaField(\n            description=\"The main content of your Medium post\",\n            placeholder=\"Enter your post content\",\n        )\n        content_format: str = SchemaField(\n            description=\"The format of the content: 'html' or 'markdown'\",\n            placeholder=\"html\",\n        )\n        tags: List[str] = SchemaField(\n            description=\"List of tags for your Medium post (up to 5)\",\n            placeholder=\"['technology', 'AI', 'blogging']\",\n        )\n        canonical_url: str | None = SchemaField(\n            default=None,\n            description=\"The original home of this content, if it was originally published elsewhere\",\n            placeholder=\"https://yourblog.com/original-post\",\n        )\n        publish_status: PublishToMediumStatus = SchemaField(\n            description=\"The publish status\",\n            placeholder=PublishToMediumStatus.DRAFT,\n        )\n        license: str = SchemaField(\n            default=\"all-rights-reserved\",\n            description=\"The license of the post: 'all-rights-reserved', 'cc-40-by', 'cc-40-by-sa', 'cc-40-by-nd', 'cc-40-by-nc', 'cc-40-by-nc-nd', 'cc-40-by-nc-sa', 'cc-40-zero', 'public-domain'\",\n            placeholder=\"all-rights-reserved\",\n        )\n        notify_followers: bool = SchemaField(\n            default=False,\n            description=\"Whether to notify followers that the user has published\",\n            placeholder=\"False\",\n        )\n        credentials: CredentialsMetaInput[\n            Literal[ProviderName.MEDIUM], Literal[\"api_key\"]\n        ] = CredentialsField(\n            description=\"The Medium integration can be used with any API key with sufficient permissions for the blocks it is used on.\",\n        )\n"
        },
        {
            "id": "chunk_4_PublishToMediumBlock_3",
            "code": "    class Output(BlockSchema):\n        post_id: str = SchemaField(description=\"The ID of the created Medium post\")\n        post_url: str = SchemaField(description=\"The URL of the created Medium post\")\n        published_at: int = SchemaField(\n            description=\"The timestamp when the post was published\"\n        )\n        error: str = SchemaField(\n            description=\"Error message if the post creation failed\"\n        )\n"
        },
        {
            "id": "chunk_4_PublishToMediumBlock_4",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"3f7b2dcb-4a78-4e3f-b0f1-88132e1b89df\",\n            input_schema=PublishToMediumBlock.Input,\n            output_schema=PublishToMediumBlock.Output,\n            description=\"Publishes a post to Medium.\",\n            categories={BlockCategory.SOCIAL},\n            test_input={\n                \"author_id\": \"1234567890abcdef\",\n                \"title\": \"Test Post\",\n                \"content\": \"<h1>Test Content</h1><p>This is a test post.</p>\",\n                \"content_format\": \"html\",\n                \"tags\": [\"test\", \"automation\"],\n                \"license\": \"all-rights-reserved\",\n                \"notify_followers\": False,\n                \"publish_status\": PublishToMediumStatus.DRAFT.value,\n                \"credentials\": TEST_CREDENTIALS_INPUT,\n            },\n            test_output=[\n                (\"post_id\", \"e6f36a\"),\n                (\"post_url\", \"https://medium.com/@username/test-post-e6f36a\"),\n                (\"published_at\", 1626282600),\n            ],\n            test_mock={\n                \"create_post\": lambda *args, **kwargs: {\n                    \"data\": {\n                        \"id\": \"e6f36a\",\n                        \"url\": \"https://medium.com/@username/test-post-e6f36a\",\n                        \"authorId\": \"1234567890abcdef\",\n                        \"publishedAt\": 1626282600,\n                    }\n                }\n            },\n            test_credentials=TEST_CREDENTIALS,\n        )\n"
        },
        {
            "id": "chunk_4_PublishToMediumBlock_5",
            "code": "    def create_post(\n        self,\n        api_key: SecretStr,\n        author_id,\n        title,\n        content,\n        content_format,\n        tags,\n        canonical_url,\n        publish_status,\n        license,\n        notify_followers,\n    ):\n"
        },
        {
            "id": "chunk_4_PublishToMediumBlock_6",
            "code": "        headers = {\n            \"Authorization\": f\"Bearer {api_key.get_secret_value()}\",\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\",\n        }\n"
        },
        {
            "id": "chunk_4_PublishToMediumBlock_7",
            "code": "        data = {\n            \"title\": title,\n            \"content\": content,\n            \"contentFormat\": content_format,\n            \"tags\": tags,\n            \"canonicalUrl\": canonical_url,\n            \"publishStatus\": publish_status,\n            \"license\": license,\n            \"notifyFollowers\": notify_followers,\n        }\n"
        },
        {
            "id": "chunk_4_PublishToMediumBlock_8",
            "code": "        response = requests.post(\n            f\"https://api.medium.com/v1/users/{author_id}/posts\",\n            headers=headers,\n            json=data,\n        )\n"
        },
        {
            "id": "chunk_4_PublishToMediumBlock_9",
            "code": "        return response.json()\n"
        },
        {
            "id": "chunk_4_PublishToMediumBlock_10",
            "code": "    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        response = self.create_post(\n            credentials.api_key,\n            input_data.author_id.get_secret_value(),\n            input_data.title,\n            input_data.content,\n            input_data.content_format,\n            input_data.tags,\n            input_data.canonical_url,\n            input_data.publish_status,\n            input_data.license,\n            input_data.notify_followers,\n        )\n"
        },
        {
            "id": "chunk_4_PublishToMediumBlock_11",
            "code": "        if \"data\" in response:\n            yield \"post_id\", response[\"data\"][\"id\"]\n            yield \"post_url\", response[\"data\"][\"url\"]\n            yield \"published_at\", response[\"data\"][\"publishedAt\"]\n"
        },
        {
            "id": "chunk_4_PublishToMediumBlock_12",
            "code": "        else:\n            error_message = response.get(\"errors\", [{}])[0].get(\n                \"message\", \"Unknown error occurred\"\n            )\n            raise RuntimeError(f\"Failed to create Medium post: {error_message}\")\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_0_GlobalBlock_2",
            "to": "chunk_0_GlobalBlock_3"
        },
        {
            "from": "chunk_0_GlobalBlock_3",
            "to": "chunk_0_GlobalBlock_4"
        },
        {
            "from": "chunk_0_GlobalBlock_4",
            "to": "chunk_0_GlobalBlock_5"
        },
        {
            "from": "chunk_4_PublishToMediumBlock_1",
            "to": "chunk_4_PublishToMediumBlock_2"
        },
        {
            "from": "chunk_4_PublishToMediumBlock_2",
            "to": "chunk_4_PublishToMediumBlock_3"
        },
        {
            "from": "chunk_4_PublishToMediumBlock_3",
            "to": "chunk_4_PublishToMediumBlock_4"
        },
        {
            "from": "chunk_4_PublishToMediumBlock_4",
            "to": "chunk_4_PublishToMediumBlock_5"
        },
        {
            "from": "chunk_4_PublishToMediumBlock_5",
            "to": "chunk_4_PublishToMediumBlock_6"
        },
        {
            "from": "chunk_4_PublishToMediumBlock_6",
            "to": "chunk_4_PublishToMediumBlock_7"
        },
        {
            "from": "chunk_4_PublishToMediumBlock_7",
            "to": "chunk_4_PublishToMediumBlock_8"
        },
        {
            "from": "chunk_4_PublishToMediumBlock_8",
            "to": "chunk_4_PublishToMediumBlock_9"
        },
        {
            "from": "chunk_4_PublishToMediumBlock_9",
            "to": "chunk_4_PublishToMediumBlock_10"
        },
        {
            "from": "chunk_4_PublishToMediumBlock_10",
            "to": "chunk_4_PublishToMediumBlock_11"
        },
        {
            "from": "chunk_4_PublishToMediumBlock_10",
            "to": "chunk_4_PublishToMediumBlock_12"
        }
    ]
}