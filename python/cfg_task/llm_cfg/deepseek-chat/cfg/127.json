{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "from __future__ import annotations\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "\n\n\n"
        },
        {
            "id": "chunk_1_solve_maze_1",
            "code": "def solve_maze(\n    maze: list[list[int]],\n    source_row: int,\n    source_column: int,\n    destination_row: int,\n    destination_column: int,\n) -> list[list[int]]:\n"
        },
        {
            "id": "chunk_1_solve_maze_2",
            "code": "    \"\"\"\n    This method solves the \"rat in maze\" problem.\n    Parameters :\n        - maze: A two dimensional matrix of zeros and ones.\n        - source_row: The row index of the starting point.\n        - source_column: The column index of the starting point.\n        - destination_row: The row index of the destination point.\n        - destination_column: The column index of the destination point.\n    Returns:\n        - solution: A 2D matrix representing the solution path if it exists.\n    Raises:\n        - ValueError: If no solution exists or if the source or\n            destination coordinates are invalid.\n    Description:\n        This method navigates through a maze represented as an n by n matrix,\n        starting from a specified source cell and\n        aiming to reach a destination cell.\n        The maze consists of walls (1s) and open paths (0s).\n        By providing custom row and column values, the source and destination\n        cells can be adjusted.\n    >>> maze = [[0, 1, 0, 1, 1],\n    ...         [0, 0, 0, 0, 0],\n    ...         [1, 0, 1, 0, 1],\n    ...         [0, 0, 1, 0, 0],\n    ...         [1, 0, 0, 1, 0]]\n    >>> solve_maze(maze,0,0,len(maze)-1,len(maze)-1)    # doctest: +NORMALIZE_WHITESPACE\n    [[0, 1, 1, 1, 1],\n    [0, 0, 0, 0, 1],\n    [1, 1, 1, 0, 1],\n    [1, 1, 1, 0, 0],\n    [1, 1, 1, 1, 0]]\n\n    Note:\n        In the output maze, the zeros (0s) represent one of the possible\n        paths from the source to the destination.\n\n    >>> maze = [[0, 1, 0, 1, 1],\n    ...         [0, 0, 0, 0, 0],\n    ...         [0, 0, 0, 0, 1],\n    ...         [0, 0, 0, 0, 0],\n    ...         [0, 0, 0, 0, 0]]\n    >>> solve_maze(maze,0,0,len(maze)-1,len(maze)-1)    # doctest: +NORMALIZE_WHITESPACE\n    [[0, 1, 1, 1, 1],\n    [0, 1, 1, 1, 1],\n    [0, 1, 1, 1, 1],\n    [0, 1, 1, 1, 1],\n    [0, 0, 0, 0, 0]]\n\n    >>> maze = [[0, 0, 0],\n    ...         [0, 1, 0],\n    ...         [1, 0, 0]]\n    >>> solve_maze(maze,0,0,len(maze)-1,len(maze)-1)    # doctest: +NORMALIZE_WHITESPACE\n    [[0, 0, 0],\n    [1, 1, 0],\n    [1, 1, 0]]\n\n    >>> maze = [[1, 0, 0],\n    ...         [0, 1, 0],\n    ...         [1, 0, 0]]\n    >>> solve_maze(maze,0,1,len(maze)-1,len(maze)-1)    # doctest: +NORMALIZE_WHITESPACE\n    [[1, 0, 0],\n    [1, 1, 0],\n    [1, 1, 0]]\n\n    >>> maze = [[1, 1, 0, 0, 1, 0, 0, 1],\n    ...         [1, 0, 1, 0, 0, 1, 1, 1],\n    ...         [0, 1, 0, 1, 0, 0, 1, 0],\n    ...         [1, 1, 1, 0, 0, 1, 0, 1],\n    ...         [0, 1, 0, 0, 1, 0, 1, 1],\n    ...         [0, 0, 0, 1, 1, 1, 0, 1],\n    ...         [0, 1, 0, 1, 0, 1, 1, 1],\n    ...         [1, 1, 0, 0, 0, 0, 0, 1]]\n    >>> solve_maze(maze,0,2,len(maze)-1,2)  # doctest: +NORMALIZE_WHITESPACE\n    [[1, 1, 0, 0, 1, 1, 1, 1],\n    [1, 1, 1, 0, 0, 1, 1, 1],\n    [1, 1, 1, 1, 0, 1, 1, 1],\n    [1, 1, 1, 0, 0, 1, 1, 1],\n    [1, 1, 0, 0, 1, 1, 1, 1],\n    [1, 1, 0, 1, 1, 1, 1, 1],\n    [1, 1, 0, 1, 1, 1, 1, 1],\n    [1, 1, 0, 1, 1, 1, 1, 1]]\n    >>> maze = [[1, 0, 0],\n    ...         [0, 1, 1],\n    ...         [1, 0, 1]]\n    >>> solve_maze(maze,0,1,len(maze)-1,len(maze)-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: No solution exists!\n\n    >>> maze = [[0, 0],\n    ...         [1, 1]]\n    >>> solve_maze(maze,0,0,len(maze)-1,len(maze)-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: No solution exists!\n\n    >>> maze = [[0, 1],\n    ...         [1, 0]]\n    >>> solve_maze(maze,2,0,len(maze)-1,len(maze)-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Invalid source or destination coordinates\n\n    >>> maze = [[1, 0, 0],\n    ...         [0, 1, 0],\n    ...         [1, 0, 0]]\n    >>> solve_maze(maze,0,1,len(maze),len(maze)-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Invalid source or destination coordinates\n    \"\"\"\n"
        },
        {
            "id": "chunk_1_solve_maze_3",
            "code": "    size = len(maze)\n"
        },
        {
            "id": "chunk_1_solve_maze_4",
            "code": "    # Check if source and destination coordinates are Invalid.\n    if not (0 <= source_row <= size - 1 and 0 <= source_column <= size - 1) or (\n        not (0 <= destination_row <= size - 1 and 0 <= destination_column <= size - 1)\n    ):\n        raise ValueError(\"Invalid source or destination coordinates\")\n"
        },
        {
            "id": "chunk_1_solve_maze_5",
            "code": "    # We need to create solution object to save path.\n    solutions = [[1 for _ in range(size)] for _ in range(size)]\n"
        },
        {
            "id": "chunk_1_solve_maze_6",
            "code": "    solved = run_maze(\n        maze, source_row, source_column, destination_row, destination_column, solutions\n    )\n"
        },
        {
            "id": "chunk_1_solve_maze_7",
            "code": "    if solved:\n        return solutions\n    else:\n        raise ValueError(\"No solution exists!\")\n"
        },
        {
            "id": "chunk_2_run_maze_1",
            "code": "def run_maze(\n    maze: list[list[int]],\n    i: int,\n    j: int,\n    destination_row: int,\n    destination_column: int,\n    solutions: list[list[int]],\n) -> bool:\n"
        },
        {
            "id": "chunk_2_run_maze_2",
            "code": "    \"\"\"\n    This method is recursive starting from (i, j) and going in one of four directions:\n    up, down, left, right.\n    If a path is found to destination it returns True otherwise it returns False.\n    Parameters\n        maze: A two dimensional matrix of zeros and ones.\n        i, j : coordinates of matrix\n        solutions: A two dimensional matrix of solutions.\n    Returns:\n        Boolean if path is found True, Otherwise False.\n    \"\"\"\n"
        },
        {
            "id": "chunk_2_run_maze_3",
            "code": "    size = len(maze)\n"
        },
        {
            "id": "chunk_2_run_maze_4",
            "code": "    # Final check point.\n    if i == destination_row and j == destination_column and maze[i][j] == 0:\n        solutions[i][j] = 0\n        return True\n"
        },
        {
            "id": "chunk_2_run_maze_5",
            "code": "    lower_flag = (not i < 0) and (not j < 0)  # Check lower bounds\n    upper_flag = (i < size) and (j < size)  # Check upper bounds\n"
        },
        {
            "id": "chunk_2_run_maze_6",
            "code": "    if lower_flag and upper_flag:\n        # check for already visited and block points.\n        block_flag = (solutions[i][j]) and (not maze[i][j])\n"
        },
        {
            "id": "chunk_2_run_maze_7",
            "code": "        if block_flag:\n            # check visited\n            solutions[i][j] = 0\n"
        },
        {
            "id": "chunk_2_run_maze_8",
            "code": "            # check for directions\n            if (\n                run_maze(maze, i + 1, j, destination_row, destination_column, solutions)\n                or run_maze(\n                    maze, i, j + 1, destination_row, destination_column, solutions\n                )\n                or run_maze(\n                    maze, i - 1, j, destination_row, destination_column, solutions\n                )\n                or run_maze(\n                    maze, i, j - 1, destination_row, destination_column, solutions\n                )\n            ):\n"
        },
        {
            "id": "chunk_2_run_maze_9",
            "code": "                return True\n"
        },
        {
            "id": "chunk_2_run_maze_10",
            "code": "            solutions[i][j] = 1\n            return False\n"
        },
        {
            "id": "chunk_2_run_maze_11",
            "code": "    return False\n"
        },
        {
            "id": "chunk_3_GlobalBlock_1",
            "code": "if __name__ == \"__main__\":\n"
        },
        {
            "id": "chunk_3_GlobalBlock_2",
            "code": "    import doctest\n\n    doctest.testmod(optionflags=doctest.NORMALIZE_WHITESPACE)\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_1_solve_maze_1",
            "to": "chunk_1_solve_maze_2"
        },
        {
            "from": "chunk_1_solve_maze_2",
            "to": "chunk_1_solve_maze_3"
        },
        {
            "from": "chunk_1_solve_maze_3",
            "to": "chunk_1_solve_maze_4"
        },
        {
            "from": "chunk_1_solve_maze_4",
            "to": "chunk_1_solve_maze_5"
        },
        {
            "from": "chunk_1_solve_maze_4",
            "to": "chunk_1_solve_maze_7"
        },
        {
            "from": "chunk_1_solve_maze_5",
            "to": "chunk_1_solve_maze_6"
        },
        {
            "from": "chunk_1_solve_maze_6",
            "to": "chunk_1_solve_maze_7"
        },
        {
            "from": "chunk_2_run_maze_1",
            "to": "chunk_2_run_maze_2"
        },
        {
            "from": "chunk_2_run_maze_2",
            "to": "chunk_2_run_maze_3"
        },
        {
            "from": "chunk_2_run_maze_3",
            "to": "chunk_2_run_maze_4"
        },
        {
            "from": "chunk_2_run_maze_4",
            "to": "chunk_2_run_maze_5"
        },
        {
            "from": "chunk_2_run_maze_4",
            "to": "chunk_2_run_maze_11"
        },
        {
            "from": "chunk_2_run_maze_5",
            "to": "chunk_2_run_maze_6"
        },
        {
            "from": "chunk_2_run_maze_6",
            "to": "chunk_2_run_maze_7"
        },
        {
            "from": "chunk_2_run_maze_6",
            "to": "chunk_2_run_maze_11"
        },
        {
            "from": "chunk_2_run_maze_7",
            "to": "chunk_2_run_maze_8"
        },
        {
            "from": "chunk_2_run_maze_8",
            "to": "chunk_2_run_maze_9"
        },
        {
            "from": "chunk_2_run_maze_8",
            "to": "chunk_2_run_maze_10"
        },
        {
            "from": "chunk_3_GlobalBlock_1",
            "to": "chunk_3_GlobalBlock_2"
        }
    ]
}