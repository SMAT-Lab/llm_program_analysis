{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "import codecs\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n"
        },
        {
            "id": "chunk_1_TextDecoderBlock_1",
            "code": "class TextDecoderBlock(Block):\n"
        },
        {
            "id": "chunk_1_TextDecoderBlock_2",
            "code": "    class Input(BlockSchema):\n        text: str = SchemaField(\n            description=\"A string containing escaped characters to be decoded\",\n            placeholder='Your entire text block with \\\\n and \\\\\" escaped characters',\n        )\n"
        },
        {
            "id": "chunk_1_TextDecoderBlock_3",
            "code": "    class Output(BlockSchema):\n        decoded_text: str = SchemaField(\n            description=\"The decoded text with escape sequences processed\"\n        )\n"
        },
        {
            "id": "chunk_1_TextDecoderBlock_4",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"2570e8fe-8447-43ed-84c7-70d657923231\",\n            description=\"Decodes a string containing escape sequences into actual text\",\n            categories={BlockCategory.TEXT},\n            input_schema=TextDecoderBlock.Input,\n            output_schema=TextDecoderBlock.Output,\n            test_input={\"text\": \"\"\"Hello\\nWorld!\\nThis is a \\\"quoted\\\" string.\"\"\"},\n            test_output=[\n                (\n                    \"decoded_text\",\n                    \"\"\"Hello\nWorld!\nThis is a \"quoted\" string.\"\"\",\n                )\n            ],\n        )\n"
        },
        {
            "id": "chunk_1_TextDecoderBlock_5",
            "code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        decoded_text = codecs.decode(input_data.text, \"unicode_escape\")\n        yield \"decoded_text\", decoded_text\n"
        },
        {
            "id": "chunk_2_TextDecoderBlock.Input_1",
            "code": "    class Input(BlockSchema):\n        text: str = SchemaField(\n            description=\"A string containing escaped characters to be decoded\",\n            placeholder='Your entire text block with \\\\n and \\\\\" escaped characters',\n        )\n"
        },
        {
            "id": "chunk_3_TextDecoderBlock.Output_1",
            "code": "    class Output(BlockSchema):\n        decoded_text: str = SchemaField(\n            description=\"The decoded text with escape sequences processed\"\n        )\n"
        },
        {
            "id": "chunk_4_TextDecoderBlock.__init___1",
            "code": "    def __init__(self):\n        super().__init__(\n            id=\"2570e8fe-8447-43ed-84c7-70d657923231\",\n            description=\"Decodes a string containing escape sequences into actual text\",\n            categories={BlockCategory.TEXT},\n            input_schema=TextDecoderBlock.Input,\n            output_schema=TextDecoderBlock.Output,\n            test_input={\"text\": \"\"\"Hello\\nWorld!\\nThis is a \\\"quoted\\\" string.\"\"\"},\n            test_output=[\n                (\n                    \"decoded_text\",\n                    \"\"\"Hello\nWorld!\nThis is a \"quoted\" string.\"\"\",\n                )\n            ],\n        )\n"
        },
        {
            "id": "chunk_5_TextDecoderBlock.run_1",
            "code": "    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n"
        },
        {
            "id": "chunk_5_TextDecoderBlock.run_2",
            "code": "        decoded_text = codecs.decode(input_data.text, \"unicode_escape\")\n        yield \"decoded_text\", decoded_text\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_1_TextDecoderBlock_1",
            "to": "chunk_1_TextDecoderBlock_2"
        },
        {
            "from": "chunk_1_TextDecoderBlock_2",
            "to": "chunk_1_TextDecoderBlock_3"
        },
        {
            "from": "chunk_1_TextDecoderBlock_3",
            "to": "chunk_1_TextDecoderBlock_4"
        },
        {
            "from": "chunk_1_TextDecoderBlock_4",
            "to": "chunk_1_TextDecoderBlock_5"
        },
        {
            "from": "chunk_5_TextDecoderBlock.run_1",
            "to": "chunk_5_TextDecoderBlock.run_2"
        }
    ]
}