{
    "nodes": [
        {
            "id": "chunk_0_GlobalBlock_1",
            "code": "# -*- coding: utf-8 -*-\n"
        },
        {
            "id": "chunk_0_GlobalBlock_2",
            "code": "import re\nimport sys\nimport random\nfrom typing import List, Tuple\n"
        },
        {
            "id": "chunk_0_GlobalBlock_3",
            "code": "import requests\nfrom requests.models import Response\n"
        },
        {
            "id": "chunk_1_find_links_in_text_1",
            "code": "def find_links_in_text(text: str) -> List[str]:\n    \"\"\"Find links in a text and return a list of URLs.\"\"\"\n"
        },
        {
            "id": "chunk_1_find_links_in_text_2",
            "code": "    link_pattern = re.compile(r'((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:\\'\\\".,<>?\u00ab\u00bb\u201c\u201d\u2018\u2019]))')\n"
        },
        {
            "id": "chunk_1_find_links_in_text_3",
            "code": "    raw_links = re.findall(link_pattern, text)\n"
        },
        {
            "id": "chunk_1_find_links_in_text_4",
            "code": "    links = [\n        str(raw_link[0]) for raw_link in raw_links\n    ]\n"
        },
        {
            "id": "chunk_1_find_links_in_text_5",
            "code": "    return links\n"
        },
        {
            "id": "chunk_2_find_links_in_file_1",
            "code": "def find_links_in_file(filename: str) -> List[str]:\n    \"\"\"Find links in a file and return a list of URLs from text file.\"\"\"\n\n"
        },
        {
            "id": "chunk_2_find_links_in_file_2",
            "code": "    with open(filename, mode='r', encoding='utf-8') as file:\n        readme = file.read()\n"
        },
        {
            "id": "chunk_2_find_links_in_file_3",
            "code": "        index_section = readme.find('## Index')\n        if index_section == -1:\n            index_section = 0\n"
        },
        {
            "id": "chunk_2_find_links_in_file_4",
            "code": "        content = readme[index_section:]\n\n"
        },
        {
            "id": "chunk_2_find_links_in_file_5",
            "code": "    links = find_links_in_text(content)\n\n"
        },
        {
            "id": "chunk_2_find_links_in_file_6",
            "code": "    return links\n\n\n"
        },
        {
            "id": "chunk_3_check_duplicate_links_1",
            "code": "def check_duplicate_links(links: List[str]) -> Tuple[bool, List]:\n    \"\"\"Check for duplicated links.\n\n    Returns a tuple with True or False and duplicate list.\n    \"\"\"\n"
        },
        {
            "id": "chunk_3_check_duplicate_links_2",
            "code": "    seen = {}\n    duplicates = []\n    has_duplicate = False\n"
        },
        {
            "id": "chunk_3_check_duplicate_links_3",
            "code": "    for link in links:\n        link = link.rstrip('/')\n"
        },
        {
            "id": "chunk_3_check_duplicate_links_4",
            "code": "        if link not in seen:\n            seen[link] = 1\n"
        },
        {
            "id": "chunk_3_check_duplicate_links_5",
            "code": "        else:\n            if seen[link] == 1:\n                duplicates.append(link)\n"
        },
        {
            "id": "chunk_3_check_duplicate_links_6",
            "code": "    if duplicates:\n        has_duplicate = True\n"
        },
        {
            "id": "chunk_3_check_duplicate_links_7",
            "code": "    return (has_duplicate, duplicates)\n"
        },
        {
            "id": "chunk_4_fake_user_agent_1",
            "code": "def fake_user_agent() -> str:\n    \"\"\"Faking user agent as some hosting services block not-whitelisted UA.\"\"\"\n"
        },
        {
            "id": "chunk_4_fake_user_agent_2",
            "code": "    user_agents = [\n        'Mozilla/5.0 (Windows NT 6.2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1467.0 Safari/537.36',\n        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/605.1.15 (KHTML, like Gecko)',\n        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36',\n        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36',\n    ]\n"
        },
        {
            "id": "chunk_4_fake_user_agent_3",
            "code": "    return random.choice(user_agents)\n"
        },
        {
            "id": "chunk_5_get_host_from_link_1",
            "code": "def get_host_from_link(link: str) -> str:\n\n    host = link.split('://', 1)[1] if '://' in link else link\n"
        },
        {
            "id": "chunk_5_get_host_from_link_2",
            "code": "    # Remove routes, arguments and anchors\n    if '/' in host:\n        host = host.split('/', 1)[0]\n"
        },
        {
            "id": "chunk_5_get_host_from_link_3",
            "code": "    elif '?' in host:\n        host = host.split('?', 1)[0]\n"
        },
        {
            "id": "chunk_5_get_host_from_link_4",
            "code": "    elif '#' in host:\n        host = host.split('#', 1)[0]\n"
        },
        {
            "id": "chunk_5_get_host_from_link_5",
            "code": "    return host\n"
        },
        {
            "id": "chunk_6_has_cloudflare_protection_1",
            "code": "def has_cloudflare_protection(resp: Response) -> bool:\n    \"\"\"Checks if there is any cloudflare protection in the response.\n\n    Cloudflare implements multiple network protections on a given link,\n    this script tries to detect if any of them exist in the response from request.\n\n    Common protections have the following HTTP code as a response:\n        - 403: When host header is missing or incorrect (and more)\n        - 503: When DDOS protection exists\n\n    See more about it at:\n        - https://support.cloudflare.com/hc/en-us/articles/115003014512-4xx-Client-Error\n        - https://support.cloudflare.com/hc/en-us/articles/115003011431-Troubleshooting-Cloudflare-5XX-errors\n        - https://www.cloudflare.com/ddos/\n        - https://superuser.com/a/888526\n\n    Discussions in issues and pull requests:\n        - https://github.com/public-apis/public-apis/pull/2409\n        - https://github.com/public-apis/public-apis/issues/2960 \n    \"\"\"\n"
        },
        {
            "id": "chunk_6_has_cloudflare_protection_2",
            "code": "    code = resp.status_code\n    server = resp.headers.get('Server') or resp.headers.get('server')\n"
        },
        {
            "id": "chunk_6_has_cloudflare_protection_3",
            "code": "    cloudflare_flags = [\n        '403 Forbidden',\n        'cloudflare',\n        'Cloudflare',\n        'Security check',\n        'Please Wait... | Cloudflare',\n        'We are checking your browser...',\n        'Please stand by, while we are checking your browser...',\n        'Checking your browser before accessing',\n        'This process is automatic.',\n        'Your browser will redirect to your requested content shortly.',\n        'Please allow up to 5 seconds',\n        'DDoS protection by',\n        'Ray ID:',\n        'Cloudflare Ray ID:',\n        '_cf_chl',\n        '_cf_chl_opt',\n        '__cf_chl_rt_tk',\n        'cf-spinner-please-wait',\n        'cf-spinner-redirecting'\n    ]\n"
        },
        {
            "id": "chunk_6_has_cloudflare_protection_4",
            "code": "    if code in [403, 503] and server == 'cloudflare':\n"
        },
        {
            "id": "chunk_6_has_cloudflare_protection_5",
            "code": "        html = resp.text\n"
        },
        {
            "id": "chunk_6_has_cloudflare_protection_6",
            "code": "        flags_found = [flag in html for flag in cloudflare_flags]\n        any_flag_found = any(flags_found)\n"
        },
        {
            "id": "chunk_6_has_cloudflare_protection_7",
            "code": "        if any_flag_found:\n            return True\n"
        },
        {
            "id": "chunk_6_has_cloudflare_protection_8",
            "code": "    return False\n"
        },
        {
            "id": "chunk_7_check_if_link_is_working_1",
            "code": "def check_if_link_is_working(link: str) -> Tuple[bool, str]:\n    \"\"\"Checks if a link is working.\n\n    If an error is identified when the request for the link occurs,\n    the return will be a tuple with the first value True and the second\n    value a string containing the error message.\n\n    If no errors are identified, the return will be a tuple with the\n    first value False and the second an empty string.\n    \"\"\"\n"
        },
        {
            "id": "chunk_7_check_if_link_is_working_2",
            "code": "    has_error = False\n    error_message = ''\n"
        },
        {
            "id": "chunk_7_check_if_link_is_working_3",
            "code": "    try:\n        resp = requests.get(link, timeout=25, headers={\n            'User-Agent': fake_user_agent(),\n            'host': get_host_from_link(link)\n        })\n"
        },
        {
            "id": "chunk_7_check_if_link_is_working_4",
            "code": "        code = resp.status_code\n\n"
        },
        {
            "id": "chunk_7_check_if_link_is_working_5",
            "code": "        if code >= 400 and not has_cloudflare_protection(resp):\n            has_error = True\n            error_message = f'ERR:CLT: {code} : {link}'\n\n"
        },
        {
            "id": "chunk_7_check_if_link_is_working_6",
            "code": "    except requests.exceptions.SSLError as error:\n        has_error = True\n        error_message = f'ERR:SSL: {error} : {link}'\n"
        },
        {
            "id": "chunk_7_check_if_link_is_working_7",
            "code": "    except requests.exceptions.ConnectionError as error:\n        has_error = True\n        error_message = f'ERR:CNT: {error} : {link}'\n"
        },
        {
            "id": "chunk_7_check_if_link_is_working_8",
            "code": "    except (TimeoutError, requests.exceptions.ConnectTimeout):\n        has_error = True\n        error_message = f'ERR:TMO: {link}'\n"
        },
        {
            "id": "chunk_7_check_if_link_is_working_9",
            "code": "    except requests.exceptions.TooManyRedirects as error:\n        has_error = True\n        error_message = f'ERR:TMR: {error} : {link}'\n"
        },
        {
            "id": "chunk_7_check_if_link_is_working_10",
            "code": "    except (Exception, requests.exceptions.RequestException) as error:\n        has_error = True\n        error_message = f'ERR:UKN: {error} : {link}'\n"
        },
        {
            "id": "chunk_7_check_if_link_is_working_11",
            "code": "    return (has_error, error_message)\n"
        },
        {
            "id": "chunk_8_check_if_list_of_links_are_working_1",
            "code": "def check_if_list_of_links_are_working(list_of_links: List[str]) -> List[str]:\n    error_messages = []\n"
        },
        {
            "id": "chunk_8_check_if_list_of_links_are_working_2",
            "code": "    for link in list_of_links:\n        has_error, error_message = check_if_link_is_working(link)\n"
        },
        {
            "id": "chunk_8_check_if_list_of_links_are_working_3",
            "code": "        if has_error:\n            error_messages.append(error_message)\n"
        },
        {
            "id": "chunk_8_check_if_list_of_links_are_working_4",
            "code": "    return error_messages\n"
        },
        {
            "id": "chunk_9_start_duplicate_links_checker_1",
            "code": "def start_duplicate_links_checker(links: List[str]) -> None:\n"
        },
        {
            "id": "chunk_9_start_duplicate_links_checker_2",
            "code": "    print('Checking for duplicate links...')\n"
        },
        {
            "id": "chunk_9_start_duplicate_links_checker_3",
            "code": "    has_duplicate_link, duplicates_links = check_duplicate_links(links)\n"
        },
        {
            "id": "chunk_9_start_duplicate_links_checker_4",
            "code": "    if has_duplicate_link:\n"
        },
        {
            "id": "chunk_9_start_duplicate_links_checker_5",
            "code": "        print(f'Found duplicate links:')\n"
        },
        {
            "id": "chunk_9_start_duplicate_links_checker_6",
            "code": "        for duplicate_link in duplicates_links:\n            print(duplicate_link)\n"
        },
        {
            "id": "chunk_9_start_duplicate_links_checker_7",
            "code": "        sys.exit(1)\n"
        },
        {
            "id": "chunk_9_start_duplicate_links_checker_8",
            "code": "        print('No duplicate links.')\n"
        },
        {
            "id": "chunk_10_start_links_working_checker_1",
            "code": "def start_links_working_checker(links: List[str]) -> None:\n"
        },
        {
            "id": "chunk_10_start_links_working_checker_2",
            "code": "    print(f'Checking if {len(links)} links are working...')\n"
        },
        {
            "id": "chunk_10_start_links_working_checker_3",
            "code": "    errors = check_if_list_of_links_are_working(links)\n"
        },
        {
            "id": "chunk_10_start_links_working_checker_4",
            "code": "    if errors:\n"
        },
        {
            "id": "chunk_10_start_links_working_checker_5",
            "code": "        num_errors = len(errors)\n        print(f'Apparently {num_errors} links are not working properly. See in:')\n"
        },
        {
            "id": "chunk_10_start_links_working_checker_6",
            "code": "        for error_message in errors:\n            print(error_message)\n"
        },
        {
            "id": "chunk_10_start_links_working_checker_7",
            "code": "        sys.exit(1)\n"
        },
        {
            "id": "chunk_11_main_1",
            "code": "def main(filename: str, only_duplicate_links_checker: bool) -> None:\n"
        },
        {
            "id": "chunk_11_main_2",
            "code": "    links = find_links_in_file(filename)\n"
        },
        {
            "id": "chunk_11_main_3",
            "code": "    start_duplicate_links_checker(links)\n"
        },
        {
            "id": "chunk_11_main_4",
            "code": "    if not only_duplicate_links_checker:\n        start_links_working_checker(links)\n"
        },
        {
            "id": "chunk_12_GlobalBlock_1",
            "code": "if __name__ == '__main__':\n"
        },
        {
            "id": "chunk_12_GlobalBlock_2",
            "code": "    num_args = len(sys.argv)\n    only_duplicate_links_checker = False\n"
        },
        {
            "id": "chunk_12_GlobalBlock_3",
            "code": "    if num_args < 2:\n        print('No .md file passed')\n        sys.exit(1)\n"
        },
        {
            "id": "chunk_12_GlobalBlock_4",
            "code": "    elif num_args == 3:\n        third_arg = sys.argv[2].lower()\n"
        },
        {
            "id": "chunk_12_GlobalBlock_5",
            "code": "        if third_arg == '-odlc' or third_arg == '--only_duplicate_links_checker':\n            only_duplicate_links_checker = True\n"
        },
        {
            "id": "chunk_12_GlobalBlock_6",
            "code": "        else:\n            print(f'Third invalid argument. Usage: python {__file__} [-odlc | --only_duplicate_links_checker]')\n            sys.exit(1)\n"
        },
        {
            "id": "chunk_12_GlobalBlock_7",
            "code": "    filename = sys.argv[1]\n"
        },
        {
            "id": "chunk_12_GlobalBlock_8",
            "code": "    main(filename, only_duplicate_links_checker)\n"
        }
    ],
    "edges": [
        {
            "from": "chunk_0_GlobalBlock_1",
            "to": "chunk_0_GlobalBlock_2"
        },
        {
            "from": "chunk_0_GlobalBlock_2",
            "to": "chunk_0_GlobalBlock_3"
        },
        {
            "from": "chunk_1_find_links_in_text_1",
            "to": "chunk_1_find_links_in_text_2"
        },
        {
            "from": "chunk_1_find_links_in_text_2",
            "to": "chunk_1_find_links_in_text_3"
        },
        {
            "from": "chunk_1_find_links_in_text_3",
            "to": "chunk_1_find_links_in_text_4"
        },
        {
            "from": "chunk_1_find_links_in_text_4",
            "to": "chunk_1_find_links_in_text_5"
        },
        {
            "from": "chunk_2_find_links_in_file_1",
            "to": "chunk_2_find_links_in_file_2"
        },
        {
            "from": "chunk_2_find_links_in_file_2",
            "to": "chunk_2_find_links_in_file_3"
        },
        {
            "from": "chunk_2_find_links_in_file_3",
            "to": "chunk_2_find_links_in_file_4"
        },
        {
            "from": "chunk_2_find_links_in_file_4",
            "to": "chunk_2_find_links_in_file_5"
        },
        {
            "from": "chunk_2_find_links_in_file_5",
            "to": "chunk_2_find_links_in_file_6"
        },
        {
            "from": "chunk_3_check_duplicate_links_1",
            "to": "chunk_3_check_duplicate_links_2"
        },
        {
            "from": "chunk_3_check_duplicate_links_2",
            "to": "chunk_3_check_duplicate_links_3"
        },
        {
            "from": "chunk_3_check_duplicate_links_3",
            "to": "chunk_3_check_duplicate_links_4"
        },
        {
            "from": "chunk_3_check_duplicate_links_3",
            "to": "chunk_3_check_duplicate_links_7"
        },
        {
            "from": "chunk_3_check_duplicate_links_4",
            "to": "chunk_3_check_duplicate_links_5"
        },
        {
            "from": "chunk_3_check_duplicate_links_4",
            "to": "chunk_3_check_duplicate_links_3"
        },
        {
            "from": "chunk_3_check_duplicate_links_5",
            "to": "chunk_3_check_duplicate_links_3"
        },
        {
            "from": "chunk_3_check_duplicate_links_6",
            "to": "chunk_3_check_duplicate_links_7"
        },
        {
            "from": "chunk_4_fake_user_agent_1",
            "to": "chunk_4_fake_user_agent_2"
        },
        {
            "from": "chunk_4_fake_user_agent_2",
            "to": "chunk_4_fake_user_agent_3"
        },
        {
            "from": "chunk_5_get_host_from_link_1",
            "to": "chunk_5_get_host_from_link_2"
        },
        {
            "from": "chunk_5_get_host_from_link_2",
            "to": "chunk_5_get_host_from_link_3"
        },
        {
            "from": "chunk_5_get_host_from_link_2",
            "to": "chunk_5_get_host_from_link_5"
        },
        {
            "from": "chunk_5_get_host_from_link_3",
            "to": "chunk_5_get_host_from_link_4"
        },
        {
            "from": "chunk_5_get_host_from_link_3",
            "to": "chunk_5_get_host_from_link_5"
        },
        {
            "from": "chunk_5_get_host_from_link_4",
            "to": "chunk_5_get_host_from_link_5"
        },
        {
            "from": "chunk_6_has_cloudflare_protection_1",
            "to": "chunk_6_has_cloudflare_protection_2"
        },
        {
            "from": "chunk_6_has_cloudflare_protection_2",
            "to": "chunk_6_has_cloudflare_protection_3"
        },
        {
            "from": "chunk_6_has_cloudflare_protection_3",
            "to": "chunk_6_has_cloudflare_protection_4"
        },
        {
            "from": "chunk_6_has_cloudflare_protection_4",
            "to": "chunk_6_has_cloudflare_protection_5"
        },
        {
            "from": "chunk_6_has_cloudflare_protection_4",
            "to": "chunk_6_has_cloudflare_protection_8"
        },
        {
            "from": "chunk_6_has_cloudflare_protection_5",
            "to": "chunk_6_has_cloudflare_protection_6"
        },
        {
            "from": "chunk_6_has_cloudflare_protection_6",
            "to": "chunk_6_has_cloudflare_protection_7"
        },
        {
            "from": "chunk_6_has_cloudflare_protection_7",
            "to": "chunk_6_has_cloudflare_protection_8"
        },
        {
            "from": "chunk_7_check_if_link_is_working_1",
            "to": "chunk_7_check_if_link_is_working_2"
        },
        {
            "from": "chunk_7_check_if_link_is_working_2",
            "to": "chunk_7_check_if_link_is_working_3"
        },
        {
            "from": "chunk_7_check_if_link_is_working_3",
            "to": "chunk_7_check_if_link_is_working_4"
        },
        {
            "from": "chunk_7_check_if_link_is_working_3",
            "to": "chunk_7_check_if_link_is_working_6"
        },
        {
            "from": "chunk_7_check_if_link_is_working_3",
            "to": "chunk_7_check_if_link_is_working_7"
        },
        {
            "from": "chunk_7_check_if_link_is_working_3",
            "to": "chunk_7_check_if_link_is_working_8"
        },
        {
            "from": "chunk_7_check_if_link_is_working_3",
            "to": "chunk_7_check_if_link_is_working_9"
        },
        {
            "from": "chunk_7_check_if_link_is_working_3",
            "to": "chunk_7_check_if_link_is_working_10"
        },
        {
            "from": "chunk_7_check_if_link_is_working_4",
            "to": "chunk_7_check_if_link_is_working_5"
        },
        {
            "from": "chunk_7_check_if_link_is_working_5",
            "to": "chunk_7_check_if_link_is_working_11"
        },
        {
            "from": "chunk_7_check_if_link_is_working_6",
            "to": "chunk_7_check_if_link_is_working_11"
        },
        {
            "from": "chunk_7_check_if_link_is_working_7",
            "to": "chunk_7_check_if_link_is_working_11"
        },
        {
            "from": "chunk_7_check_if_link_is_working_8",
            "to": "chunk_7_check_if_link_is_working_11"
        },
        {
            "from": "chunk_7_check_if_link_is_working_9",
            "to": "chunk_7_check_if_link_is_working_11"
        },
        {
            "from": "chunk_7_check_if_link_is_working_10",
            "to": "chunk_7_check_if_link_is_working_11"
        },
        {
            "from": "chunk_8_check_if_list_of_links_are_working_1",
            "to": "chunk_8_check_if_list_of_links_are_working_2"
        },
        {
            "from": "chunk_8_check_if_list_of_links_are_working_2",
            "to": "chunk_8_check_if_list_of_links_are_working_3"
        },
        {
            "from": "chunk_8_check_if_list_of_links_are_working_2",
            "to": "chunk_8_check_if_list_of_links_are_working_4"
        },
        {
            "from": "chunk_8_check_if_list_of_links_are_working_3",
            "to": "chunk_8_check_if_list_of_links_are_working_2"
        },
        {
            "from": "chunk_9_start_duplicate_links_checker_1",
            "to": "chunk_9_start_duplicate_links_checker_2"
        },
        {
            "from": "chunk_9_start_duplicate_links_checker_2",
            "to": "chunk_9_start_duplicate_links_checker_3"
        },
        {
            "from": "chunk_9_start_duplicate_links_checker_3",
            "to": "chunk_9_start_duplicate_links_checker_4"
        },
        {
            "from": "chunk_9_start_duplicate_links_checker_4",
            "to": "chunk_9_start_duplicate_links_checker_5"
        },
        {
            "from": "chunk_9_start_duplicate_links_checker_4",
            "to": "chunk_9_start_duplicate_links_checker_8"
        },
        {
            "from": "chunk_9_start_duplicate_links_checker_5",
            "to": "chunk_9_start_duplicate_links_checker_6"
        },
        {
            "from": "chunk_9_start_duplicate_links_checker_6",
            "to": "chunk_9_start_duplicate_links_checker_7"
        },
        {
            "from": "chunk_10_start_links_working_checker_1",
            "to": "chunk_10_start_links_working_checker_2"
        },
        {
            "from": "chunk_10_start_links_working_checker_2",
            "to": "chunk_10_start_links_working_checker_3"
        },
        {
            "from": "chunk_10_start_links_working_checker_3",
            "to": "chunk_10_start_links_working_checker_4"
        },
        {
            "from": "chunk_10_start_links_working_checker_4",
            "to": "chunk_10_start_links_working_checker_5"
        },
        {
            "from": "chunk_10_start_links_working_checker_4",
            "to": "chunk_10_start_links_working_checker_7"
        },
        {
            "from": "chunk_10_start_links_working_checker_5",
            "to": "chunk_10_start_links_working_checker_6"
        },
        {
            "from": "chunk_10_start_links_working_checker_6",
            "to": "chunk_10_start_links_working_checker_7"
        },
        {
            "from": "chunk_11_main_1",
            "to": "chunk_11_main_2"
        },
        {
            "from": "chunk_11_main_2",
            "to": "chunk_11_main_3"
        },
        {
            "from": "chunk_11_main_3",
            "to": "chunk_11_main_4"
        },
        {
            "from": "chunk_12_GlobalBlock_1",
            "to": "chunk_12_GlobalBlock_2"
        },
        {
            "from": "chunk_12_GlobalBlock_2",
            "to": "chunk_12_GlobalBlock_3"
        },
        {
            "from": "chunk_12_GlobalBlock_2",
            "to": "chunk_12_GlobalBlock_4"
        },
        {
            "from": "chunk_12_GlobalBlock_4",
            "to": "chunk_12_GlobalBlock_5"
        },
        {
            "from": "chunk_12_GlobalBlock_4",
            "to": "chunk_12_GlobalBlock_6"
        },
        {
            "from": "chunk_12_GlobalBlock_5",
            "to": "chunk_12_GlobalBlock_7"
        },
        {
            "from": "chunk_12_GlobalBlock_7",
            "to": "chunk_12_GlobalBlock_8"
        }
    ]
}