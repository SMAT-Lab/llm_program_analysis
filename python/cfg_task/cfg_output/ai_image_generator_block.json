{
  "nodes": [
    {
      "id": "1",
      "type": "block",
      "statements": [
        "from enum import Enum",
        "from typing import Literal",
        "import replicate",
        "from pydantic import SecretStr",
        "from replicate.helpers import FileOutput",
        "from backend.data.block import Block, BlockCategory, BlockSchema",
        "from backend.data.model import APIKeyCredentials, CredentialsField, CredentialsMetaInput, SchemaField",
        "from backend.integrations.providers import ProviderName",
        "class ImageSize(str, Enum):\n    \"\"\"\n    Semantic sizes that map reliably across all models\n    \"\"\"\n    SQUARE = 'square'\n    LANDSCAPE = 'landscape'\n    PORTRAIT = 'portrait'\n    WIDE = 'wide'\n    TALL = 'tall'",
        "'\\n    Semantic sizes that map reliably across all models\\n    '",
        "SQUARE = 'square'",
        "LANDSCAPE = 'landscape'",
        "PORTRAIT = 'portrait'",
        "WIDE = 'wide'",
        "TALL = 'tall'",
        "SIZE_TO_SD_RATIO = {ImageSize.SQUARE: '1:1', ImageSize.LANDSCAPE: '4:3', ImageSize.PORTRAIT: '3:4', ImageSize.WIDE: '16:9', ImageSize.TALL: '9:16'}",
        "SIZE_TO_FLUX_RATIO = {ImageSize.SQUARE: '1:1', ImageSize.LANDSCAPE: '4:3', ImageSize.PORTRAIT: '3:4', ImageSize.WIDE: '16:9', ImageSize.TALL: '9:16'}",
        "SIZE_TO_FLUX_DIMENSIONS = {ImageSize.SQUARE: (1024, 1024), ImageSize.LANDSCAPE: (1365, 1024), ImageSize.PORTRAIT: (1024, 1365), ImageSize.WIDE: (1440, 810), ImageSize.TALL: (810, 1440)}",
        "SIZE_TO_RECRAFT_DIMENSIONS = {ImageSize.SQUARE: '1024x1024', ImageSize.LANDSCAPE: '1365x1024', ImageSize.PORTRAIT: '1024x1365', ImageSize.WIDE: '1536x1024', ImageSize.TALL: '1024x1536'}",
        "class ImageStyle(str, Enum):\n    \"\"\"\n    Complete set of supported styles\n    \"\"\"\n    ANY = 'any'\n    REALISTIC = 'realistic_image'\n    REALISTIC_BW = 'realistic_image/b_and_w'\n    REALISTIC_HDR = 'realistic_image/hdr'\n    REALISTIC_NATURAL = 'realistic_image/natural_light'\n    REALISTIC_STUDIO = 'realistic_image/studio_portrait'\n    REALISTIC_ENTERPRISE = 'realistic_image/enterprise'\n    REALISTIC_HARD_FLASH = 'realistic_image/hard_flash'\n    REALISTIC_MOTION_BLUR = 'realistic_image/motion_blur'\n    DIGITAL_ART = 'digital_illustration'\n    PIXEL_ART = 'digital_illustration/pixel_art'\n    HAND_DRAWN = 'digital_illustration/hand_drawn'\n    GRAIN = 'digital_illustration/grain'\n    SKETCH = 'digital_illustration/infantile_sketch'\n    POSTER = 'digital_illustration/2d_art_poster'\n    POSTER_2 = 'digital_illustration/2d_art_poster_2'\n    HANDMADE_3D = 'digital_illustration/handmade_3d'\n    HAND_DRAWN_OUTLINE = 'digital_illustration/hand_drawn_outline'\n    ENGRAVING_COLOR = 'digital_illustration/engraving_color'",
        "'\\n    Complete set of supported styles\\n    '",
        "ANY = 'any'",
        "REALISTIC = 'realistic_image'",
        "REALISTIC_BW = 'realistic_image/b_and_w'",
        "REALISTIC_HDR = 'realistic_image/hdr'",
        "REALISTIC_NATURAL = 'realistic_image/natural_light'",
        "REALISTIC_STUDIO = 'realistic_image/studio_portrait'",
        "REALISTIC_ENTERPRISE = 'realistic_image/enterprise'",
        "REALISTIC_HARD_FLASH = 'realistic_image/hard_flash'",
        "REALISTIC_MOTION_BLUR = 'realistic_image/motion_blur'",
        "DIGITAL_ART = 'digital_illustration'",
        "PIXEL_ART = 'digital_illustration/pixel_art'",
        "HAND_DRAWN = 'digital_illustration/hand_drawn'",
        "GRAIN = 'digital_illustration/grain'",
        "SKETCH = 'digital_illustration/infantile_sketch'",
        "POSTER = 'digital_illustration/2d_art_poster'",
        "POSTER_2 = 'digital_illustration/2d_art_poster_2'",
        "HANDMADE_3D = 'digital_illustration/handmade_3d'",
        "HAND_DRAWN_OUTLINE = 'digital_illustration/hand_drawn_outline'",
        "ENGRAVING_COLOR = 'digital_illustration/engraving_color'",
        "class ImageGenModel(str, Enum):\n    \"\"\"\n    Available model providers\n    \"\"\"\n    FLUX = 'Flux 1.1 Pro'\n    FLUX_ULTRA = 'Flux 1.1 Pro Ultra'\n    RECRAFT = 'Recraft v3'\n    SD3_5 = 'Stable Diffusion 3.5 Medium'",
        "'\\n    Available model providers\\n    '",
        "FLUX = 'Flux 1.1 Pro'",
        "FLUX_ULTRA = 'Flux 1.1 Pro Ultra'",
        "RECRAFT = 'Recraft v3'",
        "SD3_5 = 'Stable Diffusion 3.5 Medium'",
        "class AIImageGeneratorBlock(Block):\n\n    class Input(BlockSchema):\n        credentials: CredentialsMetaInput[Literal[ProviderName.REPLICATE], Literal['api_key']] = CredentialsField(description='Enter your Replicate API key to access the image generation API. You can obtain an API key from https://replicate.com/account/api-tokens.')\n        prompt: str = SchemaField(description='Text prompt for image generation', placeholder=\"e.g., 'A red panda using a laptop in a snowy forest'\", title='Prompt')\n        model: ImageGenModel = SchemaField(description='The AI model to use for image generation', default=ImageGenModel.SD3_5, title='Model')\n        size: ImageSize = SchemaField(description='Format of the generated image:\\n- Square: Perfect for profile pictures, icons\\n- Landscape: Traditional photo format\\n- Portrait: Vertical photos, portraits\\n- Wide: Cinematic format, desktop wallpapers\\n- Tall: Mobile wallpapers, social media stories', default=ImageSize.SQUARE, title='Image Format')\n        style: ImageStyle = SchemaField(description='Visual style for the generated image', default=ImageStyle.ANY, title='Image Style')\n\n    class Output(BlockSchema):\n        image_url: str = SchemaField(description='URL of the generated image')\n        error: str = SchemaField(description='Error message if generation failed')\n\n    def __init__(self):\n        super().__init__(id='ed1ae7a0-b770-4089-b520-1f0005fad19a', description='Generate images using various AI models through a unified interface', categories={BlockCategory.AI}, input_schema=AIImageGeneratorBlock.Input, output_schema=AIImageGeneratorBlock.Output, test_input={'credentials': TEST_CREDENTIALS_INPUT, 'prompt': \"An octopus using a laptop in a snowy forest with 'AutoGPT' clearly visible on the screen\", 'model': ImageGenModel.RECRAFT, 'size': ImageSize.SQUARE, 'style': ImageStyle.REALISTIC}, test_credentials=TEST_CREDENTIALS, test_output=[('image_url', 'https://replicate.delivery/generated-image.webp')], test_mock={'_run_client': lambda *args, **kwargs: 'https://replicate.delivery/generated-image.webp'})\n\n    def _run_client(self, credentials: APIKeyCredentials, model_name: str, input_params: dict):\n        try:\n            client = replicate.Client(api_token=credentials.api_key.get_secret_value())\n            output = client.run(model_name, input=input_params, wait=False)\n            if isinstance(output, list) and len(output) > 0:\n                if isinstance(output[0], FileOutput):\n                    result_url = output[0].url\n                else:\n                    result_url = output[0]\n            elif isinstance(output, FileOutput):\n                result_url = output.url\n            elif isinstance(output, str):\n                result_url = output\n            else:\n                result_url = None\n            return result_url\n        except TypeError as e:\n            raise TypeError(f'Error during model execution: {e}')\n        except Exception as e:\n            raise RuntimeError(f'Unexpected error during model execution: {e}')\n\n    def generate_image(self, input_data: Input, credentials: APIKeyCredentials):\n        try:\n            modified_prompt = input_data.prompt\n            if input_data.model not in [ImageGenModel.RECRAFT]:\n                style_prefix = self._style_to_prompt_prefix(input_data.style)\n                modified_prompt = f'{style_prefix} {modified_prompt}'.strip()\n            if input_data.model == ImageGenModel.SD3_5:\n                input_params = {'prompt': modified_prompt, 'aspect_ratio': SIZE_TO_SD_RATIO[input_data.size], 'output_format': 'webp', 'output_quality': 90, 'steps': 40, 'cfg_scale': 7.0}\n                output = self._run_client(credentials, 'stability-ai/stable-diffusion-3.5-medium', input_params)\n                return output\n            elif input_data.model == ImageGenModel.FLUX:\n                (width, height) = SIZE_TO_FLUX_DIMENSIONS[input_data.size]\n                input_params = {'prompt': modified_prompt, 'width': width, 'height': height, 'aspect_ratio': SIZE_TO_FLUX_RATIO[input_data.size], 'output_format': 'jpg', 'output_quality': 90}\n                output = self._run_client(credentials, 'black-forest-labs/flux-1.1-pro', input_params)\n                return output\n            elif input_data.model == ImageGenModel.FLUX_ULTRA:\n                (width, height) = SIZE_TO_FLUX_DIMENSIONS[input_data.size]\n                input_params = {'prompt': modified_prompt, 'width': width, 'height': height, 'aspect_ratio': SIZE_TO_FLUX_RATIO[input_data.size], 'output_format': 'jpg', 'output_quality': 90}\n                output = self._run_client(credentials, 'black-forest-labs/flux-1.1-pro-ultra', input_params)\n                return output\n            elif input_data.model == ImageGenModel.RECRAFT:\n                input_params = {'prompt': input_data.prompt, 'size': SIZE_TO_RECRAFT_DIMENSIONS[input_data.size], 'style': input_data.style.value}\n                output = self._run_client(credentials, 'recraft-ai/recraft-v3', input_params)\n                return output\n        except Exception as e:\n            raise RuntimeError(f'Failed to generate image: {str(e)}')\n\n    def _style_to_prompt_prefix(self, style: ImageStyle) -> str:\n        \"\"\"\n        Convert a style enum to a prompt prefix for models without native style support.\n        \"\"\"\n        if style == ImageStyle.ANY:\n            return ''\n        style_map = {ImageStyle.REALISTIC: 'photorealistic', ImageStyle.REALISTIC_BW: 'black and white photograph', ImageStyle.REALISTIC_HDR: 'HDR photograph', ImageStyle.REALISTIC_NATURAL: 'natural light photograph', ImageStyle.REALISTIC_STUDIO: 'studio portrait photograph', ImageStyle.REALISTIC_ENTERPRISE: 'enterprise photograph', ImageStyle.REALISTIC_HARD_FLASH: 'hard flash photograph', ImageStyle.REALISTIC_MOTION_BLUR: 'motion blur photograph', ImageStyle.DIGITAL_ART: 'digital art', ImageStyle.PIXEL_ART: 'pixel art', ImageStyle.HAND_DRAWN: 'hand drawn illustration', ImageStyle.GRAIN: 'grainy digital illustration', ImageStyle.SKETCH: 'sketchy illustration', ImageStyle.POSTER: '2D art poster', ImageStyle.POSTER_2: 'alternate 2D art poster', ImageStyle.HANDMADE_3D: 'handmade 3D illustration', ImageStyle.HAND_DRAWN_OUTLINE: 'hand drawn outline illustration', ImageStyle.ENGRAVING_COLOR: 'color engraving illustration'}\n        style_text = style_map.get(style, '')\n        return f'{style_text} of' if style_text else ''\n\n    def run(self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs):\n        try:\n            url = self.generate_image(input_data, credentials)\n            if url:\n                yield ('image_url', url)\n            else:\n                yield ('error', 'Image generation returned an empty result.')\n        except Exception as e:\n            yield ('error', str(e))",
        "class Input(BlockSchema):\n    credentials: CredentialsMetaInput[Literal[ProviderName.REPLICATE], Literal['api_key']] = CredentialsField(description='Enter your Replicate API key to access the image generation API. You can obtain an API key from https://replicate.com/account/api-tokens.')\n    prompt: str = SchemaField(description='Text prompt for image generation', placeholder=\"e.g., 'A red panda using a laptop in a snowy forest'\", title='Prompt')\n    model: ImageGenModel = SchemaField(description='The AI model to use for image generation', default=ImageGenModel.SD3_5, title='Model')\n    size: ImageSize = SchemaField(description='Format of the generated image:\\n- Square: Perfect for profile pictures, icons\\n- Landscape: Traditional photo format\\n- Portrait: Vertical photos, portraits\\n- Wide: Cinematic format, desktop wallpapers\\n- Tall: Mobile wallpapers, social media stories', default=ImageSize.SQUARE, title='Image Format')\n    style: ImageStyle = SchemaField(description='Visual style for the generated image', default=ImageStyle.ANY, title='Image Style')",
        "credentials: CredentialsMetaInput[Literal[ProviderName.REPLICATE], Literal['api_key']] = CredentialsField(description='Enter your Replicate API key to access the image generation API. You can obtain an API key from https://replicate.com/account/api-tokens.')",
        "prompt: str = SchemaField(description='Text prompt for image generation', placeholder=\"e.g., 'A red panda using a laptop in a snowy forest'\", title='Prompt')",
        "model: ImageGenModel = SchemaField(description='The AI model to use for image generation', default=ImageGenModel.SD3_5, title='Model')",
        "size: ImageSize = SchemaField(description='Format of the generated image:\\n- Square: Perfect for profile pictures, icons\\n- Landscape: Traditional photo format\\n- Portrait: Vertical photos, portraits\\n- Wide: Cinematic format, desktop wallpapers\\n- Tall: Mobile wallpapers, social media stories', default=ImageSize.SQUARE, title='Image Format')",
        "style: ImageStyle = SchemaField(description='Visual style for the generated image', default=ImageStyle.ANY, title='Image Style')",
        "class Output(BlockSchema):\n    image_url: str = SchemaField(description='URL of the generated image')\n    error: str = SchemaField(description='Error message if generation failed')",
        "image_url: str = SchemaField(description='URL of the generated image')",
        "error: str = SchemaField(description='Error message if generation failed')",
        "def __init__(self):\n    super().__init__(id='ed1ae7a0-b770-4089-b520-1f0005fad19a', description='Generate images using various AI models through a unified interface', categories={BlockCategory.AI}, input_schema=AIImageGeneratorBlock.Input, output_schema=AIImageGeneratorBlock.Output, test_input={'credentials': TEST_CREDENTIALS_INPUT, 'prompt': \"An octopus using a laptop in a snowy forest with 'AutoGPT' clearly visible on the screen\", 'model': ImageGenModel.RECRAFT, 'size': ImageSize.SQUARE, 'style': ImageStyle.REALISTIC}, test_credentials=TEST_CREDENTIALS, test_output=[('image_url', 'https://replicate.delivery/generated-image.webp')], test_mock={'_run_client': lambda *args, **kwargs: 'https://replicate.delivery/generated-image.webp'})",
        "super().__init__()",
        "def _run_client(self, credentials: APIKeyCredentials, model_name: str, input_params: dict):\n    try:\n        client = replicate.Client(api_token=credentials.api_key.get_secret_value())\n        output = client.run(model_name, input=input_params, wait=False)\n        if isinstance(output, list) and len(output) > 0:\n            if isinstance(output[0], FileOutput):\n                result_url = output[0].url\n            else:\n                result_url = output[0]\n        elif isinstance(output, FileOutput):\n            result_url = output.url\n        elif isinstance(output, str):\n            result_url = output\n        else:\n            result_url = None\n        return result_url\n    except TypeError as e:\n        raise TypeError(f'Error during model execution: {e}')\n    except Exception as e:\n        raise RuntimeError(f'Unexpected error during model execution: {e}')",
        "try:\n    client = replicate.Client(api_token=credentials.api_key.get_secret_value())\n    output = client.run(model_name, input=input_params, wait=False)\n    if isinstance(output, list) and len(output) > 0:\n        if isinstance(output[0], FileOutput):\n            result_url = output[0].url\n        else:\n            result_url = output[0]\n    elif isinstance(output, FileOutput):\n        result_url = output.url\n    elif isinstance(output, str):\n        result_url = output\n    else:\n        result_url = None\n    return result_url\nexcept TypeError as e:\n    raise TypeError(f'Error during model execution: {e}')\nexcept Exception as e:\n    raise RuntimeError(f'Unexpected error during model execution: {e}')",
        "client = replicate.Client(api_token=credentials.api_key.get_secret_value())",
        "output = client.run(model_name, input=input_params, wait=False)",
        "isinstance(output, list) and len(output) > 0"
      ]
    },
    {
      "id": "2",
      "type": "block",
      "statements": [
        "isinstance(output[0], FileOutput)"
      ]
    },
    {
      "id": "3",
      "type": "block",
      "statements": [
        "isinstance(output, FileOutput)"
      ]
    },
    {
      "id": "4",
      "type": "block",
      "statements": [
        "return result_url"
      ]
    },
    {
      "id": "5",
      "type": "block",
      "statements": [
        "result_url = output[0].url"
      ]
    },
    {
      "id": "6",
      "type": "block",
      "statements": [
        "result_url = output[0]"
      ]
    },
    {
      "id": "7",
      "type": "block",
      "statements": []
    },
    {
      "id": "8",
      "type": "block",
      "statements": [
        "result_url = output.url"
      ]
    },
    {
      "id": "9",
      "type": "block",
      "statements": [
        "isinstance(output, str)"
      ]
    },
    {
      "id": "10",
      "type": "block",
      "statements": []
    },
    {
      "id": "11",
      "type": "block",
      "statements": [
        "result_url = output"
      ]
    },
    {
      "id": "12",
      "type": "block",
      "statements": [
        "result_url = None"
      ]
    },
    {
      "id": "13",
      "type": "block",
      "statements": []
    },
    {
      "id": "14",
      "type": "block",
      "statements": [
        "raise TypeError(f'Error during model execution: {e}')",
        "raise RuntimeError(f'Unexpected error during model execution: {e}')",
        "def generate_image(self, input_data: Input, credentials: APIKeyCredentials):\n    try:\n        modified_prompt = input_data.prompt\n        if input_data.model not in [ImageGenModel.RECRAFT]:\n            style_prefix = self._style_to_prompt_prefix(input_data.style)\n            modified_prompt = f'{style_prefix} {modified_prompt}'.strip()\n        if input_data.model == ImageGenModel.SD3_5:\n            input_params = {'prompt': modified_prompt, 'aspect_ratio': SIZE_TO_SD_RATIO[input_data.size], 'output_format': 'webp', 'output_quality': 90, 'steps': 40, 'cfg_scale': 7.0}\n            output = self._run_client(credentials, 'stability-ai/stable-diffusion-3.5-medium', input_params)\n            return output\n        elif input_data.model == ImageGenModel.FLUX:\n            (width, height) = SIZE_TO_FLUX_DIMENSIONS[input_data.size]\n            input_params = {'prompt': modified_prompt, 'width': width, 'height': height, 'aspect_ratio': SIZE_TO_FLUX_RATIO[input_data.size], 'output_format': 'jpg', 'output_quality': 90}\n            output = self._run_client(credentials, 'black-forest-labs/flux-1.1-pro', input_params)\n            return output\n        elif input_data.model == ImageGenModel.FLUX_ULTRA:\n            (width, height) = SIZE_TO_FLUX_DIMENSIONS[input_data.size]\n            input_params = {'prompt': modified_prompt, 'width': width, 'height': height, 'aspect_ratio': SIZE_TO_FLUX_RATIO[input_data.size], 'output_format': 'jpg', 'output_quality': 90}\n            output = self._run_client(credentials, 'black-forest-labs/flux-1.1-pro-ultra', input_params)\n            return output\n        elif input_data.model == ImageGenModel.RECRAFT:\n            input_params = {'prompt': input_data.prompt, 'size': SIZE_TO_RECRAFT_DIMENSIONS[input_data.size], 'style': input_data.style.value}\n            output = self._run_client(credentials, 'recraft-ai/recraft-v3', input_params)\n            return output\n    except Exception as e:\n        raise RuntimeError(f'Failed to generate image: {str(e)}')",
        "try:\n    modified_prompt = input_data.prompt\n    if input_data.model not in [ImageGenModel.RECRAFT]:\n        style_prefix = self._style_to_prompt_prefix(input_data.style)\n        modified_prompt = f'{style_prefix} {modified_prompt}'.strip()\n    if input_data.model == ImageGenModel.SD3_5:\n        input_params = {'prompt': modified_prompt, 'aspect_ratio': SIZE_TO_SD_RATIO[input_data.size], 'output_format': 'webp', 'output_quality': 90, 'steps': 40, 'cfg_scale': 7.0}\n        output = self._run_client(credentials, 'stability-ai/stable-diffusion-3.5-medium', input_params)\n        return output\n    elif input_data.model == ImageGenModel.FLUX:\n        (width, height) = SIZE_TO_FLUX_DIMENSIONS[input_data.size]\n        input_params = {'prompt': modified_prompt, 'width': width, 'height': height, 'aspect_ratio': SIZE_TO_FLUX_RATIO[input_data.size], 'output_format': 'jpg', 'output_quality': 90}\n        output = self._run_client(credentials, 'black-forest-labs/flux-1.1-pro', input_params)\n        return output\n    elif input_data.model == ImageGenModel.FLUX_ULTRA:\n        (width, height) = SIZE_TO_FLUX_DIMENSIONS[input_data.size]\n        input_params = {'prompt': modified_prompt, 'width': width, 'height': height, 'aspect_ratio': SIZE_TO_FLUX_RATIO[input_data.size], 'output_format': 'jpg', 'output_quality': 90}\n        output = self._run_client(credentials, 'black-forest-labs/flux-1.1-pro-ultra', input_params)\n        return output\n    elif input_data.model == ImageGenModel.RECRAFT:\n        input_params = {'prompt': input_data.prompt, 'size': SIZE_TO_RECRAFT_DIMENSIONS[input_data.size], 'style': input_data.style.value}\n        output = self._run_client(credentials, 'recraft-ai/recraft-v3', input_params)\n        return output\nexcept Exception as e:\n    raise RuntimeError(f'Failed to generate image: {str(e)}')",
        "modified_prompt = input_data.prompt",
        "input_data.model NotIn [ImageGenModel.RECRAFT]"
      ]
    },
    {
      "id": "15",
      "type": "block",
      "statements": [
        "style_prefix = self._style_to_prompt_prefix(input_data.style)",
        "modified_prompt = f'{style_prefix} {modified_prompt}'.strip()"
      ]
    },
    {
      "id": "16",
      "type": "block",
      "statements": []
    },
    {
      "id": "17",
      "type": "block",
      "statements": [
        "input_data.model Eq ImageGenModel.SD3_5"
      ]
    },
    {
      "id": "18",
      "type": "block",
      "statements": [
        "input_params = {'prompt': modified_prompt, 'aspect_ratio': SIZE_TO_SD_RATIO[input_data.size], 'output_format': 'webp', 'output_quality': 90, 'steps': 40, 'cfg_scale': 7.0}",
        "output = self._run_client(credentials, 'stability-ai/stable-diffusion-3.5-medium', input_params)",
        "return output"
      ]
    },
    {
      "id": "19",
      "type": "block",
      "statements": [
        "input_data.model Eq ImageGenModel.FLUX"
      ]
    },
    {
      "id": "20",
      "type": "block",
      "statements": [
        "raise RuntimeError(f'Failed to generate image: {str(e)}')",
        "def _style_to_prompt_prefix(self, style: ImageStyle) -> str:\n    \"\"\"\n        Convert a style enum to a prompt prefix for models without native style support.\n        \"\"\"\n    if style == ImageStyle.ANY:\n        return ''\n    style_map = {ImageStyle.REALISTIC: 'photorealistic', ImageStyle.REALISTIC_BW: 'black and white photograph', ImageStyle.REALISTIC_HDR: 'HDR photograph', ImageStyle.REALISTIC_NATURAL: 'natural light photograph', ImageStyle.REALISTIC_STUDIO: 'studio portrait photograph', ImageStyle.REALISTIC_ENTERPRISE: 'enterprise photograph', ImageStyle.REALISTIC_HARD_FLASH: 'hard flash photograph', ImageStyle.REALISTIC_MOTION_BLUR: 'motion blur photograph', ImageStyle.DIGITAL_ART: 'digital art', ImageStyle.PIXEL_ART: 'pixel art', ImageStyle.HAND_DRAWN: 'hand drawn illustration', ImageStyle.GRAIN: 'grainy digital illustration', ImageStyle.SKETCH: 'sketchy illustration', ImageStyle.POSTER: '2D art poster', ImageStyle.POSTER_2: 'alternate 2D art poster', ImageStyle.HANDMADE_3D: 'handmade 3D illustration', ImageStyle.HAND_DRAWN_OUTLINE: 'hand drawn outline illustration', ImageStyle.ENGRAVING_COLOR: 'color engraving illustration'}\n    style_text = style_map.get(style, '')\n    return f'{style_text} of' if style_text else ''",
        "'\\n        Convert a style enum to a prompt prefix for models without native style support.\\n        '",
        "style Eq ImageStyle.ANY"
      ]
    },
    {
      "id": "21",
      "type": "block",
      "statements": [
        "(width, height) = SIZE_TO_FLUX_DIMENSIONS[input_data.size]",
        "input_params = {'prompt': modified_prompt, 'width': width, 'height': height, 'aspect_ratio': SIZE_TO_FLUX_RATIO[input_data.size], 'output_format': 'jpg', 'output_quality': 90}",
        "output = self._run_client(credentials, 'black-forest-labs/flux-1.1-pro', input_params)",
        "return output"
      ]
    },
    {
      "id": "22",
      "type": "block",
      "statements": [
        "input_data.model Eq ImageGenModel.FLUX_ULTRA"
      ]
    },
    {
      "id": "23",
      "type": "block",
      "statements": []
    },
    {
      "id": "24",
      "type": "block",
      "statements": [
        "(width, height) = SIZE_TO_FLUX_DIMENSIONS[input_data.size]",
        "input_params = {'prompt': modified_prompt, 'width': width, 'height': height, 'aspect_ratio': SIZE_TO_FLUX_RATIO[input_data.size], 'output_format': 'jpg', 'output_quality': 90}",
        "output = self._run_client(credentials, 'black-forest-labs/flux-1.1-pro-ultra', input_params)",
        "return output"
      ]
    },
    {
      "id": "25",
      "type": "block",
      "statements": [
        "input_data.model Eq ImageGenModel.RECRAFT"
      ]
    },
    {
      "id": "26",
      "type": "block",
      "statements": []
    },
    {
      "id": "27",
      "type": "block",
      "statements": [
        "input_params = {'prompt': input_data.prompt, 'size': SIZE_TO_RECRAFT_DIMENSIONS[input_data.size], 'style': input_data.style.value}",
        "output = self._run_client(credentials, 'recraft-ai/recraft-v3', input_params)",
        "return output"
      ]
    },
    {
      "id": "28",
      "type": "block",
      "statements": []
    },
    {
      "id": "29",
      "type": "block",
      "statements": []
    },
    {
      "id": "30",
      "type": "block",
      "statements": [
        "return ''"
      ]
    },
    {
      "id": "31",
      "type": "block",
      "statements": []
    },
    {
      "id": "32",
      "type": "block",
      "statements": [
        "style_map = {ImageStyle.REALISTIC: 'photorealistic', ImageStyle.REALISTIC_BW: 'black and white photograph', ImageStyle.REALISTIC_HDR: 'HDR photograph', ImageStyle.REALISTIC_NATURAL: 'natural light photograph', ImageStyle.REALISTIC_STUDIO: 'studio portrait photograph', ImageStyle.REALISTIC_ENTERPRISE: 'enterprise photograph', ImageStyle.REALISTIC_HARD_FLASH: 'hard flash photograph', ImageStyle.REALISTIC_MOTION_BLUR: 'motion blur photograph', ImageStyle.DIGITAL_ART: 'digital art', ImageStyle.PIXEL_ART: 'pixel art', ImageStyle.HAND_DRAWN: 'hand drawn illustration', ImageStyle.GRAIN: 'grainy digital illustration', ImageStyle.SKETCH: 'sketchy illustration', ImageStyle.POSTER: '2D art poster', ImageStyle.POSTER_2: 'alternate 2D art poster', ImageStyle.HANDMADE_3D: 'handmade 3D illustration', ImageStyle.HAND_DRAWN_OUTLINE: 'hand drawn outline illustration', ImageStyle.ENGRAVING_COLOR: 'color engraving illustration'}",
        "style_text = style_map.get(style, '')",
        "return f'{style_text} of' if style_text else ''"
      ]
    },
    {
      "id": "33",
      "type": "block",
      "statements": [
        "def run(self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs):\n    try:\n        url = self.generate_image(input_data, credentials)\n        if url:\n            yield ('image_url', url)\n        else:\n            yield ('error', 'Image generation returned an empty result.')\n    except Exception as e:\n        yield ('error', str(e))",
        "try:\n    url = self.generate_image(input_data, credentials)\n    if url:\n        yield ('image_url', url)\n    else:\n        yield ('error', 'Image generation returned an empty result.')\nexcept Exception as e:\n    yield ('error', str(e))",
        "url = self.generate_image(input_data, credentials)",
        "url"
      ]
    },
    {
      "id": "34",
      "type": "block",
      "statements": [
        "(yield ('image_url', url))"
      ]
    },
    {
      "id": "35",
      "type": "block",
      "statements": [
        "(yield ('error', 'Image generation returned an empty result.'))"
      ]
    },
    {
      "id": "36",
      "type": "block",
      "statements": [
        "(yield ('error', str(e)))",
        "TEST_CREDENTIALS = APIKeyCredentials(id='01234567-89ab-cdef-0123-456789abcdef', provider='replicate', api_key=SecretStr('mock-replicate-api-key'), title='Mock Replicate API key', expires_at=None)",
        "TEST_CREDENTIALS_INPUT = {'provider': TEST_CREDENTIALS.provider, 'id': TEST_CREDENTIALS.id, 'type': TEST_CREDENTIALS.type, 'title': TEST_CREDENTIALS.title}"
      ]
    }
  ],
  "edges": [
    {
      "source": "1",
      "target": "2",
      "type": "true"
    },
    {
      "source": "1",
      "target": "3",
      "type": "false"
    },
    {
      "source": "2",
      "target": "5",
      "type": "true"
    },
    {
      "source": "2",
      "target": "6",
      "type": "false"
    },
    {
      "source": "3",
      "target": "8",
      "type": "true"
    },
    {
      "source": "3",
      "target": "9",
      "type": "false"
    },
    {
      "source": "5",
      "target": "7",
      "type": "next"
    },
    {
      "source": "6",
      "target": "7",
      "type": "next"
    },
    {
      "source": "7",
      "target": "4",
      "type": "next"
    },
    {
      "source": "8",
      "target": "10",
      "type": "next"
    },
    {
      "source": "9",
      "target": "11",
      "type": "true"
    },
    {
      "source": "9",
      "target": "12",
      "type": "false"
    },
    {
      "source": "10",
      "target": "4",
      "type": "next"
    },
    {
      "source": "11",
      "target": "13",
      "type": "next"
    },
    {
      "source": "12",
      "target": "13",
      "type": "next"
    },
    {
      "source": "13",
      "target": "10",
      "type": "next"
    },
    {
      "source": "14",
      "target": "15",
      "type": "true"
    },
    {
      "source": "14",
      "target": "16",
      "type": "false"
    },
    {
      "source": "15",
      "target": "17",
      "type": "next"
    },
    {
      "source": "16",
      "target": "17",
      "type": "next"
    },
    {
      "source": "17",
      "target": "18",
      "type": "true"
    },
    {
      "source": "17",
      "target": "19",
      "type": "false"
    },
    {
      "source": "19",
      "target": "21",
      "type": "true"
    },
    {
      "source": "19",
      "target": "22",
      "type": "false"
    },
    {
      "source": "20",
      "target": "30",
      "type": "true"
    },
    {
      "source": "20",
      "target": "31",
      "type": "false"
    },
    {
      "source": "22",
      "target": "24",
      "type": "true"
    },
    {
      "source": "22",
      "target": "25",
      "type": "false"
    },
    {
      "source": "23",
      "target": "20",
      "type": "next"
    },
    {
      "source": "25",
      "target": "27",
      "type": "true"
    },
    {
      "source": "25",
      "target": "28",
      "type": "false"
    },
    {
      "source": "26",
      "target": "23",
      "type": "next"
    },
    {
      "source": "28",
      "target": "29",
      "type": "next"
    },
    {
      "source": "29",
      "target": "26",
      "type": "next"
    },
    {
      "source": "31",
      "target": "32",
      "type": "next"
    },
    {
      "source": "33",
      "target": "34",
      "type": "true"
    },
    {
      "source": "33",
      "target": "35",
      "type": "false"
    },
    {
      "source": "34",
      "target": "36",
      "type": "next"
    },
    {
      "source": "35",
      "target": "36",
      "type": "next"
    }
  ]
}