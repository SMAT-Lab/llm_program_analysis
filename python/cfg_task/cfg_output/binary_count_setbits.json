{
  "nodes": [
    {
      "id": "1",
      "type": "block",
      "statements": [
        "def binary_count_setbits(a: int) -> int:\n    \"\"\"\n    Take in 1 integer, return a number that is\n    the number of 1's in binary representation of that number.\n\n    >>> binary_count_setbits(25)\n    3\n    >>> binary_count_setbits(36)\n    2\n    >>> binary_count_setbits(16)\n    1\n    >>> binary_count_setbits(58)\n    4\n    >>> binary_count_setbits(4294967295)\n    32\n    >>> binary_count_setbits(0)\n    0\n    >>> binary_count_setbits(-10)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input value must be a positive integer\n    >>> binary_count_setbits(0.8)\n    Traceback (most recent call last):\n        ...\n    TypeError: Input value must be a 'int' type\n    >>> binary_count_setbits(\"0\")\n    Traceback (most recent call last):\n        ...\n    TypeError: '<' not supported between instances of 'str' and 'int'\n    \"\"\"\n    if a < 0:\n        raise ValueError('Input value must be a positive integer')\n    elif isinstance(a, float):\n        raise TypeError(\"Input value must be a 'int' type\")\n    return bin(a).count('1')",
        "'\\n    Take in 1 integer, return a number that is\\n    the number of 1\\'s in binary representation of that number.\\n\\n    >>> binary_count_setbits(25)\\n    3\\n    >>> binary_count_setbits(36)\\n    2\\n    >>> binary_count_setbits(16)\\n    1\\n    >>> binary_count_setbits(58)\\n    4\\n    >>> binary_count_setbits(4294967295)\\n    32\\n    >>> binary_count_setbits(0)\\n    0\\n    >>> binary_count_setbits(-10)\\n    Traceback (most recent call last):\\n        ...\\n    ValueError: Input value must be a positive integer\\n    >>> binary_count_setbits(0.8)\\n    Traceback (most recent call last):\\n        ...\\n    TypeError: Input value must be a \\'int\\' type\\n    >>> binary_count_setbits(\"0\")\\n    Traceback (most recent call last):\\n        ...\\n    TypeError: \\'<\\' not supported between instances of \\'str\\' and \\'int\\'\\n    '",
        "a Lt 0"
      ]
    },
    {
      "id": "2",
      "type": "block",
      "statements": [
        "raise ValueError('Input value must be a positive integer')"
      ]
    },
    {
      "id": "3",
      "type": "block",
      "statements": [
        "isinstance(a, float)"
      ]
    },
    {
      "id": "4",
      "type": "block",
      "statements": [
        "return bin(a).count('1')"
      ]
    },
    {
      "id": "5",
      "type": "block",
      "statements": [
        "raise TypeError(\"Input value must be a 'int' type\")"
      ]
    },
    {
      "id": "6",
      "type": "block",
      "statements": []
    },
    {
      "id": "7",
      "type": "block",
      "statements": []
    },
    {
      "id": "8",
      "type": "block",
      "statements": [
        "__name__ Eq '__main__'"
      ]
    },
    {
      "id": "9",
      "type": "block",
      "statements": [
        "import doctest",
        "doctest.testmod()"
      ]
    },
    {
      "id": "10",
      "type": "block",
      "statements": []
    },
    {
      "id": "11",
      "type": "block",
      "statements": []
    }
  ],
  "edges": [
    {
      "source": "1",
      "target": "2",
      "type": "true"
    },
    {
      "source": "1",
      "target": "3",
      "type": "false"
    },
    {
      "source": "2",
      "target": "4",
      "type": "next"
    },
    {
      "source": "3",
      "target": "5",
      "type": "true"
    },
    {
      "source": "3",
      "target": "6",
      "type": "false"
    },
    {
      "source": "5",
      "target": "7",
      "type": "next"
    },
    {
      "source": "6",
      "target": "7",
      "type": "next"
    },
    {
      "source": "7",
      "target": "4",
      "type": "next"
    },
    {
      "source": "8",
      "target": "9",
      "type": "true"
    },
    {
      "source": "8",
      "target": "10",
      "type": "false"
    },
    {
      "source": "9",
      "target": "11",
      "type": "next"
    },
    {
      "source": "10",
      "target": "11",
      "type": "next"
    }
  ]
}