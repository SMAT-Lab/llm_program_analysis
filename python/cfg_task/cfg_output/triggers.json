{
  "nodes": [
    {
      "id": "1",
      "type": "block",
      "statements": [
        "import json",
        "import logging",
        "from pathlib import Path",
        "from pydantic import BaseModel",
        "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema, BlockWebhookConfig",
        "from backend.data.model import SchemaField",
        "from ._auth import TEST_CREDENTIALS, TEST_CREDENTIALS_INPUT, GithubCredentialsField, GithubCredentialsInput",
        "logger = logging.getLogger(__name__)",
        "class GitHubTriggerBase:\n\n    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField('repo')\n        repo: str = SchemaField(description='Repository to subscribe to.\\n\\n**Note:** Make sure your GitHub credentials have permissions to create webhooks on this repo.', placeholder='{owner}/{repo}')\n        payload: dict = SchemaField(hidden=True, default={})\n\n    class Output(BlockSchema):\n        payload: dict = SchemaField(description='The complete webhook payload that was received from GitHub. Includes information about the affected resource (e.g. pull request), the event, and the user who triggered the event.')\n        triggered_by_user: dict = SchemaField(description='Object representing the GitHub user who triggered the event')\n        error: str = SchemaField(description='Error message if the payload could not be processed')\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        yield ('payload', input_data.payload)\n        yield ('triggered_by_user', input_data.payload['sender'])",
        "class Input(BlockSchema):\n    credentials: GithubCredentialsInput = GithubCredentialsField('repo')\n    repo: str = SchemaField(description='Repository to subscribe to.\\n\\n**Note:** Make sure your GitHub credentials have permissions to create webhooks on this repo.', placeholder='{owner}/{repo}')\n    payload: dict = SchemaField(hidden=True, default={})",
        "credentials: GithubCredentialsInput = GithubCredentialsField('repo')",
        "repo: str = SchemaField(description='Repository to subscribe to.\\n\\n**Note:** Make sure your GitHub credentials have permissions to create webhooks on this repo.', placeholder='{owner}/{repo}')",
        "payload: dict = SchemaField(hidden=True, default={})",
        "class Output(BlockSchema):\n    payload: dict = SchemaField(description='The complete webhook payload that was received from GitHub. Includes information about the affected resource (e.g. pull request), the event, and the user who triggered the event.')\n    triggered_by_user: dict = SchemaField(description='Object representing the GitHub user who triggered the event')\n    error: str = SchemaField(description='Error message if the payload could not be processed')",
        "payload: dict = SchemaField(description='The complete webhook payload that was received from GitHub. Includes information about the affected resource (e.g. pull request), the event, and the user who triggered the event.')",
        "triggered_by_user: dict = SchemaField(description='Object representing the GitHub user who triggered the event')",
        "error: str = SchemaField(description='Error message if the payload could not be processed')",
        "def run(self, input_data: Input, **kwargs) -> BlockOutput:\n    yield ('payload', input_data.payload)\n    yield ('triggered_by_user', input_data.payload['sender'])",
        "(yield ('payload', input_data.payload))",
        "(yield ('triggered_by_user', input_data.payload['sender']))",
        "class GithubPullRequestTriggerBlock(GitHubTriggerBase, Block):\n    EXAMPLE_PAYLOAD_FILE = Path(__file__).parent / 'example_payloads' / 'pull_request.synchronize.json'\n\n    class Input(GitHubTriggerBase.Input):\n\n        class EventsFilter(BaseModel):\n            \"\"\"\n            https://docs.github.com/en/webhooks/webhook-events-and-payloads#pull_request\n            \"\"\"\n            opened: bool = False\n            edited: bool = False\n            closed: bool = False\n            reopened: bool = False\n            synchronize: bool = False\n            assigned: bool = False\n            unassigned: bool = False\n            labeled: bool = False\n            unlabeled: bool = False\n            converted_to_draft: bool = False\n            locked: bool = False\n            unlocked: bool = False\n            enqueued: bool = False\n            dequeued: bool = False\n            milestoned: bool = False\n            demilestoned: bool = False\n            ready_for_review: bool = False\n            review_requested: bool = False\n            review_request_removed: bool = False\n            auto_merge_enabled: bool = False\n            auto_merge_disabled: bool = False\n        events: EventsFilter = SchemaField(title='Events', description='The events to subscribe to')\n\n    class Output(GitHubTriggerBase.Output):\n        event: str = SchemaField(description=\"The PR event that triggered the webhook (e.g. 'opened')\")\n        number: int = SchemaField(description='The number of the affected pull request')\n        pull_request: dict = SchemaField(description='Object representing the affected pull request')\n        pull_request_url: str = SchemaField(description='The URL of the affected pull request')\n\n    def __init__(self):\n        from backend.integrations.webhooks.github import GithubWebhookType\n        example_payload = json.loads(self.EXAMPLE_PAYLOAD_FILE.read_text(encoding='utf-8'))\n        super().__init__(id='6c60ec01-8128-419e-988f-96a063ee2fea', description='This block triggers on pull request events and outputs the event type and payload.', categories={BlockCategory.DEVELOPER_TOOLS, BlockCategory.INPUT}, input_schema=GithubPullRequestTriggerBlock.Input, output_schema=GithubPullRequestTriggerBlock.Output, webhook_config=BlockWebhookConfig(provider='github', webhook_type=GithubWebhookType.REPO, resource_format='{repo}', event_filter_input='events', event_format='pull_request.{event}'), test_input={'repo': 'Significant-Gravitas/AutoGPT', 'events': {'opened': True, 'synchronize': True}, 'credentials': TEST_CREDENTIALS_INPUT, 'payload': example_payload}, test_credentials=TEST_CREDENTIALS, test_output=[('payload', example_payload), ('triggered_by_user', example_payload['sender']), ('event', example_payload['action']), ('number', example_payload['number']), ('pull_request', example_payload['pull_request']), ('pull_request_url', example_payload['pull_request']['html_url'])])\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        yield from super().run(input_data, **kwargs)\n        yield ('event', input_data.payload['action'])\n        yield ('number', input_data.payload['number'])\n        yield ('pull_request', input_data.payload['pull_request'])\n        yield ('pull_request_url', input_data.payload['pull_request']['html_url'])",
        "EXAMPLE_PAYLOAD_FILE = Path(__file__).parent / 'example_payloads' / 'pull_request.synchronize.json'",
        "class Input(GitHubTriggerBase.Input):\n\n    class EventsFilter(BaseModel):\n        \"\"\"\n            https://docs.github.com/en/webhooks/webhook-events-and-payloads#pull_request\n            \"\"\"\n        opened: bool = False\n        edited: bool = False\n        closed: bool = False\n        reopened: bool = False\n        synchronize: bool = False\n        assigned: bool = False\n        unassigned: bool = False\n        labeled: bool = False\n        unlabeled: bool = False\n        converted_to_draft: bool = False\n        locked: bool = False\n        unlocked: bool = False\n        enqueued: bool = False\n        dequeued: bool = False\n        milestoned: bool = False\n        demilestoned: bool = False\n        ready_for_review: bool = False\n        review_requested: bool = False\n        review_request_removed: bool = False\n        auto_merge_enabled: bool = False\n        auto_merge_disabled: bool = False\n    events: EventsFilter = SchemaField(title='Events', description='The events to subscribe to')",
        "class EventsFilter(BaseModel):\n    \"\"\"\n            https://docs.github.com/en/webhooks/webhook-events-and-payloads#pull_request\n            \"\"\"\n    opened: bool = False\n    edited: bool = False\n    closed: bool = False\n    reopened: bool = False\n    synchronize: bool = False\n    assigned: bool = False\n    unassigned: bool = False\n    labeled: bool = False\n    unlabeled: bool = False\n    converted_to_draft: bool = False\n    locked: bool = False\n    unlocked: bool = False\n    enqueued: bool = False\n    dequeued: bool = False\n    milestoned: bool = False\n    demilestoned: bool = False\n    ready_for_review: bool = False\n    review_requested: bool = False\n    review_request_removed: bool = False\n    auto_merge_enabled: bool = False\n    auto_merge_disabled: bool = False",
        "'\\n            https://docs.github.com/en/webhooks/webhook-events-and-payloads#pull_request\\n            '",
        "opened: bool = False",
        "edited: bool = False",
        "closed: bool = False",
        "reopened: bool = False",
        "synchronize: bool = False",
        "assigned: bool = False",
        "unassigned: bool = False",
        "labeled: bool = False",
        "unlabeled: bool = False",
        "converted_to_draft: bool = False",
        "locked: bool = False",
        "unlocked: bool = False",
        "enqueued: bool = False",
        "dequeued: bool = False",
        "milestoned: bool = False",
        "demilestoned: bool = False",
        "ready_for_review: bool = False",
        "review_requested: bool = False",
        "review_request_removed: bool = False",
        "auto_merge_enabled: bool = False",
        "auto_merge_disabled: bool = False",
        "events: EventsFilter = SchemaField(title='Events', description='The events to subscribe to')",
        "class Output(GitHubTriggerBase.Output):\n    event: str = SchemaField(description=\"The PR event that triggered the webhook (e.g. 'opened')\")\n    number: int = SchemaField(description='The number of the affected pull request')\n    pull_request: dict = SchemaField(description='Object representing the affected pull request')\n    pull_request_url: str = SchemaField(description='The URL of the affected pull request')",
        "event: str = SchemaField(description=\"The PR event that triggered the webhook (e.g. 'opened')\")",
        "number: int = SchemaField(description='The number of the affected pull request')",
        "pull_request: dict = SchemaField(description='Object representing the affected pull request')",
        "pull_request_url: str = SchemaField(description='The URL of the affected pull request')",
        "def __init__(self):\n    from backend.integrations.webhooks.github import GithubWebhookType\n    example_payload = json.loads(self.EXAMPLE_PAYLOAD_FILE.read_text(encoding='utf-8'))\n    super().__init__(id='6c60ec01-8128-419e-988f-96a063ee2fea', description='This block triggers on pull request events and outputs the event type and payload.', categories={BlockCategory.DEVELOPER_TOOLS, BlockCategory.INPUT}, input_schema=GithubPullRequestTriggerBlock.Input, output_schema=GithubPullRequestTriggerBlock.Output, webhook_config=BlockWebhookConfig(provider='github', webhook_type=GithubWebhookType.REPO, resource_format='{repo}', event_filter_input='events', event_format='pull_request.{event}'), test_input={'repo': 'Significant-Gravitas/AutoGPT', 'events': {'opened': True, 'synchronize': True}, 'credentials': TEST_CREDENTIALS_INPUT, 'payload': example_payload}, test_credentials=TEST_CREDENTIALS, test_output=[('payload', example_payload), ('triggered_by_user', example_payload['sender']), ('event', example_payload['action']), ('number', example_payload['number']), ('pull_request', example_payload['pull_request']), ('pull_request_url', example_payload['pull_request']['html_url'])])",
        "from backend.integrations.webhooks.github import GithubWebhookType",
        "example_payload = json.loads(self.EXAMPLE_PAYLOAD_FILE.read_text(encoding='utf-8'))",
        "super().__init__()",
        "def run(self, input_data: Input, **kwargs) -> BlockOutput:\n    yield from super().run(input_data, **kwargs)\n    yield ('event', input_data.payload['action'])\n    yield ('number', input_data.payload['number'])\n    yield ('pull_request', input_data.payload['pull_request'])\n    yield ('pull_request_url', input_data.payload['pull_request']['html_url'])",
        "(yield from super().run(input_data, **kwargs))",
        "(yield ('event', input_data.payload['action']))",
        "(yield ('number', input_data.payload['number']))",
        "(yield ('pull_request', input_data.payload['pull_request']))",
        "(yield ('pull_request_url', input_data.payload['pull_request']['html_url']))"
      ]
    }
  ],
  "edges": []
}