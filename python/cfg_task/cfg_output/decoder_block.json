{
  "nodes": [
    {
      "id": "1",
      "type": "block",
      "statements": [
        "import codecs",
        "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema",
        "from backend.data.model import SchemaField",
        "class TextDecoderBlock(Block):\n\n    class Input(BlockSchema):\n        text: str = SchemaField(description='A string containing escaped characters to be decoded', placeholder='Your entire text block with \\\\n and \\\\\" escaped characters')\n\n    class Output(BlockSchema):\n        decoded_text: str = SchemaField(description='The decoded text with escape sequences processed')\n\n    def __init__(self):\n        super().__init__(id='2570e8fe-8447-43ed-84c7-70d657923231', description='Decodes a string containing escape sequences into actual text', categories={BlockCategory.TEXT}, input_schema=TextDecoderBlock.Input, output_schema=TextDecoderBlock.Output, test_input={'text': 'Hello\\nWorld!\\nThis is a \"quoted\" string.'}, test_output=[('decoded_text', 'Hello\\nWorld!\\nThis is a \"quoted\" string.')])\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        decoded_text = codecs.decode(input_data.text, 'unicode_escape')\n        yield ('decoded_text', decoded_text)",
        "class Input(BlockSchema):\n    text: str = SchemaField(description='A string containing escaped characters to be decoded', placeholder='Your entire text block with \\\\n and \\\\\" escaped characters')",
        "text: str = SchemaField(description='A string containing escaped characters to be decoded', placeholder='Your entire text block with \\\\n and \\\\\" escaped characters')",
        "class Output(BlockSchema):\n    decoded_text: str = SchemaField(description='The decoded text with escape sequences processed')",
        "decoded_text: str = SchemaField(description='The decoded text with escape sequences processed')",
        "def __init__(self):\n    super().__init__(id='2570e8fe-8447-43ed-84c7-70d657923231', description='Decodes a string containing escape sequences into actual text', categories={BlockCategory.TEXT}, input_schema=TextDecoderBlock.Input, output_schema=TextDecoderBlock.Output, test_input={'text': 'Hello\\nWorld!\\nThis is a \"quoted\" string.'}, test_output=[('decoded_text', 'Hello\\nWorld!\\nThis is a \"quoted\" string.')])",
        "super().__init__()",
        "def run(self, input_data: Input, **kwargs) -> BlockOutput:\n    decoded_text = codecs.decode(input_data.text, 'unicode_escape')\n    yield ('decoded_text', decoded_text)",
        "decoded_text = codecs.decode(input_data.text, 'unicode_escape')",
        "(yield ('decoded_text', decoded_text))"
      ]
    }
  ],
  "edges": []
}