{
  "nodes": [
    {
      "id": "1",
      "type": "block",
      "statements": [
        "import logging",
        "from colorama import Fore, Style",
        "from google.cloud.logging_v2.handlers import CloudLoggingFilter, StructuredLogHandler",
        "from .utils import remove_color_codes",
        "class FancyConsoleFormatter(logging.Formatter):\n    \"\"\"\n    A custom logging formatter designed for console output.\n\n    This formatter enhances the standard logging output with color coding. The color\n    coding is based on the level of the log message, making it easier to distinguish\n    between different types of messages in the console output.\n\n    The color for each level is defined in the LEVEL_COLOR_MAP class attribute.\n    \"\"\"\n    LEVEL_COLOR_MAP = {logging.DEBUG: Fore.LIGHTBLACK_EX, logging.INFO: Fore.BLUE, logging.WARNING: Fore.YELLOW, logging.ERROR: Fore.RED, logging.CRITICAL: Fore.RED + Style.BRIGHT}\n\n    def format(self, record: logging.LogRecord) -> str:\n        if not hasattr(record, 'msg'):\n            record.msg = ''\n        elif type(record.msg) is not str:\n            record.msg = str(record.msg)\n        level_color = ''\n        if record.levelno in self.LEVEL_COLOR_MAP:\n            level_color = self.LEVEL_COLOR_MAP[record.levelno]\n            record.levelname = f'{level_color}{record.levelname}{Style.RESET_ALL}'\n        color = getattr(record, 'color', level_color)\n        color_is_specified = hasattr(record, 'color')\n        if color and (record.levelno != logging.INFO or color_is_specified):\n            record.msg = f'{color}{record.msg}{Style.RESET_ALL}'\n        return super().format(record)",
        "'\\n    A custom logging formatter designed for console output.\\n\\n    This formatter enhances the standard logging output with color coding. The color\\n    coding is based on the level of the log message, making it easier to distinguish\\n    between different types of messages in the console output.\\n\\n    The color for each level is defined in the LEVEL_COLOR_MAP class attribute.\\n    '",
        "LEVEL_COLOR_MAP = {logging.DEBUG: Fore.LIGHTBLACK_EX, logging.INFO: Fore.BLUE, logging.WARNING: Fore.YELLOW, logging.ERROR: Fore.RED, logging.CRITICAL: Fore.RED + Style.BRIGHT}",
        "def format(self, record: logging.LogRecord) -> str:\n    if not hasattr(record, 'msg'):\n        record.msg = ''\n    elif type(record.msg) is not str:\n        record.msg = str(record.msg)\n    level_color = ''\n    if record.levelno in self.LEVEL_COLOR_MAP:\n        level_color = self.LEVEL_COLOR_MAP[record.levelno]\n        record.levelname = f'{level_color}{record.levelname}{Style.RESET_ALL}'\n    color = getattr(record, 'color', level_color)\n    color_is_specified = hasattr(record, 'color')\n    if color and (record.levelno != logging.INFO or color_is_specified):\n        record.msg = f'{color}{record.msg}{Style.RESET_ALL}'\n    return super().format(record)",
        "not hasattr(record, 'msg')"
      ]
    },
    {
      "id": "2",
      "type": "block",
      "statements": [
        "record.msg = ''"
      ]
    },
    {
      "id": "3",
      "type": "block",
      "statements": [
        "type(record.msg) IsNot str"
      ]
    },
    {
      "id": "4",
      "type": "block",
      "statements": [
        "level_color = ''",
        "record.levelno In self.LEVEL_COLOR_MAP"
      ]
    },
    {
      "id": "5",
      "type": "block",
      "statements": [
        "record.msg = str(record.msg)"
      ]
    },
    {
      "id": "6",
      "type": "block",
      "statements": []
    },
    {
      "id": "7",
      "type": "block",
      "statements": []
    },
    {
      "id": "8",
      "type": "block",
      "statements": [
        "level_color = self.LEVEL_COLOR_MAP[record.levelno]",
        "record.levelname = f'{level_color}{record.levelname}{Style.RESET_ALL}'"
      ]
    },
    {
      "id": "9",
      "type": "block",
      "statements": []
    },
    {
      "id": "10",
      "type": "block",
      "statements": [
        "color = getattr(record, 'color', level_color)",
        "color_is_specified = hasattr(record, 'color')",
        "color and (record.levelno != logging.INFO or color_is_specified)"
      ]
    },
    {
      "id": "11",
      "type": "block",
      "statements": [
        "record.msg = f'{color}{record.msg}{Style.RESET_ALL}'"
      ]
    },
    {
      "id": "12",
      "type": "block",
      "statements": []
    },
    {
      "id": "13",
      "type": "block",
      "statements": [
        "return super().format(record)"
      ]
    },
    {
      "id": "14",
      "type": "block",
      "statements": [
        "class AGPTFormatter(FancyConsoleFormatter):\n\n    def __init__(self, *args, no_color: bool=False, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.no_color = no_color\n\n    def format(self, record: logging.LogRecord) -> str:\n        if not hasattr(record, 'msg'):\n            record.msg = ''\n        elif type(record.msg) is not str:\n            record.msg = str(record.msg)\n        if record.msg and (not getattr(record, 'preserve_color', False)):\n            record.msg = remove_color_codes(record.msg)\n        title = getattr(record, 'title', '')\n        title_color = getattr(record, 'title_color', '') or self.LEVEL_COLOR_MAP.get(record.levelno, '')\n        if title and title_color:\n            title = f'{title_color + Style.BRIGHT}{title}{Style.RESET_ALL}'\n        record.title = f'{title} ' if title else ''\n        if self.no_color:\n            return remove_color_codes(super().format(record))\n        else:\n            return super().format(record)",
        "def __init__(self, *args, no_color: bool=False, **kwargs):\n    super().__init__(*args, **kwargs)\n    self.no_color = no_color",
        "super().__init__(*args)",
        "self.no_color = no_color",
        "def format(self, record: logging.LogRecord) -> str:\n    if not hasattr(record, 'msg'):\n        record.msg = ''\n    elif type(record.msg) is not str:\n        record.msg = str(record.msg)\n    if record.msg and (not getattr(record, 'preserve_color', False)):\n        record.msg = remove_color_codes(record.msg)\n    title = getattr(record, 'title', '')\n    title_color = getattr(record, 'title_color', '') or self.LEVEL_COLOR_MAP.get(record.levelno, '')\n    if title and title_color:\n        title = f'{title_color + Style.BRIGHT}{title}{Style.RESET_ALL}'\n    record.title = f'{title} ' if title else ''\n    if self.no_color:\n        return remove_color_codes(super().format(record))\n    else:\n        return super().format(record)",
        "not hasattr(record, 'msg')"
      ]
    },
    {
      "id": "15",
      "type": "block",
      "statements": [
        "record.msg = ''"
      ]
    },
    {
      "id": "16",
      "type": "block",
      "statements": [
        "type(record.msg) IsNot str"
      ]
    },
    {
      "id": "17",
      "type": "block",
      "statements": [
        "record.msg and (not getattr(record, 'preserve_color', False))"
      ]
    },
    {
      "id": "18",
      "type": "block",
      "statements": [
        "record.msg = str(record.msg)"
      ]
    },
    {
      "id": "19",
      "type": "block",
      "statements": []
    },
    {
      "id": "20",
      "type": "block",
      "statements": []
    },
    {
      "id": "21",
      "type": "block",
      "statements": [
        "record.msg = remove_color_codes(record.msg)"
      ]
    },
    {
      "id": "22",
      "type": "block",
      "statements": []
    },
    {
      "id": "23",
      "type": "block",
      "statements": [
        "title = getattr(record, 'title', '')",
        "title_color = getattr(record, 'title_color', '') or self.LEVEL_COLOR_MAP.get(record.levelno, '')",
        "title and title_color"
      ]
    },
    {
      "id": "24",
      "type": "block",
      "statements": [
        "title = f'{title_color + Style.BRIGHT}{title}{Style.RESET_ALL}'"
      ]
    },
    {
      "id": "25",
      "type": "block",
      "statements": []
    },
    {
      "id": "26",
      "type": "block",
      "statements": [
        "record.title = f'{title} ' if title else ''",
        "self.no_color"
      ]
    },
    {
      "id": "27",
      "type": "block",
      "statements": [
        "return remove_color_codes(super().format(record))"
      ]
    },
    {
      "id": "28",
      "type": "block",
      "statements": [
        "return super().format(record)"
      ]
    },
    {
      "id": "29",
      "type": "block",
      "statements": [
        "class StructuredLoggingFormatter(StructuredLogHandler, logging.Formatter):\n\n    def __init__(self):\n        self.cloud_logging_filter = CloudLoggingFilter()\n        super().__init__()\n\n    def format(self, record: logging.LogRecord) -> str:\n        self.cloud_logging_filter.filter(record)\n        return super().format(record)",
        "def __init__(self):\n    self.cloud_logging_filter = CloudLoggingFilter()\n    super().__init__()",
        "self.cloud_logging_filter = CloudLoggingFilter()",
        "super().__init__()",
        "def format(self, record: logging.LogRecord) -> str:\n    self.cloud_logging_filter.filter(record)\n    return super().format(record)",
        "self.cloud_logging_filter.filter(record)",
        "return super().format(record)"
      ]
    }
  ],
  "edges": [
    {
      "source": "1",
      "target": "2",
      "type": "true"
    },
    {
      "source": "1",
      "target": "3",
      "type": "false"
    },
    {
      "source": "2",
      "target": "4",
      "type": "next"
    },
    {
      "source": "3",
      "target": "5",
      "type": "true"
    },
    {
      "source": "3",
      "target": "6",
      "type": "false"
    },
    {
      "source": "4",
      "target": "8",
      "type": "true"
    },
    {
      "source": "4",
      "target": "9",
      "type": "false"
    },
    {
      "source": "5",
      "target": "7",
      "type": "next"
    },
    {
      "source": "6",
      "target": "7",
      "type": "next"
    },
    {
      "source": "7",
      "target": "4",
      "type": "next"
    },
    {
      "source": "8",
      "target": "10",
      "type": "next"
    },
    {
      "source": "9",
      "target": "10",
      "type": "next"
    },
    {
      "source": "10",
      "target": "11",
      "type": "true"
    },
    {
      "source": "10",
      "target": "12",
      "type": "false"
    },
    {
      "source": "11",
      "target": "13",
      "type": "next"
    },
    {
      "source": "12",
      "target": "13",
      "type": "next"
    },
    {
      "source": "14",
      "target": "15",
      "type": "true"
    },
    {
      "source": "14",
      "target": "16",
      "type": "false"
    },
    {
      "source": "15",
      "target": "17",
      "type": "next"
    },
    {
      "source": "16",
      "target": "18",
      "type": "true"
    },
    {
      "source": "16",
      "target": "19",
      "type": "false"
    },
    {
      "source": "17",
      "target": "21",
      "type": "true"
    },
    {
      "source": "17",
      "target": "22",
      "type": "false"
    },
    {
      "source": "18",
      "target": "20",
      "type": "next"
    },
    {
      "source": "19",
      "target": "20",
      "type": "next"
    },
    {
      "source": "20",
      "target": "17",
      "type": "next"
    },
    {
      "source": "21",
      "target": "23",
      "type": "next"
    },
    {
      "source": "22",
      "target": "23",
      "type": "next"
    },
    {
      "source": "23",
      "target": "24",
      "type": "true"
    },
    {
      "source": "23",
      "target": "25",
      "type": "false"
    },
    {
      "source": "24",
      "target": "26",
      "type": "next"
    },
    {
      "source": "25",
      "target": "26",
      "type": "next"
    },
    {
      "source": "26",
      "target": "27",
      "type": "true"
    },
    {
      "source": "26",
      "target": "28",
      "type": "false"
    }
  ]
}