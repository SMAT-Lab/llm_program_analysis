{
  "nodes": [
    {
      "id": "1",
      "type": "block",
      "statements": [
        "from urllib.parse import urlparse",
        "from typing_extensions import TypedDict",
        "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema",
        "from backend.data.model import SchemaField",
        "from ._api import get_api",
        "from ._auth import TEST_CREDENTIALS, TEST_CREDENTIALS_INPUT, GithubCredentials, GithubCredentialsField, GithubCredentialsInput",
        "def is_github_url(url: str) -> bool:\n    return urlparse(url).netloc == 'github.com'",
        "return urlparse(url).netloc == 'github.com'"
      ]
    },
    {
      "id": "2",
      "type": "block",
      "statements": [
        "class GithubCommentBlock(Block):\n\n    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField('repo')\n        issue_url: str = SchemaField(description='URL of the GitHub issue or pull request', placeholder='https://github.com/owner/repo/issues/1')\n        comment: str = SchemaField(description='Comment to post on the issue or pull request', placeholder='Enter your comment')\n\n    class Output(BlockSchema):\n        id: int = SchemaField(description='ID of the created comment')\n        url: str = SchemaField(description='URL to the comment on GitHub')\n        error: str = SchemaField(description='Error message if the comment posting failed')\n\n    def __init__(self):\n        super().__init__(id='a8db4d8d-db1c-4a25-a1b0-416a8c33602b', description='This block posts a comment on a specified GitHub issue or pull request.', categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=GithubCommentBlock.Input, output_schema=GithubCommentBlock.Output, test_input=[{'issue_url': 'https://github.com/owner/repo/issues/1', 'comment': 'This is a test comment.', 'credentials': TEST_CREDENTIALS_INPUT}, {'issue_url': 'https://github.com/owner/repo/pull/1', 'comment': 'This is a test comment.', 'credentials': TEST_CREDENTIALS_INPUT}], test_credentials=TEST_CREDENTIALS, test_output=[('id', 1337), ('url', 'https://github.com/owner/repo/issues/1#issuecomment-1337'), ('id', 1337), ('url', 'https://github.com/owner/repo/issues/1#issuecomment-1337')], test_mock={'post_comment': lambda *args, **kwargs: (1337, 'https://github.com/owner/repo/issues/1#issuecomment-1337')})\n\n    @staticmethod\n    def post_comment(credentials: GithubCredentials, issue_url: str, body_text: str) -> tuple[int, str]:\n        api = get_api(credentials)\n        data = {'body': body_text}\n        if 'pull' in issue_url:\n            issue_url = issue_url.replace('pull', 'issues')\n        comments_url = issue_url + '/comments'\n        response = api.post(comments_url, json=data)\n        comment = response.json()\n        return (comment['id'], comment['html_url'])\n\n    def run(self, input_data: Input, *, credentials: GithubCredentials, **kwargs) -> BlockOutput:\n        (id, url) = self.post_comment(credentials, input_data.issue_url, input_data.comment)\n        yield ('id', id)\n        yield ('url', url)",
        "class Input(BlockSchema):\n    credentials: GithubCredentialsInput = GithubCredentialsField('repo')\n    issue_url: str = SchemaField(description='URL of the GitHub issue or pull request', placeholder='https://github.com/owner/repo/issues/1')\n    comment: str = SchemaField(description='Comment to post on the issue or pull request', placeholder='Enter your comment')",
        "credentials: GithubCredentialsInput = GithubCredentialsField('repo')",
        "issue_url: str = SchemaField(description='URL of the GitHub issue or pull request', placeholder='https://github.com/owner/repo/issues/1')",
        "comment: str = SchemaField(description='Comment to post on the issue or pull request', placeholder='Enter your comment')",
        "class Output(BlockSchema):\n    id: int = SchemaField(description='ID of the created comment')\n    url: str = SchemaField(description='URL to the comment on GitHub')\n    error: str = SchemaField(description='Error message if the comment posting failed')",
        "id: int = SchemaField(description='ID of the created comment')",
        "url: str = SchemaField(description='URL to the comment on GitHub')",
        "error: str = SchemaField(description='Error message if the comment posting failed')",
        "def __init__(self):\n    super().__init__(id='a8db4d8d-db1c-4a25-a1b0-416a8c33602b', description='This block posts a comment on a specified GitHub issue or pull request.', categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=GithubCommentBlock.Input, output_schema=GithubCommentBlock.Output, test_input=[{'issue_url': 'https://github.com/owner/repo/issues/1', 'comment': 'This is a test comment.', 'credentials': TEST_CREDENTIALS_INPUT}, {'issue_url': 'https://github.com/owner/repo/pull/1', 'comment': 'This is a test comment.', 'credentials': TEST_CREDENTIALS_INPUT}], test_credentials=TEST_CREDENTIALS, test_output=[('id', 1337), ('url', 'https://github.com/owner/repo/issues/1#issuecomment-1337'), ('id', 1337), ('url', 'https://github.com/owner/repo/issues/1#issuecomment-1337')], test_mock={'post_comment': lambda *args, **kwargs: (1337, 'https://github.com/owner/repo/issues/1#issuecomment-1337')})",
        "super().__init__()",
        "@staticmethod\ndef post_comment(credentials: GithubCredentials, issue_url: str, body_text: str) -> tuple[int, str]:\n    api = get_api(credentials)\n    data = {'body': body_text}\n    if 'pull' in issue_url:\n        issue_url = issue_url.replace('pull', 'issues')\n    comments_url = issue_url + '/comments'\n    response = api.post(comments_url, json=data)\n    comment = response.json()\n    return (comment['id'], comment['html_url'])",
        "api = get_api(credentials)",
        "data = {'body': body_text}",
        "'pull' In issue_url"
      ]
    },
    {
      "id": "3",
      "type": "block",
      "statements": [
        "issue_url = issue_url.replace('pull', 'issues')"
      ]
    },
    {
      "id": "4",
      "type": "block",
      "statements": []
    },
    {
      "id": "5",
      "type": "block",
      "statements": [
        "comments_url = issue_url + '/comments'",
        "response = api.post(comments_url, json=data)",
        "comment = response.json()",
        "return (comment['id'], comment['html_url'])"
      ]
    },
    {
      "id": "6",
      "type": "block",
      "statements": [
        "def run(self, input_data: Input, *, credentials: GithubCredentials, **kwargs) -> BlockOutput:\n    (id, url) = self.post_comment(credentials, input_data.issue_url, input_data.comment)\n    yield ('id', id)\n    yield ('url', url)",
        "(id, url) = self.post_comment(credentials, input_data.issue_url, input_data.comment)",
        "(yield ('id', id))",
        "(yield ('url', url))",
        "class GithubMakeIssueBlock(Block):\n\n    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField('repo')\n        repo_url: str = SchemaField(description='URL of the GitHub repository', placeholder='https://github.com/owner/repo')\n        title: str = SchemaField(description='Title of the issue', placeholder='Enter the issue title')\n        body: str = SchemaField(description='Body of the issue', placeholder='Enter the issue body')\n\n    class Output(BlockSchema):\n        number: int = SchemaField(description='Number of the created issue')\n        url: str = SchemaField(description='URL of the created issue')\n        error: str = SchemaField(description='Error message if the issue creation failed')\n\n    def __init__(self):\n        super().__init__(id='691dad47-f494-44c3-a1e8-05b7990f2dab', description='This block creates a new issue on a specified GitHub repository.', categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=GithubMakeIssueBlock.Input, output_schema=GithubMakeIssueBlock.Output, test_input={'repo_url': 'https://github.com/owner/repo', 'title': 'Test Issue', 'body': 'This is a test issue.', 'credentials': TEST_CREDENTIALS_INPUT}, test_credentials=TEST_CREDENTIALS, test_output=[('number', 1), ('url', 'https://github.com/owner/repo/issues/1')], test_mock={'create_issue': lambda *args, **kwargs: (1, 'https://github.com/owner/repo/issues/1')})\n\n    @staticmethod\n    def create_issue(credentials: GithubCredentials, repo_url: str, title: str, body: str) -> tuple[int, str]:\n        api = get_api(credentials)\n        data = {'title': title, 'body': body}\n        issues_url = repo_url + '/issues'\n        response = api.post(issues_url, json=data)\n        issue = response.json()\n        return (issue['number'], issue['html_url'])\n\n    def run(self, input_data: Input, *, credentials: GithubCredentials, **kwargs) -> BlockOutput:\n        (number, url) = self.create_issue(credentials, input_data.repo_url, input_data.title, input_data.body)\n        yield ('number', number)\n        yield ('url', url)",
        "class Input(BlockSchema):\n    credentials: GithubCredentialsInput = GithubCredentialsField('repo')\n    repo_url: str = SchemaField(description='URL of the GitHub repository', placeholder='https://github.com/owner/repo')\n    title: str = SchemaField(description='Title of the issue', placeholder='Enter the issue title')\n    body: str = SchemaField(description='Body of the issue', placeholder='Enter the issue body')",
        "credentials: GithubCredentialsInput = GithubCredentialsField('repo')",
        "repo_url: str = SchemaField(description='URL of the GitHub repository', placeholder='https://github.com/owner/repo')",
        "title: str = SchemaField(description='Title of the issue', placeholder='Enter the issue title')",
        "body: str = SchemaField(description='Body of the issue', placeholder='Enter the issue body')",
        "class Output(BlockSchema):\n    number: int = SchemaField(description='Number of the created issue')\n    url: str = SchemaField(description='URL of the created issue')\n    error: str = SchemaField(description='Error message if the issue creation failed')",
        "number: int = SchemaField(description='Number of the created issue')",
        "url: str = SchemaField(description='URL of the created issue')",
        "error: str = SchemaField(description='Error message if the issue creation failed')",
        "def __init__(self):\n    super().__init__(id='691dad47-f494-44c3-a1e8-05b7990f2dab', description='This block creates a new issue on a specified GitHub repository.', categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=GithubMakeIssueBlock.Input, output_schema=GithubMakeIssueBlock.Output, test_input={'repo_url': 'https://github.com/owner/repo', 'title': 'Test Issue', 'body': 'This is a test issue.', 'credentials': TEST_CREDENTIALS_INPUT}, test_credentials=TEST_CREDENTIALS, test_output=[('number', 1), ('url', 'https://github.com/owner/repo/issues/1')], test_mock={'create_issue': lambda *args, **kwargs: (1, 'https://github.com/owner/repo/issues/1')})",
        "super().__init__()",
        "@staticmethod\ndef create_issue(credentials: GithubCredentials, repo_url: str, title: str, body: str) -> tuple[int, str]:\n    api = get_api(credentials)\n    data = {'title': title, 'body': body}\n    issues_url = repo_url + '/issues'\n    response = api.post(issues_url, json=data)\n    issue = response.json()\n    return (issue['number'], issue['html_url'])",
        "api = get_api(credentials)",
        "data = {'title': title, 'body': body}",
        "issues_url = repo_url + '/issues'",
        "response = api.post(issues_url, json=data)",
        "issue = response.json()",
        "return (issue['number'], issue['html_url'])"
      ]
    },
    {
      "id": "7",
      "type": "block",
      "statements": [
        "def run(self, input_data: Input, *, credentials: GithubCredentials, **kwargs) -> BlockOutput:\n    (number, url) = self.create_issue(credentials, input_data.repo_url, input_data.title, input_data.body)\n    yield ('number', number)\n    yield ('url', url)",
        "(number, url) = self.create_issue(credentials, input_data.repo_url, input_data.title, input_data.body)",
        "(yield ('number', number))",
        "(yield ('url', url))",
        "class GithubReadIssueBlock(Block):\n\n    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField('repo')\n        issue_url: str = SchemaField(description='URL of the GitHub issue', placeholder='https://github.com/owner/repo/issues/1')\n\n    class Output(BlockSchema):\n        title: str = SchemaField(description='Title of the issue')\n        body: str = SchemaField(description='Body of the issue')\n        user: str = SchemaField(description='User who created the issue')\n        error: str = SchemaField(description='Error message if reading the issue failed')\n\n    def __init__(self):\n        super().__init__(id='6443c75d-032a-4772-9c08-230c707c8acc', description='This block reads the body, title, and user of a specified GitHub issue.', categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=GithubReadIssueBlock.Input, output_schema=GithubReadIssueBlock.Output, test_input={'issue_url': 'https://github.com/owner/repo/issues/1', 'credentials': TEST_CREDENTIALS_INPUT}, test_credentials=TEST_CREDENTIALS, test_output=[('title', 'Title of the issue'), ('body', 'This is the body of the issue.'), ('user', 'username')], test_mock={'read_issue': lambda *args, **kwargs: ('Title of the issue', 'This is the body of the issue.', 'username')})\n\n    @staticmethod\n    def read_issue(credentials: GithubCredentials, issue_url: str) -> tuple[str, str, str]:\n        api = get_api(credentials)\n        response = api.get(issue_url)\n        data = response.json()\n        title = data.get('title', 'No title found')\n        body = data.get('body', 'No body content found')\n        user = data.get('user', {}).get('login', 'No user found')\n        return (title, body, user)\n\n    def run(self, input_data: Input, *, credentials: GithubCredentials, **kwargs) -> BlockOutput:\n        (title, body, user) = self.read_issue(credentials, input_data.issue_url)\n        if title:\n            yield ('title', title)\n        if body:\n            yield ('body', body)\n        if user:\n            yield ('user', user)",
        "class Input(BlockSchema):\n    credentials: GithubCredentialsInput = GithubCredentialsField('repo')\n    issue_url: str = SchemaField(description='URL of the GitHub issue', placeholder='https://github.com/owner/repo/issues/1')",
        "credentials: GithubCredentialsInput = GithubCredentialsField('repo')",
        "issue_url: str = SchemaField(description='URL of the GitHub issue', placeholder='https://github.com/owner/repo/issues/1')",
        "class Output(BlockSchema):\n    title: str = SchemaField(description='Title of the issue')\n    body: str = SchemaField(description='Body of the issue')\n    user: str = SchemaField(description='User who created the issue')\n    error: str = SchemaField(description='Error message if reading the issue failed')",
        "title: str = SchemaField(description='Title of the issue')",
        "body: str = SchemaField(description='Body of the issue')",
        "user: str = SchemaField(description='User who created the issue')",
        "error: str = SchemaField(description='Error message if reading the issue failed')",
        "def __init__(self):\n    super().__init__(id='6443c75d-032a-4772-9c08-230c707c8acc', description='This block reads the body, title, and user of a specified GitHub issue.', categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=GithubReadIssueBlock.Input, output_schema=GithubReadIssueBlock.Output, test_input={'issue_url': 'https://github.com/owner/repo/issues/1', 'credentials': TEST_CREDENTIALS_INPUT}, test_credentials=TEST_CREDENTIALS, test_output=[('title', 'Title of the issue'), ('body', 'This is the body of the issue.'), ('user', 'username')], test_mock={'read_issue': lambda *args, **kwargs: ('Title of the issue', 'This is the body of the issue.', 'username')})",
        "super().__init__()",
        "@staticmethod\ndef read_issue(credentials: GithubCredentials, issue_url: str) -> tuple[str, str, str]:\n    api = get_api(credentials)\n    response = api.get(issue_url)\n    data = response.json()\n    title = data.get('title', 'No title found')\n    body = data.get('body', 'No body content found')\n    user = data.get('user', {}).get('login', 'No user found')\n    return (title, body, user)",
        "api = get_api(credentials)",
        "response = api.get(issue_url)",
        "data = response.json()",
        "title = data.get('title', 'No title found')",
        "body = data.get('body', 'No body content found')",
        "user = data.get('user', {}).get('login', 'No user found')",
        "return (title, body, user)"
      ]
    },
    {
      "id": "8",
      "type": "block",
      "statements": [
        "def run(self, input_data: Input, *, credentials: GithubCredentials, **kwargs) -> BlockOutput:\n    (title, body, user) = self.read_issue(credentials, input_data.issue_url)\n    if title:\n        yield ('title', title)\n    if body:\n        yield ('body', body)\n    if user:\n        yield ('user', user)",
        "(title, body, user) = self.read_issue(credentials, input_data.issue_url)",
        "title"
      ]
    },
    {
      "id": "9",
      "type": "block",
      "statements": [
        "(yield ('title', title))"
      ]
    },
    {
      "id": "10",
      "type": "block",
      "statements": []
    },
    {
      "id": "11",
      "type": "block",
      "statements": [
        "body"
      ]
    },
    {
      "id": "12",
      "type": "block",
      "statements": [
        "(yield ('body', body))"
      ]
    },
    {
      "id": "13",
      "type": "block",
      "statements": []
    },
    {
      "id": "14",
      "type": "block",
      "statements": [
        "user"
      ]
    },
    {
      "id": "15",
      "type": "block",
      "statements": [
        "(yield ('user', user))"
      ]
    },
    {
      "id": "16",
      "type": "block",
      "statements": []
    },
    {
      "id": "17",
      "type": "block",
      "statements": [
        "class GithubListIssuesBlock(Block):\n\n    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField('repo')\n        repo_url: str = SchemaField(description='URL of the GitHub repository', placeholder='https://github.com/owner/repo')\n\n    class Output(BlockSchema):\n\n        class IssueItem(TypedDict):\n            title: str\n            url: str\n        issue: IssueItem = SchemaField(title='Issue', description='Issues with their title and URL')\n        error: str = SchemaField(description='Error message if listing issues failed')\n\n    def __init__(self):\n        super().__init__(id='c215bfd7-0e57-4573-8f8c-f7d4963dcd74', description='This block lists all issues for a specified GitHub repository.', categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=GithubListIssuesBlock.Input, output_schema=GithubListIssuesBlock.Output, test_input={'repo_url': 'https://github.com/owner/repo', 'credentials': TEST_CREDENTIALS_INPUT}, test_credentials=TEST_CREDENTIALS, test_output=[('issue', {'title': 'Issue 1', 'url': 'https://github.com/owner/repo/issues/1'})], test_mock={'list_issues': lambda *args, **kwargs: [{'title': 'Issue 1', 'url': 'https://github.com/owner/repo/issues/1'}]})\n\n    @staticmethod\n    def list_issues(credentials: GithubCredentials, repo_url: str) -> list[Output.IssueItem]:\n        api = get_api(credentials)\n        issues_url = repo_url + '/issues'\n        response = api.get(issues_url)\n        data = response.json()\n        issues: list[GithubListIssuesBlock.Output.IssueItem] = [{'title': issue['title'], 'url': issue['html_url']} for issue in data]\n        return issues\n\n    def run(self, input_data: Input, *, credentials: GithubCredentials, **kwargs) -> BlockOutput:\n        issues = self.list_issues(credentials, input_data.repo_url)\n        yield from (('issue', issue) for issue in issues)",
        "class Input(BlockSchema):\n    credentials: GithubCredentialsInput = GithubCredentialsField('repo')\n    repo_url: str = SchemaField(description='URL of the GitHub repository', placeholder='https://github.com/owner/repo')",
        "credentials: GithubCredentialsInput = GithubCredentialsField('repo')",
        "repo_url: str = SchemaField(description='URL of the GitHub repository', placeholder='https://github.com/owner/repo')",
        "class Output(BlockSchema):\n\n    class IssueItem(TypedDict):\n        title: str\n        url: str\n    issue: IssueItem = SchemaField(title='Issue', description='Issues with their title and URL')\n    error: str = SchemaField(description='Error message if listing issues failed')",
        "class IssueItem(TypedDict):\n    title: str\n    url: str",
        "title: str",
        "url: str",
        "issue: IssueItem = SchemaField(title='Issue', description='Issues with their title and URL')",
        "error: str = SchemaField(description='Error message if listing issues failed')",
        "def __init__(self):\n    super().__init__(id='c215bfd7-0e57-4573-8f8c-f7d4963dcd74', description='This block lists all issues for a specified GitHub repository.', categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=GithubListIssuesBlock.Input, output_schema=GithubListIssuesBlock.Output, test_input={'repo_url': 'https://github.com/owner/repo', 'credentials': TEST_CREDENTIALS_INPUT}, test_credentials=TEST_CREDENTIALS, test_output=[('issue', {'title': 'Issue 1', 'url': 'https://github.com/owner/repo/issues/1'})], test_mock={'list_issues': lambda *args, **kwargs: [{'title': 'Issue 1', 'url': 'https://github.com/owner/repo/issues/1'}]})",
        "super().__init__()",
        "@staticmethod\ndef list_issues(credentials: GithubCredentials, repo_url: str) -> list[Output.IssueItem]:\n    api = get_api(credentials)\n    issues_url = repo_url + '/issues'\n    response = api.get(issues_url)\n    data = response.json()\n    issues: list[GithubListIssuesBlock.Output.IssueItem] = [{'title': issue['title'], 'url': issue['html_url']} for issue in data]\n    return issues",
        "api = get_api(credentials)",
        "issues_url = repo_url + '/issues'",
        "response = api.get(issues_url)",
        "data = response.json()",
        "issues: list[GithubListIssuesBlock.Output.IssueItem] = [{'title': issue['title'], 'url': issue['html_url']} for issue in data]",
        "return issues"
      ]
    },
    {
      "id": "18",
      "type": "block",
      "statements": [
        "def run(self, input_data: Input, *, credentials: GithubCredentials, **kwargs) -> BlockOutput:\n    issues = self.list_issues(credentials, input_data.repo_url)\n    yield from (('issue', issue) for issue in issues)",
        "issues = self.list_issues(credentials, input_data.repo_url)",
        "(yield from (('issue', issue) for issue in issues))",
        "class GithubAddLabelBlock(Block):\n\n    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField('repo')\n        issue_url: str = SchemaField(description='URL of the GitHub issue or pull request', placeholder='https://github.com/owner/repo/issues/1')\n        label: str = SchemaField(description='Label to add to the issue or pull request', placeholder='Enter the label')\n\n    class Output(BlockSchema):\n        status: str = SchemaField(description='Status of the label addition operation')\n        error: str = SchemaField(description='Error message if the label addition failed')\n\n    def __init__(self):\n        super().__init__(id='98bd6b77-9506-43d5-b669-6b9733c4b1f1', description='This block adds a label to a specified GitHub issue or pull request.', categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=GithubAddLabelBlock.Input, output_schema=GithubAddLabelBlock.Output, test_input={'issue_url': 'https://github.com/owner/repo/issues/1', 'label': 'bug', 'credentials': TEST_CREDENTIALS_INPUT}, test_credentials=TEST_CREDENTIALS, test_output=[('status', 'Label added successfully')], test_mock={'add_label': lambda *args, **kwargs: 'Label added successfully'})\n\n    @staticmethod\n    def add_label(credentials: GithubCredentials, issue_url: str, label: str) -> str:\n        api = get_api(credentials)\n        data = {'labels': [label]}\n        labels_url = issue_url + '/labels'\n        api.post(labels_url, json=data)\n        return 'Label added successfully'\n\n    def run(self, input_data: Input, *, credentials: GithubCredentials, **kwargs) -> BlockOutput:\n        status = self.add_label(credentials, input_data.issue_url, input_data.label)\n        yield ('status', status)",
        "class Input(BlockSchema):\n    credentials: GithubCredentialsInput = GithubCredentialsField('repo')\n    issue_url: str = SchemaField(description='URL of the GitHub issue or pull request', placeholder='https://github.com/owner/repo/issues/1')\n    label: str = SchemaField(description='Label to add to the issue or pull request', placeholder='Enter the label')",
        "credentials: GithubCredentialsInput = GithubCredentialsField('repo')",
        "issue_url: str = SchemaField(description='URL of the GitHub issue or pull request', placeholder='https://github.com/owner/repo/issues/1')",
        "label: str = SchemaField(description='Label to add to the issue or pull request', placeholder='Enter the label')",
        "class Output(BlockSchema):\n    status: str = SchemaField(description='Status of the label addition operation')\n    error: str = SchemaField(description='Error message if the label addition failed')",
        "status: str = SchemaField(description='Status of the label addition operation')",
        "error: str = SchemaField(description='Error message if the label addition failed')",
        "def __init__(self):\n    super().__init__(id='98bd6b77-9506-43d5-b669-6b9733c4b1f1', description='This block adds a label to a specified GitHub issue or pull request.', categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=GithubAddLabelBlock.Input, output_schema=GithubAddLabelBlock.Output, test_input={'issue_url': 'https://github.com/owner/repo/issues/1', 'label': 'bug', 'credentials': TEST_CREDENTIALS_INPUT}, test_credentials=TEST_CREDENTIALS, test_output=[('status', 'Label added successfully')], test_mock={'add_label': lambda *args, **kwargs: 'Label added successfully'})",
        "super().__init__()",
        "@staticmethod\ndef add_label(credentials: GithubCredentials, issue_url: str, label: str) -> str:\n    api = get_api(credentials)\n    data = {'labels': [label]}\n    labels_url = issue_url + '/labels'\n    api.post(labels_url, json=data)\n    return 'Label added successfully'",
        "api = get_api(credentials)",
        "data = {'labels': [label]}",
        "labels_url = issue_url + '/labels'",
        "api.post(labels_url)",
        "return 'Label added successfully'"
      ]
    },
    {
      "id": "19",
      "type": "block",
      "statements": [
        "def run(self, input_data: Input, *, credentials: GithubCredentials, **kwargs) -> BlockOutput:\n    status = self.add_label(credentials, input_data.issue_url, input_data.label)\n    yield ('status', status)",
        "status = self.add_label(credentials, input_data.issue_url, input_data.label)",
        "(yield ('status', status))",
        "class GithubRemoveLabelBlock(Block):\n\n    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField('repo')\n        issue_url: str = SchemaField(description='URL of the GitHub issue or pull request', placeholder='https://github.com/owner/repo/issues/1')\n        label: str = SchemaField(description='Label to remove from the issue or pull request', placeholder='Enter the label')\n\n    class Output(BlockSchema):\n        status: str = SchemaField(description='Status of the label removal operation')\n        error: str = SchemaField(description='Error message if the label removal failed')\n\n    def __init__(self):\n        super().__init__(id='78f050c5-3e3a-48c0-9e5b-ef1ceca5589c', description='This block removes a label from a specified GitHub issue or pull request.', categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=GithubRemoveLabelBlock.Input, output_schema=GithubRemoveLabelBlock.Output, test_input={'issue_url': 'https://github.com/owner/repo/issues/1', 'label': 'bug', 'credentials': TEST_CREDENTIALS_INPUT}, test_credentials=TEST_CREDENTIALS, test_output=[('status', 'Label removed successfully')], test_mock={'remove_label': lambda *args, **kwargs: 'Label removed successfully'})\n\n    @staticmethod\n    def remove_label(credentials: GithubCredentials, issue_url: str, label: str) -> str:\n        api = get_api(credentials)\n        label_url = issue_url + f'/labels/{label}'\n        api.delete(label_url)\n        return 'Label removed successfully'\n\n    def run(self, input_data: Input, *, credentials: GithubCredentials, **kwargs) -> BlockOutput:\n        status = self.remove_label(credentials, input_data.issue_url, input_data.label)\n        yield ('status', status)",
        "class Input(BlockSchema):\n    credentials: GithubCredentialsInput = GithubCredentialsField('repo')\n    issue_url: str = SchemaField(description='URL of the GitHub issue or pull request', placeholder='https://github.com/owner/repo/issues/1')\n    label: str = SchemaField(description='Label to remove from the issue or pull request', placeholder='Enter the label')",
        "credentials: GithubCredentialsInput = GithubCredentialsField('repo')",
        "issue_url: str = SchemaField(description='URL of the GitHub issue or pull request', placeholder='https://github.com/owner/repo/issues/1')",
        "label: str = SchemaField(description='Label to remove from the issue or pull request', placeholder='Enter the label')",
        "class Output(BlockSchema):\n    status: str = SchemaField(description='Status of the label removal operation')\n    error: str = SchemaField(description='Error message if the label removal failed')",
        "status: str = SchemaField(description='Status of the label removal operation')",
        "error: str = SchemaField(description='Error message if the label removal failed')",
        "def __init__(self):\n    super().__init__(id='78f050c5-3e3a-48c0-9e5b-ef1ceca5589c', description='This block removes a label from a specified GitHub issue or pull request.', categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=GithubRemoveLabelBlock.Input, output_schema=GithubRemoveLabelBlock.Output, test_input={'issue_url': 'https://github.com/owner/repo/issues/1', 'label': 'bug', 'credentials': TEST_CREDENTIALS_INPUT}, test_credentials=TEST_CREDENTIALS, test_output=[('status', 'Label removed successfully')], test_mock={'remove_label': lambda *args, **kwargs: 'Label removed successfully'})",
        "super().__init__()",
        "@staticmethod\ndef remove_label(credentials: GithubCredentials, issue_url: str, label: str) -> str:\n    api = get_api(credentials)\n    label_url = issue_url + f'/labels/{label}'\n    api.delete(label_url)\n    return 'Label removed successfully'",
        "api = get_api(credentials)",
        "label_url = issue_url + f'/labels/{label}'",
        "api.delete(label_url)",
        "return 'Label removed successfully'"
      ]
    },
    {
      "id": "20",
      "type": "block",
      "statements": [
        "def run(self, input_data: Input, *, credentials: GithubCredentials, **kwargs) -> BlockOutput:\n    status = self.remove_label(credentials, input_data.issue_url, input_data.label)\n    yield ('status', status)",
        "status = self.remove_label(credentials, input_data.issue_url, input_data.label)",
        "(yield ('status', status))",
        "class GithubAssignIssueBlock(Block):\n\n    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField('repo')\n        issue_url: str = SchemaField(description='URL of the GitHub issue', placeholder='https://github.com/owner/repo/issues/1')\n        assignee: str = SchemaField(description='Username to assign to the issue', placeholder='Enter the username')\n\n    class Output(BlockSchema):\n        status: str = SchemaField(description='Status of the issue assignment operation')\n        error: str = SchemaField(description='Error message if the issue assignment failed')\n\n    def __init__(self):\n        super().__init__(id='90507c72-b0ff-413a-886a-23bbbd66f542', description='This block assigns a user to a specified GitHub issue.', categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=GithubAssignIssueBlock.Input, output_schema=GithubAssignIssueBlock.Output, test_input={'issue_url': 'https://github.com/owner/repo/issues/1', 'assignee': 'username1', 'credentials': TEST_CREDENTIALS_INPUT}, test_credentials=TEST_CREDENTIALS, test_output=[('status', 'Issue assigned successfully')], test_mock={'assign_issue': lambda *args, **kwargs: 'Issue assigned successfully'})\n\n    @staticmethod\n    def assign_issue(credentials: GithubCredentials, issue_url: str, assignee: str) -> str:\n        api = get_api(credentials)\n        assignees_url = issue_url + '/assignees'\n        data = {'assignees': [assignee]}\n        api.post(assignees_url, json=data)\n        return 'Issue assigned successfully'\n\n    def run(self, input_data: Input, *, credentials: GithubCredentials, **kwargs) -> BlockOutput:\n        status = self.assign_issue(credentials, input_data.issue_url, input_data.assignee)\n        yield ('status', status)",
        "class Input(BlockSchema):\n    credentials: GithubCredentialsInput = GithubCredentialsField('repo')\n    issue_url: str = SchemaField(description='URL of the GitHub issue', placeholder='https://github.com/owner/repo/issues/1')\n    assignee: str = SchemaField(description='Username to assign to the issue', placeholder='Enter the username')",
        "credentials: GithubCredentialsInput = GithubCredentialsField('repo')",
        "issue_url: str = SchemaField(description='URL of the GitHub issue', placeholder='https://github.com/owner/repo/issues/1')",
        "assignee: str = SchemaField(description='Username to assign to the issue', placeholder='Enter the username')",
        "class Output(BlockSchema):\n    status: str = SchemaField(description='Status of the issue assignment operation')\n    error: str = SchemaField(description='Error message if the issue assignment failed')",
        "status: str = SchemaField(description='Status of the issue assignment operation')",
        "error: str = SchemaField(description='Error message if the issue assignment failed')",
        "def __init__(self):\n    super().__init__(id='90507c72-b0ff-413a-886a-23bbbd66f542', description='This block assigns a user to a specified GitHub issue.', categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=GithubAssignIssueBlock.Input, output_schema=GithubAssignIssueBlock.Output, test_input={'issue_url': 'https://github.com/owner/repo/issues/1', 'assignee': 'username1', 'credentials': TEST_CREDENTIALS_INPUT}, test_credentials=TEST_CREDENTIALS, test_output=[('status', 'Issue assigned successfully')], test_mock={'assign_issue': lambda *args, **kwargs: 'Issue assigned successfully'})",
        "super().__init__()",
        "@staticmethod\ndef assign_issue(credentials: GithubCredentials, issue_url: str, assignee: str) -> str:\n    api = get_api(credentials)\n    assignees_url = issue_url + '/assignees'\n    data = {'assignees': [assignee]}\n    api.post(assignees_url, json=data)\n    return 'Issue assigned successfully'",
        "api = get_api(credentials)",
        "assignees_url = issue_url + '/assignees'",
        "data = {'assignees': [assignee]}",
        "api.post(assignees_url)",
        "return 'Issue assigned successfully'"
      ]
    },
    {
      "id": "21",
      "type": "block",
      "statements": [
        "def run(self, input_data: Input, *, credentials: GithubCredentials, **kwargs) -> BlockOutput:\n    status = self.assign_issue(credentials, input_data.issue_url, input_data.assignee)\n    yield ('status', status)",
        "status = self.assign_issue(credentials, input_data.issue_url, input_data.assignee)",
        "(yield ('status', status))",
        "class GithubUnassignIssueBlock(Block):\n\n    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField('repo')\n        issue_url: str = SchemaField(description='URL of the GitHub issue', placeholder='https://github.com/owner/repo/issues/1')\n        assignee: str = SchemaField(description='Username to unassign from the issue', placeholder='Enter the username')\n\n    class Output(BlockSchema):\n        status: str = SchemaField(description='Status of the issue unassignment operation')\n        error: str = SchemaField(description='Error message if the issue unassignment failed')\n\n    def __init__(self):\n        super().__init__(id='d154002a-38f4-46c2-962d-2488f2b05ece', description='This block unassigns a user from a specified GitHub issue.', categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=GithubUnassignIssueBlock.Input, output_schema=GithubUnassignIssueBlock.Output, test_input={'issue_url': 'https://github.com/owner/repo/issues/1', 'assignee': 'username1', 'credentials': TEST_CREDENTIALS_INPUT}, test_credentials=TEST_CREDENTIALS, test_output=[('status', 'Issue unassigned successfully')], test_mock={'unassign_issue': lambda *args, **kwargs: 'Issue unassigned successfully'})\n\n    @staticmethod\n    def unassign_issue(credentials: GithubCredentials, issue_url: str, assignee: str) -> str:\n        api = get_api(credentials)\n        assignees_url = issue_url + '/assignees'\n        data = {'assignees': [assignee]}\n        api.delete(assignees_url, json=data)\n        return 'Issue unassigned successfully'\n\n    def run(self, input_data: Input, *, credentials: GithubCredentials, **kwargs) -> BlockOutput:\n        status = self.unassign_issue(credentials, input_data.issue_url, input_data.assignee)\n        yield ('status', status)",
        "class Input(BlockSchema):\n    credentials: GithubCredentialsInput = GithubCredentialsField('repo')\n    issue_url: str = SchemaField(description='URL of the GitHub issue', placeholder='https://github.com/owner/repo/issues/1')\n    assignee: str = SchemaField(description='Username to unassign from the issue', placeholder='Enter the username')",
        "credentials: GithubCredentialsInput = GithubCredentialsField('repo')",
        "issue_url: str = SchemaField(description='URL of the GitHub issue', placeholder='https://github.com/owner/repo/issues/1')",
        "assignee: str = SchemaField(description='Username to unassign from the issue', placeholder='Enter the username')",
        "class Output(BlockSchema):\n    status: str = SchemaField(description='Status of the issue unassignment operation')\n    error: str = SchemaField(description='Error message if the issue unassignment failed')",
        "status: str = SchemaField(description='Status of the issue unassignment operation')",
        "error: str = SchemaField(description='Error message if the issue unassignment failed')",
        "def __init__(self):\n    super().__init__(id='d154002a-38f4-46c2-962d-2488f2b05ece', description='This block unassigns a user from a specified GitHub issue.', categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=GithubUnassignIssueBlock.Input, output_schema=GithubUnassignIssueBlock.Output, test_input={'issue_url': 'https://github.com/owner/repo/issues/1', 'assignee': 'username1', 'credentials': TEST_CREDENTIALS_INPUT}, test_credentials=TEST_CREDENTIALS, test_output=[('status', 'Issue unassigned successfully')], test_mock={'unassign_issue': lambda *args, **kwargs: 'Issue unassigned successfully'})",
        "super().__init__()",
        "@staticmethod\ndef unassign_issue(credentials: GithubCredentials, issue_url: str, assignee: str) -> str:\n    api = get_api(credentials)\n    assignees_url = issue_url + '/assignees'\n    data = {'assignees': [assignee]}\n    api.delete(assignees_url, json=data)\n    return 'Issue unassigned successfully'",
        "api = get_api(credentials)",
        "assignees_url = issue_url + '/assignees'",
        "data = {'assignees': [assignee]}",
        "api.delete(assignees_url)",
        "return 'Issue unassigned successfully'"
      ]
    },
    {
      "id": "22",
      "type": "block",
      "statements": [
        "def run(self, input_data: Input, *, credentials: GithubCredentials, **kwargs) -> BlockOutput:\n    status = self.unassign_issue(credentials, input_data.issue_url, input_data.assignee)\n    yield ('status', status)",
        "status = self.unassign_issue(credentials, input_data.issue_url, input_data.assignee)",
        "(yield ('status', status))"
      ]
    }
  ],
  "edges": [
    {
      "source": "2",
      "target": "3",
      "type": "true"
    },
    {
      "source": "2",
      "target": "4",
      "type": "false"
    },
    {
      "source": "3",
      "target": "5",
      "type": "next"
    },
    {
      "source": "4",
      "target": "5",
      "type": "next"
    },
    {
      "source": "8",
      "target": "9",
      "type": "true"
    },
    {
      "source": "8",
      "target": "10",
      "type": "false"
    },
    {
      "source": "9",
      "target": "11",
      "type": "next"
    },
    {
      "source": "10",
      "target": "11",
      "type": "next"
    },
    {
      "source": "11",
      "target": "12",
      "type": "true"
    },
    {
      "source": "11",
      "target": "13",
      "type": "false"
    },
    {
      "source": "12",
      "target": "14",
      "type": "next"
    },
    {
      "source": "13",
      "target": "14",
      "type": "next"
    },
    {
      "source": "14",
      "target": "15",
      "type": "true"
    },
    {
      "source": "14",
      "target": "16",
      "type": "false"
    },
    {
      "source": "15",
      "target": "17",
      "type": "next"
    },
    {
      "source": "16",
      "target": "17",
      "type": "next"
    }
  ]
}