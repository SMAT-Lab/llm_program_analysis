{
  "nodes": [
    {
      "id": "1",
      "type": "block",
      "statements": [
        "'\\nCalculates the sum of two non-negative integers using bitwise operators\\nWikipedia explanation: https://en.wikipedia.org/wiki/Binary_number\\n'",
        "def bitwise_addition_recursive(number: int, other_number: int) -> int:\n    \"\"\"\n    >>> bitwise_addition_recursive(4, 5)\n    9\n    >>> bitwise_addition_recursive(8, 9)\n    17\n    >>> bitwise_addition_recursive(0, 4)\n    4\n    >>> bitwise_addition_recursive(4.5, 9)\n    Traceback (most recent call last):\n        ...\n    TypeError: Both arguments MUST be integers!\n    >>> bitwise_addition_recursive('4', 9)\n    Traceback (most recent call last):\n        ...\n    TypeError: Both arguments MUST be integers!\n    >>> bitwise_addition_recursive('4.5', 9)\n    Traceback (most recent call last):\n        ...\n    TypeError: Both arguments MUST be integers!\n    >>> bitwise_addition_recursive(-1, 9)\n    Traceback (most recent call last):\n        ...\n    ValueError: Both arguments MUST be non-negative!\n    >>> bitwise_addition_recursive(1, -9)\n    Traceback (most recent call last):\n        ...\n    ValueError: Both arguments MUST be non-negative!\n    \"\"\"\n    if not isinstance(number, int) or not isinstance(other_number, int):\n        raise TypeError('Both arguments MUST be integers!')\n    if number < 0 or other_number < 0:\n        raise ValueError('Both arguments MUST be non-negative!')\n    bitwise_sum = number ^ other_number\n    carry = number & other_number\n    if carry == 0:\n        return bitwise_sum\n    return bitwise_addition_recursive(bitwise_sum, carry << 1)",
        "\"\\n    >>> bitwise_addition_recursive(4, 5)\\n    9\\n    >>> bitwise_addition_recursive(8, 9)\\n    17\\n    >>> bitwise_addition_recursive(0, 4)\\n    4\\n    >>> bitwise_addition_recursive(4.5, 9)\\n    Traceback (most recent call last):\\n        ...\\n    TypeError: Both arguments MUST be integers!\\n    >>> bitwise_addition_recursive('4', 9)\\n    Traceback (most recent call last):\\n        ...\\n    TypeError: Both arguments MUST be integers!\\n    >>> bitwise_addition_recursive('4.5', 9)\\n    Traceback (most recent call last):\\n        ...\\n    TypeError: Both arguments MUST be integers!\\n    >>> bitwise_addition_recursive(-1, 9)\\n    Traceback (most recent call last):\\n        ...\\n    ValueError: Both arguments MUST be non-negative!\\n    >>> bitwise_addition_recursive(1, -9)\\n    Traceback (most recent call last):\\n        ...\\n    ValueError: Both arguments MUST be non-negative!\\n    \"",
        "not isinstance(number, int) or not isinstance(other_number, int)"
      ]
    },
    {
      "id": "2",
      "type": "block",
      "statements": [
        "raise TypeError('Both arguments MUST be integers!')"
      ]
    },
    {
      "id": "3",
      "type": "block",
      "statements": []
    },
    {
      "id": "4",
      "type": "block",
      "statements": [
        "number < 0 or other_number < 0"
      ]
    },
    {
      "id": "5",
      "type": "block",
      "statements": [
        "raise ValueError('Both arguments MUST be non-negative!')"
      ]
    },
    {
      "id": "6",
      "type": "block",
      "statements": []
    },
    {
      "id": "7",
      "type": "block",
      "statements": [
        "bitwise_sum = number ^ other_number",
        "carry = number & other_number",
        "carry Eq 0"
      ]
    },
    {
      "id": "8",
      "type": "block",
      "statements": [
        "return bitwise_sum"
      ]
    },
    {
      "id": "9",
      "type": "block",
      "statements": []
    },
    {
      "id": "10",
      "type": "block",
      "statements": [
        "return bitwise_addition_recursive(bitwise_sum, carry << 1)"
      ]
    },
    {
      "id": "11",
      "type": "block",
      "statements": [
        "__name__ Eq '__main__'"
      ]
    },
    {
      "id": "12",
      "type": "block",
      "statements": [
        "import doctest",
        "doctest.testmod()"
      ]
    },
    {
      "id": "13",
      "type": "block",
      "statements": []
    },
    {
      "id": "14",
      "type": "block",
      "statements": []
    }
  ],
  "edges": [
    {
      "source": "1",
      "target": "2",
      "type": "true"
    },
    {
      "source": "1",
      "target": "3",
      "type": "false"
    },
    {
      "source": "2",
      "target": "4",
      "type": "next"
    },
    {
      "source": "3",
      "target": "4",
      "type": "next"
    },
    {
      "source": "4",
      "target": "5",
      "type": "true"
    },
    {
      "source": "4",
      "target": "6",
      "type": "false"
    },
    {
      "source": "5",
      "target": "7",
      "type": "next"
    },
    {
      "source": "6",
      "target": "7",
      "type": "next"
    },
    {
      "source": "7",
      "target": "8",
      "type": "true"
    },
    {
      "source": "7",
      "target": "9",
      "type": "false"
    },
    {
      "source": "9",
      "target": "10",
      "type": "next"
    },
    {
      "source": "11",
      "target": "12",
      "type": "true"
    },
    {
      "source": "11",
      "target": "13",
      "type": "false"
    },
    {
      "source": "12",
      "target": "14",
      "type": "next"
    },
    {
      "source": "13",
      "target": "14",
      "type": "next"
    }
  ]
}