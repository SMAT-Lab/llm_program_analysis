{
  "nodes": [
    {
      "id": "1",
      "type": "block",
      "statements": [
        "import re",
        "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema",
        "from backend.data.model import SchemaField",
        "class CodeExtractionBlock(Block):\n\n    class Input(BlockSchema):\n        text: str = SchemaField(description='Text containing code blocks to extract (e.g., AI response)', placeholder='Enter text containing code blocks')\n\n    class Output(BlockSchema):\n        html: str = SchemaField(description='Extracted HTML code')\n        css: str = SchemaField(description='Extracted CSS code')\n        javascript: str = SchemaField(description='Extracted JavaScript code')\n        python: str = SchemaField(description='Extracted Python code')\n        sql: str = SchemaField(description='Extracted SQL code')\n        java: str = SchemaField(description='Extracted Java code')\n        cpp: str = SchemaField(description='Extracted C++ code')\n        csharp: str = SchemaField(description='Extracted C# code')\n        json_code: str = SchemaField(description='Extracted JSON code')\n        bash: str = SchemaField(description='Extracted Bash code')\n        php: str = SchemaField(description='Extracted PHP code')\n        ruby: str = SchemaField(description='Extracted Ruby code')\n        yaml: str = SchemaField(description='Extracted YAML code')\n        markdown: str = SchemaField(description='Extracted Markdown code')\n        typescript: str = SchemaField(description='Extracted TypeScript code')\n        xml: str = SchemaField(description='Extracted XML code')\n        remaining_text: str = SchemaField(description='Remaining text after code extraction')\n\n    def __init__(self):\n        super().__init__(id='d3a7d896-3b78-4f44-8b4b-48fbf4f0bcd8', description='Extracts code blocks from text and identifies their programming languages', categories={BlockCategory.TEXT}, input_schema=CodeExtractionBlock.Input, output_schema=CodeExtractionBlock.Output, test_input={'text': \"Here's a Python example:\\n```python\\nprint('Hello World')\\n```\\nAnd some HTML:\\n```html\\n<h1>Title</h1>\\n```\"}, test_output=[('html', '<h1>Title</h1>'), ('python', \"print('Hello World')\"), ('remaining_text', \"Here's a Python example:\\nAnd some HTML:\")])\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        language_aliases = {'html': ['html', 'htm'], 'css': ['css'], 'javascript': ['javascript', 'js'], 'python': ['python', 'py'], 'sql': ['sql'], 'java': ['java'], 'cpp': ['cpp', 'c++'], 'csharp': ['csharp', 'c#', 'cs'], 'json_code': ['json'], 'bash': ['bash', 'shell', 'sh'], 'php': ['php'], 'ruby': ['ruby', 'rb'], 'yaml': ['yaml', 'yml'], 'markdown': ['markdown', 'md'], 'typescript': ['typescript', 'ts'], 'xml': ['xml']}\n        for (canonical_name, aliases) in language_aliases.items():\n            code = ''\n            for alias in aliases:\n                code_for_alias = self.extract_code(input_data.text, alias)\n                if code_for_alias:\n                    code = code + '\\n\\n' + code_for_alias if code else code_for_alias\n            if code:\n                yield (canonical_name, code)\n        pattern = '```(?:' + '|'.join((re.escape(alias) for aliases in language_aliases.values() for alias in aliases)) + ')\\\\s+[\\\\s\\\\S]*?```'\n        remaining_text = re.sub(pattern, '', input_data.text).strip()\n        remaining_text = re.sub('\\\\n\\\\s*\\\\n', '\\n', remaining_text)\n        if remaining_text:\n            yield ('remaining_text', remaining_text)\n\n    def extract_code(self, text: str, language: str) -> str:\n        language = re.escape(language)\n        pattern = re.compile(f'```{language}\\\\s+(.*?)```', re.DOTALL | re.IGNORECASE)\n        matches = pattern.finditer(text)\n        code_blocks = [match.group(1).strip() for match in matches]\n        return '\\n\\n'.join(code_blocks) if code_blocks else ''",
        "class Input(BlockSchema):\n    text: str = SchemaField(description='Text containing code blocks to extract (e.g., AI response)', placeholder='Enter text containing code blocks')",
        "text: str = SchemaField(description='Text containing code blocks to extract (e.g., AI response)', placeholder='Enter text containing code blocks')",
        "class Output(BlockSchema):\n    html: str = SchemaField(description='Extracted HTML code')\n    css: str = SchemaField(description='Extracted CSS code')\n    javascript: str = SchemaField(description='Extracted JavaScript code')\n    python: str = SchemaField(description='Extracted Python code')\n    sql: str = SchemaField(description='Extracted SQL code')\n    java: str = SchemaField(description='Extracted Java code')\n    cpp: str = SchemaField(description='Extracted C++ code')\n    csharp: str = SchemaField(description='Extracted C# code')\n    json_code: str = SchemaField(description='Extracted JSON code')\n    bash: str = SchemaField(description='Extracted Bash code')\n    php: str = SchemaField(description='Extracted PHP code')\n    ruby: str = SchemaField(description='Extracted Ruby code')\n    yaml: str = SchemaField(description='Extracted YAML code')\n    markdown: str = SchemaField(description='Extracted Markdown code')\n    typescript: str = SchemaField(description='Extracted TypeScript code')\n    xml: str = SchemaField(description='Extracted XML code')\n    remaining_text: str = SchemaField(description='Remaining text after code extraction')",
        "html: str = SchemaField(description='Extracted HTML code')",
        "css: str = SchemaField(description='Extracted CSS code')",
        "javascript: str = SchemaField(description='Extracted JavaScript code')",
        "python: str = SchemaField(description='Extracted Python code')",
        "sql: str = SchemaField(description='Extracted SQL code')",
        "java: str = SchemaField(description='Extracted Java code')",
        "cpp: str = SchemaField(description='Extracted C++ code')",
        "csharp: str = SchemaField(description='Extracted C# code')",
        "json_code: str = SchemaField(description='Extracted JSON code')",
        "bash: str = SchemaField(description='Extracted Bash code')",
        "php: str = SchemaField(description='Extracted PHP code')",
        "ruby: str = SchemaField(description='Extracted Ruby code')",
        "yaml: str = SchemaField(description='Extracted YAML code')",
        "markdown: str = SchemaField(description='Extracted Markdown code')",
        "typescript: str = SchemaField(description='Extracted TypeScript code')",
        "xml: str = SchemaField(description='Extracted XML code')",
        "remaining_text: str = SchemaField(description='Remaining text after code extraction')",
        "def __init__(self):\n    super().__init__(id='d3a7d896-3b78-4f44-8b4b-48fbf4f0bcd8', description='Extracts code blocks from text and identifies their programming languages', categories={BlockCategory.TEXT}, input_schema=CodeExtractionBlock.Input, output_schema=CodeExtractionBlock.Output, test_input={'text': \"Here's a Python example:\\n```python\\nprint('Hello World')\\n```\\nAnd some HTML:\\n```html\\n<h1>Title</h1>\\n```\"}, test_output=[('html', '<h1>Title</h1>'), ('python', \"print('Hello World')\"), ('remaining_text', \"Here's a Python example:\\nAnd some HTML:\")])",
        "super().__init__()",
        "def run(self, input_data: Input, **kwargs) -> BlockOutput:\n    language_aliases = {'html': ['html', 'htm'], 'css': ['css'], 'javascript': ['javascript', 'js'], 'python': ['python', 'py'], 'sql': ['sql'], 'java': ['java'], 'cpp': ['cpp', 'c++'], 'csharp': ['csharp', 'c#', 'cs'], 'json_code': ['json'], 'bash': ['bash', 'shell', 'sh'], 'php': ['php'], 'ruby': ['ruby', 'rb'], 'yaml': ['yaml', 'yml'], 'markdown': ['markdown', 'md'], 'typescript': ['typescript', 'ts'], 'xml': ['xml']}\n    for (canonical_name, aliases) in language_aliases.items():\n        code = ''\n        for alias in aliases:\n            code_for_alias = self.extract_code(input_data.text, alias)\n            if code_for_alias:\n                code = code + '\\n\\n' + code_for_alias if code else code_for_alias\n        if code:\n            yield (canonical_name, code)\n    pattern = '```(?:' + '|'.join((re.escape(alias) for aliases in language_aliases.values() for alias in aliases)) + ')\\\\s+[\\\\s\\\\S]*?```'\n    remaining_text = re.sub(pattern, '', input_data.text).strip()\n    remaining_text = re.sub('\\\\n\\\\s*\\\\n', '\\n', remaining_text)\n    if remaining_text:\n        yield ('remaining_text', remaining_text)",
        "language_aliases = {'html': ['html', 'htm'], 'css': ['css'], 'javascript': ['javascript', 'js'], 'python': ['python', 'py'], 'sql': ['sql'], 'java': ['java'], 'cpp': ['cpp', 'c++'], 'csharp': ['csharp', 'c#', 'cs'], 'json_code': ['json'], 'bash': ['bash', 'shell', 'sh'], 'php': ['php'], 'ruby': ['ruby', 'rb'], 'yaml': ['yaml', 'yml'], 'markdown': ['markdown', 'md'], 'typescript': ['typescript', 'ts'], 'xml': ['xml']}"
      ]
    },
    {
      "id": "2",
      "type": "block",
      "statements": [
        "(canonical_name, aliases)",
        "language_aliases.items()"
      ]
    },
    {
      "id": "3",
      "type": "block",
      "statements": [
        "code = ''"
      ]
    },
    {
      "id": "4",
      "type": "block",
      "statements": [
        "pattern = '```(?:' + '|'.join((re.escape(alias) for aliases in language_aliases.values() for alias in aliases)) + ')\\\\s+[\\\\s\\\\S]*?```'",
        "remaining_text = re.sub(pattern, '', input_data.text).strip()",
        "remaining_text = re.sub('\\\\n\\\\s*\\\\n', '\\n', remaining_text)",
        "remaining_text"
      ]
    },
    {
      "id": "5",
      "type": "block",
      "statements": [
        "alias",
        "aliases"
      ]
    },
    {
      "id": "6",
      "type": "block",
      "statements": [
        "code_for_alias = self.extract_code(input_data.text, alias)",
        "code_for_alias"
      ]
    },
    {
      "id": "7",
      "type": "block",
      "statements": [
        "code"
      ]
    },
    {
      "id": "8",
      "type": "block",
      "statements": [
        "code = code + '\\n\\n' + code_for_alias if code else code_for_alias"
      ]
    },
    {
      "id": "9",
      "type": "block",
      "statements": []
    },
    {
      "id": "10",
      "type": "block",
      "statements": []
    },
    {
      "id": "11",
      "type": "block",
      "statements": [
        "(yield (canonical_name, code))"
      ]
    },
    {
      "id": "12",
      "type": "block",
      "statements": []
    },
    {
      "id": "13",
      "type": "block",
      "statements": []
    },
    {
      "id": "14",
      "type": "block",
      "statements": [
        "(yield ('remaining_text', remaining_text))"
      ]
    },
    {
      "id": "15",
      "type": "block",
      "statements": []
    },
    {
      "id": "16",
      "type": "block",
      "statements": [
        "def extract_code(self, text: str, language: str) -> str:\n    language = re.escape(language)\n    pattern = re.compile(f'```{language}\\\\s+(.*?)```', re.DOTALL | re.IGNORECASE)\n    matches = pattern.finditer(text)\n    code_blocks = [match.group(1).strip() for match in matches]\n    return '\\n\\n'.join(code_blocks) if code_blocks else ''",
        "language = re.escape(language)",
        "pattern = re.compile(f'```{language}\\\\s+(.*?)```', re.DOTALL | re.IGNORECASE)",
        "matches = pattern.finditer(text)",
        "code_blocks = [match.group(1).strip() for match in matches]",
        "return '\\n\\n'.join(code_blocks) if code_blocks else ''"
      ]
    }
  ],
  "edges": [
    {
      "source": "1",
      "target": "2",
      "type": "next"
    },
    {
      "source": "2",
      "target": "3",
      "type": "true"
    },
    {
      "source": "2",
      "target": "4",
      "type": "false"
    },
    {
      "source": "3",
      "target": "5",
      "type": "next"
    },
    {
      "source": "4",
      "target": "14",
      "type": "true"
    },
    {
      "source": "4",
      "target": "15",
      "type": "false"
    },
    {
      "source": "5",
      "target": "6",
      "type": "true"
    },
    {
      "source": "5",
      "target": "7",
      "type": "false"
    },
    {
      "source": "6",
      "target": "8",
      "type": "true"
    },
    {
      "source": "6",
      "target": "9",
      "type": "false"
    },
    {
      "source": "7",
      "target": "11",
      "type": "true"
    },
    {
      "source": "7",
      "target": "12",
      "type": "false"
    },
    {
      "source": "8",
      "target": "10",
      "type": "next"
    },
    {
      "source": "9",
      "target": "10",
      "type": "next"
    },
    {
      "source": "10",
      "target": "5",
      "type": "next"
    },
    {
      "source": "11",
      "target": "13",
      "type": "next"
    },
    {
      "source": "12",
      "target": "13",
      "type": "next"
    },
    {
      "source": "13",
      "target": "2",
      "type": "next"
    },
    {
      "source": "14",
      "target": "16",
      "type": "next"
    },
    {
      "source": "15",
      "target": "16",
      "type": "next"
    }
  ]
}