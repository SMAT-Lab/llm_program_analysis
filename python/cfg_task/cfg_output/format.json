{
  "nodes": [
    {
      "id": "1",
      "type": "block",
      "statements": [
        "import re",
        "import sys",
        "from string import punctuation",
        "from typing import List, Tuple, Dict",
        "punctuation = punctuation.replace('()', '')",
        "anchor = '###'",
        "auth_keys = ['apiKey', 'OAuth', 'X-Mashape-Key', 'User-Agent', 'No']",
        "https_keys = ['Yes', 'No']",
        "cors_keys = ['Yes', 'No', 'Unknown']",
        "index_title = 0",
        "index_desc = 1",
        "index_auth = 2",
        "index_https = 3",
        "index_cors = 4",
        "num_segments = 5",
        "min_entries_per_category = 3",
        "max_description_length = 100",
        "anchor_re = re.compile(anchor + '\\\\s(.+)')",
        "category_title_in_index_re = re.compile('\\\\*\\\\s\\\\[(.*)\\\\]')",
        "link_re = re.compile('\\\\[(.+)\\\\]\\\\((http.*)\\\\)')",
        "APIList = List[str]",
        "Categories = Dict[str, APIList]",
        "CategoriesLineNumber = Dict[str, int]",
        "def error_message(line_number: int, message: str) -> str:\n    line = line_number + 1\n    return f'(L{line:03d}) {message}'",
        "line = line_number + 1",
        "return f'(L{line:03d}) {message}'"
      ]
    },
    {
      "id": "2",
      "type": "block",
      "statements": [
        "def get_categories_content(contents: List[str]) -> Tuple[Categories, CategoriesLineNumber]:\n    categories = {}\n    category_line_num = {}\n    for (line_num, line_content) in enumerate(contents):\n        if line_content.startswith(anchor):\n            category = line_content.split(anchor)[1].strip()\n            categories[category] = []\n            category_line_num[category] = line_num\n            continue\n        if not line_content.startswith('|') or line_content.startswith('|---'):\n            continue\n        raw_title = [raw_content.strip() for raw_content in line_content.split('|')[1:-1]][0]\n        title_match = link_re.match(raw_title)\n        if title_match:\n            title = title_match.group(1).upper()\n            categories[category].append(title)\n    return (categories, category_line_num)",
        "categories = {}",
        "category_line_num = {}"
      ]
    },
    {
      "id": "3",
      "type": "block",
      "statements": [
        "(line_num, line_content)",
        "enumerate(contents)"
      ]
    },
    {
      "id": "4",
      "type": "block",
      "statements": [
        "line_content.startswith(anchor)"
      ]
    },
    {
      "id": "5",
      "type": "block",
      "statements": [
        "return (categories, category_line_num)"
      ]
    },
    {
      "id": "6",
      "type": "block",
      "statements": [
        "category = line_content.split(anchor)[1].strip()",
        "categories[category] = []",
        "category_line_num[category] = line_num",
        "continue"
      ]
    },
    {
      "id": "7",
      "type": "block",
      "statements": []
    },
    {
      "id": "8",
      "type": "block",
      "statements": [
        "not line_content.startswith('|') or line_content.startswith('|---')"
      ]
    },
    {
      "id": "9",
      "type": "block",
      "statements": [
        "continue"
      ]
    },
    {
      "id": "10",
      "type": "block",
      "statements": []
    },
    {
      "id": "11",
      "type": "block",
      "statements": [
        "raw_title = [raw_content.strip() for raw_content in line_content.split('|')[1:-1]][0]",
        "title_match = link_re.match(raw_title)",
        "title_match"
      ]
    },
    {
      "id": "12",
      "type": "block",
      "statements": [
        "title = title_match.group(1).upper()",
        "categories[category].append(title)"
      ]
    },
    {
      "id": "13",
      "type": "block",
      "statements": []
    },
    {
      "id": "14",
      "type": "block",
      "statements": []
    },
    {
      "id": "15",
      "type": "block",
      "statements": [
        "def check_alphabetical_order(lines: List[str]) -> List[str]:\n    err_msgs = []\n    (categories, category_line_num) = get_categories_content(contents=lines)\n    for (category, api_list) in categories.items():\n        if sorted(api_list) != api_list:\n            err_msg = error_message(category_line_num[category], f'{category} category is not alphabetical order')\n            err_msgs.append(err_msg)\n    return err_msgs",
        "err_msgs = []",
        "(categories, category_line_num) = get_categories_content(contents=lines)"
      ]
    },
    {
      "id": "16",
      "type": "block",
      "statements": [
        "(category, api_list)",
        "categories.items()"
      ]
    },
    {
      "id": "17",
      "type": "block",
      "statements": [
        "sorted(api_list) NotEq api_list"
      ]
    },
    {
      "id": "18",
      "type": "block",
      "statements": [
        "return err_msgs"
      ]
    },
    {
      "id": "19",
      "type": "block",
      "statements": [
        "err_msg = error_message(category_line_num[category], f'{category} category is not alphabetical order')",
        "err_msgs.append(err_msg)"
      ]
    },
    {
      "id": "20",
      "type": "block",
      "statements": []
    },
    {
      "id": "21",
      "type": "block",
      "statements": []
    },
    {
      "id": "22",
      "type": "block",
      "statements": [
        "def check_title(line_num: int, raw_title: str) -> List[str]:\n    err_msgs = []\n    title_match = link_re.match(raw_title)\n    if not title_match:\n        err_msg = error_message(line_num, 'Title syntax should be \"[TITLE](LINK)\"')\n        err_msgs.append(err_msg)\n    else:\n        title = title_match.group(1)\n        if title.upper().endswith(' API'):\n            err_msg = error_message(line_num, 'Title should not end with \"... API\". Every entry is an API here!')\n            err_msgs.append(err_msg)\n    return err_msgs",
        "err_msgs = []",
        "title_match = link_re.match(raw_title)",
        "not title_match"
      ]
    },
    {
      "id": "23",
      "type": "block",
      "statements": [
        "err_msg = error_message(line_num, 'Title syntax should be \"[TITLE](LINK)\"')",
        "err_msgs.append(err_msg)"
      ]
    },
    {
      "id": "24",
      "type": "block",
      "statements": [
        "title = title_match.group(1)",
        "title.upper().endswith(' API')"
      ]
    },
    {
      "id": "25",
      "type": "block",
      "statements": [
        "return err_msgs"
      ]
    },
    {
      "id": "26",
      "type": "block",
      "statements": [
        "err_msg = error_message(line_num, 'Title should not end with \"... API\". Every entry is an API here!')",
        "err_msgs.append(err_msg)"
      ]
    },
    {
      "id": "27",
      "type": "block",
      "statements": []
    },
    {
      "id": "28",
      "type": "block",
      "statements": []
    },
    {
      "id": "29",
      "type": "block",
      "statements": [
        "def check_description(line_num: int, description: str) -> List[str]:\n    err_msgs = []\n    first_char = description[0]\n    if first_char.upper() != first_char:\n        err_msg = error_message(line_num, 'first character of description is not capitalized')\n        err_msgs.append(err_msg)\n    last_char = description[-1]\n    if last_char in punctuation:\n        err_msg = error_message(line_num, f'description should not end with {last_char}')\n        err_msgs.append(err_msg)\n    desc_length = len(description)\n    if desc_length > max_description_length:\n        err_msg = error_message(line_num, f'description should not exceed {max_description_length} characters (currently {desc_length})')\n        err_msgs.append(err_msg)\n    return err_msgs",
        "err_msgs = []",
        "first_char = description[0]",
        "first_char.upper() NotEq first_char"
      ]
    },
    {
      "id": "30",
      "type": "block",
      "statements": [
        "err_msg = error_message(line_num, 'first character of description is not capitalized')",
        "err_msgs.append(err_msg)"
      ]
    },
    {
      "id": "31",
      "type": "block",
      "statements": []
    },
    {
      "id": "32",
      "type": "block",
      "statements": [
        "last_char = description[-1]",
        "last_char In punctuation"
      ]
    },
    {
      "id": "33",
      "type": "block",
      "statements": [
        "err_msg = error_message(line_num, f'description should not end with {last_char}')",
        "err_msgs.append(err_msg)"
      ]
    },
    {
      "id": "34",
      "type": "block",
      "statements": []
    },
    {
      "id": "35",
      "type": "block",
      "statements": [
        "desc_length = len(description)",
        "desc_length Gt max_description_length"
      ]
    },
    {
      "id": "36",
      "type": "block",
      "statements": [
        "err_msg = error_message(line_num, f'description should not exceed {max_description_length} characters (currently {desc_length})')",
        "err_msgs.append(err_msg)"
      ]
    },
    {
      "id": "37",
      "type": "block",
      "statements": []
    },
    {
      "id": "38",
      "type": "block",
      "statements": [
        "return err_msgs"
      ]
    },
    {
      "id": "39",
      "type": "block",
      "statements": [
        "def check_auth(line_num: int, auth: str) -> List[str]:\n    err_msgs = []\n    backtick = '`'\n    if auth != 'No' and (not auth.startswith(backtick) or not auth.endswith(backtick)):\n        err_msg = error_message(line_num, 'auth value is not enclosed with `backticks`')\n        err_msgs.append(err_msg)\n    if auth.replace(backtick, '') not in auth_keys:\n        err_msg = error_message(line_num, f'{auth} is not a valid Auth option')\n        err_msgs.append(err_msg)\n    return err_msgs",
        "err_msgs = []",
        "backtick = '`'",
        "auth != 'No' and (not auth.startswith(backtick) or not auth.endswith(backtick))"
      ]
    },
    {
      "id": "40",
      "type": "block",
      "statements": [
        "err_msg = error_message(line_num, 'auth value is not enclosed with `backticks`')",
        "err_msgs.append(err_msg)"
      ]
    },
    {
      "id": "41",
      "type": "block",
      "statements": []
    },
    {
      "id": "42",
      "type": "block",
      "statements": [
        "auth.replace(backtick, '') NotIn auth_keys"
      ]
    },
    {
      "id": "43",
      "type": "block",
      "statements": [
        "err_msg = error_message(line_num, f'{auth} is not a valid Auth option')",
        "err_msgs.append(err_msg)"
      ]
    },
    {
      "id": "44",
      "type": "block",
      "statements": []
    },
    {
      "id": "45",
      "type": "block",
      "statements": [
        "return err_msgs"
      ]
    },
    {
      "id": "46",
      "type": "block",
      "statements": [
        "def check_https(line_num: int, https: str) -> List[str]:\n    err_msgs = []\n    if https not in https_keys:\n        err_msg = error_message(line_num, f'{https} is not a valid HTTPS option')\n        err_msgs.append(err_msg)\n    return err_msgs",
        "err_msgs = []",
        "https NotIn https_keys"
      ]
    },
    {
      "id": "47",
      "type": "block",
      "statements": [
        "err_msg = error_message(line_num, f'{https} is not a valid HTTPS option')",
        "err_msgs.append(err_msg)"
      ]
    },
    {
      "id": "48",
      "type": "block",
      "statements": []
    },
    {
      "id": "49",
      "type": "block",
      "statements": [
        "return err_msgs"
      ]
    },
    {
      "id": "50",
      "type": "block",
      "statements": [
        "def check_cors(line_num: int, cors: str) -> List[str]:\n    err_msgs = []\n    if cors not in cors_keys:\n        err_msg = error_message(line_num, f'{cors} is not a valid CORS option')\n        err_msgs.append(err_msg)\n    return err_msgs",
        "err_msgs = []",
        "cors NotIn cors_keys"
      ]
    },
    {
      "id": "51",
      "type": "block",
      "statements": [
        "err_msg = error_message(line_num, f'{cors} is not a valid CORS option')",
        "err_msgs.append(err_msg)"
      ]
    },
    {
      "id": "52",
      "type": "block",
      "statements": []
    },
    {
      "id": "53",
      "type": "block",
      "statements": [
        "return err_msgs"
      ]
    },
    {
      "id": "54",
      "type": "block",
      "statements": [
        "def check_entry(line_num: int, segments: List[str]) -> List[str]:\n    raw_title = segments[index_title]\n    description = segments[index_desc]\n    auth = segments[index_auth]\n    https = segments[index_https]\n    cors = segments[index_cors]\n    title_err_msgs = check_title(line_num, raw_title)\n    desc_err_msgs = check_description(line_num, description)\n    auth_err_msgs = check_auth(line_num, auth)\n    https_err_msgs = check_https(line_num, https)\n    cors_err_msgs = check_cors(line_num, cors)\n    err_msgs = [*title_err_msgs, *desc_err_msgs, *auth_err_msgs, *https_err_msgs, *cors_err_msgs]\n    return err_msgs",
        "raw_title = segments[index_title]",
        "description = segments[index_desc]",
        "auth = segments[index_auth]",
        "https = segments[index_https]",
        "cors = segments[index_cors]",
        "title_err_msgs = check_title(line_num, raw_title)",
        "desc_err_msgs = check_description(line_num, description)",
        "auth_err_msgs = check_auth(line_num, auth)",
        "https_err_msgs = check_https(line_num, https)",
        "cors_err_msgs = check_cors(line_num, cors)",
        "err_msgs = [*title_err_msgs, *desc_err_msgs, *auth_err_msgs, *https_err_msgs, *cors_err_msgs]",
        "return err_msgs"
      ]
    },
    {
      "id": "55",
      "type": "block",
      "statements": [
        "def check_file_format(lines: List[str]) -> List[str]:\n    err_msgs = []\n    category_title_in_index = []\n    alphabetical_err_msgs = check_alphabetical_order(lines)\n    err_msgs.extend(alphabetical_err_msgs)\n    num_in_category = min_entries_per_category + 1\n    category = ''\n    category_line = 0\n    for (line_num, line_content) in enumerate(lines):\n        category_title_match = category_title_in_index_re.match(line_content)\n        if category_title_match:\n            category_title_in_index.append(category_title_match.group(1))\n        if line_content.startswith(anchor):\n            category_match = anchor_re.match(line_content)\n            if category_match:\n                if category_match.group(1) not in category_title_in_index:\n                    err_msg = error_message(line_num, f'category header ({category_match.group(1)}) not added to Index section')\n                    err_msgs.append(err_msg)\n            else:\n                err_msg = error_message(line_num, 'category header is not formatted correctly')\n                err_msgs.append(err_msg)\n            if num_in_category < min_entries_per_category:\n                err_msg = error_message(category_line, f'{category} category does not have the minimum {min_entries_per_category} entries (only has {num_in_category})')\n                err_msgs.append(err_msg)\n            category = line_content.split(' ')[1]\n            category_line = line_num\n            num_in_category = 0\n            continue\n        if not line_content.startswith('|') or line_content.startswith('|---'):\n            continue\n        num_in_category += 1\n        segments = line_content.split('|')[1:-1]\n        if len(segments) < num_segments:\n            err_msg = error_message(line_num, f'entry does not have all the required columns (have {len(segments)}, need {num_segments})')\n            err_msgs.append(err_msg)\n            continue\n        for segment in segments:\n            if len(segment) - len(segment.lstrip()) != 1 or len(segment) - len(segment.rstrip()) != 1:\n                err_msg = error_message(line_num, 'each segment must start and end with exactly 1 space')\n                err_msgs.append(err_msg)\n        segments = [segment.strip() for segment in segments]\n        entry_err_msgs = check_entry(line_num, segments)\n        err_msgs.extend(entry_err_msgs)\n    return err_msgs",
        "err_msgs = []",
        "category_title_in_index = []",
        "alphabetical_err_msgs = check_alphabetical_order(lines)",
        "err_msgs.extend(alphabetical_err_msgs)",
        "num_in_category = min_entries_per_category + 1",
        "category = ''",
        "category_line = 0"
      ]
    },
    {
      "id": "56",
      "type": "block",
      "statements": [
        "(line_num, line_content)",
        "enumerate(lines)"
      ]
    },
    {
      "id": "57",
      "type": "block",
      "statements": [
        "category_title_match = category_title_in_index_re.match(line_content)",
        "category_title_match"
      ]
    },
    {
      "id": "58",
      "type": "block",
      "statements": [
        "return err_msgs"
      ]
    },
    {
      "id": "59",
      "type": "block",
      "statements": [
        "category_title_in_index.append(category_title_match.group(1))"
      ]
    },
    {
      "id": "60",
      "type": "block",
      "statements": []
    },
    {
      "id": "61",
      "type": "block",
      "statements": [
        "line_content.startswith(anchor)"
      ]
    },
    {
      "id": "62",
      "type": "block",
      "statements": [
        "category_match = anchor_re.match(line_content)",
        "category_match"
      ]
    },
    {
      "id": "63",
      "type": "block",
      "statements": []
    },
    {
      "id": "64",
      "type": "block",
      "statements": [
        "not line_content.startswith('|') or line_content.startswith('|---')"
      ]
    },
    {
      "id": "65",
      "type": "block",
      "statements": [
        "category_match.group(1) NotIn category_title_in_index"
      ]
    },
    {
      "id": "66",
      "type": "block",
      "statements": [
        "err_msg = error_message(line_num, 'category header is not formatted correctly')",
        "err_msgs.append(err_msg)"
      ]
    },
    {
      "id": "67",
      "type": "block",
      "statements": [
        "num_in_category Lt min_entries_per_category"
      ]
    },
    {
      "id": "68",
      "type": "block",
      "statements": [
        "err_msg = error_message(line_num, f'category header ({category_match.group(1)}) not added to Index section')",
        "err_msgs.append(err_msg)"
      ]
    },
    {
      "id": "69",
      "type": "block",
      "statements": []
    },
    {
      "id": "70",
      "type": "block",
      "statements": []
    },
    {
      "id": "71",
      "type": "block",
      "statements": [
        "err_msg = error_message(category_line, f'{category} category does not have the minimum {min_entries_per_category} entries (only has {num_in_category})')",
        "err_msgs.append(err_msg)"
      ]
    },
    {
      "id": "72",
      "type": "block",
      "statements": []
    },
    {
      "id": "73",
      "type": "block",
      "statements": [
        "category = line_content.split(' ')[1]",
        "category_line = line_num",
        "num_in_category = 0",
        "continue"
      ]
    },
    {
      "id": "74",
      "type": "block",
      "statements": [
        "continue"
      ]
    },
    {
      "id": "75",
      "type": "block",
      "statements": []
    },
    {
      "id": "76",
      "type": "block",
      "statements": [
        "num_in_category += 1",
        "segments = line_content.split('|')[1:-1]",
        "len(segments) Lt num_segments"
      ]
    },
    {
      "id": "77",
      "type": "block",
      "statements": [
        "err_msg = error_message(line_num, f'entry does not have all the required columns (have {len(segments)}, need {num_segments})')",
        "err_msgs.append(err_msg)",
        "continue"
      ]
    },
    {
      "id": "78",
      "type": "block",
      "statements": []
    },
    {
      "id": "79",
      "type": "block",
      "statements": []
    },
    {
      "id": "80",
      "type": "block",
      "statements": [
        "segment",
        "segments"
      ]
    },
    {
      "id": "81",
      "type": "block",
      "statements": [
        "len(segment) - len(segment.lstrip()) != 1 or len(segment) - len(segment.rstrip()) != 1"
      ]
    },
    {
      "id": "82",
      "type": "block",
      "statements": [
        "segments = [segment.strip() for segment in segments]",
        "entry_err_msgs = check_entry(line_num, segments)",
        "err_msgs.extend(entry_err_msgs)"
      ]
    },
    {
      "id": "83",
      "type": "block",
      "statements": [
        "err_msg = error_message(line_num, 'each segment must start and end with exactly 1 space')",
        "err_msgs.append(err_msg)"
      ]
    },
    {
      "id": "84",
      "type": "block",
      "statements": []
    },
    {
      "id": "85",
      "type": "block",
      "statements": []
    },
    {
      "id": "86",
      "type": "block",
      "statements": [
        "def main(filename: str) -> None:\n    with open(filename, mode='r', encoding='utf-8') as file:\n        lines = list((line.rstrip() for line in file))\n    file_format_err_msgs = check_file_format(lines)\n    if file_format_err_msgs:\n        for err_msg in file_format_err_msgs:\n            print(err_msg)\n        sys.exit(1)",
        "with open(filename, mode='r', encoding='utf-8') as file:\n    lines = list((line.rstrip() for line in file))",
        "lines = list((line.rstrip() for line in file))",
        "file_format_err_msgs = check_file_format(lines)",
        "file_format_err_msgs"
      ]
    },
    {
      "id": "87",
      "type": "block",
      "statements": []
    },
    {
      "id": "88",
      "type": "block",
      "statements": []
    },
    {
      "id": "89",
      "type": "block",
      "statements": [
        "__name__ Eq '__main__'"
      ]
    },
    {
      "id": "90",
      "type": "block",
      "statements": [
        "err_msg",
        "file_format_err_msgs"
      ]
    },
    {
      "id": "91",
      "type": "block",
      "statements": [
        "print(err_msg)"
      ]
    },
    {
      "id": "92",
      "type": "block",
      "statements": [
        "sys.exit(1)"
      ]
    },
    {
      "id": "93",
      "type": "block",
      "statements": [
        "num_args = len(sys.argv)",
        "num_args Lt 2"
      ]
    },
    {
      "id": "94",
      "type": "block",
      "statements": []
    },
    {
      "id": "95",
      "type": "block",
      "statements": []
    },
    {
      "id": "96",
      "type": "block",
      "statements": [
        "print('No .md file passed (file should contain Markdown table syntax)')",
        "sys.exit(1)"
      ]
    },
    {
      "id": "97",
      "type": "block",
      "statements": []
    },
    {
      "id": "98",
      "type": "block",
      "statements": [
        "filename = sys.argv[1]",
        "main(filename)"
      ]
    }
  ],
  "edges": [
    {
      "source": "2",
      "target": "3",
      "type": "next"
    },
    {
      "source": "3",
      "target": "4",
      "type": "true"
    },
    {
      "source": "3",
      "target": "5",
      "type": "false"
    },
    {
      "source": "4",
      "target": "6",
      "type": "true"
    },
    {
      "source": "4",
      "target": "7",
      "type": "false"
    },
    {
      "source": "6",
      "target": "8",
      "type": "next"
    },
    {
      "source": "7",
      "target": "8",
      "type": "next"
    },
    {
      "source": "8",
      "target": "9",
      "type": "true"
    },
    {
      "source": "8",
      "target": "10",
      "type": "false"
    },
    {
      "source": "9",
      "target": "11",
      "type": "next"
    },
    {
      "source": "10",
      "target": "11",
      "type": "next"
    },
    {
      "source": "11",
      "target": "12",
      "type": "true"
    },
    {
      "source": "11",
      "target": "13",
      "type": "false"
    },
    {
      "source": "12",
      "target": "14",
      "type": "next"
    },
    {
      "source": "13",
      "target": "14",
      "type": "next"
    },
    {
      "source": "14",
      "target": "3",
      "type": "next"
    },
    {
      "source": "15",
      "target": "16",
      "type": "next"
    },
    {
      "source": "16",
      "target": "17",
      "type": "true"
    },
    {
      "source": "16",
      "target": "18",
      "type": "false"
    },
    {
      "source": "17",
      "target": "19",
      "type": "true"
    },
    {
      "source": "17",
      "target": "20",
      "type": "false"
    },
    {
      "source": "19",
      "target": "21",
      "type": "next"
    },
    {
      "source": "20",
      "target": "21",
      "type": "next"
    },
    {
      "source": "21",
      "target": "16",
      "type": "next"
    },
    {
      "source": "22",
      "target": "23",
      "type": "true"
    },
    {
      "source": "22",
      "target": "24",
      "type": "false"
    },
    {
      "source": "23",
      "target": "25",
      "type": "next"
    },
    {
      "source": "24",
      "target": "26",
      "type": "true"
    },
    {
      "source": "24",
      "target": "27",
      "type": "false"
    },
    {
      "source": "26",
      "target": "28",
      "type": "next"
    },
    {
      "source": "27",
      "target": "28",
      "type": "next"
    },
    {
      "source": "28",
      "target": "25",
      "type": "next"
    },
    {
      "source": "29",
      "target": "30",
      "type": "true"
    },
    {
      "source": "29",
      "target": "31",
      "type": "false"
    },
    {
      "source": "30",
      "target": "32",
      "type": "next"
    },
    {
      "source": "31",
      "target": "32",
      "type": "next"
    },
    {
      "source": "32",
      "target": "33",
      "type": "true"
    },
    {
      "source": "32",
      "target": "34",
      "type": "false"
    },
    {
      "source": "33",
      "target": "35",
      "type": "next"
    },
    {
      "source": "34",
      "target": "35",
      "type": "next"
    },
    {
      "source": "35",
      "target": "36",
      "type": "true"
    },
    {
      "source": "35",
      "target": "37",
      "type": "false"
    },
    {
      "source": "36",
      "target": "38",
      "type": "next"
    },
    {
      "source": "37",
      "target": "38",
      "type": "next"
    },
    {
      "source": "39",
      "target": "40",
      "type": "true"
    },
    {
      "source": "39",
      "target": "41",
      "type": "false"
    },
    {
      "source": "40",
      "target": "42",
      "type": "next"
    },
    {
      "source": "41",
      "target": "42",
      "type": "next"
    },
    {
      "source": "42",
      "target": "43",
      "type": "true"
    },
    {
      "source": "42",
      "target": "44",
      "type": "false"
    },
    {
      "source": "43",
      "target": "45",
      "type": "next"
    },
    {
      "source": "44",
      "target": "45",
      "type": "next"
    },
    {
      "source": "46",
      "target": "47",
      "type": "true"
    },
    {
      "source": "46",
      "target": "48",
      "type": "false"
    },
    {
      "source": "47",
      "target": "49",
      "type": "next"
    },
    {
      "source": "48",
      "target": "49",
      "type": "next"
    },
    {
      "source": "50",
      "target": "51",
      "type": "true"
    },
    {
      "source": "50",
      "target": "52",
      "type": "false"
    },
    {
      "source": "51",
      "target": "53",
      "type": "next"
    },
    {
      "source": "52",
      "target": "53",
      "type": "next"
    },
    {
      "source": "55",
      "target": "56",
      "type": "next"
    },
    {
      "source": "56",
      "target": "57",
      "type": "true"
    },
    {
      "source": "56",
      "target": "58",
      "type": "false"
    },
    {
      "source": "57",
      "target": "59",
      "type": "true"
    },
    {
      "source": "57",
      "target": "60",
      "type": "false"
    },
    {
      "source": "59",
      "target": "61",
      "type": "next"
    },
    {
      "source": "60",
      "target": "61",
      "type": "next"
    },
    {
      "source": "61",
      "target": "62",
      "type": "true"
    },
    {
      "source": "61",
      "target": "63",
      "type": "false"
    },
    {
      "source": "62",
      "target": "65",
      "type": "true"
    },
    {
      "source": "62",
      "target": "66",
      "type": "false"
    },
    {
      "source": "63",
      "target": "64",
      "type": "next"
    },
    {
      "source": "64",
      "target": "74",
      "type": "true"
    },
    {
      "source": "64",
      "target": "75",
      "type": "false"
    },
    {
      "source": "65",
      "target": "68",
      "type": "true"
    },
    {
      "source": "65",
      "target": "69",
      "type": "false"
    },
    {
      "source": "66",
      "target": "67",
      "type": "next"
    },
    {
      "source": "67",
      "target": "71",
      "type": "true"
    },
    {
      "source": "67",
      "target": "72",
      "type": "false"
    },
    {
      "source": "68",
      "target": "70",
      "type": "next"
    },
    {
      "source": "69",
      "target": "70",
      "type": "next"
    },
    {
      "source": "70",
      "target": "67",
      "type": "next"
    },
    {
      "source": "71",
      "target": "73",
      "type": "next"
    },
    {
      "source": "72",
      "target": "73",
      "type": "next"
    },
    {
      "source": "73",
      "target": "64",
      "type": "next"
    },
    {
      "source": "74",
      "target": "76",
      "type": "next"
    },
    {
      "source": "75",
      "target": "76",
      "type": "next"
    },
    {
      "source": "76",
      "target": "77",
      "type": "true"
    },
    {
      "source": "76",
      "target": "78",
      "type": "false"
    },
    {
      "source": "77",
      "target": "79",
      "type": "next"
    },
    {
      "source": "78",
      "target": "79",
      "type": "next"
    },
    {
      "source": "79",
      "target": "80",
      "type": "next"
    },
    {
      "source": "80",
      "target": "81",
      "type": "true"
    },
    {
      "source": "80",
      "target": "82",
      "type": "false"
    },
    {
      "source": "81",
      "target": "83",
      "type": "true"
    },
    {
      "source": "81",
      "target": "84",
      "type": "false"
    },
    {
      "source": "82",
      "target": "56",
      "type": "next"
    },
    {
      "source": "83",
      "target": "85",
      "type": "next"
    },
    {
      "source": "84",
      "target": "85",
      "type": "next"
    },
    {
      "source": "85",
      "target": "80",
      "type": "next"
    },
    {
      "source": "86",
      "target": "87",
      "type": "true"
    },
    {
      "source": "86",
      "target": "88",
      "type": "false"
    },
    {
      "source": "87",
      "target": "90",
      "type": "next"
    },
    {
      "source": "88",
      "target": "89",
      "type": "next"
    },
    {
      "source": "89",
      "target": "93",
      "type": "true"
    },
    {
      "source": "89",
      "target": "94",
      "type": "false"
    },
    {
      "source": "90",
      "target": "91",
      "type": "true"
    },
    {
      "source": "90",
      "target": "92",
      "type": "false"
    },
    {
      "source": "91",
      "target": "90",
      "type": "next"
    },
    {
      "source": "92",
      "target": "89",
      "type": "next"
    },
    {
      "source": "93",
      "target": "96",
      "type": "true"
    },
    {
      "source": "93",
      "target": "97",
      "type": "false"
    },
    {
      "source": "94",
      "target": "95",
      "type": "next"
    },
    {
      "source": "96",
      "target": "98",
      "type": "next"
    },
    {
      "source": "97",
      "target": "98",
      "type": "next"
    },
    {
      "source": "98",
      "target": "95",
      "type": "next"
    }
  ]
}