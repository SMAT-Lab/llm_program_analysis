{
  "nodes": [
    {
      "id": "1",
      "type": "block",
      "statements": [
        "from __future__ import annotations",
        "from abc import abstractmethod",
        "from math import pi",
        "from typing import Protocol",
        "import matplotlib.pyplot as plt",
        "import numpy as np",
        "class FilterType(Protocol):\n\n    @abstractmethod\n    def process(self, sample: float) -> float:\n        \"\"\"\n        Calculate y[n]\n\n        >>> issubclass(FilterType, Protocol)\n        True\n        \"\"\"",
        "@abstractmethod\ndef process(self, sample: float) -> float:\n    \"\"\"\n        Calculate y[n]\n\n        >>> issubclass(FilterType, Protocol)\n        True\n        \"\"\"",
        "'\\n        Calculate y[n]\\n\\n        >>> issubclass(FilterType, Protocol)\\n        True\\n        '",
        "def get_bounds(fft_results: np.ndarray, samplerate: int) -> tuple[int | float, int | float]:\n    \"\"\"\n    Get bounds for printing fft results\n\n    >>> import numpy\n    >>> array = numpy.linspace(-20.0, 20.0, 1000)\n    >>> get_bounds(array, 1000)\n    (-20, 20)\n    \"\"\"\n    lowest = min([-20, np.min(fft_results[1:samplerate // 2 - 1])])\n    highest = max([20, np.max(fft_results[1:samplerate // 2 - 1])])\n    return (lowest, highest)",
        "'\\n    Get bounds for printing fft results\\n\\n    >>> import numpy\\n    >>> array = numpy.linspace(-20.0, 20.0, 1000)\\n    >>> get_bounds(array, 1000)\\n    (-20, 20)\\n    '",
        "lowest = min([-20, np.min(fft_results[1:samplerate // 2 - 1])])",
        "highest = max([20, np.max(fft_results[1:samplerate // 2 - 1])])",
        "return (lowest, highest)"
      ]
    },
    {
      "id": "2",
      "type": "block",
      "statements": [
        "def show_frequency_response(filter_type: FilterType, samplerate: int) -> None:\n    \"\"\"\n    Show frequency response of a filter\n\n    >>> from audio_filters.iir_filter import IIRFilter\n    >>> filt = IIRFilter(4)\n    >>> show_frequency_response(filt, 48000)\n    \"\"\"\n    size = 512\n    inputs = [1] + [0] * (size - 1)\n    outputs = [filter_type.process(item) for item in inputs]\n    filler = [0] * (samplerate - size)\n    outputs += filler\n    fft_out = np.abs(np.fft.fft(outputs))\n    fft_db = 20 * np.log10(fft_out)\n    plt.xlim(24, samplerate / 2 - 1)\n    plt.xlabel('Frequency (Hz)')\n    plt.xscale('log')\n    bounds = get_bounds(fft_db, samplerate)\n    plt.ylim(max([-80, bounds[0]]), min([80, bounds[1]]))\n    plt.ylabel('Gain (dB)')\n    plt.plot(fft_db)\n    plt.show()",
        "'\\n    Show frequency response of a filter\\n\\n    >>> from audio_filters.iir_filter import IIRFilter\\n    >>> filt = IIRFilter(4)\\n    >>> show_frequency_response(filt, 48000)\\n    '",
        "size = 512",
        "inputs = [1] + [0] * (size - 1)",
        "outputs = [filter_type.process(item) for item in inputs]",
        "filler = [0] * (samplerate - size)",
        "outputs += filler",
        "fft_out = np.abs(np.fft.fft(outputs))",
        "fft_db = 20 * np.log10(fft_out)",
        "plt.xlim(24, samplerate Div 2 Sub 1)",
        "plt.xlabel('Frequency (Hz)')",
        "plt.xscale('log')",
        "bounds = get_bounds(fft_db, samplerate)",
        "plt.ylim(max([-80, bounds[0]]), min([80, bounds[1]]))",
        "plt.ylabel('Gain (dB)')",
        "plt.plot(fft_db)",
        "plt.show()",
        "def show_phase_response(filter_type: FilterType, samplerate: int) -> None:\n    \"\"\"\n    Show phase response of a filter\n\n    >>> from audio_filters.iir_filter import IIRFilter\n    >>> filt = IIRFilter(4)\n    >>> show_phase_response(filt, 48000)\n    \"\"\"\n    size = 512\n    inputs = [1] + [0] * (size - 1)\n    outputs = [filter_type.process(item) for item in inputs]\n    filler = [0] * (samplerate - size)\n    outputs += filler\n    fft_out = np.angle(np.fft.fft(outputs))\n    plt.xlim(24, samplerate / 2 - 1)\n    plt.xlabel('Frequency (Hz)')\n    plt.xscale('log')\n    plt.ylim(-2 * pi, 2 * pi)\n    plt.ylabel('Phase shift (Radians)')\n    plt.plot(np.unwrap(fft_out, -2 * pi))\n    plt.show()",
        "'\\n    Show phase response of a filter\\n\\n    >>> from audio_filters.iir_filter import IIRFilter\\n    >>> filt = IIRFilter(4)\\n    >>> show_phase_response(filt, 48000)\\n    '",
        "size = 512",
        "inputs = [1] + [0] * (size - 1)",
        "outputs = [filter_type.process(item) for item in inputs]",
        "filler = [0] * (samplerate - size)",
        "outputs += filler",
        "fft_out = np.angle(np.fft.fft(outputs))",
        "plt.xlim(24, samplerate Div 2 Sub 1)",
        "plt.xlabel('Frequency (Hz)')",
        "plt.xscale('log')",
        "plt.ylim(-2 Mult pi, 2 Mult pi)",
        "plt.ylabel('Phase shift (Radians)')",
        "plt.plot(np.unwrap(fft_out, -2 Mult pi))",
        "plt.show()"
      ]
    }
  ],
  "edges": []
}