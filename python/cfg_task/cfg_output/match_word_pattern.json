{
  "nodes": [
    {
      "id": "1",
      "type": "block",
      "statements": [
        "def match_word_pattern(pattern: str, input_string: str) -> bool:\n    \"\"\"\n    Determine if a given pattern matches a string using backtracking.\n\n    pattern: The pattern to match.\n    input_string: The string to match against the pattern.\n    return: True if the pattern matches the string, False otherwise.\n\n    >>> match_word_pattern(\"aba\", \"GraphTreesGraph\")\n    True\n\n    >>> match_word_pattern(\"xyx\", \"PythonRubyPython\")\n    True\n\n    >>> match_word_pattern(\"GG\", \"PythonJavaPython\")\n    False\n    \"\"\"\n\n    def backtrack(pattern_index: int, str_index: int) -> bool:\n        \"\"\"\n        >>> backtrack(0, 0)\n        True\n\n        >>> backtrack(0, 1)\n        True\n\n        >>> backtrack(0, 4)\n        False\n        \"\"\"\n        if pattern_index == len(pattern) and str_index == len(input_string):\n            return True\n        if pattern_index == len(pattern) or str_index == len(input_string):\n            return False\n        char = pattern[pattern_index]\n        if char in pattern_map:\n            mapped_str = pattern_map[char]\n            if input_string.startswith(mapped_str, str_index):\n                return backtrack(pattern_index + 1, str_index + len(mapped_str))\n            else:\n                return False\n        for end in range(str_index + 1, len(input_string) + 1):\n            substr = input_string[str_index:end]\n            if substr in str_map:\n                continue\n            pattern_map[char] = substr\n            str_map[substr] = char\n            if backtrack(pattern_index + 1, end):\n                return True\n            del pattern_map[char]\n            del str_map[substr]\n        return False\n    pattern_map: dict[str, str] = {}\n    str_map: dict[str, str] = {}\n    return backtrack(0, 0)",
        "'\\n    Determine if a given pattern matches a string using backtracking.\\n\\n    pattern: The pattern to match.\\n    input_string: The string to match against the pattern.\\n    return: True if the pattern matches the string, False otherwise.\\n\\n    >>> match_word_pattern(\"aba\", \"GraphTreesGraph\")\\n    True\\n\\n    >>> match_word_pattern(\"xyx\", \"PythonRubyPython\")\\n    True\\n\\n    >>> match_word_pattern(\"GG\", \"PythonJavaPython\")\\n    False\\n    '",
        "def backtrack(pattern_index: int, str_index: int) -> bool:\n    \"\"\"\n        >>> backtrack(0, 0)\n        True\n\n        >>> backtrack(0, 1)\n        True\n\n        >>> backtrack(0, 4)\n        False\n        \"\"\"\n    if pattern_index == len(pattern) and str_index == len(input_string):\n        return True\n    if pattern_index == len(pattern) or str_index == len(input_string):\n        return False\n    char = pattern[pattern_index]\n    if char in pattern_map:\n        mapped_str = pattern_map[char]\n        if input_string.startswith(mapped_str, str_index):\n            return backtrack(pattern_index + 1, str_index + len(mapped_str))\n        else:\n            return False\n    for end in range(str_index + 1, len(input_string) + 1):\n        substr = input_string[str_index:end]\n        if substr in str_map:\n            continue\n        pattern_map[char] = substr\n        str_map[substr] = char\n        if backtrack(pattern_index + 1, end):\n            return True\n        del pattern_map[char]\n        del str_map[substr]\n    return False",
        "'\\n        >>> backtrack(0, 0)\\n        True\\n\\n        >>> backtrack(0, 1)\\n        True\\n\\n        >>> backtrack(0, 4)\\n        False\\n        '",
        "pattern_index == len(pattern) and str_index == len(input_string)"
      ]
    },
    {
      "id": "2",
      "type": "block",
      "statements": [
        "return True"
      ]
    },
    {
      "id": "3",
      "type": "block",
      "statements": []
    },
    {
      "id": "4",
      "type": "block",
      "statements": [
        "pattern_index == len(pattern) or str_index == len(input_string)"
      ]
    },
    {
      "id": "5",
      "type": "block",
      "statements": [
        "return False"
      ]
    },
    {
      "id": "6",
      "type": "block",
      "statements": []
    },
    {
      "id": "7",
      "type": "block",
      "statements": [
        "char = pattern[pattern_index]",
        "char In pattern_map"
      ]
    },
    {
      "id": "8",
      "type": "block",
      "statements": [
        "mapped_str = pattern_map[char]",
        "input_string.startswith(mapped_str, str_index)"
      ]
    },
    {
      "id": "9",
      "type": "block",
      "statements": []
    },
    {
      "id": "10",
      "type": "block",
      "statements": []
    },
    {
      "id": "11",
      "type": "block",
      "statements": [
        "return backtrack(pattern_index + 1, str_index + len(mapped_str))"
      ]
    },
    {
      "id": "12",
      "type": "block",
      "statements": [
        "return False"
      ]
    },
    {
      "id": "13",
      "type": "block",
      "statements": []
    },
    {
      "id": "14",
      "type": "block",
      "statements": [
        "end",
        "range(str_index Add 1, len(input_string) Add 1)"
      ]
    },
    {
      "id": "15",
      "type": "block",
      "statements": [
        "substr = input_string[str_index:end]",
        "substr In str_map"
      ]
    },
    {
      "id": "16",
      "type": "block",
      "statements": [
        "return False"
      ]
    },
    {
      "id": "17",
      "type": "block",
      "statements": [
        "continue"
      ]
    },
    {
      "id": "18",
      "type": "block",
      "statements": []
    },
    {
      "id": "19",
      "type": "block",
      "statements": [
        "pattern_map[char] = substr",
        "str_map[substr] = char",
        "backtrack(pattern_index Add 1, end)"
      ]
    },
    {
      "id": "20",
      "type": "block",
      "statements": [
        "return True"
      ]
    },
    {
      "id": "21",
      "type": "block",
      "statements": []
    },
    {
      "id": "22",
      "type": "block",
      "statements": [
        "del pattern_map[char]",
        "del str_map[substr]"
      ]
    },
    {
      "id": "23",
      "type": "block",
      "statements": [
        "pattern_map: dict[str, str] = {}",
        "str_map: dict[str, str] = {}",
        "return backtrack(0, 0)"
      ]
    },
    {
      "id": "24",
      "type": "block",
      "statements": [
        "__name__ Eq '__main__'"
      ]
    },
    {
      "id": "25",
      "type": "block",
      "statements": [
        "import doctest",
        "doctest.testmod()"
      ]
    },
    {
      "id": "26",
      "type": "block",
      "statements": []
    },
    {
      "id": "27",
      "type": "block",
      "statements": []
    }
  ],
  "edges": [
    {
      "source": "1",
      "target": "2",
      "type": "true"
    },
    {
      "source": "1",
      "target": "3",
      "type": "false"
    },
    {
      "source": "3",
      "target": "4",
      "type": "next"
    },
    {
      "source": "4",
      "target": "5",
      "type": "true"
    },
    {
      "source": "4",
      "target": "6",
      "type": "false"
    },
    {
      "source": "6",
      "target": "7",
      "type": "next"
    },
    {
      "source": "7",
      "target": "8",
      "type": "true"
    },
    {
      "source": "7",
      "target": "9",
      "type": "false"
    },
    {
      "source": "8",
      "target": "11",
      "type": "true"
    },
    {
      "source": "8",
      "target": "12",
      "type": "false"
    },
    {
      "source": "9",
      "target": "10",
      "type": "next"
    },
    {
      "source": "10",
      "target": "14",
      "type": "next"
    },
    {
      "source": "13",
      "target": "10",
      "type": "next"
    },
    {
      "source": "14",
      "target": "15",
      "type": "true"
    },
    {
      "source": "14",
      "target": "16",
      "type": "false"
    },
    {
      "source": "15",
      "target": "17",
      "type": "true"
    },
    {
      "source": "15",
      "target": "18",
      "type": "false"
    },
    {
      "source": "17",
      "target": "19",
      "type": "next"
    },
    {
      "source": "18",
      "target": "19",
      "type": "next"
    },
    {
      "source": "19",
      "target": "20",
      "type": "true"
    },
    {
      "source": "19",
      "target": "21",
      "type": "false"
    },
    {
      "source": "21",
      "target": "22",
      "type": "next"
    },
    {
      "source": "22",
      "target": "14",
      "type": "next"
    },
    {
      "source": "24",
      "target": "25",
      "type": "true"
    },
    {
      "source": "24",
      "target": "26",
      "type": "false"
    },
    {
      "source": "25",
      "target": "27",
      "type": "next"
    },
    {
      "source": "26",
      "target": "27",
      "type": "next"
    }
  ]
}