{
  "nodes": [
    {
      "id": "1",
      "type": "block",
      "statements": [
        "'\\nProblem source: https://www.hackerrank.com/challenges/the-power-sum/problem\\nFind the number of ways that a given integer X, can be expressed as the sum\\nof the Nth powers of unique, natural numbers. For example, if X=13 and N=2.\\nWe have to find all combinations of unique squares adding up to 13.\\nThe only solution is 2^2+3^2. Constraints: 1<=X<=1000, 2<=N<=10.\\n'",
        "def backtrack(needed_sum: int, power: int, current_number: int, current_sum: int, solutions_count: int) -> tuple[int, int]:\n    \"\"\"\n    >>> backtrack(13, 2, 1, 0, 0)\n    (0, 1)\n    >>> backtrack(10, 2, 1, 0, 0)\n    (0, 1)\n    >>> backtrack(10, 3, 1, 0, 0)\n    (0, 0)\n    >>> backtrack(20, 2, 1, 0, 0)\n    (0, 1)\n    >>> backtrack(15, 10, 1, 0, 0)\n    (0, 0)\n    >>> backtrack(16, 2, 1, 0, 0)\n    (0, 1)\n    >>> backtrack(20, 1, 1, 0, 0)\n    (0, 64)\n    \"\"\"\n    if current_sum == needed_sum:\n        solutions_count += 1\n        return (current_sum, solutions_count)\n    i_to_n = current_number ** power\n    if current_sum + i_to_n <= needed_sum:\n        current_sum += i_to_n\n        (current_sum, solutions_count) = backtrack(needed_sum, power, current_number + 1, current_sum, solutions_count)\n        current_sum -= i_to_n\n    if i_to_n < needed_sum:\n        (current_sum, solutions_count) = backtrack(needed_sum, power, current_number + 1, current_sum, solutions_count)\n    return (current_sum, solutions_count)",
        "'\\n    >>> backtrack(13, 2, 1, 0, 0)\\n    (0, 1)\\n    >>> backtrack(10, 2, 1, 0, 0)\\n    (0, 1)\\n    >>> backtrack(10, 3, 1, 0, 0)\\n    (0, 0)\\n    >>> backtrack(20, 2, 1, 0, 0)\\n    (0, 1)\\n    >>> backtrack(15, 10, 1, 0, 0)\\n    (0, 0)\\n    >>> backtrack(16, 2, 1, 0, 0)\\n    (0, 1)\\n    >>> backtrack(20, 1, 1, 0, 0)\\n    (0, 64)\\n    '",
        "current_sum Eq needed_sum"
      ]
    },
    {
      "id": "2",
      "type": "block",
      "statements": [
        "solutions_count += 1",
        "return (current_sum, solutions_count)"
      ]
    },
    {
      "id": "3",
      "type": "block",
      "statements": []
    },
    {
      "id": "4",
      "type": "block",
      "statements": [
        "i_to_n = current_number ** power",
        "current_sum Add i_to_n LtE needed_sum"
      ]
    },
    {
      "id": "5",
      "type": "block",
      "statements": [
        "current_sum += i_to_n",
        "(current_sum, solutions_count) = backtrack(needed_sum, power, current_number + 1, current_sum, solutions_count)",
        "current_sum -= i_to_n"
      ]
    },
    {
      "id": "6",
      "type": "block",
      "statements": []
    },
    {
      "id": "7",
      "type": "block",
      "statements": [
        "i_to_n Lt needed_sum"
      ]
    },
    {
      "id": "8",
      "type": "block",
      "statements": [
        "(current_sum, solutions_count) = backtrack(needed_sum, power, current_number + 1, current_sum, solutions_count)"
      ]
    },
    {
      "id": "9",
      "type": "block",
      "statements": []
    },
    {
      "id": "10",
      "type": "block",
      "statements": [
        "return (current_sum, solutions_count)"
      ]
    },
    {
      "id": "11",
      "type": "block",
      "statements": [
        "def solve(needed_sum: int, power: int) -> int:\n    \"\"\"\n    >>> solve(13, 2)\n    1\n    >>> solve(10, 2)\n    1\n    >>> solve(10, 3)\n    0\n    >>> solve(20, 2)\n    1\n    >>> solve(15, 10)\n    0\n    >>> solve(16, 2)\n    1\n    >>> solve(20, 1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Invalid input\n    needed_sum must be between 1 and 1000, power between 2 and 10.\n    >>> solve(-10, 5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Invalid input\n    needed_sum must be between 1 and 1000, power between 2 and 10.\n    \"\"\"\n    if not (1 <= needed_sum <= 1000 and 2 <= power <= 10):\n        raise ValueError('Invalid input\\nneeded_sum must be between 1 and 1000, power between 2 and 10.')\n    return backtrack(needed_sum, power, 1, 0, 0)[1]",
        "'\\n    >>> solve(13, 2)\\n    1\\n    >>> solve(10, 2)\\n    1\\n    >>> solve(10, 3)\\n    0\\n    >>> solve(20, 2)\\n    1\\n    >>> solve(15, 10)\\n    0\\n    >>> solve(16, 2)\\n    1\\n    >>> solve(20, 1)\\n    Traceback (most recent call last):\\n        ...\\n    ValueError: Invalid input\\n    needed_sum must be between 1 and 1000, power between 2 and 10.\\n    >>> solve(-10, 5)\\n    Traceback (most recent call last):\\n        ...\\n    ValueError: Invalid input\\n    needed_sum must be between 1 and 1000, power between 2 and 10.\\n    '",
        "not (1 <= needed_sum <= 1000 and 2 <= power <= 10)"
      ]
    },
    {
      "id": "12",
      "type": "block",
      "statements": [
        "raise ValueError('Invalid input\\nneeded_sum must be between 1 and 1000, power between 2 and 10.')"
      ]
    },
    {
      "id": "13",
      "type": "block",
      "statements": []
    },
    {
      "id": "14",
      "type": "block",
      "statements": [
        "return backtrack(needed_sum, power, 1, 0, 0)[1]"
      ]
    },
    {
      "id": "15",
      "type": "block",
      "statements": [
        "__name__ Eq '__main__'"
      ]
    },
    {
      "id": "16",
      "type": "block",
      "statements": [
        "import doctest",
        "doctest.testmod()"
      ]
    },
    {
      "id": "17",
      "type": "block",
      "statements": []
    },
    {
      "id": "18",
      "type": "block",
      "statements": []
    }
  ],
  "edges": [
    {
      "source": "1",
      "target": "2",
      "type": "true"
    },
    {
      "source": "1",
      "target": "3",
      "type": "false"
    },
    {
      "source": "3",
      "target": "4",
      "type": "next"
    },
    {
      "source": "4",
      "target": "5",
      "type": "true"
    },
    {
      "source": "4",
      "target": "6",
      "type": "false"
    },
    {
      "source": "5",
      "target": "7",
      "type": "next"
    },
    {
      "source": "6",
      "target": "7",
      "type": "next"
    },
    {
      "source": "7",
      "target": "8",
      "type": "true"
    },
    {
      "source": "7",
      "target": "9",
      "type": "false"
    },
    {
      "source": "8",
      "target": "10",
      "type": "next"
    },
    {
      "source": "9",
      "target": "10",
      "type": "next"
    },
    {
      "source": "11",
      "target": "12",
      "type": "true"
    },
    {
      "source": "11",
      "target": "13",
      "type": "false"
    },
    {
      "source": "12",
      "target": "14",
      "type": "next"
    },
    {
      "source": "13",
      "target": "14",
      "type": "next"
    },
    {
      "source": "15",
      "target": "16",
      "type": "true"
    },
    {
      "source": "15",
      "target": "17",
      "type": "false"
    },
    {
      "source": "16",
      "target": "18",
      "type": "next"
    },
    {
      "source": "17",
      "target": "18",
      "type": "next"
    }
  ]
}