{
  "nodes": [
    {
      "id": "1",
      "type": "block",
      "statements": [
        "from typing import List",
        "from backend.data.block import BlockOutput, BlockSchema",
        "from backend.data.model import APIKeyCredentials, SchemaField",
        "from ._api import TEST_CREDENTIALS, TEST_CREDENTIALS_INPUT, Filament, Slant3DCredentialsField, Slant3DCredentialsInput",
        "from .base import Slant3DBlockBase",
        "class Slant3DFilamentBlock(Slant3DBlockBase):\n    \"\"\"Block for retrieving available filaments\"\"\"\n\n    class Input(BlockSchema):\n        credentials: Slant3DCredentialsInput = Slant3DCredentialsField()\n\n    class Output(BlockSchema):\n        filaments: List[Filament] = SchemaField(description='List of available filaments')\n        error: str = SchemaField(description='Error message if request failed')\n\n    def __init__(self):\n        super().__init__(id='7cc416f4-f305-4606-9b3b-452b8a81031c', description='Get list of available filaments', input_schema=self.Input, output_schema=self.Output, test_input={'credentials': TEST_CREDENTIALS_INPUT}, test_credentials=TEST_CREDENTIALS, test_output=[('filaments', [{'filament': 'PLA BLACK', 'hexColor': '000000', 'colorTag': 'black', 'profile': 'PLA'}, {'filament': 'PLA WHITE', 'hexColor': 'ffffff', 'colorTag': 'white', 'profile': 'PLA'}])], test_mock={'_make_request': lambda *args, **kwargs: {'filaments': [{'filament': 'PLA BLACK', 'hexColor': '000000', 'colorTag': 'black', 'profile': 'PLA'}, {'filament': 'PLA WHITE', 'hexColor': 'ffffff', 'colorTag': 'white', 'profile': 'PLA'}]}})\n\n    def run(self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs) -> BlockOutput:\n        try:\n            result = self._make_request('GET', 'filament', credentials.api_key.get_secret_value())\n            yield ('filaments', result['filaments'])\n        except Exception as e:\n            yield ('error', str(e))\n            raise",
        "'Block for retrieving available filaments'",
        "class Input(BlockSchema):\n    credentials: Slant3DCredentialsInput = Slant3DCredentialsField()",
        "credentials: Slant3DCredentialsInput = Slant3DCredentialsField()",
        "class Output(BlockSchema):\n    filaments: List[Filament] = SchemaField(description='List of available filaments')\n    error: str = SchemaField(description='Error message if request failed')",
        "filaments: List[Filament] = SchemaField(description='List of available filaments')",
        "error: str = SchemaField(description='Error message if request failed')",
        "def __init__(self):\n    super().__init__(id='7cc416f4-f305-4606-9b3b-452b8a81031c', description='Get list of available filaments', input_schema=self.Input, output_schema=self.Output, test_input={'credentials': TEST_CREDENTIALS_INPUT}, test_credentials=TEST_CREDENTIALS, test_output=[('filaments', [{'filament': 'PLA BLACK', 'hexColor': '000000', 'colorTag': 'black', 'profile': 'PLA'}, {'filament': 'PLA WHITE', 'hexColor': 'ffffff', 'colorTag': 'white', 'profile': 'PLA'}])], test_mock={'_make_request': lambda *args, **kwargs: {'filaments': [{'filament': 'PLA BLACK', 'hexColor': '000000', 'colorTag': 'black', 'profile': 'PLA'}, {'filament': 'PLA WHITE', 'hexColor': 'ffffff', 'colorTag': 'white', 'profile': 'PLA'}]}})",
        "super().__init__()",
        "def run(self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs) -> BlockOutput:\n    try:\n        result = self._make_request('GET', 'filament', credentials.api_key.get_secret_value())\n        yield ('filaments', result['filaments'])\n    except Exception as e:\n        yield ('error', str(e))\n        raise",
        "try:\n    result = self._make_request('GET', 'filament', credentials.api_key.get_secret_value())\n    yield ('filaments', result['filaments'])\nexcept Exception as e:\n    yield ('error', str(e))\n    raise",
        "result = self._make_request('GET', 'filament', credentials.api_key.get_secret_value())",
        "(yield ('filaments', result['filaments']))",
        "(yield ('error', str(e)))",
        "raise"
      ]
    }
  ],
  "edges": []
}