{
  "nodes": [
    {
      "id": "1",
      "type": "block",
      "statements": [
        "import json",
        "from typing import Any, Type, TypeVar, cast, get_args, get_origin",
        "class ConversionError(ValueError):\n    pass",
        "pass",
        "def __convert_list(value: Any) -> list:\n    if isinstance(value, (list, tuple, set)):\n        return list(value)\n    elif isinstance(value, dict):\n        return list(value.items())\n    elif isinstance(value, str):\n        value = value.strip()\n        if value.startswith('[') and value.endswith(']'):\n            try:\n                return json.loads(value)\n            except json.JSONDecodeError:\n                return [value]\n        else:\n            return [value]\n    else:\n        return [value]",
        "isinstance(value, (list, tuple, set))"
      ]
    },
    {
      "id": "2",
      "type": "block",
      "statements": [
        "return list(value)"
      ]
    },
    {
      "id": "3",
      "type": "block",
      "statements": [
        "isinstance(value, dict)"
      ]
    },
    {
      "id": "4",
      "type": "block",
      "statements": [
        "def __convert_dict(value: Any) -> dict:\n    if isinstance(value, str):\n        try:\n            result = json.loads(value)\n            if isinstance(result, dict):\n                return result\n            else:\n                return {'value': result}\n        except json.JSONDecodeError:\n            return {'value': value}\n    elif isinstance(value, list):\n        return {i: value[i] for i in range(len(value))}\n    elif isinstance(value, tuple):\n        return {i: value[i] for i in range(len(value))}\n    elif isinstance(value, dict):\n        return value\n    else:\n        return {'value': value}",
        "isinstance(value, str)"
      ]
    },
    {
      "id": "5",
      "type": "block",
      "statements": [
        "return list(value.items())"
      ]
    },
    {
      "id": "6",
      "type": "block",
      "statements": [
        "isinstance(value, str)"
      ]
    },
    {
      "id": "7",
      "type": "block",
      "statements": []
    },
    {
      "id": "8",
      "type": "block",
      "statements": [
        "value = value.strip()",
        "value.startswith('[') and value.endswith(']')"
      ]
    },
    {
      "id": "9",
      "type": "block",
      "statements": [
        "return [value]"
      ]
    },
    {
      "id": "10",
      "type": "block",
      "statements": []
    },
    {
      "id": "11",
      "type": "block",
      "statements": [
        "try:\n    return json.loads(value)\nexcept json.JSONDecodeError:\n    return [value]",
        "return json.loads(value)"
      ]
    },
    {
      "id": "12",
      "type": "block",
      "statements": [
        "return [value]"
      ]
    },
    {
      "id": "13",
      "type": "block",
      "statements": []
    },
    {
      "id": "14",
      "type": "block",
      "statements": [
        "return [value]"
      ]
    },
    {
      "id": "15",
      "type": "block",
      "statements": [
        "try:\n    result = json.loads(value)\n    if isinstance(result, dict):\n        return result\n    else:\n        return {'value': result}\nexcept json.JSONDecodeError:\n    return {'value': value}",
        "result = json.loads(value)",
        "isinstance(result, dict)"
      ]
    },
    {
      "id": "16",
      "type": "block",
      "statements": [
        "isinstance(value, list)"
      ]
    },
    {
      "id": "17",
      "type": "block",
      "statements": [
        "def __convert_tuple(value: Any) -> tuple:\n    if isinstance(value, (str, list, set)):\n        return tuple(value)\n    elif isinstance(value, dict):\n        return tuple(value.items())\n    elif isinstance(value, (int, float, bool)):\n        return (value,)\n    elif isinstance(value, tuple):\n        return value\n    else:\n        return (value,)",
        "isinstance(value, (str, list, set))"
      ]
    },
    {
      "id": "18",
      "type": "block",
      "statements": [
        "return result"
      ]
    },
    {
      "id": "19",
      "type": "block",
      "statements": [
        "return {'value': result}"
      ]
    },
    {
      "id": "20",
      "type": "block",
      "statements": [
        "return {'value': value}"
      ]
    },
    {
      "id": "21",
      "type": "block",
      "statements": [
        "return {i: value[i] for i in range(len(value))}"
      ]
    },
    {
      "id": "22",
      "type": "block",
      "statements": [
        "isinstance(value, tuple)"
      ]
    },
    {
      "id": "23",
      "type": "block",
      "statements": []
    },
    {
      "id": "24",
      "type": "block",
      "statements": [
        "return {i: value[i] for i in range(len(value))}"
      ]
    },
    {
      "id": "25",
      "type": "block",
      "statements": [
        "isinstance(value, dict)"
      ]
    },
    {
      "id": "26",
      "type": "block",
      "statements": []
    },
    {
      "id": "27",
      "type": "block",
      "statements": [
        "return value"
      ]
    },
    {
      "id": "28",
      "type": "block",
      "statements": [
        "return {'value': value}"
      ]
    },
    {
      "id": "29",
      "type": "block",
      "statements": []
    },
    {
      "id": "30",
      "type": "block",
      "statements": [
        "return tuple(value)"
      ]
    },
    {
      "id": "31",
      "type": "block",
      "statements": [
        "isinstance(value, dict)"
      ]
    },
    {
      "id": "32",
      "type": "block",
      "statements": [
        "def __convert_set(value: Any) -> set:\n    if isinstance(value, (str, list, tuple)):\n        return set(value)\n    elif isinstance(value, dict):\n        return set(value.items())\n    elif isinstance(value, set):\n        return value\n    else:\n        return {value}",
        "isinstance(value, (str, list, tuple))"
      ]
    },
    {
      "id": "33",
      "type": "block",
      "statements": [
        "return tuple(value.items())"
      ]
    },
    {
      "id": "34",
      "type": "block",
      "statements": [
        "isinstance(value, (int, float, bool))"
      ]
    },
    {
      "id": "35",
      "type": "block",
      "statements": []
    },
    {
      "id": "36",
      "type": "block",
      "statements": [
        "return (value,)"
      ]
    },
    {
      "id": "37",
      "type": "block",
      "statements": [
        "isinstance(value, tuple)"
      ]
    },
    {
      "id": "38",
      "type": "block",
      "statements": []
    },
    {
      "id": "39",
      "type": "block",
      "statements": [
        "return value"
      ]
    },
    {
      "id": "40",
      "type": "block",
      "statements": [
        "return (value,)"
      ]
    },
    {
      "id": "41",
      "type": "block",
      "statements": []
    },
    {
      "id": "42",
      "type": "block",
      "statements": [
        "return set(value)"
      ]
    },
    {
      "id": "43",
      "type": "block",
      "statements": [
        "isinstance(value, dict)"
      ]
    },
    {
      "id": "44",
      "type": "block",
      "statements": [
        "def __convert_str(value: Any) -> str:\n    if isinstance(value, str):\n        return value\n    else:\n        return json.dumps(value)",
        "isinstance(value, str)"
      ]
    },
    {
      "id": "45",
      "type": "block",
      "statements": [
        "return set(value.items())"
      ]
    },
    {
      "id": "46",
      "type": "block",
      "statements": [
        "isinstance(value, set)"
      ]
    },
    {
      "id": "47",
      "type": "block",
      "statements": []
    },
    {
      "id": "48",
      "type": "block",
      "statements": [
        "return value"
      ]
    },
    {
      "id": "49",
      "type": "block",
      "statements": [
        "return {value}"
      ]
    },
    {
      "id": "50",
      "type": "block",
      "statements": []
    },
    {
      "id": "51",
      "type": "block",
      "statements": [
        "return value"
      ]
    },
    {
      "id": "52",
      "type": "block",
      "statements": [
        "return json.dumps(value)"
      ]
    },
    {
      "id": "53",
      "type": "block",
      "statements": [
        "NUM = TypeVar('NUM', int, float)",
        "def __convert_num(value: Any, num_type: Type[NUM]) -> NUM:\n    if isinstance(value, (list, dict, tuple, set)):\n        return num_type(len(value))\n    elif isinstance(value, num_type):\n        return value\n    else:\n        try:\n            return num_type(float(value))\n        except (ValueError, TypeError):\n            return num_type(0)",
        "isinstance(value, (list, dict, tuple, set))"
      ]
    },
    {
      "id": "54",
      "type": "block",
      "statements": [
        "return num_type(len(value))"
      ]
    },
    {
      "id": "55",
      "type": "block",
      "statements": [
        "isinstance(value, num_type)"
      ]
    },
    {
      "id": "56",
      "type": "block",
      "statements": [
        "def __convert_bool(value: Any) -> bool:\n    if isinstance(value, bool):\n        return value\n    elif isinstance(value, str):\n        if value.lower() in ['true', '1']:\n            return True\n        else:\n            return False\n    else:\n        return bool(value)",
        "isinstance(value, bool)"
      ]
    },
    {
      "id": "57",
      "type": "block",
      "statements": [
        "return value"
      ]
    },
    {
      "id": "58",
      "type": "block",
      "statements": [
        "try:\n    return num_type(float(value))\nexcept (ValueError, TypeError):\n    return num_type(0)",
        "return num_type(float(value))"
      ]
    },
    {
      "id": "59",
      "type": "block",
      "statements": []
    },
    {
      "id": "60",
      "type": "block",
      "statements": [
        "return num_type(0)"
      ]
    },
    {
      "id": "61",
      "type": "block",
      "statements": [
        "return value"
      ]
    },
    {
      "id": "62",
      "type": "block",
      "statements": [
        "isinstance(value, str)"
      ]
    },
    {
      "id": "63",
      "type": "block",
      "statements": [
        "def _try_convert(value: Any, target_type: Type, raise_on_mismatch: bool) -> Any:\n    origin = get_origin(target_type)\n    args = get_args(target_type)\n    if origin is None:\n        origin = target_type\n    if origin not in [list, dict, tuple, str, set, int, float, bool]:\n        return value\n    if isinstance(value, origin):\n        if not args:\n            return value\n        elif origin is list:\n            return [convert(v, args[0]) for v in value]\n        elif origin is tuple:\n            if len(args) == 1:\n                return tuple((convert(v, args[0]) for v in value))\n            else:\n                return tuple((convert(v, t) for (v, t) in zip(value, args)))\n        elif origin is dict:\n            (key_type, val_type) = args\n            return {convert(k, key_type): convert(v, val_type) for (k, v) in value.items()}\n        elif origin is set:\n            return {convert(v, args[0]) for v in value}\n        else:\n            return value\n    elif raise_on_mismatch:\n        raise TypeError(f'Value {value} is not of expected type {target_type}')\n    elif origin is list:\n        value = __convert_list(value)\n        if args:\n            return [convert(v, args[0]) for v in value]\n        else:\n            return value\n    elif origin is dict:\n        value = __convert_dict(value)\n        if args:\n            (key_type, val_type) = args\n            return {convert(k, key_type): convert(v, val_type) for (k, v) in value.items()}\n        else:\n            return value\n    elif origin is tuple:\n        value = __convert_tuple(value)\n        if args:\n            if len(args) == 1:\n                return tuple((convert(v, args[0]) for v in value))\n            else:\n                return tuple((convert(v, t) for (v, t) in zip(value, args)))\n        else:\n            return value\n    elif origin is str:\n        return __convert_str(value)\n    elif origin is set:\n        value = __convert_set(value)\n        if args:\n            return {convert(v, args[0]) for v in value}\n        else:\n            return value\n    elif origin is int:\n        return __convert_num(value, int)\n    elif origin is float:\n        return __convert_num(value, float)\n    elif origin is bool:\n        return __convert_bool(value)\n    else:\n        return value",
        "origin = get_origin(target_type)",
        "args = get_args(target_type)",
        "origin Is None"
      ]
    },
    {
      "id": "64",
      "type": "block",
      "statements": [
        "value.lower() In ['true', '1']"
      ]
    },
    {
      "id": "65",
      "type": "block",
      "statements": [
        "return bool(value)"
      ]
    },
    {
      "id": "66",
      "type": "block",
      "statements": []
    },
    {
      "id": "67",
      "type": "block",
      "statements": [
        "return True"
      ]
    },
    {
      "id": "68",
      "type": "block",
      "statements": [
        "return False"
      ]
    },
    {
      "id": "69",
      "type": "block",
      "statements": []
    },
    {
      "id": "70",
      "type": "block",
      "statements": [
        "origin = target_type"
      ]
    },
    {
      "id": "71",
      "type": "block",
      "statements": []
    },
    {
      "id": "72",
      "type": "block",
      "statements": [
        "origin NotIn [list, dict, tuple, str, set, int, float, bool]"
      ]
    },
    {
      "id": "73",
      "type": "block",
      "statements": [
        "return value"
      ]
    },
    {
      "id": "74",
      "type": "block",
      "statements": []
    },
    {
      "id": "75",
      "type": "block",
      "statements": [
        "isinstance(value, origin)"
      ]
    },
    {
      "id": "76",
      "type": "block",
      "statements": [
        "not args"
      ]
    },
    {
      "id": "77",
      "type": "block",
      "statements": [
        "raise_on_mismatch"
      ]
    },
    {
      "id": "78",
      "type": "block",
      "statements": [
        "T = TypeVar('T')",
        "def type_match(value: Any, target_type: Type[T]) -> T:\n    return cast(T, _try_convert(value, target_type, raise_on_mismatch=True))",
        "return cast(T, _try_convert(value, target_type, raise_on_mismatch=True))"
      ]
    },
    {
      "id": "79",
      "type": "block",
      "statements": [
        "return value"
      ]
    },
    {
      "id": "80",
      "type": "block",
      "statements": [
        "origin Is list"
      ]
    },
    {
      "id": "81",
      "type": "block",
      "statements": []
    },
    {
      "id": "82",
      "type": "block",
      "statements": [
        "return [convert(v, args[0]) for v in value]"
      ]
    },
    {
      "id": "83",
      "type": "block",
      "statements": [
        "origin Is tuple"
      ]
    },
    {
      "id": "84",
      "type": "block",
      "statements": []
    },
    {
      "id": "85",
      "type": "block",
      "statements": [
        "len(args) Eq 1"
      ]
    },
    {
      "id": "86",
      "type": "block",
      "statements": [
        "origin Is dict"
      ]
    },
    {
      "id": "87",
      "type": "block",
      "statements": []
    },
    {
      "id": "88",
      "type": "block",
      "statements": [
        "return tuple((convert(v, args[0]) for v in value))"
      ]
    },
    {
      "id": "89",
      "type": "block",
      "statements": [
        "return tuple((convert(v, t) for (v, t) in zip(value, args)))"
      ]
    },
    {
      "id": "90",
      "type": "block",
      "statements": []
    },
    {
      "id": "91",
      "type": "block",
      "statements": [
        "(key_type, val_type) = args",
        "return {convert(k, key_type): convert(v, val_type) for (k, v) in value.items()}"
      ]
    },
    {
      "id": "92",
      "type": "block",
      "statements": [
        "origin Is set"
      ]
    },
    {
      "id": "93",
      "type": "block",
      "statements": []
    },
    {
      "id": "94",
      "type": "block",
      "statements": [
        "return {convert(v, args[0]) for v in value}"
      ]
    },
    {
      "id": "95",
      "type": "block",
      "statements": [
        "return value"
      ]
    },
    {
      "id": "96",
      "type": "block",
      "statements": []
    },
    {
      "id": "97",
      "type": "block",
      "statements": [
        "raise TypeError(f'Value {value} is not of expected type {target_type}')"
      ]
    },
    {
      "id": "98",
      "type": "block",
      "statements": [
        "origin Is list"
      ]
    },
    {
      "id": "99",
      "type": "block",
      "statements": []
    },
    {
      "id": "100",
      "type": "block",
      "statements": [
        "value = __convert_list(value)",
        "args"
      ]
    },
    {
      "id": "101",
      "type": "block",
      "statements": [
        "origin Is dict"
      ]
    },
    {
      "id": "102",
      "type": "block",
      "statements": []
    },
    {
      "id": "103",
      "type": "block",
      "statements": [
        "return [convert(v, args[0]) for v in value]"
      ]
    },
    {
      "id": "104",
      "type": "block",
      "statements": [
        "return value"
      ]
    },
    {
      "id": "105",
      "type": "block",
      "statements": []
    },
    {
      "id": "106",
      "type": "block",
      "statements": [
        "value = __convert_dict(value)",
        "args"
      ]
    },
    {
      "id": "107",
      "type": "block",
      "statements": [
        "origin Is tuple"
      ]
    },
    {
      "id": "108",
      "type": "block",
      "statements": []
    },
    {
      "id": "109",
      "type": "block",
      "statements": [
        "(key_type, val_type) = args",
        "return {convert(k, key_type): convert(v, val_type) for (k, v) in value.items()}"
      ]
    },
    {
      "id": "110",
      "type": "block",
      "statements": [
        "return value"
      ]
    },
    {
      "id": "111",
      "type": "block",
      "statements": []
    },
    {
      "id": "112",
      "type": "block",
      "statements": [
        "value = __convert_tuple(value)",
        "args"
      ]
    },
    {
      "id": "113",
      "type": "block",
      "statements": [
        "origin Is str"
      ]
    },
    {
      "id": "114",
      "type": "block",
      "statements": []
    },
    {
      "id": "115",
      "type": "block",
      "statements": [
        "len(args) Eq 1"
      ]
    },
    {
      "id": "116",
      "type": "block",
      "statements": [
        "return value"
      ]
    },
    {
      "id": "117",
      "type": "block",
      "statements": []
    },
    {
      "id": "118",
      "type": "block",
      "statements": [
        "return tuple((convert(v, args[0]) for v in value))"
      ]
    },
    {
      "id": "119",
      "type": "block",
      "statements": [
        "return tuple((convert(v, t) for (v, t) in zip(value, args)))"
      ]
    },
    {
      "id": "120",
      "type": "block",
      "statements": []
    },
    {
      "id": "121",
      "type": "block",
      "statements": [
        "return __convert_str(value)"
      ]
    },
    {
      "id": "122",
      "type": "block",
      "statements": [
        "origin Is set"
      ]
    },
    {
      "id": "123",
      "type": "block",
      "statements": []
    },
    {
      "id": "124",
      "type": "block",
      "statements": [
        "value = __convert_set(value)",
        "args"
      ]
    },
    {
      "id": "125",
      "type": "block",
      "statements": [
        "origin Is int"
      ]
    },
    {
      "id": "126",
      "type": "block",
      "statements": []
    },
    {
      "id": "127",
      "type": "block",
      "statements": [
        "return {convert(v, args[0]) for v in value}"
      ]
    },
    {
      "id": "128",
      "type": "block",
      "statements": [
        "return value"
      ]
    },
    {
      "id": "129",
      "type": "block",
      "statements": []
    },
    {
      "id": "130",
      "type": "block",
      "statements": [
        "return __convert_num(value, int)"
      ]
    },
    {
      "id": "131",
      "type": "block",
      "statements": [
        "origin Is float"
      ]
    },
    {
      "id": "132",
      "type": "block",
      "statements": []
    },
    {
      "id": "133",
      "type": "block",
      "statements": [
        "return __convert_num(value, float)"
      ]
    },
    {
      "id": "134",
      "type": "block",
      "statements": [
        "origin Is bool"
      ]
    },
    {
      "id": "135",
      "type": "block",
      "statements": []
    },
    {
      "id": "136",
      "type": "block",
      "statements": [
        "return __convert_bool(value)"
      ]
    },
    {
      "id": "137",
      "type": "block",
      "statements": [
        "return value"
      ]
    },
    {
      "id": "138",
      "type": "block",
      "statements": []
    },
    {
      "id": "139",
      "type": "block",
      "statements": [
        "def convert(value: Any, target_type: Type[T]) -> T:\n    try:\n        return cast(T, _try_convert(value, target_type, raise_on_mismatch=False))\n    except Exception as e:\n        raise ConversionError(f'Failed to convert {value} to {target_type}') from e",
        "try:\n    return cast(T, _try_convert(value, target_type, raise_on_mismatch=False))\nexcept Exception as e:\n    raise ConversionError(f'Failed to convert {value} to {target_type}') from e",
        "return cast(T, _try_convert(value, target_type, raise_on_mismatch=False))"
      ]
    },
    {
      "id": "140",
      "type": "block",
      "statements": [
        "raise ConversionError(f'Failed to convert {value} to {target_type}') from e"
      ]
    }
  ],
  "edges": [
    {
      "source": "1",
      "target": "2",
      "type": "true"
    },
    {
      "source": "1",
      "target": "3",
      "type": "false"
    },
    {
      "source": "3",
      "target": "5",
      "type": "true"
    },
    {
      "source": "3",
      "target": "6",
      "type": "false"
    },
    {
      "source": "4",
      "target": "15",
      "type": "true"
    },
    {
      "source": "4",
      "target": "16",
      "type": "false"
    },
    {
      "source": "6",
      "target": "8",
      "type": "true"
    },
    {
      "source": "6",
      "target": "9",
      "type": "false"
    },
    {
      "source": "7",
      "target": "4",
      "type": "next"
    },
    {
      "source": "8",
      "target": "11",
      "type": "true"
    },
    {
      "source": "8",
      "target": "12",
      "type": "false"
    },
    {
      "source": "10",
      "target": "7",
      "type": "next"
    },
    {
      "source": "13",
      "target": "10",
      "type": "next"
    },
    {
      "source": "15",
      "target": "18",
      "type": "true"
    },
    {
      "source": "15",
      "target": "19",
      "type": "false"
    },
    {
      "source": "16",
      "target": "21",
      "type": "true"
    },
    {
      "source": "16",
      "target": "22",
      "type": "false"
    },
    {
      "source": "17",
      "target": "30",
      "type": "true"
    },
    {
      "source": "17",
      "target": "31",
      "type": "false"
    },
    {
      "source": "22",
      "target": "24",
      "type": "true"
    },
    {
      "source": "22",
      "target": "25",
      "type": "false"
    },
    {
      "source": "23",
      "target": "17",
      "type": "next"
    },
    {
      "source": "25",
      "target": "27",
      "type": "true"
    },
    {
      "source": "25",
      "target": "28",
      "type": "false"
    },
    {
      "source": "26",
      "target": "23",
      "type": "next"
    },
    {
      "source": "29",
      "target": "26",
      "type": "next"
    },
    {
      "source": "31",
      "target": "33",
      "type": "true"
    },
    {
      "source": "31",
      "target": "34",
      "type": "false"
    },
    {
      "source": "32",
      "target": "42",
      "type": "true"
    },
    {
      "source": "32",
      "target": "43",
      "type": "false"
    },
    {
      "source": "34",
      "target": "36",
      "type": "true"
    },
    {
      "source": "34",
      "target": "37",
      "type": "false"
    },
    {
      "source": "35",
      "target": "32",
      "type": "next"
    },
    {
      "source": "37",
      "target": "39",
      "type": "true"
    },
    {
      "source": "37",
      "target": "40",
      "type": "false"
    },
    {
      "source": "38",
      "target": "35",
      "type": "next"
    },
    {
      "source": "41",
      "target": "38",
      "type": "next"
    },
    {
      "source": "43",
      "target": "45",
      "type": "true"
    },
    {
      "source": "43",
      "target": "46",
      "type": "false"
    },
    {
      "source": "44",
      "target": "51",
      "type": "true"
    },
    {
      "source": "44",
      "target": "52",
      "type": "false"
    },
    {
      "source": "46",
      "target": "48",
      "type": "true"
    },
    {
      "source": "46",
      "target": "49",
      "type": "false"
    },
    {
      "source": "47",
      "target": "44",
      "type": "next"
    },
    {
      "source": "50",
      "target": "47",
      "type": "next"
    },
    {
      "source": "53",
      "target": "54",
      "type": "true"
    },
    {
      "source": "53",
      "target": "55",
      "type": "false"
    },
    {
      "source": "55",
      "target": "57",
      "type": "true"
    },
    {
      "source": "55",
      "target": "58",
      "type": "false"
    },
    {
      "source": "56",
      "target": "61",
      "type": "true"
    },
    {
      "source": "56",
      "target": "62",
      "type": "false"
    },
    {
      "source": "59",
      "target": "56",
      "type": "next"
    },
    {
      "source": "62",
      "target": "64",
      "type": "true"
    },
    {
      "source": "62",
      "target": "65",
      "type": "false"
    },
    {
      "source": "63",
      "target": "70",
      "type": "true"
    },
    {
      "source": "63",
      "target": "71",
      "type": "false"
    },
    {
      "source": "64",
      "target": "67",
      "type": "true"
    },
    {
      "source": "64",
      "target": "68",
      "type": "false"
    },
    {
      "source": "66",
      "target": "63",
      "type": "next"
    },
    {
      "source": "69",
      "target": "66",
      "type": "next"
    },
    {
      "source": "70",
      "target": "72",
      "type": "next"
    },
    {
      "source": "71",
      "target": "72",
      "type": "next"
    },
    {
      "source": "72",
      "target": "73",
      "type": "true"
    },
    {
      "source": "72",
      "target": "74",
      "type": "false"
    },
    {
      "source": "74",
      "target": "75",
      "type": "next"
    },
    {
      "source": "75",
      "target": "76",
      "type": "true"
    },
    {
      "source": "75",
      "target": "77",
      "type": "false"
    },
    {
      "source": "76",
      "target": "79",
      "type": "true"
    },
    {
      "source": "76",
      "target": "80",
      "type": "false"
    },
    {
      "source": "77",
      "target": "97",
      "type": "true"
    },
    {
      "source": "77",
      "target": "98",
      "type": "false"
    },
    {
      "source": "80",
      "target": "82",
      "type": "true"
    },
    {
      "source": "80",
      "target": "83",
      "type": "false"
    },
    {
      "source": "81",
      "target": "78",
      "type": "next"
    },
    {
      "source": "83",
      "target": "85",
      "type": "true"
    },
    {
      "source": "83",
      "target": "86",
      "type": "false"
    },
    {
      "source": "84",
      "target": "81",
      "type": "next"
    },
    {
      "source": "85",
      "target": "88",
      "type": "true"
    },
    {
      "source": "85",
      "target": "89",
      "type": "false"
    },
    {
      "source": "86",
      "target": "91",
      "type": "true"
    },
    {
      "source": "86",
      "target": "92",
      "type": "false"
    },
    {
      "source": "87",
      "target": "84",
      "type": "next"
    },
    {
      "source": "90",
      "target": "87",
      "type": "next"
    },
    {
      "source": "92",
      "target": "94",
      "type": "true"
    },
    {
      "source": "92",
      "target": "95",
      "type": "false"
    },
    {
      "source": "93",
      "target": "87",
      "type": "next"
    },
    {
      "source": "96",
      "target": "93",
      "type": "next"
    },
    {
      "source": "97",
      "target": "99",
      "type": "next"
    },
    {
      "source": "98",
      "target": "100",
      "type": "true"
    },
    {
      "source": "98",
      "target": "101",
      "type": "false"
    },
    {
      "source": "99",
      "target": "78",
      "type": "next"
    },
    {
      "source": "100",
      "target": "103",
      "type": "true"
    },
    {
      "source": "100",
      "target": "104",
      "type": "false"
    },
    {
      "source": "101",
      "target": "106",
      "type": "true"
    },
    {
      "source": "101",
      "target": "107",
      "type": "false"
    },
    {
      "source": "102",
      "target": "99",
      "type": "next"
    },
    {
      "source": "105",
      "target": "102",
      "type": "next"
    },
    {
      "source": "106",
      "target": "109",
      "type": "true"
    },
    {
      "source": "106",
      "target": "110",
      "type": "false"
    },
    {
      "source": "107",
      "target": "112",
      "type": "true"
    },
    {
      "source": "107",
      "target": "113",
      "type": "false"
    },
    {
      "source": "108",
      "target": "102",
      "type": "next"
    },
    {
      "source": "111",
      "target": "108",
      "type": "next"
    },
    {
      "source": "112",
      "target": "115",
      "type": "true"
    },
    {
      "source": "112",
      "target": "116",
      "type": "false"
    },
    {
      "source": "113",
      "target": "121",
      "type": "true"
    },
    {
      "source": "113",
      "target": "122",
      "type": "false"
    },
    {
      "source": "114",
      "target": "108",
      "type": "next"
    },
    {
      "source": "115",
      "target": "118",
      "type": "true"
    },
    {
      "source": "115",
      "target": "119",
      "type": "false"
    },
    {
      "source": "117",
      "target": "114",
      "type": "next"
    },
    {
      "source": "120",
      "target": "117",
      "type": "next"
    },
    {
      "source": "122",
      "target": "124",
      "type": "true"
    },
    {
      "source": "122",
      "target": "125",
      "type": "false"
    },
    {
      "source": "123",
      "target": "114",
      "type": "next"
    },
    {
      "source": "124",
      "target": "127",
      "type": "true"
    },
    {
      "source": "124",
      "target": "128",
      "type": "false"
    },
    {
      "source": "125",
      "target": "130",
      "type": "true"
    },
    {
      "source": "125",
      "target": "131",
      "type": "false"
    },
    {
      "source": "126",
      "target": "123",
      "type": "next"
    },
    {
      "source": "129",
      "target": "126",
      "type": "next"
    },
    {
      "source": "131",
      "target": "133",
      "type": "true"
    },
    {
      "source": "131",
      "target": "134",
      "type": "false"
    },
    {
      "source": "132",
      "target": "126",
      "type": "next"
    },
    {
      "source": "134",
      "target": "136",
      "type": "true"
    },
    {
      "source": "134",
      "target": "137",
      "type": "false"
    },
    {
      "source": "135",
      "target": "132",
      "type": "next"
    },
    {
      "source": "138",
      "target": "135",
      "type": "next"
    }
  ]
}