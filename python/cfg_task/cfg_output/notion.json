{
  "nodes": [
    {
      "id": "1",
      "type": "block",
      "statements": [
        "from base64 import b64encode",
        "from urllib.parse import urlencode",
        "from backend.data.model import OAuth2Credentials",
        "from backend.integrations.providers import ProviderName",
        "from backend.util.request import requests",
        "from .base import BaseOAuthHandler",
        "class NotionOAuthHandler(BaseOAuthHandler):\n    \"\"\"\n    Based on the documentation at https://developers.notion.com/docs/authorization\n\n    Notes:\n    - Notion uses non-expiring access tokens and therefore doesn't have a refresh flow\n    - Notion doesn't use scopes\n    \"\"\"\n    PROVIDER_NAME = ProviderName.NOTION\n\n    def __init__(self, client_id: str, client_secret: str, redirect_uri: str):\n        self.client_id = client_id\n        self.client_secret = client_secret\n        self.redirect_uri = redirect_uri\n        self.auth_base_url = 'https://api.notion.com/v1/oauth/authorize'\n        self.token_url = 'https://api.notion.com/v1/oauth/token'\n\n    def get_login_url(self, scopes: list[str], state: str) -> str:\n        params = {'client_id': self.client_id, 'redirect_uri': self.redirect_uri, 'response_type': 'code', 'owner': 'user', 'state': state}\n        return f'{self.auth_base_url}?{urlencode(params)}'\n\n    def exchange_code_for_tokens(self, code: str, scopes: list[str]) -> OAuth2Credentials:\n        request_body = {'grant_type': 'authorization_code', 'code': code, 'redirect_uri': self.redirect_uri}\n        auth_str = b64encode(f'{self.client_id}:{self.client_secret}'.encode()).decode()\n        headers = {'Authorization': f'Basic {auth_str}', 'Accept': 'application/json'}\n        response = requests.post(self.token_url, json=request_body, headers=headers)\n        token_data = response.json()\n        email = token_data['owner']['person']['email'] if 'person' in token_data['owner'] and 'email' in token_data['owner']['person'] else None\n        return OAuth2Credentials(provider=self.PROVIDER_NAME, title=token_data.get('workspace_name'), username=email, access_token=token_data['access_token'], refresh_token=None, access_token_expires_at=None, refresh_token_expires_at=None, scopes=[], metadata={'owner': token_data['owner'], 'bot_id': token_data['bot_id'], 'workspace_id': token_data['workspace_id'], 'workspace_name': token_data.get('workspace_name'), 'workspace_icon': token_data.get('workspace_icon')})\n\n    def revoke_tokens(self, credentials: OAuth2Credentials) -> bool:\n        return False\n\n    def _refresh_tokens(self, credentials: OAuth2Credentials) -> OAuth2Credentials:\n        return credentials\n\n    def needs_refresh(self, credentials: OAuth2Credentials) -> bool:\n        return False",
        "\"\\n    Based on the documentation at https://developers.notion.com/docs/authorization\\n\\n    Notes:\\n    - Notion uses non-expiring access tokens and therefore doesn't have a refresh flow\\n    - Notion doesn't use scopes\\n    \"",
        "PROVIDER_NAME = ProviderName.NOTION",
        "def __init__(self, client_id: str, client_secret: str, redirect_uri: str):\n    self.client_id = client_id\n    self.client_secret = client_secret\n    self.redirect_uri = redirect_uri\n    self.auth_base_url = 'https://api.notion.com/v1/oauth/authorize'\n    self.token_url = 'https://api.notion.com/v1/oauth/token'",
        "self.client_id = client_id",
        "self.client_secret = client_secret",
        "self.redirect_uri = redirect_uri",
        "self.auth_base_url = 'https://api.notion.com/v1/oauth/authorize'",
        "self.token_url = 'https://api.notion.com/v1/oauth/token'",
        "def get_login_url(self, scopes: list[str], state: str) -> str:\n    params = {'client_id': self.client_id, 'redirect_uri': self.redirect_uri, 'response_type': 'code', 'owner': 'user', 'state': state}\n    return f'{self.auth_base_url}?{urlencode(params)}'",
        "params = {'client_id': self.client_id, 'redirect_uri': self.redirect_uri, 'response_type': 'code', 'owner': 'user', 'state': state}",
        "return f'{self.auth_base_url}?{urlencode(params)}'"
      ]
    },
    {
      "id": "2",
      "type": "block",
      "statements": [
        "def exchange_code_for_tokens(self, code: str, scopes: list[str]) -> OAuth2Credentials:\n    request_body = {'grant_type': 'authorization_code', 'code': code, 'redirect_uri': self.redirect_uri}\n    auth_str = b64encode(f'{self.client_id}:{self.client_secret}'.encode()).decode()\n    headers = {'Authorization': f'Basic {auth_str}', 'Accept': 'application/json'}\n    response = requests.post(self.token_url, json=request_body, headers=headers)\n    token_data = response.json()\n    email = token_data['owner']['person']['email'] if 'person' in token_data['owner'] and 'email' in token_data['owner']['person'] else None\n    return OAuth2Credentials(provider=self.PROVIDER_NAME, title=token_data.get('workspace_name'), username=email, access_token=token_data['access_token'], refresh_token=None, access_token_expires_at=None, refresh_token_expires_at=None, scopes=[], metadata={'owner': token_data['owner'], 'bot_id': token_data['bot_id'], 'workspace_id': token_data['workspace_id'], 'workspace_name': token_data.get('workspace_name'), 'workspace_icon': token_data.get('workspace_icon')})",
        "request_body = {'grant_type': 'authorization_code', 'code': code, 'redirect_uri': self.redirect_uri}",
        "auth_str = b64encode(f'{self.client_id}:{self.client_secret}'.encode()).decode()",
        "headers = {'Authorization': f'Basic {auth_str}', 'Accept': 'application/json'}",
        "response = requests.post(self.token_url, json=request_body, headers=headers)",
        "token_data = response.json()",
        "email = token_data['owner']['person']['email'] if 'person' in token_data['owner'] and 'email' in token_data['owner']['person'] else None",
        "return OAuth2Credentials(provider=self.PROVIDER_NAME, title=token_data.get('workspace_name'), username=email, access_token=token_data['access_token'], refresh_token=None, access_token_expires_at=None, refresh_token_expires_at=None, scopes=[], metadata={'owner': token_data['owner'], 'bot_id': token_data['bot_id'], 'workspace_id': token_data['workspace_id'], 'workspace_name': token_data.get('workspace_name'), 'workspace_icon': token_data.get('workspace_icon')})"
      ]
    },
    {
      "id": "3",
      "type": "block",
      "statements": [
        "def revoke_tokens(self, credentials: OAuth2Credentials) -> bool:\n    return False",
        "return False"
      ]
    },
    {
      "id": "4",
      "type": "block",
      "statements": [
        "def _refresh_tokens(self, credentials: OAuth2Credentials) -> OAuth2Credentials:\n    return credentials",
        "return credentials"
      ]
    },
    {
      "id": "5",
      "type": "block",
      "statements": [
        "def needs_refresh(self, credentials: OAuth2Credentials) -> bool:\n    return False",
        "return False"
      ]
    }
  ],
  "edges": []
}