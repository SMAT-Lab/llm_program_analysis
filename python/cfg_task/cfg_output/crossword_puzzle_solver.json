{
  "nodes": [
    {
      "id": "1",
      "type": "block",
      "statements": [
        "def is_valid(puzzle: list[list[str]], word: str, row: int, col: int, vertical: bool) -> bool:\n    \"\"\"\n    Check if a word can be placed at the given position.\n\n    >>> puzzle = [\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', '']\n    ... ]\n    >>> is_valid(puzzle, 'word', 0, 0, True)\n    True\n    >>> puzzle = [\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', '']\n    ... ]\n    >>> is_valid(puzzle, 'word', 0, 0, False)\n    True\n    \"\"\"\n    for i in range(len(word)):\n        if vertical:\n            if row + i >= len(puzzle) or puzzle[row + i][col] != '':\n                return False\n        elif col + i >= len(puzzle[0]) or puzzle[row][col + i] != '':\n            return False\n    return True",
        "\"\\n    Check if a word can be placed at the given position.\\n\\n    >>> puzzle = [\\n    ...     ['', '', '', ''],\\n    ...     ['', '', '', ''],\\n    ...     ['', '', '', ''],\\n    ...     ['', '', '', '']\\n    ... ]\\n    >>> is_valid(puzzle, 'word', 0, 0, True)\\n    True\\n    >>> puzzle = [\\n    ...     ['', '', '', ''],\\n    ...     ['', '', '', ''],\\n    ...     ['', '', '', ''],\\n    ...     ['', '', '', '']\\n    ... ]\\n    >>> is_valid(puzzle, 'word', 0, 0, False)\\n    True\\n    \""
      ]
    },
    {
      "id": "2",
      "type": "block",
      "statements": [
        "i",
        "range(len(word))"
      ]
    },
    {
      "id": "3",
      "type": "block",
      "statements": [
        "vertical"
      ]
    },
    {
      "id": "4",
      "type": "block",
      "statements": [
        "return True"
      ]
    },
    {
      "id": "5",
      "type": "block",
      "statements": [
        "row + i >= len(puzzle) or puzzle[row + i][col] != ''"
      ]
    },
    {
      "id": "6",
      "type": "block",
      "statements": [
        "col + i >= len(puzzle[0]) or puzzle[row][col + i] != ''"
      ]
    },
    {
      "id": "7",
      "type": "block",
      "statements": []
    },
    {
      "id": "8",
      "type": "block",
      "statements": [
        "return False"
      ]
    },
    {
      "id": "9",
      "type": "block",
      "statements": []
    },
    {
      "id": "10",
      "type": "block",
      "statements": []
    },
    {
      "id": "11",
      "type": "block",
      "statements": [
        "return False"
      ]
    },
    {
      "id": "12",
      "type": "block",
      "statements": []
    },
    {
      "id": "13",
      "type": "block",
      "statements": []
    },
    {
      "id": "14",
      "type": "block",
      "statements": [
        "def place_word(puzzle: list[list[str]], word: str, row: int, col: int, vertical: bool) -> None:\n    \"\"\"\n    Place a word at the given position.\n\n    >>> puzzle = [\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', '']\n    ... ]\n    >>> place_word(puzzle, 'word', 0, 0, True)\n    >>> puzzle\n    [['w', '', '', ''], ['o', '', '', ''], ['r', '', '', ''], ['d', '', '', '']]\n    \"\"\"\n    for (i, char) in enumerate(word):\n        if vertical:\n            puzzle[row + i][col] = char\n        else:\n            puzzle[row][col + i] = char",
        "\"\\n    Place a word at the given position.\\n\\n    >>> puzzle = [\\n    ...     ['', '', '', ''],\\n    ...     ['', '', '', ''],\\n    ...     ['', '', '', ''],\\n    ...     ['', '', '', '']\\n    ... ]\\n    >>> place_word(puzzle, 'word', 0, 0, True)\\n    >>> puzzle\\n    [['w', '', '', ''], ['o', '', '', ''], ['r', '', '', ''], ['d', '', '', '']]\\n    \""
      ]
    },
    {
      "id": "15",
      "type": "block",
      "statements": [
        "(i, char)",
        "enumerate(word)"
      ]
    },
    {
      "id": "16",
      "type": "block",
      "statements": [
        "vertical"
      ]
    },
    {
      "id": "17",
      "type": "block",
      "statements": [
        "def remove_word(puzzle: list[list[str]], word: str, row: int, col: int, vertical: bool) -> None:\n    \"\"\"\n    Remove a word from the given position.\n\n    >>> puzzle = [\n    ...     ['w', '', '', ''],\n    ...     ['o', '', '', ''],\n    ...     ['r', '', '', ''],\n    ...     ['d', '', '', '']\n    ... ]\n    >>> remove_word(puzzle, 'word', 0, 0, True)\n    >>> puzzle\n    [['', '', '', ''], ['', '', '', ''], ['', '', '', ''], ['', '', '', '']]\n    \"\"\"\n    for i in range(len(word)):\n        if vertical:\n            puzzle[row + i][col] = ''\n        else:\n            puzzle[row][col + i] = ''",
        "\"\\n    Remove a word from the given position.\\n\\n    >>> puzzle = [\\n    ...     ['w', '', '', ''],\\n    ...     ['o', '', '', ''],\\n    ...     ['r', '', '', ''],\\n    ...     ['d', '', '', '']\\n    ... ]\\n    >>> remove_word(puzzle, 'word', 0, 0, True)\\n    >>> puzzle\\n    [['', '', '', ''], ['', '', '', ''], ['', '', '', ''], ['', '', '', '']]\\n    \""
      ]
    },
    {
      "id": "18",
      "type": "block",
      "statements": [
        "puzzle[row + i][col] = char"
      ]
    },
    {
      "id": "19",
      "type": "block",
      "statements": [
        "puzzle[row][col + i] = char"
      ]
    },
    {
      "id": "20",
      "type": "block",
      "statements": []
    },
    {
      "id": "21",
      "type": "block",
      "statements": [
        "i",
        "range(len(word))"
      ]
    },
    {
      "id": "22",
      "type": "block",
      "statements": [
        "vertical"
      ]
    },
    {
      "id": "23",
      "type": "block",
      "statements": [
        "def solve_crossword(puzzle: list[list[str]], words: list[str]) -> bool:\n    \"\"\"\n    Solve the crossword puzzle using backtracking.\n\n    >>> puzzle = [\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', '']\n    ... ]\n\n    >>> words = ['word', 'four', 'more', 'last']\n    >>> solve_crossword(puzzle, words)\n    True\n    >>> puzzle = [\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', '']\n    ... ]\n    >>> words = ['word', 'four', 'more', 'paragraphs']\n    >>> solve_crossword(puzzle, words)\n    False\n    \"\"\"\n    for row in range(len(puzzle)):\n        for col in range(len(puzzle[0])):\n            if puzzle[row][col] == '':\n                for word in words:\n                    for vertical in [True, False]:\n                        if is_valid(puzzle, word, row, col, vertical):\n                            place_word(puzzle, word, row, col, vertical)\n                            words.remove(word)\n                            if solve_crossword(puzzle, words):\n                                return True\n                            words.append(word)\n                            remove_word(puzzle, word, row, col, vertical)\n                return False\n    return True",
        "\"\\n    Solve the crossword puzzle using backtracking.\\n\\n    >>> puzzle = [\\n    ...     ['', '', '', ''],\\n    ...     ['', '', '', ''],\\n    ...     ['', '', '', ''],\\n    ...     ['', '', '', '']\\n    ... ]\\n\\n    >>> words = ['word', 'four', 'more', 'last']\\n    >>> solve_crossword(puzzle, words)\\n    True\\n    >>> puzzle = [\\n    ...     ['', '', '', ''],\\n    ...     ['', '', '', ''],\\n    ...     ['', '', '', ''],\\n    ...     ['', '', '', '']\\n    ... ]\\n    >>> words = ['word', 'four', 'more', 'paragraphs']\\n    >>> solve_crossword(puzzle, words)\\n    False\\n    \""
      ]
    },
    {
      "id": "24",
      "type": "block",
      "statements": [
        "puzzle[row + i][col] = ''"
      ]
    },
    {
      "id": "25",
      "type": "block",
      "statements": [
        "puzzle[row][col + i] = ''"
      ]
    },
    {
      "id": "26",
      "type": "block",
      "statements": []
    },
    {
      "id": "27",
      "type": "block",
      "statements": [
        "row",
        "range(len(puzzle))"
      ]
    },
    {
      "id": "28",
      "type": "block",
      "statements": []
    },
    {
      "id": "29",
      "type": "block",
      "statements": [
        "return True"
      ]
    },
    {
      "id": "30",
      "type": "block",
      "statements": [
        "col",
        "range(len(puzzle[0]))"
      ]
    },
    {
      "id": "31",
      "type": "block",
      "statements": [
        "puzzle[row][col] Eq ''"
      ]
    },
    {
      "id": "32",
      "type": "block",
      "statements": []
    },
    {
      "id": "33",
      "type": "block",
      "statements": []
    },
    {
      "id": "34",
      "type": "block",
      "statements": []
    },
    {
      "id": "35",
      "type": "block",
      "statements": []
    },
    {
      "id": "36",
      "type": "block",
      "statements": [
        "word",
        "words"
      ]
    },
    {
      "id": "37",
      "type": "block",
      "statements": []
    },
    {
      "id": "38",
      "type": "block",
      "statements": [
        "return False"
      ]
    },
    {
      "id": "39",
      "type": "block",
      "statements": [
        "vertical",
        "[True, False]"
      ]
    },
    {
      "id": "40",
      "type": "block",
      "statements": [
        "is_valid(puzzle, word, row, col, vertical)"
      ]
    },
    {
      "id": "41",
      "type": "block",
      "statements": []
    },
    {
      "id": "42",
      "type": "block",
      "statements": [
        "place_word(puzzle, word, row, col, vertical)",
        "words.remove(word)",
        "solve_crossword(puzzle, words)"
      ]
    },
    {
      "id": "43",
      "type": "block",
      "statements": []
    },
    {
      "id": "44",
      "type": "block",
      "statements": []
    },
    {
      "id": "45",
      "type": "block",
      "statements": [
        "return True"
      ]
    },
    {
      "id": "46",
      "type": "block",
      "statements": []
    },
    {
      "id": "47",
      "type": "block",
      "statements": [
        "words.append(word)",
        "remove_word(puzzle, word, row, col, vertical)"
      ]
    },
    {
      "id": "48",
      "type": "block",
      "statements": [
        "__name__ Eq '__main__'"
      ]
    },
    {
      "id": "49",
      "type": "block",
      "statements": [
        "PUZZLE = [[''] * 3 for _ in range(3)]",
        "WORDS = ['cat', 'dog', 'car']",
        "solve_crossword(PUZZLE, WORDS)"
      ]
    },
    {
      "id": "50",
      "type": "block",
      "statements": []
    },
    {
      "id": "51",
      "type": "block",
      "statements": []
    },
    {
      "id": "52",
      "type": "block",
      "statements": [
        "print('Solution found:')"
      ]
    },
    {
      "id": "53",
      "type": "block",
      "statements": [
        "print('No solution found:')"
      ]
    },
    {
      "id": "54",
      "type": "block",
      "statements": []
    },
    {
      "id": "55",
      "type": "block",
      "statements": [
        "row",
        "PUZZLE"
      ]
    },
    {
      "id": "56",
      "type": "block",
      "statements": [
        "print(' '.join(row))"
      ]
    },
    {
      "id": "57",
      "type": "block",
      "statements": []
    }
  ],
  "edges": [
    {
      "source": "1",
      "target": "2",
      "type": "next"
    },
    {
      "source": "2",
      "target": "3",
      "type": "true"
    },
    {
      "source": "2",
      "target": "4",
      "type": "false"
    },
    {
      "source": "3",
      "target": "5",
      "type": "true"
    },
    {
      "source": "3",
      "target": "6",
      "type": "false"
    },
    {
      "source": "5",
      "target": "8",
      "type": "true"
    },
    {
      "source": "5",
      "target": "9",
      "type": "false"
    },
    {
      "source": "6",
      "target": "11",
      "type": "true"
    },
    {
      "source": "6",
      "target": "12",
      "type": "false"
    },
    {
      "source": "7",
      "target": "2",
      "type": "next"
    },
    {
      "source": "9",
      "target": "10",
      "type": "next"
    },
    {
      "source": "10",
      "target": "7",
      "type": "next"
    },
    {
      "source": "12",
      "target": "13",
      "type": "next"
    },
    {
      "source": "13",
      "target": "7",
      "type": "next"
    },
    {
      "source": "14",
      "target": "15",
      "type": "next"
    },
    {
      "source": "15",
      "target": "16",
      "type": "true"
    },
    {
      "source": "15",
      "target": "17",
      "type": "false"
    },
    {
      "source": "16",
      "target": "18",
      "type": "true"
    },
    {
      "source": "16",
      "target": "19",
      "type": "false"
    },
    {
      "source": "17",
      "target": "21",
      "type": "next"
    },
    {
      "source": "18",
      "target": "20",
      "type": "next"
    },
    {
      "source": "19",
      "target": "20",
      "type": "next"
    },
    {
      "source": "20",
      "target": "15",
      "type": "next"
    },
    {
      "source": "21",
      "target": "22",
      "type": "true"
    },
    {
      "source": "21",
      "target": "23",
      "type": "false"
    },
    {
      "source": "22",
      "target": "24",
      "type": "true"
    },
    {
      "source": "22",
      "target": "25",
      "type": "false"
    },
    {
      "source": "23",
      "target": "27",
      "type": "next"
    },
    {
      "source": "24",
      "target": "26",
      "type": "next"
    },
    {
      "source": "25",
      "target": "26",
      "type": "next"
    },
    {
      "source": "26",
      "target": "21",
      "type": "next"
    },
    {
      "source": "27",
      "target": "28",
      "type": "true"
    },
    {
      "source": "27",
      "target": "29",
      "type": "false"
    },
    {
      "source": "28",
      "target": "30",
      "type": "next"
    },
    {
      "source": "30",
      "target": "31",
      "type": "true"
    },
    {
      "source": "30",
      "target": "32",
      "type": "false"
    },
    {
      "source": "31",
      "target": "33",
      "type": "true"
    },
    {
      "source": "31",
      "target": "34",
      "type": "false"
    },
    {
      "source": "32",
      "target": "27",
      "type": "next"
    },
    {
      "source": "33",
      "target": "36",
      "type": "next"
    },
    {
      "source": "34",
      "target": "35",
      "type": "next"
    },
    {
      "source": "35",
      "target": "30",
      "type": "next"
    },
    {
      "source": "36",
      "target": "37",
      "type": "true"
    },
    {
      "source": "36",
      "target": "38",
      "type": "false"
    },
    {
      "source": "37",
      "target": "39",
      "type": "next"
    },
    {
      "source": "39",
      "target": "40",
      "type": "true"
    },
    {
      "source": "39",
      "target": "41",
      "type": "false"
    },
    {
      "source": "40",
      "target": "42",
      "type": "true"
    },
    {
      "source": "40",
      "target": "43",
      "type": "false"
    },
    {
      "source": "41",
      "target": "36",
      "type": "next"
    },
    {
      "source": "42",
      "target": "45",
      "type": "true"
    },
    {
      "source": "42",
      "target": "46",
      "type": "false"
    },
    {
      "source": "43",
      "target": "44",
      "type": "next"
    },
    {
      "source": "44",
      "target": "39",
      "type": "next"
    },
    {
      "source": "46",
      "target": "47",
      "type": "next"
    },
    {
      "source": "47",
      "target": "44",
      "type": "next"
    },
    {
      "source": "48",
      "target": "49",
      "type": "true"
    },
    {
      "source": "48",
      "target": "50",
      "type": "false"
    },
    {
      "source": "49",
      "target": "52",
      "type": "true"
    },
    {
      "source": "49",
      "target": "53",
      "type": "false"
    },
    {
      "source": "50",
      "target": "51",
      "type": "next"
    },
    {
      "source": "52",
      "target": "55",
      "type": "next"
    },
    {
      "source": "53",
      "target": "54",
      "type": "next"
    },
    {
      "source": "54",
      "target": "51",
      "type": "next"
    },
    {
      "source": "55",
      "target": "56",
      "type": "true"
    },
    {
      "source": "55",
      "target": "57",
      "type": "false"
    },
    {
      "source": "56",
      "target": "55",
      "type": "next"
    },
    {
      "source": "57",
      "target": "54",
      "type": "next"
    }
  ]
}