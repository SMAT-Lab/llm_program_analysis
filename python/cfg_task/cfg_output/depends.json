{
  "nodes": [
    {
      "id": "1",
      "type": "block",
      "statements": [
        "import fastapi",
        "from .config import Settings",
        "from .middleware import auth_middleware",
        "from .models import DEFAULT_USER_ID, User",
        "def requires_user(payload: dict=fastapi.Depends(auth_middleware)) -> User:\n    return verify_user(payload, admin_only=False)",
        "return verify_user(payload, admin_only=False)"
      ]
    },
    {
      "id": "2",
      "type": "block",
      "statements": [
        "def requires_admin_user(payload: dict=fastapi.Depends(auth_middleware)) -> User:\n    return verify_user(payload, admin_only=True)",
        "return verify_user(payload, admin_only=True)"
      ]
    },
    {
      "id": "3",
      "type": "block",
      "statements": [
        "def verify_user(payload: dict | None, admin_only: bool) -> User:\n    if not payload:\n        if Settings.ENABLE_AUTH:\n            raise fastapi.HTTPException(status_code=401, detail='Authorization header is missing')\n        payload = {'sub': DEFAULT_USER_ID, 'role': 'admin'}\n    user_id = payload.get('sub')\n    if not user_id:\n        raise fastapi.HTTPException(status_code=401, detail='User ID not found in token')\n    if admin_only and payload['role'] != 'admin':\n        raise fastapi.HTTPException(status_code=403, detail='Admin access required')\n    return User.from_payload(payload)",
        "not payload"
      ]
    },
    {
      "id": "4",
      "type": "block",
      "statements": [
        "Settings.ENABLE_AUTH"
      ]
    },
    {
      "id": "5",
      "type": "block",
      "statements": []
    },
    {
      "id": "6",
      "type": "block",
      "statements": [
        "user_id = payload.get('sub')",
        "not user_id"
      ]
    },
    {
      "id": "7",
      "type": "block",
      "statements": [
        "raise fastapi.HTTPException(status_code=401, detail='Authorization header is missing')"
      ]
    },
    {
      "id": "8",
      "type": "block",
      "statements": []
    },
    {
      "id": "9",
      "type": "block",
      "statements": [
        "payload = {'sub': DEFAULT_USER_ID, 'role': 'admin'}"
      ]
    },
    {
      "id": "10",
      "type": "block",
      "statements": [
        "raise fastapi.HTTPException(status_code=401, detail='User ID not found in token')"
      ]
    },
    {
      "id": "11",
      "type": "block",
      "statements": []
    },
    {
      "id": "12",
      "type": "block",
      "statements": [
        "admin_only and payload['role'] != 'admin'"
      ]
    },
    {
      "id": "13",
      "type": "block",
      "statements": [
        "raise fastapi.HTTPException(status_code=403, detail='Admin access required')"
      ]
    },
    {
      "id": "14",
      "type": "block",
      "statements": []
    },
    {
      "id": "15",
      "type": "block",
      "statements": [
        "return User.from_payload(payload)"
      ]
    },
    {
      "id": "16",
      "type": "block",
      "statements": [
        "def get_user_id(payload: dict=fastapi.Depends(auth_middleware)) -> str:\n    user_id = payload.get('sub')\n    if not user_id:\n        raise fastapi.HTTPException(status_code=401, detail='User ID not found in token')\n    return user_id",
        "user_id = payload.get('sub')",
        "not user_id"
      ]
    },
    {
      "id": "17",
      "type": "block",
      "statements": [
        "raise fastapi.HTTPException(status_code=401, detail='User ID not found in token')"
      ]
    },
    {
      "id": "18",
      "type": "block",
      "statements": []
    },
    {
      "id": "19",
      "type": "block",
      "statements": [
        "return user_id"
      ]
    }
  ],
  "edges": [
    {
      "source": "3",
      "target": "4",
      "type": "true"
    },
    {
      "source": "3",
      "target": "5",
      "type": "false"
    },
    {
      "source": "4",
      "target": "7",
      "type": "true"
    },
    {
      "source": "4",
      "target": "8",
      "type": "false"
    },
    {
      "source": "5",
      "target": "6",
      "type": "next"
    },
    {
      "source": "6",
      "target": "10",
      "type": "true"
    },
    {
      "source": "6",
      "target": "11",
      "type": "false"
    },
    {
      "source": "7",
      "target": "9",
      "type": "next"
    },
    {
      "source": "8",
      "target": "9",
      "type": "next"
    },
    {
      "source": "9",
      "target": "6",
      "type": "next"
    },
    {
      "source": "10",
      "target": "12",
      "type": "next"
    },
    {
      "source": "11",
      "target": "12",
      "type": "next"
    },
    {
      "source": "12",
      "target": "13",
      "type": "true"
    },
    {
      "source": "12",
      "target": "14",
      "type": "false"
    },
    {
      "source": "13",
      "target": "15",
      "type": "next"
    },
    {
      "source": "14",
      "target": "15",
      "type": "next"
    },
    {
      "source": "16",
      "target": "17",
      "type": "true"
    },
    {
      "source": "16",
      "target": "18",
      "type": "false"
    },
    {
      "source": "17",
      "target": "19",
      "type": "next"
    },
    {
      "source": "18",
      "target": "19",
      "type": "next"
    }
  ]
}