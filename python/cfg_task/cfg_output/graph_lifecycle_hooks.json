{
  "nodes": [
    {
      "id": "1",
      "type": "block",
      "statements": [
        "import logging",
        "from typing import TYPE_CHECKING, Callable, Optional, cast",
        "from backend.data.block import BlockWebhookConfig, get_block",
        "from backend.data.graph import set_node_webhook",
        "from backend.data.model import CREDENTIALS_FIELD_NAME",
        "from backend.integrations.webhooks import WEBHOOK_MANAGERS_BY_NAME",
        "TYPE_CHECKING"
      ]
    },
    {
      "id": "2",
      "type": "block",
      "statements": [
        "from backend.data.graph import GraphModel, NodeModel",
        "from backend.data.model import Credentials",
        "from ._base import BaseWebhooksManager"
      ]
    },
    {
      "id": "3",
      "type": "block",
      "statements": []
    },
    {
      "id": "4",
      "type": "block",
      "statements": [
        "logger = logging.getLogger(__name__)",
        "async def on_graph_activate(graph: 'GraphModel', get_credentials: Callable[[str], 'Credentials | None']):\n    \"\"\"\n    Hook to be called when a graph is activated/created.\n\n    ⚠️ Assuming node entities are not re-used between graph versions, ⚠️\n    this hook calls `on_node_activate` on all nodes in this graph.\n\n    Params:\n        get_credentials: `credentials_id` -> Credentials\n    \"\"\"\n    updated_nodes = []\n    for new_node in graph.nodes:\n        node_credentials = None\n        if (creds_meta := new_node.input_default.get(CREDENTIALS_FIELD_NAME)):\n            node_credentials = get_credentials(creds_meta['id'])\n            if not node_credentials:\n                raise ValueError(f'Node #{new_node.id} updated with non-existent credentials #{node_credentials}')\n        updated_node = await on_node_activate(graph.user_id, new_node, credentials=node_credentials)\n        updated_nodes.append(updated_node)\n    graph.nodes = updated_nodes\n    return graph",
        "'\\n    Hook to be called when a graph is activated/created.\\n\\n    ⚠️ Assuming node entities are not re-used between graph versions, ⚠️\\n    this hook calls `on_node_activate` on all nodes in this graph.\\n\\n    Params:\\n        get_credentials: `credentials_id` -> Credentials\\n    '",
        "updated_nodes = []"
      ]
    },
    {
      "id": "5",
      "type": "block",
      "statements": [
        "new_node",
        "graph.nodes"
      ]
    },
    {
      "id": "6",
      "type": "block",
      "statements": [
        "node_credentials = None",
        "(creds_meta := new_node.input_default.get(CREDENTIALS_FIELD_NAME))"
      ]
    },
    {
      "id": "7",
      "type": "block",
      "statements": [
        "graph.nodes = updated_nodes",
        "return graph"
      ]
    },
    {
      "id": "8",
      "type": "block",
      "statements": [
        "node_credentials = get_credentials(creds_meta['id'])",
        "not node_credentials"
      ]
    },
    {
      "id": "9",
      "type": "block",
      "statements": []
    },
    {
      "id": "10",
      "type": "block",
      "statements": [
        "updated_node = await on_node_activate(graph.user_id, new_node, credentials=node_credentials)",
        "updated_nodes.append(updated_node)"
      ]
    },
    {
      "id": "11",
      "type": "block",
      "statements": [
        "raise ValueError(f'Node #{new_node.id} updated with non-existent credentials #{node_credentials}')"
      ]
    },
    {
      "id": "12",
      "type": "block",
      "statements": []
    },
    {
      "id": "13",
      "type": "block",
      "statements": []
    },
    {
      "id": "14",
      "type": "block",
      "statements": [
        "async def on_graph_deactivate(graph: 'GraphModel', get_credentials: Callable[[str], 'Credentials | None']):\n    \"\"\"\n    Hook to be called when a graph is deactivated/deleted.\n\n    ⚠️ Assuming node entities are not re-used between graph versions, ⚠️\n    this hook calls `on_node_deactivate` on all nodes in `graph`.\n\n    Params:\n        get_credentials: `credentials_id` -> Credentials\n    \"\"\"\n    updated_nodes = []\n    for node in graph.nodes:\n        node_credentials = None\n        if (creds_meta := node.input_default.get(CREDENTIALS_FIELD_NAME)):\n            node_credentials = get_credentials(creds_meta['id'])\n            if not node_credentials:\n                logger.error(f\"Node #{node.id} referenced non-existent credentials #{creds_meta['id']}\")\n        updated_node = await on_node_deactivate(node, credentials=node_credentials)\n        updated_nodes.append(updated_node)\n    graph.nodes = updated_nodes\n    return graph",
        "'\\n    Hook to be called when a graph is deactivated/deleted.\\n\\n    ⚠️ Assuming node entities are not re-used between graph versions, ⚠️\\n    this hook calls `on_node_deactivate` on all nodes in `graph`.\\n\\n    Params:\\n        get_credentials: `credentials_id` -> Credentials\\n    '",
        "updated_nodes = []"
      ]
    },
    {
      "id": "15",
      "type": "block",
      "statements": [
        "node",
        "graph.nodes"
      ]
    },
    {
      "id": "16",
      "type": "block",
      "statements": [
        "node_credentials = None",
        "(creds_meta := node.input_default.get(CREDENTIALS_FIELD_NAME))"
      ]
    },
    {
      "id": "17",
      "type": "block",
      "statements": [
        "graph.nodes = updated_nodes",
        "return graph"
      ]
    },
    {
      "id": "18",
      "type": "block",
      "statements": [
        "node_credentials = get_credentials(creds_meta['id'])",
        "not node_credentials"
      ]
    },
    {
      "id": "19",
      "type": "block",
      "statements": []
    },
    {
      "id": "20",
      "type": "block",
      "statements": [
        "updated_node = await on_node_deactivate(node, credentials=node_credentials)",
        "updated_nodes.append(updated_node)"
      ]
    },
    {
      "id": "21",
      "type": "block",
      "statements": [
        "logger.error(f\"Node #{node.id} referenced non-existent credentials #{creds_meta['id']}\")"
      ]
    },
    {
      "id": "22",
      "type": "block",
      "statements": []
    },
    {
      "id": "23",
      "type": "block",
      "statements": []
    },
    {
      "id": "24",
      "type": "block",
      "statements": [
        "async def on_node_activate(user_id: str, node: 'NodeModel', *, credentials: Optional['Credentials']=None) -> 'NodeModel':\n    \"\"\"Hook to be called when the node is activated/created\"\"\"\n    block = get_block(node.block_id)\n    if not block:\n        raise ValueError(f'Node #{node.id} is instance of unknown block #{node.block_id}')\n    if not block.webhook_config:\n        return node\n    provider = block.webhook_config.provider\n    if provider not in WEBHOOK_MANAGERS_BY_NAME:\n        raise ValueError(f'Block #{block.id} has webhook_config for provider {provider} which does not support webhooks')\n    logger.debug(f'Activating webhook node #{node.id} with config {block.webhook_config}')\n    webhooks_manager = WEBHOOK_MANAGERS_BY_NAME[provider]()\n    if (auto_setup_webhook := isinstance(block.webhook_config, BlockWebhookConfig)):\n        try:\n            resource = block.webhook_config.resource_format.format(**node.input_default)\n        except KeyError:\n            resource = None\n        logger.debug(f'Constructed resource string {resource} from input {node.input_default}')\n    else:\n        resource = ''\n    needs_credentials = CREDENTIALS_FIELD_NAME in block.input_schema.model_fields\n    credentials_meta = node.input_default.get(CREDENTIALS_FIELD_NAME) if needs_credentials else None\n    event_filter_input_name = block.webhook_config.event_filter_input\n    has_everything_for_webhook = resource is not None and (credentials_meta or not needs_credentials) and (not event_filter_input_name or (event_filter_input_name in node.input_default and any((is_on for is_on in node.input_default[event_filter_input_name].values()))))\n    if has_everything_for_webhook and resource is not None:\n        logger.debug(f'Node #{node} has everything for a webhook!')\n        if credentials_meta and (not credentials):\n            raise ValueError(f\"Cannot set up webhook for node #{node.id}: credentials #{credentials_meta['id']} not available\")\n        if event_filter_input_name:\n            event_filter = cast(dict, node.input_default[event_filter_input_name])\n            events = [block.webhook_config.event_format.format(event=event) for (event, enabled) in event_filter.items() if enabled is True]\n            logger.debug(f\"Webhook events to subscribe to: {', '.join(events)}\")\n        else:\n            events = []\n        if auto_setup_webhook:\n            assert credentials is not None\n            new_webhook = await webhooks_manager.get_suitable_auto_webhook(user_id, credentials, block.webhook_config.webhook_type, resource, events)\n        else:\n            new_webhook = await webhooks_manager.get_manual_webhook(user_id, node.graph_id, block.webhook_config.webhook_type, events)\n        logger.debug(f'Acquired webhook: {new_webhook}')\n        return await set_node_webhook(node.id, new_webhook.id)\n    else:\n        logger.debug(f'Node #{node.id} does not have everything for a webhook')\n    return node",
        "'Hook to be called when the node is activated/created'",
        "block = get_block(node.block_id)",
        "not block"
      ]
    },
    {
      "id": "25",
      "type": "block",
      "statements": [
        "raise ValueError(f'Node #{node.id} is instance of unknown block #{node.block_id}')"
      ]
    },
    {
      "id": "26",
      "type": "block",
      "statements": []
    },
    {
      "id": "27",
      "type": "block",
      "statements": [
        "not block.webhook_config"
      ]
    },
    {
      "id": "28",
      "type": "block",
      "statements": [
        "return node"
      ]
    },
    {
      "id": "29",
      "type": "block",
      "statements": []
    },
    {
      "id": "30",
      "type": "block",
      "statements": [
        "provider = block.webhook_config.provider",
        "provider NotIn WEBHOOK_MANAGERS_BY_NAME"
      ]
    },
    {
      "id": "31",
      "type": "block",
      "statements": [
        "raise ValueError(f'Block #{block.id} has webhook_config for provider {provider} which does not support webhooks')"
      ]
    },
    {
      "id": "32",
      "type": "block",
      "statements": []
    },
    {
      "id": "33",
      "type": "block",
      "statements": [
        "logger.debug(f'Activating webhook node #{node.id} with config {block.webhook_config}')",
        "webhooks_manager = WEBHOOK_MANAGERS_BY_NAME[provider]()",
        "(auto_setup_webhook := isinstance(block.webhook_config, BlockWebhookConfig))"
      ]
    },
    {
      "id": "34",
      "type": "block",
      "statements": [
        "try:\n    resource = block.webhook_config.resource_format.format(**node.input_default)\nexcept KeyError:\n    resource = None",
        "resource = block.webhook_config.resource_format.format(**node.input_default)",
        "resource = None",
        "logger.debug(f'Constructed resource string {resource} from input {node.input_default}')"
      ]
    },
    {
      "id": "35",
      "type": "block",
      "statements": [
        "resource = ''"
      ]
    },
    {
      "id": "36",
      "type": "block",
      "statements": [
        "needs_credentials = CREDENTIALS_FIELD_NAME in block.input_schema.model_fields",
        "credentials_meta = node.input_default.get(CREDENTIALS_FIELD_NAME) if needs_credentials else None",
        "event_filter_input_name = block.webhook_config.event_filter_input",
        "has_everything_for_webhook = resource is not None and (credentials_meta or not needs_credentials) and (not event_filter_input_name or (event_filter_input_name in node.input_default and any((is_on for is_on in node.input_default[event_filter_input_name].values()))))",
        "has_everything_for_webhook and resource is not None"
      ]
    },
    {
      "id": "37",
      "type": "block",
      "statements": [
        "logger.debug(f'Node #{node} has everything for a webhook!')",
        "credentials_meta and (not credentials)"
      ]
    },
    {
      "id": "38",
      "type": "block",
      "statements": [
        "logger.debug(f'Node #{node.id} does not have everything for a webhook')"
      ]
    },
    {
      "id": "39",
      "type": "block",
      "statements": [
        "return node"
      ]
    },
    {
      "id": "40",
      "type": "block",
      "statements": [
        "raise ValueError(f\"Cannot set up webhook for node #{node.id}: credentials #{credentials_meta['id']} not available\")"
      ]
    },
    {
      "id": "41",
      "type": "block",
      "statements": []
    },
    {
      "id": "42",
      "type": "block",
      "statements": [
        "event_filter_input_name"
      ]
    },
    {
      "id": "43",
      "type": "block",
      "statements": [
        "event_filter = cast(dict, node.input_default[event_filter_input_name])",
        "events = [block.webhook_config.event_format.format(event=event) for (event, enabled) in event_filter.items() if enabled is True]",
        "logger.debug(f\"Webhook events to subscribe to: {', '.join(events)}\")"
      ]
    },
    {
      "id": "44",
      "type": "block",
      "statements": [
        "events = []"
      ]
    },
    {
      "id": "45",
      "type": "block",
      "statements": [
        "auto_setup_webhook"
      ]
    },
    {
      "id": "46",
      "type": "block",
      "statements": [
        "assert credentials is not None",
        "new_webhook = await webhooks_manager.get_suitable_auto_webhook(user_id, credentials, block.webhook_config.webhook_type, resource, events)"
      ]
    },
    {
      "id": "47",
      "type": "block",
      "statements": [
        "new_webhook = await webhooks_manager.get_manual_webhook(user_id, node.graph_id, block.webhook_config.webhook_type, events)"
      ]
    },
    {
      "id": "48",
      "type": "block",
      "statements": [
        "logger.debug(f'Acquired webhook: {new_webhook}')",
        "return await set_node_webhook(node.id, new_webhook.id)"
      ]
    },
    {
      "id": "49",
      "type": "block",
      "statements": [
        "async def on_node_deactivate(node: 'NodeModel', *, credentials: Optional['Credentials']=None, webhooks_manager: Optional['BaseWebhooksManager']=None) -> 'NodeModel':\n    \"\"\"Hook to be called when node is deactivated/deleted\"\"\"\n    logger.debug(f'Deactivating node #{node.id}')\n    block = get_block(node.block_id)\n    if not block:\n        raise ValueError(f'Node #{node.id} is instance of unknown block #{node.block_id}')\n    if not block.webhook_config:\n        return node\n    provider = block.webhook_config.provider\n    if provider not in WEBHOOK_MANAGERS_BY_NAME:\n        raise ValueError(f'Block #{block.id} has webhook_config for provider {provider} which does not support webhooks')\n    webhooks_manager = WEBHOOK_MANAGERS_BY_NAME[provider]()\n    if node.webhook_id:\n        logger.debug(f'Node #{node.id} has webhook_id {node.webhook_id}')\n        if not node.webhook:\n            logger.error(f'Node #{node.id} has webhook_id but no webhook object')\n            raise ValueError('node.webhook not included')\n        logger.debug(f'Detaching webhook from node #{node.id}')\n        updated_node = await set_node_webhook(node.id, None)\n        webhook = node.webhook\n        logger.debug(f\"Pruning{(' and deregistering' if credentials else '')} webhook #{webhook.id}\")\n        await webhooks_manager.prune_webhook_if_dangling(webhook.id, credentials)\n        if CREDENTIALS_FIELD_NAME in block.input_schema.model_fields and (not credentials):\n            logger.warning(f'Cannot deregister webhook #{webhook.id}: credentials #{webhook.credentials_id} not available ({webhook.provider.value} webhook ID: {webhook.provider_webhook_id})')\n        return updated_node\n    logger.debug(f'Node #{node.id} has no webhook_id, returning')\n    return node",
        "'Hook to be called when node is deactivated/deleted'",
        "logger.debug(f'Deactivating node #{node.id}')",
        "block = get_block(node.block_id)",
        "not block"
      ]
    },
    {
      "id": "50",
      "type": "block",
      "statements": [
        "raise ValueError(f'Node #{node.id} is instance of unknown block #{node.block_id}')"
      ]
    },
    {
      "id": "51",
      "type": "block",
      "statements": []
    },
    {
      "id": "52",
      "type": "block",
      "statements": [
        "not block.webhook_config"
      ]
    },
    {
      "id": "53",
      "type": "block",
      "statements": [
        "return node"
      ]
    },
    {
      "id": "54",
      "type": "block",
      "statements": []
    },
    {
      "id": "55",
      "type": "block",
      "statements": [
        "provider = block.webhook_config.provider",
        "provider NotIn WEBHOOK_MANAGERS_BY_NAME"
      ]
    },
    {
      "id": "56",
      "type": "block",
      "statements": [
        "raise ValueError(f'Block #{block.id} has webhook_config for provider {provider} which does not support webhooks')"
      ]
    },
    {
      "id": "57",
      "type": "block",
      "statements": []
    },
    {
      "id": "58",
      "type": "block",
      "statements": [
        "webhooks_manager = WEBHOOK_MANAGERS_BY_NAME[provider]()",
        "node.webhook_id"
      ]
    },
    {
      "id": "59",
      "type": "block",
      "statements": [
        "logger.debug(f'Node #{node.id} has webhook_id {node.webhook_id}')",
        "not node.webhook"
      ]
    },
    {
      "id": "60",
      "type": "block",
      "statements": []
    },
    {
      "id": "61",
      "type": "block",
      "statements": [
        "logger.debug(f'Node #{node.id} has no webhook_id, returning')",
        "return node"
      ]
    },
    {
      "id": "62",
      "type": "block",
      "statements": [
        "logger.error(f'Node #{node.id} has webhook_id but no webhook object')",
        "raise ValueError('node.webhook not included')"
      ]
    },
    {
      "id": "63",
      "type": "block",
      "statements": []
    },
    {
      "id": "64",
      "type": "block",
      "statements": [
        "logger.debug(f'Detaching webhook from node #{node.id}')",
        "updated_node = await set_node_webhook(node.id, None)",
        "webhook = node.webhook",
        "logger.debug(f\"Pruning{(' and deregistering' if credentials else '')} webhook #{webhook.id}\")",
        "await webhooks_manager.prune_webhook_if_dangling(webhook.id, credentials)",
        "CREDENTIALS_FIELD_NAME in block.input_schema.model_fields and (not credentials)"
      ]
    },
    {
      "id": "65",
      "type": "block",
      "statements": [
        "logger.warning(f'Cannot deregister webhook #{webhook.id}: credentials #{webhook.credentials_id} not available ({webhook.provider.value} webhook ID: {webhook.provider_webhook_id})')"
      ]
    },
    {
      "id": "66",
      "type": "block",
      "statements": []
    },
    {
      "id": "67",
      "type": "block",
      "statements": [
        "return updated_node"
      ]
    }
  ],
  "edges": [
    {
      "source": "1",
      "target": "2",
      "type": "true"
    },
    {
      "source": "1",
      "target": "3",
      "type": "false"
    },
    {
      "source": "2",
      "target": "4",
      "type": "next"
    },
    {
      "source": "3",
      "target": "4",
      "type": "next"
    },
    {
      "source": "4",
      "target": "5",
      "type": "next"
    },
    {
      "source": "5",
      "target": "6",
      "type": "true"
    },
    {
      "source": "5",
      "target": "7",
      "type": "false"
    },
    {
      "source": "6",
      "target": "8",
      "type": "true"
    },
    {
      "source": "6",
      "target": "9",
      "type": "false"
    },
    {
      "source": "8",
      "target": "11",
      "type": "true"
    },
    {
      "source": "8",
      "target": "12",
      "type": "false"
    },
    {
      "source": "9",
      "target": "10",
      "type": "next"
    },
    {
      "source": "10",
      "target": "5",
      "type": "next"
    },
    {
      "source": "11",
      "target": "13",
      "type": "next"
    },
    {
      "source": "12",
      "target": "13",
      "type": "next"
    },
    {
      "source": "13",
      "target": "10",
      "type": "next"
    },
    {
      "source": "14",
      "target": "15",
      "type": "next"
    },
    {
      "source": "15",
      "target": "16",
      "type": "true"
    },
    {
      "source": "15",
      "target": "17",
      "type": "false"
    },
    {
      "source": "16",
      "target": "18",
      "type": "true"
    },
    {
      "source": "16",
      "target": "19",
      "type": "false"
    },
    {
      "source": "18",
      "target": "21",
      "type": "true"
    },
    {
      "source": "18",
      "target": "22",
      "type": "false"
    },
    {
      "source": "19",
      "target": "20",
      "type": "next"
    },
    {
      "source": "20",
      "target": "15",
      "type": "next"
    },
    {
      "source": "21",
      "target": "23",
      "type": "next"
    },
    {
      "source": "22",
      "target": "23",
      "type": "next"
    },
    {
      "source": "23",
      "target": "20",
      "type": "next"
    },
    {
      "source": "24",
      "target": "25",
      "type": "true"
    },
    {
      "source": "24",
      "target": "26",
      "type": "false"
    },
    {
      "source": "25",
      "target": "27",
      "type": "next"
    },
    {
      "source": "26",
      "target": "27",
      "type": "next"
    },
    {
      "source": "27",
      "target": "28",
      "type": "true"
    },
    {
      "source": "27",
      "target": "29",
      "type": "false"
    },
    {
      "source": "29",
      "target": "30",
      "type": "next"
    },
    {
      "source": "30",
      "target": "31",
      "type": "true"
    },
    {
      "source": "30",
      "target": "32",
      "type": "false"
    },
    {
      "source": "31",
      "target": "33",
      "type": "next"
    },
    {
      "source": "32",
      "target": "33",
      "type": "next"
    },
    {
      "source": "33",
      "target": "34",
      "type": "true"
    },
    {
      "source": "33",
      "target": "35",
      "type": "false"
    },
    {
      "source": "34",
      "target": "36",
      "type": "next"
    },
    {
      "source": "35",
      "target": "36",
      "type": "next"
    },
    {
      "source": "36",
      "target": "37",
      "type": "true"
    },
    {
      "source": "36",
      "target": "38",
      "type": "false"
    },
    {
      "source": "37",
      "target": "40",
      "type": "true"
    },
    {
      "source": "37",
      "target": "41",
      "type": "false"
    },
    {
      "source": "38",
      "target": "39",
      "type": "next"
    },
    {
      "source": "40",
      "target": "42",
      "type": "next"
    },
    {
      "source": "41",
      "target": "42",
      "type": "next"
    },
    {
      "source": "42",
      "target": "43",
      "type": "true"
    },
    {
      "source": "42",
      "target": "44",
      "type": "false"
    },
    {
      "source": "43",
      "target": "45",
      "type": "next"
    },
    {
      "source": "44",
      "target": "45",
      "type": "next"
    },
    {
      "source": "45",
      "target": "46",
      "type": "true"
    },
    {
      "source": "45",
      "target": "47",
      "type": "false"
    },
    {
      "source": "46",
      "target": "48",
      "type": "next"
    },
    {
      "source": "47",
      "target": "48",
      "type": "next"
    },
    {
      "source": "49",
      "target": "50",
      "type": "true"
    },
    {
      "source": "49",
      "target": "51",
      "type": "false"
    },
    {
      "source": "50",
      "target": "52",
      "type": "next"
    },
    {
      "source": "51",
      "target": "52",
      "type": "next"
    },
    {
      "source": "52",
      "target": "53",
      "type": "true"
    },
    {
      "source": "52",
      "target": "54",
      "type": "false"
    },
    {
      "source": "54",
      "target": "55",
      "type": "next"
    },
    {
      "source": "55",
      "target": "56",
      "type": "true"
    },
    {
      "source": "55",
      "target": "57",
      "type": "false"
    },
    {
      "source": "56",
      "target": "58",
      "type": "next"
    },
    {
      "source": "57",
      "target": "58",
      "type": "next"
    },
    {
      "source": "58",
      "target": "59",
      "type": "true"
    },
    {
      "source": "58",
      "target": "60",
      "type": "false"
    },
    {
      "source": "59",
      "target": "62",
      "type": "true"
    },
    {
      "source": "59",
      "target": "63",
      "type": "false"
    },
    {
      "source": "60",
      "target": "61",
      "type": "next"
    },
    {
      "source": "62",
      "target": "64",
      "type": "next"
    },
    {
      "source": "63",
      "target": "64",
      "type": "next"
    },
    {
      "source": "64",
      "target": "65",
      "type": "true"
    },
    {
      "source": "64",
      "target": "66",
      "type": "false"
    },
    {
      "source": "65",
      "target": "67",
      "type": "next"
    },
    {
      "source": "66",
      "target": "67",
      "type": "next"
    }
  ]
}