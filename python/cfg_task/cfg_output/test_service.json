{
  "nodes": [
    {
      "id": "1",
      "type": "block",
      "statements": [
        "import pytest",
        "from backend.util.service import AppService, expose, get_service_client",
        "TEST_SERVICE_PORT = 8765",
        "class ServiceTest(AppService):\n\n    def __init__(self):\n        super().__init__()\n\n    @classmethod\n    def get_port(cls) -> int:\n        return TEST_SERVICE_PORT\n\n    @expose\n    def add(self, a: int, b: int) -> int:\n        return a + b\n\n    @expose\n    def subtract(self, a: int, b: int) -> int:\n        return a - b\n\n    @expose\n    def fun_with_async(self, a: int, b: int) -> int:\n\n        async def add_async(a: int, b: int) -> int:\n            return a + b\n        return self.run_and_wait(add_async(a, b))",
        "def __init__(self):\n    super().__init__()",
        "super().__init__()",
        "@classmethod\ndef get_port(cls) -> int:\n    return TEST_SERVICE_PORT",
        "return TEST_SERVICE_PORT"
      ]
    },
    {
      "id": "2",
      "type": "block",
      "statements": [
        "@expose\ndef add(self, a: int, b: int) -> int:\n    return a + b",
        "return a + b"
      ]
    },
    {
      "id": "3",
      "type": "block",
      "statements": [
        "@expose\ndef subtract(self, a: int, b: int) -> int:\n    return a - b",
        "return a - b"
      ]
    },
    {
      "id": "4",
      "type": "block",
      "statements": [
        "@expose\ndef fun_with_async(self, a: int, b: int) -> int:\n\n    async def add_async(a: int, b: int) -> int:\n        return a + b\n    return self.run_and_wait(add_async(a, b))",
        "async def add_async(a: int, b: int) -> int:\n    return a + b",
        "return a + b"
      ]
    },
    {
      "id": "5",
      "type": "block",
      "statements": [
        "return self.run_and_wait(add_async(a, b))"
      ]
    },
    {
      "id": "6",
      "type": "block",
      "statements": [
        "@pytest.mark.asyncio(scope='session')\nasync def test_service_creation(server):\n    with ServiceTest():\n        client = get_service_client(ServiceTest)\n        assert client.add(5, 3) == 8\n        assert client.subtract(10, 4) == 6\n        assert client.fun_with_async(5, 3) == 8",
        "with ServiceTest():\n    client = get_service_client(ServiceTest)\n    assert client.add(5, 3) == 8\n    assert client.subtract(10, 4) == 6\n    assert client.fun_with_async(5, 3) == 8",
        "client = get_service_client(ServiceTest)",
        "assert client.add(5, 3) == 8",
        "assert client.subtract(10, 4) == 6",
        "assert client.fun_with_async(5, 3) == 8"
      ]
    }
  ],
  "edges": []
}