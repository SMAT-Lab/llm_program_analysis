{
  "nodes": [
    {
      "id": "1",
      "type": "block",
      "statements": [
        "def find_previous_power_of_two(number: int) -> int:\n    \"\"\"\n    Find the largest power of two that is less than or equal to a given integer.\n    https://stackoverflow.com/questions/1322510\n\n    >>> [find_previous_power_of_two(i) for i in range(18)]\n    [0, 1, 2, 2, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 16, 16]\n    >>> find_previous_power_of_two(-5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    >>> find_previous_power_of_two(10.5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    \"\"\"\n    if not isinstance(number, int) or number < 0:\n        raise ValueError('Input must be a non-negative integer')\n    if number == 0:\n        return 0\n    power = 1\n    while power <= number:\n        power <<= 1\n    return power >> 1 if number > 1 else 1",
        "'\\n    Find the largest power of two that is less than or equal to a given integer.\\n    https://stackoverflow.com/questions/1322510\\n\\n    >>> [find_previous_power_of_two(i) for i in range(18)]\\n    [0, 1, 2, 2, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 16, 16]\\n    >>> find_previous_power_of_two(-5)\\n    Traceback (most recent call last):\\n        ...\\n    ValueError: Input must be a non-negative integer\\n    >>> find_previous_power_of_two(10.5)\\n    Traceback (most recent call last):\\n        ...\\n    ValueError: Input must be a non-negative integer\\n    '",
        "not isinstance(number, int) or number < 0"
      ]
    },
    {
      "id": "2",
      "type": "block",
      "statements": [
        "raise ValueError('Input must be a non-negative integer')"
      ]
    },
    {
      "id": "3",
      "type": "block",
      "statements": []
    },
    {
      "id": "4",
      "type": "block",
      "statements": [
        "number Eq 0"
      ]
    },
    {
      "id": "5",
      "type": "block",
      "statements": [
        "return 0"
      ]
    },
    {
      "id": "6",
      "type": "block",
      "statements": []
    },
    {
      "id": "7",
      "type": "block",
      "statements": [
        "power = 1"
      ]
    },
    {
      "id": "8",
      "type": "block",
      "statements": [
        "power LtE number"
      ]
    },
    {
      "id": "9",
      "type": "block",
      "statements": [
        "power <<= 1"
      ]
    },
    {
      "id": "10",
      "type": "block",
      "statements": [
        "return power >> 1 if number > 1 else 1"
      ]
    },
    {
      "id": "11",
      "type": "block",
      "statements": [
        "__name__ Eq '__main__'"
      ]
    },
    {
      "id": "12",
      "type": "block",
      "statements": [
        "import doctest",
        "doctest.testmod()"
      ]
    },
    {
      "id": "13",
      "type": "block",
      "statements": []
    },
    {
      "id": "14",
      "type": "block",
      "statements": []
    }
  ],
  "edges": [
    {
      "source": "1",
      "target": "2",
      "type": "true"
    },
    {
      "source": "1",
      "target": "3",
      "type": "false"
    },
    {
      "source": "2",
      "target": "4",
      "type": "next"
    },
    {
      "source": "3",
      "target": "4",
      "type": "next"
    },
    {
      "source": "4",
      "target": "5",
      "type": "true"
    },
    {
      "source": "4",
      "target": "6",
      "type": "false"
    },
    {
      "source": "6",
      "target": "7",
      "type": "next"
    },
    {
      "source": "7",
      "target": "8",
      "type": "next"
    },
    {
      "source": "8",
      "target": "9",
      "type": "true"
    },
    {
      "source": "8",
      "target": "10",
      "type": "false"
    },
    {
      "source": "9",
      "target": "8",
      "type": "next"
    },
    {
      "source": "11",
      "target": "12",
      "type": "true"
    },
    {
      "source": "11",
      "target": "13",
      "type": "false"
    },
    {
      "source": "12",
      "target": "14",
      "type": "next"
    },
    {
      "source": "13",
      "target": "14",
      "type": "next"
    }
  ]
}