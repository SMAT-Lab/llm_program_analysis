{
  "nodes": [
    {
      "id": "1",
      "type": "block",
      "statements": [
        "from typing import Dict, Set",
        "from fastapi import WebSocket",
        "from backend.data import execution",
        "from backend.server.model import Methods, WsMessage",
        "class ConnectionManager:\n\n    def __init__(self):\n        self.active_connections: Set[WebSocket] = set()\n        self.subscriptions: Dict[str, Set[WebSocket]] = {}\n\n    async def connect(self, websocket: WebSocket):\n        await websocket.accept()\n        self.active_connections.add(websocket)\n\n    def disconnect(self, websocket: WebSocket):\n        self.active_connections.remove(websocket)\n        for subscribers in self.subscriptions.values():\n            subscribers.discard(websocket)\n\n    async def subscribe(self, graph_id: str, websocket: WebSocket):\n        if graph_id not in self.subscriptions:\n            self.subscriptions[graph_id] = set()\n        self.subscriptions[graph_id].add(websocket)\n\n    async def unsubscribe(self, graph_id: str, websocket: WebSocket):\n        if graph_id in self.subscriptions:\n            self.subscriptions[graph_id].discard(websocket)\n            if not self.subscriptions[graph_id]:\n                del self.subscriptions[graph_id]\n\n    async def send_execution_result(self, result: execution.ExecutionResult):\n        graph_id = result.graph_id\n        if graph_id in self.subscriptions:\n            message = WsMessage(method=Methods.EXECUTION_EVENT, channel=graph_id, data=result.model_dump()).model_dump_json()\n            for connection in self.subscriptions[graph_id]:\n                await connection.send_text(message)",
        "def __init__(self):\n    self.active_connections: Set[WebSocket] = set()\n    self.subscriptions: Dict[str, Set[WebSocket]] = {}",
        "self.active_connections: Set[WebSocket] = set()",
        "self.subscriptions: Dict[str, Set[WebSocket]] = {}",
        "async def connect(self, websocket: WebSocket):\n    await websocket.accept()\n    self.active_connections.add(websocket)",
        "await websocket.accept()",
        "self.active_connections.add(websocket)",
        "def disconnect(self, websocket: WebSocket):\n    self.active_connections.remove(websocket)\n    for subscribers in self.subscriptions.values():\n        subscribers.discard(websocket)",
        "self.active_connections.remove(websocket)"
      ]
    },
    {
      "id": "2",
      "type": "block",
      "statements": [
        "subscribers",
        "self.subscriptions.values()"
      ]
    },
    {
      "id": "3",
      "type": "block",
      "statements": [
        "subscribers.discard(websocket)"
      ]
    },
    {
      "id": "4",
      "type": "block",
      "statements": [
        "async def subscribe(self, graph_id: str, websocket: WebSocket):\n    if graph_id not in self.subscriptions:\n        self.subscriptions[graph_id] = set()\n    self.subscriptions[graph_id].add(websocket)",
        "graph_id NotIn self.subscriptions"
      ]
    },
    {
      "id": "5",
      "type": "block",
      "statements": [
        "self.subscriptions[graph_id] = set()"
      ]
    },
    {
      "id": "6",
      "type": "block",
      "statements": []
    },
    {
      "id": "7",
      "type": "block",
      "statements": [
        "self.subscriptions[graph_id].add(websocket)",
        "async def unsubscribe(self, graph_id: str, websocket: WebSocket):\n    if graph_id in self.subscriptions:\n        self.subscriptions[graph_id].discard(websocket)\n        if not self.subscriptions[graph_id]:\n            del self.subscriptions[graph_id]",
        "graph_id In self.subscriptions"
      ]
    },
    {
      "id": "8",
      "type": "block",
      "statements": [
        "self.subscriptions[graph_id].discard(websocket)",
        "not self.subscriptions[graph_id]"
      ]
    },
    {
      "id": "9",
      "type": "block",
      "statements": []
    },
    {
      "id": "10",
      "type": "block",
      "statements": [
        "async def send_execution_result(self, result: execution.ExecutionResult):\n    graph_id = result.graph_id\n    if graph_id in self.subscriptions:\n        message = WsMessage(method=Methods.EXECUTION_EVENT, channel=graph_id, data=result.model_dump()).model_dump_json()\n        for connection in self.subscriptions[graph_id]:\n            await connection.send_text(message)",
        "graph_id = result.graph_id",
        "graph_id In self.subscriptions"
      ]
    },
    {
      "id": "11",
      "type": "block",
      "statements": [
        "del self.subscriptions[graph_id]"
      ]
    },
    {
      "id": "12",
      "type": "block",
      "statements": []
    },
    {
      "id": "13",
      "type": "block",
      "statements": []
    },
    {
      "id": "14",
      "type": "block",
      "statements": [
        "message = WsMessage(method=Methods.EXECUTION_EVENT, channel=graph_id, data=result.model_dump()).model_dump_json()"
      ]
    },
    {
      "id": "15",
      "type": "block",
      "statements": []
    },
    {
      "id": "16",
      "type": "block",
      "statements": []
    },
    {
      "id": "17",
      "type": "block",
      "statements": [
        "connection",
        "self.subscriptions[graph_id]"
      ]
    },
    {
      "id": "18",
      "type": "block",
      "statements": [
        "await connection.send_text(message)"
      ]
    },
    {
      "id": "19",
      "type": "block",
      "statements": []
    }
  ],
  "edges": [
    {
      "source": "1",
      "target": "2",
      "type": "next"
    },
    {
      "source": "2",
      "target": "3",
      "type": "true"
    },
    {
      "source": "2",
      "target": "4",
      "type": "false"
    },
    {
      "source": "3",
      "target": "2",
      "type": "next"
    },
    {
      "source": "4",
      "target": "5",
      "type": "true"
    },
    {
      "source": "4",
      "target": "6",
      "type": "false"
    },
    {
      "source": "5",
      "target": "7",
      "type": "next"
    },
    {
      "source": "6",
      "target": "7",
      "type": "next"
    },
    {
      "source": "7",
      "target": "8",
      "type": "true"
    },
    {
      "source": "7",
      "target": "9",
      "type": "false"
    },
    {
      "source": "8",
      "target": "11",
      "type": "true"
    },
    {
      "source": "8",
      "target": "12",
      "type": "false"
    },
    {
      "source": "9",
      "target": "10",
      "type": "next"
    },
    {
      "source": "10",
      "target": "14",
      "type": "true"
    },
    {
      "source": "10",
      "target": "15",
      "type": "false"
    },
    {
      "source": "11",
      "target": "13",
      "type": "next"
    },
    {
      "source": "12",
      "target": "13",
      "type": "next"
    },
    {
      "source": "13",
      "target": "10",
      "type": "next"
    },
    {
      "source": "14",
      "target": "17",
      "type": "next"
    },
    {
      "source": "15",
      "target": "16",
      "type": "next"
    },
    {
      "source": "17",
      "target": "18",
      "type": "true"
    },
    {
      "source": "17",
      "target": "19",
      "type": "false"
    },
    {
      "source": "18",
      "target": "17",
      "type": "next"
    },
    {
      "source": "19",
      "target": "16",
      "type": "next"
    }
  ]
}