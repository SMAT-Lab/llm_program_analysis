{
  "nodes": [
    {
      "id": "1",
      "type": "block",
      "statements": [
        "from __future__ import annotations",
        "import json",
        "import logging",
        "class JsonFileHandler(logging.FileHandler):\n\n    def format(self, record: logging.LogRecord) -> str:\n        record.json_data = json.loads(record.getMessage())\n        return json.dumps(getattr(record, 'json_data'), ensure_ascii=False, indent=4)\n\n    def emit(self, record: logging.LogRecord) -> None:\n        with open(self.baseFilename, 'w', encoding='utf-8') as f:\n            f.write(self.format(record))",
        "def format(self, record: logging.LogRecord) -> str:\n    record.json_data = json.loads(record.getMessage())\n    return json.dumps(getattr(record, 'json_data'), ensure_ascii=False, indent=4)",
        "record.json_data = json.loads(record.getMessage())",
        "return json.dumps(getattr(record, 'json_data'), ensure_ascii=False, indent=4)"
      ]
    },
    {
      "id": "2",
      "type": "block",
      "statements": [
        "def emit(self, record: logging.LogRecord) -> None:\n    with open(self.baseFilename, 'w', encoding='utf-8') as f:\n        f.write(self.format(record))",
        "with open(self.baseFilename, 'w', encoding='utf-8') as f:\n    f.write(self.format(record))",
        "f.write(self.format(record))"
      ]
    }
  ],
  "edges": []
}