{
  "nodes": [
    {
      "id": "1",
      "type": "block",
      "statements": [
        "from abc import ABCMeta, abstractmethod",
        "from enum import Enum",
        "import sys",
        "class Suit(Enum):\n    HEART = 0\n    DIAMOND = 1\n    CLUBS = 2\n    SPADE = 3",
        "HEART = 0",
        "DIAMOND = 1",
        "CLUBS = 2",
        "SPADE = 3",
        "class Card(metaclass=ABCMeta):\n\n    def __init__(self, value, suit):\n        self.value = value\n        self.suit = suit\n        self.is_available = True\n\n    @property\n    @abstractmethod\n    def value(self):\n        pass\n\n    @value.setter\n    @abstractmethod\n    def value(self, other):\n        pass",
        "def __init__(self, value, suit):\n    self.value = value\n    self.suit = suit\n    self.is_available = True",
        "self.value = value",
        "self.suit = suit",
        "self.is_available = True",
        "@property\n@abstractmethod\ndef value(self):\n    pass",
        "pass",
        "@value.setter\n@abstractmethod\ndef value(self, other):\n    pass",
        "pass",
        "class BlackJackCard(Card):\n\n    def __init__(self, value, suit):\n        super(BlackJackCard, self).__init__(value, suit)\n\n    def is_ace(self):\n        return True if self._value == 1 else False\n\n    def is_face_card(self):\n        \"\"\"Jack = 11, Queen = 12, King = 13\"\"\"\n        return True if 10 < self._value <= 13 else False\n\n    @property\n    def value(self):\n        if self.is_ace() == 1:\n            return 1\n        elif self.is_face_card():\n            return 10\n        else:\n            return self._value\n\n    @value.setter\n    def value(self, new_value):\n        if 1 <= new_value <= 13:\n            self._value = new_value\n        else:\n            raise ValueError('Invalid card value: {}'.format(new_value))",
        "def __init__(self, value, suit):\n    super(BlackJackCard, self).__init__(value, suit)",
        "super(BlackJackCard, self).__init__(value, suit)",
        "def is_ace(self):\n    return True if self._value == 1 else False",
        "return True if self._value == 1 else False"
      ]
    },
    {
      "id": "2",
      "type": "block",
      "statements": [
        "def is_face_card(self):\n    \"\"\"Jack = 11, Queen = 12, King = 13\"\"\"\n    return True if 10 < self._value <= 13 else False",
        "'Jack = 11, Queen = 12, King = 13'",
        "return True if 10 < self._value <= 13 else False"
      ]
    },
    {
      "id": "3",
      "type": "block",
      "statements": [
        "@property\ndef value(self):\n    if self.is_ace() == 1:\n        return 1\n    elif self.is_face_card():\n        return 10\n    else:\n        return self._value",
        "self.is_ace() Eq 1"
      ]
    },
    {
      "id": "4",
      "type": "block",
      "statements": [
        "return 1"
      ]
    },
    {
      "id": "5",
      "type": "block",
      "statements": [
        "self.is_face_card()"
      ]
    },
    {
      "id": "6",
      "type": "block",
      "statements": [
        "@value.setter\ndef value(self, new_value):\n    if 1 <= new_value <= 13:\n        self._value = new_value\n    else:\n        raise ValueError('Invalid card value: {}'.format(new_value))",
        "1 LtE new_value"
      ]
    },
    {
      "id": "7",
      "type": "block",
      "statements": [
        "return 10"
      ]
    },
    {
      "id": "8",
      "type": "block",
      "statements": [
        "return self._value"
      ]
    },
    {
      "id": "9",
      "type": "block",
      "statements": []
    },
    {
      "id": "10",
      "type": "block",
      "statements": [
        "self._value = new_value"
      ]
    },
    {
      "id": "11",
      "type": "block",
      "statements": [
        "raise ValueError('Invalid card value: {}'.format(new_value))"
      ]
    },
    {
      "id": "12",
      "type": "block",
      "statements": [
        "class Hand(object):\n\n    def __init__(self, cards):\n        self.cards = cards\n\n    def add_card(self, card):\n        self.cards.append(card)\n\n    def score(self):\n        total_value = 0\n        for card in self.cards:\n            total_value += card.value\n        return total_value",
        "def __init__(self, cards):\n    self.cards = cards",
        "self.cards = cards",
        "def add_card(self, card):\n    self.cards.append(card)",
        "self.cards.append(card)",
        "def score(self):\n    total_value = 0\n    for card in self.cards:\n        total_value += card.value\n    return total_value",
        "total_value = 0"
      ]
    },
    {
      "id": "13",
      "type": "block",
      "statements": [
        "card",
        "self.cards"
      ]
    },
    {
      "id": "14",
      "type": "block",
      "statements": [
        "total_value += card.value"
      ]
    },
    {
      "id": "15",
      "type": "block",
      "statements": [
        "return total_value"
      ]
    },
    {
      "id": "16",
      "type": "block",
      "statements": [
        "class BlackJackHand(Hand):\n    BLACKJACK = 21\n\n    def __init__(self, cards):\n        super(BlackJackHand, self).__init__(cards)\n\n    def score(self):\n        min_over = sys.MAXSIZE\n        max_under = -sys.MAXSIZE\n        for score in self.possible_scores():\n            if self.BLACKJACK < score < min_over:\n                min_over = score\n            elif max_under < score <= self.BLACKJACK:\n                max_under = score\n        return max_under if max_under != -sys.MAXSIZE else min_over\n\n    def possible_scores(self):\n        \"\"\"Return a list of possible scores, taking Aces into account.\"\"\"\n        pass",
        "BLACKJACK = 21",
        "def __init__(self, cards):\n    super(BlackJackHand, self).__init__(cards)",
        "super(BlackJackHand, self).__init__(cards)",
        "def score(self):\n    min_over = sys.MAXSIZE\n    max_under = -sys.MAXSIZE\n    for score in self.possible_scores():\n        if self.BLACKJACK < score < min_over:\n            min_over = score\n        elif max_under < score <= self.BLACKJACK:\n            max_under = score\n    return max_under if max_under != -sys.MAXSIZE else min_over",
        "min_over = sys.MAXSIZE",
        "max_under = -sys.MAXSIZE"
      ]
    },
    {
      "id": "17",
      "type": "block",
      "statements": [
        "score",
        "self.possible_scores()"
      ]
    },
    {
      "id": "18",
      "type": "block",
      "statements": [
        "self.BLACKJACK Lt score"
      ]
    },
    {
      "id": "19",
      "type": "block",
      "statements": [
        "return max_under if max_under != -sys.MAXSIZE else min_over"
      ]
    },
    {
      "id": "20",
      "type": "block",
      "statements": [
        "min_over = score"
      ]
    },
    {
      "id": "21",
      "type": "block",
      "statements": [
        "max_under Lt score"
      ]
    },
    {
      "id": "22",
      "type": "block",
      "statements": []
    },
    {
      "id": "23",
      "type": "block",
      "statements": [
        "max_under = score"
      ]
    },
    {
      "id": "24",
      "type": "block",
      "statements": []
    },
    {
      "id": "25",
      "type": "block",
      "statements": []
    },
    {
      "id": "26",
      "type": "block",
      "statements": [
        "def possible_scores(self):\n    \"\"\"Return a list of possible scores, taking Aces into account.\"\"\"\n    pass",
        "'Return a list of possible scores, taking Aces into account.'",
        "pass",
        "class Deck(object):\n\n    def __init__(self, cards):\n        self.cards = cards\n        self.deal_index = 0\n\n    def remaining_cards(self):\n        return len(self.cards) - self.deal_index\n\n    def deal_card(self):\n        try:\n            card = self.cards[self.deal_index]\n            card.is_available = False\n            self.deal_index += 1\n        except IndexError:\n            return None\n        return card\n\n    def shuffle(self):\n        pass",
        "def __init__(self, cards):\n    self.cards = cards\n    self.deal_index = 0",
        "self.cards = cards",
        "self.deal_index = 0",
        "def remaining_cards(self):\n    return len(self.cards) - self.deal_index",
        "return len(self.cards) - self.deal_index"
      ]
    },
    {
      "id": "27",
      "type": "block",
      "statements": [
        "def deal_card(self):\n    try:\n        card = self.cards[self.deal_index]\n        card.is_available = False\n        self.deal_index += 1\n    except IndexError:\n        return None\n    return card",
        "try:\n    card = self.cards[self.deal_index]\n    card.is_available = False\n    self.deal_index += 1\nexcept IndexError:\n    return None",
        "card = self.cards[self.deal_index]",
        "card.is_available = False",
        "self.deal_index += 1",
        "return None"
      ]
    },
    {
      "id": "28",
      "type": "block",
      "statements": [
        "return card"
      ]
    },
    {
      "id": "29",
      "type": "block",
      "statements": [
        "def shuffle(self):\n    pass",
        "pass"
      ]
    }
  ],
  "edges": [
    {
      "source": "3",
      "target": "4",
      "type": "true"
    },
    {
      "source": "3",
      "target": "5",
      "type": "false"
    },
    {
      "source": "5",
      "target": "7",
      "type": "true"
    },
    {
      "source": "5",
      "target": "8",
      "type": "false"
    },
    {
      "source": "6",
      "target": "10",
      "type": "true"
    },
    {
      "source": "6",
      "target": "11",
      "type": "false"
    },
    {
      "source": "9",
      "target": "6",
      "type": "next"
    },
    {
      "source": "10",
      "target": "12",
      "type": "next"
    },
    {
      "source": "11",
      "target": "12",
      "type": "next"
    },
    {
      "source": "12",
      "target": "13",
      "type": "next"
    },
    {
      "source": "13",
      "target": "14",
      "type": "true"
    },
    {
      "source": "13",
      "target": "15",
      "type": "false"
    },
    {
      "source": "14",
      "target": "13",
      "type": "next"
    },
    {
      "source": "16",
      "target": "17",
      "type": "next"
    },
    {
      "source": "17",
      "target": "18",
      "type": "true"
    },
    {
      "source": "17",
      "target": "19",
      "type": "false"
    },
    {
      "source": "18",
      "target": "20",
      "type": "true"
    },
    {
      "source": "18",
      "target": "21",
      "type": "false"
    },
    {
      "source": "20",
      "target": "22",
      "type": "next"
    },
    {
      "source": "21",
      "target": "23",
      "type": "true"
    },
    {
      "source": "21",
      "target": "24",
      "type": "false"
    },
    {
      "source": "22",
      "target": "17",
      "type": "next"
    },
    {
      "source": "23",
      "target": "25",
      "type": "next"
    },
    {
      "source": "24",
      "target": "25",
      "type": "next"
    },
    {
      "source": "25",
      "target": "22",
      "type": "next"
    }
  ]
}