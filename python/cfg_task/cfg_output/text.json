{
  "nodes": [
    {
      "id": "1",
      "type": "block",
      "statements": [
        "import re",
        "from jinja2 import BaseLoader",
        "from jinja2.sandbox import SandboxedEnvironment",
        "class TextFormatter:\n\n    def __init__(self):\n        self.env = SandboxedEnvironment(loader=BaseLoader(), autoescape=True)\n        self.env.filters.clear()\n        self.env.tests.clear()\n        self.env.globals.clear()\n\n    def format_string(self, template_str: str, values=None, **kwargs) -> str:\n        template_str = re.sub('(?<!{){[ a-zA-Z0-9_]+}', '{\\\\g<0>}', template_str)\n        template = self.env.from_string(template_str)\n        return template.render(values or {}, **kwargs)",
        "def __init__(self):\n    self.env = SandboxedEnvironment(loader=BaseLoader(), autoescape=True)\n    self.env.filters.clear()\n    self.env.tests.clear()\n    self.env.globals.clear()",
        "self.env = SandboxedEnvironment(loader=BaseLoader(), autoescape=True)",
        "self.env.filters.clear()",
        "self.env.tests.clear()",
        "self.env.globals.clear()",
        "def format_string(self, template_str: str, values=None, **kwargs) -> str:\n    template_str = re.sub('(?<!{){[ a-zA-Z0-9_]+}', '{\\\\g<0>}', template_str)\n    template = self.env.from_string(template_str)\n    return template.render(values or {}, **kwargs)",
        "template_str = re.sub('(?<!{){[ a-zA-Z0-9_]+}', '{\\\\g<0>}', template_str)",
        "template = self.env.from_string(template_str)",
        "return template.render(values or {}, **kwargs)"
      ]
    }
  ],
  "edges": []
}