{
  "nodes": [
    {
      "id": "1",
      "type": "block",
      "statements": [
        "import re",
        "import sys",
        "import random",
        "from typing import List, Tuple",
        "import requests",
        "from requests.models import Response",
        "def find_links_in_text(text: str) -> List[str]:\n    \"\"\"Find links in a text and return a list of URLs.\"\"\"\n    link_pattern = re.compile('((?:https?://|www\\\\d{0,3}[.]|[a-z0-9.\\\\-]+[.][a-z]{2,4}/)(?:[^\\\\s()<>]+|\\\\(([^\\\\s()<>]+|(\\\\([^\\\\s()<>]+\\\\)))*\\\\))+(?:\\\\(([^\\\\s()<>]+|(\\\\([^\\\\s()<>]+\\\\)))*\\\\)|[^\\\\s`!()\\\\[\\\\]{};:\\\\\\'\\\\\".,<>?«»“”‘’]))')\n    raw_links = re.findall(link_pattern, text)\n    links = [str(raw_link[0]) for raw_link in raw_links]\n    return links",
        "'Find links in a text and return a list of URLs.'",
        "link_pattern = re.compile('((?:https?://|www\\\\d{0,3}[.]|[a-z0-9.\\\\-]+[.][a-z]{2,4}/)(?:[^\\\\s()<>]+|\\\\(([^\\\\s()<>]+|(\\\\([^\\\\s()<>]+\\\\)))*\\\\))+(?:\\\\(([^\\\\s()<>]+|(\\\\([^\\\\s()<>]+\\\\)))*\\\\)|[^\\\\s`!()\\\\[\\\\]{};:\\\\\\'\\\\\".,<>?«»“”‘’]))')",
        "raw_links = re.findall(link_pattern, text)",
        "links = [str(raw_link[0]) for raw_link in raw_links]",
        "return links"
      ]
    },
    {
      "id": "2",
      "type": "block",
      "statements": [
        "def find_links_in_file(filename: str) -> List[str]:\n    \"\"\"Find links in a file and return a list of URLs from text file.\"\"\"\n    with open(filename, mode='r', encoding='utf-8') as file:\n        readme = file.read()\n        index_section = readme.find('## Index')\n        if index_section == -1:\n            index_section = 0\n        content = readme[index_section:]\n    links = find_links_in_text(content)\n    return links",
        "'Find links in a file and return a list of URLs from text file.'",
        "with open(filename, mode='r', encoding='utf-8') as file:\n    readme = file.read()\n    index_section = readme.find('## Index')\n    if index_section == -1:\n        index_section = 0\n    content = readme[index_section:]",
        "readme = file.read()",
        "index_section = readme.find('## Index')",
        "index_section Eq -1"
      ]
    },
    {
      "id": "3",
      "type": "block",
      "statements": [
        "index_section = 0"
      ]
    },
    {
      "id": "4",
      "type": "block",
      "statements": []
    },
    {
      "id": "5",
      "type": "block",
      "statements": [
        "content = readme[index_section:]",
        "links = find_links_in_text(content)",
        "return links"
      ]
    },
    {
      "id": "6",
      "type": "block",
      "statements": [
        "def check_duplicate_links(links: List[str]) -> Tuple[bool, List]:\n    \"\"\"Check for duplicated links.\n\n    Returns a tuple with True or False and duplicate list.\n    \"\"\"\n    seen = {}\n    duplicates = []\n    has_duplicate = False\n    for link in links:\n        link = link.rstrip('/')\n        if link not in seen:\n            seen[link] = 1\n        elif seen[link] == 1:\n            duplicates.append(link)\n    if duplicates:\n        has_duplicate = True\n    return (has_duplicate, duplicates)",
        "'Check for duplicated links.\\n\\n    Returns a tuple with True or False and duplicate list.\\n    '",
        "seen = {}",
        "duplicates = []",
        "has_duplicate = False"
      ]
    },
    {
      "id": "7",
      "type": "block",
      "statements": [
        "link",
        "links"
      ]
    },
    {
      "id": "8",
      "type": "block",
      "statements": [
        "link = link.rstrip('/')",
        "link NotIn seen"
      ]
    },
    {
      "id": "9",
      "type": "block",
      "statements": [
        "duplicates"
      ]
    },
    {
      "id": "10",
      "type": "block",
      "statements": [
        "seen[link] = 1"
      ]
    },
    {
      "id": "11",
      "type": "block",
      "statements": [
        "seen[link] Eq 1"
      ]
    },
    {
      "id": "12",
      "type": "block",
      "statements": []
    },
    {
      "id": "13",
      "type": "block",
      "statements": [
        "duplicates.append(link)"
      ]
    },
    {
      "id": "14",
      "type": "block",
      "statements": []
    },
    {
      "id": "15",
      "type": "block",
      "statements": []
    },
    {
      "id": "16",
      "type": "block",
      "statements": [
        "has_duplicate = True"
      ]
    },
    {
      "id": "17",
      "type": "block",
      "statements": []
    },
    {
      "id": "18",
      "type": "block",
      "statements": [
        "return (has_duplicate, duplicates)"
      ]
    },
    {
      "id": "19",
      "type": "block",
      "statements": [
        "def fake_user_agent() -> str:\n    \"\"\"Faking user agent as some hosting services block not-whitelisted UA.\"\"\"\n    user_agents = ['Mozilla/5.0 (Windows NT 6.2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1467.0 Safari/537.36', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/605.1.15 (KHTML, like Gecko)', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36']\n    return random.choice(user_agents)",
        "'Faking user agent as some hosting services block not-whitelisted UA.'",
        "user_agents = ['Mozilla/5.0 (Windows NT 6.2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1467.0 Safari/537.36', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/605.1.15 (KHTML, like Gecko)', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36']",
        "return random.choice(user_agents)"
      ]
    },
    {
      "id": "20",
      "type": "block",
      "statements": [
        "def get_host_from_link(link: str) -> str:\n    host = link.split('://', 1)[1] if '://' in link else link\n    if '/' in host:\n        host = host.split('/', 1)[0]\n    elif '?' in host:\n        host = host.split('?', 1)[0]\n    elif '#' in host:\n        host = host.split('#', 1)[0]\n    return host",
        "host = link.split('://', 1)[1] if '://' in link else link",
        "'/' In host"
      ]
    },
    {
      "id": "21",
      "type": "block",
      "statements": [
        "host = host.split('/', 1)[0]"
      ]
    },
    {
      "id": "22",
      "type": "block",
      "statements": [
        "'?' In host"
      ]
    },
    {
      "id": "23",
      "type": "block",
      "statements": [
        "return host"
      ]
    },
    {
      "id": "24",
      "type": "block",
      "statements": [
        "host = host.split('?', 1)[0]"
      ]
    },
    {
      "id": "25",
      "type": "block",
      "statements": [
        "'#' In host"
      ]
    },
    {
      "id": "26",
      "type": "block",
      "statements": []
    },
    {
      "id": "27",
      "type": "block",
      "statements": [
        "host = host.split('#', 1)[0]"
      ]
    },
    {
      "id": "28",
      "type": "block",
      "statements": []
    },
    {
      "id": "29",
      "type": "block",
      "statements": []
    },
    {
      "id": "30",
      "type": "block",
      "statements": [
        "def has_cloudflare_protection(resp: Response) -> bool:\n    \"\"\"Checks if there is any cloudflare protection in the response.\n\n    Cloudflare implements multiple network protections on a given link,\n    this script tries to detect if any of them exist in the response from request.\n\n    Common protections have the following HTTP code as a response:\n        - 403: When host header is missing or incorrect (and more)\n        - 503: When DDOS protection exists\n\n    See more about it at:\n        - https://support.cloudflare.com/hc/en-us/articles/115003014512-4xx-Client-Error\n        - https://support.cloudflare.com/hc/en-us/articles/115003011431-Troubleshooting-Cloudflare-5XX-errors\n        - https://www.cloudflare.com/ddos/\n        - https://superuser.com/a/888526\n\n    Discussions in issues and pull requests:\n        - https://github.com/public-apis/public-apis/pull/2409\n        - https://github.com/public-apis/public-apis/issues/2960 \n    \"\"\"\n    code = resp.status_code\n    server = resp.headers.get('Server') or resp.headers.get('server')\n    cloudflare_flags = ['403 Forbidden', 'cloudflare', 'Cloudflare', 'Security check', 'Please Wait... | Cloudflare', 'We are checking your browser...', 'Please stand by, while we are checking your browser...', 'Checking your browser before accessing', 'This process is automatic.', 'Your browser will redirect to your requested content shortly.', 'Please allow up to 5 seconds', 'DDoS protection by', 'Ray ID:', 'Cloudflare Ray ID:', '_cf_chl', '_cf_chl_opt', '__cf_chl_rt_tk', 'cf-spinner-please-wait', 'cf-spinner-redirecting']\n    if code in [403, 503] and server == 'cloudflare':\n        html = resp.text\n        flags_found = [flag in html for flag in cloudflare_flags]\n        any_flag_found = any(flags_found)\n        if any_flag_found:\n            return True\n    return False",
        "'Checks if there is any cloudflare protection in the response.\\n\\n    Cloudflare implements multiple network protections on a given link,\\n    this script tries to detect if any of them exist in the response from request.\\n\\n    Common protections have the following HTTP code as a response:\\n        - 403: When host header is missing or incorrect (and more)\\n        - 503: When DDOS protection exists\\n\\n    See more about it at:\\n        - https://support.cloudflare.com/hc/en-us/articles/115003014512-4xx-Client-Error\\n        - https://support.cloudflare.com/hc/en-us/articles/115003011431-Troubleshooting-Cloudflare-5XX-errors\\n        - https://www.cloudflare.com/ddos/\\n        - https://superuser.com/a/888526\\n\\n    Discussions in issues and pull requests:\\n        - https://github.com/public-apis/public-apis/pull/2409\\n        - https://github.com/public-apis/public-apis/issues/2960 \\n    '",
        "code = resp.status_code",
        "server = resp.headers.get('Server') or resp.headers.get('server')",
        "cloudflare_flags = ['403 Forbidden', 'cloudflare', 'Cloudflare', 'Security check', 'Please Wait... | Cloudflare', 'We are checking your browser...', 'Please stand by, while we are checking your browser...', 'Checking your browser before accessing', 'This process is automatic.', 'Your browser will redirect to your requested content shortly.', 'Please allow up to 5 seconds', 'DDoS protection by', 'Ray ID:', 'Cloudflare Ray ID:', '_cf_chl', '_cf_chl_opt', '__cf_chl_rt_tk', 'cf-spinner-please-wait', 'cf-spinner-redirecting']",
        "code in [403, 503] and server == 'cloudflare'"
      ]
    },
    {
      "id": "31",
      "type": "block",
      "statements": [
        "html = resp.text",
        "flags_found = [flag in html for flag in cloudflare_flags]",
        "any_flag_found = any(flags_found)",
        "any_flag_found"
      ]
    },
    {
      "id": "32",
      "type": "block",
      "statements": []
    },
    {
      "id": "33",
      "type": "block",
      "statements": [
        "return False"
      ]
    },
    {
      "id": "34",
      "type": "block",
      "statements": [
        "return True"
      ]
    },
    {
      "id": "35",
      "type": "block",
      "statements": []
    },
    {
      "id": "36",
      "type": "block",
      "statements": []
    },
    {
      "id": "37",
      "type": "block",
      "statements": [
        "def check_if_link_is_working(link: str) -> Tuple[bool, str]:\n    \"\"\"Checks if a link is working.\n\n    If an error is identified when the request for the link occurs,\n    the return will be a tuple with the first value True and the second\n    value a string containing the error message.\n\n    If no errors are identified, the return will be a tuple with the\n    first value False and the second an empty string.\n    \"\"\"\n    has_error = False\n    error_message = ''\n    try:\n        resp = requests.get(link, timeout=25, headers={'User-Agent': fake_user_agent(), 'host': get_host_from_link(link)})\n        code = resp.status_code\n        if code >= 400 and (not has_cloudflare_protection(resp)):\n            has_error = True\n            error_message = f'ERR:CLT: {code} : {link}'\n    except requests.exceptions.SSLError as error:\n        has_error = True\n        error_message = f'ERR:SSL: {error} : {link}'\n    except requests.exceptions.ConnectionError as error:\n        has_error = True\n        error_message = f'ERR:CNT: {error} : {link}'\n    except (TimeoutError, requests.exceptions.ConnectTimeout):\n        has_error = True\n        error_message = f'ERR:TMO: {link}'\n    except requests.exceptions.TooManyRedirects as error:\n        has_error = True\n        error_message = f'ERR:TMR: {error} : {link}'\n    except (Exception, requests.exceptions.RequestException) as error:\n        has_error = True\n        error_message = f'ERR:UKN: {error} : {link}'\n    return (has_error, error_message)",
        "'Checks if a link is working.\\n\\n    If an error is identified when the request for the link occurs,\\n    the return will be a tuple with the first value True and the second\\n    value a string containing the error message.\\n\\n    If no errors are identified, the return will be a tuple with the\\n    first value False and the second an empty string.\\n    '",
        "has_error = False",
        "error_message = ''",
        "try:\n    resp = requests.get(link, timeout=25, headers={'User-Agent': fake_user_agent(), 'host': get_host_from_link(link)})\n    code = resp.status_code\n    if code >= 400 and (not has_cloudflare_protection(resp)):\n        has_error = True\n        error_message = f'ERR:CLT: {code} : {link}'\nexcept requests.exceptions.SSLError as error:\n    has_error = True\n    error_message = f'ERR:SSL: {error} : {link}'\nexcept requests.exceptions.ConnectionError as error:\n    has_error = True\n    error_message = f'ERR:CNT: {error} : {link}'\nexcept (TimeoutError, requests.exceptions.ConnectTimeout):\n    has_error = True\n    error_message = f'ERR:TMO: {link}'\nexcept requests.exceptions.TooManyRedirects as error:\n    has_error = True\n    error_message = f'ERR:TMR: {error} : {link}'\nexcept (Exception, requests.exceptions.RequestException) as error:\n    has_error = True\n    error_message = f'ERR:UKN: {error} : {link}'",
        "resp = requests.get(link, timeout=25, headers={'User-Agent': fake_user_agent(), 'host': get_host_from_link(link)})",
        "code = resp.status_code",
        "code >= 400 and (not has_cloudflare_protection(resp))"
      ]
    },
    {
      "id": "38",
      "type": "block",
      "statements": [
        "has_error = True",
        "error_message = f'ERR:CLT: {code} : {link}'"
      ]
    },
    {
      "id": "39",
      "type": "block",
      "statements": []
    },
    {
      "id": "40",
      "type": "block",
      "statements": [
        "has_error = True",
        "error_message = f'ERR:SSL: {error} : {link}'",
        "has_error = True",
        "error_message = f'ERR:CNT: {error} : {link}'",
        "has_error = True",
        "error_message = f'ERR:TMO: {link}'",
        "has_error = True",
        "error_message = f'ERR:TMR: {error} : {link}'",
        "has_error = True",
        "error_message = f'ERR:UKN: {error} : {link}'",
        "return (has_error, error_message)"
      ]
    },
    {
      "id": "41",
      "type": "block",
      "statements": [
        "def check_if_list_of_links_are_working(list_of_links: List[str]) -> List[str]:\n    error_messages = []\n    for link in list_of_links:\n        (has_error, error_message) = check_if_link_is_working(link)\n        if has_error:\n            error_messages.append(error_message)\n    return error_messages",
        "error_messages = []"
      ]
    },
    {
      "id": "42",
      "type": "block",
      "statements": [
        "link",
        "list_of_links"
      ]
    },
    {
      "id": "43",
      "type": "block",
      "statements": [
        "(has_error, error_message) = check_if_link_is_working(link)",
        "has_error"
      ]
    },
    {
      "id": "44",
      "type": "block",
      "statements": [
        "return error_messages"
      ]
    },
    {
      "id": "45",
      "type": "block",
      "statements": [
        "error_messages.append(error_message)"
      ]
    },
    {
      "id": "46",
      "type": "block",
      "statements": []
    },
    {
      "id": "47",
      "type": "block",
      "statements": []
    },
    {
      "id": "48",
      "type": "block",
      "statements": [
        "def start_duplicate_links_checker(links: List[str]) -> None:\n    print('Checking for duplicate links...')\n    (has_duplicate_link, duplicates_links) = check_duplicate_links(links)\n    if has_duplicate_link:\n        print(f'Found duplicate links:')\n        for duplicate_link in duplicates_links:\n            print(duplicate_link)\n        sys.exit(1)\n    else:\n        print('No duplicate links.')",
        "print('Checking for duplicate links...')",
        "(has_duplicate_link, duplicates_links) = check_duplicate_links(links)",
        "has_duplicate_link"
      ]
    },
    {
      "id": "49",
      "type": "block",
      "statements": [
        "print(f'Found duplicate links:')"
      ]
    },
    {
      "id": "50",
      "type": "block",
      "statements": [
        "print('No duplicate links.')"
      ]
    },
    {
      "id": "51",
      "type": "block",
      "statements": [
        "def start_links_working_checker(links: List[str]) -> None:\n    print(f'Checking if {len(links)} links are working...')\n    errors = check_if_list_of_links_are_working(links)\n    if errors:\n        num_errors = len(errors)\n        print(f'Apparently {num_errors} links are not working properly. See in:')\n        for error_message in errors:\n            print(error_message)\n        sys.exit(1)",
        "print(f'Checking if {len(links)} links are working...')",
        "errors = check_if_list_of_links_are_working(links)",
        "errors"
      ]
    },
    {
      "id": "52",
      "type": "block",
      "statements": [
        "duplicate_link",
        "duplicates_links"
      ]
    },
    {
      "id": "53",
      "type": "block",
      "statements": [
        "print(duplicate_link)"
      ]
    },
    {
      "id": "54",
      "type": "block",
      "statements": [
        "sys.exit(1)"
      ]
    },
    {
      "id": "55",
      "type": "block",
      "statements": [
        "num_errors = len(errors)",
        "print(f'Apparently {num_errors} links are not working properly. See in:')"
      ]
    },
    {
      "id": "56",
      "type": "block",
      "statements": []
    },
    {
      "id": "57",
      "type": "block",
      "statements": [
        "def main(filename: str, only_duplicate_links_checker: bool) -> None:\n    links = find_links_in_file(filename)\n    start_duplicate_links_checker(links)\n    if not only_duplicate_links_checker:\n        start_links_working_checker(links)",
        "links = find_links_in_file(filename)",
        "start_duplicate_links_checker(links)",
        "not only_duplicate_links_checker"
      ]
    },
    {
      "id": "58",
      "type": "block",
      "statements": [
        "error_message",
        "errors"
      ]
    },
    {
      "id": "59",
      "type": "block",
      "statements": [
        "print(error_message)"
      ]
    },
    {
      "id": "60",
      "type": "block",
      "statements": [
        "sys.exit(1)"
      ]
    },
    {
      "id": "61",
      "type": "block",
      "statements": [
        "start_links_working_checker(links)"
      ]
    },
    {
      "id": "62",
      "type": "block",
      "statements": []
    },
    {
      "id": "63",
      "type": "block",
      "statements": [
        "__name__ Eq '__main__'"
      ]
    },
    {
      "id": "64",
      "type": "block",
      "statements": [
        "num_args = len(sys.argv)",
        "only_duplicate_links_checker = False",
        "num_args Lt 2"
      ]
    },
    {
      "id": "65",
      "type": "block",
      "statements": []
    },
    {
      "id": "66",
      "type": "block",
      "statements": []
    },
    {
      "id": "67",
      "type": "block",
      "statements": [
        "print('No .md file passed')",
        "sys.exit(1)"
      ]
    },
    {
      "id": "68",
      "type": "block",
      "statements": [
        "num_args Eq 3"
      ]
    },
    {
      "id": "69",
      "type": "block",
      "statements": [
        "filename = sys.argv[1]",
        "main(filename, only_duplicate_links_checker)"
      ]
    },
    {
      "id": "70",
      "type": "block",
      "statements": [
        "third_arg = sys.argv[2].lower()",
        "third_arg == '-odlc' or third_arg == '--only_duplicate_links_checker'"
      ]
    },
    {
      "id": "71",
      "type": "block",
      "statements": []
    },
    {
      "id": "72",
      "type": "block",
      "statements": []
    },
    {
      "id": "73",
      "type": "block",
      "statements": [
        "only_duplicate_links_checker = True"
      ]
    },
    {
      "id": "74",
      "type": "block",
      "statements": [
        "print(f'Third invalid argument. Usage: python {__file__} [-odlc | --only_duplicate_links_checker]')",
        "sys.exit(1)"
      ]
    },
    {
      "id": "75",
      "type": "block",
      "statements": []
    }
  ],
  "edges": [
    {
      "source": "2",
      "target": "3",
      "type": "true"
    },
    {
      "source": "2",
      "target": "4",
      "type": "false"
    },
    {
      "source": "3",
      "target": "5",
      "type": "next"
    },
    {
      "source": "4",
      "target": "5",
      "type": "next"
    },
    {
      "source": "6",
      "target": "7",
      "type": "next"
    },
    {
      "source": "7",
      "target": "8",
      "type": "true"
    },
    {
      "source": "7",
      "target": "9",
      "type": "false"
    },
    {
      "source": "8",
      "target": "10",
      "type": "true"
    },
    {
      "source": "8",
      "target": "11",
      "type": "false"
    },
    {
      "source": "9",
      "target": "16",
      "type": "true"
    },
    {
      "source": "9",
      "target": "17",
      "type": "false"
    },
    {
      "source": "10",
      "target": "12",
      "type": "next"
    },
    {
      "source": "11",
      "target": "13",
      "type": "true"
    },
    {
      "source": "11",
      "target": "14",
      "type": "false"
    },
    {
      "source": "12",
      "target": "7",
      "type": "next"
    },
    {
      "source": "13",
      "target": "15",
      "type": "next"
    },
    {
      "source": "14",
      "target": "15",
      "type": "next"
    },
    {
      "source": "15",
      "target": "12",
      "type": "next"
    },
    {
      "source": "16",
      "target": "18",
      "type": "next"
    },
    {
      "source": "17",
      "target": "18",
      "type": "next"
    },
    {
      "source": "20",
      "target": "21",
      "type": "true"
    },
    {
      "source": "20",
      "target": "22",
      "type": "false"
    },
    {
      "source": "21",
      "target": "23",
      "type": "next"
    },
    {
      "source": "22",
      "target": "24",
      "type": "true"
    },
    {
      "source": "22",
      "target": "25",
      "type": "false"
    },
    {
      "source": "24",
      "target": "26",
      "type": "next"
    },
    {
      "source": "25",
      "target": "27",
      "type": "true"
    },
    {
      "source": "25",
      "target": "28",
      "type": "false"
    },
    {
      "source": "26",
      "target": "23",
      "type": "next"
    },
    {
      "source": "27",
      "target": "29",
      "type": "next"
    },
    {
      "source": "28",
      "target": "29",
      "type": "next"
    },
    {
      "source": "29",
      "target": "26",
      "type": "next"
    },
    {
      "source": "30",
      "target": "31",
      "type": "true"
    },
    {
      "source": "30",
      "target": "32",
      "type": "false"
    },
    {
      "source": "31",
      "target": "34",
      "type": "true"
    },
    {
      "source": "31",
      "target": "35",
      "type": "false"
    },
    {
      "source": "32",
      "target": "33",
      "type": "next"
    },
    {
      "source": "35",
      "target": "36",
      "type": "next"
    },
    {
      "source": "36",
      "target": "33",
      "type": "next"
    },
    {
      "source": "37",
      "target": "38",
      "type": "true"
    },
    {
      "source": "37",
      "target": "39",
      "type": "false"
    },
    {
      "source": "38",
      "target": "40",
      "type": "next"
    },
    {
      "source": "39",
      "target": "40",
      "type": "next"
    },
    {
      "source": "41",
      "target": "42",
      "type": "next"
    },
    {
      "source": "42",
      "target": "43",
      "type": "true"
    },
    {
      "source": "42",
      "target": "44",
      "type": "false"
    },
    {
      "source": "43",
      "target": "45",
      "type": "true"
    },
    {
      "source": "43",
      "target": "46",
      "type": "false"
    },
    {
      "source": "45",
      "target": "47",
      "type": "next"
    },
    {
      "source": "46",
      "target": "47",
      "type": "next"
    },
    {
      "source": "47",
      "target": "42",
      "type": "next"
    },
    {
      "source": "48",
      "target": "49",
      "type": "true"
    },
    {
      "source": "48",
      "target": "50",
      "type": "false"
    },
    {
      "source": "49",
      "target": "52",
      "type": "next"
    },
    {
      "source": "50",
      "target": "51",
      "type": "next"
    },
    {
      "source": "51",
      "target": "55",
      "type": "true"
    },
    {
      "source": "51",
      "target": "56",
      "type": "false"
    },
    {
      "source": "52",
      "target": "53",
      "type": "true"
    },
    {
      "source": "52",
      "target": "54",
      "type": "false"
    },
    {
      "source": "53",
      "target": "52",
      "type": "next"
    },
    {
      "source": "54",
      "target": "51",
      "type": "next"
    },
    {
      "source": "55",
      "target": "58",
      "type": "next"
    },
    {
      "source": "56",
      "target": "57",
      "type": "next"
    },
    {
      "source": "57",
      "target": "61",
      "type": "true"
    },
    {
      "source": "57",
      "target": "62",
      "type": "false"
    },
    {
      "source": "58",
      "target": "59",
      "type": "true"
    },
    {
      "source": "58",
      "target": "60",
      "type": "false"
    },
    {
      "source": "59",
      "target": "58",
      "type": "next"
    },
    {
      "source": "60",
      "target": "57",
      "type": "next"
    },
    {
      "source": "61",
      "target": "63",
      "type": "next"
    },
    {
      "source": "62",
      "target": "63",
      "type": "next"
    },
    {
      "source": "63",
      "target": "64",
      "type": "true"
    },
    {
      "source": "63",
      "target": "65",
      "type": "false"
    },
    {
      "source": "64",
      "target": "67",
      "type": "true"
    },
    {
      "source": "64",
      "target": "68",
      "type": "false"
    },
    {
      "source": "65",
      "target": "66",
      "type": "next"
    },
    {
      "source": "67",
      "target": "69",
      "type": "next"
    },
    {
      "source": "68",
      "target": "70",
      "type": "true"
    },
    {
      "source": "68",
      "target": "71",
      "type": "false"
    },
    {
      "source": "69",
      "target": "66",
      "type": "next"
    },
    {
      "source": "70",
      "target": "73",
      "type": "true"
    },
    {
      "source": "70",
      "target": "74",
      "type": "false"
    },
    {
      "source": "71",
      "target": "72",
      "type": "next"
    },
    {
      "source": "72",
      "target": "69",
      "type": "next"
    },
    {
      "source": "73",
      "target": "75",
      "type": "next"
    },
    {
      "source": "74",
      "target": "75",
      "type": "next"
    },
    {
      "source": "75",
      "target": "72",
      "type": "next"
    }
  ]
}