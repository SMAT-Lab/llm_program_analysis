{
  "nodes": [
    {
      "id": "1",
      "type": "block",
      "statements": [
        "def get_index_of_rightmost_set_bit(number: int) -> int:\n    \"\"\"\n    Take in a positive integer 'number'.\n    Returns the zero-based index of first set bit in that 'number' from right.\n    Returns -1, If no set bit found.\n\n    >>> get_index_of_rightmost_set_bit(0)\n    -1\n    >>> get_index_of_rightmost_set_bit(5)\n    0\n    >>> get_index_of_rightmost_set_bit(36)\n    2\n    >>> get_index_of_rightmost_set_bit(8)\n    3\n    >>> get_index_of_rightmost_set_bit(-18)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    >>> get_index_of_rightmost_set_bit('test')\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    >>> get_index_of_rightmost_set_bit(1.25)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    \"\"\"\n    if not isinstance(number, int) or number < 0:\n        raise ValueError('Input must be a non-negative integer')\n    intermediate = number & ~(number - 1)\n    index = 0\n    while intermediate:\n        intermediate >>= 1\n        index += 1\n    return index - 1",
        "\"\\n    Take in a positive integer 'number'.\\n    Returns the zero-based index of first set bit in that 'number' from right.\\n    Returns -1, If no set bit found.\\n\\n    >>> get_index_of_rightmost_set_bit(0)\\n    -1\\n    >>> get_index_of_rightmost_set_bit(5)\\n    0\\n    >>> get_index_of_rightmost_set_bit(36)\\n    2\\n    >>> get_index_of_rightmost_set_bit(8)\\n    3\\n    >>> get_index_of_rightmost_set_bit(-18)\\n    Traceback (most recent call last):\\n        ...\\n    ValueError: Input must be a non-negative integer\\n    >>> get_index_of_rightmost_set_bit('test')\\n    Traceback (most recent call last):\\n        ...\\n    ValueError: Input must be a non-negative integer\\n    >>> get_index_of_rightmost_set_bit(1.25)\\n    Traceback (most recent call last):\\n        ...\\n    ValueError: Input must be a non-negative integer\\n    \"",
        "not isinstance(number, int) or number < 0"
      ]
    },
    {
      "id": "2",
      "type": "block",
      "statements": [
        "raise ValueError('Input must be a non-negative integer')"
      ]
    },
    {
      "id": "3",
      "type": "block",
      "statements": []
    },
    {
      "id": "4",
      "type": "block",
      "statements": [
        "intermediate = number & ~(number - 1)",
        "index = 0"
      ]
    },
    {
      "id": "5",
      "type": "block",
      "statements": [
        "intermediate"
      ]
    },
    {
      "id": "6",
      "type": "block",
      "statements": [
        "intermediate >>= 1",
        "index += 1"
      ]
    },
    {
      "id": "7",
      "type": "block",
      "statements": [
        "return index - 1"
      ]
    },
    {
      "id": "8",
      "type": "block",
      "statements": [
        "__name__ Eq '__main__'"
      ]
    },
    {
      "id": "9",
      "type": "block",
      "statements": [
        "'\\n    Finding the index of rightmost set bit has some very peculiar use-cases,\\n    especially in finding missing or/and repeating numbers in a list of\\n    positive integers.\\n    '",
        "import doctest",
        "doctest.testmod()"
      ]
    },
    {
      "id": "10",
      "type": "block",
      "statements": []
    },
    {
      "id": "11",
      "type": "block",
      "statements": []
    }
  ],
  "edges": [
    {
      "source": "1",
      "target": "2",
      "type": "true"
    },
    {
      "source": "1",
      "target": "3",
      "type": "false"
    },
    {
      "source": "2",
      "target": "4",
      "type": "next"
    },
    {
      "source": "3",
      "target": "4",
      "type": "next"
    },
    {
      "source": "4",
      "target": "5",
      "type": "next"
    },
    {
      "source": "5",
      "target": "6",
      "type": "true"
    },
    {
      "source": "5",
      "target": "7",
      "type": "false"
    },
    {
      "source": "6",
      "target": "5",
      "type": "next"
    },
    {
      "source": "8",
      "target": "9",
      "type": "true"
    },
    {
      "source": "8",
      "target": "10",
      "type": "false"
    },
    {
      "source": "9",
      "target": "11",
      "type": "next"
    },
    {
      "source": "10",
      "target": "11",
      "type": "next"
    }
  ]
}