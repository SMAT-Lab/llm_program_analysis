{
  "nodes": [
    {
      "id": "1",
      "type": "block",
      "statements": [
        "'\\nThe command line interface for the agent server\\n'",
        "import os",
        "import pathlib",
        "import click",
        "import psutil",
        "from backend import app",
        "from backend.util.process import AppProcess",
        "def get_pid_path() -> pathlib.Path:\n    home_dir = pathlib.Path.home()\n    new_dir = home_dir / '.config' / 'agpt'\n    file_path = new_dir / 'running.tmp'\n    return file_path",
        "home_dir = pathlib.Path.home()",
        "new_dir = home_dir / '.config' / 'agpt'",
        "file_path = new_dir / 'running.tmp'",
        "return file_path"
      ]
    },
    {
      "id": "2",
      "type": "block",
      "statements": [
        "def get_pid() -> int | None:\n    file_path = get_pid_path()\n    if not file_path.exists():\n        return None\n    os.makedirs(file_path.parent, exist_ok=True)\n    with open(file_path, 'r', encoding='utf-8') as file:\n        pid = file.read()\n    try:\n        return int(pid)\n    except ValueError:\n        return None",
        "file_path = get_pid_path()",
        "not file_path.exists()"
      ]
    },
    {
      "id": "3",
      "type": "block",
      "statements": [
        "return None"
      ]
    },
    {
      "id": "4",
      "type": "block",
      "statements": []
    },
    {
      "id": "5",
      "type": "block",
      "statements": [
        "os.makedirs(file_path.parent)",
        "with open(file_path, 'r', encoding='utf-8') as file:\n    pid = file.read()",
        "pid = file.read()",
        "try:\n    return int(pid)\nexcept ValueError:\n    return None",
        "return int(pid)"
      ]
    },
    {
      "id": "6",
      "type": "block",
      "statements": [
        "return None"
      ]
    },
    {
      "id": "7",
      "type": "block",
      "statements": [
        "def write_pid(pid: int):\n    file_path = get_pid_path()\n    os.makedirs(file_path.parent, exist_ok=True)\n    with open(file_path, 'w', encoding='utf-8') as file:\n        file.write(str(pid))",
        "file_path = get_pid_path()",
        "os.makedirs(file_path.parent)",
        "with open(file_path, 'w', encoding='utf-8') as file:\n    file.write(str(pid))",
        "file.write(str(pid))",
        "class MainApp(AppProcess):\n\n    def run(self):\n        app.main(silent=True)",
        "def run(self):\n    app.main(silent=True)",
        "app.main()",
        "@click.group()\ndef main():\n    \"\"\"AutoGPT Server CLI Tool\"\"\"\n    pass",
        "'AutoGPT Server CLI Tool'",
        "pass",
        "@main.command()\ndef start():\n    \"\"\"\n    Starts the server in the background and saves the PID\n    \"\"\"\n    pid = get_pid()\n    if pid and psutil.pid_exists(pid):\n        print('Server is already running')\n        exit(1)\n    elif pid:\n        print('PID does not exist deleting file')\n        os.remove(get_pid_path())\n    print('Starting server')\n    pid = MainApp().start(background=True, silent=True)\n    print(f'Server running in process: {pid}')\n    write_pid(pid)\n    print('done')\n    os._exit(status=0)",
        "'\\n    Starts the server in the background and saves the PID\\n    '",
        "pid = get_pid()",
        "pid and psutil.pid_exists(pid)"
      ]
    },
    {
      "id": "8",
      "type": "block",
      "statements": [
        "print('Server is already running')",
        "exit(1)"
      ]
    },
    {
      "id": "9",
      "type": "block",
      "statements": [
        "pid"
      ]
    },
    {
      "id": "10",
      "type": "block",
      "statements": [
        "print('Starting server')",
        "pid = MainApp().start(background=True, silent=True)",
        "print(f'Server running in process: {pid}')",
        "write_pid(pid)",
        "print('done')",
        "os._exit()",
        "@main.command()\ndef stop():\n    \"\"\"\n    Stops the server\n    \"\"\"\n    pid = get_pid()\n    if not pid:\n        print('Server is not running')\n        return\n    os.remove(get_pid_path())\n    process = psutil.Process(int(pid))\n    for child in process.children(recursive=True):\n        child.terminate()\n    process.terminate()\n    print('Server Stopped')",
        "'\\n    Stops the server\\n    '",
        "pid = get_pid()",
        "not pid"
      ]
    },
    {
      "id": "11",
      "type": "block",
      "statements": [
        "print('PID does not exist deleting file')",
        "os.remove(get_pid_path())"
      ]
    },
    {
      "id": "12",
      "type": "block",
      "statements": []
    },
    {
      "id": "13",
      "type": "block",
      "statements": []
    },
    {
      "id": "14",
      "type": "block",
      "statements": [
        "print('Server is not running')",
        "return"
      ]
    },
    {
      "id": "15",
      "type": "block",
      "statements": []
    },
    {
      "id": "16",
      "type": "block",
      "statements": [
        "os.remove(get_pid_path())",
        "process = psutil.Process(int(pid))"
      ]
    },
    {
      "id": "17",
      "type": "block",
      "statements": [
        "child",
        "process.children()"
      ]
    },
    {
      "id": "18",
      "type": "block",
      "statements": [
        "child.terminate()"
      ]
    },
    {
      "id": "19",
      "type": "block",
      "statements": [
        "process.terminate()",
        "print('Server Stopped')",
        "@main.command()\ndef gen_encrypt_key():\n    \"\"\"\n    Generate a new encryption key\n    \"\"\"\n    from cryptography.fernet import Fernet\n    print(Fernet.generate_key().decode())",
        "'\\n    Generate a new encryption key\\n    '",
        "from cryptography.fernet import Fernet",
        "print(Fernet.generate_key().decode())",
        "@click.group()\ndef test():\n    \"\"\"\n    Group for test commands\n    \"\"\"\n    pass",
        "'\\n    Group for test commands\\n    '",
        "pass",
        "@test.command()\n@click.argument('server_address')\ndef reddit(server_address: str):\n    \"\"\"\n    Create an event graph\n    \"\"\"\n    import requests\n    from backend.usecases.reddit_marketing import create_test_graph\n    test_graph = create_test_graph()\n    url = f'{server_address}/graphs'\n    headers = {'Content-Type': 'application/json'}\n    data = test_graph.model_dump_json()\n    response = requests.post(url, headers=headers, data=data)\n    graph_id = response.json()['id']\n    print(f'Graph created with ID: {graph_id}')",
        "'\\n    Create an event graph\\n    '",
        "import requests",
        "from backend.usecases.reddit_marketing import create_test_graph",
        "test_graph = create_test_graph()",
        "url = f'{server_address}/graphs'",
        "headers = {'Content-Type': 'application/json'}",
        "data = test_graph.model_dump_json()",
        "response = requests.post(url, headers=headers, data=data)",
        "graph_id = response.json()['id']",
        "print(f'Graph created with ID: {graph_id}')",
        "@test.command()\n@click.argument('server_address')\ndef populate_db(server_address: str):\n    \"\"\"\n    Create an event graph\n    \"\"\"\n    import requests\n    from backend.usecases.sample import create_test_graph\n    test_graph = create_test_graph()\n    url = f'{server_address}/graphs'\n    headers = {'Content-Type': 'application/json'}\n    data = test_graph.model_dump_json()\n    response = requests.post(url, headers=headers, data=data)\n    graph_id = response.json()['id']\n    if response.status_code == 200:\n        execute_url = f\"{server_address}/graphs/{response.json()['id']}/execute\"\n        text = 'Hello, World!'\n        input_data = {'input': text}\n        response = requests.post(execute_url, headers=headers, json=input_data)\n        schedule_url = f'{server_address}/graphs/{graph_id}/schedules'\n        data = {'graph_id': graph_id, 'cron': '*/5 * * * *', 'input_data': {'input': 'Hello, World!'}}\n        response = requests.post(schedule_url, headers=headers, json=data)\n    print('Database populated with: \\n- graph\\n- execution\\n- schedule')",
        "'\\n    Create an event graph\\n    '",
        "import requests",
        "from backend.usecases.sample import create_test_graph",
        "test_graph = create_test_graph()",
        "url = f'{server_address}/graphs'",
        "headers = {'Content-Type': 'application/json'}",
        "data = test_graph.model_dump_json()",
        "response = requests.post(url, headers=headers, data=data)",
        "graph_id = response.json()['id']",
        "response.status_code Eq 200"
      ]
    },
    {
      "id": "20",
      "type": "block",
      "statements": [
        "execute_url = f\"{server_address}/graphs/{response.json()['id']}/execute\"",
        "text = 'Hello, World!'",
        "input_data = {'input': text}",
        "response = requests.post(execute_url, headers=headers, json=input_data)",
        "schedule_url = f'{server_address}/graphs/{graph_id}/schedules'",
        "data = {'graph_id': graph_id, 'cron': '*/5 * * * *', 'input_data': {'input': 'Hello, World!'}}",
        "response = requests.post(schedule_url, headers=headers, json=data)"
      ]
    },
    {
      "id": "21",
      "type": "block",
      "statements": []
    },
    {
      "id": "22",
      "type": "block",
      "statements": [
        "print('Database populated with: \\n- graph\\n- execution\\n- schedule')",
        "@test.command()\n@click.argument('server_address')\ndef graph(server_address: str):\n    \"\"\"\n    Create an event graph\n    \"\"\"\n    import requests\n    from backend.usecases.sample import create_test_graph\n    url = f'{server_address}/graphs'\n    headers = {'Content-Type': 'application/json'}\n    data = create_test_graph().model_dump_json()\n    response = requests.post(url, headers=headers, data=data)\n    if response.status_code == 200:\n        print(response.json()['id'])\n        execute_url = f\"{server_address}/graphs/{response.json()['id']}/execute\"\n        text = 'Hello, World!'\n        input_data = {'input': text}\n        response = requests.post(execute_url, headers=headers, json=input_data)\n    else:\n        print('Failed to send graph')\n        print(f'Response: {response.text}')",
        "'\\n    Create an event graph\\n    '",
        "import requests",
        "from backend.usecases.sample import create_test_graph",
        "url = f'{server_address}/graphs'",
        "headers = {'Content-Type': 'application/json'}",
        "data = create_test_graph().model_dump_json()",
        "response = requests.post(url, headers=headers, data=data)",
        "response.status_code Eq 200"
      ]
    },
    {
      "id": "23",
      "type": "block",
      "statements": [
        "print(response.json()['id'])",
        "execute_url = f\"{server_address}/graphs/{response.json()['id']}/execute\"",
        "text = 'Hello, World!'",
        "input_data = {'input': text}",
        "response = requests.post(execute_url, headers=headers, json=input_data)"
      ]
    },
    {
      "id": "24",
      "type": "block",
      "statements": [
        "print('Failed to send graph')",
        "print(f'Response: {response.text}')"
      ]
    },
    {
      "id": "25",
      "type": "block",
      "statements": [
        "@test.command()\n@click.argument('graph_id')\n@click.argument('content')\ndef execute(graph_id: str, content: dict):\n    \"\"\"\n    Create an event graph\n    \"\"\"\n    import requests\n    headers = {'Content-Type': 'application/json'}\n    execute_url = f'http://0.0.0.0:8000/graphs/{graph_id}/execute'\n    requests.post(execute_url, headers=headers, json=content)",
        "'\\n    Create an event graph\\n    '",
        "import requests",
        "headers = {'Content-Type': 'application/json'}",
        "execute_url = f'http://0.0.0.0:8000/graphs/{graph_id}/execute'",
        "requests.post(execute_url)",
        "@test.command()\ndef event():\n    \"\"\"\n    Send an event to the running server\n    \"\"\"\n    print('Event sent')",
        "'\\n    Send an event to the running server\\n    '",
        "print('Event sent')",
        "@test.command()\n@click.argument('server_address')\n@click.argument('graph_id')\ndef websocket(server_address: str, graph_id: str):\n    \"\"\"\n    Tests the websocket connection.\n    \"\"\"\n    import asyncio\n    import websockets.asyncio.client\n    from backend.server.ws_api import ExecutionSubscription, Methods, WsMessage\n\n    async def send_message(server_address: str):\n        uri = f'ws://{server_address}'\n        async with websockets.asyncio.client.connect(uri) as websocket:\n            try:\n                msg = WsMessage(method=Methods.SUBSCRIBE, data=ExecutionSubscription(graph_id=graph_id).model_dump()).model_dump_json()\n                await websocket.send(msg)\n                print(f'Sending: {msg}')\n                while True:\n                    response = await websocket.recv()\n                    print(f'Response from server: {response}')\n            except InterruptedError:\n                exit(0)\n    asyncio.run(send_message(server_address))\n    print('Testing WS')",
        "'\\n    Tests the websocket connection.\\n    '",
        "import asyncio",
        "import websockets.asyncio.client",
        "from backend.server.ws_api import ExecutionSubscription, Methods, WsMessage",
        "async def send_message(server_address: str):\n    uri = f'ws://{server_address}'\n    async with websockets.asyncio.client.connect(uri) as websocket:\n        try:\n            msg = WsMessage(method=Methods.SUBSCRIBE, data=ExecutionSubscription(graph_id=graph_id).model_dump()).model_dump_json()\n            await websocket.send(msg)\n            print(f'Sending: {msg}')\n            while True:\n                response = await websocket.recv()\n                print(f'Response from server: {response}')\n        except InterruptedError:\n            exit(0)",
        "uri = f'ws://{server_address}'",
        "async with websockets.asyncio.client.connect(uri) as websocket:\n    try:\n        msg = WsMessage(method=Methods.SUBSCRIBE, data=ExecutionSubscription(graph_id=graph_id).model_dump()).model_dump_json()\n        await websocket.send(msg)\n        print(f'Sending: {msg}')\n        while True:\n            response = await websocket.recv()\n            print(f'Response from server: {response}')\n    except InterruptedError:\n        exit(0)",
        "try:\n    msg = WsMessage(method=Methods.SUBSCRIBE, data=ExecutionSubscription(graph_id=graph_id).model_dump()).model_dump_json()\n    await websocket.send(msg)\n    print(f'Sending: {msg}')\n    while True:\n        response = await websocket.recv()\n        print(f'Response from server: {response}')\nexcept InterruptedError:\n    exit(0)",
        "msg = WsMessage(method=Methods.SUBSCRIBE, data=ExecutionSubscription(graph_id=graph_id).model_dump()).model_dump_json()",
        "await websocket.send(msg)",
        "print(f'Sending: {msg}')"
      ]
    },
    {
      "id": "26",
      "type": "block",
      "statements": [
        "True"
      ]
    },
    {
      "id": "27",
      "type": "block",
      "statements": [
        "response = await websocket.recv()",
        "print(f'Response from server: {response}')"
      ]
    },
    {
      "id": "28",
      "type": "block",
      "statements": [
        "exit(0)",
        "asyncio.run(send_message(server_address))",
        "print('Testing WS')",
        "main.add_command(test)",
        "__name__ Eq '__main__'"
      ]
    },
    {
      "id": "29",
      "type": "block",
      "statements": [
        "main()"
      ]
    },
    {
      "id": "30",
      "type": "block",
      "statements": []
    },
    {
      "id": "31",
      "type": "block",
      "statements": []
    }
  ],
  "edges": [
    {
      "source": "2",
      "target": "3",
      "type": "true"
    },
    {
      "source": "2",
      "target": "4",
      "type": "false"
    },
    {
      "source": "4",
      "target": "5",
      "type": "next"
    },
    {
      "source": "7",
      "target": "8",
      "type": "true"
    },
    {
      "source": "7",
      "target": "9",
      "type": "false"
    },
    {
      "source": "8",
      "target": "10",
      "type": "next"
    },
    {
      "source": "9",
      "target": "11",
      "type": "true"
    },
    {
      "source": "9",
      "target": "12",
      "type": "false"
    },
    {
      "source": "10",
      "target": "14",
      "type": "true"
    },
    {
      "source": "10",
      "target": "15",
      "type": "false"
    },
    {
      "source": "11",
      "target": "13",
      "type": "next"
    },
    {
      "source": "12",
      "target": "13",
      "type": "next"
    },
    {
      "source": "13",
      "target": "10",
      "type": "next"
    },
    {
      "source": "15",
      "target": "16",
      "type": "next"
    },
    {
      "source": "16",
      "target": "17",
      "type": "next"
    },
    {
      "source": "17",
      "target": "18",
      "type": "true"
    },
    {
      "source": "17",
      "target": "19",
      "type": "false"
    },
    {
      "source": "18",
      "target": "17",
      "type": "next"
    },
    {
      "source": "19",
      "target": "20",
      "type": "true"
    },
    {
      "source": "19",
      "target": "21",
      "type": "false"
    },
    {
      "source": "20",
      "target": "22",
      "type": "next"
    },
    {
      "source": "21",
      "target": "22",
      "type": "next"
    },
    {
      "source": "22",
      "target": "23",
      "type": "true"
    },
    {
      "source": "22",
      "target": "24",
      "type": "false"
    },
    {
      "source": "23",
      "target": "25",
      "type": "next"
    },
    {
      "source": "24",
      "target": "25",
      "type": "next"
    },
    {
      "source": "25",
      "target": "26",
      "type": "next"
    },
    {
      "source": "26",
      "target": "27",
      "type": "true"
    },
    {
      "source": "26",
      "target": "28",
      "type": "false"
    },
    {
      "source": "27",
      "target": "26",
      "type": "next"
    },
    {
      "source": "28",
      "target": "29",
      "type": "true"
    },
    {
      "source": "28",
      "target": "30",
      "type": "false"
    },
    {
      "source": "29",
      "target": "31",
      "type": "next"
    },
    {
      "source": "30",
      "target": "31",
      "type": "next"
    }
  ]
}