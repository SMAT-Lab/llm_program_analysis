{
  "nodes": [
    {
      "id": "1",
      "type": "block",
      "statements": [
        "from datetime import datetime",
        "from typing import Any, List",
        "from backend.blocks.exa._auth import ExaCredentials, ExaCredentialsField, ExaCredentialsInput",
        "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema",
        "from backend.data.model import SchemaField",
        "from backend.util.request import requests",
        "from .helpers import ContentSettings",
        "class ExaFindSimilarBlock(Block):\n\n    class Input(BlockSchema):\n        credentials: ExaCredentialsInput = ExaCredentialsField()\n        url: str = SchemaField(description='The url for which you would like to find similar links')\n        number_of_results: int = SchemaField(description='Number of results to return', default=10, advanced=True)\n        include_domains: List[str] = SchemaField(description='Domains to include in search', default=[], advanced=True)\n        exclude_domains: List[str] = SchemaField(description='Domains to exclude from search', default=[], advanced=True)\n        start_crawl_date: datetime = SchemaField(description='Start date for crawled content')\n        end_crawl_date: datetime = SchemaField(description='End date for crawled content')\n        start_published_date: datetime = SchemaField(description='Start date for published content')\n        end_published_date: datetime = SchemaField(description='End date for published content')\n        include_text: List[str] = SchemaField(description='Text patterns to include (max 1 string, up to 5 words)', default=[], advanced=True)\n        exclude_text: List[str] = SchemaField(description='Text patterns to exclude (max 1 string, up to 5 words)', default=[], advanced=True)\n        contents: ContentSettings = SchemaField(description='Content retrieval settings', default=ContentSettings(), advanced=True)\n\n    class Output(BlockSchema):\n        results: List[Any] = SchemaField(description='List of similar documents with title, URL, published date, author, and score', default=[])\n\n    def __init__(self):\n        super().__init__(id='5e7315d1-af61-4a0c-9350-7c868fa7438a', description=\"Finds similar links using Exa's findSimilar API\", categories={BlockCategory.SEARCH}, input_schema=ExaFindSimilarBlock.Input, output_schema=ExaFindSimilarBlock.Output)\n\n    def run(self, input_data: Input, *, credentials: ExaCredentials, **kwargs) -> BlockOutput:\n        url = 'https://api.exa.ai/findSimilar'\n        headers = {'Content-Type': 'application/json', 'x-api-key': credentials.api_key.get_secret_value()}\n        payload = {'url': input_data.url, 'numResults': input_data.number_of_results, 'contents': input_data.contents.dict()}\n        optional_field_mapping = {'include_domains': 'includeDomains', 'exclude_domains': 'excludeDomains', 'include_text': 'includeText', 'exclude_text': 'excludeText'}\n        for (input_field, api_field) in optional_field_mapping.items():\n            value = getattr(input_data, input_field)\n            if value:\n                payload[api_field] = value\n        date_field_mapping = {'start_crawl_date': 'startCrawlDate', 'end_crawl_date': 'endCrawlDate', 'start_published_date': 'startPublishedDate', 'end_published_date': 'endPublishedDate'}\n        for (input_field, api_field) in date_field_mapping.items():\n            value = getattr(input_data, input_field, None)\n            if value:\n                payload[api_field] = value.strftime('%Y-%m-%dT%H:%M:%S.000Z')\n        try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n            data = response.json()\n            yield ('results', data.get('results', []))\n        except Exception as e:\n            yield ('error', str(e))\n            yield ('results', [])",
        "class Input(BlockSchema):\n    credentials: ExaCredentialsInput = ExaCredentialsField()\n    url: str = SchemaField(description='The url for which you would like to find similar links')\n    number_of_results: int = SchemaField(description='Number of results to return', default=10, advanced=True)\n    include_domains: List[str] = SchemaField(description='Domains to include in search', default=[], advanced=True)\n    exclude_domains: List[str] = SchemaField(description='Domains to exclude from search', default=[], advanced=True)\n    start_crawl_date: datetime = SchemaField(description='Start date for crawled content')\n    end_crawl_date: datetime = SchemaField(description='End date for crawled content')\n    start_published_date: datetime = SchemaField(description='Start date for published content')\n    end_published_date: datetime = SchemaField(description='End date for published content')\n    include_text: List[str] = SchemaField(description='Text patterns to include (max 1 string, up to 5 words)', default=[], advanced=True)\n    exclude_text: List[str] = SchemaField(description='Text patterns to exclude (max 1 string, up to 5 words)', default=[], advanced=True)\n    contents: ContentSettings = SchemaField(description='Content retrieval settings', default=ContentSettings(), advanced=True)",
        "credentials: ExaCredentialsInput = ExaCredentialsField()",
        "url: str = SchemaField(description='The url for which you would like to find similar links')",
        "number_of_results: int = SchemaField(description='Number of results to return', default=10, advanced=True)",
        "include_domains: List[str] = SchemaField(description='Domains to include in search', default=[], advanced=True)",
        "exclude_domains: List[str] = SchemaField(description='Domains to exclude from search', default=[], advanced=True)",
        "start_crawl_date: datetime = SchemaField(description='Start date for crawled content')",
        "end_crawl_date: datetime = SchemaField(description='End date for crawled content')",
        "start_published_date: datetime = SchemaField(description='Start date for published content')",
        "end_published_date: datetime = SchemaField(description='End date for published content')",
        "include_text: List[str] = SchemaField(description='Text patterns to include (max 1 string, up to 5 words)', default=[], advanced=True)",
        "exclude_text: List[str] = SchemaField(description='Text patterns to exclude (max 1 string, up to 5 words)', default=[], advanced=True)",
        "contents: ContentSettings = SchemaField(description='Content retrieval settings', default=ContentSettings(), advanced=True)",
        "class Output(BlockSchema):\n    results: List[Any] = SchemaField(description='List of similar documents with title, URL, published date, author, and score', default=[])",
        "results: List[Any] = SchemaField(description='List of similar documents with title, URL, published date, author, and score', default=[])",
        "def __init__(self):\n    super().__init__(id='5e7315d1-af61-4a0c-9350-7c868fa7438a', description=\"Finds similar links using Exa's findSimilar API\", categories={BlockCategory.SEARCH}, input_schema=ExaFindSimilarBlock.Input, output_schema=ExaFindSimilarBlock.Output)",
        "super().__init__()",
        "def run(self, input_data: Input, *, credentials: ExaCredentials, **kwargs) -> BlockOutput:\n    url = 'https://api.exa.ai/findSimilar'\n    headers = {'Content-Type': 'application/json', 'x-api-key': credentials.api_key.get_secret_value()}\n    payload = {'url': input_data.url, 'numResults': input_data.number_of_results, 'contents': input_data.contents.dict()}\n    optional_field_mapping = {'include_domains': 'includeDomains', 'exclude_domains': 'excludeDomains', 'include_text': 'includeText', 'exclude_text': 'excludeText'}\n    for (input_field, api_field) in optional_field_mapping.items():\n        value = getattr(input_data, input_field)\n        if value:\n            payload[api_field] = value\n    date_field_mapping = {'start_crawl_date': 'startCrawlDate', 'end_crawl_date': 'endCrawlDate', 'start_published_date': 'startPublishedDate', 'end_published_date': 'endPublishedDate'}\n    for (input_field, api_field) in date_field_mapping.items():\n        value = getattr(input_data, input_field, None)\n        if value:\n            payload[api_field] = value.strftime('%Y-%m-%dT%H:%M:%S.000Z')\n    try:\n        response = requests.post(url, headers=headers, json=payload)\n        response.raise_for_status()\n        data = response.json()\n        yield ('results', data.get('results', []))\n    except Exception as e:\n        yield ('error', str(e))\n        yield ('results', [])",
        "url = 'https://api.exa.ai/findSimilar'",
        "headers = {'Content-Type': 'application/json', 'x-api-key': credentials.api_key.get_secret_value()}",
        "payload = {'url': input_data.url, 'numResults': input_data.number_of_results, 'contents': input_data.contents.dict()}",
        "optional_field_mapping = {'include_domains': 'includeDomains', 'exclude_domains': 'excludeDomains', 'include_text': 'includeText', 'exclude_text': 'excludeText'}"
      ]
    },
    {
      "id": "2",
      "type": "block",
      "statements": [
        "(input_field, api_field)",
        "optional_field_mapping.items()"
      ]
    },
    {
      "id": "3",
      "type": "block",
      "statements": [
        "value = getattr(input_data, input_field)",
        "value"
      ]
    },
    {
      "id": "4",
      "type": "block",
      "statements": [
        "date_field_mapping = {'start_crawl_date': 'startCrawlDate', 'end_crawl_date': 'endCrawlDate', 'start_published_date': 'startPublishedDate', 'end_published_date': 'endPublishedDate'}"
      ]
    },
    {
      "id": "5",
      "type": "block",
      "statements": [
        "payload[api_field] = value"
      ]
    },
    {
      "id": "6",
      "type": "block",
      "statements": []
    },
    {
      "id": "7",
      "type": "block",
      "statements": []
    },
    {
      "id": "8",
      "type": "block",
      "statements": [
        "(input_field, api_field)",
        "date_field_mapping.items()"
      ]
    },
    {
      "id": "9",
      "type": "block",
      "statements": [
        "value = getattr(input_data, input_field, None)",
        "value"
      ]
    },
    {
      "id": "10",
      "type": "block",
      "statements": [
        "try:\n    response = requests.post(url, headers=headers, json=payload)\n    response.raise_for_status()\n    data = response.json()\n    yield ('results', data.get('results', []))\nexcept Exception as e:\n    yield ('error', str(e))\n    yield ('results', [])",
        "response = requests.post(url, headers=headers, json=payload)",
        "response.raise_for_status()",
        "data = response.json()",
        "(yield ('results', data.get('results', [])))",
        "(yield ('error', str(e)))",
        "(yield ('results', []))"
      ]
    },
    {
      "id": "11",
      "type": "block",
      "statements": [
        "payload[api_field] = value.strftime('%Y-%m-%dT%H:%M:%S.000Z')"
      ]
    },
    {
      "id": "12",
      "type": "block",
      "statements": []
    },
    {
      "id": "13",
      "type": "block",
      "statements": []
    }
  ],
  "edges": [
    {
      "source": "1",
      "target": "2",
      "type": "next"
    },
    {
      "source": "2",
      "target": "3",
      "type": "true"
    },
    {
      "source": "2",
      "target": "4",
      "type": "false"
    },
    {
      "source": "3",
      "target": "5",
      "type": "true"
    },
    {
      "source": "3",
      "target": "6",
      "type": "false"
    },
    {
      "source": "4",
      "target": "8",
      "type": "next"
    },
    {
      "source": "5",
      "target": "7",
      "type": "next"
    },
    {
      "source": "6",
      "target": "7",
      "type": "next"
    },
    {
      "source": "7",
      "target": "2",
      "type": "next"
    },
    {
      "source": "8",
      "target": "9",
      "type": "true"
    },
    {
      "source": "8",
      "target": "10",
      "type": "false"
    },
    {
      "source": "9",
      "target": "11",
      "type": "true"
    },
    {
      "source": "9",
      "target": "12",
      "type": "false"
    },
    {
      "source": "11",
      "target": "13",
      "type": "next"
    },
    {
      "source": "12",
      "target": "13",
      "type": "next"
    },
    {
      "source": "13",
      "target": "8",
      "type": "next"
    }
  ]
}