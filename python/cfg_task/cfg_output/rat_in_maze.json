{
  "nodes": [
    {
      "id": "1",
      "type": "block",
      "statements": [
        "from __future__ import annotations",
        "def solve_maze(maze: list[list[int]], source_row: int, source_column: int, destination_row: int, destination_column: int) -> list[list[int]]:\n    \"\"\"\n    This method solves the \"rat in maze\" problem.\n    Parameters :\n        - maze: A two dimensional matrix of zeros and ones.\n        - source_row: The row index of the starting point.\n        - source_column: The column index of the starting point.\n        - destination_row: The row index of the destination point.\n        - destination_column: The column index of the destination point.\n    Returns:\n        - solution: A 2D matrix representing the solution path if it exists.\n    Raises:\n        - ValueError: If no solution exists or if the source or\n            destination coordinates are invalid.\n    Description:\n        This method navigates through a maze represented as an n by n matrix,\n        starting from a specified source cell and\n        aiming to reach a destination cell.\n        The maze consists of walls (1s) and open paths (0s).\n        By providing custom row and column values, the source and destination\n        cells can be adjusted.\n    >>> maze = [[0, 1, 0, 1, 1],\n    ...         [0, 0, 0, 0, 0],\n    ...         [1, 0, 1, 0, 1],\n    ...         [0, 0, 1, 0, 0],\n    ...         [1, 0, 0, 1, 0]]\n    >>> solve_maze(maze,0,0,len(maze)-1,len(maze)-1)    # doctest: +NORMALIZE_WHITESPACE\n    [[0, 1, 1, 1, 1],\n    [0, 0, 0, 0, 1],\n    [1, 1, 1, 0, 1],\n    [1, 1, 1, 0, 0],\n    [1, 1, 1, 1, 0]]\n\n    Note:\n        In the output maze, the zeros (0s) represent one of the possible\n        paths from the source to the destination.\n\n    >>> maze = [[0, 1, 0, 1, 1],\n    ...         [0, 0, 0, 0, 0],\n    ...         [0, 0, 0, 0, 1],\n    ...         [0, 0, 0, 0, 0],\n    ...         [0, 0, 0, 0, 0]]\n    >>> solve_maze(maze,0,0,len(maze)-1,len(maze)-1)    # doctest: +NORMALIZE_WHITESPACE\n    [[0, 1, 1, 1, 1],\n    [0, 1, 1, 1, 1],\n    [0, 1, 1, 1, 1],\n    [0, 1, 1, 1, 1],\n    [0, 0, 0, 0, 0]]\n\n    >>> maze = [[0, 0, 0],\n    ...         [0, 1, 0],\n    ...         [1, 0, 0]]\n    >>> solve_maze(maze,0,0,len(maze)-1,len(maze)-1)    # doctest: +NORMALIZE_WHITESPACE\n    [[0, 0, 0],\n    [1, 1, 0],\n    [1, 1, 0]]\n\n    >>> maze = [[1, 0, 0],\n    ...         [0, 1, 0],\n    ...         [1, 0, 0]]\n    >>> solve_maze(maze,0,1,len(maze)-1,len(maze)-1)    # doctest: +NORMALIZE_WHITESPACE\n    [[1, 0, 0],\n    [1, 1, 0],\n    [1, 1, 0]]\n\n    >>> maze = [[1, 1, 0, 0, 1, 0, 0, 1],\n    ...         [1, 0, 1, 0, 0, 1, 1, 1],\n    ...         [0, 1, 0, 1, 0, 0, 1, 0],\n    ...         [1, 1, 1, 0, 0, 1, 0, 1],\n    ...         [0, 1, 0, 0, 1, 0, 1, 1],\n    ...         [0, 0, 0, 1, 1, 1, 0, 1],\n    ...         [0, 1, 0, 1, 0, 1, 1, 1],\n    ...         [1, 1, 0, 0, 0, 0, 0, 1]]\n    >>> solve_maze(maze,0,2,len(maze)-1,2)  # doctest: +NORMALIZE_WHITESPACE\n    [[1, 1, 0, 0, 1, 1, 1, 1],\n    [1, 1, 1, 0, 0, 1, 1, 1],\n    [1, 1, 1, 1, 0, 1, 1, 1],\n    [1, 1, 1, 0, 0, 1, 1, 1],\n    [1, 1, 0, 0, 1, 1, 1, 1],\n    [1, 1, 0, 1, 1, 1, 1, 1],\n    [1, 1, 0, 1, 1, 1, 1, 1],\n    [1, 1, 0, 1, 1, 1, 1, 1]]\n    >>> maze = [[1, 0, 0],\n    ...         [0, 1, 1],\n    ...         [1, 0, 1]]\n    >>> solve_maze(maze,0,1,len(maze)-1,len(maze)-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: No solution exists!\n\n    >>> maze = [[0, 0],\n    ...         [1, 1]]\n    >>> solve_maze(maze,0,0,len(maze)-1,len(maze)-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: No solution exists!\n\n    >>> maze = [[0, 1],\n    ...         [1, 0]]\n    >>> solve_maze(maze,2,0,len(maze)-1,len(maze)-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Invalid source or destination coordinates\n\n    >>> maze = [[1, 0, 0],\n    ...         [0, 1, 0],\n    ...         [1, 0, 0]]\n    >>> solve_maze(maze,0,1,len(maze),len(maze)-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Invalid source or destination coordinates\n    \"\"\"\n    size = len(maze)\n    if not (0 <= source_row <= size - 1 and 0 <= source_column <= size - 1) or not (0 <= destination_row <= size - 1 and 0 <= destination_column <= size - 1):\n        raise ValueError('Invalid source or destination coordinates')\n    solutions = [[1 for _ in range(size)] for _ in range(size)]\n    solved = run_maze(maze, source_row, source_column, destination_row, destination_column, solutions)\n    if solved:\n        return solutions\n    else:\n        raise ValueError('No solution exists!')",
        "'\\n    This method solves the \"rat in maze\" problem.\\n    Parameters :\\n        - maze: A two dimensional matrix of zeros and ones.\\n        - source_row: The row index of the starting point.\\n        - source_column: The column index of the starting point.\\n        - destination_row: The row index of the destination point.\\n        - destination_column: The column index of the destination point.\\n    Returns:\\n        - solution: A 2D matrix representing the solution path if it exists.\\n    Raises:\\n        - ValueError: If no solution exists or if the source or\\n            destination coordinates are invalid.\\n    Description:\\n        This method navigates through a maze represented as an n by n matrix,\\n        starting from a specified source cell and\\n        aiming to reach a destination cell.\\n        The maze consists of walls (1s) and open paths (0s).\\n        By providing custom row and column values, the source and destination\\n        cells can be adjusted.\\n    >>> maze = [[0, 1, 0, 1, 1],\\n    ...         [0, 0, 0, 0, 0],\\n    ...         [1, 0, 1, 0, 1],\\n    ...         [0, 0, 1, 0, 0],\\n    ...         [1, 0, 0, 1, 0]]\\n    >>> solve_maze(maze,0,0,len(maze)-1,len(maze)-1)    # doctest: +NORMALIZE_WHITESPACE\\n    [[0, 1, 1, 1, 1],\\n    [0, 0, 0, 0, 1],\\n    [1, 1, 1, 0, 1],\\n    [1, 1, 1, 0, 0],\\n    [1, 1, 1, 1, 0]]\\n\\n    Note:\\n        In the output maze, the zeros (0s) represent one of the possible\\n        paths from the source to the destination.\\n\\n    >>> maze = [[0, 1, 0, 1, 1],\\n    ...         [0, 0, 0, 0, 0],\\n    ...         [0, 0, 0, 0, 1],\\n    ...         [0, 0, 0, 0, 0],\\n    ...         [0, 0, 0, 0, 0]]\\n    >>> solve_maze(maze,0,0,len(maze)-1,len(maze)-1)    # doctest: +NORMALIZE_WHITESPACE\\n    [[0, 1, 1, 1, 1],\\n    [0, 1, 1, 1, 1],\\n    [0, 1, 1, 1, 1],\\n    [0, 1, 1, 1, 1],\\n    [0, 0, 0, 0, 0]]\\n\\n    >>> maze = [[0, 0, 0],\\n    ...         [0, 1, 0],\\n    ...         [1, 0, 0]]\\n    >>> solve_maze(maze,0,0,len(maze)-1,len(maze)-1)    # doctest: +NORMALIZE_WHITESPACE\\n    [[0, 0, 0],\\n    [1, 1, 0],\\n    [1, 1, 0]]\\n\\n    >>> maze = [[1, 0, 0],\\n    ...         [0, 1, 0],\\n    ...         [1, 0, 0]]\\n    >>> solve_maze(maze,0,1,len(maze)-1,len(maze)-1)    # doctest: +NORMALIZE_WHITESPACE\\n    [[1, 0, 0],\\n    [1, 1, 0],\\n    [1, 1, 0]]\\n\\n    >>> maze = [[1, 1, 0, 0, 1, 0, 0, 1],\\n    ...         [1, 0, 1, 0, 0, 1, 1, 1],\\n    ...         [0, 1, 0, 1, 0, 0, 1, 0],\\n    ...         [1, 1, 1, 0, 0, 1, 0, 1],\\n    ...         [0, 1, 0, 0, 1, 0, 1, 1],\\n    ...         [0, 0, 0, 1, 1, 1, 0, 1],\\n    ...         [0, 1, 0, 1, 0, 1, 1, 1],\\n    ...         [1, 1, 0, 0, 0, 0, 0, 1]]\\n    >>> solve_maze(maze,0,2,len(maze)-1,2)  # doctest: +NORMALIZE_WHITESPACE\\n    [[1, 1, 0, 0, 1, 1, 1, 1],\\n    [1, 1, 1, 0, 0, 1, 1, 1],\\n    [1, 1, 1, 1, 0, 1, 1, 1],\\n    [1, 1, 1, 0, 0, 1, 1, 1],\\n    [1, 1, 0, 0, 1, 1, 1, 1],\\n    [1, 1, 0, 1, 1, 1, 1, 1],\\n    [1, 1, 0, 1, 1, 1, 1, 1],\\n    [1, 1, 0, 1, 1, 1, 1, 1]]\\n    >>> maze = [[1, 0, 0],\\n    ...         [0, 1, 1],\\n    ...         [1, 0, 1]]\\n    >>> solve_maze(maze,0,1,len(maze)-1,len(maze)-1)\\n    Traceback (most recent call last):\\n        ...\\n    ValueError: No solution exists!\\n\\n    >>> maze = [[0, 0],\\n    ...         [1, 1]]\\n    >>> solve_maze(maze,0,0,len(maze)-1,len(maze)-1)\\n    Traceback (most recent call last):\\n        ...\\n    ValueError: No solution exists!\\n\\n    >>> maze = [[0, 1],\\n    ...         [1, 0]]\\n    >>> solve_maze(maze,2,0,len(maze)-1,len(maze)-1)\\n    Traceback (most recent call last):\\n        ...\\n    ValueError: Invalid source or destination coordinates\\n\\n    >>> maze = [[1, 0, 0],\\n    ...         [0, 1, 0],\\n    ...         [1, 0, 0]]\\n    >>> solve_maze(maze,0,1,len(maze),len(maze)-1)\\n    Traceback (most recent call last):\\n        ...\\n    ValueError: Invalid source or destination coordinates\\n    '",
        "size = len(maze)",
        "not (0 <= source_row <= size - 1 and 0 <= source_column <= size - 1) or not (0 <= destination_row <= size - 1 and 0 <= destination_column <= size - 1)"
      ]
    },
    {
      "id": "2",
      "type": "block",
      "statements": [
        "raise ValueError('Invalid source or destination coordinates')"
      ]
    },
    {
      "id": "3",
      "type": "block",
      "statements": []
    },
    {
      "id": "4",
      "type": "block",
      "statements": [
        "solutions = [[1 for _ in range(size)] for _ in range(size)]",
        "solved = run_maze(maze, source_row, source_column, destination_row, destination_column, solutions)",
        "solved"
      ]
    },
    {
      "id": "5",
      "type": "block",
      "statements": [
        "return solutions"
      ]
    },
    {
      "id": "6",
      "type": "block",
      "statements": [
        "raise ValueError('No solution exists!')"
      ]
    },
    {
      "id": "7",
      "type": "block",
      "statements": [
        "def run_maze(maze: list[list[int]], i: int, j: int, destination_row: int, destination_column: int, solutions: list[list[int]]) -> bool:\n    \"\"\"\n    This method is recursive starting from (i, j) and going in one of four directions:\n    up, down, left, right.\n    If a path is found to destination it returns True otherwise it returns False.\n    Parameters\n        maze: A two dimensional matrix of zeros and ones.\n        i, j : coordinates of matrix\n        solutions: A two dimensional matrix of solutions.\n    Returns:\n        Boolean if path is found True, Otherwise False.\n    \"\"\"\n    size = len(maze)\n    if i == destination_row and j == destination_column and (maze[i][j] == 0):\n        solutions[i][j] = 0\n        return True\n    lower_flag = not i < 0 and (not j < 0)\n    upper_flag = i < size and j < size\n    if lower_flag and upper_flag:\n        block_flag = solutions[i][j] and (not maze[i][j])\n        if block_flag:\n            solutions[i][j] = 0\n            if run_maze(maze, i + 1, j, destination_row, destination_column, solutions) or run_maze(maze, i, j + 1, destination_row, destination_column, solutions) or run_maze(maze, i - 1, j, destination_row, destination_column, solutions) or run_maze(maze, i, j - 1, destination_row, destination_column, solutions):\n                return True\n            solutions[i][j] = 1\n            return False\n    return False",
        "'\\n    This method is recursive starting from (i, j) and going in one of four directions:\\n    up, down, left, right.\\n    If a path is found to destination it returns True otherwise it returns False.\\n    Parameters\\n        maze: A two dimensional matrix of zeros and ones.\\n        i, j : coordinates of matrix\\n        solutions: A two dimensional matrix of solutions.\\n    Returns:\\n        Boolean if path is found True, Otherwise False.\\n    '",
        "size = len(maze)",
        "i == destination_row and j == destination_column and (maze[i][j] == 0)"
      ]
    },
    {
      "id": "8",
      "type": "block",
      "statements": [
        "solutions[i][j] = 0",
        "return True"
      ]
    },
    {
      "id": "9",
      "type": "block",
      "statements": []
    },
    {
      "id": "10",
      "type": "block",
      "statements": [
        "lower_flag = not i < 0 and (not j < 0)",
        "upper_flag = i < size and j < size",
        "lower_flag and upper_flag"
      ]
    },
    {
      "id": "11",
      "type": "block",
      "statements": [
        "block_flag = solutions[i][j] and (not maze[i][j])",
        "block_flag"
      ]
    },
    {
      "id": "12",
      "type": "block",
      "statements": []
    },
    {
      "id": "13",
      "type": "block",
      "statements": [
        "return False"
      ]
    },
    {
      "id": "14",
      "type": "block",
      "statements": [
        "solutions[i][j] = 0",
        "run_maze(maze, i + 1, j, destination_row, destination_column, solutions) or run_maze(maze, i, j + 1, destination_row, destination_column, solutions) or run_maze(maze, i - 1, j, destination_row, destination_column, solutions) or run_maze(maze, i, j - 1, destination_row, destination_column, solutions)"
      ]
    },
    {
      "id": "15",
      "type": "block",
      "statements": []
    },
    {
      "id": "16",
      "type": "block",
      "statements": []
    },
    {
      "id": "17",
      "type": "block",
      "statements": [
        "return True"
      ]
    },
    {
      "id": "18",
      "type": "block",
      "statements": []
    },
    {
      "id": "19",
      "type": "block",
      "statements": [
        "solutions[i][j] = 1",
        "return False"
      ]
    },
    {
      "id": "20",
      "type": "block",
      "statements": [
        "__name__ Eq '__main__'"
      ]
    },
    {
      "id": "21",
      "type": "block",
      "statements": [
        "import doctest",
        "doctest.testmod()"
      ]
    },
    {
      "id": "22",
      "type": "block",
      "statements": []
    },
    {
      "id": "23",
      "type": "block",
      "statements": []
    }
  ],
  "edges": [
    {
      "source": "1",
      "target": "2",
      "type": "true"
    },
    {
      "source": "1",
      "target": "3",
      "type": "false"
    },
    {
      "source": "2",
      "target": "4",
      "type": "next"
    },
    {
      "source": "3",
      "target": "4",
      "type": "next"
    },
    {
      "source": "4",
      "target": "5",
      "type": "true"
    },
    {
      "source": "4",
      "target": "6",
      "type": "false"
    },
    {
      "source": "6",
      "target": "7",
      "type": "next"
    },
    {
      "source": "7",
      "target": "8",
      "type": "true"
    },
    {
      "source": "7",
      "target": "9",
      "type": "false"
    },
    {
      "source": "9",
      "target": "10",
      "type": "next"
    },
    {
      "source": "10",
      "target": "11",
      "type": "true"
    },
    {
      "source": "10",
      "target": "12",
      "type": "false"
    },
    {
      "source": "11",
      "target": "14",
      "type": "true"
    },
    {
      "source": "11",
      "target": "15",
      "type": "false"
    },
    {
      "source": "12",
      "target": "13",
      "type": "next"
    },
    {
      "source": "14",
      "target": "17",
      "type": "true"
    },
    {
      "source": "14",
      "target": "18",
      "type": "false"
    },
    {
      "source": "15",
      "target": "16",
      "type": "next"
    },
    {
      "source": "16",
      "target": "13",
      "type": "next"
    },
    {
      "source": "18",
      "target": "19",
      "type": "next"
    },
    {
      "source": "20",
      "target": "21",
      "type": "true"
    },
    {
      "source": "20",
      "target": "22",
      "type": "false"
    },
    {
      "source": "21",
      "target": "23",
      "type": "next"
    },
    {
      "source": "22",
      "target": "23",
      "type": "next"
    }
  ]
}