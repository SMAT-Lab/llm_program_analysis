{
  "nodes": [
    {
      "id": "1",
      "type": "block",
      "statements": [
        "import io",
        "import logging",
        "from enum import Enum",
        "import replicate",
        "import replicate.exceptions",
        "import requests",
        "from replicate.helpers import FileOutput",
        "from backend.data.graph import Graph",
        "from backend.util.settings import Settings",
        "logger = logging.getLogger(__name__)",
        "class ImageSize(str, Enum):\n    LANDSCAPE = '1024x768'",
        "LANDSCAPE = '1024x768'",
        "class ImageStyle(str, Enum):\n    DIGITAL_ART = 'digital art'",
        "DIGITAL_ART = 'digital art'",
        "async def generate_agent_image(agent: Graph) -> io.BytesIO:\n    \"\"\"\n    Generate an image for an agent using Flux model via Replicate API.\n\n    Args:\n        agent (Graph): The agent to generate an image for\n\n    Returns:\n        io.BytesIO: The generated image as bytes\n    \"\"\"\n    try:\n        settings = Settings()\n        if not settings.secrets.replicate_api_key:\n            raise ValueError('Missing Replicate API key in settings')\n        prompt = f'Create a visually engaging app store thumbnail for the AI agent that highlights what it does in a clear and captivating way:\\n- **Name**: {agent.name}\\n- **Description**: {agent.description}\\nFocus on showcasing its core functionality with an appealing design.'\n        client = replicate.Client(api_token=settings.secrets.replicate_api_key)\n        input_data = {'prompt': prompt, 'width': 1024, 'height': 768, 'aspect_ratio': '4:3', 'output_format': 'jpg', 'output_quality': 90, 'num_inference_steps': 30, 'guidance': 3.5, 'negative_prompt': 'blurry, low quality, distorted, deformed', 'disable_safety_checker': True}\n        try:\n            output = client.run('black-forest-labs/flux-1.1-pro', input=input_data)\n            if isinstance(output, list) and output:\n                if isinstance(output[0], FileOutput):\n                    image_bytes = output[0].read()\n                else:\n                    result_url = output[0]\n                    response = requests.get(result_url)\n                    response.raise_for_status()\n                    image_bytes = response.content\n            elif isinstance(output, FileOutput):\n                image_bytes = output.read()\n            elif isinstance(output, str):\n                response = requests.get(output)\n                response.raise_for_status()\n                image_bytes = response.content\n            else:\n                raise RuntimeError('Unexpected output format from the model.')\n            return io.BytesIO(image_bytes)\n        except replicate.exceptions.ReplicateError as e:\n            if e.status == 401:\n                raise RuntimeError('Invalid Replicate API token') from e\n            raise RuntimeError(f'Replicate API error: {str(e)}') from e\n    except Exception as e:\n        logger.exception('Failed to generate agent image')\n        raise RuntimeError(f'Image generation failed: {str(e)}')",
        "'\\n    Generate an image for an agent using Flux model via Replicate API.\\n\\n    Args:\\n        agent (Graph): The agent to generate an image for\\n\\n    Returns:\\n        io.BytesIO: The generated image as bytes\\n    '",
        "try:\n    settings = Settings()\n    if not settings.secrets.replicate_api_key:\n        raise ValueError('Missing Replicate API key in settings')\n    prompt = f'Create a visually engaging app store thumbnail for the AI agent that highlights what it does in a clear and captivating way:\\n- **Name**: {agent.name}\\n- **Description**: {agent.description}\\nFocus on showcasing its core functionality with an appealing design.'\n    client = replicate.Client(api_token=settings.secrets.replicate_api_key)\n    input_data = {'prompt': prompt, 'width': 1024, 'height': 768, 'aspect_ratio': '4:3', 'output_format': 'jpg', 'output_quality': 90, 'num_inference_steps': 30, 'guidance': 3.5, 'negative_prompt': 'blurry, low quality, distorted, deformed', 'disable_safety_checker': True}\n    try:\n        output = client.run('black-forest-labs/flux-1.1-pro', input=input_data)\n        if isinstance(output, list) and output:\n            if isinstance(output[0], FileOutput):\n                image_bytes = output[0].read()\n            else:\n                result_url = output[0]\n                response = requests.get(result_url)\n                response.raise_for_status()\n                image_bytes = response.content\n        elif isinstance(output, FileOutput):\n            image_bytes = output.read()\n        elif isinstance(output, str):\n            response = requests.get(output)\n            response.raise_for_status()\n            image_bytes = response.content\n        else:\n            raise RuntimeError('Unexpected output format from the model.')\n        return io.BytesIO(image_bytes)\n    except replicate.exceptions.ReplicateError as e:\n        if e.status == 401:\n            raise RuntimeError('Invalid Replicate API token') from e\n        raise RuntimeError(f'Replicate API error: {str(e)}') from e\nexcept Exception as e:\n    logger.exception('Failed to generate agent image')\n    raise RuntimeError(f'Image generation failed: {str(e)}')",
        "settings = Settings()",
        "not settings.secrets.replicate_api_key"
      ]
    },
    {
      "id": "2",
      "type": "block",
      "statements": [
        "raise ValueError('Missing Replicate API key in settings')"
      ]
    },
    {
      "id": "3",
      "type": "block",
      "statements": []
    },
    {
      "id": "4",
      "type": "block",
      "statements": [
        "prompt = f'Create a visually engaging app store thumbnail for the AI agent that highlights what it does in a clear and captivating way:\\n- **Name**: {agent.name}\\n- **Description**: {agent.description}\\nFocus on showcasing its core functionality with an appealing design.'",
        "client = replicate.Client(api_token=settings.secrets.replicate_api_key)",
        "input_data = {'prompt': prompt, 'width': 1024, 'height': 768, 'aspect_ratio': '4:3', 'output_format': 'jpg', 'output_quality': 90, 'num_inference_steps': 30, 'guidance': 3.5, 'negative_prompt': 'blurry, low quality, distorted, deformed', 'disable_safety_checker': True}",
        "try:\n    output = client.run('black-forest-labs/flux-1.1-pro', input=input_data)\n    if isinstance(output, list) and output:\n        if isinstance(output[0], FileOutput):\n            image_bytes = output[0].read()\n        else:\n            result_url = output[0]\n            response = requests.get(result_url)\n            response.raise_for_status()\n            image_bytes = response.content\n    elif isinstance(output, FileOutput):\n        image_bytes = output.read()\n    elif isinstance(output, str):\n        response = requests.get(output)\n        response.raise_for_status()\n        image_bytes = response.content\n    else:\n        raise RuntimeError('Unexpected output format from the model.')\n    return io.BytesIO(image_bytes)\nexcept replicate.exceptions.ReplicateError as e:\n    if e.status == 401:\n        raise RuntimeError('Invalid Replicate API token') from e\n    raise RuntimeError(f'Replicate API error: {str(e)}') from e",
        "output = client.run('black-forest-labs/flux-1.1-pro', input=input_data)",
        "isinstance(output, list) and output"
      ]
    },
    {
      "id": "5",
      "type": "block",
      "statements": [
        "isinstance(output[0], FileOutput)"
      ]
    },
    {
      "id": "6",
      "type": "block",
      "statements": [
        "isinstance(output, FileOutput)"
      ]
    },
    {
      "id": "7",
      "type": "block",
      "statements": [
        "return io.BytesIO(image_bytes)"
      ]
    },
    {
      "id": "8",
      "type": "block",
      "statements": [
        "image_bytes = output[0].read()"
      ]
    },
    {
      "id": "9",
      "type": "block",
      "statements": [
        "result_url = output[0]",
        "response = requests.get(result_url)",
        "response.raise_for_status()",
        "image_bytes = response.content"
      ]
    },
    {
      "id": "10",
      "type": "block",
      "statements": []
    },
    {
      "id": "11",
      "type": "block",
      "statements": [
        "image_bytes = output.read()"
      ]
    },
    {
      "id": "12",
      "type": "block",
      "statements": [
        "isinstance(output, str)"
      ]
    },
    {
      "id": "13",
      "type": "block",
      "statements": []
    },
    {
      "id": "14",
      "type": "block",
      "statements": [
        "response = requests.get(output)",
        "response.raise_for_status()",
        "image_bytes = response.content"
      ]
    },
    {
      "id": "15",
      "type": "block",
      "statements": [
        "raise RuntimeError('Unexpected output format from the model.')"
      ]
    },
    {
      "id": "16",
      "type": "block",
      "statements": []
    },
    {
      "id": "17",
      "type": "block",
      "statements": [
        "e.status Eq 401"
      ]
    },
    {
      "id": "18",
      "type": "block",
      "statements": [
        "raise RuntimeError('Invalid Replicate API token') from e"
      ]
    },
    {
      "id": "19",
      "type": "block",
      "statements": []
    },
    {
      "id": "20",
      "type": "block",
      "statements": [
        "raise RuntimeError(f'Replicate API error: {str(e)}') from e",
        "logger.exception('Failed to generate agent image')",
        "raise RuntimeError(f'Image generation failed: {str(e)}')"
      ]
    }
  ],
  "edges": [
    {
      "source": "1",
      "target": "2",
      "type": "true"
    },
    {
      "source": "1",
      "target": "3",
      "type": "false"
    },
    {
      "source": "2",
      "target": "4",
      "type": "next"
    },
    {
      "source": "3",
      "target": "4",
      "type": "next"
    },
    {
      "source": "4",
      "target": "5",
      "type": "true"
    },
    {
      "source": "4",
      "target": "6",
      "type": "false"
    },
    {
      "source": "5",
      "target": "8",
      "type": "true"
    },
    {
      "source": "5",
      "target": "9",
      "type": "false"
    },
    {
      "source": "6",
      "target": "11",
      "type": "true"
    },
    {
      "source": "6",
      "target": "12",
      "type": "false"
    },
    {
      "source": "8",
      "target": "10",
      "type": "next"
    },
    {
      "source": "9",
      "target": "10",
      "type": "next"
    },
    {
      "source": "10",
      "target": "7",
      "type": "next"
    },
    {
      "source": "11",
      "target": "13",
      "type": "next"
    },
    {
      "source": "12",
      "target": "14",
      "type": "true"
    },
    {
      "source": "12",
      "target": "15",
      "type": "false"
    },
    {
      "source": "13",
      "target": "7",
      "type": "next"
    },
    {
      "source": "14",
      "target": "16",
      "type": "next"
    },
    {
      "source": "15",
      "target": "16",
      "type": "next"
    },
    {
      "source": "16",
      "target": "13",
      "type": "next"
    },
    {
      "source": "17",
      "target": "18",
      "type": "true"
    },
    {
      "source": "17",
      "target": "19",
      "type": "false"
    },
    {
      "source": "18",
      "target": "20",
      "type": "next"
    },
    {
      "source": "19",
      "target": "20",
      "type": "next"
    }
  ]
}