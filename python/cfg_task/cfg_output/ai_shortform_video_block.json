{
  "nodes": [
    {
      "id": "1",
      "type": "block",
      "statements": [
        "import logging",
        "import time",
        "from enum import Enum",
        "from typing import Literal",
        "from pydantic import SecretStr",
        "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema",
        "from backend.data.model import APIKeyCredentials, CredentialsField, CredentialsMetaInput, SchemaField",
        "from backend.integrations.providers import ProviderName",
        "from backend.util.request import requests",
        "TEST_CREDENTIALS = APIKeyCredentials(id='01234567-89ab-cdef-0123-456789abcdef', provider='revid', api_key=SecretStr('mock-revid-api-key'), title='Mock Revid API key', expires_at=None)",
        "TEST_CREDENTIALS_INPUT = {'provider': TEST_CREDENTIALS.provider, 'id': TEST_CREDENTIALS.id, 'type': TEST_CREDENTIALS.type, 'title': TEST_CREDENTIALS.type}",
        "class AudioTrack(str, Enum):\n    OBSERVER = ('Observer',)\n    FUTURISTIC_BEAT = ('Futuristic Beat',)\n    SCIENCE_DOCUMENTARY = ('Science Documentary',)\n    HOTLINE = ('Hotline',)\n    BLADERUNNER_2049 = ('Bladerunner 2049',)\n    A_FUTURE = ('A Future',)\n    ELYSIAN_EMBERS = ('Elysian Embers',)\n    INSPIRING_CINEMATIC = ('Inspiring Cinematic',)\n    BLADERUNNER_REMIX = ('Bladerunner Remix',)\n    IZZAMUZZIC = ('Izzamuzzic',)\n    NAS = ('Nas',)\n    PARIS_ELSE = ('Paris - Else',)\n    SNOWFALL = ('Snowfall',)\n    BURLESQUE = ('Burlesque',)\n    CORNY_CANDY = ('Corny Candy',)\n    HIGHWAY_NOCTURNE = ('Highway Nocturne',)\n    I_DONT_THINK_SO = (\"I Don't Think So\",)\n    LOSING_YOUR_MARBLES = ('Losing Your Marbles',)\n    REFRESHER = ('Refresher',)\n    TOURIST = ('Tourist',)\n    TWIN_TYCHES = ('Twin Tyches',)\n\n    @property\n    def audio_url(self):\n        audio_urls = {AudioTrack.OBSERVER: 'https://cdn.tfrv.xyz/audio/observer.mp3', AudioTrack.FUTURISTIC_BEAT: 'https://cdn.tfrv.xyz/audio/_futuristic-beat.mp3', AudioTrack.SCIENCE_DOCUMENTARY: 'https://cdn.tfrv.xyz/audio/_science-documentary.mp3', AudioTrack.HOTLINE: 'https://cdn.tfrv.xyz/audio/_hotline.mp3', AudioTrack.BLADERUNNER_2049: 'https://cdn.tfrv.xyz/audio/_bladerunner-2049.mp3', AudioTrack.A_FUTURE: 'https://cdn.tfrv.xyz/audio/a-future.mp3', AudioTrack.ELYSIAN_EMBERS: 'https://cdn.tfrv.xyz/audio/elysian-embers.mp3', AudioTrack.INSPIRING_CINEMATIC: 'https://cdn.tfrv.xyz/audio/inspiring-cinematic-ambient.mp3', AudioTrack.BLADERUNNER_REMIX: 'https://cdn.tfrv.xyz/audio/bladerunner-remix.mp3', AudioTrack.IZZAMUZZIC: 'https://cdn.tfrv.xyz/audio/_izzamuzzic.mp3', AudioTrack.NAS: 'https://cdn.tfrv.xyz/audio/_nas.mp3', AudioTrack.PARIS_ELSE: 'https://cdn.tfrv.xyz/audio/_paris-else.mp3', AudioTrack.SNOWFALL: 'https://cdn.tfrv.xyz/audio/_snowfall.mp3', AudioTrack.BURLESQUE: 'https://cdn.tfrv.xyz/audio/burlesque.mp3', AudioTrack.CORNY_CANDY: 'https://cdn.tfrv.xyz/audio/corny-candy.mp3', AudioTrack.HIGHWAY_NOCTURNE: 'https://cdn.tfrv.xyz/audio/highway-nocturne.mp3', AudioTrack.I_DONT_THINK_SO: 'https://cdn.tfrv.xyz/audio/i-dont-think-so.mp3', AudioTrack.LOSING_YOUR_MARBLES: 'https://cdn.tfrv.xyz/audio/losing-your-marbles.mp3', AudioTrack.REFRESHER: 'https://cdn.tfrv.xyz/audio/refresher.mp3', AudioTrack.TOURIST: 'https://cdn.tfrv.xyz/audio/tourist.mp3', AudioTrack.TWIN_TYCHES: 'https://cdn.tfrv.xyz/audio/twin-tynches.mp3'}\n        return audio_urls[self]",
        "OBSERVER = ('Observer',)",
        "FUTURISTIC_BEAT = ('Futuristic Beat',)",
        "SCIENCE_DOCUMENTARY = ('Science Documentary',)",
        "HOTLINE = ('Hotline',)",
        "BLADERUNNER_2049 = ('Bladerunner 2049',)",
        "A_FUTURE = ('A Future',)",
        "ELYSIAN_EMBERS = ('Elysian Embers',)",
        "INSPIRING_CINEMATIC = ('Inspiring Cinematic',)",
        "BLADERUNNER_REMIX = ('Bladerunner Remix',)",
        "IZZAMUZZIC = ('Izzamuzzic',)",
        "NAS = ('Nas',)",
        "PARIS_ELSE = ('Paris - Else',)",
        "SNOWFALL = ('Snowfall',)",
        "BURLESQUE = ('Burlesque',)",
        "CORNY_CANDY = ('Corny Candy',)",
        "HIGHWAY_NOCTURNE = ('Highway Nocturne',)",
        "I_DONT_THINK_SO = (\"I Don't Think So\",)",
        "LOSING_YOUR_MARBLES = ('Losing Your Marbles',)",
        "REFRESHER = ('Refresher',)",
        "TOURIST = ('Tourist',)",
        "TWIN_TYCHES = ('Twin Tyches',)",
        "@property\ndef audio_url(self):\n    audio_urls = {AudioTrack.OBSERVER: 'https://cdn.tfrv.xyz/audio/observer.mp3', AudioTrack.FUTURISTIC_BEAT: 'https://cdn.tfrv.xyz/audio/_futuristic-beat.mp3', AudioTrack.SCIENCE_DOCUMENTARY: 'https://cdn.tfrv.xyz/audio/_science-documentary.mp3', AudioTrack.HOTLINE: 'https://cdn.tfrv.xyz/audio/_hotline.mp3', AudioTrack.BLADERUNNER_2049: 'https://cdn.tfrv.xyz/audio/_bladerunner-2049.mp3', AudioTrack.A_FUTURE: 'https://cdn.tfrv.xyz/audio/a-future.mp3', AudioTrack.ELYSIAN_EMBERS: 'https://cdn.tfrv.xyz/audio/elysian-embers.mp3', AudioTrack.INSPIRING_CINEMATIC: 'https://cdn.tfrv.xyz/audio/inspiring-cinematic-ambient.mp3', AudioTrack.BLADERUNNER_REMIX: 'https://cdn.tfrv.xyz/audio/bladerunner-remix.mp3', AudioTrack.IZZAMUZZIC: 'https://cdn.tfrv.xyz/audio/_izzamuzzic.mp3', AudioTrack.NAS: 'https://cdn.tfrv.xyz/audio/_nas.mp3', AudioTrack.PARIS_ELSE: 'https://cdn.tfrv.xyz/audio/_paris-else.mp3', AudioTrack.SNOWFALL: 'https://cdn.tfrv.xyz/audio/_snowfall.mp3', AudioTrack.BURLESQUE: 'https://cdn.tfrv.xyz/audio/burlesque.mp3', AudioTrack.CORNY_CANDY: 'https://cdn.tfrv.xyz/audio/corny-candy.mp3', AudioTrack.HIGHWAY_NOCTURNE: 'https://cdn.tfrv.xyz/audio/highway-nocturne.mp3', AudioTrack.I_DONT_THINK_SO: 'https://cdn.tfrv.xyz/audio/i-dont-think-so.mp3', AudioTrack.LOSING_YOUR_MARBLES: 'https://cdn.tfrv.xyz/audio/losing-your-marbles.mp3', AudioTrack.REFRESHER: 'https://cdn.tfrv.xyz/audio/refresher.mp3', AudioTrack.TOURIST: 'https://cdn.tfrv.xyz/audio/tourist.mp3', AudioTrack.TWIN_TYCHES: 'https://cdn.tfrv.xyz/audio/twin-tynches.mp3'}\n    return audio_urls[self]",
        "audio_urls = {AudioTrack.OBSERVER: 'https://cdn.tfrv.xyz/audio/observer.mp3', AudioTrack.FUTURISTIC_BEAT: 'https://cdn.tfrv.xyz/audio/_futuristic-beat.mp3', AudioTrack.SCIENCE_DOCUMENTARY: 'https://cdn.tfrv.xyz/audio/_science-documentary.mp3', AudioTrack.HOTLINE: 'https://cdn.tfrv.xyz/audio/_hotline.mp3', AudioTrack.BLADERUNNER_2049: 'https://cdn.tfrv.xyz/audio/_bladerunner-2049.mp3', AudioTrack.A_FUTURE: 'https://cdn.tfrv.xyz/audio/a-future.mp3', AudioTrack.ELYSIAN_EMBERS: 'https://cdn.tfrv.xyz/audio/elysian-embers.mp3', AudioTrack.INSPIRING_CINEMATIC: 'https://cdn.tfrv.xyz/audio/inspiring-cinematic-ambient.mp3', AudioTrack.BLADERUNNER_REMIX: 'https://cdn.tfrv.xyz/audio/bladerunner-remix.mp3', AudioTrack.IZZAMUZZIC: 'https://cdn.tfrv.xyz/audio/_izzamuzzic.mp3', AudioTrack.NAS: 'https://cdn.tfrv.xyz/audio/_nas.mp3', AudioTrack.PARIS_ELSE: 'https://cdn.tfrv.xyz/audio/_paris-else.mp3', AudioTrack.SNOWFALL: 'https://cdn.tfrv.xyz/audio/_snowfall.mp3', AudioTrack.BURLESQUE: 'https://cdn.tfrv.xyz/audio/burlesque.mp3', AudioTrack.CORNY_CANDY: 'https://cdn.tfrv.xyz/audio/corny-candy.mp3', AudioTrack.HIGHWAY_NOCTURNE: 'https://cdn.tfrv.xyz/audio/highway-nocturne.mp3', AudioTrack.I_DONT_THINK_SO: 'https://cdn.tfrv.xyz/audio/i-dont-think-so.mp3', AudioTrack.LOSING_YOUR_MARBLES: 'https://cdn.tfrv.xyz/audio/losing-your-marbles.mp3', AudioTrack.REFRESHER: 'https://cdn.tfrv.xyz/audio/refresher.mp3', AudioTrack.TOURIST: 'https://cdn.tfrv.xyz/audio/tourist.mp3', AudioTrack.TWIN_TYCHES: 'https://cdn.tfrv.xyz/audio/twin-tynches.mp3'}",
        "return audio_urls[self]"
      ]
    },
    {
      "id": "2",
      "type": "block",
      "statements": [
        "class GenerationPreset(str, Enum):\n    LEONARDO = ('Default',)\n    ANIME = ('Anime',)\n    REALISM = ('Realist',)\n    ILLUSTRATION = ('Illustration',)\n    SKETCH_COLOR = ('Sketch Color',)\n    SKETCH_BW = ('Sketch B&W',)\n    PIXAR = ('Pixar',)\n    INK = ('Japanese Ink',)\n    RENDER_3D = ('3D Render',)\n    LEGO = ('Lego',)\n    SCIFI = ('Sci-Fi',)\n    RECRO_CARTOON = ('Retro Cartoon',)\n    PIXEL_ART = ('Pixel Art',)\n    CREATIVE = ('Creative',)\n    PHOTOGRAPHY = ('Photography',)\n    RAYTRACED = ('Raytraced',)\n    ENVIRONMENT = ('Environment',)\n    FANTASY = ('Fantasy',)\n    ANIME_SR = ('Anime Realism',)\n    MOVIE = ('Movie',)\n    STYLIZED_ILLUSTRATION = ('Stylized Illustration',)\n    MANGA = ('Manga',)",
        "LEONARDO = ('Default',)",
        "ANIME = ('Anime',)",
        "REALISM = ('Realist',)",
        "ILLUSTRATION = ('Illustration',)",
        "SKETCH_COLOR = ('Sketch Color',)",
        "SKETCH_BW = ('Sketch B&W',)",
        "PIXAR = ('Pixar',)",
        "INK = ('Japanese Ink',)",
        "RENDER_3D = ('3D Render',)",
        "LEGO = ('Lego',)",
        "SCIFI = ('Sci-Fi',)",
        "RECRO_CARTOON = ('Retro Cartoon',)",
        "PIXEL_ART = ('Pixel Art',)",
        "CREATIVE = ('Creative',)",
        "PHOTOGRAPHY = ('Photography',)",
        "RAYTRACED = ('Raytraced',)",
        "ENVIRONMENT = ('Environment',)",
        "FANTASY = ('Fantasy',)",
        "ANIME_SR = ('Anime Realism',)",
        "MOVIE = ('Movie',)",
        "STYLIZED_ILLUSTRATION = ('Stylized Illustration',)",
        "MANGA = ('Manga',)",
        "class Voice(str, Enum):\n    LILY = 'Lily'\n    DANIEL = 'Daniel'\n    BRIAN = 'Brian'\n    JESSICA = 'Jessica'\n    CHARLOTTE = 'Charlotte'\n    CALLUM = 'Callum'\n\n    @property\n    def voice_id(self):\n        voice_id_map = {Voice.LILY: 'pFZP5JQG7iQjIQuC4Bku', Voice.DANIEL: 'onwK4e9ZLuTAKqWW03F9', Voice.BRIAN: 'nPczCjzI2devNBz1zQrb', Voice.JESSICA: 'cgSgspJ2msm6clMCkdW9', Voice.CHARLOTTE: 'XB0fDUnXU5powFXDhCwa', Voice.CALLUM: 'N2lVS1w4EtoT3dr4eOWO'}\n        return voice_id_map[self]\n\n    def __str__(self):\n        return self.value",
        "LILY = 'Lily'",
        "DANIEL = 'Daniel'",
        "BRIAN = 'Brian'",
        "JESSICA = 'Jessica'",
        "CHARLOTTE = 'Charlotte'",
        "CALLUM = 'Callum'",
        "@property\ndef voice_id(self):\n    voice_id_map = {Voice.LILY: 'pFZP5JQG7iQjIQuC4Bku', Voice.DANIEL: 'onwK4e9ZLuTAKqWW03F9', Voice.BRIAN: 'nPczCjzI2devNBz1zQrb', Voice.JESSICA: 'cgSgspJ2msm6clMCkdW9', Voice.CHARLOTTE: 'XB0fDUnXU5powFXDhCwa', Voice.CALLUM: 'N2lVS1w4EtoT3dr4eOWO'}\n    return voice_id_map[self]",
        "voice_id_map = {Voice.LILY: 'pFZP5JQG7iQjIQuC4Bku', Voice.DANIEL: 'onwK4e9ZLuTAKqWW03F9', Voice.BRIAN: 'nPczCjzI2devNBz1zQrb', Voice.JESSICA: 'cgSgspJ2msm6clMCkdW9', Voice.CHARLOTTE: 'XB0fDUnXU5powFXDhCwa', Voice.CALLUM: 'N2lVS1w4EtoT3dr4eOWO'}",
        "return voice_id_map[self]"
      ]
    },
    {
      "id": "3",
      "type": "block",
      "statements": [
        "def __str__(self):\n    return self.value",
        "return self.value"
      ]
    },
    {
      "id": "4",
      "type": "block",
      "statements": [
        "class VisualMediaType(str, Enum):\n    STOCK_VIDEOS = ('stockVideo',)\n    MOVING_AI_IMAGES = ('movingImage',)\n    AI_VIDEO = ('aiVideo',)",
        "STOCK_VIDEOS = ('stockVideo',)",
        "MOVING_AI_IMAGES = ('movingImage',)",
        "AI_VIDEO = ('aiVideo',)",
        "logger = logging.getLogger(__name__)",
        "class AIShortformVideoCreatorBlock(Block):\n\n    class Input(BlockSchema):\n        credentials: CredentialsMetaInput[Literal[ProviderName.REVID], Literal['api_key']] = CredentialsField(description='The revid.ai integration can be used with any API key with sufficient permissions for the blocks it is used on.')\n        script: str = SchemaField(description='1. Use short and punctuated sentences\\n\\n2. Use linebreaks to create a new clip\\n\\n3. Text outside of brackets is spoken by the AI, and [text between brackets] will be used to guide the visual generation. For example, [close-up of a cat] will show a close-up of a cat.', placeholder='[close-up of a cat] Meow!')\n        ratio: str = SchemaField(description='Aspect ratio of the video', default='9 / 16')\n        resolution: str = SchemaField(description='Resolution of the video', default='720p')\n        frame_rate: int = SchemaField(description='Frame rate of the video', default=60)\n        generation_preset: GenerationPreset = SchemaField(description='Generation preset for visual style - only effects AI generated visuals', default=GenerationPreset.LEONARDO, placeholder=GenerationPreset.LEONARDO)\n        background_music: AudioTrack = SchemaField(description='Background music track', default=AudioTrack.HIGHWAY_NOCTURNE, placeholder=AudioTrack.HIGHWAY_NOCTURNE)\n        voice: Voice = SchemaField(description='AI voice to use for narration', default=Voice.LILY, placeholder=Voice.LILY)\n        video_style: VisualMediaType = SchemaField(description='Type of visual media to use for the video', default=VisualMediaType.STOCK_VIDEOS, placeholder=VisualMediaType.STOCK_VIDEOS)\n\n    class Output(BlockSchema):\n        video_url: str = SchemaField(description='The URL of the created video')\n        error: str = SchemaField(description='Error message if the request failed')\n\n    def __init__(self):\n        super().__init__(id='361697fb-0c4f-4feb-aed3-8320c88c771b', description='Creates a shortform video using revid.ai', categories={BlockCategory.SOCIAL, BlockCategory.AI}, input_schema=AIShortformVideoCreatorBlock.Input, output_schema=AIShortformVideoCreatorBlock.Output, test_input={'credentials': TEST_CREDENTIALS_INPUT, 'script': '[close-up of a cat] Meow!', 'ratio': '9 / 16', 'resolution': '720p', 'frame_rate': 60, 'generation_preset': GenerationPreset.LEONARDO, 'background_music': AudioTrack.HIGHWAY_NOCTURNE, 'voice': Voice.LILY, 'video_style': VisualMediaType.STOCK_VIDEOS}, test_output=('video_url', 'https://example.com/video.mp4'), test_mock={'create_webhook': lambda : ('test_uuid', 'https://webhook.site/test_uuid'), 'create_video': lambda api_key, payload: {'pid': 'test_pid'}, 'wait_for_video': lambda api_key, pid, webhook_token, max_wait_time=1000: 'https://example.com/video.mp4'}, test_credentials=TEST_CREDENTIALS)\n\n    def create_webhook(self):\n        url = 'https://webhook.site/token'\n        headers = {'Accept': 'application/json', 'Content-Type': 'application/json'}\n        response = requests.post(url, headers=headers)\n        webhook_data = response.json()\n        return (webhook_data['uuid'], f\"https://webhook.site/{webhook_data['uuid']}\")\n\n    def create_video(self, api_key: SecretStr, payload: dict) -> dict:\n        url = 'https://www.revid.ai/api/public/v2/render'\n        headers = {'key': api_key.get_secret_value()}\n        response = requests.post(url, json=payload, headers=headers)\n        logger.debug(f'API Response Status Code: {response.status_code}, Content: {response.text}')\n        return response.json()\n\n    def check_video_status(self, api_key: SecretStr, pid: str) -> dict:\n        url = f'https://www.revid.ai/api/public/v2/status?pid={pid}'\n        headers = {'key': api_key.get_secret_value()}\n        response = requests.get(url, headers=headers)\n        return response.json()\n\n    def wait_for_video(self, api_key: SecretStr, pid: str, webhook_token: str, max_wait_time: int=1000) -> str:\n        start_time = time.time()\n        while time.time() - start_time < max_wait_time:\n            status = self.check_video_status(api_key, pid)\n            logger.debug(f'Video status: {status}')\n            if status.get('status') == 'ready' and 'videoUrl' in status:\n                return status['videoUrl']\n            elif status.get('status') == 'error':\n                error_message = status.get('error', 'Unknown error occurred')\n                logger.error(f'Video creation failed: {error_message}')\n                raise ValueError(f'Video creation failed: {error_message}')\n            elif status.get('status') in ['FAILED', 'CANCELED']:\n                logger.error(f\"Video creation failed: {status.get('message')}\")\n                raise ValueError(f\"Video creation failed: {status.get('message')}\")\n            time.sleep(10)\n        logger.error('Video creation timed out')\n        raise TimeoutError('Video creation timed out')\n\n    def run(self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs) -> BlockOutput:\n        (webhook_token, webhook_url) = self.create_webhook()\n        logger.debug(f'Webhook URL: {webhook_url}')\n        audio_url = input_data.background_music.audio_url\n        payload = {'frameRate': input_data.frame_rate, 'resolution': input_data.resolution, 'frameDurationMultiplier': 18, 'webhook': webhook_url, 'creationParams': {'mediaType': input_data.video_style, 'captionPresetName': 'Wrap 1', 'selectedVoice': input_data.voice.voice_id, 'hasEnhancedGeneration': True, 'generationPreset': input_data.generation_preset.name, 'selectedAudio': input_data.background_music, 'origin': '/create', 'inputText': input_data.script, 'flowType': 'text-to-video', 'slug': 'create-tiktok-video', 'hasToGenerateVoice': True, 'hasToTranscript': False, 'hasToSearchMedia': True, 'hasAvatar': False, 'hasWebsiteRecorder': False, 'hasTextSmallAtBottom': False, 'ratio': input_data.ratio, 'sourceType': 'contentScraping', 'selectedStoryStyle': {'value': 'custom', 'label': 'Custom'}, 'hasToGenerateVideos': input_data.video_style != VisualMediaType.STOCK_VIDEOS, 'audioUrl': audio_url}}\n        logger.debug('Creating video...')\n        response = self.create_video(credentials.api_key, payload)\n        pid = response.get('pid')\n        if not pid:\n            logger.error(f'Failed to create video: No project ID returned. API Response: {response}')\n            raise RuntimeError('Failed to create video: No project ID returned')\n        else:\n            logger.debug(f'Video created with project ID: {pid}. Waiting for completion...')\n            video_url = self.wait_for_video(credentials.api_key, pid, webhook_token)\n            logger.debug(f'Video ready: {video_url}')\n            yield ('video_url', video_url)",
        "class Input(BlockSchema):\n    credentials: CredentialsMetaInput[Literal[ProviderName.REVID], Literal['api_key']] = CredentialsField(description='The revid.ai integration can be used with any API key with sufficient permissions for the blocks it is used on.')\n    script: str = SchemaField(description='1. Use short and punctuated sentences\\n\\n2. Use linebreaks to create a new clip\\n\\n3. Text outside of brackets is spoken by the AI, and [text between brackets] will be used to guide the visual generation. For example, [close-up of a cat] will show a close-up of a cat.', placeholder='[close-up of a cat] Meow!')\n    ratio: str = SchemaField(description='Aspect ratio of the video', default='9 / 16')\n    resolution: str = SchemaField(description='Resolution of the video', default='720p')\n    frame_rate: int = SchemaField(description='Frame rate of the video', default=60)\n    generation_preset: GenerationPreset = SchemaField(description='Generation preset for visual style - only effects AI generated visuals', default=GenerationPreset.LEONARDO, placeholder=GenerationPreset.LEONARDO)\n    background_music: AudioTrack = SchemaField(description='Background music track', default=AudioTrack.HIGHWAY_NOCTURNE, placeholder=AudioTrack.HIGHWAY_NOCTURNE)\n    voice: Voice = SchemaField(description='AI voice to use for narration', default=Voice.LILY, placeholder=Voice.LILY)\n    video_style: VisualMediaType = SchemaField(description='Type of visual media to use for the video', default=VisualMediaType.STOCK_VIDEOS, placeholder=VisualMediaType.STOCK_VIDEOS)",
        "credentials: CredentialsMetaInput[Literal[ProviderName.REVID], Literal['api_key']] = CredentialsField(description='The revid.ai integration can be used with any API key with sufficient permissions for the blocks it is used on.')",
        "script: str = SchemaField(description='1. Use short and punctuated sentences\\n\\n2. Use linebreaks to create a new clip\\n\\n3. Text outside of brackets is spoken by the AI, and [text between brackets] will be used to guide the visual generation. For example, [close-up of a cat] will show a close-up of a cat.', placeholder='[close-up of a cat] Meow!')",
        "ratio: str = SchemaField(description='Aspect ratio of the video', default='9 / 16')",
        "resolution: str = SchemaField(description='Resolution of the video', default='720p')",
        "frame_rate: int = SchemaField(description='Frame rate of the video', default=60)",
        "generation_preset: GenerationPreset = SchemaField(description='Generation preset for visual style - only effects AI generated visuals', default=GenerationPreset.LEONARDO, placeholder=GenerationPreset.LEONARDO)",
        "background_music: AudioTrack = SchemaField(description='Background music track', default=AudioTrack.HIGHWAY_NOCTURNE, placeholder=AudioTrack.HIGHWAY_NOCTURNE)",
        "voice: Voice = SchemaField(description='AI voice to use for narration', default=Voice.LILY, placeholder=Voice.LILY)",
        "video_style: VisualMediaType = SchemaField(description='Type of visual media to use for the video', default=VisualMediaType.STOCK_VIDEOS, placeholder=VisualMediaType.STOCK_VIDEOS)",
        "class Output(BlockSchema):\n    video_url: str = SchemaField(description='The URL of the created video')\n    error: str = SchemaField(description='Error message if the request failed')",
        "video_url: str = SchemaField(description='The URL of the created video')",
        "error: str = SchemaField(description='Error message if the request failed')",
        "def __init__(self):\n    super().__init__(id='361697fb-0c4f-4feb-aed3-8320c88c771b', description='Creates a shortform video using revid.ai', categories={BlockCategory.SOCIAL, BlockCategory.AI}, input_schema=AIShortformVideoCreatorBlock.Input, output_schema=AIShortformVideoCreatorBlock.Output, test_input={'credentials': TEST_CREDENTIALS_INPUT, 'script': '[close-up of a cat] Meow!', 'ratio': '9 / 16', 'resolution': '720p', 'frame_rate': 60, 'generation_preset': GenerationPreset.LEONARDO, 'background_music': AudioTrack.HIGHWAY_NOCTURNE, 'voice': Voice.LILY, 'video_style': VisualMediaType.STOCK_VIDEOS}, test_output=('video_url', 'https://example.com/video.mp4'), test_mock={'create_webhook': lambda : ('test_uuid', 'https://webhook.site/test_uuid'), 'create_video': lambda api_key, payload: {'pid': 'test_pid'}, 'wait_for_video': lambda api_key, pid, webhook_token, max_wait_time=1000: 'https://example.com/video.mp4'}, test_credentials=TEST_CREDENTIALS)",
        "super().__init__()",
        "def create_webhook(self):\n    url = 'https://webhook.site/token'\n    headers = {'Accept': 'application/json', 'Content-Type': 'application/json'}\n    response = requests.post(url, headers=headers)\n    webhook_data = response.json()\n    return (webhook_data['uuid'], f\"https://webhook.site/{webhook_data['uuid']}\")",
        "url = 'https://webhook.site/token'",
        "headers = {'Accept': 'application/json', 'Content-Type': 'application/json'}",
        "response = requests.post(url, headers=headers)",
        "webhook_data = response.json()",
        "return (webhook_data['uuid'], f\"https://webhook.site/{webhook_data['uuid']}\")"
      ]
    },
    {
      "id": "5",
      "type": "block",
      "statements": [
        "def create_video(self, api_key: SecretStr, payload: dict) -> dict:\n    url = 'https://www.revid.ai/api/public/v2/render'\n    headers = {'key': api_key.get_secret_value()}\n    response = requests.post(url, json=payload, headers=headers)\n    logger.debug(f'API Response Status Code: {response.status_code}, Content: {response.text}')\n    return response.json()",
        "url = 'https://www.revid.ai/api/public/v2/render'",
        "headers = {'key': api_key.get_secret_value()}",
        "response = requests.post(url, json=payload, headers=headers)",
        "logger.debug(f'API Response Status Code: {response.status_code}, Content: {response.text}')",
        "return response.json()"
      ]
    },
    {
      "id": "6",
      "type": "block",
      "statements": [
        "def check_video_status(self, api_key: SecretStr, pid: str) -> dict:\n    url = f'https://www.revid.ai/api/public/v2/status?pid={pid}'\n    headers = {'key': api_key.get_secret_value()}\n    response = requests.get(url, headers=headers)\n    return response.json()",
        "url = f'https://www.revid.ai/api/public/v2/status?pid={pid}'",
        "headers = {'key': api_key.get_secret_value()}",
        "response = requests.get(url, headers=headers)",
        "return response.json()"
      ]
    },
    {
      "id": "7",
      "type": "block",
      "statements": [
        "def wait_for_video(self, api_key: SecretStr, pid: str, webhook_token: str, max_wait_time: int=1000) -> str:\n    start_time = time.time()\n    while time.time() - start_time < max_wait_time:\n        status = self.check_video_status(api_key, pid)\n        logger.debug(f'Video status: {status}')\n        if status.get('status') == 'ready' and 'videoUrl' in status:\n            return status['videoUrl']\n        elif status.get('status') == 'error':\n            error_message = status.get('error', 'Unknown error occurred')\n            logger.error(f'Video creation failed: {error_message}')\n            raise ValueError(f'Video creation failed: {error_message}')\n        elif status.get('status') in ['FAILED', 'CANCELED']:\n            logger.error(f\"Video creation failed: {status.get('message')}\")\n            raise ValueError(f\"Video creation failed: {status.get('message')}\")\n        time.sleep(10)\n    logger.error('Video creation timed out')\n    raise TimeoutError('Video creation timed out')",
        "start_time = time.time()"
      ]
    },
    {
      "id": "8",
      "type": "block",
      "statements": [
        "time.time() Sub start_time Lt max_wait_time"
      ]
    },
    {
      "id": "9",
      "type": "block",
      "statements": [
        "status = self.check_video_status(api_key, pid)",
        "logger.debug(f'Video status: {status}')",
        "status.get('status') == 'ready' and 'videoUrl' in status"
      ]
    },
    {
      "id": "10",
      "type": "block",
      "statements": [
        "logger.error('Video creation timed out')",
        "raise TimeoutError('Video creation timed out')",
        "def run(self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs) -> BlockOutput:\n    (webhook_token, webhook_url) = self.create_webhook()\n    logger.debug(f'Webhook URL: {webhook_url}')\n    audio_url = input_data.background_music.audio_url\n    payload = {'frameRate': input_data.frame_rate, 'resolution': input_data.resolution, 'frameDurationMultiplier': 18, 'webhook': webhook_url, 'creationParams': {'mediaType': input_data.video_style, 'captionPresetName': 'Wrap 1', 'selectedVoice': input_data.voice.voice_id, 'hasEnhancedGeneration': True, 'generationPreset': input_data.generation_preset.name, 'selectedAudio': input_data.background_music, 'origin': '/create', 'inputText': input_data.script, 'flowType': 'text-to-video', 'slug': 'create-tiktok-video', 'hasToGenerateVoice': True, 'hasToTranscript': False, 'hasToSearchMedia': True, 'hasAvatar': False, 'hasWebsiteRecorder': False, 'hasTextSmallAtBottom': False, 'ratio': input_data.ratio, 'sourceType': 'contentScraping', 'selectedStoryStyle': {'value': 'custom', 'label': 'Custom'}, 'hasToGenerateVideos': input_data.video_style != VisualMediaType.STOCK_VIDEOS, 'audioUrl': audio_url}}\n    logger.debug('Creating video...')\n    response = self.create_video(credentials.api_key, payload)\n    pid = response.get('pid')\n    if not pid:\n        logger.error(f'Failed to create video: No project ID returned. API Response: {response}')\n        raise RuntimeError('Failed to create video: No project ID returned')\n    else:\n        logger.debug(f'Video created with project ID: {pid}. Waiting for completion...')\n        video_url = self.wait_for_video(credentials.api_key, pid, webhook_token)\n        logger.debug(f'Video ready: {video_url}')\n        yield ('video_url', video_url)",
        "(webhook_token, webhook_url) = self.create_webhook()",
        "logger.debug(f'Webhook URL: {webhook_url}')",
        "audio_url = input_data.background_music.audio_url",
        "payload = {'frameRate': input_data.frame_rate, 'resolution': input_data.resolution, 'frameDurationMultiplier': 18, 'webhook': webhook_url, 'creationParams': {'mediaType': input_data.video_style, 'captionPresetName': 'Wrap 1', 'selectedVoice': input_data.voice.voice_id, 'hasEnhancedGeneration': True, 'generationPreset': input_data.generation_preset.name, 'selectedAudio': input_data.background_music, 'origin': '/create', 'inputText': input_data.script, 'flowType': 'text-to-video', 'slug': 'create-tiktok-video', 'hasToGenerateVoice': True, 'hasToTranscript': False, 'hasToSearchMedia': True, 'hasAvatar': False, 'hasWebsiteRecorder': False, 'hasTextSmallAtBottom': False, 'ratio': input_data.ratio, 'sourceType': 'contentScraping', 'selectedStoryStyle': {'value': 'custom', 'label': 'Custom'}, 'hasToGenerateVideos': input_data.video_style != VisualMediaType.STOCK_VIDEOS, 'audioUrl': audio_url}}",
        "logger.debug('Creating video...')",
        "response = self.create_video(credentials.api_key, payload)",
        "pid = response.get('pid')",
        "not pid"
      ]
    },
    {
      "id": "11",
      "type": "block",
      "statements": [
        "return status['videoUrl']"
      ]
    },
    {
      "id": "12",
      "type": "block",
      "statements": [
        "status.get('status') Eq 'error'"
      ]
    },
    {
      "id": "13",
      "type": "block",
      "statements": [
        "time.sleep(10)"
      ]
    },
    {
      "id": "14",
      "type": "block",
      "statements": [
        "error_message = status.get('error', 'Unknown error occurred')",
        "logger.error(f'Video creation failed: {error_message}')",
        "raise ValueError(f'Video creation failed: {error_message}')"
      ]
    },
    {
      "id": "15",
      "type": "block",
      "statements": [
        "status.get('status') In ['FAILED', 'CANCELED']"
      ]
    },
    {
      "id": "16",
      "type": "block",
      "statements": []
    },
    {
      "id": "17",
      "type": "block",
      "statements": [
        "logger.error(f\"Video creation failed: {status.get('message')}\")",
        "raise ValueError(f\"Video creation failed: {status.get('message')}\")"
      ]
    },
    {
      "id": "18",
      "type": "block",
      "statements": []
    },
    {
      "id": "19",
      "type": "block",
      "statements": []
    },
    {
      "id": "20",
      "type": "block",
      "statements": [
        "logger.error(f'Failed to create video: No project ID returned. API Response: {response}')",
        "raise RuntimeError('Failed to create video: No project ID returned')"
      ]
    },
    {
      "id": "21",
      "type": "block",
      "statements": [
        "logger.debug(f'Video created with project ID: {pid}. Waiting for completion...')",
        "video_url = self.wait_for_video(credentials.api_key, pid, webhook_token)",
        "logger.debug(f'Video ready: {video_url}')",
        "(yield ('video_url', video_url))"
      ]
    },
    {
      "id": "22",
      "type": "block",
      "statements": []
    }
  ],
  "edges": [
    {
      "source": "7",
      "target": "8",
      "type": "next"
    },
    {
      "source": "8",
      "target": "9",
      "type": "true"
    },
    {
      "source": "8",
      "target": "10",
      "type": "false"
    },
    {
      "source": "9",
      "target": "11",
      "type": "true"
    },
    {
      "source": "9",
      "target": "12",
      "type": "false"
    },
    {
      "source": "10",
      "target": "20",
      "type": "true"
    },
    {
      "source": "10",
      "target": "21",
      "type": "false"
    },
    {
      "source": "12",
      "target": "14",
      "type": "true"
    },
    {
      "source": "12",
      "target": "15",
      "type": "false"
    },
    {
      "source": "13",
      "target": "8",
      "type": "next"
    },
    {
      "source": "14",
      "target": "16",
      "type": "next"
    },
    {
      "source": "15",
      "target": "17",
      "type": "true"
    },
    {
      "source": "15",
      "target": "18",
      "type": "false"
    },
    {
      "source": "16",
      "target": "13",
      "type": "next"
    },
    {
      "source": "17",
      "target": "19",
      "type": "next"
    },
    {
      "source": "18",
      "target": "19",
      "type": "next"
    },
    {
      "source": "19",
      "target": "16",
      "type": "next"
    },
    {
      "source": "20",
      "target": "22",
      "type": "next"
    },
    {
      "source": "21",
      "target": "22",
      "type": "next"
    }
  ]
}