{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "def get_highest_set_bit_position(number: int) -> int:\n    \"\"\"\n    Returns position of the highest set bit of a number.\n    Ref - https://graphics.stanford.edu/~seander/bithacks.html#IntegerLogObvious\n    >>> get_highest_set_bit_position(25)\n    5\n    >>> get_highest_set_bit_position(37)\n    6\n    >>> get_highest_set_bit_position(1)\n    1\n    >>> get_highest_set_bit_position(4)\n    3\n    >>> get_highest_set_bit_position(0)\n    0\n    >>> get_highest_set_bit_position(0.8)\n    Traceback (most recent call last):\n        ...\n    TypeError: Input value must be an 'int' type\n    \"\"\"\n    if not isinstance(number, int):\n        raise TypeError(\"Input value must be an 'int' type\")\n    position = 0\n    while number:\n        position += 1\n        number >>= 1\n    return position",
        "\"\\n    Returns position of the highest set bit of a number.\\n    Ref - https://graphics.stanford.edu/~seander/bithacks.html#IntegerLogObvious\\n    >>> get_highest_set_bit_position(25)\\n    5\\n    >>> get_highest_set_bit_position(37)\\n    6\\n    >>> get_highest_set_bit_position(1)\\n    1\\n    >>> get_highest_set_bit_position(4)\\n    3\\n    >>> get_highest_set_bit_position(0)\\n    0\\n    >>> get_highest_set_bit_position(0.8)\\n    Traceback (most recent call last):\\n        ...\\n    TypeError: Input value must be an 'int' type\\n    \"",
        "not isinstance(number, int)"
      ],
      "code": "def get_highest_set_bit_position(number: int) -> int:\n    \"\"\"\n    Returns position of the highest set bit of a number.\n    Ref - https://graphics.stanford.edu/~seander/bithacks.html#IntegerLogObvious\n    >>> get_highest_set_bit_position(25)\n    5\n    >>> get_highest_set_bit_position(37)\n    6\n    >>> get_highest_set_bit_position(1)\n    1\n    >>> get_highest_set_bit_position(4)\n    3\n    >>> get_highest_set_bit_position(0)\n    0\n    >>> get_highest_set_bit_position(0.8)\n    Traceback (most recent call last):\n        ...\n    TypeError: Input value must be an 'int' type\n    \"\"\"\n    if not isinstance(number, int):\n        raise TypeError(\"Input value must be an 'int' type\")\n    position = 0\n    while number:\n        position += 1\n        number >>= 1\n    return position\n\"\\n    Returns position of the highest set bit of a number.\\n    Ref - https://graphics.stanford.edu/~seander/bithacks.html#IntegerLogObvious\\n    >>> get_highest_set_bit_position(25)\\n    5\\n    >>> get_highest_set_bit_position(37)\\n    6\\n    >>> get_highest_set_bit_position(1)\\n    1\\n    >>> get_highest_set_bit_position(4)\\n    3\\n    >>> get_highest_set_bit_position(0)\\n    0\\n    >>> get_highest_set_bit_position(0.8)\\n    Traceback (most recent call last):\\n        ...\\n    TypeError: Input value must be an 'int' type\\n    \"\nnot isinstance(number, int)"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "raise TypeError(\"Input value must be an 'int' type\")"
      ],
      "code": "raise TypeError(\"Input value must be an 'int' type\")"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [
        "position = 0"
      ],
      "code": "position = 0"
    },
    {
      "id": "n4",
      "type": "block",
      "statements": [
        "number"
      ],
      "code": "number"
    },
    {
      "id": "n5",
      "type": "block",
      "statements": [
        "position += 1",
        "number >>= 1"
      ],
      "code": "position += 1\nnumber >>= 1"
    },
    {
      "id": "n6",
      "type": "block",
      "statements": [
        "return position"
      ],
      "code": "return position"
    },
    {
      "id": "n7",
      "type": "block",
      "statements": [
        "__name__ Eq '__main__'"
      ],
      "code": "__name__ Eq '__main__'"
    },
    {
      "id": "n8",
      "type": "block",
      "statements": [
        "import doctest",
        "doctest.testmod()"
      ],
      "code": "import doctest\ndoctest.testmod()"
    },
    {
      "id": "n9",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n10",
      "type": "block",
      "statements": [],
      "code": ""
    }
  ],
  "edges": [
    {
      "source": "n5",
      "target": "n4"
    },
    {
      "source": "n1",
      "target": "n3"
    },
    {
      "source": "n8",
      "target": "n10"
    },
    {
      "source": "n0",
      "target": "n1"
    },
    {
      "source": "n0",
      "target": "n2"
    },
    {
      "source": "n3",
      "target": "n4"
    },
    {
      "source": "n9",
      "target": "n10"
    },
    {
      "source": "n4",
      "target": "n5"
    },
    {
      "source": "n4",
      "target": "n6"
    },
    {
      "source": "n7",
      "target": "n8"
    },
    {
      "source": "n2",
      "target": "n3"
    },
    {
      "source": "n7",
      "target": "n9"
    }
  ]
}