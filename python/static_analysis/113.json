{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "from typing import Literal",
        "import googlemaps",
        "from pydantic import BaseModel, SecretStr",
        "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema",
        "from backend.data.model import APIKeyCredentials, CredentialsField, CredentialsMetaInput, SchemaField",
        "from backend.integrations.providers import ProviderName",
        "TEST_CREDENTIALS = APIKeyCredentials(id='01234567-89ab-cdef-0123-456789abcdef', provider='google_maps', api_key=SecretStr('mock-google-maps-api-key'), title='Mock Google Maps API key', expires_at=None)",
        "TEST_CREDENTIALS_INPUT = {'provider': TEST_CREDENTIALS.provider, 'id': TEST_CREDENTIALS.id, 'type': TEST_CREDENTIALS.type, 'title': TEST_CREDENTIALS.type}",
        "class Place(BaseModel):\n    name: str\n    address: str\n    phone: str\n    rating: float\n    reviews: int\n    website: str",
        "name: str",
        "address: str",
        "phone: str",
        "rating: float",
        "reviews: int",
        "website: str",
        "class GoogleMapsSearchBlock(Block):\n\n    class Input(BlockSchema):\n        credentials: CredentialsMetaInput[Literal[ProviderName.GOOGLE_MAPS], Literal['api_key']] = CredentialsField(description='Google Maps API Key')\n        query: str = SchemaField(description='Search query for local businesses', placeholder=\"e.g., 'restaurants in New York'\")\n        radius: int = SchemaField(description='Search radius in meters (max 50000)', default=5000, ge=1, le=50000)\n        max_results: int = SchemaField(description='Maximum number of results to return (max 60)', default=20, ge=1, le=60)\n\n    class Output(BlockSchema):\n        place: Place = SchemaField(description='Place found')\n        error: str = SchemaField(description='Error message if the search failed')\n\n    def __init__(self):\n        super().__init__(id='f47ac10b-58cc-4372-a567-0e02b2c3d479', description='This block searches for local businesses using Google Maps API.', categories={BlockCategory.SEARCH}, input_schema=GoogleMapsSearchBlock.Input, output_schema=GoogleMapsSearchBlock.Output, test_input={'credentials': TEST_CREDENTIALS_INPUT, 'query': 'restaurants in new york', 'radius': 5000, 'max_results': 5}, test_output=[('place', {'name': 'Test Restaurant', 'address': '123 Test St, New York, NY 10001', 'phone': '+1 (555) 123-4567', 'rating': 4.5, 'reviews': 100, 'website': 'https://testrestaurant.com'})], test_mock={'search_places': lambda *args, **kwargs: [{'name': 'Test Restaurant', 'address': '123 Test St, New York, NY 10001', 'phone': '+1 (555) 123-4567', 'rating': 4.5, 'reviews': 100, 'website': 'https://testrestaurant.com'}]}, test_credentials=TEST_CREDENTIALS)\n\n    def run(self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs) -> BlockOutput:\n        places = self.search_places(credentials.api_key, input_data.query, input_data.radius, input_data.max_results)\n        for place in places:\n            yield ('place', place)\n\n    def search_places(self, api_key: SecretStr, query, radius, max_results):\n        client = googlemaps.Client(key=api_key.get_secret_value())\n        return self._search_places(client, query, radius, max_results)\n\n    def _search_places(self, client, query, radius, max_results):\n        results = []\n        next_page_token = None\n        while len(results) < max_results:\n            response = client.places(query=query, radius=radius, page_token=next_page_token)\n            for place in response['results']:\n                if len(results) >= max_results:\n                    break\n                place_details = client.place(place['place_id'])['result']\n                results.append(Place(name=place_details.get('name', ''), address=place_details.get('formatted_address', ''), phone=place_details.get('formatted_phone_number', ''), rating=place_details.get('rating', 0), reviews=place_details.get('user_ratings_total', 0), website=place_details.get('website', '')))\n            next_page_token = response.get('next_page_token')\n            if not next_page_token:\n                break\n        return results",
        "class Input(BlockSchema):\n    credentials: CredentialsMetaInput[Literal[ProviderName.GOOGLE_MAPS], Literal['api_key']] = CredentialsField(description='Google Maps API Key')\n    query: str = SchemaField(description='Search query for local businesses', placeholder=\"e.g., 'restaurants in New York'\")\n    radius: int = SchemaField(description='Search radius in meters (max 50000)', default=5000, ge=1, le=50000)\n    max_results: int = SchemaField(description='Maximum number of results to return (max 60)', default=20, ge=1, le=60)",
        "credentials: CredentialsMetaInput[Literal[ProviderName.GOOGLE_MAPS], Literal['api_key']] = CredentialsField(description='Google Maps API Key')",
        "query: str = SchemaField(description='Search query for local businesses', placeholder=\"e.g., 'restaurants in New York'\")",
        "radius: int = SchemaField(description='Search radius in meters (max 50000)', default=5000, ge=1, le=50000)",
        "max_results: int = SchemaField(description='Maximum number of results to return (max 60)', default=20, ge=1, le=60)",
        "class Output(BlockSchema):\n    place: Place = SchemaField(description='Place found')\n    error: str = SchemaField(description='Error message if the search failed')",
        "place: Place = SchemaField(description='Place found')",
        "error: str = SchemaField(description='Error message if the search failed')",
        "def __init__(self):\n    super().__init__(id='f47ac10b-58cc-4372-a567-0e02b2c3d479', description='This block searches for local businesses using Google Maps API.', categories={BlockCategory.SEARCH}, input_schema=GoogleMapsSearchBlock.Input, output_schema=GoogleMapsSearchBlock.Output, test_input={'credentials': TEST_CREDENTIALS_INPUT, 'query': 'restaurants in new york', 'radius': 5000, 'max_results': 5}, test_output=[('place', {'name': 'Test Restaurant', 'address': '123 Test St, New York, NY 10001', 'phone': '+1 (555) 123-4567', 'rating': 4.5, 'reviews': 100, 'website': 'https://testrestaurant.com'})], test_mock={'search_places': lambda *args, **kwargs: [{'name': 'Test Restaurant', 'address': '123 Test St, New York, NY 10001', 'phone': '+1 (555) 123-4567', 'rating': 4.5, 'reviews': 100, 'website': 'https://testrestaurant.com'}]}, test_credentials=TEST_CREDENTIALS)",
        "super().__init__()",
        "def run(self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs) -> BlockOutput:\n    places = self.search_places(credentials.api_key, input_data.query, input_data.radius, input_data.max_results)\n    for place in places:\n        yield ('place', place)",
        "places = self.search_places(credentials.api_key, input_data.query, input_data.radius, input_data.max_results)"
      ],
      "code": "from typing import Literal\nimport googlemaps\nfrom pydantic import BaseModel, SecretStr\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import APIKeyCredentials, CredentialsField, CredentialsMetaInput, SchemaField\nfrom backend.integrations.providers import ProviderName\nTEST_CREDENTIALS = APIKeyCredentials(id='01234567-89ab-cdef-0123-456789abcdef', provider='google_maps', api_key=SecretStr('mock-google-maps-api-key'), title='Mock Google Maps API key', expires_at=None)\nTEST_CREDENTIALS_INPUT = {'provider': TEST_CREDENTIALS.provider, 'id': TEST_CREDENTIALS.id, 'type': TEST_CREDENTIALS.type, 'title': TEST_CREDENTIALS.type}\nclass Place(BaseModel):\n    name: str\n    address: str\n    phone: str\n    rating: float\n    reviews: int\n    website: str\nname: str\naddress: str\nphone: str\nrating: float\nreviews: int\nwebsite: str\nclass GoogleMapsSearchBlock(Block):\n\n    class Input(BlockSchema):\n        credentials: CredentialsMetaInput[Literal[ProviderName.GOOGLE_MAPS], Literal['api_key']] = CredentialsField(description='Google Maps API Key')\n        query: str = SchemaField(description='Search query for local businesses', placeholder=\"e.g., 'restaurants in New York'\")\n        radius: int = SchemaField(description='Search radius in meters (max 50000)', default=5000, ge=1, le=50000)\n        max_results: int = SchemaField(description='Maximum number of results to return (max 60)', default=20, ge=1, le=60)\n\n    class Output(BlockSchema):\n        place: Place = SchemaField(description='Place found')\n        error: str = SchemaField(description='Error message if the search failed')\n\n    def __init__(self):\n        super().__init__(id='f47ac10b-58cc-4372-a567-0e02b2c3d479', description='This block searches for local businesses using Google Maps API.', categories={BlockCategory.SEARCH}, input_schema=GoogleMapsSearchBlock.Input, output_schema=GoogleMapsSearchBlock.Output, test_input={'credentials': TEST_CREDENTIALS_INPUT, 'query': 'restaurants in new york', 'radius': 5000, 'max_results': 5}, test_output=[('place', {'name': 'Test Restaurant', 'address': '123 Test St, New York, NY 10001', 'phone': '+1 (555) 123-4567', 'rating': 4.5, 'reviews': 100, 'website': 'https://testrestaurant.com'})], test_mock={'search_places': lambda *args, **kwargs: [{'name': 'Test Restaurant', 'address': '123 Test St, New York, NY 10001', 'phone': '+1 (555) 123-4567', 'rating': 4.5, 'reviews': 100, 'website': 'https://testrestaurant.com'}]}, test_credentials=TEST_CREDENTIALS)\n\n    def run(self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs) -> BlockOutput:\n        places = self.search_places(credentials.api_key, input_data.query, input_data.radius, input_data.max_results)\n        for place in places:\n            yield ('place', place)\n\n    def search_places(self, api_key: SecretStr, query, radius, max_results):\n        client = googlemaps.Client(key=api_key.get_secret_value())\n        return self._search_places(client, query, radius, max_results)\n\n    def _search_places(self, client, query, radius, max_results):\n        results = []\n        next_page_token = None\n        while len(results) < max_results:\n            response = client.places(query=query, radius=radius, page_token=next_page_token)\n            for place in response['results']:\n                if len(results) >= max_results:\n                    break\n                place_details = client.place(place['place_id'])['result']\n                results.append(Place(name=place_details.get('name', ''), address=place_details.get('formatted_address', ''), phone=place_details.get('formatted_phone_number', ''), rating=place_details.get('rating', 0), reviews=place_details.get('user_ratings_total', 0), website=place_details.get('website', '')))\n            next_page_token = response.get('next_page_token')\n            if not next_page_token:\n                break\n        return results\nclass Input(BlockSchema):\n    credentials: CredentialsMetaInput[Literal[ProviderName.GOOGLE_MAPS], Literal['api_key']] = CredentialsField(description='Google Maps API Key')\n    query: str = SchemaField(description='Search query for local businesses', placeholder=\"e.g., 'restaurants in New York'\")\n    radius: int = SchemaField(description='Search radius in meters (max 50000)', default=5000, ge=1, le=50000)\n    max_results: int = SchemaField(description='Maximum number of results to return (max 60)', default=20, ge=1, le=60)\ncredentials: CredentialsMetaInput[Literal[ProviderName.GOOGLE_MAPS], Literal['api_key']] = CredentialsField(description='Google Maps API Key')\nquery: str = SchemaField(description='Search query for local businesses', placeholder=\"e.g., 'restaurants in New York'\")\nradius: int = SchemaField(description='Search radius in meters (max 50000)', default=5000, ge=1, le=50000)\nmax_results: int = SchemaField(description='Maximum number of results to return (max 60)', default=20, ge=1, le=60)\nclass Output(BlockSchema):\n    place: Place = SchemaField(description='Place found')\n    error: str = SchemaField(description='Error message if the search failed')\nplace: Place = SchemaField(description='Place found')\nerror: str = SchemaField(description='Error message if the search failed')\ndef __init__(self):\n    super().__init__(id='f47ac10b-58cc-4372-a567-0e02b2c3d479', description='This block searches for local businesses using Google Maps API.', categories={BlockCategory.SEARCH}, input_schema=GoogleMapsSearchBlock.Input, output_schema=GoogleMapsSearchBlock.Output, test_input={'credentials': TEST_CREDENTIALS_INPUT, 'query': 'restaurants in new york', 'radius': 5000, 'max_results': 5}, test_output=[('place', {'name': 'Test Restaurant', 'address': '123 Test St, New York, NY 10001', 'phone': '+1 (555) 123-4567', 'rating': 4.5, 'reviews': 100, 'website': 'https://testrestaurant.com'})], test_mock={'search_places': lambda *args, **kwargs: [{'name': 'Test Restaurant', 'address': '123 Test St, New York, NY 10001', 'phone': '+1 (555) 123-4567', 'rating': 4.5, 'reviews': 100, 'website': 'https://testrestaurant.com'}]}, test_credentials=TEST_CREDENTIALS)\nsuper().__init__()\ndef run(self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs) -> BlockOutput:\n    places = self.search_places(credentials.api_key, input_data.query, input_data.radius, input_data.max_results)\n    for place in places:\n        yield ('place', place)\nplaces = self.search_places(credentials.api_key, input_data.query, input_data.radius, input_data.max_results)"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "place",
        "places"
      ],
      "code": "place\nplaces"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [
        "(yield ('place', place))"
      ],
      "code": "(yield ('place', place))"
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [
        "def search_places(self, api_key: SecretStr, query, radius, max_results):\n    client = googlemaps.Client(key=api_key.get_secret_value())\n    return self._search_places(client, query, radius, max_results)",
        "client = googlemaps.Client(key=api_key.get_secret_value())",
        "return self._search_places(client, query, radius, max_results)"
      ],
      "code": "def search_places(self, api_key: SecretStr, query, radius, max_results):\n    client = googlemaps.Client(key=api_key.get_secret_value())\n    return self._search_places(client, query, radius, max_results)\nclient = googlemaps.Client(key=api_key.get_secret_value())\nreturn self._search_places(client, query, radius, max_results)"
    },
    {
      "id": "n4",
      "type": "block",
      "statements": [
        "def _search_places(self, client, query, radius, max_results):\n    results = []\n    next_page_token = None\n    while len(results) < max_results:\n        response = client.places(query=query, radius=radius, page_token=next_page_token)\n        for place in response['results']:\n            if len(results) >= max_results:\n                break\n            place_details = client.place(place['place_id'])['result']\n            results.append(Place(name=place_details.get('name', ''), address=place_details.get('formatted_address', ''), phone=place_details.get('formatted_phone_number', ''), rating=place_details.get('rating', 0), reviews=place_details.get('user_ratings_total', 0), website=place_details.get('website', '')))\n        next_page_token = response.get('next_page_token')\n        if not next_page_token:\n            break\n    return results",
        "results = []",
        "next_page_token = None"
      ],
      "code": "def _search_places(self, client, query, radius, max_results):\n    results = []\n    next_page_token = None\n    while len(results) < max_results:\n        response = client.places(query=query, radius=radius, page_token=next_page_token)\n        for place in response['results']:\n            if len(results) >= max_results:\n                break\n            place_details = client.place(place['place_id'])['result']\n            results.append(Place(name=place_details.get('name', ''), address=place_details.get('formatted_address', ''), phone=place_details.get('formatted_phone_number', ''), rating=place_details.get('rating', 0), reviews=place_details.get('user_ratings_total', 0), website=place_details.get('website', '')))\n        next_page_token = response.get('next_page_token')\n        if not next_page_token:\n            break\n    return results\nresults = []\nnext_page_token = None"
    },
    {
      "id": "n5",
      "type": "block",
      "statements": [
        "len(results) Lt max_results"
      ],
      "code": "len(results) Lt max_results"
    },
    {
      "id": "n6",
      "type": "block",
      "statements": [
        "response = client.places(query=query, radius=radius, page_token=next_page_token)"
      ],
      "code": "response = client.places(query=query, radius=radius, page_token=next_page_token)"
    },
    {
      "id": "n7",
      "type": "block",
      "statements": [
        "return results"
      ],
      "code": "return results"
    },
    {
      "id": "n8",
      "type": "block",
      "statements": [
        "place",
        "response['results']"
      ],
      "code": "place\nresponse['results']"
    },
    {
      "id": "n9",
      "type": "block",
      "statements": [
        "len(results) GtE max_results"
      ],
      "code": "len(results) GtE max_results"
    },
    {
      "id": "n10",
      "type": "block",
      "statements": [
        "next_page_token = response.get('next_page_token')",
        "not next_page_token"
      ],
      "code": "next_page_token = response.get('next_page_token')\nnot next_page_token"
    },
    {
      "id": "n11",
      "type": "block",
      "statements": [
        "break"
      ],
      "code": "break"
    },
    {
      "id": "n12",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n13",
      "type": "block",
      "statements": [
        "place_details = client.place(place['place_id'])['result']",
        "results.append(Place())"
      ],
      "code": "place_details = client.place(place['place_id'])['result']\nresults.append(Place())"
    },
    {
      "id": "n14",
      "type": "block",
      "statements": [
        "break"
      ],
      "code": "break"
    },
    {
      "id": "n15",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n16",
      "type": "block",
      "statements": [],
      "code": ""
    }
  ],
  "edges": [
    {
      "source": "n0",
      "target": "n1"
    },
    {
      "source": "n10",
      "target": "n15"
    },
    {
      "source": "n11",
      "target": "n13"
    },
    {
      "source": "n8",
      "target": "n9"
    },
    {
      "source": "n1",
      "target": "n2"
    },
    {
      "source": "n4",
      "target": "n5"
    },
    {
      "source": "n12",
      "target": "n13"
    },
    {
      "source": "n15",
      "target": "n16"
    },
    {
      "source": "n9",
      "target": "n11"
    },
    {
      "source": "n14",
      "target": "n16"
    },
    {
      "source": "n16",
      "target": "n5"
    },
    {
      "source": "n5",
      "target": "n6"
    },
    {
      "source": "n1",
      "target": "n3"
    },
    {
      "source": "n8",
      "target": "n10"
    },
    {
      "source": "n13",
      "target": "n8"
    },
    {
      "source": "n5",
      "target": "n7"
    },
    {
      "source": "n6",
      "target": "n8"
    },
    {
      "source": "n9",
      "target": "n12"
    },
    {
      "source": "n10",
      "target": "n14"
    },
    {
      "source": "n2",
      "target": "n1"
    }
  ]
}