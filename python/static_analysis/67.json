{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "import logging",
        "from typing import TYPE_CHECKING, Callable, Optional, cast",
        "from backend.data.block import BlockWebhookConfig, get_block",
        "from backend.data.graph import set_node_webhook",
        "from backend.data.model import CREDENTIALS_FIELD_NAME",
        "from backend.integrations.webhooks import WEBHOOK_MANAGERS_BY_NAME",
        "TYPE_CHECKING"
      ],
      "code": "import logging\nfrom typing import TYPE_CHECKING, Callable, Optional, cast\nfrom backend.data.block import BlockWebhookConfig, get_block\nfrom backend.data.graph import set_node_webhook\nfrom backend.data.model import CREDENTIALS_FIELD_NAME\nfrom backend.integrations.webhooks import WEBHOOK_MANAGERS_BY_NAME\nTYPE_CHECKING"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "from backend.data.graph import GraphModel, NodeModel",
        "from backend.data.model import Credentials",
        "from ._base import BaseWebhooksManager"
      ],
      "code": "from backend.data.graph import GraphModel, NodeModel\nfrom backend.data.model import Credentials\nfrom ._base import BaseWebhooksManager"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [
        "logger = logging.getLogger(__name__)",
        "async def on_graph_activate(graph: 'GraphModel', get_credentials: Callable[[str], 'Credentials | None']):\n    \"\"\"\n    Hook to be called when a graph is activated/created.\n\n    ⚠️ Assuming node entities are not re-used between graph versions, ⚠️\n    this hook calls `on_node_activate` on all nodes in this graph.\n\n    Params:\n        get_credentials: `credentials_id` -> Credentials\n    \"\"\"\n    updated_nodes = []\n    for new_node in graph.nodes:\n        node_credentials = None\n        if (creds_meta := new_node.input_default.get(CREDENTIALS_FIELD_NAME)):\n            node_credentials = get_credentials(creds_meta['id'])\n            if not node_credentials:\n                raise ValueError(f'Node #{new_node.id} updated with non-existent credentials #{node_credentials}')\n        updated_node = await on_node_activate(graph.user_id, new_node, credentials=node_credentials)\n        updated_nodes.append(updated_node)\n    graph.nodes = updated_nodes\n    return graph",
        "'\\n    Hook to be called when a graph is activated/created.\\n\\n    ⚠️ Assuming node entities are not re-used between graph versions, ⚠️\\n    this hook calls `on_node_activate` on all nodes in this graph.\\n\\n    Params:\\n        get_credentials: `credentials_id` -> Credentials\\n    '",
        "updated_nodes = []"
      ],
      "code": "logger = logging.getLogger(__name__)\nasync def on_graph_activate(graph: 'GraphModel', get_credentials: Callable[[str], 'Credentials | None']):\n    \"\"\"\n    Hook to be called when a graph is activated/created.\n\n    ⚠️ Assuming node entities are not re-used between graph versions, ⚠️\n    this hook calls `on_node_activate` on all nodes in this graph.\n\n    Params:\n        get_credentials: `credentials_id` -> Credentials\n    \"\"\"\n    updated_nodes = []\n    for new_node in graph.nodes:\n        node_credentials = None\n        if (creds_meta := new_node.input_default.get(CREDENTIALS_FIELD_NAME)):\n            node_credentials = get_credentials(creds_meta['id'])\n            if not node_credentials:\n                raise ValueError(f'Node #{new_node.id} updated with non-existent credentials #{node_credentials}')\n        updated_node = await on_node_activate(graph.user_id, new_node, credentials=node_credentials)\n        updated_nodes.append(updated_node)\n    graph.nodes = updated_nodes\n    return graph\n'\\n    Hook to be called when a graph is activated/created.\\n\\n    ⚠️ Assuming node entities are not re-used between graph versions, ⚠️\\n    this hook calls `on_node_activate` on all nodes in this graph.\\n\\n    Params:\\n        get_credentials: `credentials_id` -> Credentials\\n    '\nupdated_nodes = []"
    },
    {
      "id": "n4",
      "type": "block",
      "statements": [
        "new_node",
        "graph.nodes"
      ],
      "code": "new_node\ngraph.nodes"
    },
    {
      "id": "n5",
      "type": "block",
      "statements": [
        "node_credentials = None",
        "(creds_meta := new_node.input_default.get(CREDENTIALS_FIELD_NAME))"
      ],
      "code": "node_credentials = None\n(creds_meta := new_node.input_default.get(CREDENTIALS_FIELD_NAME))"
    },
    {
      "id": "n6",
      "type": "block",
      "statements": [
        "graph.nodes = updated_nodes",
        "return graph"
      ],
      "code": "graph.nodes = updated_nodes\nreturn graph"
    },
    {
      "id": "n7",
      "type": "block",
      "statements": [
        "node_credentials = get_credentials(creds_meta['id'])",
        "not node_credentials"
      ],
      "code": "node_credentials = get_credentials(creds_meta['id'])\nnot node_credentials"
    },
    {
      "id": "n8",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n9",
      "type": "block",
      "statements": [
        "updated_node = await on_node_activate(graph.user_id, new_node, credentials=node_credentials)",
        "updated_nodes.append(updated_node)"
      ],
      "code": "updated_node = await on_node_activate(graph.user_id, new_node, credentials=node_credentials)\nupdated_nodes.append(updated_node)"
    },
    {
      "id": "n10",
      "type": "block",
      "statements": [
        "raise ValueError(f'Node #{new_node.id} updated with non-existent credentials #{node_credentials}')"
      ],
      "code": "raise ValueError(f'Node #{new_node.id} updated with non-existent credentials #{node_credentials}')"
    },
    {
      "id": "n11",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n12",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n13",
      "type": "block",
      "statements": [
        "async def on_graph_deactivate(graph: 'GraphModel', get_credentials: Callable[[str], 'Credentials | None']):\n    \"\"\"\n    Hook to be called when a graph is deactivated/deleted.\n\n    ⚠️ Assuming node entities are not re-used between graph versions, ⚠️\n    this hook calls `on_node_deactivate` on all nodes in `graph`.\n\n    Params:\n        get_credentials: `credentials_id` -> Credentials\n    \"\"\"\n    updated_nodes = []\n    for node in graph.nodes:\n        node_credentials = None\n        if (creds_meta := node.input_default.get(CREDENTIALS_FIELD_NAME)):\n            node_credentials = get_credentials(creds_meta['id'])\n            if not node_credentials:\n                logger.error(f\"Node #{node.id} referenced non-existent credentials #{creds_meta['id']}\")\n        updated_node = await on_node_deactivate(node, credentials=node_credentials)\n        updated_nodes.append(updated_node)\n    graph.nodes = updated_nodes\n    return graph",
        "'\\n    Hook to be called when a graph is deactivated/deleted.\\n\\n    ⚠️ Assuming node entities are not re-used between graph versions, ⚠️\\n    this hook calls `on_node_deactivate` on all nodes in `graph`.\\n\\n    Params:\\n        get_credentials: `credentials_id` -> Credentials\\n    '",
        "updated_nodes = []"
      ],
      "code": "async def on_graph_deactivate(graph: 'GraphModel', get_credentials: Callable[[str], 'Credentials | None']):\n    \"\"\"\n    Hook to be called when a graph is deactivated/deleted.\n\n    ⚠️ Assuming node entities are not re-used between graph versions, ⚠️\n    this hook calls `on_node_deactivate` on all nodes in `graph`.\n\n    Params:\n        get_credentials: `credentials_id` -> Credentials\n    \"\"\"\n    updated_nodes = []\n    for node in graph.nodes:\n        node_credentials = None\n        if (creds_meta := node.input_default.get(CREDENTIALS_FIELD_NAME)):\n            node_credentials = get_credentials(creds_meta['id'])\n            if not node_credentials:\n                logger.error(f\"Node #{node.id} referenced non-existent credentials #{creds_meta['id']}\")\n        updated_node = await on_node_deactivate(node, credentials=node_credentials)\n        updated_nodes.append(updated_node)\n    graph.nodes = updated_nodes\n    return graph\n'\\n    Hook to be called when a graph is deactivated/deleted.\\n\\n    ⚠️ Assuming node entities are not re-used between graph versions, ⚠️\\n    this hook calls `on_node_deactivate` on all nodes in `graph`.\\n\\n    Params:\\n        get_credentials: `credentials_id` -> Credentials\\n    '\nupdated_nodes = []"
    },
    {
      "id": "n14",
      "type": "block",
      "statements": [
        "node",
        "graph.nodes"
      ],
      "code": "node\ngraph.nodes"
    },
    {
      "id": "n15",
      "type": "block",
      "statements": [
        "node_credentials = None",
        "(creds_meta := node.input_default.get(CREDENTIALS_FIELD_NAME))"
      ],
      "code": "node_credentials = None\n(creds_meta := node.input_default.get(CREDENTIALS_FIELD_NAME))"
    },
    {
      "id": "n16",
      "type": "block",
      "statements": [
        "graph.nodes = updated_nodes",
        "return graph"
      ],
      "code": "graph.nodes = updated_nodes\nreturn graph"
    },
    {
      "id": "n17",
      "type": "block",
      "statements": [
        "node_credentials = get_credentials(creds_meta['id'])",
        "not node_credentials"
      ],
      "code": "node_credentials = get_credentials(creds_meta['id'])\nnot node_credentials"
    },
    {
      "id": "n18",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n19",
      "type": "block",
      "statements": [
        "updated_node = await on_node_deactivate(node, credentials=node_credentials)",
        "updated_nodes.append(updated_node)"
      ],
      "code": "updated_node = await on_node_deactivate(node, credentials=node_credentials)\nupdated_nodes.append(updated_node)"
    },
    {
      "id": "n20",
      "type": "block",
      "statements": [
        "logger.error(f\"Node #{node.id} referenced non-existent credentials #{creds_meta['id']}\")"
      ],
      "code": "logger.error(f\"Node #{node.id} referenced non-existent credentials #{creds_meta['id']}\")"
    },
    {
      "id": "n21",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n22",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n23",
      "type": "block",
      "statements": [
        "async def on_node_activate(user_id: str, node: 'NodeModel', *, credentials: Optional['Credentials']=None) -> 'NodeModel':\n    \"\"\"Hook to be called when the node is activated/created\"\"\"\n    block = get_block(node.block_id)\n    if not block:\n        raise ValueError(f'Node #{node.id} is instance of unknown block #{node.block_id}')\n    if not block.webhook_config:\n        return node\n    provider = block.webhook_config.provider\n    if provider not in WEBHOOK_MANAGERS_BY_NAME:\n        raise ValueError(f'Block #{block.id} has webhook_config for provider {provider} which does not support webhooks')\n    logger.debug(f'Activating webhook node #{node.id} with config {block.webhook_config}')\n    webhooks_manager = WEBHOOK_MANAGERS_BY_NAME[provider]()\n    if (auto_setup_webhook := isinstance(block.webhook_config, BlockWebhookConfig)):\n        try:\n            resource = block.webhook_config.resource_format.format(**node.input_default)\n        except KeyError:\n            resource = None\n        logger.debug(f'Constructed resource string {resource} from input {node.input_default}')\n    else:\n        resource = ''\n    needs_credentials = CREDENTIALS_FIELD_NAME in block.input_schema.model_fields\n    credentials_meta = node.input_default.get(CREDENTIALS_FIELD_NAME) if needs_credentials else None\n    event_filter_input_name = block.webhook_config.event_filter_input\n    has_everything_for_webhook = resource is not None and (credentials_meta or not needs_credentials) and (not event_filter_input_name or (event_filter_input_name in node.input_default and any((is_on for is_on in node.input_default[event_filter_input_name].values()))))\n    if has_everything_for_webhook and resource is not None:\n        logger.debug(f'Node #{node} has everything for a webhook!')\n        if credentials_meta and (not credentials):\n            raise ValueError(f\"Cannot set up webhook for node #{node.id}: credentials #{credentials_meta['id']} not available\")\n        if event_filter_input_name:\n            event_filter = cast(dict, node.input_default[event_filter_input_name])\n            events = [block.webhook_config.event_format.format(event=event) for (event, enabled) in event_filter.items() if enabled is True]\n            logger.debug(f\"Webhook events to subscribe to: {', '.join(events)}\")\n        else:\n            events = []\n        if auto_setup_webhook:\n            assert credentials is not None\n            new_webhook = await webhooks_manager.get_suitable_auto_webhook(user_id, credentials, block.webhook_config.webhook_type, resource, events)\n        else:\n            new_webhook = await webhooks_manager.get_manual_webhook(user_id, node.graph_id, block.webhook_config.webhook_type, events)\n        logger.debug(f'Acquired webhook: {new_webhook}')\n        return await set_node_webhook(node.id, new_webhook.id)\n    else:\n        logger.debug(f'Node #{node.id} does not have everything for a webhook')\n    return node",
        "'Hook to be called when the node is activated/created'",
        "block = get_block(node.block_id)",
        "not block"
      ],
      "code": "async def on_node_activate(user_id: str, node: 'NodeModel', *, credentials: Optional['Credentials']=None) -> 'NodeModel':\n    \"\"\"Hook to be called when the node is activated/created\"\"\"\n    block = get_block(node.block_id)\n    if not block:\n        raise ValueError(f'Node #{node.id} is instance of unknown block #{node.block_id}')\n    if not block.webhook_config:\n        return node\n    provider = block.webhook_config.provider\n    if provider not in WEBHOOK_MANAGERS_BY_NAME:\n        raise ValueError(f'Block #{block.id} has webhook_config for provider {provider} which does not support webhooks')\n    logger.debug(f'Activating webhook node #{node.id} with config {block.webhook_config}')\n    webhooks_manager = WEBHOOK_MANAGERS_BY_NAME[provider]()\n    if (auto_setup_webhook := isinstance(block.webhook_config, BlockWebhookConfig)):\n        try:\n            resource = block.webhook_config.resource_format.format(**node.input_default)\n        except KeyError:\n            resource = None\n        logger.debug(f'Constructed resource string {resource} from input {node.input_default}')\n    else:\n        resource = ''\n    needs_credentials = CREDENTIALS_FIELD_NAME in block.input_schema.model_fields\n    credentials_meta = node.input_default.get(CREDENTIALS_FIELD_NAME) if needs_credentials else None\n    event_filter_input_name = block.webhook_config.event_filter_input\n    has_everything_for_webhook = resource is not None and (credentials_meta or not needs_credentials) and (not event_filter_input_name or (event_filter_input_name in node.input_default and any((is_on for is_on in node.input_default[event_filter_input_name].values()))))\n    if has_everything_for_webhook and resource is not None:\n        logger.debug(f'Node #{node} has everything for a webhook!')\n        if credentials_meta and (not credentials):\n            raise ValueError(f\"Cannot set up webhook for node #{node.id}: credentials #{credentials_meta['id']} not available\")\n        if event_filter_input_name:\n            event_filter = cast(dict, node.input_default[event_filter_input_name])\n            events = [block.webhook_config.event_format.format(event=event) for (event, enabled) in event_filter.items() if enabled is True]\n            logger.debug(f\"Webhook events to subscribe to: {', '.join(events)}\")\n        else:\n            events = []\n        if auto_setup_webhook:\n            assert credentials is not None\n            new_webhook = await webhooks_manager.get_suitable_auto_webhook(user_id, credentials, block.webhook_config.webhook_type, resource, events)\n        else:\n            new_webhook = await webhooks_manager.get_manual_webhook(user_id, node.graph_id, block.webhook_config.webhook_type, events)\n        logger.debug(f'Acquired webhook: {new_webhook}')\n        return await set_node_webhook(node.id, new_webhook.id)\n    else:\n        logger.debug(f'Node #{node.id} does not have everything for a webhook')\n    return node\n'Hook to be called when the node is activated/created'\nblock = get_block(node.block_id)\nnot block"
    },
    {
      "id": "n24",
      "type": "block",
      "statements": [
        "raise ValueError(f'Node #{node.id} is instance of unknown block #{node.block_id}')"
      ],
      "code": "raise ValueError(f'Node #{node.id} is instance of unknown block #{node.block_id}')"
    },
    {
      "id": "n25",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n26",
      "type": "block",
      "statements": [
        "not block.webhook_config"
      ],
      "code": "not block.webhook_config"
    },
    {
      "id": "n27",
      "type": "block",
      "statements": [
        "return node"
      ],
      "code": "return node"
    },
    {
      "id": "n28",
      "type": "block",
      "statements": [],
      "code": "\nprovider = block.webhook_config.provider\nprovider NotIn WEBHOOK_MANAGERS_BY_NAME"
    },
    {
      "id": "n29",
      "type": "block",
      "statements": [
        "raise ValueError(f'Block #{block.id} has webhook_config for provider {provider} which does not support webhooks')"
      ],
      "code": "raise ValueError(f'Block #{block.id} has webhook_config for provider {provider} which does not support webhooks')"
    },
    {
      "id": "n30",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n31",
      "type": "block",
      "statements": [
        "logger.debug(f'Activating webhook node #{node.id} with config {block.webhook_config}')",
        "webhooks_manager = WEBHOOK_MANAGERS_BY_NAME[provider]()",
        "(auto_setup_webhook := isinstance(block.webhook_config, BlockWebhookConfig))"
      ],
      "code": "logger.debug(f'Activating webhook node #{node.id} with config {block.webhook_config}')\nwebhooks_manager = WEBHOOK_MANAGERS_BY_NAME[provider]()\n(auto_setup_webhook := isinstance(block.webhook_config, BlockWebhookConfig))"
    },
    {
      "id": "n32",
      "type": "block",
      "statements": [
        "try:\n    resource = block.webhook_config.resource_format.format(**node.input_default)\nexcept KeyError:\n    resource = None",
        "resource = block.webhook_config.resource_format.format(**node.input_default)",
        "resource = None",
        "logger.debug(f'Constructed resource string {resource} from input {node.input_default}')"
      ],
      "code": "try:\n    resource = block.webhook_config.resource_format.format(**node.input_default)\nexcept KeyError:\n    resource = None\nresource = block.webhook_config.resource_format.format(**node.input_default)\nresource = None\nlogger.debug(f'Constructed resource string {resource} from input {node.input_default}')"
    },
    {
      "id": "n33",
      "type": "block",
      "statements": [
        "resource = ''"
      ],
      "code": "resource = ''"
    },
    {
      "id": "n34",
      "type": "block",
      "statements": [
        "needs_credentials = CREDENTIALS_FIELD_NAME in block.input_schema.model_fields",
        "credentials_meta = node.input_default.get(CREDENTIALS_FIELD_NAME) if needs_credentials else None",
        "event_filter_input_name = block.webhook_config.event_filter_input",
        "has_everything_for_webhook = resource is not None and (credentials_meta or not needs_credentials) and (not event_filter_input_name or (event_filter_input_name in node.input_default and any((is_on for is_on in node.input_default[event_filter_input_name].values()))))",
        "has_everything_for_webhook and resource is not None"
      ],
      "code": "needs_credentials = CREDENTIALS_FIELD_NAME in block.input_schema.model_fields\ncredentials_meta = node.input_default.get(CREDENTIALS_FIELD_NAME) if needs_credentials else None\nevent_filter_input_name = block.webhook_config.event_filter_input\nhas_everything_for_webhook = resource is not None and (credentials_meta or not needs_credentials) and (not event_filter_input_name or (event_filter_input_name in node.input_default and any((is_on for is_on in node.input_default[event_filter_input_name].values()))))\nhas_everything_for_webhook and resource is not None"
    },
    {
      "id": "n35",
      "type": "block",
      "statements": [
        "logger.debug(f'Node #{node} has everything for a webhook!')",
        "credentials_meta and (not credentials)"
      ],
      "code": "logger.debug(f'Node #{node} has everything for a webhook!')\ncredentials_meta and (not credentials)"
    },
    {
      "id": "n36",
      "type": "block",
      "statements": [
        "logger.debug(f'Node #{node.id} does not have everything for a webhook')"
      ],
      "code": "logger.debug(f'Node #{node.id} does not have everything for a webhook')\nreturn node"
    },
    {
      "id": "n37",
      "type": "block",
      "statements": [
        "raise ValueError(f\"Cannot set up webhook for node #{node.id}: credentials #{credentials_meta['id']} not available\")"
      ],
      "code": "raise ValueError(f\"Cannot set up webhook for node #{node.id}: credentials #{credentials_meta['id']} not available\")"
    },
    {
      "id": "n38",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n39",
      "type": "block",
      "statements": [
        "event_filter_input_name"
      ],
      "code": "event_filter_input_name"
    },
    {
      "id": "n40",
      "type": "block",
      "statements": [
        "event_filter = cast(dict, node.input_default[event_filter_input_name])",
        "events = [block.webhook_config.event_format.format(event=event) for (event, enabled) in event_filter.items() if enabled is True]",
        "logger.debug(f\"Webhook events to subscribe to: {', '.join(events)}\")"
      ],
      "code": "event_filter = cast(dict, node.input_default[event_filter_input_name])\nevents = [block.webhook_config.event_format.format(event=event) for (event, enabled) in event_filter.items() if enabled is True]\nlogger.debug(f\"Webhook events to subscribe to: {', '.join(events)}\")"
    },
    {
      "id": "n41",
      "type": "block",
      "statements": [
        "events = []"
      ],
      "code": "events = []"
    },
    {
      "id": "n42",
      "type": "block",
      "statements": [
        "auto_setup_webhook"
      ],
      "code": "auto_setup_webhook"
    },
    {
      "id": "n43",
      "type": "block",
      "statements": [
        "assert credentials is not None",
        "new_webhook = await webhooks_manager.get_suitable_auto_webhook(user_id, credentials, block.webhook_config.webhook_type, resource, events)"
      ],
      "code": "assert credentials is not None\nnew_webhook = await webhooks_manager.get_suitable_auto_webhook(user_id, credentials, block.webhook_config.webhook_type, resource, events)"
    },
    {
      "id": "n44",
      "type": "block",
      "statements": [
        "new_webhook = await webhooks_manager.get_manual_webhook(user_id, node.graph_id, block.webhook_config.webhook_type, events)"
      ],
      "code": "new_webhook = await webhooks_manager.get_manual_webhook(user_id, node.graph_id, block.webhook_config.webhook_type, events)"
    },
    {
      "id": "n45",
      "type": "block",
      "statements": [
        "logger.debug(f'Acquired webhook: {new_webhook}')",
        "return await set_node_webhook(node.id, new_webhook.id)"
      ],
      "code": "logger.debug(f'Acquired webhook: {new_webhook}')\nreturn await set_node_webhook(node.id, new_webhook.id)"
    },
    {
      "id": "n46",
      "type": "block",
      "statements": [
        "async def on_node_deactivate(node: 'NodeModel', *, credentials: Optional['Credentials']=None, webhooks_manager: Optional['BaseWebhooksManager']=None) -> 'NodeModel':\n    \"\"\"Hook to be called when node is deactivated/deleted\"\"\"\n    logger.debug(f'Deactivating node #{node.id}')\n    block = get_block(node.block_id)\n    if not block:\n        raise ValueError(f'Node #{node.id} is instance of unknown block #{node.block_id}')\n    if not block.webhook_config:\n        return node\n    provider = block.webhook_config.provider\n    if provider not in WEBHOOK_MANAGERS_BY_NAME:\n        raise ValueError(f'Block #{block.id} has webhook_config for provider {provider} which does not support webhooks')\n    webhooks_manager = WEBHOOK_MANAGERS_BY_NAME[provider]()\n    if node.webhook_id:\n        logger.debug(f'Node #{node.id} has webhook_id {node.webhook_id}')\n        if not node.webhook:\n            logger.error(f'Node #{node.id} has webhook_id but no webhook object')\n            raise ValueError('node.webhook not included')\n        logger.debug(f'Detaching webhook from node #{node.id}')\n        updated_node = await set_node_webhook(node.id, None)\n        webhook = node.webhook\n        logger.debug(f\"Pruning{(' and deregistering' if credentials else '')} webhook #{webhook.id}\")\n        await webhooks_manager.prune_webhook_if_dangling(webhook.id, credentials)\n        if CREDENTIALS_FIELD_NAME in block.input_schema.model_fields and (not credentials):\n            logger.warning(f'Cannot deregister webhook #{webhook.id}: credentials #{webhook.credentials_id} not available ({webhook.provider.value} webhook ID: {webhook.provider_webhook_id})')\n        return updated_node\n    logger.debug(f'Node #{node.id} has no webhook_id, returning')\n    return node",
        "'Hook to be called when node is deactivated/deleted'",
        "logger.debug(f'Deactivating node #{node.id}')",
        "block = get_block(node.block_id)",
        "not block"
      ],
      "code": "async def on_node_deactivate(node: 'NodeModel', *, credentials: Optional['Credentials']=None, webhooks_manager: Optional['BaseWebhooksManager']=None) -> 'NodeModel':\n    \"\"\"Hook to be called when node is deactivated/deleted\"\"\"\n    logger.debug(f'Deactivating node #{node.id}')\n    block = get_block(node.block_id)\n    if not block:\n        raise ValueError(f'Node #{node.id} is instance of unknown block #{node.block_id}')\n    if not block.webhook_config:\n        return node\n    provider = block.webhook_config.provider\n    if provider not in WEBHOOK_MANAGERS_BY_NAME:\n        raise ValueError(f'Block #{block.id} has webhook_config for provider {provider} which does not support webhooks')\n    webhooks_manager = WEBHOOK_MANAGERS_BY_NAME[provider]()\n    if node.webhook_id:\n        logger.debug(f'Node #{node.id} has webhook_id {node.webhook_id}')\n        if not node.webhook:\n            logger.error(f'Node #{node.id} has webhook_id but no webhook object')\n            raise ValueError('node.webhook not included')\n        logger.debug(f'Detaching webhook from node #{node.id}')\n        updated_node = await set_node_webhook(node.id, None)\n        webhook = node.webhook\n        logger.debug(f\"Pruning{(' and deregistering' if credentials else '')} webhook #{webhook.id}\")\n        await webhooks_manager.prune_webhook_if_dangling(webhook.id, credentials)\n        if CREDENTIALS_FIELD_NAME in block.input_schema.model_fields and (not credentials):\n            logger.warning(f'Cannot deregister webhook #{webhook.id}: credentials #{webhook.credentials_id} not available ({webhook.provider.value} webhook ID: {webhook.provider_webhook_id})')\n        return updated_node\n    logger.debug(f'Node #{node.id} has no webhook_id, returning')\n    return node\n'Hook to be called when node is deactivated/deleted'\nlogger.debug(f'Deactivating node #{node.id}')\nblock = get_block(node.block_id)\nnot block"
    },
    {
      "id": "n47",
      "type": "block",
      "statements": [
        "raise ValueError(f'Node #{node.id} is instance of unknown block #{node.block_id}')"
      ],
      "code": "raise ValueError(f'Node #{node.id} is instance of unknown block #{node.block_id}')"
    },
    {
      "id": "n48",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n49",
      "type": "block",
      "statements": [
        "not block.webhook_config"
      ],
      "code": "not block.webhook_config"
    },
    {
      "id": "n50",
      "type": "block",
      "statements": [
        "return node"
      ],
      "code": "return node"
    },
    {
      "id": "n51",
      "type": "block",
      "statements": [],
      "code": "\nprovider = block.webhook_config.provider\nprovider NotIn WEBHOOK_MANAGERS_BY_NAME"
    },
    {
      "id": "n52",
      "type": "block",
      "statements": [
        "raise ValueError(f'Block #{block.id} has webhook_config for provider {provider} which does not support webhooks')"
      ],
      "code": "raise ValueError(f'Block #{block.id} has webhook_config for provider {provider} which does not support webhooks')"
    },
    {
      "id": "n53",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n54",
      "type": "block",
      "statements": [
        "webhooks_manager = WEBHOOK_MANAGERS_BY_NAME[provider]()",
        "node.webhook_id"
      ],
      "code": "webhooks_manager = WEBHOOK_MANAGERS_BY_NAME[provider]()\nnode.webhook_id"
    },
    {
      "id": "n55",
      "type": "block",
      "statements": [
        "logger.debug(f'Node #{node.id} has webhook_id {node.webhook_id}')",
        "not node.webhook"
      ],
      "code": "logger.debug(f'Node #{node.id} has webhook_id {node.webhook_id}')\nnot node.webhook"
    },
    {
      "id": "n56",
      "type": "block",
      "statements": [],
      "code": "\nlogger.debug(f'Node #{node.id} has no webhook_id, returning')\nreturn node"
    },
    {
      "id": "n57",
      "type": "block",
      "statements": [
        "logger.error(f'Node #{node.id} has webhook_id but no webhook object')",
        "raise ValueError('node.webhook not included')"
      ],
      "code": "logger.error(f'Node #{node.id} has webhook_id but no webhook object')\nraise ValueError('node.webhook not included')"
    },
    {
      "id": "n58",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n59",
      "type": "block",
      "statements": [
        "logger.debug(f'Detaching webhook from node #{node.id}')",
        "updated_node = await set_node_webhook(node.id, None)",
        "webhook = node.webhook",
        "logger.debug(f\"Pruning{(' and deregistering' if credentials else '')} webhook #{webhook.id}\")",
        "await webhooks_manager.prune_webhook_if_dangling(webhook.id, credentials)",
        "CREDENTIALS_FIELD_NAME in block.input_schema.model_fields and (not credentials)"
      ],
      "code": "logger.debug(f'Detaching webhook from node #{node.id}')\nupdated_node = await set_node_webhook(node.id, None)\nwebhook = node.webhook\nlogger.debug(f\"Pruning{(' and deregistering' if credentials else '')} webhook #{webhook.id}\")\nawait webhooks_manager.prune_webhook_if_dangling(webhook.id, credentials)\nCREDENTIALS_FIELD_NAME in block.input_schema.model_fields and (not credentials)"
    },
    {
      "id": "n60",
      "type": "block",
      "statements": [
        "logger.warning(f'Cannot deregister webhook #{webhook.id}: credentials #{webhook.credentials_id} not available ({webhook.provider.value} webhook ID: {webhook.provider_webhook_id})')"
      ],
      "code": "logger.warning(f'Cannot deregister webhook #{webhook.id}: credentials #{webhook.credentials_id} not available ({webhook.provider.value} webhook ID: {webhook.provider_webhook_id})')"
    },
    {
      "id": "n61",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n62",
      "type": "block",
      "statements": [
        "return updated_node"
      ],
      "code": "return updated_node"
    }
  ],
  "edges": [
    {
      "source": "n19",
      "target": "n14"
    },
    {
      "source": "n38",
      "target": "n39"
    },
    {
      "source": "n54",
      "target": "n55"
    },
    {
      "source": "n15",
      "target": "n18"
    },
    {
      "source": "n48",
      "target": "n49"
    },
    {
      "source": "n0",
      "target": "n1"
    },
    {
      "source": "n14",
      "target": "n15"
    },
    {
      "source": "n7",
      "target": "n11"
    },
    {
      "source": "n23",
      "target": "n25"
    },
    {
      "source": "n47",
      "target": "n49"
    },
    {
      "source": "n21",
      "target": "n22"
    },
    {
      "source": "n44",
      "target": "n45"
    },
    {
      "source": "n35",
      "target": "n37"
    },
    {
      "source": "n17",
      "target": "n21"
    },
    {
      "source": "n53",
      "target": "n54"
    },
    {
      "source": "n34",
      "target": "n35"
    },
    {
      "source": "n59",
      "target": "n60"
    },
    {
      "source": "n7",
      "target": "n10"
    },
    {
      "source": "n26",
      "target": "n27"
    },
    {
      "source": "n2",
      "target": "n3"
    },
    {
      "source": "n13",
      "target": "n14"
    },
    {
      "source": "n17",
      "target": "n20"
    },
    {
      "source": "n23",
      "target": "n24"
    },
    {
      "source": "n3",
      "target": "n4"
    },
    {
      "source": "n8",
      "target": "n9"
    },
    {
      "source": "n12",
      "target": "n9"
    },
    {
      "source": "n9",
      "target": "n4"
    },
    {
      "source": "n41",
      "target": "n42"
    },
    {
      "source": "n4",
      "target": "n6"
    },
    {
      "source": "n4",
      "target": "n5"
    },
    {
      "source": "n42",
      "target": "n43"
    },
    {
      "source": "n30",
      "target": "n31"
    },
    {
      "source": "n34",
      "target": "n36"
    },
    {
      "source": "n31",
      "target": "n33"
    },
    {
      "source": "n51",
      "target": "n53"
    },
    {
      "source": "n55",
      "target": "n57"
    },
    {
      "source": "n51",
      "target": "n52"
    },
    {
      "source": "n55",
      "target": "n58"
    },
    {
      "source": "n49",
      "target": "n50"
    },
    {
      "source": "n46",
      "target": "n47"
    },
    {
      "source": "n14",
      "target": "n16"
    },
    {
      "source": "n49",
      "target": "n51"
    },
    {
      "source": "n46",
      "target": "n48"
    },
    {
      "source": "n37",
      "target": "n39"
    },
    {
      "source": "n28",
      "target": "n30"
    },
    {
      "source": "n22",
      "target": "n19"
    },
    {
      "source": "n54",
      "target": "n56"
    },
    {
      "source": "n31",
      "target": "n32"
    },
    {
      "source": "n59",
      "target": "n61"
    },
    {
      "source": "n10",
      "target": "n12"
    },
    {
      "source": "n11",
      "target": "n12"
    },
    {
      "source": "n58",
      "target": "n59"
    },
    {
      "source": "n18",
      "target": "n19"
    },
    {
      "source": "n28",
      "target": "n29"
    },
    {
      "source": "n29",
      "target": "n31"
    },
    {
      "source": "n42",
      "target": "n44"
    },
    {
      "source": "n5",
      "target": "n8"
    },
    {
      "source": "n40",
      "target": "n42"
    },
    {
      "source": "n26",
      "target": "n28"
    },
    {
      "source": "n1",
      "target": "n3"
    },
    {
      "source": "n24",
      "target": "n26"
    },
    {
      "source": "n52",
      "target": "n54"
    },
    {
      "source": "n25",
      "target": "n26"
    },
    {
      "source": "n43",
      "target": "n45"
    },
    {
      "source": "n60",
      "target": "n62"
    },
    {
      "source": "n33",
      "target": "n34"
    },
    {
      "source": "n61",
      "target": "n62"
    },
    {
      "source": "n35",
      "target": "n38"
    },
    {
      "source": "n20",
      "target": "n22"
    },
    {
      "source": "n39",
      "target": "n40"
    },
    {
      "source": "n5",
      "target": "n7"
    },
    {
      "source": "n32",
      "target": "n34"
    },
    {
      "source": "n39",
      "target": "n41"
    },
    {
      "source": "n0",
      "target": "n2"
    },
    {
      "source": "n57",
      "target": "n59"
    },
    {
      "source": "n15",
      "target": "n17"
    }
  ]
}