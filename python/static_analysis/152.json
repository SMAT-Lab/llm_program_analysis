{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "import subprocess",
        "import sys",
        "import time",
        "def wait_for_postgres(max_retries=5, delay=5):\n    for _ in range(max_retries):\n        try:\n            result = subprocess.run(['docker', 'compose', '-f', 'docker-compose.test.yaml', 'exec', 'postgres-test', 'pg_isready', '-U', 'postgres', '-d', 'postgres'], check=True, capture_output=True, text=True)\n            if 'accepting connections' in result.stdout:\n                print('PostgreSQL is ready.')\n                return True\n        except subprocess.CalledProcessError:\n            print(f'PostgreSQL is not ready yet. Retrying in {delay} seconds...')\n            time.sleep(delay)\n    print('Failed to connect to PostgreSQL.')\n    return False"
      ],
      "code": "import subprocess\nimport sys\nimport time\ndef wait_for_postgres(max_retries=5, delay=5):\n    for _ in range(max_retries):\n        try:\n            result = subprocess.run(['docker', 'compose', '-f', 'docker-compose.test.yaml', 'exec', 'postgres-test', 'pg_isready', '-U', 'postgres', '-d', 'postgres'], check=True, capture_output=True, text=True)\n            if 'accepting connections' in result.stdout:\n                print('PostgreSQL is ready.')\n                return True\n        except subprocess.CalledProcessError:\n            print(f'PostgreSQL is not ready yet. Retrying in {delay} seconds...')\n            time.sleep(delay)\n    print('Failed to connect to PostgreSQL.')\n    return False"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "_",
        "range(max_retries)"
      ],
      "code": "_\nrange(max_retries)"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [
        "try:\n    result = subprocess.run(['docker', 'compose', '-f', 'docker-compose.test.yaml', 'exec', 'postgres-test', 'pg_isready', '-U', 'postgres', '-d', 'postgres'], check=True, capture_output=True, text=True)\n    if 'accepting connections' in result.stdout:\n        print('PostgreSQL is ready.')\n        return True\nexcept subprocess.CalledProcessError:\n    print(f'PostgreSQL is not ready yet. Retrying in {delay} seconds...')\n    time.sleep(delay)",
        "result = subprocess.run(['docker', 'compose', '-f', 'docker-compose.test.yaml', 'exec', 'postgres-test', 'pg_isready', '-U', 'postgres', '-d', 'postgres'], check=True, capture_output=True, text=True)",
        "'accepting connections' In result.stdout"
      ],
      "code": "try:\n    result = subprocess.run(['docker', 'compose', '-f', 'docker-compose.test.yaml', 'exec', 'postgres-test', 'pg_isready', '-U', 'postgres', '-d', 'postgres'], check=True, capture_output=True, text=True)\n    if 'accepting connections' in result.stdout:\n        print('PostgreSQL is ready.')\n        return True\nexcept subprocess.CalledProcessError:\n    print(f'PostgreSQL is not ready yet. Retrying in {delay} seconds...')\n    time.sleep(delay)\nresult = subprocess.run(['docker', 'compose', '-f', 'docker-compose.test.yaml', 'exec', 'postgres-test', 'pg_isready', '-U', 'postgres', '-d', 'postgres'], check=True, capture_output=True, text=True)\n'accepting connections' In result.stdout"
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [
        "print('Failed to connect to PostgreSQL.')",
        "return False"
      ],
      "code": "print('Failed to connect to PostgreSQL.')\nreturn False"
    },
    {
      "id": "n4",
      "type": "block",
      "statements": [
        "print('PostgreSQL is ready.')",
        "return True"
      ],
      "code": "print('PostgreSQL is ready.')\nreturn True"
    },
    {
      "id": "n5",
      "type": "block",
      "statements": [],
      "code": "\nprint(f'PostgreSQL is not ready yet. Retrying in {delay} seconds...')\ntime.sleep(delay)"
    },
    {
      "id": "n6",
      "type": "block",
      "statements": [
        "def run_command(command, check=True):\n    try:\n        subprocess.run(command, check=check)\n    except subprocess.CalledProcessError as e:\n        print(f'Command failed: {e}')\n        sys.exit(1)",
        "try:\n    subprocess.run(command, check=check)\nexcept subprocess.CalledProcessError as e:\n    print(f'Command failed: {e}')\n    sys.exit(1)",
        "subprocess.run(command)",
        "print(f'Command failed: {e}')",
        "sys.exit(1)",
        "def test():\n    run_command(['docker', 'compose', '-f', 'docker-compose.test.yaml', 'up', '-d', 'postgres-test'])\n    if not wait_for_postgres():\n        run_command(['docker', 'compose', '-f', 'docker-compose.test.yaml', 'down'])\n        sys.exit(1)\n    run_command(['prisma', 'migrate', 'dev'])\n    result = subprocess.run(['pytest'] + sys.argv[1:], check=False)\n    run_command(['docker', 'compose', '-f', 'docker-compose.test.yaml', 'down'])\n    sys.exit(result.returncode)",
        "run_command(['docker', 'compose', '-f', 'docker-compose.test.yaml', 'up', '-d', 'postgres-test'])",
        "not wait_for_postgres()"
      ],
      "code": "def run_command(command, check=True):\n    try:\n        subprocess.run(command, check=check)\n    except subprocess.CalledProcessError as e:\n        print(f'Command failed: {e}')\n        sys.exit(1)\ntry:\n    subprocess.run(command, check=check)\nexcept subprocess.CalledProcessError as e:\n    print(f'Command failed: {e}')\n    sys.exit(1)\nsubprocess.run(command)\nprint(f'Command failed: {e}')\nsys.exit(1)\ndef test():\n    run_command(['docker', 'compose', '-f', 'docker-compose.test.yaml', 'up', '-d', 'postgres-test'])\n    if not wait_for_postgres():\n        run_command(['docker', 'compose', '-f', 'docker-compose.test.yaml', 'down'])\n        sys.exit(1)\n    run_command(['prisma', 'migrate', 'dev'])\n    result = subprocess.run(['pytest'] + sys.argv[1:], check=False)\n    run_command(['docker', 'compose', '-f', 'docker-compose.test.yaml', 'down'])\n    sys.exit(result.returncode)\nrun_command(['docker', 'compose', '-f', 'docker-compose.test.yaml', 'up', '-d', 'postgres-test'])\nnot wait_for_postgres()"
    },
    {
      "id": "n7",
      "type": "block",
      "statements": [
        "run_command(['docker', 'compose', '-f', 'docker-compose.test.yaml', 'down'])",
        "sys.exit(1)"
      ],
      "code": "run_command(['docker', 'compose', '-f', 'docker-compose.test.yaml', 'down'])\nsys.exit(1)"
    },
    {
      "id": "n8",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n9",
      "type": "block",
      "statements": [
        "run_command(['prisma', 'migrate', 'dev'])",
        "result = subprocess.run(['pytest'] + sys.argv[1:], check=False)",
        "run_command(['docker', 'compose', '-f', 'docker-compose.test.yaml', 'down'])",
        "sys.exit(result.returncode)"
      ],
      "code": "run_command(['prisma', 'migrate', 'dev'])\nresult = subprocess.run(['pytest'] + sys.argv[1:], check=False)\nrun_command(['docker', 'compose', '-f', 'docker-compose.test.yaml', 'down'])\nsys.exit(result.returncode)"
    }
  ],
  "edges": [
    {
      "source": "n6",
      "target": "n7"
    },
    {
      "source": "n1",
      "target": "n3"
    },
    {
      "source": "n2",
      "target": "n4"
    },
    {
      "source": "n0",
      "target": "n1"
    },
    {
      "source": "n2",
      "target": "n5"
    },
    {
      "source": "n8",
      "target": "n9"
    },
    {
      "source": "n1",
      "target": "n2"
    },
    {
      "source": "n6",
      "target": "n8"
    },
    {
      "source": "n5",
      "target": "n1"
    },
    {
      "source": "n7",
      "target": "n9"
    }
  ]
}