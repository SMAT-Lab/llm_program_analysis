{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "import logging",
        "import time",
        "from typing import Sequence",
        "from backend.data import db",
        "from backend.data.block import Block, initialize_blocks",
        "from backend.data.execution import ExecutionResult, ExecutionStatus",
        "from backend.data.model import CREDENTIALS_FIELD_NAME",
        "from backend.data.user import create_default_user",
        "from backend.executor import DatabaseManager, ExecutionManager, ExecutionScheduler",
        "from backend.server.rest_api import AgentServer",
        "from backend.server.utils import get_user_id",
        "log = logging.getLogger(__name__)",
        "class SpinTestServer:\n\n    def __init__(self):\n        self.db_api = DatabaseManager()\n        self.exec_manager = ExecutionManager()\n        self.agent_server = AgentServer()\n        self.scheduler = ExecutionScheduler()\n\n    @staticmethod\n    def test_get_user_id():\n        return '3e53486c-cf57-477e-ba2a-cb02dc828e1a'\n\n    async def __aenter__(self):\n        self.setup_dependency_overrides()\n        self.db_api.__enter__()\n        self.agent_server.__enter__()\n        self.exec_manager.__enter__()\n        self.scheduler.__enter__()\n        await db.connect()\n        await initialize_blocks()\n        await create_default_user()\n        return self\n\n    async def __aexit__(self, exc_type, exc_val, exc_tb):\n        await db.disconnect()\n        self.scheduler.__exit__(exc_type, exc_val, exc_tb)\n        self.exec_manager.__exit__(exc_type, exc_val, exc_tb)\n        self.agent_server.__exit__(exc_type, exc_val, exc_tb)\n        self.db_api.__exit__(exc_type, exc_val, exc_tb)\n\n    def setup_dependency_overrides(self):\n        self.agent_server.set_test_dependency_overrides({get_user_id: self.test_get_user_id})",
        "def __init__(self):\n    self.db_api = DatabaseManager()\n    self.exec_manager = ExecutionManager()\n    self.agent_server = AgentServer()\n    self.scheduler = ExecutionScheduler()",
        "self.db_api = DatabaseManager()",
        "self.exec_manager = ExecutionManager()",
        "self.agent_server = AgentServer()",
        "self.scheduler = ExecutionScheduler()",
        "@staticmethod\ndef test_get_user_id():\n    return '3e53486c-cf57-477e-ba2a-cb02dc828e1a'",
        "return '3e53486c-cf57-477e-ba2a-cb02dc828e1a'"
      ],
      "code": "import logging\nimport time\nfrom typing import Sequence\nfrom backend.data import db\nfrom backend.data.block import Block, initialize_blocks\nfrom backend.data.execution import ExecutionResult, ExecutionStatus\nfrom backend.data.model import CREDENTIALS_FIELD_NAME\nfrom backend.data.user import create_default_user\nfrom backend.executor import DatabaseManager, ExecutionManager, ExecutionScheduler\nfrom backend.server.rest_api import AgentServer\nfrom backend.server.utils import get_user_id\nlog = logging.getLogger(__name__)\nclass SpinTestServer:\n\n    def __init__(self):\n        self.db_api = DatabaseManager()\n        self.exec_manager = ExecutionManager()\n        self.agent_server = AgentServer()\n        self.scheduler = ExecutionScheduler()\n\n    @staticmethod\n    def test_get_user_id():\n        return '3e53486c-cf57-477e-ba2a-cb02dc828e1a'\n\n    async def __aenter__(self):\n        self.setup_dependency_overrides()\n        self.db_api.__enter__()\n        self.agent_server.__enter__()\n        self.exec_manager.__enter__()\n        self.scheduler.__enter__()\n        await db.connect()\n        await initialize_blocks()\n        await create_default_user()\n        return self\n\n    async def __aexit__(self, exc_type, exc_val, exc_tb):\n        await db.disconnect()\n        self.scheduler.__exit__(exc_type, exc_val, exc_tb)\n        self.exec_manager.__exit__(exc_type, exc_val, exc_tb)\n        self.agent_server.__exit__(exc_type, exc_val, exc_tb)\n        self.db_api.__exit__(exc_type, exc_val, exc_tb)\n\n    def setup_dependency_overrides(self):\n        self.agent_server.set_test_dependency_overrides({get_user_id: self.test_get_user_id})\ndef __init__(self):\n    self.db_api = DatabaseManager()\n    self.exec_manager = ExecutionManager()\n    self.agent_server = AgentServer()\n    self.scheduler = ExecutionScheduler()\nself.db_api = DatabaseManager()\nself.exec_manager = ExecutionManager()\nself.agent_server = AgentServer()\nself.scheduler = ExecutionScheduler()\n@staticmethod\ndef test_get_user_id():\n    return '3e53486c-cf57-477e-ba2a-cb02dc828e1a'\nreturn '3e53486c-cf57-477e-ba2a-cb02dc828e1a'"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "async def __aenter__(self):\n    self.setup_dependency_overrides()\n    self.db_api.__enter__()\n    self.agent_server.__enter__()\n    self.exec_manager.__enter__()\n    self.scheduler.__enter__()\n    await db.connect()\n    await initialize_blocks()\n    await create_default_user()\n    return self",
        "self.setup_dependency_overrides()",
        "self.db_api.__enter__()",
        "self.agent_server.__enter__()",
        "self.exec_manager.__enter__()",
        "self.scheduler.__enter__()",
        "await db.connect()",
        "await initialize_blocks()",
        "await create_default_user()",
        "return self"
      ],
      "code": "async def __aenter__(self):\n    self.setup_dependency_overrides()\n    self.db_api.__enter__()\n    self.agent_server.__enter__()\n    self.exec_manager.__enter__()\n    self.scheduler.__enter__()\n    await db.connect()\n    await initialize_blocks()\n    await create_default_user()\n    return self\nself.setup_dependency_overrides()\nself.db_api.__enter__()\nself.agent_server.__enter__()\nself.exec_manager.__enter__()\nself.scheduler.__enter__()\nawait db.connect()\nawait initialize_blocks()\nawait create_default_user()\nreturn self"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [
        "async def __aexit__(self, exc_type, exc_val, exc_tb):\n    await db.disconnect()\n    self.scheduler.__exit__(exc_type, exc_val, exc_tb)\n    self.exec_manager.__exit__(exc_type, exc_val, exc_tb)\n    self.agent_server.__exit__(exc_type, exc_val, exc_tb)\n    self.db_api.__exit__(exc_type, exc_val, exc_tb)",
        "await db.disconnect()",
        "self.scheduler.__exit__(exc_type, exc_val, exc_tb)",
        "self.exec_manager.__exit__(exc_type, exc_val, exc_tb)",
        "self.agent_server.__exit__(exc_type, exc_val, exc_tb)",
        "self.db_api.__exit__(exc_type, exc_val, exc_tb)",
        "def setup_dependency_overrides(self):\n    self.agent_server.set_test_dependency_overrides({get_user_id: self.test_get_user_id})",
        "self.agent_server.set_test_dependency_overrides({get_user_id: self.test_get_user_id})",
        "async def wait_execution(user_id: str, graph_id: str, graph_exec_id: str, timeout: int=20) -> Sequence[ExecutionResult]:\n\n    async def is_execution_completed():\n        status = await AgentServer().test_get_graph_run_status(graph_exec_id, user_id)\n        log.info(f'Execution status: {status}')\n        if status == ExecutionStatus.FAILED:\n            log.info('Execution failed')\n            raise Exception('Execution failed')\n        return status == ExecutionStatus.COMPLETED\n    for i in range(timeout):\n        if await is_execution_completed():\n            return await AgentServer().test_get_graph_run_node_execution_results(graph_id, graph_exec_id, user_id)\n        time.sleep(1)\n    assert False, 'Execution did not complete in time.'",
        "async def is_execution_completed():\n    status = await AgentServer().test_get_graph_run_status(graph_exec_id, user_id)\n    log.info(f'Execution status: {status}')\n    if status == ExecutionStatus.FAILED:\n        log.info('Execution failed')\n        raise Exception('Execution failed')\n    return status == ExecutionStatus.COMPLETED",
        "status = await AgentServer().test_get_graph_run_status(graph_exec_id, user_id)",
        "log.info(f'Execution status: {status}')",
        "status Eq ExecutionStatus.FAILED"
      ],
      "code": "async def __aexit__(self, exc_type, exc_val, exc_tb):\n    await db.disconnect()\n    self.scheduler.__exit__(exc_type, exc_val, exc_tb)\n    self.exec_manager.__exit__(exc_type, exc_val, exc_tb)\n    self.agent_server.__exit__(exc_type, exc_val, exc_tb)\n    self.db_api.__exit__(exc_type, exc_val, exc_tb)\nawait db.disconnect()\nself.scheduler.__exit__(exc_type, exc_val, exc_tb)\nself.exec_manager.__exit__(exc_type, exc_val, exc_tb)\nself.agent_server.__exit__(exc_type, exc_val, exc_tb)\nself.db_api.__exit__(exc_type, exc_val, exc_tb)\ndef setup_dependency_overrides(self):\n    self.agent_server.set_test_dependency_overrides({get_user_id: self.test_get_user_id})\nself.agent_server.set_test_dependency_overrides({get_user_id: self.test_get_user_id})\nasync def wait_execution(user_id: str, graph_id: str, graph_exec_id: str, timeout: int=20) -> Sequence[ExecutionResult]:\n\n    async def is_execution_completed():\n        status = await AgentServer().test_get_graph_run_status(graph_exec_id, user_id)\n        log.info(f'Execution status: {status}')\n        if status == ExecutionStatus.FAILED:\n            log.info('Execution failed')\n            raise Exception('Execution failed')\n        return status == ExecutionStatus.COMPLETED\n    for i in range(timeout):\n        if await is_execution_completed():\n            return await AgentServer().test_get_graph_run_node_execution_results(graph_id, graph_exec_id, user_id)\n        time.sleep(1)\n    assert False, 'Execution did not complete in time.'\nasync def is_execution_completed():\n    status = await AgentServer().test_get_graph_run_status(graph_exec_id, user_id)\n    log.info(f'Execution status: {status}')\n    if status == ExecutionStatus.FAILED:\n        log.info('Execution failed')\n        raise Exception('Execution failed')\n    return status == ExecutionStatus.COMPLETED\nstatus = await AgentServer().test_get_graph_run_status(graph_exec_id, user_id)\nlog.info(f'Execution status: {status}')\nstatus Eq ExecutionStatus.FAILED"
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [
        "log.info('Execution failed')",
        "raise Exception('Execution failed')"
      ],
      "code": "log.info('Execution failed')\nraise Exception('Execution failed')"
    },
    {
      "id": "n4",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n5",
      "type": "block",
      "statements": [
        "return status == ExecutionStatus.COMPLETED"
      ],
      "code": "return status == ExecutionStatus.COMPLETED"
    },
    {
      "id": "n6",
      "type": "block",
      "statements": [
        "i",
        "range(timeout)"
      ],
      "code": "i\nrange(timeout)"
    },
    {
      "id": "n7",
      "type": "block",
      "statements": [
        "await is_execution_completed()"
      ],
      "code": "await is_execution_completed()"
    },
    {
      "id": "n8",
      "type": "block",
      "statements": [
        "assert False, 'Execution did not complete in time.'",
        "def execute_block_test(block: Block):\n    prefix = f'[Test-{block.name}]'\n    if not block.test_input or not block.test_output:\n        log.info(f'{prefix} No test data provided')\n        return\n    if not isinstance(block.test_input, list):\n        block.test_input = [block.test_input]\n    if not isinstance(block.test_output, list):\n        block.test_output = [block.test_output]\n    output_index = 0\n    log.info(f'{prefix} Executing {len(block.test_input)} tests...')\n    prefix = ' ' * 4 + prefix\n    for (mock_name, mock_obj) in (block.test_mock or {}).items():\n        log.info(f'{prefix} mocking {mock_name}...')\n        if hasattr(block, mock_name):\n            setattr(block, mock_name, mock_obj)\n        else:\n            log.info(f'{prefix} mock {mock_name} not found in block')\n    extra_exec_kwargs = {}\n    if CREDENTIALS_FIELD_NAME in block.input_schema.model_fields:\n        if not block.test_credentials:\n            raise ValueError(f'{prefix} requires credentials but has no test_credentials')\n        extra_exec_kwargs[CREDENTIALS_FIELD_NAME] = block.test_credentials\n    for input_data in block.test_input:\n        log.info(f'{prefix} in: {input_data}')\n        for (output_name, output_data) in block.execute(input_data, **extra_exec_kwargs):\n            if output_index >= len(block.test_output):\n                raise ValueError(f'{prefix} produced output more than expected')\n            (ex_output_name, ex_output_data) = block.test_output[output_index]\n\n            def compare(data, expected_data):\n                if data == expected_data:\n                    is_matching = True\n                elif isinstance(expected_data, type):\n                    is_matching = isinstance(data, expected_data)\n                elif callable(expected_data):\n                    is_matching = expected_data(data)\n                else:\n                    is_matching = False\n                mark = '✅' if is_matching else '❌'\n                log.info(f'{prefix} {mark} comparing `{data}` vs `{expected_data}`')\n                if not is_matching:\n                    raise ValueError(f'{prefix}: wrong output {data} vs {expected_data}')\n            compare(output_data, ex_output_data)\n            compare(output_name, ex_output_name)\n            output_index += 1\n    if output_index < len(block.test_output):\n        raise ValueError(f'{prefix} produced output less than expected. output_index={output_index}, len(block.test_output)={len(block.test_output)}')",
        "prefix = f'[Test-{block.name}]'",
        "not block.test_input or not block.test_output"
      ],
      "code": "assert False, 'Execution did not complete in time.'\ndef execute_block_test(block: Block):\n    prefix = f'[Test-{block.name}]'\n    if not block.test_input or not block.test_output:\n        log.info(f'{prefix} No test data provided')\n        return\n    if not isinstance(block.test_input, list):\n        block.test_input = [block.test_input]\n    if not isinstance(block.test_output, list):\n        block.test_output = [block.test_output]\n    output_index = 0\n    log.info(f'{prefix} Executing {len(block.test_input)} tests...')\n    prefix = ' ' * 4 + prefix\n    for (mock_name, mock_obj) in (block.test_mock or {}).items():\n        log.info(f'{prefix} mocking {mock_name}...')\n        if hasattr(block, mock_name):\n            setattr(block, mock_name, mock_obj)\n        else:\n            log.info(f'{prefix} mock {mock_name} not found in block')\n    extra_exec_kwargs = {}\n    if CREDENTIALS_FIELD_NAME in block.input_schema.model_fields:\n        if not block.test_credentials:\n            raise ValueError(f'{prefix} requires credentials but has no test_credentials')\n        extra_exec_kwargs[CREDENTIALS_FIELD_NAME] = block.test_credentials\n    for input_data in block.test_input:\n        log.info(f'{prefix} in: {input_data}')\n        for (output_name, output_data) in block.execute(input_data, **extra_exec_kwargs):\n            if output_index >= len(block.test_output):\n                raise ValueError(f'{prefix} produced output more than expected')\n            (ex_output_name, ex_output_data) = block.test_output[output_index]\n\n            def compare(data, expected_data):\n                if data == expected_data:\n                    is_matching = True\n                elif isinstance(expected_data, type):\n                    is_matching = isinstance(data, expected_data)\n                elif callable(expected_data):\n                    is_matching = expected_data(data)\n                else:\n                    is_matching = False\n                mark = '✅' if is_matching else '❌'\n                log.info(f'{prefix} {mark} comparing `{data}` vs `{expected_data}`')\n                if not is_matching:\n                    raise ValueError(f'{prefix}: wrong output {data} vs {expected_data}')\n            compare(output_data, ex_output_data)\n            compare(output_name, ex_output_name)\n            output_index += 1\n    if output_index < len(block.test_output):\n        raise ValueError(f'{prefix} produced output less than expected. output_index={output_index}, len(block.test_output)={len(block.test_output)}')\nprefix = f'[Test-{block.name}]'\nnot block.test_input or not block.test_output"
    },
    {
      "id": "n9",
      "type": "block",
      "statements": [
        "return await AgentServer().test_get_graph_run_node_execution_results(graph_id, graph_exec_id, user_id)"
      ],
      "code": "return await AgentServer().test_get_graph_run_node_execution_results(graph_id, graph_exec_id, user_id)"
    },
    {
      "id": "n10",
      "type": "block",
      "statements": [],
      "code": "\ntime.sleep(1)"
    },
    {
      "id": "n11",
      "type": "block",
      "statements": [
        "log.info(f'{prefix} No test data provided')",
        "return"
      ],
      "code": "log.info(f'{prefix} No test data provided')\nreturn"
    },
    {
      "id": "n12",
      "type": "block",
      "statements": [],
      "code": "\nnot isinstance(block.test_input, list)"
    },
    {
      "id": "n13",
      "type": "block",
      "statements": [
        "block.test_input = [block.test_input]"
      ],
      "code": "block.test_input = [block.test_input]"
    },
    {
      "id": "n14",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n15",
      "type": "block",
      "statements": [
        "not isinstance(block.test_output, list)"
      ],
      "code": "not isinstance(block.test_output, list)"
    },
    {
      "id": "n16",
      "type": "block",
      "statements": [
        "block.test_output = [block.test_output]"
      ],
      "code": "block.test_output = [block.test_output]"
    },
    {
      "id": "n17",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n18",
      "type": "block",
      "statements": [
        "output_index = 0",
        "log.info(f'{prefix} Executing {len(block.test_input)} tests...')",
        "prefix = ' ' * 4 + prefix"
      ],
      "code": "output_index = 0\nlog.info(f'{prefix} Executing {len(block.test_input)} tests...')\nprefix = ' ' * 4 + prefix"
    },
    {
      "id": "n19",
      "type": "block",
      "statements": [
        "(mock_name, mock_obj)",
        "(block.test_mock or {}).items()"
      ],
      "code": "(mock_name, mock_obj)\n(block.test_mock or {}).items()"
    },
    {
      "id": "n20",
      "type": "block",
      "statements": [
        "log.info(f'{prefix} mocking {mock_name}...')",
        "hasattr(block, mock_name)"
      ],
      "code": "log.info(f'{prefix} mocking {mock_name}...')\nhasattr(block, mock_name)"
    },
    {
      "id": "n21",
      "type": "block",
      "statements": [
        "extra_exec_kwargs = {}",
        "CREDENTIALS_FIELD_NAME In block.input_schema.model_fields"
      ],
      "code": "extra_exec_kwargs = {}\nCREDENTIALS_FIELD_NAME In block.input_schema.model_fields"
    },
    {
      "id": "n22",
      "type": "block",
      "statements": [
        "setattr(block, mock_name, mock_obj)"
      ],
      "code": "setattr(block, mock_name, mock_obj)"
    },
    {
      "id": "n23",
      "type": "block",
      "statements": [
        "log.info(f'{prefix} mock {mock_name} not found in block')"
      ],
      "code": "log.info(f'{prefix} mock {mock_name} not found in block')"
    },
    {
      "id": "n24",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n25",
      "type": "block",
      "statements": [
        "not block.test_credentials"
      ],
      "code": "not block.test_credentials"
    },
    {
      "id": "n26",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n27",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n28",
      "type": "block",
      "statements": [
        "raise ValueError(f'{prefix} requires credentials but has no test_credentials')"
      ],
      "code": "raise ValueError(f'{prefix} requires credentials but has no test_credentials')"
    },
    {
      "id": "n29",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n30",
      "type": "block",
      "statements": [
        "extra_exec_kwargs[CREDENTIALS_FIELD_NAME] = block.test_credentials"
      ],
      "code": "extra_exec_kwargs[CREDENTIALS_FIELD_NAME] = block.test_credentials"
    },
    {
      "id": "n31",
      "type": "block",
      "statements": [
        "input_data",
        "block.test_input"
      ],
      "code": "input_data\nblock.test_input"
    },
    {
      "id": "n32",
      "type": "block",
      "statements": [
        "log.info(f'{prefix} in: {input_data}')"
      ],
      "code": "log.info(f'{prefix} in: {input_data}')"
    },
    {
      "id": "n33",
      "type": "block",
      "statements": [
        "output_index Lt len(block.test_output)"
      ],
      "code": "output_index Lt len(block.test_output)"
    },
    {
      "id": "n34",
      "type": "block",
      "statements": [
        "(output_name, output_data)",
        "block.execute(input_data)"
      ],
      "code": "(output_name, output_data)\nblock.execute(input_data)"
    },
    {
      "id": "n35",
      "type": "block",
      "statements": [
        "output_index GtE len(block.test_output)"
      ],
      "code": "output_index GtE len(block.test_output)"
    },
    {
      "id": "n36",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n37",
      "type": "block",
      "statements": [
        "raise ValueError(f'{prefix} produced output more than expected')"
      ],
      "code": "raise ValueError(f'{prefix} produced output more than expected')"
    },
    {
      "id": "n38",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n39",
      "type": "block",
      "statements": [
        "(ex_output_name, ex_output_data) = block.test_output[output_index]",
        "def compare(data, expected_data):\n    if data == expected_data:\n        is_matching = True\n    elif isinstance(expected_data, type):\n        is_matching = isinstance(data, expected_data)\n    elif callable(expected_data):\n        is_matching = expected_data(data)\n    else:\n        is_matching = False\n    mark = '✅' if is_matching else '❌'\n    log.info(f'{prefix} {mark} comparing `{data}` vs `{expected_data}`')\n    if not is_matching:\n        raise ValueError(f'{prefix}: wrong output {data} vs {expected_data}')",
        "data Eq expected_data"
      ],
      "code": "(ex_output_name, ex_output_data) = block.test_output[output_index]\ndef compare(data, expected_data):\n    if data == expected_data:\n        is_matching = True\n    elif isinstance(expected_data, type):\n        is_matching = isinstance(data, expected_data)\n    elif callable(expected_data):\n        is_matching = expected_data(data)\n    else:\n        is_matching = False\n    mark = '✅' if is_matching else '❌'\n    log.info(f'{prefix} {mark} comparing `{data}` vs `{expected_data}`')\n    if not is_matching:\n        raise ValueError(f'{prefix}: wrong output {data} vs {expected_data}')\ndata Eq expected_data"
    },
    {
      "id": "n40",
      "type": "block",
      "statements": [
        "is_matching = True"
      ],
      "code": "is_matching = True"
    },
    {
      "id": "n41",
      "type": "block",
      "statements": [
        "isinstance(expected_data, type)"
      ],
      "code": "isinstance(expected_data, type)"
    },
    {
      "id": "n42",
      "type": "block",
      "statements": [
        "mark = '✅' if is_matching else '❌'",
        "log.info(f'{prefix} {mark} comparing `{data}` vs `{expected_data}`')",
        "not is_matching"
      ],
      "code": "mark = '✅' if is_matching else '❌'\nlog.info(f'{prefix} {mark} comparing `{data}` vs `{expected_data}`')\nnot is_matching"
    },
    {
      "id": "n43",
      "type": "block",
      "statements": [
        "is_matching = isinstance(data, expected_data)"
      ],
      "code": "is_matching = isinstance(data, expected_data)"
    },
    {
      "id": "n44",
      "type": "block",
      "statements": [
        "callable(expected_data)"
      ],
      "code": "callable(expected_data)"
    },
    {
      "id": "n45",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n46",
      "type": "block",
      "statements": [
        "is_matching = expected_data(data)"
      ],
      "code": "is_matching = expected_data(data)"
    },
    {
      "id": "n47",
      "type": "block",
      "statements": [
        "is_matching = False"
      ],
      "code": "is_matching = False"
    },
    {
      "id": "n48",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n49",
      "type": "block",
      "statements": [
        "raise ValueError(f'{prefix}: wrong output {data} vs {expected_data}')"
      ],
      "code": "raise ValueError(f'{prefix}: wrong output {data} vs {expected_data}')"
    },
    {
      "id": "n50",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n51",
      "type": "block",
      "statements": [
        "compare(output_data, ex_output_data)",
        "compare(output_name, ex_output_name)",
        "output_index += 1"
      ],
      "code": "compare(output_data, ex_output_data)\ncompare(output_name, ex_output_name)\noutput_index += 1"
    },
    {
      "id": "n52",
      "type": "block",
      "statements": [
        "raise ValueError(f'{prefix} produced output less than expected. output_index={output_index}, len(block.test_output)={len(block.test_output)}')"
      ],
      "code": "raise ValueError(f'{prefix} produced output less than expected. output_index={output_index}, len(block.test_output)={len(block.test_output)}')"
    },
    {
      "id": "n53",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n54",
      "type": "block",
      "statements": [],
      "code": ""
    }
  ],
  "edges": [
    {
      "source": "n38",
      "target": "n39"
    },
    {
      "source": "n42",
      "target": "n50"
    },
    {
      "source": "n6",
      "target": "n7"
    },
    {
      "source": "n14",
      "target": "n15"
    },
    {
      "source": "n17",
      "target": "n18"
    },
    {
      "source": "n33",
      "target": "n53"
    },
    {
      "source": "n33",
      "target": "n52"
    },
    {
      "source": "n35",
      "target": "n37"
    },
    {
      "source": "n8",
      "target": "n12"
    },
    {
      "source": "n50",
      "target": "n51"
    },
    {
      "source": "n34",
      "target": "n35"
    },
    {
      "source": "n53",
      "target": "n54"
    },
    {
      "source": "n51",
      "target": "n34"
    },
    {
      "source": "n7",
      "target": "n10"
    },
    {
      "source": "n26",
      "target": "n27"
    },
    {
      "source": "n2",
      "target": "n3"
    },
    {
      "source": "n20",
      "target": "n23"
    },
    {
      "source": "n19",
      "target": "n21"
    },
    {
      "source": "n23",
      "target": "n24"
    },
    {
      "source": "n42",
      "target": "n49"
    },
    {
      "source": "n2",
      "target": "n4"
    },
    {
      "source": "n21",
      "target": "n26"
    },
    {
      "source": "n13",
      "target": "n15"
    },
    {
      "source": "n16",
      "target": "n18"
    },
    {
      "source": "n24",
      "target": "n19"
    },
    {
      "source": "n25",
      "target": "n29"
    },
    {
      "source": "n19",
      "target": "n20"
    },
    {
      "source": "n4",
      "target": "n5"
    },
    {
      "source": "n6",
      "target": "n8"
    },
    {
      "source": "n25",
      "target": "n28"
    },
    {
      "source": "n12",
      "target": "n13"
    },
    {
      "source": "n36",
      "target": "n31"
    },
    {
      "source": "n47",
      "target": "n48"
    },
    {
      "source": "n34",
      "target": "n36"
    },
    {
      "source": "n31",
      "target": "n33"
    },
    {
      "source": "n15",
      "target": "n16"
    },
    {
      "source": "n29",
      "target": "n30"
    },
    {
      "source": "n12",
      "target": "n14"
    },
    {
      "source": "n44",
      "target": "n47"
    },
    {
      "source": "n44",
      "target": "n46"
    },
    {
      "source": "n41",
      "target": "n43"
    },
    {
      "source": "n10",
      "target": "n6"
    },
    {
      "source": "n49",
      "target": "n51"
    },
    {
      "source": "n46",
      "target": "n48"
    },
    {
      "source": "n37",
      "target": "n39"
    },
    {
      "source": "n28",
      "target": "n30"
    },
    {
      "source": "n31",
      "target": "n32"
    },
    {
      "source": "n18",
      "target": "n19"
    },
    {
      "source": "n8",
      "target": "n11"
    },
    {
      "source": "n7",
      "target": "n9"
    },
    {
      "source": "n48",
      "target": "n45"
    },
    {
      "source": "n52",
      "target": "n54"
    },
    {
      "source": "n40",
      "target": "n42"
    },
    {
      "source": "n30",
      "target": "n27"
    },
    {
      "source": "n43",
      "target": "n45"
    },
    {
      "source": "n3",
      "target": "n5"
    },
    {
      "source": "n35",
      "target": "n38"
    },
    {
      "source": "n22",
      "target": "n24"
    },
    {
      "source": "n41",
      "target": "n44"
    },
    {
      "source": "n20",
      "target": "n22"
    },
    {
      "source": "n39",
      "target": "n40"
    },
    {
      "source": "n45",
      "target": "n42"
    },
    {
      "source": "n32",
      "target": "n34"
    },
    {
      "source": "n27",
      "target": "n31"
    },
    {
      "source": "n39",
      "target": "n41"
    },
    {
      "source": "n21",
      "target": "n25"
    },
    {
      "source": "n15",
      "target": "n17"
    }
  ]
}