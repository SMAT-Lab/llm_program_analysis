{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "def get_1s_count(number: int) -> int:\n    \"\"\"\n    Count the number of set bits in a 32 bit integer using Brian Kernighan's way.\n    Ref - https://graphics.stanford.edu/~seander/bithacks.html#CountBitsSetKernighan\n    >>> get_1s_count(25)\n    3\n    >>> get_1s_count(37)\n    3\n    >>> get_1s_count(21)\n    3\n    >>> get_1s_count(58)\n    4\n    >>> get_1s_count(0)\n    0\n    >>> get_1s_count(256)\n    1\n    >>> get_1s_count(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    >>> get_1s_count(0.8)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    >>> get_1s_count(\"25\")\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    \"\"\"\n    if not isinstance(number, int) or number < 0:\n        raise ValueError('Input must be a non-negative integer')\n    count = 0\n    while number:\n        number &= number - 1\n        count += 1\n    return count",
        "'\\n    Count the number of set bits in a 32 bit integer using Brian Kernighan\\'s way.\\n    Ref - https://graphics.stanford.edu/~seander/bithacks.html#CountBitsSetKernighan\\n    >>> get_1s_count(25)\\n    3\\n    >>> get_1s_count(37)\\n    3\\n    >>> get_1s_count(21)\\n    3\\n    >>> get_1s_count(58)\\n    4\\n    >>> get_1s_count(0)\\n    0\\n    >>> get_1s_count(256)\\n    1\\n    >>> get_1s_count(-1)\\n    Traceback (most recent call last):\\n        ...\\n    ValueError: Input must be a non-negative integer\\n    >>> get_1s_count(0.8)\\n    Traceback (most recent call last):\\n        ...\\n    ValueError: Input must be a non-negative integer\\n    >>> get_1s_count(\"25\")\\n    Traceback (most recent call last):\\n        ...\\n    ValueError: Input must be a non-negative integer\\n    '",
        "not isinstance(number, int) or number < 0"
      ],
      "code": "def get_1s_count(number: int) -> int:\n    \"\"\"\n    Count the number of set bits in a 32 bit integer using Brian Kernighan's way.\n    Ref - https://graphics.stanford.edu/~seander/bithacks.html#CountBitsSetKernighan\n    >>> get_1s_count(25)\n    3\n    >>> get_1s_count(37)\n    3\n    >>> get_1s_count(21)\n    3\n    >>> get_1s_count(58)\n    4\n    >>> get_1s_count(0)\n    0\n    >>> get_1s_count(256)\n    1\n    >>> get_1s_count(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    >>> get_1s_count(0.8)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    >>> get_1s_count(\"25\")\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    \"\"\"\n    if not isinstance(number, int) or number < 0:\n        raise ValueError('Input must be a non-negative integer')\n    count = 0\n    while number:\n        number &= number - 1\n        count += 1\n    return count\n'\\n    Count the number of set bits in a 32 bit integer using Brian Kernighan\\'s way.\\n    Ref - https://graphics.stanford.edu/~seander/bithacks.html#CountBitsSetKernighan\\n    >>> get_1s_count(25)\\n    3\\n    >>> get_1s_count(37)\\n    3\\n    >>> get_1s_count(21)\\n    3\\n    >>> get_1s_count(58)\\n    4\\n    >>> get_1s_count(0)\\n    0\\n    >>> get_1s_count(256)\\n    1\\n    >>> get_1s_count(-1)\\n    Traceback (most recent call last):\\n        ...\\n    ValueError: Input must be a non-negative integer\\n    >>> get_1s_count(0.8)\\n    Traceback (most recent call last):\\n        ...\\n    ValueError: Input must be a non-negative integer\\n    >>> get_1s_count(\"25\")\\n    Traceback (most recent call last):\\n        ...\\n    ValueError: Input must be a non-negative integer\\n    '\nnot isinstance(number, int) or number < 0"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "raise ValueError('Input must be a non-negative integer')"
      ],
      "code": "raise ValueError('Input must be a non-negative integer')"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [
        "count = 0"
      ],
      "code": "count = 0"
    },
    {
      "id": "n4",
      "type": "block",
      "statements": [
        "number"
      ],
      "code": "number"
    },
    {
      "id": "n5",
      "type": "block",
      "statements": [
        "number &= number - 1",
        "count += 1"
      ],
      "code": "number &= number - 1\ncount += 1"
    },
    {
      "id": "n6",
      "type": "block",
      "statements": [
        "return count"
      ],
      "code": "return count"
    },
    {
      "id": "n7",
      "type": "block",
      "statements": [
        "__name__ Eq '__main__'"
      ],
      "code": "__name__ Eq '__main__'"
    },
    {
      "id": "n8",
      "type": "block",
      "statements": [
        "import doctest",
        "doctest.testmod()"
      ],
      "code": "import doctest\ndoctest.testmod()"
    },
    {
      "id": "n9",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n10",
      "type": "block",
      "statements": [],
      "code": ""
    }
  ],
  "edges": [
    {
      "source": "n5",
      "target": "n4"
    },
    {
      "source": "n1",
      "target": "n3"
    },
    {
      "source": "n8",
      "target": "n10"
    },
    {
      "source": "n0",
      "target": "n1"
    },
    {
      "source": "n0",
      "target": "n2"
    },
    {
      "source": "n3",
      "target": "n4"
    },
    {
      "source": "n9",
      "target": "n10"
    },
    {
      "source": "n4",
      "target": "n5"
    },
    {
      "source": "n4",
      "target": "n6"
    },
    {
      "source": "n7",
      "target": "n8"
    },
    {
      "source": "n2",
      "target": "n3"
    },
    {
      "source": "n7",
      "target": "n9"
    }
  ]
}