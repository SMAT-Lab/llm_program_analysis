{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "from typing import Any, Literal",
        "from pydantic import SecretStr",
        "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema",
        "from backend.data.model import APIKeyCredentials, CredentialsField, CredentialsMetaInput, SchemaField",
        "from backend.integrations.providers import ProviderName",
        "from backend.util.request import requests",
        "TEST_CREDENTIALS = APIKeyCredentials(id='01234567-89ab-cdef-0123-456789abcdef', provider='unreal_speech', api_key=SecretStr('mock-unreal-speech-api-key'), title='Mock Unreal Speech API key', expires_at=None)",
        "TEST_CREDENTIALS_INPUT = {'provider': TEST_CREDENTIALS.provider, 'id': TEST_CREDENTIALS.id, 'type': TEST_CREDENTIALS.type, 'title': TEST_CREDENTIALS.type}",
        "class UnrealTextToSpeechBlock(Block):\n\n    class Input(BlockSchema):\n        text: str = SchemaField(description='The text to be converted to speech', placeholder='Enter the text you want to convert to speech')\n        voice_id: str = SchemaField(description='The voice ID to use for text-to-speech conversion', placeholder='Scarlett', default='Scarlett')\n        credentials: CredentialsMetaInput[Literal[ProviderName.UNREAL_SPEECH], Literal['api_key']] = CredentialsField(description='The Unreal Speech integration can be used with any API key with sufficient permissions for the blocks it is used on.')\n\n    class Output(BlockSchema):\n        mp3_url: str = SchemaField(description='The URL of the generated MP3 file')\n        error: str = SchemaField(description='Error message if the API call failed')\n\n    def __init__(self):\n        super().__init__(id='4ff1ff6d-cc40-4caa-ae69-011daa20c378', description='Converts text to speech using the Unreal Speech API', categories={BlockCategory.AI, BlockCategory.TEXT}, input_schema=UnrealTextToSpeechBlock.Input, output_schema=UnrealTextToSpeechBlock.Output, test_input={'text': 'This is a test of the text to speech API.', 'voice_id': 'Scarlett', 'credentials': TEST_CREDENTIALS_INPUT}, test_output=[('mp3_url', 'https://example.com/test.mp3')], test_mock={'call_unreal_speech_api': lambda *args, **kwargs: {'OutputUri': 'https://example.com/test.mp3'}}, test_credentials=TEST_CREDENTIALS)\n\n    @staticmethod\n    def call_unreal_speech_api(api_key: SecretStr, text: str, voice_id: str) -> dict[str, Any]:\n        url = 'https://api.v7.unrealspeech.com/speech'\n        headers = {'Authorization': f'Bearer {api_key.get_secret_value()}', 'Content-Type': 'application/json'}\n        data = {'Text': text, 'VoiceId': voice_id, 'Bitrate': '192k', 'Speed': '0', 'Pitch': '1', 'TimestampType': 'sentence'}\n        response = requests.post(url, headers=headers, json=data)\n        return response.json()\n\n    def run(self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs) -> BlockOutput:\n        api_response = self.call_unreal_speech_api(credentials.api_key, input_data.text, input_data.voice_id)\n        yield ('mp3_url', api_response['OutputUri'])",
        "class Input(BlockSchema):\n    text: str = SchemaField(description='The text to be converted to speech', placeholder='Enter the text you want to convert to speech')\n    voice_id: str = SchemaField(description='The voice ID to use for text-to-speech conversion', placeholder='Scarlett', default='Scarlett')\n    credentials: CredentialsMetaInput[Literal[ProviderName.UNREAL_SPEECH], Literal['api_key']] = CredentialsField(description='The Unreal Speech integration can be used with any API key with sufficient permissions for the blocks it is used on.')",
        "text: str = SchemaField(description='The text to be converted to speech', placeholder='Enter the text you want to convert to speech')",
        "voice_id: str = SchemaField(description='The voice ID to use for text-to-speech conversion', placeholder='Scarlett', default='Scarlett')",
        "credentials: CredentialsMetaInput[Literal[ProviderName.UNREAL_SPEECH], Literal['api_key']] = CredentialsField(description='The Unreal Speech integration can be used with any API key with sufficient permissions for the blocks it is used on.')",
        "class Output(BlockSchema):\n    mp3_url: str = SchemaField(description='The URL of the generated MP3 file')\n    error: str = SchemaField(description='Error message if the API call failed')",
        "mp3_url: str = SchemaField(description='The URL of the generated MP3 file')",
        "error: str = SchemaField(description='Error message if the API call failed')",
        "def __init__(self):\n    super().__init__(id='4ff1ff6d-cc40-4caa-ae69-011daa20c378', description='Converts text to speech using the Unreal Speech API', categories={BlockCategory.AI, BlockCategory.TEXT}, input_schema=UnrealTextToSpeechBlock.Input, output_schema=UnrealTextToSpeechBlock.Output, test_input={'text': 'This is a test of the text to speech API.', 'voice_id': 'Scarlett', 'credentials': TEST_CREDENTIALS_INPUT}, test_output=[('mp3_url', 'https://example.com/test.mp3')], test_mock={'call_unreal_speech_api': lambda *args, **kwargs: {'OutputUri': 'https://example.com/test.mp3'}}, test_credentials=TEST_CREDENTIALS)",
        "super().__init__()",
        "@staticmethod\ndef call_unreal_speech_api(api_key: SecretStr, text: str, voice_id: str) -> dict[str, Any]:\n    url = 'https://api.v7.unrealspeech.com/speech'\n    headers = {'Authorization': f'Bearer {api_key.get_secret_value()}', 'Content-Type': 'application/json'}\n    data = {'Text': text, 'VoiceId': voice_id, 'Bitrate': '192k', 'Speed': '0', 'Pitch': '1', 'TimestampType': 'sentence'}\n    response = requests.post(url, headers=headers, json=data)\n    return response.json()",
        "url = 'https://api.v7.unrealspeech.com/speech'",
        "headers = {'Authorization': f'Bearer {api_key.get_secret_value()}', 'Content-Type': 'application/json'}",
        "data = {'Text': text, 'VoiceId': voice_id, 'Bitrate': '192k', 'Speed': '0', 'Pitch': '1', 'TimestampType': 'sentence'}",
        "response = requests.post(url, headers=headers, json=data)",
        "return response.json()"
      ],
      "code": "from typing import Any, Literal\nfrom pydantic import SecretStr\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import APIKeyCredentials, CredentialsField, CredentialsMetaInput, SchemaField\nfrom backend.integrations.providers import ProviderName\nfrom backend.util.request import requests\nTEST_CREDENTIALS = APIKeyCredentials(id='01234567-89ab-cdef-0123-456789abcdef', provider='unreal_speech', api_key=SecretStr('mock-unreal-speech-api-key'), title='Mock Unreal Speech API key', expires_at=None)\nTEST_CREDENTIALS_INPUT = {'provider': TEST_CREDENTIALS.provider, 'id': TEST_CREDENTIALS.id, 'type': TEST_CREDENTIALS.type, 'title': TEST_CREDENTIALS.type}\nclass UnrealTextToSpeechBlock(Block):\n\n    class Input(BlockSchema):\n        text: str = SchemaField(description='The text to be converted to speech', placeholder='Enter the text you want to convert to speech')\n        voice_id: str = SchemaField(description='The voice ID to use for text-to-speech conversion', placeholder='Scarlett', default='Scarlett')\n        credentials: CredentialsMetaInput[Literal[ProviderName.UNREAL_SPEECH], Literal['api_key']] = CredentialsField(description='The Unreal Speech integration can be used with any API key with sufficient permissions for the blocks it is used on.')\n\n    class Output(BlockSchema):\n        mp3_url: str = SchemaField(description='The URL of the generated MP3 file')\n        error: str = SchemaField(description='Error message if the API call failed')\n\n    def __init__(self):\n        super().__init__(id='4ff1ff6d-cc40-4caa-ae69-011daa20c378', description='Converts text to speech using the Unreal Speech API', categories={BlockCategory.AI, BlockCategory.TEXT}, input_schema=UnrealTextToSpeechBlock.Input, output_schema=UnrealTextToSpeechBlock.Output, test_input={'text': 'This is a test of the text to speech API.', 'voice_id': 'Scarlett', 'credentials': TEST_CREDENTIALS_INPUT}, test_output=[('mp3_url', 'https://example.com/test.mp3')], test_mock={'call_unreal_speech_api': lambda *args, **kwargs: {'OutputUri': 'https://example.com/test.mp3'}}, test_credentials=TEST_CREDENTIALS)\n\n    @staticmethod\n    def call_unreal_speech_api(api_key: SecretStr, text: str, voice_id: str) -> dict[str, Any]:\n        url = 'https://api.v7.unrealspeech.com/speech'\n        headers = {'Authorization': f'Bearer {api_key.get_secret_value()}', 'Content-Type': 'application/json'}\n        data = {'Text': text, 'VoiceId': voice_id, 'Bitrate': '192k', 'Speed': '0', 'Pitch': '1', 'TimestampType': 'sentence'}\n        response = requests.post(url, headers=headers, json=data)\n        return response.json()\n\n    def run(self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs) -> BlockOutput:\n        api_response = self.call_unreal_speech_api(credentials.api_key, input_data.text, input_data.voice_id)\n        yield ('mp3_url', api_response['OutputUri'])\nclass Input(BlockSchema):\n    text: str = SchemaField(description='The text to be converted to speech', placeholder='Enter the text you want to convert to speech')\n    voice_id: str = SchemaField(description='The voice ID to use for text-to-speech conversion', placeholder='Scarlett', default='Scarlett')\n    credentials: CredentialsMetaInput[Literal[ProviderName.UNREAL_SPEECH], Literal['api_key']] = CredentialsField(description='The Unreal Speech integration can be used with any API key with sufficient permissions for the blocks it is used on.')\ntext: str = SchemaField(description='The text to be converted to speech', placeholder='Enter the text you want to convert to speech')\nvoice_id: str = SchemaField(description='The voice ID to use for text-to-speech conversion', placeholder='Scarlett', default='Scarlett')\ncredentials: CredentialsMetaInput[Literal[ProviderName.UNREAL_SPEECH], Literal['api_key']] = CredentialsField(description='The Unreal Speech integration can be used with any API key with sufficient permissions for the blocks it is used on.')\nclass Output(BlockSchema):\n    mp3_url: str = SchemaField(description='The URL of the generated MP3 file')\n    error: str = SchemaField(description='Error message if the API call failed')\nmp3_url: str = SchemaField(description='The URL of the generated MP3 file')\nerror: str = SchemaField(description='Error message if the API call failed')\ndef __init__(self):\n    super().__init__(id='4ff1ff6d-cc40-4caa-ae69-011daa20c378', description='Converts text to speech using the Unreal Speech API', categories={BlockCategory.AI, BlockCategory.TEXT}, input_schema=UnrealTextToSpeechBlock.Input, output_schema=UnrealTextToSpeechBlock.Output, test_input={'text': 'This is a test of the text to speech API.', 'voice_id': 'Scarlett', 'credentials': TEST_CREDENTIALS_INPUT}, test_output=[('mp3_url', 'https://example.com/test.mp3')], test_mock={'call_unreal_speech_api': lambda *args, **kwargs: {'OutputUri': 'https://example.com/test.mp3'}}, test_credentials=TEST_CREDENTIALS)\nsuper().__init__()\n@staticmethod\ndef call_unreal_speech_api(api_key: SecretStr, text: str, voice_id: str) -> dict[str, Any]:\n    url = 'https://api.v7.unrealspeech.com/speech'\n    headers = {'Authorization': f'Bearer {api_key.get_secret_value()}', 'Content-Type': 'application/json'}\n    data = {'Text': text, 'VoiceId': voice_id, 'Bitrate': '192k', 'Speed': '0', 'Pitch': '1', 'TimestampType': 'sentence'}\n    response = requests.post(url, headers=headers, json=data)\n    return response.json()\nurl = 'https://api.v7.unrealspeech.com/speech'\nheaders = {'Authorization': f'Bearer {api_key.get_secret_value()}', 'Content-Type': 'application/json'}\ndata = {'Text': text, 'VoiceId': voice_id, 'Bitrate': '192k', 'Speed': '0', 'Pitch': '1', 'TimestampType': 'sentence'}\nresponse = requests.post(url, headers=headers, json=data)\nreturn response.json()"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "def run(self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs) -> BlockOutput:\n    api_response = self.call_unreal_speech_api(credentials.api_key, input_data.text, input_data.voice_id)\n    yield ('mp3_url', api_response['OutputUri'])",
        "api_response = self.call_unreal_speech_api(credentials.api_key, input_data.text, input_data.voice_id)",
        "(yield ('mp3_url', api_response['OutputUri']))"
      ],
      "code": "def run(self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs) -> BlockOutput:\n    api_response = self.call_unreal_speech_api(credentials.api_key, input_data.text, input_data.voice_id)\n    yield ('mp3_url', api_response['OutputUri'])\napi_response = self.call_unreal_speech_api(credentials.api_key, input_data.text, input_data.voice_id)\n(yield ('mp3_url', api_response['OutputUri']))"
    }
  ],
  "edges": []
}