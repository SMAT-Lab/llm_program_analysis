{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "from abc import ABCMeta, abstractmethod",
        "from collections import deque",
        "from enum import Enum",
        "class Rank(Enum):\n    OPERATOR = 0\n    SUPERVISOR = 1\n    DIRECTOR = 2",
        "OPERATOR = 0",
        "SUPERVISOR = 1",
        "DIRECTOR = 2",
        "class Employee(metaclass=ABCMeta):\n\n    def __init__(self, employee_id, name, rank, call_center):\n        self.employee_id = employee_id\n        self.name = name\n        self.rank = rank\n        self.call = None\n        self.call_center = call_center\n\n    def take_call(self, call):\n        \"\"\"Assume the employee will always successfully take the call.\"\"\"\n        self.call = call\n        self.call.employee = self\n        self.call.state = CallState.IN_PROGRESS\n\n    def complete_call(self):\n        self.call.state = CallState.COMPLETE\n        self.call_center.notify_call_completed(self.call)\n\n    @abstractmethod\n    def escalate_call(self):\n        pass\n\n    def _escalate_call(self):\n        self.call.state = CallState.READY\n        call = self.call\n        self.call = None\n        self.call_center.notify_call_escalated(call)",
        "def __init__(self, employee_id, name, rank, call_center):\n    self.employee_id = employee_id\n    self.name = name\n    self.rank = rank\n    self.call = None\n    self.call_center = call_center",
        "self.employee_id = employee_id",
        "self.name = name",
        "self.rank = rank",
        "self.call = None",
        "self.call_center = call_center",
        "def take_call(self, call):\n    \"\"\"Assume the employee will always successfully take the call.\"\"\"\n    self.call = call\n    self.call.employee = self\n    self.call.state = CallState.IN_PROGRESS",
        "'Assume the employee will always successfully take the call.'",
        "self.call = call",
        "self.call.employee = self",
        "self.call.state = CallState.IN_PROGRESS",
        "def complete_call(self):\n    self.call.state = CallState.COMPLETE\n    self.call_center.notify_call_completed(self.call)",
        "self.call.state = CallState.COMPLETE",
        "self.call_center.notify_call_completed(self.call)",
        "@abstractmethod\ndef escalate_call(self):\n    pass",
        "pass",
        "def _escalate_call(self):\n    self.call.state = CallState.READY\n    call = self.call\n    self.call = None\n    self.call_center.notify_call_escalated(call)",
        "self.call.state = CallState.READY",
        "call = self.call",
        "self.call = None",
        "self.call_center.notify_call_escalated(call)",
        "class Operator(Employee):\n\n    def __init__(self, employee_id, name):\n        super(Operator, self).__init__(employee_id, name, Rank.OPERATOR)\n\n    def escalate_call(self):\n        self.call.level = Rank.SUPERVISOR\n        self._escalate_call()",
        "def __init__(self, employee_id, name):\n    super(Operator, self).__init__(employee_id, name, Rank.OPERATOR)",
        "super(Operator, self).__init__(employee_id, name, Rank.OPERATOR)",
        "def escalate_call(self):\n    self.call.level = Rank.SUPERVISOR\n    self._escalate_call()",
        "self.call.level = Rank.SUPERVISOR",
        "self._escalate_call()",
        "class Supervisor(Employee):\n\n    def __init__(self, employee_id, name):\n        super(Operator, self).__init__(employee_id, name, Rank.SUPERVISOR)\n\n    def escalate_call(self):\n        self.call.level = Rank.DIRECTOR\n        self._escalate_call()",
        "def __init__(self, employee_id, name):\n    super(Operator, self).__init__(employee_id, name, Rank.SUPERVISOR)",
        "super(Operator, self).__init__(employee_id, name, Rank.SUPERVISOR)",
        "def escalate_call(self):\n    self.call.level = Rank.DIRECTOR\n    self._escalate_call()",
        "self.call.level = Rank.DIRECTOR",
        "self._escalate_call()",
        "class Director(Employee):\n\n    def __init__(self, employee_id, name):\n        super(Operator, self).__init__(employee_id, name, Rank.DIRECTOR)\n\n    def escalate_call(self):\n        raise NotImplementedError('Directors must be able to handle any call')",
        "def __init__(self, employee_id, name):\n    super(Operator, self).__init__(employee_id, name, Rank.DIRECTOR)",
        "super(Operator, self).__init__(employee_id, name, Rank.DIRECTOR)",
        "def escalate_call(self):\n    raise NotImplementedError('Directors must be able to handle any call')",
        "raise NotImplementedError('Directors must be able to handle any call')",
        "class CallState(Enum):\n    READY = 0\n    IN_PROGRESS = 1\n    COMPLETE = 2",
        "READY = 0",
        "IN_PROGRESS = 1",
        "COMPLETE = 2",
        "class Call(object):\n\n    def __init__(self, rank):\n        self.state = CallState.READY\n        self.rank = rank\n        self.employee = None",
        "def __init__(self, rank):\n    self.state = CallState.READY\n    self.rank = rank\n    self.employee = None",
        "self.state = CallState.READY",
        "self.rank = rank",
        "self.employee = None",
        "class CallCenter(object):\n\n    def __init__(self, operators, supervisors, directors):\n        self.operators = operators\n        self.supervisors = supervisors\n        self.directors = directors\n        self.queued_calls = deque()\n\n    def dispatch_call(self, call):\n        if call.rank not in (Rank.OPERATOR, Rank.SUPERVISOR, Rank.DIRECTOR):\n            raise ValueError('Invalid call rank: {}'.format(call.rank))\n        employee = None\n        if call.rank == Rank.OPERATOR:\n            employee = self._dispatch_call(call, self.operators)\n        if call.rank == Rank.SUPERVISOR or employee is None:\n            employee = self._dispatch_call(call, self.supervisors)\n        if call.rank == Rank.DIRECTOR or employee is None:\n            employee = self._dispatch_call(call, self.directors)\n        if employee is None:\n            self.queued_calls.append(call)\n\n    def _dispatch_call(self, call, employees):\n        for employee in employees:\n            if employee.call is None:\n                employee.take_call(call)\n                return employee\n        return None\n\n    def notify_call_escalated(self, call):\n        pass\n\n    def notify_call_completed(self, call):\n        pass\n\n    def dispatch_queued_call_to_newly_freed_employee(self, call, employee):\n        pass",
        "def __init__(self, operators, supervisors, directors):\n    self.operators = operators\n    self.supervisors = supervisors\n    self.directors = directors\n    self.queued_calls = deque()",
        "self.operators = operators",
        "self.supervisors = supervisors",
        "self.directors = directors",
        "self.queued_calls = deque()",
        "def dispatch_call(self, call):\n    if call.rank not in (Rank.OPERATOR, Rank.SUPERVISOR, Rank.DIRECTOR):\n        raise ValueError('Invalid call rank: {}'.format(call.rank))\n    employee = None\n    if call.rank == Rank.OPERATOR:\n        employee = self._dispatch_call(call, self.operators)\n    if call.rank == Rank.SUPERVISOR or employee is None:\n        employee = self._dispatch_call(call, self.supervisors)\n    if call.rank == Rank.DIRECTOR or employee is None:\n        employee = self._dispatch_call(call, self.directors)\n    if employee is None:\n        self.queued_calls.append(call)",
        "call.rank NotIn (Rank.OPERATOR, Rank.SUPERVISOR, Rank.DIRECTOR)"
      ],
      "code": "from abc import ABCMeta, abstractmethod\nfrom collections import deque\nfrom enum import Enum\nclass Rank(Enum):\n    OPERATOR = 0\n    SUPERVISOR = 1\n    DIRECTOR = 2\nOPERATOR = 0\nSUPERVISOR = 1\nDIRECTOR = 2\nclass Employee(metaclass=ABCMeta):\n\n    def __init__(self, employee_id, name, rank, call_center):\n        self.employee_id = employee_id\n        self.name = name\n        self.rank = rank\n        self.call = None\n        self.call_center = call_center\n\n    def take_call(self, call):\n        \"\"\"Assume the employee will always successfully take the call.\"\"\"\n        self.call = call\n        self.call.employee = self\n        self.call.state = CallState.IN_PROGRESS\n\n    def complete_call(self):\n        self.call.state = CallState.COMPLETE\n        self.call_center.notify_call_completed(self.call)\n\n    @abstractmethod\n    def escalate_call(self):\n        pass\n\n    def _escalate_call(self):\n        self.call.state = CallState.READY\n        call = self.call\n        self.call = None\n        self.call_center.notify_call_escalated(call)\ndef __init__(self, employee_id, name, rank, call_center):\n    self.employee_id = employee_id\n    self.name = name\n    self.rank = rank\n    self.call = None\n    self.call_center = call_center\nself.employee_id = employee_id\nself.name = name\nself.rank = rank\nself.call = None\nself.call_center = call_center\ndef take_call(self, call):\n    \"\"\"Assume the employee will always successfully take the call.\"\"\"\n    self.call = call\n    self.call.employee = self\n    self.call.state = CallState.IN_PROGRESS\n'Assume the employee will always successfully take the call.'\nself.call = call\nself.call.employee = self\nself.call.state = CallState.IN_PROGRESS\ndef complete_call(self):\n    self.call.state = CallState.COMPLETE\n    self.call_center.notify_call_completed(self.call)\nself.call.state = CallState.COMPLETE\nself.call_center.notify_call_completed(self.call)\n@abstractmethod\ndef escalate_call(self):\n    pass\npass\ndef _escalate_call(self):\n    self.call.state = CallState.READY\n    call = self.call\n    self.call = None\n    self.call_center.notify_call_escalated(call)\nself.call.state = CallState.READY\ncall = self.call\nself.call = None\nself.call_center.notify_call_escalated(call)\nclass Operator(Employee):\n\n    def __init__(self, employee_id, name):\n        super(Operator, self).__init__(employee_id, name, Rank.OPERATOR)\n\n    def escalate_call(self):\n        self.call.level = Rank.SUPERVISOR\n        self._escalate_call()\ndef __init__(self, employee_id, name):\n    super(Operator, self).__init__(employee_id, name, Rank.OPERATOR)\nsuper(Operator, self).__init__(employee_id, name, Rank.OPERATOR)\ndef escalate_call(self):\n    self.call.level = Rank.SUPERVISOR\n    self._escalate_call()\nself.call.level = Rank.SUPERVISOR\nself._escalate_call()\nclass Supervisor(Employee):\n\n    def __init__(self, employee_id, name):\n        super(Operator, self).__init__(employee_id, name, Rank.SUPERVISOR)\n\n    def escalate_call(self):\n        self.call.level = Rank.DIRECTOR\n        self._escalate_call()\ndef __init__(self, employee_id, name):\n    super(Operator, self).__init__(employee_id, name, Rank.SUPERVISOR)\nsuper(Operator, self).__init__(employee_id, name, Rank.SUPERVISOR)\ndef escalate_call(self):\n    self.call.level = Rank.DIRECTOR\n    self._escalate_call()\nself.call.level = Rank.DIRECTOR\nself._escalate_call()\nclass Director(Employee):\n\n    def __init__(self, employee_id, name):\n        super(Operator, self).__init__(employee_id, name, Rank.DIRECTOR)\n\n    def escalate_call(self):\n        raise NotImplementedError('Directors must be able to handle any call')\ndef __init__(self, employee_id, name):\n    super(Operator, self).__init__(employee_id, name, Rank.DIRECTOR)\nsuper(Operator, self).__init__(employee_id, name, Rank.DIRECTOR)\ndef escalate_call(self):\n    raise NotImplementedError('Directors must be able to handle any call')\nraise NotImplementedError('Directors must be able to handle any call')\nclass CallState(Enum):\n    READY = 0\n    IN_PROGRESS = 1\n    COMPLETE = 2\nREADY = 0\nIN_PROGRESS = 1\nCOMPLETE = 2\nclass Call(object):\n\n    def __init__(self, rank):\n        self.state = CallState.READY\n        self.rank = rank\n        self.employee = None\ndef __init__(self, rank):\n    self.state = CallState.READY\n    self.rank = rank\n    self.employee = None\nself.state = CallState.READY\nself.rank = rank\nself.employee = None\nclass CallCenter(object):\n\n    def __init__(self, operators, supervisors, directors):\n        self.operators = operators\n        self.supervisors = supervisors\n        self.directors = directors\n        self.queued_calls = deque()\n\n    def dispatch_call(self, call):\n        if call.rank not in (Rank.OPERATOR, Rank.SUPERVISOR, Rank.DIRECTOR):\n            raise ValueError('Invalid call rank: {}'.format(call.rank))\n        employee = None\n        if call.rank == Rank.OPERATOR:\n            employee = self._dispatch_call(call, self.operators)\n        if call.rank == Rank.SUPERVISOR or employee is None:\n            employee = self._dispatch_call(call, self.supervisors)\n        if call.rank == Rank.DIRECTOR or employee is None:\n            employee = self._dispatch_call(call, self.directors)\n        if employee is None:\n            self.queued_calls.append(call)\n\n    def _dispatch_call(self, call, employees):\n        for employee in employees:\n            if employee.call is None:\n                employee.take_call(call)\n                return employee\n        return None\n\n    def notify_call_escalated(self, call):\n        pass\n\n    def notify_call_completed(self, call):\n        pass\n\n    def dispatch_queued_call_to_newly_freed_employee(self, call, employee):\n        pass\ndef __init__(self, operators, supervisors, directors):\n    self.operators = operators\n    self.supervisors = supervisors\n    self.directors = directors\n    self.queued_calls = deque()\nself.operators = operators\nself.supervisors = supervisors\nself.directors = directors\nself.queued_calls = deque()\ndef dispatch_call(self, call):\n    if call.rank not in (Rank.OPERATOR, Rank.SUPERVISOR, Rank.DIRECTOR):\n        raise ValueError('Invalid call rank: {}'.format(call.rank))\n    employee = None\n    if call.rank == Rank.OPERATOR:\n        employee = self._dispatch_call(call, self.operators)\n    if call.rank == Rank.SUPERVISOR or employee is None:\n        employee = self._dispatch_call(call, self.supervisors)\n    if call.rank == Rank.DIRECTOR or employee is None:\n        employee = self._dispatch_call(call, self.directors)\n    if employee is None:\n        self.queued_calls.append(call)\ncall.rank NotIn (Rank.OPERATOR, Rank.SUPERVISOR, Rank.DIRECTOR)"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "raise ValueError('Invalid call rank: {}'.format(call.rank))"
      ],
      "code": "raise ValueError('Invalid call rank: {}'.format(call.rank))"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [
        "employee = None",
        "call.rank Eq Rank.OPERATOR"
      ],
      "code": "employee = None\ncall.rank Eq Rank.OPERATOR"
    },
    {
      "id": "n4",
      "type": "block",
      "statements": [
        "employee = self._dispatch_call(call, self.operators)"
      ],
      "code": "employee = self._dispatch_call(call, self.operators)"
    },
    {
      "id": "n5",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n6",
      "type": "block",
      "statements": [
        "call.rank == Rank.SUPERVISOR or employee is None"
      ],
      "code": "call.rank == Rank.SUPERVISOR or employee is None"
    },
    {
      "id": "n7",
      "type": "block",
      "statements": [
        "employee = self._dispatch_call(call, self.supervisors)"
      ],
      "code": "employee = self._dispatch_call(call, self.supervisors)"
    },
    {
      "id": "n8",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n9",
      "type": "block",
      "statements": [
        "call.rank == Rank.DIRECTOR or employee is None"
      ],
      "code": "call.rank == Rank.DIRECTOR or employee is None"
    },
    {
      "id": "n10",
      "type": "block",
      "statements": [
        "employee = self._dispatch_call(call, self.directors)"
      ],
      "code": "employee = self._dispatch_call(call, self.directors)"
    },
    {
      "id": "n11",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n12",
      "type": "block",
      "statements": [
        "employee Is None"
      ],
      "code": "employee Is None"
    },
    {
      "id": "n13",
      "type": "block",
      "statements": [
        "self.queued_calls.append(call)"
      ],
      "code": "self.queued_calls.append(call)"
    },
    {
      "id": "n14",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n15",
      "type": "block",
      "statements": [
        "def _dispatch_call(self, call, employees):\n    for employee in employees:\n        if employee.call is None:\n            employee.take_call(call)\n            return employee\n    return None"
      ],
      "code": "def _dispatch_call(self, call, employees):\n    for employee in employees:\n        if employee.call is None:\n            employee.take_call(call)\n            return employee\n    return None"
    },
    {
      "id": "n16",
      "type": "block",
      "statements": [
        "employee",
        "employees"
      ],
      "code": "employee\nemployees"
    },
    {
      "id": "n17",
      "type": "block",
      "statements": [
        "employee.call Is None"
      ],
      "code": "employee.call Is None"
    },
    {
      "id": "n18",
      "type": "block",
      "statements": [
        "return None"
      ],
      "code": "return None"
    },
    {
      "id": "n19",
      "type": "block",
      "statements": [
        "employee.take_call(call)",
        "return employee"
      ],
      "code": "employee.take_call(call)\nreturn employee"
    },
    {
      "id": "n20",
      "type": "block",
      "statements": [],
      "code": "\n"
    },
    {
      "id": "n21",
      "type": "block",
      "statements": [
        "def notify_call_escalated(self, call):\n    pass",
        "pass",
        "def notify_call_completed(self, call):\n    pass",
        "pass",
        "def dispatch_queued_call_to_newly_freed_employee(self, call, employee):\n    pass",
        "pass"
      ],
      "code": "def notify_call_escalated(self, call):\n    pass\npass\ndef notify_call_completed(self, call):\n    pass\npass\ndef dispatch_queued_call_to_newly_freed_employee(self, call, employee):\n    pass\npass"
    }
  ],
  "edges": [
    {
      "source": "n6",
      "target": "n7"
    },
    {
      "source": "n14",
      "target": "n15"
    },
    {
      "source": "n0",
      "target": "n1"
    },
    {
      "source": "n17",
      "target": "n19"
    },
    {
      "source": "n2",
      "target": "n3"
    },
    {
      "source": "n17",
      "target": "n20"
    },
    {
      "source": "n16",
      "target": "n17"
    },
    {
      "source": "n13",
      "target": "n15"
    },
    {
      "source": "n16",
      "target": "n18"
    },
    {
      "source": "n8",
      "target": "n9"
    },
    {
      "source": "n3",
      "target": "n4"
    },
    {
      "source": "n4",
      "target": "n6"
    },
    {
      "source": "n12",
      "target": "n13"
    },
    {
      "source": "n15",
      "target": "n16"
    },
    {
      "source": "n12",
      "target": "n14"
    },
    {
      "source": "n9",
      "target": "n11"
    },
    {
      "source": "n9",
      "target": "n10"
    },
    {
      "source": "n10",
      "target": "n12"
    },
    {
      "source": "n11",
      "target": "n12"
    },
    {
      "source": "n7",
      "target": "n9"
    },
    {
      "source": "n5",
      "target": "n6"
    },
    {
      "source": "n1",
      "target": "n3"
    },
    {
      "source": "n3",
      "target": "n5"
    },
    {
      "source": "n6",
      "target": "n8"
    },
    {
      "source": "n0",
      "target": "n2"
    },
    {
      "source": "n20",
      "target": "n16"
    }
  ]
}