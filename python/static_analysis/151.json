{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "from typing import Any, List",
        "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema, BlockType",
        "from backend.data.model import SchemaField",
        "from backend.util.mock import MockObject",
        "from backend.util.text import TextFormatter",
        "formatter = TextFormatter()",
        "class StoreValueBlock(Block):\n    \"\"\"\n    This block allows you to provide a constant value as a block, in a stateless manner.\n    The common use-case is simply pass the `input` data, it will `output` the same data.\n    The block output will be static, the output can be consumed multiple times.\n    \"\"\"\n\n    class Input(BlockSchema):\n        input: Any = SchemaField(description='Trigger the block to produce the output. The value is only used when `data` is None.')\n        data: Any = SchemaField(description='The constant data to be retained in the block. This value is passed as `output`.', default=None)\n\n    class Output(BlockSchema):\n        output: Any = SchemaField(description='The stored data retained in the block.')\n\n    def __init__(self):\n        super().__init__(id='1ff065e9-88e8-4358-9d82-8dc91f622ba9', description='This block forwards an input value as output, allowing reuse without change.', categories={BlockCategory.BASIC}, input_schema=StoreValueBlock.Input, output_schema=StoreValueBlock.Output, test_input=[{'input': 'Hello, World!'}, {'input': 'Hello, World!', 'data': 'Existing Data'}], test_output=[('output', 'Hello, World!'), ('output', 'Existing Data')], static_output=True)\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        yield ('output', input_data.data or input_data.input)",
        "'\\n    This block allows you to provide a constant value as a block, in a stateless manner.\\n    The common use-case is simply pass the `input` data, it will `output` the same data.\\n    The block output will be static, the output can be consumed multiple times.\\n    '",
        "class Input(BlockSchema):\n    input: Any = SchemaField(description='Trigger the block to produce the output. The value is only used when `data` is None.')\n    data: Any = SchemaField(description='The constant data to be retained in the block. This value is passed as `output`.', default=None)",
        "input: Any = SchemaField(description='Trigger the block to produce the output. The value is only used when `data` is None.')",
        "data: Any = SchemaField(description='The constant data to be retained in the block. This value is passed as `output`.', default=None)",
        "class Output(BlockSchema):\n    output: Any = SchemaField(description='The stored data retained in the block.')",
        "output: Any = SchemaField(description='The stored data retained in the block.')",
        "def __init__(self):\n    super().__init__(id='1ff065e9-88e8-4358-9d82-8dc91f622ba9', description='This block forwards an input value as output, allowing reuse without change.', categories={BlockCategory.BASIC}, input_schema=StoreValueBlock.Input, output_schema=StoreValueBlock.Output, test_input=[{'input': 'Hello, World!'}, {'input': 'Hello, World!', 'data': 'Existing Data'}], test_output=[('output', 'Hello, World!'), ('output', 'Existing Data')], static_output=True)",
        "super().__init__()",
        "def run(self, input_data: Input, **kwargs) -> BlockOutput:\n    yield ('output', input_data.data or input_data.input)",
        "(yield ('output', input_data.data or input_data.input))",
        "class PrintToConsoleBlock(Block):\n\n    class Input(BlockSchema):\n        text: str = SchemaField(description='The text to print to the console.')\n\n    class Output(BlockSchema):\n        status: str = SchemaField(description='The status of the print operation.')\n\n    def __init__(self):\n        super().__init__(id='f3b1c1b2-4c4f-4f0d-8d2f-4c4f0d8d2f4c', description='Print the given text to the console, this is used for a debugging purpose.', categories={BlockCategory.BASIC}, input_schema=PrintToConsoleBlock.Input, output_schema=PrintToConsoleBlock.Output, test_input={'text': 'Hello, World!'}, test_output=('status', 'printed'))\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        print('>>>>> Print: ', input_data.text)\n        yield ('status', 'printed')",
        "class Input(BlockSchema):\n    text: str = SchemaField(description='The text to print to the console.')",
        "text: str = SchemaField(description='The text to print to the console.')",
        "class Output(BlockSchema):\n    status: str = SchemaField(description='The status of the print operation.')",
        "status: str = SchemaField(description='The status of the print operation.')",
        "def __init__(self):\n    super().__init__(id='f3b1c1b2-4c4f-4f0d-8d2f-4c4f0d8d2f4c', description='Print the given text to the console, this is used for a debugging purpose.', categories={BlockCategory.BASIC}, input_schema=PrintToConsoleBlock.Input, output_schema=PrintToConsoleBlock.Output, test_input={'text': 'Hello, World!'}, test_output=('status', 'printed'))",
        "super().__init__()",
        "def run(self, input_data: Input, **kwargs) -> BlockOutput:\n    print('>>>>> Print: ', input_data.text)\n    yield ('status', 'printed')",
        "print('>>>>> Print: ', input_data.text)",
        "(yield ('status', 'printed'))",
        "class FindInDictionaryBlock(Block):\n\n    class Input(BlockSchema):\n        input: Any = SchemaField(description='Dictionary to lookup from')\n        key: str | int = SchemaField(description='Key to lookup in the dictionary')\n\n    class Output(BlockSchema):\n        output: Any = SchemaField(description='Value found for the given key')\n        missing: Any = SchemaField(description='Value of the input that missing the key')\n\n    def __init__(self):\n        super().__init__(id='0e50422c-6dee-4145-83d6-3a5a392f65de', description='Lookup the given key in the input dictionary/object/list and return the value.', input_schema=FindInDictionaryBlock.Input, output_schema=FindInDictionaryBlock.Output, test_input=[{'input': {'apple': 1, 'banana': 2, 'cherry': 3}, 'key': 'banana'}, {'input': {'x': 10, 'y': 20, 'z': 30}, 'key': 'w'}, {'input': [1, 2, 3], 'key': 1}, {'input': [1, 2, 3], 'key': 3}, {'input': MockObject(value='!!', key='key'), 'key': 'key'}, {'input': [{'k1': 'v1'}, {'k2': 'v2'}, {'k1': 'v3'}], 'key': 'k1'}], test_output=[('output', 2), ('missing', {'x': 10, 'y': 20, 'z': 30}), ('output', 2), ('missing', [1, 2, 3]), ('output', 'key'), ('output', ['v1', 'v3'])], categories={BlockCategory.BASIC})\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        obj = input_data.input\n        key = input_data.key\n        if isinstance(obj, dict) and key in obj:\n            yield ('output', obj[key])\n        elif isinstance(obj, list) and isinstance(key, int) and (0 <= key < len(obj)):\n            yield ('output', obj[key])\n        elif isinstance(obj, list) and isinstance(key, str):\n            if len(obj) == 0:\n                yield ('output', [])\n            elif isinstance(obj[0], dict) and key in obj[0]:\n                yield ('output', [item[key] for item in obj if key in item])\n            else:\n                yield ('output', [getattr(val, key) for val in obj if hasattr(val, key)])\n        elif isinstance(obj, object) and isinstance(key, str) and hasattr(obj, key):\n            yield ('output', getattr(obj, key))\n        else:\n            yield ('missing', input_data.input)",
        "class Input(BlockSchema):\n    input: Any = SchemaField(description='Dictionary to lookup from')\n    key: str | int = SchemaField(description='Key to lookup in the dictionary')",
        "input: Any = SchemaField(description='Dictionary to lookup from')",
        "key: str | int = SchemaField(description='Key to lookup in the dictionary')",
        "class Output(BlockSchema):\n    output: Any = SchemaField(description='Value found for the given key')\n    missing: Any = SchemaField(description='Value of the input that missing the key')",
        "output: Any = SchemaField(description='Value found for the given key')",
        "missing: Any = SchemaField(description='Value of the input that missing the key')",
        "def __init__(self):\n    super().__init__(id='0e50422c-6dee-4145-83d6-3a5a392f65de', description='Lookup the given key in the input dictionary/object/list and return the value.', input_schema=FindInDictionaryBlock.Input, output_schema=FindInDictionaryBlock.Output, test_input=[{'input': {'apple': 1, 'banana': 2, 'cherry': 3}, 'key': 'banana'}, {'input': {'x': 10, 'y': 20, 'z': 30}, 'key': 'w'}, {'input': [1, 2, 3], 'key': 1}, {'input': [1, 2, 3], 'key': 3}, {'input': MockObject(value='!!', key='key'), 'key': 'key'}, {'input': [{'k1': 'v1'}, {'k2': 'v2'}, {'k1': 'v3'}], 'key': 'k1'}], test_output=[('output', 2), ('missing', {'x': 10, 'y': 20, 'z': 30}), ('output', 2), ('missing', [1, 2, 3]), ('output', 'key'), ('output', ['v1', 'v3'])], categories={BlockCategory.BASIC})",
        "super().__init__()",
        "def run(self, input_data: Input, **kwargs) -> BlockOutput:\n    obj = input_data.input\n    key = input_data.key\n    if isinstance(obj, dict) and key in obj:\n        yield ('output', obj[key])\n    elif isinstance(obj, list) and isinstance(key, int) and (0 <= key < len(obj)):\n        yield ('output', obj[key])\n    elif isinstance(obj, list) and isinstance(key, str):\n        if len(obj) == 0:\n            yield ('output', [])\n        elif isinstance(obj[0], dict) and key in obj[0]:\n            yield ('output', [item[key] for item in obj if key in item])\n        else:\n            yield ('output', [getattr(val, key) for val in obj if hasattr(val, key)])\n    elif isinstance(obj, object) and isinstance(key, str) and hasattr(obj, key):\n        yield ('output', getattr(obj, key))\n    else:\n        yield ('missing', input_data.input)",
        "obj = input_data.input",
        "key = input_data.key",
        "isinstance(obj, dict) and key in obj"
      ],
      "code": "from typing import Any, List\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema, BlockType\nfrom backend.data.model import SchemaField\nfrom backend.util.mock import MockObject\nfrom backend.util.text import TextFormatter\nformatter = TextFormatter()\nclass StoreValueBlock(Block):\n    \"\"\"\n    This block allows you to provide a constant value as a block, in a stateless manner.\n    The common use-case is simply pass the `input` data, it will `output` the same data.\n    The block output will be static, the output can be consumed multiple times.\n    \"\"\"\n\n    class Input(BlockSchema):\n        input: Any = SchemaField(description='Trigger the block to produce the output. The value is only used when `data` is None.')\n        data: Any = SchemaField(description='The constant data to be retained in the block. This value is passed as `output`.', default=None)\n\n    class Output(BlockSchema):\n        output: Any = SchemaField(description='The stored data retained in the block.')\n\n    def __init__(self):\n        super().__init__(id='1ff065e9-88e8-4358-9d82-8dc91f622ba9', description='This block forwards an input value as output, allowing reuse without change.', categories={BlockCategory.BASIC}, input_schema=StoreValueBlock.Input, output_schema=StoreValueBlock.Output, test_input=[{'input': 'Hello, World!'}, {'input': 'Hello, World!', 'data': 'Existing Data'}], test_output=[('output', 'Hello, World!'), ('output', 'Existing Data')], static_output=True)\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        yield ('output', input_data.data or input_data.input)\n'\\n    This block allows you to provide a constant value as a block, in a stateless manner.\\n    The common use-case is simply pass the `input` data, it will `output` the same data.\\n    The block output will be static, the output can be consumed multiple times.\\n    '\nclass Input(BlockSchema):\n    input: Any = SchemaField(description='Trigger the block to produce the output. The value is only used when `data` is None.')\n    data: Any = SchemaField(description='The constant data to be retained in the block. This value is passed as `output`.', default=None)\ninput: Any = SchemaField(description='Trigger the block to produce the output. The value is only used when `data` is None.')\ndata: Any = SchemaField(description='The constant data to be retained in the block. This value is passed as `output`.', default=None)\nclass Output(BlockSchema):\n    output: Any = SchemaField(description='The stored data retained in the block.')\noutput: Any = SchemaField(description='The stored data retained in the block.')\ndef __init__(self):\n    super().__init__(id='1ff065e9-88e8-4358-9d82-8dc91f622ba9', description='This block forwards an input value as output, allowing reuse without change.', categories={BlockCategory.BASIC}, input_schema=StoreValueBlock.Input, output_schema=StoreValueBlock.Output, test_input=[{'input': 'Hello, World!'}, {'input': 'Hello, World!', 'data': 'Existing Data'}], test_output=[('output', 'Hello, World!'), ('output', 'Existing Data')], static_output=True)\nsuper().__init__()\ndef run(self, input_data: Input, **kwargs) -> BlockOutput:\n    yield ('output', input_data.data or input_data.input)\n(yield ('output', input_data.data or input_data.input))\nclass PrintToConsoleBlock(Block):\n\n    class Input(BlockSchema):\n        text: str = SchemaField(description='The text to print to the console.')\n\n    class Output(BlockSchema):\n        status: str = SchemaField(description='The status of the print operation.')\n\n    def __init__(self):\n        super().__init__(id='f3b1c1b2-4c4f-4f0d-8d2f-4c4f0d8d2f4c', description='Print the given text to the console, this is used for a debugging purpose.', categories={BlockCategory.BASIC}, input_schema=PrintToConsoleBlock.Input, output_schema=PrintToConsoleBlock.Output, test_input={'text': 'Hello, World!'}, test_output=('status', 'printed'))\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        print('>>>>> Print: ', input_data.text)\n        yield ('status', 'printed')\nclass Input(BlockSchema):\n    text: str = SchemaField(description='The text to print to the console.')\ntext: str = SchemaField(description='The text to print to the console.')\nclass Output(BlockSchema):\n    status: str = SchemaField(description='The status of the print operation.')\nstatus: str = SchemaField(description='The status of the print operation.')\ndef __init__(self):\n    super().__init__(id='f3b1c1b2-4c4f-4f0d-8d2f-4c4f0d8d2f4c', description='Print the given text to the console, this is used for a debugging purpose.', categories={BlockCategory.BASIC}, input_schema=PrintToConsoleBlock.Input, output_schema=PrintToConsoleBlock.Output, test_input={'text': 'Hello, World!'}, test_output=('status', 'printed'))\nsuper().__init__()\ndef run(self, input_data: Input, **kwargs) -> BlockOutput:\n    print('>>>>> Print: ', input_data.text)\n    yield ('status', 'printed')\nprint('>>>>> Print: ', input_data.text)\n(yield ('status', 'printed'))\nclass FindInDictionaryBlock(Block):\n\n    class Input(BlockSchema):\n        input: Any = SchemaField(description='Dictionary to lookup from')\n        key: str | int = SchemaField(description='Key to lookup in the dictionary')\n\n    class Output(BlockSchema):\n        output: Any = SchemaField(description='Value found for the given key')\n        missing: Any = SchemaField(description='Value of the input that missing the key')\n\n    def __init__(self):\n        super().__init__(id='0e50422c-6dee-4145-83d6-3a5a392f65de', description='Lookup the given key in the input dictionary/object/list and return the value.', input_schema=FindInDictionaryBlock.Input, output_schema=FindInDictionaryBlock.Output, test_input=[{'input': {'apple': 1, 'banana': 2, 'cherry': 3}, 'key': 'banana'}, {'input': {'x': 10, 'y': 20, 'z': 30}, 'key': 'w'}, {'input': [1, 2, 3], 'key': 1}, {'input': [1, 2, 3], 'key': 3}, {'input': MockObject(value='!!', key='key'), 'key': 'key'}, {'input': [{'k1': 'v1'}, {'k2': 'v2'}, {'k1': 'v3'}], 'key': 'k1'}], test_output=[('output', 2), ('missing', {'x': 10, 'y': 20, 'z': 30}), ('output', 2), ('missing', [1, 2, 3]), ('output', 'key'), ('output', ['v1', 'v3'])], categories={BlockCategory.BASIC})\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        obj = input_data.input\n        key = input_data.key\n        if isinstance(obj, dict) and key in obj:\n            yield ('output', obj[key])\n        elif isinstance(obj, list) and isinstance(key, int) and (0 <= key < len(obj)):\n            yield ('output', obj[key])\n        elif isinstance(obj, list) and isinstance(key, str):\n            if len(obj) == 0:\n                yield ('output', [])\n            elif isinstance(obj[0], dict) and key in obj[0]:\n                yield ('output', [item[key] for item in obj if key in item])\n            else:\n                yield ('output', [getattr(val, key) for val in obj if hasattr(val, key)])\n        elif isinstance(obj, object) and isinstance(key, str) and hasattr(obj, key):\n            yield ('output', getattr(obj, key))\n        else:\n            yield ('missing', input_data.input)\nclass Input(BlockSchema):\n    input: Any = SchemaField(description='Dictionary to lookup from')\n    key: str | int = SchemaField(description='Key to lookup in the dictionary')\ninput: Any = SchemaField(description='Dictionary to lookup from')\nkey: str | int = SchemaField(description='Key to lookup in the dictionary')\nclass Output(BlockSchema):\n    output: Any = SchemaField(description='Value found for the given key')\n    missing: Any = SchemaField(description='Value of the input that missing the key')\noutput: Any = SchemaField(description='Value found for the given key')\nmissing: Any = SchemaField(description='Value of the input that missing the key')\ndef __init__(self):\n    super().__init__(id='0e50422c-6dee-4145-83d6-3a5a392f65de', description='Lookup the given key in the input dictionary/object/list and return the value.', input_schema=FindInDictionaryBlock.Input, output_schema=FindInDictionaryBlock.Output, test_input=[{'input': {'apple': 1, 'banana': 2, 'cherry': 3}, 'key': 'banana'}, {'input': {'x': 10, 'y': 20, 'z': 30}, 'key': 'w'}, {'input': [1, 2, 3], 'key': 1}, {'input': [1, 2, 3], 'key': 3}, {'input': MockObject(value='!!', key='key'), 'key': 'key'}, {'input': [{'k1': 'v1'}, {'k2': 'v2'}, {'k1': 'v3'}], 'key': 'k1'}], test_output=[('output', 2), ('missing', {'x': 10, 'y': 20, 'z': 30}), ('output', 2), ('missing', [1, 2, 3]), ('output', 'key'), ('output', ['v1', 'v3'])], categories={BlockCategory.BASIC})\nsuper().__init__()\ndef run(self, input_data: Input, **kwargs) -> BlockOutput:\n    obj = input_data.input\n    key = input_data.key\n    if isinstance(obj, dict) and key in obj:\n        yield ('output', obj[key])\n    elif isinstance(obj, list) and isinstance(key, int) and (0 <= key < len(obj)):\n        yield ('output', obj[key])\n    elif isinstance(obj, list) and isinstance(key, str):\n        if len(obj) == 0:\n            yield ('output', [])\n        elif isinstance(obj[0], dict) and key in obj[0]:\n            yield ('output', [item[key] for item in obj if key in item])\n        else:\n            yield ('output', [getattr(val, key) for val in obj if hasattr(val, key)])\n    elif isinstance(obj, object) and isinstance(key, str) and hasattr(obj, key):\n        yield ('output', getattr(obj, key))\n    else:\n        yield ('missing', input_data.input)\nobj = input_data.input\nkey = input_data.key\nisinstance(obj, dict) and key in obj"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "(yield ('output', obj[key]))"
      ],
      "code": "(yield ('output', obj[key]))"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [
        "isinstance(obj, list) and isinstance(key, int) and (0 <= key < len(obj))"
      ],
      "code": "isinstance(obj, list) and isinstance(key, int) and (0 <= key < len(obj))"
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [
        "class AgentInputBlock(Block):\n    \"\"\"\n    This block is used to provide input to the graph.\n\n    It takes in a value, name, description, default values list and bool to limit selection to default values.\n\n    It Outputs the value passed as input.\n    \"\"\"\n\n    class Input(BlockSchema):\n        name: str = SchemaField(description='The name of the input.')\n        value: Any = SchemaField(description='The value to be passed as input.', default=None)\n        title: str | None = SchemaField(description='The title of the input.', default=None, advanced=True)\n        description: str | None = SchemaField(description='The description of the input.', default=None, advanced=True)\n        placeholder_values: List[Any] = SchemaField(description='The placeholder values to be passed as input.', default=[], advanced=True)\n        limit_to_placeholder_values: bool = SchemaField(description='Whether to limit the selection to placeholder values.', default=False, advanced=True)\n        advanced: bool = SchemaField(description='Whether to show the input in the advanced section, if the field is not required.', default=False, advanced=True)\n        secret: bool = SchemaField(description='Whether the input should be treated as a secret.', default=False, advanced=True)\n\n    class Output(BlockSchema):\n        result: Any = SchemaField(description='The value passed as input.')\n\n    def __init__(self):\n        super().__init__(id='c0a8e994-ebf1-4a9c-a4d8-89d09c86741b', description='This block is used to provide input to the graph.', input_schema=AgentInputBlock.Input, output_schema=AgentInputBlock.Output, test_input=[{'value': 'Hello, World!', 'name': 'input_1', 'description': 'This is a test input.', 'placeholder_values': [], 'limit_to_placeholder_values': False}, {'value': 'Hello, World!', 'name': 'input_2', 'description': 'This is a test input.', 'placeholder_values': ['Hello, World!'], 'limit_to_placeholder_values': True}], test_output=[('result', 'Hello, World!'), ('result', 'Hello, World!')], categories={BlockCategory.INPUT, BlockCategory.BASIC}, block_type=BlockType.INPUT, static_output=True)\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        yield ('result', input_data.value)",
        "'\\n    This block is used to provide input to the graph.\\n\\n    It takes in a value, name, description, default values list and bool to limit selection to default values.\\n\\n    It Outputs the value passed as input.\\n    '",
        "class Input(BlockSchema):\n    name: str = SchemaField(description='The name of the input.')\n    value: Any = SchemaField(description='The value to be passed as input.', default=None)\n    title: str | None = SchemaField(description='The title of the input.', default=None, advanced=True)\n    description: str | None = SchemaField(description='The description of the input.', default=None, advanced=True)\n    placeholder_values: List[Any] = SchemaField(description='The placeholder values to be passed as input.', default=[], advanced=True)\n    limit_to_placeholder_values: bool = SchemaField(description='Whether to limit the selection to placeholder values.', default=False, advanced=True)\n    advanced: bool = SchemaField(description='Whether to show the input in the advanced section, if the field is not required.', default=False, advanced=True)\n    secret: bool = SchemaField(description='Whether the input should be treated as a secret.', default=False, advanced=True)",
        "name: str = SchemaField(description='The name of the input.')",
        "value: Any = SchemaField(description='The value to be passed as input.', default=None)",
        "title: str | None = SchemaField(description='The title of the input.', default=None, advanced=True)",
        "description: str | None = SchemaField(description='The description of the input.', default=None, advanced=True)",
        "placeholder_values: List[Any] = SchemaField(description='The placeholder values to be passed as input.', default=[], advanced=True)",
        "limit_to_placeholder_values: bool = SchemaField(description='Whether to limit the selection to placeholder values.', default=False, advanced=True)",
        "advanced: bool = SchemaField(description='Whether to show the input in the advanced section, if the field is not required.', default=False, advanced=True)",
        "secret: bool = SchemaField(description='Whether the input should be treated as a secret.', default=False, advanced=True)",
        "class Output(BlockSchema):\n    result: Any = SchemaField(description='The value passed as input.')",
        "result: Any = SchemaField(description='The value passed as input.')",
        "def __init__(self):\n    super().__init__(id='c0a8e994-ebf1-4a9c-a4d8-89d09c86741b', description='This block is used to provide input to the graph.', input_schema=AgentInputBlock.Input, output_schema=AgentInputBlock.Output, test_input=[{'value': 'Hello, World!', 'name': 'input_1', 'description': 'This is a test input.', 'placeholder_values': [], 'limit_to_placeholder_values': False}, {'value': 'Hello, World!', 'name': 'input_2', 'description': 'This is a test input.', 'placeholder_values': ['Hello, World!'], 'limit_to_placeholder_values': True}], test_output=[('result', 'Hello, World!'), ('result', 'Hello, World!')], categories={BlockCategory.INPUT, BlockCategory.BASIC}, block_type=BlockType.INPUT, static_output=True)",
        "super().__init__()",
        "def run(self, input_data: Input, **kwargs) -> BlockOutput:\n    yield ('result', input_data.value)",
        "(yield ('result', input_data.value))",
        "class AgentOutputBlock(Block):\n    \"\"\"\n    Records the output of the graph for users to see.\n\n    Behavior:\n        If `format` is provided and the `value` is of a type that can be formatted,\n        the block attempts to format the recorded_value using the `format`.\n        If formatting fails or no `format` is provided, the raw `value` is output.\n    \"\"\"\n\n    class Input(BlockSchema):\n        value: Any = SchemaField(description='The value to be recorded as output.', default=None, advanced=False)\n        name: str = SchemaField(description='The name of the output.')\n        title: str | None = SchemaField(description='The title of the output.', default=None, advanced=True)\n        description: str | None = SchemaField(description='The description of the output.', default=None, advanced=True)\n        format: str = SchemaField(description='The format string to be used to format the recorded_value.', default='', advanced=True)\n        advanced: bool = SchemaField(description='Whether to treat the output as advanced.', default=False, advanced=True)\n        secret: bool = SchemaField(description='Whether the output should be treated as a secret.', default=False, advanced=True)\n\n    class Output(BlockSchema):\n        output: Any = SchemaField(description='The value recorded as output.')\n\n    def __init__(self):\n        super().__init__(id='363ae599-353e-4804-937e-b2ee3cef3da4', description='Stores the output of the graph for users to see.', input_schema=AgentOutputBlock.Input, output_schema=AgentOutputBlock.Output, test_input=[{'value': 'Hello, World!', 'name': 'output_1', 'description': 'This is a test output.', 'format': '{{ output_1 }}!!'}, {'value': '42', 'name': 'output_2', 'description': 'This is another test output.', 'format': '{{ output_2 }}'}, {'value': MockObject(value='!!', key='key'), 'name': 'output_3', 'description': 'This is a test output with a mock object.', 'format': '{{ output_3 }}'}], test_output=[('output', 'Hello, World!!!'), ('output', '42'), ('output', MockObject(value='!!', key='key'))], categories={BlockCategory.OUTPUT, BlockCategory.BASIC}, block_type=BlockType.OUTPUT, static_output=True)\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        \"\"\"\n        Attempts to format the recorded_value using the fmt_string if provided.\n        If formatting fails or no fmt_string is given, returns the original recorded_value.\n        \"\"\"\n        if input_data.format:\n            try:\n                yield ('output', formatter.format_string(input_data.format, {input_data.name: input_data.value}))\n            except Exception as e:\n                yield ('output', f'Error: {e}, {input_data.value}')\n        else:\n            yield ('output', input_data.value)",
        "'\\n    Records the output of the graph for users to see.\\n\\n    Behavior:\\n        If `format` is provided and the `value` is of a type that can be formatted,\\n        the block attempts to format the recorded_value using the `format`.\\n        If formatting fails or no `format` is provided, the raw `value` is output.\\n    '",
        "class Input(BlockSchema):\n    value: Any = SchemaField(description='The value to be recorded as output.', default=None, advanced=False)\n    name: str = SchemaField(description='The name of the output.')\n    title: str | None = SchemaField(description='The title of the output.', default=None, advanced=True)\n    description: str | None = SchemaField(description='The description of the output.', default=None, advanced=True)\n    format: str = SchemaField(description='The format string to be used to format the recorded_value.', default='', advanced=True)\n    advanced: bool = SchemaField(description='Whether to treat the output as advanced.', default=False, advanced=True)\n    secret: bool = SchemaField(description='Whether the output should be treated as a secret.', default=False, advanced=True)",
        "value: Any = SchemaField(description='The value to be recorded as output.', default=None, advanced=False)",
        "name: str = SchemaField(description='The name of the output.')",
        "title: str | None = SchemaField(description='The title of the output.', default=None, advanced=True)",
        "description: str | None = SchemaField(description='The description of the output.', default=None, advanced=True)",
        "format: str = SchemaField(description='The format string to be used to format the recorded_value.', default='', advanced=True)",
        "advanced: bool = SchemaField(description='Whether to treat the output as advanced.', default=False, advanced=True)",
        "secret: bool = SchemaField(description='Whether the output should be treated as a secret.', default=False, advanced=True)",
        "class Output(BlockSchema):\n    output: Any = SchemaField(description='The value recorded as output.')",
        "output: Any = SchemaField(description='The value recorded as output.')",
        "def __init__(self):\n    super().__init__(id='363ae599-353e-4804-937e-b2ee3cef3da4', description='Stores the output of the graph for users to see.', input_schema=AgentOutputBlock.Input, output_schema=AgentOutputBlock.Output, test_input=[{'value': 'Hello, World!', 'name': 'output_1', 'description': 'This is a test output.', 'format': '{{ output_1 }}!!'}, {'value': '42', 'name': 'output_2', 'description': 'This is another test output.', 'format': '{{ output_2 }}'}, {'value': MockObject(value='!!', key='key'), 'name': 'output_3', 'description': 'This is a test output with a mock object.', 'format': '{{ output_3 }}'}], test_output=[('output', 'Hello, World!!!'), ('output', '42'), ('output', MockObject(value='!!', key='key'))], categories={BlockCategory.OUTPUT, BlockCategory.BASIC}, block_type=BlockType.OUTPUT, static_output=True)",
        "super().__init__()",
        "def run(self, input_data: Input, **kwargs) -> BlockOutput:\n    \"\"\"\n        Attempts to format the recorded_value using the fmt_string if provided.\n        If formatting fails or no fmt_string is given, returns the original recorded_value.\n        \"\"\"\n    if input_data.format:\n        try:\n            yield ('output', formatter.format_string(input_data.format, {input_data.name: input_data.value}))\n        except Exception as e:\n            yield ('output', f'Error: {e}, {input_data.value}')\n    else:\n        yield ('output', input_data.value)",
        "'\\n        Attempts to format the recorded_value using the fmt_string if provided.\\n        If formatting fails or no fmt_string is given, returns the original recorded_value.\\n        '",
        "input_data.format"
      ],
      "code": "class AgentInputBlock(Block):\n    \"\"\"\n    This block is used to provide input to the graph.\n\n    It takes in a value, name, description, default values list and bool to limit selection to default values.\n\n    It Outputs the value passed as input.\n    \"\"\"\n\n    class Input(BlockSchema):\n        name: str = SchemaField(description='The name of the input.')\n        value: Any = SchemaField(description='The value to be passed as input.', default=None)\n        title: str | None = SchemaField(description='The title of the input.', default=None, advanced=True)\n        description: str | None = SchemaField(description='The description of the input.', default=None, advanced=True)\n        placeholder_values: List[Any] = SchemaField(description='The placeholder values to be passed as input.', default=[], advanced=True)\n        limit_to_placeholder_values: bool = SchemaField(description='Whether to limit the selection to placeholder values.', default=False, advanced=True)\n        advanced: bool = SchemaField(description='Whether to show the input in the advanced section, if the field is not required.', default=False, advanced=True)\n        secret: bool = SchemaField(description='Whether the input should be treated as a secret.', default=False, advanced=True)\n\n    class Output(BlockSchema):\n        result: Any = SchemaField(description='The value passed as input.')\n\n    def __init__(self):\n        super().__init__(id='c0a8e994-ebf1-4a9c-a4d8-89d09c86741b', description='This block is used to provide input to the graph.', input_schema=AgentInputBlock.Input, output_schema=AgentInputBlock.Output, test_input=[{'value': 'Hello, World!', 'name': 'input_1', 'description': 'This is a test input.', 'placeholder_values': [], 'limit_to_placeholder_values': False}, {'value': 'Hello, World!', 'name': 'input_2', 'description': 'This is a test input.', 'placeholder_values': ['Hello, World!'], 'limit_to_placeholder_values': True}], test_output=[('result', 'Hello, World!'), ('result', 'Hello, World!')], categories={BlockCategory.INPUT, BlockCategory.BASIC}, block_type=BlockType.INPUT, static_output=True)\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        yield ('result', input_data.value)\n'\\n    This block is used to provide input to the graph.\\n\\n    It takes in a value, name, description, default values list and bool to limit selection to default values.\\n\\n    It Outputs the value passed as input.\\n    '\nclass Input(BlockSchema):\n    name: str = SchemaField(description='The name of the input.')\n    value: Any = SchemaField(description='The value to be passed as input.', default=None)\n    title: str | None = SchemaField(description='The title of the input.', default=None, advanced=True)\n    description: str | None = SchemaField(description='The description of the input.', default=None, advanced=True)\n    placeholder_values: List[Any] = SchemaField(description='The placeholder values to be passed as input.', default=[], advanced=True)\n    limit_to_placeholder_values: bool = SchemaField(description='Whether to limit the selection to placeholder values.', default=False, advanced=True)\n    advanced: bool = SchemaField(description='Whether to show the input in the advanced section, if the field is not required.', default=False, advanced=True)\n    secret: bool = SchemaField(description='Whether the input should be treated as a secret.', default=False, advanced=True)\nname: str = SchemaField(description='The name of the input.')\nvalue: Any = SchemaField(description='The value to be passed as input.', default=None)\ntitle: str | None = SchemaField(description='The title of the input.', default=None, advanced=True)\ndescription: str | None = SchemaField(description='The description of the input.', default=None, advanced=True)\nplaceholder_values: List[Any] = SchemaField(description='The placeholder values to be passed as input.', default=[], advanced=True)\nlimit_to_placeholder_values: bool = SchemaField(description='Whether to limit the selection to placeholder values.', default=False, advanced=True)\nadvanced: bool = SchemaField(description='Whether to show the input in the advanced section, if the field is not required.', default=False, advanced=True)\nsecret: bool = SchemaField(description='Whether the input should be treated as a secret.', default=False, advanced=True)\nclass Output(BlockSchema):\n    result: Any = SchemaField(description='The value passed as input.')\nresult: Any = SchemaField(description='The value passed as input.')\ndef __init__(self):\n    super().__init__(id='c0a8e994-ebf1-4a9c-a4d8-89d09c86741b', description='This block is used to provide input to the graph.', input_schema=AgentInputBlock.Input, output_schema=AgentInputBlock.Output, test_input=[{'value': 'Hello, World!', 'name': 'input_1', 'description': 'This is a test input.', 'placeholder_values': [], 'limit_to_placeholder_values': False}, {'value': 'Hello, World!', 'name': 'input_2', 'description': 'This is a test input.', 'placeholder_values': ['Hello, World!'], 'limit_to_placeholder_values': True}], test_output=[('result', 'Hello, World!'), ('result', 'Hello, World!')], categories={BlockCategory.INPUT, BlockCategory.BASIC}, block_type=BlockType.INPUT, static_output=True)\nsuper().__init__()\ndef run(self, input_data: Input, **kwargs) -> BlockOutput:\n    yield ('result', input_data.value)\n(yield ('result', input_data.value))\nclass AgentOutputBlock(Block):\n    \"\"\"\n    Records the output of the graph for users to see.\n\n    Behavior:\n        If `format` is provided and the `value` is of a type that can be formatted,\n        the block attempts to format the recorded_value using the `format`.\n        If formatting fails or no `format` is provided, the raw `value` is output.\n    \"\"\"\n\n    class Input(BlockSchema):\n        value: Any = SchemaField(description='The value to be recorded as output.', default=None, advanced=False)\n        name: str = SchemaField(description='The name of the output.')\n        title: str | None = SchemaField(description='The title of the output.', default=None, advanced=True)\n        description: str | None = SchemaField(description='The description of the output.', default=None, advanced=True)\n        format: str = SchemaField(description='The format string to be used to format the recorded_value.', default='', advanced=True)\n        advanced: bool = SchemaField(description='Whether to treat the output as advanced.', default=False, advanced=True)\n        secret: bool = SchemaField(description='Whether the output should be treated as a secret.', default=False, advanced=True)\n\n    class Output(BlockSchema):\n        output: Any = SchemaField(description='The value recorded as output.')\n\n    def __init__(self):\n        super().__init__(id='363ae599-353e-4804-937e-b2ee3cef3da4', description='Stores the output of the graph for users to see.', input_schema=AgentOutputBlock.Input, output_schema=AgentOutputBlock.Output, test_input=[{'value': 'Hello, World!', 'name': 'output_1', 'description': 'This is a test output.', 'format': '{{ output_1 }}!!'}, {'value': '42', 'name': 'output_2', 'description': 'This is another test output.', 'format': '{{ output_2 }}'}, {'value': MockObject(value='!!', key='key'), 'name': 'output_3', 'description': 'This is a test output with a mock object.', 'format': '{{ output_3 }}'}], test_output=[('output', 'Hello, World!!!'), ('output', '42'), ('output', MockObject(value='!!', key='key'))], categories={BlockCategory.OUTPUT, BlockCategory.BASIC}, block_type=BlockType.OUTPUT, static_output=True)\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        \"\"\"\n        Attempts to format the recorded_value using the fmt_string if provided.\n        If formatting fails or no fmt_string is given, returns the original recorded_value.\n        \"\"\"\n        if input_data.format:\n            try:\n                yield ('output', formatter.format_string(input_data.format, {input_data.name: input_data.value}))\n            except Exception as e:\n                yield ('output', f'Error: {e}, {input_data.value}')\n        else:\n            yield ('output', input_data.value)\n'\\n    Records the output of the graph for users to see.\\n\\n    Behavior:\\n        If `format` is provided and the `value` is of a type that can be formatted,\\n        the block attempts to format the recorded_value using the `format`.\\n        If formatting fails or no `format` is provided, the raw `value` is output.\\n    '\nclass Input(BlockSchema):\n    value: Any = SchemaField(description='The value to be recorded as output.', default=None, advanced=False)\n    name: str = SchemaField(description='The name of the output.')\n    title: str | None = SchemaField(description='The title of the output.', default=None, advanced=True)\n    description: str | None = SchemaField(description='The description of the output.', default=None, advanced=True)\n    format: str = SchemaField(description='The format string to be used to format the recorded_value.', default='', advanced=True)\n    advanced: bool = SchemaField(description='Whether to treat the output as advanced.', default=False, advanced=True)\n    secret: bool = SchemaField(description='Whether the output should be treated as a secret.', default=False, advanced=True)\nvalue: Any = SchemaField(description='The value to be recorded as output.', default=None, advanced=False)\nname: str = SchemaField(description='The name of the output.')\ntitle: str | None = SchemaField(description='The title of the output.', default=None, advanced=True)\ndescription: str | None = SchemaField(description='The description of the output.', default=None, advanced=True)\nformat: str = SchemaField(description='The format string to be used to format the recorded_value.', default='', advanced=True)\nadvanced: bool = SchemaField(description='Whether to treat the output as advanced.', default=False, advanced=True)\nsecret: bool = SchemaField(description='Whether the output should be treated as a secret.', default=False, advanced=True)\nclass Output(BlockSchema):\n    output: Any = SchemaField(description='The value recorded as output.')\noutput: Any = SchemaField(description='The value recorded as output.')\ndef __init__(self):\n    super().__init__(id='363ae599-353e-4804-937e-b2ee3cef3da4', description='Stores the output of the graph for users to see.', input_schema=AgentOutputBlock.Input, output_schema=AgentOutputBlock.Output, test_input=[{'value': 'Hello, World!', 'name': 'output_1', 'description': 'This is a test output.', 'format': '{{ output_1 }}!!'}, {'value': '42', 'name': 'output_2', 'description': 'This is another test output.', 'format': '{{ output_2 }}'}, {'value': MockObject(value='!!', key='key'), 'name': 'output_3', 'description': 'This is a test output with a mock object.', 'format': '{{ output_3 }}'}], test_output=[('output', 'Hello, World!!!'), ('output', '42'), ('output', MockObject(value='!!', key='key'))], categories={BlockCategory.OUTPUT, BlockCategory.BASIC}, block_type=BlockType.OUTPUT, static_output=True)\nsuper().__init__()\ndef run(self, input_data: Input, **kwargs) -> BlockOutput:\n    \"\"\"\n        Attempts to format the recorded_value using the fmt_string if provided.\n        If formatting fails or no fmt_string is given, returns the original recorded_value.\n        \"\"\"\n    if input_data.format:\n        try:\n            yield ('output', formatter.format_string(input_data.format, {input_data.name: input_data.value}))\n        except Exception as e:\n            yield ('output', f'Error: {e}, {input_data.value}')\n    else:\n        yield ('output', input_data.value)\n'\\n        Attempts to format the recorded_value using the fmt_string if provided.\\n        If formatting fails or no fmt_string is given, returns the original recorded_value.\\n        '\ninput_data.format"
    },
    {
      "id": "n4",
      "type": "block",
      "statements": [
        "(yield ('output', obj[key]))"
      ],
      "code": "(yield ('output', obj[key]))"
    },
    {
      "id": "n5",
      "type": "block",
      "statements": [
        "isinstance(obj, list) and isinstance(key, str)"
      ],
      "code": "isinstance(obj, list) and isinstance(key, str)"
    },
    {
      "id": "n6",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n7",
      "type": "block",
      "statements": [
        "len(obj) Eq 0"
      ],
      "code": "len(obj) Eq 0"
    },
    {
      "id": "n8",
      "type": "block",
      "statements": [
        "isinstance(obj, object) and isinstance(key, str) and hasattr(obj, key)"
      ],
      "code": "isinstance(obj, object) and isinstance(key, str) and hasattr(obj, key)"
    },
    {
      "id": "n9",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n10",
      "type": "block",
      "statements": [
        "(yield ('output', []))"
      ],
      "code": "(yield ('output', []))"
    },
    {
      "id": "n11",
      "type": "block",
      "statements": [
        "isinstance(obj[0], dict) and key in obj[0]"
      ],
      "code": "isinstance(obj[0], dict) and key in obj[0]"
    },
    {
      "id": "n12",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n13",
      "type": "block",
      "statements": [
        "(yield ('output', [item[key] for item in obj if key in item]))"
      ],
      "code": "(yield ('output', [item[key] for item in obj if key in item]))"
    },
    {
      "id": "n14",
      "type": "block",
      "statements": [
        "(yield ('output', [getattr(val, key) for val in obj if hasattr(val, key)]))"
      ],
      "code": "(yield ('output', [getattr(val, key) for val in obj if hasattr(val, key)]))"
    },
    {
      "id": "n15",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n16",
      "type": "block",
      "statements": [
        "(yield ('output', getattr(obj, key)))"
      ],
      "code": "(yield ('output', getattr(obj, key)))"
    },
    {
      "id": "n17",
      "type": "block",
      "statements": [
        "(yield ('missing', input_data.input))"
      ],
      "code": "(yield ('missing', input_data.input))"
    },
    {
      "id": "n18",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n19",
      "type": "block",
      "statements": [
        "try:\n    yield ('output', formatter.format_string(input_data.format, {input_data.name: input_data.value}))\nexcept Exception as e:\n    yield ('output', f'Error: {e}, {input_data.value}')",
        "(yield ('output', formatter.format_string(input_data.format, {input_data.name: input_data.value})))",
        "(yield ('output', f'Error: {e}, {input_data.value}'))"
      ],
      "code": "try:\n    yield ('output', formatter.format_string(input_data.format, {input_data.name: input_data.value}))\nexcept Exception as e:\n    yield ('output', f'Error: {e}, {input_data.value}')\n(yield ('output', formatter.format_string(input_data.format, {input_data.name: input_data.value})))\n(yield ('output', f'Error: {e}, {input_data.value}'))"
    },
    {
      "id": "n20",
      "type": "block",
      "statements": [
        "(yield ('output', input_data.value))"
      ],
      "code": "(yield ('output', input_data.value))"
    },
    {
      "id": "n21",
      "type": "block",
      "statements": [
        "class AddToDictionaryBlock(Block):\n\n    class Input(BlockSchema):\n        dictionary: dict[Any, Any] = SchemaField(default={}, description='The dictionary to add the entry to. If not provided, a new dictionary will be created.')\n        key: str = SchemaField(default='', description='The key for the new entry.', placeholder='new_key', advanced=False)\n        value: Any = SchemaField(default=None, description='The value for the new entry.', placeholder='new_value', advanced=False)\n        entries: dict[Any, Any] = SchemaField(default={}, description='The entries to add to the dictionary. This is the batch version of the `key` and `value` fields.', advanced=True)\n\n    class Output(BlockSchema):\n        updated_dictionary: dict = SchemaField(description='The dictionary with the new entry added.')\n        error: str = SchemaField(description='Error message if the operation failed.')\n\n    def __init__(self):\n        super().__init__(id='31d1064e-7446-4693-a7d4-65e5ca1180d1', description='Adds a new key-value pair to a dictionary. If no dictionary is provided, a new one is created.', categories={BlockCategory.BASIC}, input_schema=AddToDictionaryBlock.Input, output_schema=AddToDictionaryBlock.Output, test_input=[{'dictionary': {'existing_key': 'existing_value'}, 'key': 'new_key', 'value': 'new_value'}, {'key': 'first_key', 'value': 'first_value'}, {'dictionary': {'existing_key': 'existing_value'}, 'entries': {'new_key': 'new_value', 'first_key': 'first_value'}}], test_output=[('updated_dictionary', {'existing_key': 'existing_value', 'new_key': 'new_value'}), ('updated_dictionary', {'first_key': 'first_value'}), ('updated_dictionary', {'existing_key': 'existing_value', 'new_key': 'new_value', 'first_key': 'first_value'})])\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        updated_dict = input_data.dictionary.copy()\n        if input_data.value is not None and input_data.key:\n            updated_dict[input_data.key] = input_data.value\n        for (key, value) in input_data.entries.items():\n            updated_dict[key] = value\n        yield ('updated_dictionary', updated_dict)",
        "class Input(BlockSchema):\n    dictionary: dict[Any, Any] = SchemaField(default={}, description='The dictionary to add the entry to. If not provided, a new dictionary will be created.')\n    key: str = SchemaField(default='', description='The key for the new entry.', placeholder='new_key', advanced=False)\n    value: Any = SchemaField(default=None, description='The value for the new entry.', placeholder='new_value', advanced=False)\n    entries: dict[Any, Any] = SchemaField(default={}, description='The entries to add to the dictionary. This is the batch version of the `key` and `value` fields.', advanced=True)",
        "dictionary: dict[Any, Any] = SchemaField(default={}, description='The dictionary to add the entry to. If not provided, a new dictionary will be created.')",
        "key: str = SchemaField(default='', description='The key for the new entry.', placeholder='new_key', advanced=False)",
        "value: Any = SchemaField(default=None, description='The value for the new entry.', placeholder='new_value', advanced=False)",
        "entries: dict[Any, Any] = SchemaField(default={}, description='The entries to add to the dictionary. This is the batch version of the `key` and `value` fields.', advanced=True)",
        "class Output(BlockSchema):\n    updated_dictionary: dict = SchemaField(description='The dictionary with the new entry added.')\n    error: str = SchemaField(description='Error message if the operation failed.')",
        "updated_dictionary: dict = SchemaField(description='The dictionary with the new entry added.')",
        "error: str = SchemaField(description='Error message if the operation failed.')",
        "def __init__(self):\n    super().__init__(id='31d1064e-7446-4693-a7d4-65e5ca1180d1', description='Adds a new key-value pair to a dictionary. If no dictionary is provided, a new one is created.', categories={BlockCategory.BASIC}, input_schema=AddToDictionaryBlock.Input, output_schema=AddToDictionaryBlock.Output, test_input=[{'dictionary': {'existing_key': 'existing_value'}, 'key': 'new_key', 'value': 'new_value'}, {'key': 'first_key', 'value': 'first_value'}, {'dictionary': {'existing_key': 'existing_value'}, 'entries': {'new_key': 'new_value', 'first_key': 'first_value'}}], test_output=[('updated_dictionary', {'existing_key': 'existing_value', 'new_key': 'new_value'}), ('updated_dictionary', {'first_key': 'first_value'}), ('updated_dictionary', {'existing_key': 'existing_value', 'new_key': 'new_value', 'first_key': 'first_value'})])",
        "super().__init__()",
        "def run(self, input_data: Input, **kwargs) -> BlockOutput:\n    updated_dict = input_data.dictionary.copy()\n    if input_data.value is not None and input_data.key:\n        updated_dict[input_data.key] = input_data.value\n    for (key, value) in input_data.entries.items():\n        updated_dict[key] = value\n    yield ('updated_dictionary', updated_dict)",
        "updated_dict = input_data.dictionary.copy()",
        "input_data.value is not None and input_data.key"
      ],
      "code": "class AddToDictionaryBlock(Block):\n\n    class Input(BlockSchema):\n        dictionary: dict[Any, Any] = SchemaField(default={}, description='The dictionary to add the entry to. If not provided, a new dictionary will be created.')\n        key: str = SchemaField(default='', description='The key for the new entry.', placeholder='new_key', advanced=False)\n        value: Any = SchemaField(default=None, description='The value for the new entry.', placeholder='new_value', advanced=False)\n        entries: dict[Any, Any] = SchemaField(default={}, description='The entries to add to the dictionary. This is the batch version of the `key` and `value` fields.', advanced=True)\n\n    class Output(BlockSchema):\n        updated_dictionary: dict = SchemaField(description='The dictionary with the new entry added.')\n        error: str = SchemaField(description='Error message if the operation failed.')\n\n    def __init__(self):\n        super().__init__(id='31d1064e-7446-4693-a7d4-65e5ca1180d1', description='Adds a new key-value pair to a dictionary. If no dictionary is provided, a new one is created.', categories={BlockCategory.BASIC}, input_schema=AddToDictionaryBlock.Input, output_schema=AddToDictionaryBlock.Output, test_input=[{'dictionary': {'existing_key': 'existing_value'}, 'key': 'new_key', 'value': 'new_value'}, {'key': 'first_key', 'value': 'first_value'}, {'dictionary': {'existing_key': 'existing_value'}, 'entries': {'new_key': 'new_value', 'first_key': 'first_value'}}], test_output=[('updated_dictionary', {'existing_key': 'existing_value', 'new_key': 'new_value'}), ('updated_dictionary', {'first_key': 'first_value'}), ('updated_dictionary', {'existing_key': 'existing_value', 'new_key': 'new_value', 'first_key': 'first_value'})])\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        updated_dict = input_data.dictionary.copy()\n        if input_data.value is not None and input_data.key:\n            updated_dict[input_data.key] = input_data.value\n        for (key, value) in input_data.entries.items():\n            updated_dict[key] = value\n        yield ('updated_dictionary', updated_dict)\nclass Input(BlockSchema):\n    dictionary: dict[Any, Any] = SchemaField(default={}, description='The dictionary to add the entry to. If not provided, a new dictionary will be created.')\n    key: str = SchemaField(default='', description='The key for the new entry.', placeholder='new_key', advanced=False)\n    value: Any = SchemaField(default=None, description='The value for the new entry.', placeholder='new_value', advanced=False)\n    entries: dict[Any, Any] = SchemaField(default={}, description='The entries to add to the dictionary. This is the batch version of the `key` and `value` fields.', advanced=True)\ndictionary: dict[Any, Any] = SchemaField(default={}, description='The dictionary to add the entry to. If not provided, a new dictionary will be created.')\nkey: str = SchemaField(default='', description='The key for the new entry.', placeholder='new_key', advanced=False)\nvalue: Any = SchemaField(default=None, description='The value for the new entry.', placeholder='new_value', advanced=False)\nentries: dict[Any, Any] = SchemaField(default={}, description='The entries to add to the dictionary. This is the batch version of the `key` and `value` fields.', advanced=True)\nclass Output(BlockSchema):\n    updated_dictionary: dict = SchemaField(description='The dictionary with the new entry added.')\n    error: str = SchemaField(description='Error message if the operation failed.')\nupdated_dictionary: dict = SchemaField(description='The dictionary with the new entry added.')\nerror: str = SchemaField(description='Error message if the operation failed.')\ndef __init__(self):\n    super().__init__(id='31d1064e-7446-4693-a7d4-65e5ca1180d1', description='Adds a new key-value pair to a dictionary. If no dictionary is provided, a new one is created.', categories={BlockCategory.BASIC}, input_schema=AddToDictionaryBlock.Input, output_schema=AddToDictionaryBlock.Output, test_input=[{'dictionary': {'existing_key': 'existing_value'}, 'key': 'new_key', 'value': 'new_value'}, {'key': 'first_key', 'value': 'first_value'}, {'dictionary': {'existing_key': 'existing_value'}, 'entries': {'new_key': 'new_value', 'first_key': 'first_value'}}], test_output=[('updated_dictionary', {'existing_key': 'existing_value', 'new_key': 'new_value'}), ('updated_dictionary', {'first_key': 'first_value'}), ('updated_dictionary', {'existing_key': 'existing_value', 'new_key': 'new_value', 'first_key': 'first_value'})])\nsuper().__init__()\ndef run(self, input_data: Input, **kwargs) -> BlockOutput:\n    updated_dict = input_data.dictionary.copy()\n    if input_data.value is not None and input_data.key:\n        updated_dict[input_data.key] = input_data.value\n    for (key, value) in input_data.entries.items():\n        updated_dict[key] = value\n    yield ('updated_dictionary', updated_dict)\nupdated_dict = input_data.dictionary.copy()\ninput_data.value is not None and input_data.key"
    },
    {
      "id": "n22",
      "type": "block",
      "statements": [
        "updated_dict[input_data.key] = input_data.value"
      ],
      "code": "updated_dict[input_data.key] = input_data.value"
    },
    {
      "id": "n23",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n24",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n25",
      "type": "block",
      "statements": [
        "(key, value)",
        "input_data.entries.items()"
      ],
      "code": "(key, value)\ninput_data.entries.items()"
    },
    {
      "id": "n26",
      "type": "block",
      "statements": [
        "updated_dict[key] = value"
      ],
      "code": "updated_dict[key] = value"
    },
    {
      "id": "n27",
      "type": "block",
      "statements": [
        "(yield ('updated_dictionary', updated_dict))",
        "class AddToListBlock(Block):\n\n    class Input(BlockSchema):\n        list: List[Any] = SchemaField(default=[], advanced=False, description='The list to add the entry to. If not provided, a new list will be created.')\n        entry: Any = SchemaField(description='The entry to add to the list. Can be of any type (string, int, dict, etc.).', advanced=False, default=None)\n        entries: List[Any] = SchemaField(default=[], description='The entries to add to the list. This is the batch version of the `entry` field.', advanced=True)\n        position: int | None = SchemaField(default=None, description='The position to insert the new entry. If not provided, the entry will be appended to the end of the list.')\n\n    class Output(BlockSchema):\n        updated_list: List[Any] = SchemaField(description='The list with the new entry added.')\n        error: str = SchemaField(description='Error message if the operation failed.')\n\n    def __init__(self):\n        super().__init__(id='aeb08fc1-2fc1-4141-bc8e-f758f183a822', description='Adds a new entry to a list. The entry can be of any type. If no list is provided, a new one is created.', categories={BlockCategory.BASIC}, input_schema=AddToListBlock.Input, output_schema=AddToListBlock.Output, test_input=[{'list': [1, 'string', {'existing_key': 'existing_value'}], 'entry': {'new_key': 'new_value'}, 'position': 1}, {'entry': 'first_entry'}, {'list': ['a', 'b', 'c'], 'entry': 'd'}, {'entry': 'e', 'entries': ['f', 'g'], 'list': ['a', 'b'], 'position': 1}], test_output=[('updated_list', [1, {'new_key': 'new_value'}, 'string', {'existing_key': 'existing_value'}]), ('updated_list', ['first_entry']), ('updated_list', ['a', 'b', 'c', 'd']), ('updated_list', ['a', 'f', 'g', 'e', 'b'])])\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        entries_added = input_data.entries.copy()\n        if input_data.entry:\n            entries_added.append(input_data.entry)\n        updated_list = input_data.list.copy()\n        if (pos := input_data.position) is not None:\n            updated_list = updated_list[:pos] + entries_added + updated_list[pos:]\n        else:\n            updated_list += entries_added\n        yield ('updated_list', updated_list)",
        "class Input(BlockSchema):\n    list: List[Any] = SchemaField(default=[], advanced=False, description='The list to add the entry to. If not provided, a new list will be created.')\n    entry: Any = SchemaField(description='The entry to add to the list. Can be of any type (string, int, dict, etc.).', advanced=False, default=None)\n    entries: List[Any] = SchemaField(default=[], description='The entries to add to the list. This is the batch version of the `entry` field.', advanced=True)\n    position: int | None = SchemaField(default=None, description='The position to insert the new entry. If not provided, the entry will be appended to the end of the list.')",
        "list: List[Any] = SchemaField(default=[], advanced=False, description='The list to add the entry to. If not provided, a new list will be created.')",
        "entry: Any = SchemaField(description='The entry to add to the list. Can be of any type (string, int, dict, etc.).', advanced=False, default=None)",
        "entries: List[Any] = SchemaField(default=[], description='The entries to add to the list. This is the batch version of the `entry` field.', advanced=True)",
        "position: int | None = SchemaField(default=None, description='The position to insert the new entry. If not provided, the entry will be appended to the end of the list.')",
        "class Output(BlockSchema):\n    updated_list: List[Any] = SchemaField(description='The list with the new entry added.')\n    error: str = SchemaField(description='Error message if the operation failed.')",
        "updated_list: List[Any] = SchemaField(description='The list with the new entry added.')",
        "error: str = SchemaField(description='Error message if the operation failed.')",
        "def __init__(self):\n    super().__init__(id='aeb08fc1-2fc1-4141-bc8e-f758f183a822', description='Adds a new entry to a list. The entry can be of any type. If no list is provided, a new one is created.', categories={BlockCategory.BASIC}, input_schema=AddToListBlock.Input, output_schema=AddToListBlock.Output, test_input=[{'list': [1, 'string', {'existing_key': 'existing_value'}], 'entry': {'new_key': 'new_value'}, 'position': 1}, {'entry': 'first_entry'}, {'list': ['a', 'b', 'c'], 'entry': 'd'}, {'entry': 'e', 'entries': ['f', 'g'], 'list': ['a', 'b'], 'position': 1}], test_output=[('updated_list', [1, {'new_key': 'new_value'}, 'string', {'existing_key': 'existing_value'}]), ('updated_list', ['first_entry']), ('updated_list', ['a', 'b', 'c', 'd']), ('updated_list', ['a', 'f', 'g', 'e', 'b'])])",
        "super().__init__()",
        "def run(self, input_data: Input, **kwargs) -> BlockOutput:\n    entries_added = input_data.entries.copy()\n    if input_data.entry:\n        entries_added.append(input_data.entry)\n    updated_list = input_data.list.copy()\n    if (pos := input_data.position) is not None:\n        updated_list = updated_list[:pos] + entries_added + updated_list[pos:]\n    else:\n        updated_list += entries_added\n    yield ('updated_list', updated_list)",
        "entries_added = input_data.entries.copy()",
        "input_data.entry"
      ],
      "code": "(yield ('updated_dictionary', updated_dict))\nclass AddToListBlock(Block):\n\n    class Input(BlockSchema):\n        list: List[Any] = SchemaField(default=[], advanced=False, description='The list to add the entry to. If not provided, a new list will be created.')\n        entry: Any = SchemaField(description='The entry to add to the list. Can be of any type (string, int, dict, etc.).', advanced=False, default=None)\n        entries: List[Any] = SchemaField(default=[], description='The entries to add to the list. This is the batch version of the `entry` field.', advanced=True)\n        position: int | None = SchemaField(default=None, description='The position to insert the new entry. If not provided, the entry will be appended to the end of the list.')\n\n    class Output(BlockSchema):\n        updated_list: List[Any] = SchemaField(description='The list with the new entry added.')\n        error: str = SchemaField(description='Error message if the operation failed.')\n\n    def __init__(self):\n        super().__init__(id='aeb08fc1-2fc1-4141-bc8e-f758f183a822', description='Adds a new entry to a list. The entry can be of any type. If no list is provided, a new one is created.', categories={BlockCategory.BASIC}, input_schema=AddToListBlock.Input, output_schema=AddToListBlock.Output, test_input=[{'list': [1, 'string', {'existing_key': 'existing_value'}], 'entry': {'new_key': 'new_value'}, 'position': 1}, {'entry': 'first_entry'}, {'list': ['a', 'b', 'c'], 'entry': 'd'}, {'entry': 'e', 'entries': ['f', 'g'], 'list': ['a', 'b'], 'position': 1}], test_output=[('updated_list', [1, {'new_key': 'new_value'}, 'string', {'existing_key': 'existing_value'}]), ('updated_list', ['first_entry']), ('updated_list', ['a', 'b', 'c', 'd']), ('updated_list', ['a', 'f', 'g', 'e', 'b'])])\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        entries_added = input_data.entries.copy()\n        if input_data.entry:\n            entries_added.append(input_data.entry)\n        updated_list = input_data.list.copy()\n        if (pos := input_data.position) is not None:\n            updated_list = updated_list[:pos] + entries_added + updated_list[pos:]\n        else:\n            updated_list += entries_added\n        yield ('updated_list', updated_list)\nclass Input(BlockSchema):\n    list: List[Any] = SchemaField(default=[], advanced=False, description='The list to add the entry to. If not provided, a new list will be created.')\n    entry: Any = SchemaField(description='The entry to add to the list. Can be of any type (string, int, dict, etc.).', advanced=False, default=None)\n    entries: List[Any] = SchemaField(default=[], description='The entries to add to the list. This is the batch version of the `entry` field.', advanced=True)\n    position: int | None = SchemaField(default=None, description='The position to insert the new entry. If not provided, the entry will be appended to the end of the list.')\nlist: List[Any] = SchemaField(default=[], advanced=False, description='The list to add the entry to. If not provided, a new list will be created.')\nentry: Any = SchemaField(description='The entry to add to the list. Can be of any type (string, int, dict, etc.).', advanced=False, default=None)\nentries: List[Any] = SchemaField(default=[], description='The entries to add to the list. This is the batch version of the `entry` field.', advanced=True)\nposition: int | None = SchemaField(default=None, description='The position to insert the new entry. If not provided, the entry will be appended to the end of the list.')\nclass Output(BlockSchema):\n    updated_list: List[Any] = SchemaField(description='The list with the new entry added.')\n    error: str = SchemaField(description='Error message if the operation failed.')\nupdated_list: List[Any] = SchemaField(description='The list with the new entry added.')\nerror: str = SchemaField(description='Error message if the operation failed.')\ndef __init__(self):\n    super().__init__(id='aeb08fc1-2fc1-4141-bc8e-f758f183a822', description='Adds a new entry to a list. The entry can be of any type. If no list is provided, a new one is created.', categories={BlockCategory.BASIC}, input_schema=AddToListBlock.Input, output_schema=AddToListBlock.Output, test_input=[{'list': [1, 'string', {'existing_key': 'existing_value'}], 'entry': {'new_key': 'new_value'}, 'position': 1}, {'entry': 'first_entry'}, {'list': ['a', 'b', 'c'], 'entry': 'd'}, {'entry': 'e', 'entries': ['f', 'g'], 'list': ['a', 'b'], 'position': 1}], test_output=[('updated_list', [1, {'new_key': 'new_value'}, 'string', {'existing_key': 'existing_value'}]), ('updated_list', ['first_entry']), ('updated_list', ['a', 'b', 'c', 'd']), ('updated_list', ['a', 'f', 'g', 'e', 'b'])])\nsuper().__init__()\ndef run(self, input_data: Input, **kwargs) -> BlockOutput:\n    entries_added = input_data.entries.copy()\n    if input_data.entry:\n        entries_added.append(input_data.entry)\n    updated_list = input_data.list.copy()\n    if (pos := input_data.position) is not None:\n        updated_list = updated_list[:pos] + entries_added + updated_list[pos:]\n    else:\n        updated_list += entries_added\n    yield ('updated_list', updated_list)\nentries_added = input_data.entries.copy()\ninput_data.entry"
    },
    {
      "id": "n28",
      "type": "block",
      "statements": [
        "entries_added.append(input_data.entry)"
      ],
      "code": "entries_added.append(input_data.entry)"
    },
    {
      "id": "n29",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n30",
      "type": "block",
      "statements": [
        "updated_list = input_data.list.copy()",
        "(pos := input_data.position) IsNot None"
      ],
      "code": "updated_list = input_data.list.copy()\n(pos := input_data.position) IsNot None"
    },
    {
      "id": "n31",
      "type": "block",
      "statements": [
        "updated_list = updated_list[:pos] + entries_added + updated_list[pos:]"
      ],
      "code": "updated_list = updated_list[:pos] + entries_added + updated_list[pos:]"
    },
    {
      "id": "n32",
      "type": "block",
      "statements": [
        "updated_list += entries_added"
      ],
      "code": "updated_list += entries_added"
    },
    {
      "id": "n33",
      "type": "block",
      "statements": [
        "(yield ('updated_list', updated_list))",
        "class NoteBlock(Block):\n\n    class Input(BlockSchema):\n        text: str = SchemaField(description='The text to display in the sticky note.')\n\n    class Output(BlockSchema):\n        output: str = SchemaField(description='The text to display in the sticky note.')\n\n    def __init__(self):\n        super().__init__(id='cc10ff7b-7753-4ff2-9af6-9399b1a7eddc', description='This block is used to display a sticky note with the given text.', categories={BlockCategory.BASIC}, input_schema=NoteBlock.Input, output_schema=NoteBlock.Output, test_input={'text': 'Hello, World!'}, test_output=[('output', 'Hello, World!')], block_type=BlockType.NOTE)\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        yield ('output', input_data.text)",
        "class Input(BlockSchema):\n    text: str = SchemaField(description='The text to display in the sticky note.')",
        "text: str = SchemaField(description='The text to display in the sticky note.')",
        "class Output(BlockSchema):\n    output: str = SchemaField(description='The text to display in the sticky note.')",
        "output: str = SchemaField(description='The text to display in the sticky note.')",
        "def __init__(self):\n    super().__init__(id='cc10ff7b-7753-4ff2-9af6-9399b1a7eddc', description='This block is used to display a sticky note with the given text.', categories={BlockCategory.BASIC}, input_schema=NoteBlock.Input, output_schema=NoteBlock.Output, test_input={'text': 'Hello, World!'}, test_output=[('output', 'Hello, World!')], block_type=BlockType.NOTE)",
        "super().__init__()",
        "def run(self, input_data: Input, **kwargs) -> BlockOutput:\n    yield ('output', input_data.text)",
        "(yield ('output', input_data.text))",
        "class CreateDictionaryBlock(Block):\n\n    class Input(BlockSchema):\n        values: dict[str, Any] = SchemaField(description='Key-value pairs to create the dictionary with', placeholder=\"e.g., {'name': 'Alice', 'age': 25}\")\n\n    class Output(BlockSchema):\n        dictionary: dict[str, Any] = SchemaField(description='The created dictionary containing the specified key-value pairs')\n        error: str = SchemaField(description='Error message if dictionary creation failed')\n\n    def __init__(self):\n        super().__init__(id='b924ddf4-de4f-4b56-9a85-358930dcbc91', description='Creates a dictionary with the specified key-value pairs. Use this when you know all the values you want to add upfront.', categories={BlockCategory.DATA}, input_schema=CreateDictionaryBlock.Input, output_schema=CreateDictionaryBlock.Output, test_input=[{'values': {'name': 'Alice', 'age': 25, 'city': 'New York'}}, {'values': {'numbers': [1, 2, 3], 'active': True, 'score': 95.5}}], test_output=[('dictionary', {'name': 'Alice', 'age': 25, 'city': 'New York'}), ('dictionary', {'numbers': [1, 2, 3], 'active': True, 'score': 95.5})])\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        try:\n            yield ('dictionary', input_data.values)\n        except Exception as e:\n            yield ('error', f'Failed to create dictionary: {str(e)}')",
        "class Input(BlockSchema):\n    values: dict[str, Any] = SchemaField(description='Key-value pairs to create the dictionary with', placeholder=\"e.g., {'name': 'Alice', 'age': 25}\")",
        "values: dict[str, Any] = SchemaField(description='Key-value pairs to create the dictionary with', placeholder=\"e.g., {'name': 'Alice', 'age': 25}\")",
        "class Output(BlockSchema):\n    dictionary: dict[str, Any] = SchemaField(description='The created dictionary containing the specified key-value pairs')\n    error: str = SchemaField(description='Error message if dictionary creation failed')",
        "dictionary: dict[str, Any] = SchemaField(description='The created dictionary containing the specified key-value pairs')",
        "error: str = SchemaField(description='Error message if dictionary creation failed')",
        "def __init__(self):\n    super().__init__(id='b924ddf4-de4f-4b56-9a85-358930dcbc91', description='Creates a dictionary with the specified key-value pairs. Use this when you know all the values you want to add upfront.', categories={BlockCategory.DATA}, input_schema=CreateDictionaryBlock.Input, output_schema=CreateDictionaryBlock.Output, test_input=[{'values': {'name': 'Alice', 'age': 25, 'city': 'New York'}}, {'values': {'numbers': [1, 2, 3], 'active': True, 'score': 95.5}}], test_output=[('dictionary', {'name': 'Alice', 'age': 25, 'city': 'New York'}), ('dictionary', {'numbers': [1, 2, 3], 'active': True, 'score': 95.5})])",
        "super().__init__()",
        "def run(self, input_data: Input, **kwargs) -> BlockOutput:\n    try:\n        yield ('dictionary', input_data.values)\n    except Exception as e:\n        yield ('error', f'Failed to create dictionary: {str(e)}')",
        "try:\n    yield ('dictionary', input_data.values)\nexcept Exception as e:\n    yield ('error', f'Failed to create dictionary: {str(e)}')",
        "(yield ('dictionary', input_data.values))",
        "(yield ('error', f'Failed to create dictionary: {str(e)}'))",
        "class CreateListBlock(Block):\n\n    class Input(BlockSchema):\n        values: List[Any] = SchemaField(description='A list of values to be combined into a new list.', placeholder=\"e.g., ['Alice', 25, True]\")\n\n    class Output(BlockSchema):\n        list: List[Any] = SchemaField(description='The created list containing the specified values.')\n        error: str = SchemaField(description='Error message if list creation failed.')\n\n    def __init__(self):\n        super().__init__(id='a912d5c7-6e00-4542-b2a9-8034136930e4', description='Creates a list with the specified values. Use this when you know all the values you want to add upfront.', categories={BlockCategory.DATA}, input_schema=CreateListBlock.Input, output_schema=CreateListBlock.Output, test_input=[{'values': ['Alice', 25, True]}, {'values': [1, 2, 3, 'four', {'key': 'value'}]}], test_output=[('list', ['Alice', 25, True]), ('list', [1, 2, 3, 'four', {'key': 'value'}])])\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        try:\n            yield ('list', input_data.values)\n        except Exception as e:\n            yield ('error', f'Failed to create list: {str(e)}')",
        "class Input(BlockSchema):\n    values: List[Any] = SchemaField(description='A list of values to be combined into a new list.', placeholder=\"e.g., ['Alice', 25, True]\")",
        "values: List[Any] = SchemaField(description='A list of values to be combined into a new list.', placeholder=\"e.g., ['Alice', 25, True]\")",
        "class Output(BlockSchema):\n    list: List[Any] = SchemaField(description='The created list containing the specified values.')\n    error: str = SchemaField(description='Error message if list creation failed.')",
        "list: List[Any] = SchemaField(description='The created list containing the specified values.')",
        "error: str = SchemaField(description='Error message if list creation failed.')",
        "def __init__(self):\n    super().__init__(id='a912d5c7-6e00-4542-b2a9-8034136930e4', description='Creates a list with the specified values. Use this when you know all the values you want to add upfront.', categories={BlockCategory.DATA}, input_schema=CreateListBlock.Input, output_schema=CreateListBlock.Output, test_input=[{'values': ['Alice', 25, True]}, {'values': [1, 2, 3, 'four', {'key': 'value'}]}], test_output=[('list', ['Alice', 25, True]), ('list', [1, 2, 3, 'four', {'key': 'value'}])])",
        "super().__init__()",
        "def run(self, input_data: Input, **kwargs) -> BlockOutput:\n    try:\n        yield ('list', input_data.values)\n    except Exception as e:\n        yield ('error', f'Failed to create list: {str(e)}')",
        "try:\n    yield ('list', input_data.values)\nexcept Exception as e:\n    yield ('error', f'Failed to create list: {str(e)}')",
        "(yield ('list', input_data.values))",
        "(yield ('error', f'Failed to create list: {str(e)}'))"
      ],
      "code": "(yield ('updated_list', updated_list))\nclass NoteBlock(Block):\n\n    class Input(BlockSchema):\n        text: str = SchemaField(description='The text to display in the sticky note.')\n\n    class Output(BlockSchema):\n        output: str = SchemaField(description='The text to display in the sticky note.')\n\n    def __init__(self):\n        super().__init__(id='cc10ff7b-7753-4ff2-9af6-9399b1a7eddc', description='This block is used to display a sticky note with the given text.', categories={BlockCategory.BASIC}, input_schema=NoteBlock.Input, output_schema=NoteBlock.Output, test_input={'text': 'Hello, World!'}, test_output=[('output', 'Hello, World!')], block_type=BlockType.NOTE)\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        yield ('output', input_data.text)\nclass Input(BlockSchema):\n    text: str = SchemaField(description='The text to display in the sticky note.')\ntext: str = SchemaField(description='The text to display in the sticky note.')\nclass Output(BlockSchema):\n    output: str = SchemaField(description='The text to display in the sticky note.')\noutput: str = SchemaField(description='The text to display in the sticky note.')\ndef __init__(self):\n    super().__init__(id='cc10ff7b-7753-4ff2-9af6-9399b1a7eddc', description='This block is used to display a sticky note with the given text.', categories={BlockCategory.BASIC}, input_schema=NoteBlock.Input, output_schema=NoteBlock.Output, test_input={'text': 'Hello, World!'}, test_output=[('output', 'Hello, World!')], block_type=BlockType.NOTE)\nsuper().__init__()\ndef run(self, input_data: Input, **kwargs) -> BlockOutput:\n    yield ('output', input_data.text)\n(yield ('output', input_data.text))\nclass CreateDictionaryBlock(Block):\n\n    class Input(BlockSchema):\n        values: dict[str, Any] = SchemaField(description='Key-value pairs to create the dictionary with', placeholder=\"e.g., {'name': 'Alice', 'age': 25}\")\n\n    class Output(BlockSchema):\n        dictionary: dict[str, Any] = SchemaField(description='The created dictionary containing the specified key-value pairs')\n        error: str = SchemaField(description='Error message if dictionary creation failed')\n\n    def __init__(self):\n        super().__init__(id='b924ddf4-de4f-4b56-9a85-358930dcbc91', description='Creates a dictionary with the specified key-value pairs. Use this when you know all the values you want to add upfront.', categories={BlockCategory.DATA}, input_schema=CreateDictionaryBlock.Input, output_schema=CreateDictionaryBlock.Output, test_input=[{'values': {'name': 'Alice', 'age': 25, 'city': 'New York'}}, {'values': {'numbers': [1, 2, 3], 'active': True, 'score': 95.5}}], test_output=[('dictionary', {'name': 'Alice', 'age': 25, 'city': 'New York'}), ('dictionary', {'numbers': [1, 2, 3], 'active': True, 'score': 95.5})])\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        try:\n            yield ('dictionary', input_data.values)\n        except Exception as e:\n            yield ('error', f'Failed to create dictionary: {str(e)}')\nclass Input(BlockSchema):\n    values: dict[str, Any] = SchemaField(description='Key-value pairs to create the dictionary with', placeholder=\"e.g., {'name': 'Alice', 'age': 25}\")\nvalues: dict[str, Any] = SchemaField(description='Key-value pairs to create the dictionary with', placeholder=\"e.g., {'name': 'Alice', 'age': 25}\")\nclass Output(BlockSchema):\n    dictionary: dict[str, Any] = SchemaField(description='The created dictionary containing the specified key-value pairs')\n    error: str = SchemaField(description='Error message if dictionary creation failed')\ndictionary: dict[str, Any] = SchemaField(description='The created dictionary containing the specified key-value pairs')\nerror: str = SchemaField(description='Error message if dictionary creation failed')\ndef __init__(self):\n    super().__init__(id='b924ddf4-de4f-4b56-9a85-358930dcbc91', description='Creates a dictionary with the specified key-value pairs. Use this when you know all the values you want to add upfront.', categories={BlockCategory.DATA}, input_schema=CreateDictionaryBlock.Input, output_schema=CreateDictionaryBlock.Output, test_input=[{'values': {'name': 'Alice', 'age': 25, 'city': 'New York'}}, {'values': {'numbers': [1, 2, 3], 'active': True, 'score': 95.5}}], test_output=[('dictionary', {'name': 'Alice', 'age': 25, 'city': 'New York'}), ('dictionary', {'numbers': [1, 2, 3], 'active': True, 'score': 95.5})])\nsuper().__init__()\ndef run(self, input_data: Input, **kwargs) -> BlockOutput:\n    try:\n        yield ('dictionary', input_data.values)\n    except Exception as e:\n        yield ('error', f'Failed to create dictionary: {str(e)}')\ntry:\n    yield ('dictionary', input_data.values)\nexcept Exception as e:\n    yield ('error', f'Failed to create dictionary: {str(e)}')\n(yield ('dictionary', input_data.values))\n(yield ('error', f'Failed to create dictionary: {str(e)}'))\nclass CreateListBlock(Block):\n\n    class Input(BlockSchema):\n        values: List[Any] = SchemaField(description='A list of values to be combined into a new list.', placeholder=\"e.g., ['Alice', 25, True]\")\n\n    class Output(BlockSchema):\n        list: List[Any] = SchemaField(description='The created list containing the specified values.')\n        error: str = SchemaField(description='Error message if list creation failed.')\n\n    def __init__(self):\n        super().__init__(id='a912d5c7-6e00-4542-b2a9-8034136930e4', description='Creates a list with the specified values. Use this when you know all the values you want to add upfront.', categories={BlockCategory.DATA}, input_schema=CreateListBlock.Input, output_schema=CreateListBlock.Output, test_input=[{'values': ['Alice', 25, True]}, {'values': [1, 2, 3, 'four', {'key': 'value'}]}], test_output=[('list', ['Alice', 25, True]), ('list', [1, 2, 3, 'four', {'key': 'value'}])])\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        try:\n            yield ('list', input_data.values)\n        except Exception as e:\n            yield ('error', f'Failed to create list: {str(e)}')\nclass Input(BlockSchema):\n    values: List[Any] = SchemaField(description='A list of values to be combined into a new list.', placeholder=\"e.g., ['Alice', 25, True]\")\nvalues: List[Any] = SchemaField(description='A list of values to be combined into a new list.', placeholder=\"e.g., ['Alice', 25, True]\")\nclass Output(BlockSchema):\n    list: List[Any] = SchemaField(description='The created list containing the specified values.')\n    error: str = SchemaField(description='Error message if list creation failed.')\nlist: List[Any] = SchemaField(description='The created list containing the specified values.')\nerror: str = SchemaField(description='Error message if list creation failed.')\ndef __init__(self):\n    super().__init__(id='a912d5c7-6e00-4542-b2a9-8034136930e4', description='Creates a list with the specified values. Use this when you know all the values you want to add upfront.', categories={BlockCategory.DATA}, input_schema=CreateListBlock.Input, output_schema=CreateListBlock.Output, test_input=[{'values': ['Alice', 25, True]}, {'values': [1, 2, 3, 'four', {'key': 'value'}]}], test_output=[('list', ['Alice', 25, True]), ('list', [1, 2, 3, 'four', {'key': 'value'}])])\nsuper().__init__()\ndef run(self, input_data: Input, **kwargs) -> BlockOutput:\n    try:\n        yield ('list', input_data.values)\n    except Exception as e:\n        yield ('error', f'Failed to create list: {str(e)}')\ntry:\n    yield ('list', input_data.values)\nexcept Exception as e:\n    yield ('error', f'Failed to create list: {str(e)}')\n(yield ('list', input_data.values))\n(yield ('error', f'Failed to create list: {str(e)}'))"
    }
  ],
  "edges": [
    {
      "source": "n14",
      "target": "n15"
    },
    {
      "source": "n0",
      "target": "n1"
    },
    {
      "source": "n17",
      "target": "n18"
    },
    {
      "source": "n7",
      "target": "n11"
    },
    {
      "source": "n8",
      "target": "n16"
    },
    {
      "source": "n21",
      "target": "n22"
    },
    {
      "source": "n11",
      "target": "n14"
    },
    {
      "source": "n7",
      "target": "n10"
    },
    {
      "source": "n19",
      "target": "n21"
    },
    {
      "source": "n18",
      "target": "n9"
    },
    {
      "source": "n23",
      "target": "n24"
    },
    {
      "source": "n6",
      "target": "n3"
    },
    {
      "source": "n2",
      "target": "n4"
    },
    {
      "source": "n13",
      "target": "n15"
    },
    {
      "source": "n16",
      "target": "n18"
    },
    {
      "source": "n12",
      "target": "n9"
    },
    {
      "source": "n4",
      "target": "n6"
    },
    {
      "source": "n30",
      "target": "n31"
    },
    {
      "source": "n24",
      "target": "n25"
    },
    {
      "source": "n21",
      "target": "n23"
    },
    {
      "source": "n31",
      "target": "n33"
    },
    {
      "source": "n3",
      "target": "n19"
    },
    {
      "source": "n29",
      "target": "n30"
    },
    {
      "source": "n15",
      "target": "n12"
    },
    {
      "source": "n32",
      "target": "n33"
    },
    {
      "source": "n20",
      "target": "n21"
    },
    {
      "source": "n3",
      "target": "n20"
    },
    {
      "source": "n28",
      "target": "n30"
    },
    {
      "source": "n8",
      "target": "n17"
    },
    {
      "source": "n10",
      "target": "n12"
    },
    {
      "source": "n25",
      "target": "n26"
    },
    {
      "source": "n5",
      "target": "n8"
    },
    {
      "source": "n26",
      "target": "n25"
    },
    {
      "source": "n1",
      "target": "n3"
    },
    {
      "source": "n27",
      "target": "n29"
    },
    {
      "source": "n27",
      "target": "n28"
    },
    {
      "source": "n2",
      "target": "n5"
    },
    {
      "source": "n25",
      "target": "n27"
    },
    {
      "source": "n22",
      "target": "n24"
    },
    {
      "source": "n9",
      "target": "n6"
    },
    {
      "source": "n5",
      "target": "n7"
    },
    {
      "source": "n11",
      "target": "n13"
    },
    {
      "source": "n0",
      "target": "n2"
    },
    {
      "source": "n30",
      "target": "n32"
    }
  ]
}