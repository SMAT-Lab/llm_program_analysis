{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "from urllib.parse import quote",
        "import requests",
        "from backend.blocks.jina._auth import JinaCredentials, JinaCredentialsField, JinaCredentialsInput",
        "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema",
        "from backend.data.model import SchemaField",
        "class FactCheckerBlock(Block):\n\n    class Input(BlockSchema):\n        statement: str = SchemaField(description='The statement to check for factuality')\n        credentials: JinaCredentialsInput = JinaCredentialsField()\n\n    class Output(BlockSchema):\n        factuality: float = SchemaField(description='The factuality score of the statement')\n        result: bool = SchemaField(description='The result of the factuality check')\n        reason: str = SchemaField(description='The reason for the factuality result')\n        error: str = SchemaField(description='Error message if the check fails')\n\n    def __init__(self):\n        super().__init__(id='d38b6c5e-9968-4271-8423-6cfe60d6e7e6', description=\"This block checks the factuality of a given statement using Jina AI's Grounding API.\", categories={BlockCategory.SEARCH}, input_schema=FactCheckerBlock.Input, output_schema=FactCheckerBlock.Output)\n\n    def run(self, input_data: Input, *, credentials: JinaCredentials, **kwargs) -> BlockOutput:\n        encoded_statement = quote(input_data.statement)\n        url = f'https://g.jina.ai/{encoded_statement}'\n        headers = {'Accept': 'application/json', 'Authorization': f'Bearer {credentials.api_key.get_secret_value()}'}\n        response = requests.get(url, headers=headers)\n        response.raise_for_status()\n        data = response.json()\n        if 'data' in data:\n            data = data['data']\n            yield ('factuality', data['factuality'])\n            yield ('result', data['result'])\n            yield ('reason', data['reason'])\n        else:\n            raise RuntimeError(f\"Expected 'data' key not found in response: {data}\")",
        "class Input(BlockSchema):\n    statement: str = SchemaField(description='The statement to check for factuality')\n    credentials: JinaCredentialsInput = JinaCredentialsField()",
        "statement: str = SchemaField(description='The statement to check for factuality')",
        "credentials: JinaCredentialsInput = JinaCredentialsField()",
        "class Output(BlockSchema):\n    factuality: float = SchemaField(description='The factuality score of the statement')\n    result: bool = SchemaField(description='The result of the factuality check')\n    reason: str = SchemaField(description='The reason for the factuality result')\n    error: str = SchemaField(description='Error message if the check fails')",
        "factuality: float = SchemaField(description='The factuality score of the statement')",
        "result: bool = SchemaField(description='The result of the factuality check')",
        "reason: str = SchemaField(description='The reason for the factuality result')",
        "error: str = SchemaField(description='Error message if the check fails')",
        "def __init__(self):\n    super().__init__(id='d38b6c5e-9968-4271-8423-6cfe60d6e7e6', description=\"This block checks the factuality of a given statement using Jina AI's Grounding API.\", categories={BlockCategory.SEARCH}, input_schema=FactCheckerBlock.Input, output_schema=FactCheckerBlock.Output)",
        "super().__init__()",
        "def run(self, input_data: Input, *, credentials: JinaCredentials, **kwargs) -> BlockOutput:\n    encoded_statement = quote(input_data.statement)\n    url = f'https://g.jina.ai/{encoded_statement}'\n    headers = {'Accept': 'application/json', 'Authorization': f'Bearer {credentials.api_key.get_secret_value()}'}\n    response = requests.get(url, headers=headers)\n    response.raise_for_status()\n    data = response.json()\n    if 'data' in data:\n        data = data['data']\n        yield ('factuality', data['factuality'])\n        yield ('result', data['result'])\n        yield ('reason', data['reason'])\n    else:\n        raise RuntimeError(f\"Expected 'data' key not found in response: {data}\")",
        "encoded_statement = quote(input_data.statement)",
        "url = f'https://g.jina.ai/{encoded_statement}'",
        "headers = {'Accept': 'application/json', 'Authorization': f'Bearer {credentials.api_key.get_secret_value()}'}",
        "response = requests.get(url, headers=headers)",
        "response.raise_for_status()",
        "data = response.json()",
        "'data' In data"
      ],
      "code": "from urllib.parse import quote\nimport requests\nfrom backend.blocks.jina._auth import JinaCredentials, JinaCredentialsField, JinaCredentialsInput\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\nclass FactCheckerBlock(Block):\n\n    class Input(BlockSchema):\n        statement: str = SchemaField(description='The statement to check for factuality')\n        credentials: JinaCredentialsInput = JinaCredentialsField()\n\n    class Output(BlockSchema):\n        factuality: float = SchemaField(description='The factuality score of the statement')\n        result: bool = SchemaField(description='The result of the factuality check')\n        reason: str = SchemaField(description='The reason for the factuality result')\n        error: str = SchemaField(description='Error message if the check fails')\n\n    def __init__(self):\n        super().__init__(id='d38b6c5e-9968-4271-8423-6cfe60d6e7e6', description=\"This block checks the factuality of a given statement using Jina AI's Grounding API.\", categories={BlockCategory.SEARCH}, input_schema=FactCheckerBlock.Input, output_schema=FactCheckerBlock.Output)\n\n    def run(self, input_data: Input, *, credentials: JinaCredentials, **kwargs) -> BlockOutput:\n        encoded_statement = quote(input_data.statement)\n        url = f'https://g.jina.ai/{encoded_statement}'\n        headers = {'Accept': 'application/json', 'Authorization': f'Bearer {credentials.api_key.get_secret_value()}'}\n        response = requests.get(url, headers=headers)\n        response.raise_for_status()\n        data = response.json()\n        if 'data' in data:\n            data = data['data']\n            yield ('factuality', data['factuality'])\n            yield ('result', data['result'])\n            yield ('reason', data['reason'])\n        else:\n            raise RuntimeError(f\"Expected 'data' key not found in response: {data}\")\nclass Input(BlockSchema):\n    statement: str = SchemaField(description='The statement to check for factuality')\n    credentials: JinaCredentialsInput = JinaCredentialsField()\nstatement: str = SchemaField(description='The statement to check for factuality')\ncredentials: JinaCredentialsInput = JinaCredentialsField()\nclass Output(BlockSchema):\n    factuality: float = SchemaField(description='The factuality score of the statement')\n    result: bool = SchemaField(description='The result of the factuality check')\n    reason: str = SchemaField(description='The reason for the factuality result')\n    error: str = SchemaField(description='Error message if the check fails')\nfactuality: float = SchemaField(description='The factuality score of the statement')\nresult: bool = SchemaField(description='The result of the factuality check')\nreason: str = SchemaField(description='The reason for the factuality result')\nerror: str = SchemaField(description='Error message if the check fails')\ndef __init__(self):\n    super().__init__(id='d38b6c5e-9968-4271-8423-6cfe60d6e7e6', description=\"This block checks the factuality of a given statement using Jina AI's Grounding API.\", categories={BlockCategory.SEARCH}, input_schema=FactCheckerBlock.Input, output_schema=FactCheckerBlock.Output)\nsuper().__init__()\ndef run(self, input_data: Input, *, credentials: JinaCredentials, **kwargs) -> BlockOutput:\n    encoded_statement = quote(input_data.statement)\n    url = f'https://g.jina.ai/{encoded_statement}'\n    headers = {'Accept': 'application/json', 'Authorization': f'Bearer {credentials.api_key.get_secret_value()}'}\n    response = requests.get(url, headers=headers)\n    response.raise_for_status()\n    data = response.json()\n    if 'data' in data:\n        data = data['data']\n        yield ('factuality', data['factuality'])\n        yield ('result', data['result'])\n        yield ('reason', data['reason'])\n    else:\n        raise RuntimeError(f\"Expected 'data' key not found in response: {data}\")\nencoded_statement = quote(input_data.statement)\nurl = f'https://g.jina.ai/{encoded_statement}'\nheaders = {'Accept': 'application/json', 'Authorization': f'Bearer {credentials.api_key.get_secret_value()}'}\nresponse = requests.get(url, headers=headers)\nresponse.raise_for_status()\ndata = response.json()\n'data' In data"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "data = data['data']",
        "(yield ('factuality', data['factuality']))",
        "(yield ('result', data['result']))",
        "(yield ('reason', data['reason']))"
      ],
      "code": "data = data['data']\n(yield ('factuality', data['factuality']))\n(yield ('result', data['result']))\n(yield ('reason', data['reason']))"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [
        "raise RuntimeError(f\"Expected 'data' key not found in response: {data}\")"
      ],
      "code": "raise RuntimeError(f\"Expected 'data' key not found in response: {data}\")"
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [],
      "code": ""
    }
  ],
  "edges": [
    {
      "source": "n0",
      "target": "n2"
    },
    {
      "source": "n0",
      "target": "n1"
    },
    {
      "source": "n2",
      "target": "n3"
    },
    {
      "source": "n1",
      "target": "n3"
    }
  ]
}