{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "import contextlib",
        "import logging",
        "import typing",
        "import fastapi",
        "import fastapi.responses",
        "import starlette.middleware.cors",
        "import uvicorn",
        "from autogpt_libs.feature_flag.client import initialize_launchdarkly, shutdown_launchdarkly",
        "import backend.data.block",
        "import backend.data.db",
        "import backend.data.graph",
        "import backend.data.user",
        "import backend.server.routers.v1",
        "import backend.server.v2.library.routes",
        "import backend.server.v2.store.routes",
        "import backend.util.service",
        "import backend.util.settings",
        "settings = backend.util.settings.Settings()",
        "logger = logging.getLogger(__name__)",
        "logging.getLogger('autogpt_libs').setLevel(logging.INFO)",
        "@contextlib.contextmanager\ndef launch_darkly_context():\n    if settings.config.app_env != backend.util.settings.AppEnvironment.LOCAL:\n        initialize_launchdarkly()\n        try:\n            yield\n        finally:\n            shutdown_launchdarkly()\n    else:\n        yield",
        "settings.config.app_env NotEq backend.util.settings.AppEnvironment.LOCAL"
      ],
      "code": "import contextlib\nimport logging\nimport typing\nimport fastapi\nimport fastapi.responses\nimport starlette.middleware.cors\nimport uvicorn\nfrom autogpt_libs.feature_flag.client import initialize_launchdarkly, shutdown_launchdarkly\nimport backend.data.block\nimport backend.data.db\nimport backend.data.graph\nimport backend.data.user\nimport backend.server.routers.v1\nimport backend.server.v2.library.routes\nimport backend.server.v2.store.routes\nimport backend.util.service\nimport backend.util.settings\nsettings = backend.util.settings.Settings()\nlogger = logging.getLogger(__name__)\nlogging.getLogger('autogpt_libs').setLevel(logging.INFO)\n@contextlib.contextmanager\ndef launch_darkly_context():\n    if settings.config.app_env != backend.util.settings.AppEnvironment.LOCAL:\n        initialize_launchdarkly()\n        try:\n            yield\n        finally:\n            shutdown_launchdarkly()\n    else:\n        yield\nsettings.config.app_env NotEq backend.util.settings.AppEnvironment.LOCAL"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "initialize_launchdarkly()",
        "try:\n    yield\nfinally:\n    shutdown_launchdarkly()",
        "(yield)",
        "shutdown_launchdarkly()"
      ],
      "code": "initialize_launchdarkly()\ntry:\n    yield\nfinally:\n    shutdown_launchdarkly()\n(yield)\nshutdown_launchdarkly()"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [
        "(yield)"
      ],
      "code": "(yield)"
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [
        "@contextlib.asynccontextmanager\nasync def lifespan_context(app: fastapi.FastAPI):\n    await backend.data.db.connect()\n    await backend.data.block.initialize_blocks()\n    await backend.data.user.migrate_and_encrypt_user_integrations()\n    await backend.data.graph.fix_llm_provider_credentials()\n    with launch_darkly_context():\n        yield\n    await backend.data.db.disconnect()",
        "await backend.data.db.connect()",
        "await backend.data.block.initialize_blocks()",
        "await backend.data.user.migrate_and_encrypt_user_integrations()",
        "await backend.data.graph.fix_llm_provider_credentials()",
        "with launch_darkly_context():\n    yield",
        "(yield)",
        "await backend.data.db.disconnect()",
        "docs_url = '/docs' if settings.config.app_env == backend.util.settings.AppEnvironment.LOCAL else None",
        "app = fastapi.FastAPI(title='AutoGPT Agent Server', description='This server is used to execute agents that are created by the AutoGPT system.', summary='AutoGPT Agent Server', version='0.1', lifespan=lifespan_context, docs_url=docs_url)",
        "def handle_internal_http_error(status_code: int=500, log_error: bool=True):\n\n    def handler(request: fastapi.Request, exc: Exception):\n        if log_error:\n            logger.exception(f'{request.method} {request.url.path} failed: {exc}')\n        return fastapi.responses.JSONResponse(content={'message': f'{request.method} {request.url.path} failed', 'detail': str(exc)}, status_code=status_code)\n    return handler",
        "def handler(request: fastapi.Request, exc: Exception):\n    if log_error:\n        logger.exception(f'{request.method} {request.url.path} failed: {exc}')\n    return fastapi.responses.JSONResponse(content={'message': f'{request.method} {request.url.path} failed', 'detail': str(exc)}, status_code=status_code)",
        "log_error"
      ],
      "code": "@contextlib.asynccontextmanager\nasync def lifespan_context(app: fastapi.FastAPI):\n    await backend.data.db.connect()\n    await backend.data.block.initialize_blocks()\n    await backend.data.user.migrate_and_encrypt_user_integrations()\n    await backend.data.graph.fix_llm_provider_credentials()\n    with launch_darkly_context():\n        yield\n    await backend.data.db.disconnect()\nawait backend.data.db.connect()\nawait backend.data.block.initialize_blocks()\nawait backend.data.user.migrate_and_encrypt_user_integrations()\nawait backend.data.graph.fix_llm_provider_credentials()\nwith launch_darkly_context():\n    yield\n(yield)\nawait backend.data.db.disconnect()\ndocs_url = '/docs' if settings.config.app_env == backend.util.settings.AppEnvironment.LOCAL else None\napp = fastapi.FastAPI(title='AutoGPT Agent Server', description='This server is used to execute agents that are created by the AutoGPT system.', summary='AutoGPT Agent Server', version='0.1', lifespan=lifespan_context, docs_url=docs_url)\ndef handle_internal_http_error(status_code: int=500, log_error: bool=True):\n\n    def handler(request: fastapi.Request, exc: Exception):\n        if log_error:\n            logger.exception(f'{request.method} {request.url.path} failed: {exc}')\n        return fastapi.responses.JSONResponse(content={'message': f'{request.method} {request.url.path} failed', 'detail': str(exc)}, status_code=status_code)\n    return handler\ndef handler(request: fastapi.Request, exc: Exception):\n    if log_error:\n        logger.exception(f'{request.method} {request.url.path} failed: {exc}')\n    return fastapi.responses.JSONResponse(content={'message': f'{request.method} {request.url.path} failed', 'detail': str(exc)}, status_code=status_code)\nlog_error"
    },
    {
      "id": "n4",
      "type": "block",
      "statements": [
        "logger.exception(f'{request.method} {request.url.path} failed: {exc}')"
      ],
      "code": "logger.exception(f'{request.method} {request.url.path} failed: {exc}')"
    },
    {
      "id": "n5",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n6",
      "type": "block",
      "statements": [
        "return fastapi.responses.JSONResponse(content={'message': f'{request.method} {request.url.path} failed', 'detail': str(exc)}, status_code=status_code)"
      ],
      "code": "return fastapi.responses.JSONResponse(content={'message': f'{request.method} {request.url.path} failed', 'detail': str(exc)}, status_code=status_code)"
    },
    {
      "id": "n7",
      "type": "block",
      "statements": [
        "return handler"
      ],
      "code": "return handler"
    },
    {
      "id": "n8",
      "type": "block",
      "statements": [
        "app.add_exception_handler(ValueError, handle_internal_http_error(400))",
        "app.add_exception_handler(Exception, handle_internal_http_error(500))",
        "app.include_router(backend.server.routers.v1.v1_router)",
        "app.include_router(backend.server.v2.store.routes.router)",
        "app.include_router(backend.server.v2.library.routes.router)",
        "@app.get(path='/health', tags=['health'], dependencies=[])\nasync def health():\n    return {'status': 'healthy'}",
        "return {'status': 'healthy'}"
      ],
      "code": "app.add_exception_handler(ValueError, handle_internal_http_error(400))\napp.add_exception_handler(Exception, handle_internal_http_error(500))\napp.include_router(backend.server.routers.v1.v1_router)\napp.include_router(backend.server.v2.store.routes.router)\napp.include_router(backend.server.v2.library.routes.router)\n@app.get(path='/health', tags=['health'], dependencies=[])\nasync def health():\n    return {'status': 'healthy'}\nreturn {'status': 'healthy'}"
    },
    {
      "id": "n9",
      "type": "block",
      "statements": [
        "class AgentServer(backend.util.service.AppProcess):\n\n    def run(self):\n        server_app = starlette.middleware.cors.CORSMiddleware(app=app, allow_origins=settings.config.backend_cors_allow_origins, allow_credentials=True, allow_methods=['*'], allow_headers=['*'])\n        uvicorn.run(server_app, host=backend.util.settings.Config().agent_api_host, port=backend.util.settings.Config().agent_api_port)\n\n    @staticmethod\n    async def test_execute_graph(graph_id: str, node_input: dict[typing.Any, typing.Any], user_id: str):\n        return backend.server.routers.v1.execute_graph(graph_id, node_input, user_id)\n\n    @staticmethod\n    async def test_create_graph(create_graph: backend.server.routers.v1.CreateGraph, user_id: str):\n        return await backend.server.routers.v1.create_new_graph(create_graph, user_id)\n\n    @staticmethod\n    async def test_get_graph_run_status(graph_exec_id: str, user_id: str):\n        execution = await backend.data.graph.get_execution(user_id=user_id, execution_id=graph_exec_id)\n        if not execution:\n            raise ValueError(f'Execution {graph_exec_id} not found')\n        return execution.status\n\n    @staticmethod\n    async def test_get_graph_run_node_execution_results(graph_id: str, graph_exec_id: str, user_id: str):\n        return await backend.server.routers.v1.get_graph_run_node_execution_results(graph_id, graph_exec_id, user_id)\n\n    @staticmethod\n    async def test_delete_graph(graph_id: str, user_id: str):\n        return await backend.server.routers.v1.delete_graph(graph_id, user_id)\n\n    def set_test_dependency_overrides(self, overrides: dict):\n        app.dependency_overrides.update(overrides)",
        "def run(self):\n    server_app = starlette.middleware.cors.CORSMiddleware(app=app, allow_origins=settings.config.backend_cors_allow_origins, allow_credentials=True, allow_methods=['*'], allow_headers=['*'])\n    uvicorn.run(server_app, host=backend.util.settings.Config().agent_api_host, port=backend.util.settings.Config().agent_api_port)",
        "server_app = starlette.middleware.cors.CORSMiddleware(app=app, allow_origins=settings.config.backend_cors_allow_origins, allow_credentials=True, allow_methods=['*'], allow_headers=['*'])",
        "uvicorn.run(server_app)",
        "@staticmethod\nasync def test_execute_graph(graph_id: str, node_input: dict[typing.Any, typing.Any], user_id: str):\n    return backend.server.routers.v1.execute_graph(graph_id, node_input, user_id)",
        "return backend.server.routers.v1.execute_graph(graph_id, node_input, user_id)"
      ],
      "code": "class AgentServer(backend.util.service.AppProcess):\n\n    def run(self):\n        server_app = starlette.middleware.cors.CORSMiddleware(app=app, allow_origins=settings.config.backend_cors_allow_origins, allow_credentials=True, allow_methods=['*'], allow_headers=['*'])\n        uvicorn.run(server_app, host=backend.util.settings.Config().agent_api_host, port=backend.util.settings.Config().agent_api_port)\n\n    @staticmethod\n    async def test_execute_graph(graph_id: str, node_input: dict[typing.Any, typing.Any], user_id: str):\n        return backend.server.routers.v1.execute_graph(graph_id, node_input, user_id)\n\n    @staticmethod\n    async def test_create_graph(create_graph: backend.server.routers.v1.CreateGraph, user_id: str):\n        return await backend.server.routers.v1.create_new_graph(create_graph, user_id)\n\n    @staticmethod\n    async def test_get_graph_run_status(graph_exec_id: str, user_id: str):\n        execution = await backend.data.graph.get_execution(user_id=user_id, execution_id=graph_exec_id)\n        if not execution:\n            raise ValueError(f'Execution {graph_exec_id} not found')\n        return execution.status\n\n    @staticmethod\n    async def test_get_graph_run_node_execution_results(graph_id: str, graph_exec_id: str, user_id: str):\n        return await backend.server.routers.v1.get_graph_run_node_execution_results(graph_id, graph_exec_id, user_id)\n\n    @staticmethod\n    async def test_delete_graph(graph_id: str, user_id: str):\n        return await backend.server.routers.v1.delete_graph(graph_id, user_id)\n\n    def set_test_dependency_overrides(self, overrides: dict):\n        app.dependency_overrides.update(overrides)\ndef run(self):\n    server_app = starlette.middleware.cors.CORSMiddleware(app=app, allow_origins=settings.config.backend_cors_allow_origins, allow_credentials=True, allow_methods=['*'], allow_headers=['*'])\n    uvicorn.run(server_app, host=backend.util.settings.Config().agent_api_host, port=backend.util.settings.Config().agent_api_port)\nserver_app = starlette.middleware.cors.CORSMiddleware(app=app, allow_origins=settings.config.backend_cors_allow_origins, allow_credentials=True, allow_methods=['*'], allow_headers=['*'])\nuvicorn.run(server_app)\n@staticmethod\nasync def test_execute_graph(graph_id: str, node_input: dict[typing.Any, typing.Any], user_id: str):\n    return backend.server.routers.v1.execute_graph(graph_id, node_input, user_id)\nreturn backend.server.routers.v1.execute_graph(graph_id, node_input, user_id)"
    },
    {
      "id": "n10",
      "type": "block",
      "statements": [
        "@staticmethod\nasync def test_create_graph(create_graph: backend.server.routers.v1.CreateGraph, user_id: str):\n    return await backend.server.routers.v1.create_new_graph(create_graph, user_id)",
        "return await backend.server.routers.v1.create_new_graph(create_graph, user_id)"
      ],
      "code": "@staticmethod\nasync def test_create_graph(create_graph: backend.server.routers.v1.CreateGraph, user_id: str):\n    return await backend.server.routers.v1.create_new_graph(create_graph, user_id)\nreturn await backend.server.routers.v1.create_new_graph(create_graph, user_id)"
    },
    {
      "id": "n11",
      "type": "block",
      "statements": [
        "@staticmethod\nasync def test_get_graph_run_status(graph_exec_id: str, user_id: str):\n    execution = await backend.data.graph.get_execution(user_id=user_id, execution_id=graph_exec_id)\n    if not execution:\n        raise ValueError(f'Execution {graph_exec_id} not found')\n    return execution.status",
        "execution = await backend.data.graph.get_execution(user_id=user_id, execution_id=graph_exec_id)",
        "not execution"
      ],
      "code": "@staticmethod\nasync def test_get_graph_run_status(graph_exec_id: str, user_id: str):\n    execution = await backend.data.graph.get_execution(user_id=user_id, execution_id=graph_exec_id)\n    if not execution:\n        raise ValueError(f'Execution {graph_exec_id} not found')\n    return execution.status\nexecution = await backend.data.graph.get_execution(user_id=user_id, execution_id=graph_exec_id)\nnot execution"
    },
    {
      "id": "n12",
      "type": "block",
      "statements": [
        "raise ValueError(f'Execution {graph_exec_id} not found')"
      ],
      "code": "raise ValueError(f'Execution {graph_exec_id} not found')"
    },
    {
      "id": "n13",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n14",
      "type": "block",
      "statements": [
        "return execution.status"
      ],
      "code": "return execution.status"
    },
    {
      "id": "n15",
      "type": "block",
      "statements": [
        "@staticmethod\nasync def test_get_graph_run_node_execution_results(graph_id: str, graph_exec_id: str, user_id: str):\n    return await backend.server.routers.v1.get_graph_run_node_execution_results(graph_id, graph_exec_id, user_id)",
        "return await backend.server.routers.v1.get_graph_run_node_execution_results(graph_id, graph_exec_id, user_id)"
      ],
      "code": "@staticmethod\nasync def test_get_graph_run_node_execution_results(graph_id: str, graph_exec_id: str, user_id: str):\n    return await backend.server.routers.v1.get_graph_run_node_execution_results(graph_id, graph_exec_id, user_id)\nreturn await backend.server.routers.v1.get_graph_run_node_execution_results(graph_id, graph_exec_id, user_id)"
    },
    {
      "id": "n16",
      "type": "block",
      "statements": [
        "@staticmethod\nasync def test_delete_graph(graph_id: str, user_id: str):\n    return await backend.server.routers.v1.delete_graph(graph_id, user_id)",
        "return await backend.server.routers.v1.delete_graph(graph_id, user_id)"
      ],
      "code": "@staticmethod\nasync def test_delete_graph(graph_id: str, user_id: str):\n    return await backend.server.routers.v1.delete_graph(graph_id, user_id)\nreturn await backend.server.routers.v1.delete_graph(graph_id, user_id)"
    },
    {
      "id": "n17",
      "type": "block",
      "statements": [
        "def set_test_dependency_overrides(self, overrides: dict):\n    app.dependency_overrides.update(overrides)",
        "app.dependency_overrides.update(overrides)"
      ],
      "code": "def set_test_dependency_overrides(self, overrides: dict):\n    app.dependency_overrides.update(overrides)\napp.dependency_overrides.update(overrides)"
    }
  ],
  "edges": [
    {
      "source": "n5",
      "target": "n6"
    },
    {
      "source": "n12",
      "target": "n14"
    },
    {
      "source": "n1",
      "target": "n3"
    },
    {
      "source": "n0",
      "target": "n2"
    },
    {
      "source": "n0",
      "target": "n1"
    },
    {
      "source": "n3",
      "target": "n4"
    },
    {
      "source": "n3",
      "target": "n5"
    },
    {
      "source": "n4",
      "target": "n6"
    },
    {
      "source": "n11",
      "target": "n12"
    },
    {
      "source": "n11",
      "target": "n13"
    },
    {
      "source": "n2",
      "target": "n3"
    },
    {
      "source": "n13",
      "target": "n14"
    }
  ]
}