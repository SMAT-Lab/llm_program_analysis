{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "from typing import List, Optional",
        "from pydantic import BaseModel",
        "from backend.blocks.exa._auth import ExaCredentials, ExaCredentialsField, ExaCredentialsInput",
        "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema",
        "from backend.data.model import SchemaField",
        "from backend.util.request import requests",
        "class ContentRetrievalSettings(BaseModel):\n    text: Optional[dict] = SchemaField(description='Text content settings', default={'maxCharacters': 1000, 'includeHtmlTags': False}, advanced=True)\n    highlights: Optional[dict] = SchemaField(description='Highlight settings', default={'numSentences': 3, 'highlightsPerUrl': 3, 'query': ''}, advanced=True)\n    summary: Optional[dict] = SchemaField(description='Summary settings', default={'query': ''}, advanced=True)",
        "text: Optional[dict] = SchemaField(description='Text content settings', default={'maxCharacters': 1000, 'includeHtmlTags': False}, advanced=True)",
        "highlights: Optional[dict] = SchemaField(description='Highlight settings', default={'numSentences': 3, 'highlightsPerUrl': 3, 'query': ''}, advanced=True)",
        "summary: Optional[dict] = SchemaField(description='Summary settings', default={'query': ''}, advanced=True)",
        "class ExaContentsBlock(Block):\n\n    class Input(BlockSchema):\n        credentials: ExaCredentialsInput = ExaCredentialsField()\n        ids: List[str] = SchemaField(description='Array of document IDs obtained from searches')\n        contents: ContentRetrievalSettings = SchemaField(description='Content retrieval settings', default=ContentRetrievalSettings(), advanced=True)\n\n    class Output(BlockSchema):\n        results: list = SchemaField(description='List of document contents', default=[])\n\n    def __init__(self):\n        super().__init__(id='c52be83f-f8cd-4180-b243-af35f986b461', description=\"Retrieves document contents using Exa's contents API\", categories={BlockCategory.SEARCH}, input_schema=ExaContentsBlock.Input, output_schema=ExaContentsBlock.Output)\n\n    def run(self, input_data: Input, *, credentials: ExaCredentials, **kwargs) -> BlockOutput:\n        url = 'https://api.exa.ai/contents'\n        headers = {'Content-Type': 'application/json', 'x-api-key': credentials.api_key.get_secret_value()}\n        payload = {'ids': input_data.ids, 'text': input_data.contents.text, 'highlights': input_data.contents.highlights, 'summary': input_data.contents.summary}\n        try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n            data = response.json()\n            yield ('results', data.get('results', []))\n        except Exception as e:\n            yield ('error', str(e))\n            yield ('results', [])",
        "class Input(BlockSchema):\n    credentials: ExaCredentialsInput = ExaCredentialsField()\n    ids: List[str] = SchemaField(description='Array of document IDs obtained from searches')\n    contents: ContentRetrievalSettings = SchemaField(description='Content retrieval settings', default=ContentRetrievalSettings(), advanced=True)",
        "credentials: ExaCredentialsInput = ExaCredentialsField()",
        "ids: List[str] = SchemaField(description='Array of document IDs obtained from searches')",
        "contents: ContentRetrievalSettings = SchemaField(description='Content retrieval settings', default=ContentRetrievalSettings(), advanced=True)",
        "class Output(BlockSchema):\n    results: list = SchemaField(description='List of document contents', default=[])",
        "results: list = SchemaField(description='List of document contents', default=[])",
        "def __init__(self):\n    super().__init__(id='c52be83f-f8cd-4180-b243-af35f986b461', description=\"Retrieves document contents using Exa's contents API\", categories={BlockCategory.SEARCH}, input_schema=ExaContentsBlock.Input, output_schema=ExaContentsBlock.Output)",
        "super().__init__()",
        "def run(self, input_data: Input, *, credentials: ExaCredentials, **kwargs) -> BlockOutput:\n    url = 'https://api.exa.ai/contents'\n    headers = {'Content-Type': 'application/json', 'x-api-key': credentials.api_key.get_secret_value()}\n    payload = {'ids': input_data.ids, 'text': input_data.contents.text, 'highlights': input_data.contents.highlights, 'summary': input_data.contents.summary}\n    try:\n        response = requests.post(url, headers=headers, json=payload)\n        response.raise_for_status()\n        data = response.json()\n        yield ('results', data.get('results', []))\n    except Exception as e:\n        yield ('error', str(e))\n        yield ('results', [])",
        "url = 'https://api.exa.ai/contents'",
        "headers = {'Content-Type': 'application/json', 'x-api-key': credentials.api_key.get_secret_value()}",
        "payload = {'ids': input_data.ids, 'text': input_data.contents.text, 'highlights': input_data.contents.highlights, 'summary': input_data.contents.summary}",
        "try:\n    response = requests.post(url, headers=headers, json=payload)\n    response.raise_for_status()\n    data = response.json()\n    yield ('results', data.get('results', []))\nexcept Exception as e:\n    yield ('error', str(e))\n    yield ('results', [])",
        "response = requests.post(url, headers=headers, json=payload)",
        "response.raise_for_status()",
        "data = response.json()",
        "(yield ('results', data.get('results', [])))",
        "(yield ('error', str(e)))",
        "(yield ('results', []))"
      ],
      "code": "from typing import List, Optional\nfrom pydantic import BaseModel\nfrom backend.blocks.exa._auth import ExaCredentials, ExaCredentialsField, ExaCredentialsInput\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\nfrom backend.util.request import requests\nclass ContentRetrievalSettings(BaseModel):\n    text: Optional[dict] = SchemaField(description='Text content settings', default={'maxCharacters': 1000, 'includeHtmlTags': False}, advanced=True)\n    highlights: Optional[dict] = SchemaField(description='Highlight settings', default={'numSentences': 3, 'highlightsPerUrl': 3, 'query': ''}, advanced=True)\n    summary: Optional[dict] = SchemaField(description='Summary settings', default={'query': ''}, advanced=True)\ntext: Optional[dict] = SchemaField(description='Text content settings', default={'maxCharacters': 1000, 'includeHtmlTags': False}, advanced=True)\nhighlights: Optional[dict] = SchemaField(description='Highlight settings', default={'numSentences': 3, 'highlightsPerUrl': 3, 'query': ''}, advanced=True)\nsummary: Optional[dict] = SchemaField(description='Summary settings', default={'query': ''}, advanced=True)\nclass ExaContentsBlock(Block):\n\n    class Input(BlockSchema):\n        credentials: ExaCredentialsInput = ExaCredentialsField()\n        ids: List[str] = SchemaField(description='Array of document IDs obtained from searches')\n        contents: ContentRetrievalSettings = SchemaField(description='Content retrieval settings', default=ContentRetrievalSettings(), advanced=True)\n\n    class Output(BlockSchema):\n        results: list = SchemaField(description='List of document contents', default=[])\n\n    def __init__(self):\n        super().__init__(id='c52be83f-f8cd-4180-b243-af35f986b461', description=\"Retrieves document contents using Exa's contents API\", categories={BlockCategory.SEARCH}, input_schema=ExaContentsBlock.Input, output_schema=ExaContentsBlock.Output)\n\n    def run(self, input_data: Input, *, credentials: ExaCredentials, **kwargs) -> BlockOutput:\n        url = 'https://api.exa.ai/contents'\n        headers = {'Content-Type': 'application/json', 'x-api-key': credentials.api_key.get_secret_value()}\n        payload = {'ids': input_data.ids, 'text': input_data.contents.text, 'highlights': input_data.contents.highlights, 'summary': input_data.contents.summary}\n        try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n            data = response.json()\n            yield ('results', data.get('results', []))\n        except Exception as e:\n            yield ('error', str(e))\n            yield ('results', [])\nclass Input(BlockSchema):\n    credentials: ExaCredentialsInput = ExaCredentialsField()\n    ids: List[str] = SchemaField(description='Array of document IDs obtained from searches')\n    contents: ContentRetrievalSettings = SchemaField(description='Content retrieval settings', default=ContentRetrievalSettings(), advanced=True)\ncredentials: ExaCredentialsInput = ExaCredentialsField()\nids: List[str] = SchemaField(description='Array of document IDs obtained from searches')\ncontents: ContentRetrievalSettings = SchemaField(description='Content retrieval settings', default=ContentRetrievalSettings(), advanced=True)\nclass Output(BlockSchema):\n    results: list = SchemaField(description='List of document contents', default=[])\nresults: list = SchemaField(description='List of document contents', default=[])\ndef __init__(self):\n    super().__init__(id='c52be83f-f8cd-4180-b243-af35f986b461', description=\"Retrieves document contents using Exa's contents API\", categories={BlockCategory.SEARCH}, input_schema=ExaContentsBlock.Input, output_schema=ExaContentsBlock.Output)\nsuper().__init__()\ndef run(self, input_data: Input, *, credentials: ExaCredentials, **kwargs) -> BlockOutput:\n    url = 'https://api.exa.ai/contents'\n    headers = {'Content-Type': 'application/json', 'x-api-key': credentials.api_key.get_secret_value()}\n    payload = {'ids': input_data.ids, 'text': input_data.contents.text, 'highlights': input_data.contents.highlights, 'summary': input_data.contents.summary}\n    try:\n        response = requests.post(url, headers=headers, json=payload)\n        response.raise_for_status()\n        data = response.json()\n        yield ('results', data.get('results', []))\n    except Exception as e:\n        yield ('error', str(e))\n        yield ('results', [])\nurl = 'https://api.exa.ai/contents'\nheaders = {'Content-Type': 'application/json', 'x-api-key': credentials.api_key.get_secret_value()}\npayload = {'ids': input_data.ids, 'text': input_data.contents.text, 'highlights': input_data.contents.highlights, 'summary': input_data.contents.summary}\ntry:\n    response = requests.post(url, headers=headers, json=payload)\n    response.raise_for_status()\n    data = response.json()\n    yield ('results', data.get('results', []))\nexcept Exception as e:\n    yield ('error', str(e))\n    yield ('results', [])\nresponse = requests.post(url, headers=headers, json=payload)\nresponse.raise_for_status()\ndata = response.json()\n(yield ('results', data.get('results', [])))\n(yield ('error', str(e)))\n(yield ('results', []))"
    }
  ],
  "edges": []
}