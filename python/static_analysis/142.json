{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "import smtplib",
        "from email.mime.multipart import MIMEMultipart",
        "from email.mime.text import MIMEText",
        "from pydantic import BaseModel, ConfigDict",
        "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema",
        "from backend.data.model import BlockSecret, SchemaField, SecretField",
        "class EmailCredentials(BaseModel):\n    smtp_server: str = SchemaField(default='smtp.gmail.com', description='SMTP server address')\n    smtp_port: int = SchemaField(default=25, description='SMTP port number')\n    smtp_username: BlockSecret = SecretField(key='smtp_username')\n    smtp_password: BlockSecret = SecretField(key='smtp_password')\n    model_config = ConfigDict(title='Email Credentials')",
        "smtp_server: str = SchemaField(default='smtp.gmail.com', description='SMTP server address')",
        "smtp_port: int = SchemaField(default=25, description='SMTP port number')",
        "smtp_username: BlockSecret = SecretField(key='smtp_username')",
        "smtp_password: BlockSecret = SecretField(key='smtp_password')",
        "model_config = ConfigDict(title='Email Credentials')",
        "class SendEmailBlock(Block):\n\n    class Input(BlockSchema):\n        to_email: str = SchemaField(description='Recipient email address', placeholder='recipient@example.com')\n        subject: str = SchemaField(description='Subject of the email', placeholder='Enter the email subject')\n        body: str = SchemaField(description='Body of the email', placeholder='Enter the email body')\n        creds: EmailCredentials = SchemaField(description='SMTP credentials', default=EmailCredentials())\n\n    class Output(BlockSchema):\n        status: str = SchemaField(description='Status of the email sending operation')\n        error: str = SchemaField(description='Error message if the email sending failed')\n\n    def __init__(self):\n        super().__init__(disabled=True, id='4335878a-394e-4e67-adf2-919877ff49ae', description='This block sends an email using the provided SMTP credentials.', categories={BlockCategory.OUTPUT}, input_schema=SendEmailBlock.Input, output_schema=SendEmailBlock.Output, test_input={'to_email': 'recipient@example.com', 'subject': 'Test Email', 'body': 'This is a test email.', 'creds': {'smtp_server': 'smtp.gmail.com', 'smtp_port': 25, 'smtp_username': 'your-email@gmail.com', 'smtp_password': 'your-gmail-password'}}, test_output=[('status', 'Email sent successfully')], test_mock={'send_email': lambda *args, **kwargs: 'Email sent successfully'})\n\n    @staticmethod\n    def send_email(creds: EmailCredentials, to_email: str, subject: str, body: str) -> str:\n        smtp_server = creds.smtp_server\n        smtp_port = creds.smtp_port\n        smtp_username = creds.smtp_username.get_secret_value()\n        smtp_password = creds.smtp_password.get_secret_value()\n        msg = MIMEMultipart()\n        msg['From'] = smtp_username\n        msg['To'] = to_email\n        msg['Subject'] = subject\n        msg.attach(MIMEText(body, 'plain'))\n        with smtplib.SMTP(smtp_server, smtp_port) as server:\n            server.starttls()\n            server.login(smtp_username, smtp_password)\n            server.sendmail(smtp_username, to_email, msg.as_string())\n        return 'Email sent successfully'\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        yield ('status', self.send_email(input_data.creds, input_data.to_email, input_data.subject, input_data.body))",
        "class Input(BlockSchema):\n    to_email: str = SchemaField(description='Recipient email address', placeholder='recipient@example.com')\n    subject: str = SchemaField(description='Subject of the email', placeholder='Enter the email subject')\n    body: str = SchemaField(description='Body of the email', placeholder='Enter the email body')\n    creds: EmailCredentials = SchemaField(description='SMTP credentials', default=EmailCredentials())",
        "to_email: str = SchemaField(description='Recipient email address', placeholder='recipient@example.com')",
        "subject: str = SchemaField(description='Subject of the email', placeholder='Enter the email subject')",
        "body: str = SchemaField(description='Body of the email', placeholder='Enter the email body')",
        "creds: EmailCredentials = SchemaField(description='SMTP credentials', default=EmailCredentials())",
        "class Output(BlockSchema):\n    status: str = SchemaField(description='Status of the email sending operation')\n    error: str = SchemaField(description='Error message if the email sending failed')",
        "status: str = SchemaField(description='Status of the email sending operation')",
        "error: str = SchemaField(description='Error message if the email sending failed')",
        "def __init__(self):\n    super().__init__(disabled=True, id='4335878a-394e-4e67-adf2-919877ff49ae', description='This block sends an email using the provided SMTP credentials.', categories={BlockCategory.OUTPUT}, input_schema=SendEmailBlock.Input, output_schema=SendEmailBlock.Output, test_input={'to_email': 'recipient@example.com', 'subject': 'Test Email', 'body': 'This is a test email.', 'creds': {'smtp_server': 'smtp.gmail.com', 'smtp_port': 25, 'smtp_username': 'your-email@gmail.com', 'smtp_password': 'your-gmail-password'}}, test_output=[('status', 'Email sent successfully')], test_mock={'send_email': lambda *args, **kwargs: 'Email sent successfully'})",
        "super().__init__()",
        "@staticmethod\ndef send_email(creds: EmailCredentials, to_email: str, subject: str, body: str) -> str:\n    smtp_server = creds.smtp_server\n    smtp_port = creds.smtp_port\n    smtp_username = creds.smtp_username.get_secret_value()\n    smtp_password = creds.smtp_password.get_secret_value()\n    msg = MIMEMultipart()\n    msg['From'] = smtp_username\n    msg['To'] = to_email\n    msg['Subject'] = subject\n    msg.attach(MIMEText(body, 'plain'))\n    with smtplib.SMTP(smtp_server, smtp_port) as server:\n        server.starttls()\n        server.login(smtp_username, smtp_password)\n        server.sendmail(smtp_username, to_email, msg.as_string())\n    return 'Email sent successfully'",
        "smtp_server = creds.smtp_server",
        "smtp_port = creds.smtp_port",
        "smtp_username = creds.smtp_username.get_secret_value()",
        "smtp_password = creds.smtp_password.get_secret_value()",
        "msg = MIMEMultipart()",
        "msg['From'] = smtp_username",
        "msg['To'] = to_email",
        "msg['Subject'] = subject",
        "msg.attach(MIMEText(body, 'plain'))",
        "with smtplib.SMTP(smtp_server, smtp_port) as server:\n    server.starttls()\n    server.login(smtp_username, smtp_password)\n    server.sendmail(smtp_username, to_email, msg.as_string())",
        "server.starttls()",
        "server.login(smtp_username, smtp_password)",
        "server.sendmail(smtp_username, to_email, msg.as_string())",
        "return 'Email sent successfully'"
      ],
      "code": "import smtplib\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.text import MIMEText\nfrom pydantic import BaseModel, ConfigDict\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import BlockSecret, SchemaField, SecretField\nclass EmailCredentials(BaseModel):\n    smtp_server: str = SchemaField(default='smtp.gmail.com', description='SMTP server address')\n    smtp_port: int = SchemaField(default=25, description='SMTP port number')\n    smtp_username: BlockSecret = SecretField(key='smtp_username')\n    smtp_password: BlockSecret = SecretField(key='smtp_password')\n    model_config = ConfigDict(title='Email Credentials')\nsmtp_server: str = SchemaField(default='smtp.gmail.com', description='SMTP server address')\nsmtp_port: int = SchemaField(default=25, description='SMTP port number')\nsmtp_username: BlockSecret = SecretField(key='smtp_username')\nsmtp_password: BlockSecret = SecretField(key='smtp_password')\nmodel_config = ConfigDict(title='Email Credentials')\nclass SendEmailBlock(Block):\n\n    class Input(BlockSchema):\n        to_email: str = SchemaField(description='Recipient email address', placeholder='recipient@example.com')\n        subject: str = SchemaField(description='Subject of the email', placeholder='Enter the email subject')\n        body: str = SchemaField(description='Body of the email', placeholder='Enter the email body')\n        creds: EmailCredentials = SchemaField(description='SMTP credentials', default=EmailCredentials())\n\n    class Output(BlockSchema):\n        status: str = SchemaField(description='Status of the email sending operation')\n        error: str = SchemaField(description='Error message if the email sending failed')\n\n    def __init__(self):\n        super().__init__(disabled=True, id='4335878a-394e-4e67-adf2-919877ff49ae', description='This block sends an email using the provided SMTP credentials.', categories={BlockCategory.OUTPUT}, input_schema=SendEmailBlock.Input, output_schema=SendEmailBlock.Output, test_input={'to_email': 'recipient@example.com', 'subject': 'Test Email', 'body': 'This is a test email.', 'creds': {'smtp_server': 'smtp.gmail.com', 'smtp_port': 25, 'smtp_username': 'your-email@gmail.com', 'smtp_password': 'your-gmail-password'}}, test_output=[('status', 'Email sent successfully')], test_mock={'send_email': lambda *args, **kwargs: 'Email sent successfully'})\n\n    @staticmethod\n    def send_email(creds: EmailCredentials, to_email: str, subject: str, body: str) -> str:\n        smtp_server = creds.smtp_server\n        smtp_port = creds.smtp_port\n        smtp_username = creds.smtp_username.get_secret_value()\n        smtp_password = creds.smtp_password.get_secret_value()\n        msg = MIMEMultipart()\n        msg['From'] = smtp_username\n        msg['To'] = to_email\n        msg['Subject'] = subject\n        msg.attach(MIMEText(body, 'plain'))\n        with smtplib.SMTP(smtp_server, smtp_port) as server:\n            server.starttls()\n            server.login(smtp_username, smtp_password)\n            server.sendmail(smtp_username, to_email, msg.as_string())\n        return 'Email sent successfully'\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        yield ('status', self.send_email(input_data.creds, input_data.to_email, input_data.subject, input_data.body))\nclass Input(BlockSchema):\n    to_email: str = SchemaField(description='Recipient email address', placeholder='recipient@example.com')\n    subject: str = SchemaField(description='Subject of the email', placeholder='Enter the email subject')\n    body: str = SchemaField(description='Body of the email', placeholder='Enter the email body')\n    creds: EmailCredentials = SchemaField(description='SMTP credentials', default=EmailCredentials())\nto_email: str = SchemaField(description='Recipient email address', placeholder='recipient@example.com')\nsubject: str = SchemaField(description='Subject of the email', placeholder='Enter the email subject')\nbody: str = SchemaField(description='Body of the email', placeholder='Enter the email body')\ncreds: EmailCredentials = SchemaField(description='SMTP credentials', default=EmailCredentials())\nclass Output(BlockSchema):\n    status: str = SchemaField(description='Status of the email sending operation')\n    error: str = SchemaField(description='Error message if the email sending failed')\nstatus: str = SchemaField(description='Status of the email sending operation')\nerror: str = SchemaField(description='Error message if the email sending failed')\ndef __init__(self):\n    super().__init__(disabled=True, id='4335878a-394e-4e67-adf2-919877ff49ae', description='This block sends an email using the provided SMTP credentials.', categories={BlockCategory.OUTPUT}, input_schema=SendEmailBlock.Input, output_schema=SendEmailBlock.Output, test_input={'to_email': 'recipient@example.com', 'subject': 'Test Email', 'body': 'This is a test email.', 'creds': {'smtp_server': 'smtp.gmail.com', 'smtp_port': 25, 'smtp_username': 'your-email@gmail.com', 'smtp_password': 'your-gmail-password'}}, test_output=[('status', 'Email sent successfully')], test_mock={'send_email': lambda *args, **kwargs: 'Email sent successfully'})\nsuper().__init__()\n@staticmethod\ndef send_email(creds: EmailCredentials, to_email: str, subject: str, body: str) -> str:\n    smtp_server = creds.smtp_server\n    smtp_port = creds.smtp_port\n    smtp_username = creds.smtp_username.get_secret_value()\n    smtp_password = creds.smtp_password.get_secret_value()\n    msg = MIMEMultipart()\n    msg['From'] = smtp_username\n    msg['To'] = to_email\n    msg['Subject'] = subject\n    msg.attach(MIMEText(body, 'plain'))\n    with smtplib.SMTP(smtp_server, smtp_port) as server:\n        server.starttls()\n        server.login(smtp_username, smtp_password)\n        server.sendmail(smtp_username, to_email, msg.as_string())\n    return 'Email sent successfully'\nsmtp_server = creds.smtp_server\nsmtp_port = creds.smtp_port\nsmtp_username = creds.smtp_username.get_secret_value()\nsmtp_password = creds.smtp_password.get_secret_value()\nmsg = MIMEMultipart()\nmsg['From'] = smtp_username\nmsg['To'] = to_email\nmsg['Subject'] = subject\nmsg.attach(MIMEText(body, 'plain'))\nwith smtplib.SMTP(smtp_server, smtp_port) as server:\n    server.starttls()\n    server.login(smtp_username, smtp_password)\n    server.sendmail(smtp_username, to_email, msg.as_string())\nserver.starttls()\nserver.login(smtp_username, smtp_password)\nserver.sendmail(smtp_username, to_email, msg.as_string())\nreturn 'Email sent successfully'"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "def run(self, input_data: Input, **kwargs) -> BlockOutput:\n    yield ('status', self.send_email(input_data.creds, input_data.to_email, input_data.subject, input_data.body))",
        "(yield ('status', self.send_email(input_data.creds, input_data.to_email, input_data.subject, input_data.body)))"
      ],
      "code": "def run(self, input_data: Input, **kwargs) -> BlockOutput:\n    yield ('status', self.send_email(input_data.creds, input_data.to_email, input_data.subject, input_data.body))\n(yield ('status', self.send_email(input_data.creds, input_data.to_email, input_data.subject, input_data.body)))"
    }
  ],
  "edges": []
}