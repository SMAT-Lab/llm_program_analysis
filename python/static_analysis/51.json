{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "'\\nIn the Combination Sum problem, we are given a list consisting of distinct integers.\\nWe need to find all the combinations whose sum equals to target given.\\nWe can use an element more than one.\\n\\nTime complexity(Average Case): O(n!)\\n\\nConstraints:\\n1 <= candidates.length <= 30\\n2 <= candidates[i] <= 40\\nAll elements of candidates are distinct.\\n1 <= target <= 40\\n'",
        "def backtrack(candidates: list, path: list, answer: list, target: int, previous_index: int) -> None:\n    \"\"\"\n    A recursive function that searches for possible combinations. Backtracks in case\n    of a bigger current combination value than the target value.\n\n    Parameters\n    ----------\n    previous_index: Last index from the previous search\n    target: The value we need to obtain by summing our integers in the path list.\n    answer: A list of possible combinations\n    path: Current combination\n    candidates: A list of integers we can use.\n    \"\"\"\n    if target == 0:\n        answer.append(path.copy())\n    else:\n        for index in range(previous_index, len(candidates)):\n            if target >= candidates[index]:\n                path.append(candidates[index])\n                backtrack(candidates, path, answer, target - candidates[index], index)\n                path.pop(len(path) - 1)",
        "'\\n    A recursive function that searches for possible combinations. Backtracks in case\\n    of a bigger current combination value than the target value.\\n\\n    Parameters\\n    ----------\\n    previous_index: Last index from the previous search\\n    target: The value we need to obtain by summing our integers in the path list.\\n    answer: A list of possible combinations\\n    path: Current combination\\n    candidates: A list of integers we can use.\\n    '",
        "target Eq 0"
      ],
      "code": "'\\nIn the Combination Sum problem, we are given a list consisting of distinct integers.\\nWe need to find all the combinations whose sum equals to target given.\\nWe can use an element more than one.\\n\\nTime complexity(Average Case): O(n!)\\n\\nConstraints:\\n1 <= candidates.length <= 30\\n2 <= candidates[i] <= 40\\nAll elements of candidates are distinct.\\n1 <= target <= 40\\n'\ndef backtrack(candidates: list, path: list, answer: list, target: int, previous_index: int) -> None:\n    \"\"\"\n    A recursive function that searches for possible combinations. Backtracks in case\n    of a bigger current combination value than the target value.\n\n    Parameters\n    ----------\n    previous_index: Last index from the previous search\n    target: The value we need to obtain by summing our integers in the path list.\n    answer: A list of possible combinations\n    path: Current combination\n    candidates: A list of integers we can use.\n    \"\"\"\n    if target == 0:\n        answer.append(path.copy())\n    else:\n        for index in range(previous_index, len(candidates)):\n            if target >= candidates[index]:\n                path.append(candidates[index])\n                backtrack(candidates, path, answer, target - candidates[index], index)\n                path.pop(len(path) - 1)\n'\\n    A recursive function that searches for possible combinations. Backtracks in case\\n    of a bigger current combination value than the target value.\\n\\n    Parameters\\n    ----------\\n    previous_index: Last index from the previous search\\n    target: The value we need to obtain by summing our integers in the path list.\\n    answer: A list of possible combinations\\n    path: Current combination\\n    candidates: A list of integers we can use.\\n    '\ntarget Eq 0"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "answer.append(path.copy())"
      ],
      "code": "answer.append(path.copy())"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [
        "def combination_sum(candidates: list, target: int) -> list:\n    \"\"\"\n    >>> combination_sum([2, 3, 5], 8)\n    [[2, 2, 2, 2], [2, 3, 3], [3, 5]]\n    >>> combination_sum([2, 3, 6, 7], 7)\n    [[2, 2, 3], [7]]\n    >>> combination_sum([-8, 2.3, 0], 1)\n    Traceback (most recent call last):\n        ...\n    RecursionError: maximum recursion depth exceeded\n    \"\"\"\n    path = []\n    answer = []\n    backtrack(candidates, path, answer, target, 0)\n    return answer",
        "'\\n    >>> combination_sum([2, 3, 5], 8)\\n    [[2, 2, 2, 2], [2, 3, 3], [3, 5]]\\n    >>> combination_sum([2, 3, 6, 7], 7)\\n    [[2, 2, 3], [7]]\\n    >>> combination_sum([-8, 2.3, 0], 1)\\n    Traceback (most recent call last):\\n        ...\\n    RecursionError: maximum recursion depth exceeded\\n    '",
        "path = []",
        "answer = []",
        "backtrack(candidates, path, answer, target, 0)",
        "return answer"
      ],
      "code": "def combination_sum(candidates: list, target: int) -> list:\n    \"\"\"\n    >>> combination_sum([2, 3, 5], 8)\n    [[2, 2, 2, 2], [2, 3, 3], [3, 5]]\n    >>> combination_sum([2, 3, 6, 7], 7)\n    [[2, 2, 3], [7]]\n    >>> combination_sum([-8, 2.3, 0], 1)\n    Traceback (most recent call last):\n        ...\n    RecursionError: maximum recursion depth exceeded\n    \"\"\"\n    path = []\n    answer = []\n    backtrack(candidates, path, answer, target, 0)\n    return answer\n'\\n    >>> combination_sum([2, 3, 5], 8)\\n    [[2, 2, 2, 2], [2, 3, 3], [3, 5]]\\n    >>> combination_sum([2, 3, 6, 7], 7)\\n    [[2, 2, 3], [7]]\\n    >>> combination_sum([-8, 2.3, 0], 1)\\n    Traceback (most recent call last):\\n        ...\\n    RecursionError: maximum recursion depth exceeded\\n    '\npath = []\nanswer = []\nbacktrack(candidates, path, answer, target, 0)\nreturn answer"
    },
    {
      "id": "n4",
      "type": "block",
      "statements": [
        "index",
        "range(previous_index, len(candidates))"
      ],
      "code": "index\nrange(previous_index, len(candidates))"
    },
    {
      "id": "n5",
      "type": "block",
      "statements": [
        "target GtE candidates[index]"
      ],
      "code": "target GtE candidates[index]"
    },
    {
      "id": "n6",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n7",
      "type": "block",
      "statements": [
        "path.append(candidates[index])",
        "backtrack(candidates, path, answer, target Sub candidates[index], index)",
        "path.pop(len(path) Sub 1)"
      ],
      "code": "path.append(candidates[index])\nbacktrack(candidates, path, answer, target Sub candidates[index], index)\npath.pop(len(path) Sub 1)"
    },
    {
      "id": "n8",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n9",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n10",
      "type": "block",
      "statements": [
        "def main() -> None:\n    print(combination_sum([-8, 2.3, 0], 1))",
        "print(combination_sum([-8, 2.3, 0], 1))",
        "__name__ Eq '__main__'"
      ],
      "code": "def main() -> None:\n    print(combination_sum([-8, 2.3, 0], 1))\nprint(combination_sum([-8, 2.3, 0], 1))\n__name__ Eq '__main__'"
    },
    {
      "id": "n11",
      "type": "block",
      "statements": [
        "import doctest",
        "doctest.testmod()",
        "main()"
      ],
      "code": "import doctest\ndoctest.testmod()\nmain()"
    },
    {
      "id": "n12",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n13",
      "type": "block",
      "statements": [],
      "code": ""
    }
  ],
  "edges": [
    {
      "source": "n5",
      "target": "n8"
    },
    {
      "source": "n1",
      "target": "n3"
    },
    {
      "source": "n6",
      "target": "n3"
    },
    {
      "source": "n0",
      "target": "n1"
    },
    {
      "source": "n2",
      "target": "n4"
    },
    {
      "source": "n8",
      "target": "n9"
    },
    {
      "source": "n10",
      "target": "n11"
    },
    {
      "source": "n9",
      "target": "n4"
    },
    {
      "source": "n4",
      "target": "n5"
    },
    {
      "source": "n5",
      "target": "n7"
    },
    {
      "source": "n10",
      "target": "n12"
    },
    {
      "source": "n12",
      "target": "n13"
    },
    {
      "source": "n11",
      "target": "n13"
    },
    {
      "source": "n4",
      "target": "n6"
    },
    {
      "source": "n0",
      "target": "n2"
    },
    {
      "source": "n7",
      "target": "n9"
    }
  ]
}