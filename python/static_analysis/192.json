{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "import operator",
        "from enum import Enum",
        "from typing import Any",
        "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema",
        "from backend.data.model import SchemaField",
        "class Operation(Enum):\n    ADD = 'Add'\n    SUBTRACT = 'Subtract'\n    MULTIPLY = 'Multiply'\n    DIVIDE = 'Divide'\n    POWER = 'Power'",
        "ADD = 'Add'",
        "SUBTRACT = 'Subtract'",
        "MULTIPLY = 'Multiply'",
        "DIVIDE = 'Divide'",
        "POWER = 'Power'",
        "class CalculatorBlock(Block):\n\n    class Input(BlockSchema):\n        operation: Operation = SchemaField(description='Choose the math operation you want to perform', placeholder='Select an operation')\n        a: float = SchemaField(description='Enter the first number (A)', placeholder='For example: 10')\n        b: float = SchemaField(description='Enter the second number (B)', placeholder='For example: 5')\n        round_result: bool = SchemaField(description='Do you want to round the result to a whole number?', default=False)\n\n    class Output(BlockSchema):\n        result: float = SchemaField(description='The result of your calculation')\n\n    def __init__(self):\n        super().__init__(id='b1ab9b19-67a6-406d-abf5-2dba76d00c79', input_schema=CalculatorBlock.Input, output_schema=CalculatorBlock.Output, description='Performs a mathematical operation on two numbers.', categories={BlockCategory.LOGIC}, test_input={'operation': Operation.ADD.value, 'a': 10.0, 'b': 5.0, 'round_result': False}, test_output=[('result', 15.0)])\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        operation = input_data.operation\n        a = input_data.a\n        b = input_data.b\n        operations = {Operation.ADD: operator.add, Operation.SUBTRACT: operator.sub, Operation.MULTIPLY: operator.mul, Operation.DIVIDE: operator.truediv, Operation.POWER: operator.pow}\n        op_func = operations[operation]\n        try:\n            if operation == Operation.DIVIDE and b == 0:\n                raise ZeroDivisionError('Cannot divide by zero')\n            result = op_func(a, b)\n            if input_data.round_result:\n                result = round(result)\n            yield ('result', result)\n        except ZeroDivisionError:\n            yield ('result', float('inf'))\n        except Exception:\n            yield ('result', float('nan'))",
        "class Input(BlockSchema):\n    operation: Operation = SchemaField(description='Choose the math operation you want to perform', placeholder='Select an operation')\n    a: float = SchemaField(description='Enter the first number (A)', placeholder='For example: 10')\n    b: float = SchemaField(description='Enter the second number (B)', placeholder='For example: 5')\n    round_result: bool = SchemaField(description='Do you want to round the result to a whole number?', default=False)",
        "operation: Operation = SchemaField(description='Choose the math operation you want to perform', placeholder='Select an operation')",
        "a: float = SchemaField(description='Enter the first number (A)', placeholder='For example: 10')",
        "b: float = SchemaField(description='Enter the second number (B)', placeholder='For example: 5')",
        "round_result: bool = SchemaField(description='Do you want to round the result to a whole number?', default=False)",
        "class Output(BlockSchema):\n    result: float = SchemaField(description='The result of your calculation')",
        "result: float = SchemaField(description='The result of your calculation')",
        "def __init__(self):\n    super().__init__(id='b1ab9b19-67a6-406d-abf5-2dba76d00c79', input_schema=CalculatorBlock.Input, output_schema=CalculatorBlock.Output, description='Performs a mathematical operation on two numbers.', categories={BlockCategory.LOGIC}, test_input={'operation': Operation.ADD.value, 'a': 10.0, 'b': 5.0, 'round_result': False}, test_output=[('result', 15.0)])",
        "super().__init__()",
        "def run(self, input_data: Input, **kwargs) -> BlockOutput:\n    operation = input_data.operation\n    a = input_data.a\n    b = input_data.b\n    operations = {Operation.ADD: operator.add, Operation.SUBTRACT: operator.sub, Operation.MULTIPLY: operator.mul, Operation.DIVIDE: operator.truediv, Operation.POWER: operator.pow}\n    op_func = operations[operation]\n    try:\n        if operation == Operation.DIVIDE and b == 0:\n            raise ZeroDivisionError('Cannot divide by zero')\n        result = op_func(a, b)\n        if input_data.round_result:\n            result = round(result)\n        yield ('result', result)\n    except ZeroDivisionError:\n        yield ('result', float('inf'))\n    except Exception:\n        yield ('result', float('nan'))",
        "operation = input_data.operation",
        "a = input_data.a",
        "b = input_data.b",
        "operations = {Operation.ADD: operator.add, Operation.SUBTRACT: operator.sub, Operation.MULTIPLY: operator.mul, Operation.DIVIDE: operator.truediv, Operation.POWER: operator.pow}",
        "op_func = operations[operation]",
        "try:\n    if operation == Operation.DIVIDE and b == 0:\n        raise ZeroDivisionError('Cannot divide by zero')\n    result = op_func(a, b)\n    if input_data.round_result:\n        result = round(result)\n    yield ('result', result)\nexcept ZeroDivisionError:\n    yield ('result', float('inf'))\nexcept Exception:\n    yield ('result', float('nan'))",
        "operation == Operation.DIVIDE and b == 0"
      ],
      "code": "import operator\nfrom enum import Enum\nfrom typing import Any\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\nclass Operation(Enum):\n    ADD = 'Add'\n    SUBTRACT = 'Subtract'\n    MULTIPLY = 'Multiply'\n    DIVIDE = 'Divide'\n    POWER = 'Power'\nADD = 'Add'\nSUBTRACT = 'Subtract'\nMULTIPLY = 'Multiply'\nDIVIDE = 'Divide'\nPOWER = 'Power'\nclass CalculatorBlock(Block):\n\n    class Input(BlockSchema):\n        operation: Operation = SchemaField(description='Choose the math operation you want to perform', placeholder='Select an operation')\n        a: float = SchemaField(description='Enter the first number (A)', placeholder='For example: 10')\n        b: float = SchemaField(description='Enter the second number (B)', placeholder='For example: 5')\n        round_result: bool = SchemaField(description='Do you want to round the result to a whole number?', default=False)\n\n    class Output(BlockSchema):\n        result: float = SchemaField(description='The result of your calculation')\n\n    def __init__(self):\n        super().__init__(id='b1ab9b19-67a6-406d-abf5-2dba76d00c79', input_schema=CalculatorBlock.Input, output_schema=CalculatorBlock.Output, description='Performs a mathematical operation on two numbers.', categories={BlockCategory.LOGIC}, test_input={'operation': Operation.ADD.value, 'a': 10.0, 'b': 5.0, 'round_result': False}, test_output=[('result', 15.0)])\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        operation = input_data.operation\n        a = input_data.a\n        b = input_data.b\n        operations = {Operation.ADD: operator.add, Operation.SUBTRACT: operator.sub, Operation.MULTIPLY: operator.mul, Operation.DIVIDE: operator.truediv, Operation.POWER: operator.pow}\n        op_func = operations[operation]\n        try:\n            if operation == Operation.DIVIDE and b == 0:\n                raise ZeroDivisionError('Cannot divide by zero')\n            result = op_func(a, b)\n            if input_data.round_result:\n                result = round(result)\n            yield ('result', result)\n        except ZeroDivisionError:\n            yield ('result', float('inf'))\n        except Exception:\n            yield ('result', float('nan'))\nclass Input(BlockSchema):\n    operation: Operation = SchemaField(description='Choose the math operation you want to perform', placeholder='Select an operation')\n    a: float = SchemaField(description='Enter the first number (A)', placeholder='For example: 10')\n    b: float = SchemaField(description='Enter the second number (B)', placeholder='For example: 5')\n    round_result: bool = SchemaField(description='Do you want to round the result to a whole number?', default=False)\noperation: Operation = SchemaField(description='Choose the math operation you want to perform', placeholder='Select an operation')\na: float = SchemaField(description='Enter the first number (A)', placeholder='For example: 10')\nb: float = SchemaField(description='Enter the second number (B)', placeholder='For example: 5')\nround_result: bool = SchemaField(description='Do you want to round the result to a whole number?', default=False)\nclass Output(BlockSchema):\n    result: float = SchemaField(description='The result of your calculation')\nresult: float = SchemaField(description='The result of your calculation')\ndef __init__(self):\n    super().__init__(id='b1ab9b19-67a6-406d-abf5-2dba76d00c79', input_schema=CalculatorBlock.Input, output_schema=CalculatorBlock.Output, description='Performs a mathematical operation on two numbers.', categories={BlockCategory.LOGIC}, test_input={'operation': Operation.ADD.value, 'a': 10.0, 'b': 5.0, 'round_result': False}, test_output=[('result', 15.0)])\nsuper().__init__()\ndef run(self, input_data: Input, **kwargs) -> BlockOutput:\n    operation = input_data.operation\n    a = input_data.a\n    b = input_data.b\n    operations = {Operation.ADD: operator.add, Operation.SUBTRACT: operator.sub, Operation.MULTIPLY: operator.mul, Operation.DIVIDE: operator.truediv, Operation.POWER: operator.pow}\n    op_func = operations[operation]\n    try:\n        if operation == Operation.DIVIDE and b == 0:\n            raise ZeroDivisionError('Cannot divide by zero')\n        result = op_func(a, b)\n        if input_data.round_result:\n            result = round(result)\n        yield ('result', result)\n    except ZeroDivisionError:\n        yield ('result', float('inf'))\n    except Exception:\n        yield ('result', float('nan'))\noperation = input_data.operation\na = input_data.a\nb = input_data.b\noperations = {Operation.ADD: operator.add, Operation.SUBTRACT: operator.sub, Operation.MULTIPLY: operator.mul, Operation.DIVIDE: operator.truediv, Operation.POWER: operator.pow}\nop_func = operations[operation]\ntry:\n    if operation == Operation.DIVIDE and b == 0:\n        raise ZeroDivisionError('Cannot divide by zero')\n    result = op_func(a, b)\n    if input_data.round_result:\n        result = round(result)\n    yield ('result', result)\nexcept ZeroDivisionError:\n    yield ('result', float('inf'))\nexcept Exception:\n    yield ('result', float('nan'))\noperation == Operation.DIVIDE and b == 0"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "raise ZeroDivisionError('Cannot divide by zero')"
      ],
      "code": "raise ZeroDivisionError('Cannot divide by zero')"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [
        "result = op_func(a, b)",
        "input_data.round_result"
      ],
      "code": "result = op_func(a, b)\ninput_data.round_result"
    },
    {
      "id": "n4",
      "type": "block",
      "statements": [
        "result = round(result)"
      ],
      "code": "result = round(result)"
    },
    {
      "id": "n5",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n6",
      "type": "block",
      "statements": [
        "(yield ('result', result))",
        "(yield ('result', float('inf')))",
        "(yield ('result', float('nan')))",
        "class CountItemsBlock(Block):\n\n    class Input(BlockSchema):\n        collection: Any = SchemaField(description='Enter the collection you want to count. This can be a list, dictionary, string, or any other iterable.', placeholder=\"For example: [1, 2, 3] or {'a': 1, 'b': 2} or 'hello'\")\n\n    class Output(BlockSchema):\n        count: int = SchemaField(description='The number of items in the collection')\n\n    def __init__(self):\n        super().__init__(id='3c9c2f42-b0c3-435f-ba35-05f7a25c772a', input_schema=CountItemsBlock.Input, output_schema=CountItemsBlock.Output, description='Counts the number of items in a collection.', categories={BlockCategory.LOGIC}, test_input={'collection': [1, 2, 3, 4, 5]}, test_output=[('count', 5)])\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        collection = input_data.collection\n        try:\n            if isinstance(collection, (str, list, tuple, set, dict)):\n                count = len(collection)\n            elif hasattr(collection, '__iter__'):\n                count = sum((1 for _ in collection))\n            else:\n                raise ValueError('Input is not a countable collection')\n            yield ('count', count)\n        except Exception:\n            yield ('count', -1)",
        "class Input(BlockSchema):\n    collection: Any = SchemaField(description='Enter the collection you want to count. This can be a list, dictionary, string, or any other iterable.', placeholder=\"For example: [1, 2, 3] or {'a': 1, 'b': 2} or 'hello'\")",
        "collection: Any = SchemaField(description='Enter the collection you want to count. This can be a list, dictionary, string, or any other iterable.', placeholder=\"For example: [1, 2, 3] or {'a': 1, 'b': 2} or 'hello'\")",
        "class Output(BlockSchema):\n    count: int = SchemaField(description='The number of items in the collection')",
        "count: int = SchemaField(description='The number of items in the collection')",
        "def __init__(self):\n    super().__init__(id='3c9c2f42-b0c3-435f-ba35-05f7a25c772a', input_schema=CountItemsBlock.Input, output_schema=CountItemsBlock.Output, description='Counts the number of items in a collection.', categories={BlockCategory.LOGIC}, test_input={'collection': [1, 2, 3, 4, 5]}, test_output=[('count', 5)])",
        "super().__init__()",
        "def run(self, input_data: Input, **kwargs) -> BlockOutput:\n    collection = input_data.collection\n    try:\n        if isinstance(collection, (str, list, tuple, set, dict)):\n            count = len(collection)\n        elif hasattr(collection, '__iter__'):\n            count = sum((1 for _ in collection))\n        else:\n            raise ValueError('Input is not a countable collection')\n        yield ('count', count)\n    except Exception:\n        yield ('count', -1)",
        "collection = input_data.collection",
        "try:\n    if isinstance(collection, (str, list, tuple, set, dict)):\n        count = len(collection)\n    elif hasattr(collection, '__iter__'):\n        count = sum((1 for _ in collection))\n    else:\n        raise ValueError('Input is not a countable collection')\n    yield ('count', count)\nexcept Exception:\n    yield ('count', -1)",
        "isinstance(collection, (str, list, tuple, set, dict))"
      ],
      "code": "(yield ('result', result))\n(yield ('result', float('inf')))\n(yield ('result', float('nan')))\nclass CountItemsBlock(Block):\n\n    class Input(BlockSchema):\n        collection: Any = SchemaField(description='Enter the collection you want to count. This can be a list, dictionary, string, or any other iterable.', placeholder=\"For example: [1, 2, 3] or {'a': 1, 'b': 2} or 'hello'\")\n\n    class Output(BlockSchema):\n        count: int = SchemaField(description='The number of items in the collection')\n\n    def __init__(self):\n        super().__init__(id='3c9c2f42-b0c3-435f-ba35-05f7a25c772a', input_schema=CountItemsBlock.Input, output_schema=CountItemsBlock.Output, description='Counts the number of items in a collection.', categories={BlockCategory.LOGIC}, test_input={'collection': [1, 2, 3, 4, 5]}, test_output=[('count', 5)])\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        collection = input_data.collection\n        try:\n            if isinstance(collection, (str, list, tuple, set, dict)):\n                count = len(collection)\n            elif hasattr(collection, '__iter__'):\n                count = sum((1 for _ in collection))\n            else:\n                raise ValueError('Input is not a countable collection')\n            yield ('count', count)\n        except Exception:\n            yield ('count', -1)\nclass Input(BlockSchema):\n    collection: Any = SchemaField(description='Enter the collection you want to count. This can be a list, dictionary, string, or any other iterable.', placeholder=\"For example: [1, 2, 3] or {'a': 1, 'b': 2} or 'hello'\")\ncollection: Any = SchemaField(description='Enter the collection you want to count. This can be a list, dictionary, string, or any other iterable.', placeholder=\"For example: [1, 2, 3] or {'a': 1, 'b': 2} or 'hello'\")\nclass Output(BlockSchema):\n    count: int = SchemaField(description='The number of items in the collection')\ncount: int = SchemaField(description='The number of items in the collection')\ndef __init__(self):\n    super().__init__(id='3c9c2f42-b0c3-435f-ba35-05f7a25c772a', input_schema=CountItemsBlock.Input, output_schema=CountItemsBlock.Output, description='Counts the number of items in a collection.', categories={BlockCategory.LOGIC}, test_input={'collection': [1, 2, 3, 4, 5]}, test_output=[('count', 5)])\nsuper().__init__()\ndef run(self, input_data: Input, **kwargs) -> BlockOutput:\n    collection = input_data.collection\n    try:\n        if isinstance(collection, (str, list, tuple, set, dict)):\n            count = len(collection)\n        elif hasattr(collection, '__iter__'):\n            count = sum((1 for _ in collection))\n        else:\n            raise ValueError('Input is not a countable collection')\n        yield ('count', count)\n    except Exception:\n        yield ('count', -1)\ncollection = input_data.collection\ntry:\n    if isinstance(collection, (str, list, tuple, set, dict)):\n        count = len(collection)\n    elif hasattr(collection, '__iter__'):\n        count = sum((1 for _ in collection))\n    else:\n        raise ValueError('Input is not a countable collection')\n    yield ('count', count)\nexcept Exception:\n    yield ('count', -1)\nisinstance(collection, (str, list, tuple, set, dict))"
    },
    {
      "id": "n7",
      "type": "block",
      "statements": [
        "count = len(collection)"
      ],
      "code": "count = len(collection)"
    },
    {
      "id": "n8",
      "type": "block",
      "statements": [
        "hasattr(collection, '__iter__')"
      ],
      "code": "hasattr(collection, '__iter__')"
    },
    {
      "id": "n9",
      "type": "block",
      "statements": [
        "(yield ('count', count))",
        "(yield ('count', -1))"
      ],
      "code": "(yield ('count', count))\n(yield ('count', -1))"
    },
    {
      "id": "n10",
      "type": "block",
      "statements": [
        "count = sum((1 for _ in collection))"
      ],
      "code": "count = sum((1 for _ in collection))"
    },
    {
      "id": "n11",
      "type": "block",
      "statements": [
        "raise ValueError('Input is not a countable collection')"
      ],
      "code": "raise ValueError('Input is not a countable collection')"
    },
    {
      "id": "n12",
      "type": "block",
      "statements": [],
      "code": ""
    }
  ],
  "edges": [
    {
      "source": "n5",
      "target": "n6"
    },
    {
      "source": "n1",
      "target": "n3"
    },
    {
      "source": "n6",
      "target": "n7"
    },
    {
      "source": "n8",
      "target": "n10"
    },
    {
      "source": "n0",
      "target": "n1"
    },
    {
      "source": "n0",
      "target": "n2"
    },
    {
      "source": "n3",
      "target": "n4"
    },
    {
      "source": "n3",
      "target": "n5"
    },
    {
      "source": "n12",
      "target": "n9"
    },
    {
      "source": "n4",
      "target": "n6"
    },
    {
      "source": "n10",
      "target": "n12"
    },
    {
      "source": "n11",
      "target": "n12"
    },
    {
      "source": "n6",
      "target": "n8"
    },
    {
      "source": "n8",
      "target": "n11"
    },
    {
      "source": "n2",
      "target": "n3"
    },
    {
      "source": "n7",
      "target": "n9"
    }
  ]
}