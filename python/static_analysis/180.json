{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "import logging",
        "from typing import Optional, cast",
        "from autogpt_libs.auth.models import DEFAULT_USER_ID",
        "from fastapi import HTTPException",
        "from prisma import Json",
        "from prisma.models import User",
        "from backend.data.db import prisma",
        "from backend.data.model import UserIntegrations, UserMetadata, UserMetadataRaw",
        "from backend.util.encryption import JSONCryptor",
        "logger = logging.getLogger(__name__)",
        "async def get_or_create_user(user_data: dict) -> User:\n    user_id = user_data.get('sub')\n    if not user_id:\n        raise HTTPException(status_code=401, detail='User ID not found in token')\n    user_email = user_data.get('email')\n    if not user_email:\n        raise HTTPException(status_code=401, detail='Email not found in token')\n    user = await prisma.user.find_unique(where={'id': user_id})\n    if not user:\n        user = await prisma.user.create(data={'id': user_id, 'email': user_email, 'name': user_data.get('user_metadata', {}).get('name')})\n    return User.model_validate(user)",
        "user_id = user_data.get('sub')",
        "not user_id"
      ],
      "code": "import logging\nfrom typing import Optional, cast\nfrom autogpt_libs.auth.models import DEFAULT_USER_ID\nfrom fastapi import HTTPException\nfrom prisma import Json\nfrom prisma.models import User\nfrom backend.data.db import prisma\nfrom backend.data.model import UserIntegrations, UserMetadata, UserMetadataRaw\nfrom backend.util.encryption import JSONCryptor\nlogger = logging.getLogger(__name__)\nasync def get_or_create_user(user_data: dict) -> User:\n    user_id = user_data.get('sub')\n    if not user_id:\n        raise HTTPException(status_code=401, detail='User ID not found in token')\n    user_email = user_data.get('email')\n    if not user_email:\n        raise HTTPException(status_code=401, detail='Email not found in token')\n    user = await prisma.user.find_unique(where={'id': user_id})\n    if not user:\n        user = await prisma.user.create(data={'id': user_id, 'email': user_email, 'name': user_data.get('user_metadata', {}).get('name')})\n    return User.model_validate(user)\nuser_id = user_data.get('sub')\nnot user_id"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "raise HTTPException(status_code=401, detail='User ID not found in token')"
      ],
      "code": "raise HTTPException(status_code=401, detail='User ID not found in token')"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [
        "user_email = user_data.get('email')",
        "not user_email"
      ],
      "code": "user_email = user_data.get('email')\nnot user_email"
    },
    {
      "id": "n4",
      "type": "block",
      "statements": [
        "raise HTTPException(status_code=401, detail='Email not found in token')"
      ],
      "code": "raise HTTPException(status_code=401, detail='Email not found in token')"
    },
    {
      "id": "n5",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n6",
      "type": "block",
      "statements": [
        "user = await prisma.user.find_unique(where={'id': user_id})",
        "not user"
      ],
      "code": "user = await prisma.user.find_unique(where={'id': user_id})\nnot user"
    },
    {
      "id": "n7",
      "type": "block",
      "statements": [
        "user = await prisma.user.create(data={'id': user_id, 'email': user_email, 'name': user_data.get('user_metadata', {}).get('name')})"
      ],
      "code": "user = await prisma.user.create(data={'id': user_id, 'email': user_email, 'name': user_data.get('user_metadata', {}).get('name')})"
    },
    {
      "id": "n8",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n9",
      "type": "block",
      "statements": [
        "return User.model_validate(user)"
      ],
      "code": "return User.model_validate(user)"
    },
    {
      "id": "n10",
      "type": "block",
      "statements": [
        "async def get_user_by_id(user_id: str) -> Optional[User]:\n    user = await prisma.user.find_unique(where={'id': user_id})\n    return User.model_validate(user) if user else None",
        "user = await prisma.user.find_unique(where={'id': user_id})",
        "return User.model_validate(user) if user else None"
      ],
      "code": "async def get_user_by_id(user_id: str) -> Optional[User]:\n    user = await prisma.user.find_unique(where={'id': user_id})\n    return User.model_validate(user) if user else None\nuser = await prisma.user.find_unique(where={'id': user_id})\nreturn User.model_validate(user) if user else None"
    },
    {
      "id": "n11",
      "type": "block",
      "statements": [
        "async def create_default_user() -> Optional[User]:\n    user = await prisma.user.find_unique(where={'id': DEFAULT_USER_ID})\n    if not user:\n        user = await prisma.user.create(data={'id': DEFAULT_USER_ID, 'email': 'default@example.com', 'name': 'Default User'})\n    return User.model_validate(user)",
        "user = await prisma.user.find_unique(where={'id': DEFAULT_USER_ID})",
        "not user"
      ],
      "code": "async def create_default_user() -> Optional[User]:\n    user = await prisma.user.find_unique(where={'id': DEFAULT_USER_ID})\n    if not user:\n        user = await prisma.user.create(data={'id': DEFAULT_USER_ID, 'email': 'default@example.com', 'name': 'Default User'})\n    return User.model_validate(user)\nuser = await prisma.user.find_unique(where={'id': DEFAULT_USER_ID})\nnot user"
    },
    {
      "id": "n12",
      "type": "block",
      "statements": [
        "user = await prisma.user.create(data={'id': DEFAULT_USER_ID, 'email': 'default@example.com', 'name': 'Default User'})"
      ],
      "code": "user = await prisma.user.create(data={'id': DEFAULT_USER_ID, 'email': 'default@example.com', 'name': 'Default User'})"
    },
    {
      "id": "n13",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n14",
      "type": "block",
      "statements": [
        "return User.model_validate(user)"
      ],
      "code": "return User.model_validate(user)"
    },
    {
      "id": "n15",
      "type": "block",
      "statements": [
        "async def get_user_metadata(user_id: str) -> UserMetadata:\n    user = await User.prisma().find_unique_or_raise(where={'id': user_id})\n    metadata = cast(UserMetadataRaw, user.metadata)\n    return UserMetadata.model_validate(metadata)",
        "user = await User.prisma().find_unique_or_raise(where={'id': user_id})",
        "metadata = cast(UserMetadataRaw, user.metadata)",
        "return UserMetadata.model_validate(metadata)"
      ],
      "code": "async def get_user_metadata(user_id: str) -> UserMetadata:\n    user = await User.prisma().find_unique_or_raise(where={'id': user_id})\n    metadata = cast(UserMetadataRaw, user.metadata)\n    return UserMetadata.model_validate(metadata)\nuser = await User.prisma().find_unique_or_raise(where={'id': user_id})\nmetadata = cast(UserMetadataRaw, user.metadata)\nreturn UserMetadata.model_validate(metadata)"
    },
    {
      "id": "n16",
      "type": "block",
      "statements": [
        "async def update_user_metadata(user_id: str, metadata: UserMetadata):\n    await User.prisma().update(where={'id': user_id}, data={'metadata': Json(metadata.model_dump())})",
        "await User.prisma().update(where={'id': user_id}, data={'metadata': Json(metadata.model_dump())})",
        "async def get_user_integrations(user_id: str) -> UserIntegrations:\n    user = await User.prisma().find_unique_or_raise(where={'id': user_id})\n    encrypted_integrations = user.integrations\n    if not encrypted_integrations:\n        return UserIntegrations()\n    else:\n        return UserIntegrations.model_validate(JSONCryptor().decrypt(encrypted_integrations))",
        "user = await User.prisma().find_unique_or_raise(where={'id': user_id})",
        "encrypted_integrations = user.integrations",
        "not encrypted_integrations"
      ],
      "code": "async def update_user_metadata(user_id: str, metadata: UserMetadata):\n    await User.prisma().update(where={'id': user_id}, data={'metadata': Json(metadata.model_dump())})\nawait User.prisma().update(where={'id': user_id}, data={'metadata': Json(metadata.model_dump())})\nasync def get_user_integrations(user_id: str) -> UserIntegrations:\n    user = await User.prisma().find_unique_or_raise(where={'id': user_id})\n    encrypted_integrations = user.integrations\n    if not encrypted_integrations:\n        return UserIntegrations()\n    else:\n        return UserIntegrations.model_validate(JSONCryptor().decrypt(encrypted_integrations))\nuser = await User.prisma().find_unique_or_raise(where={'id': user_id})\nencrypted_integrations = user.integrations\nnot encrypted_integrations"
    },
    {
      "id": "n17",
      "type": "block",
      "statements": [
        "return UserIntegrations()"
      ],
      "code": "return UserIntegrations()"
    },
    {
      "id": "n18",
      "type": "block",
      "statements": [
        "return UserIntegrations.model_validate(JSONCryptor().decrypt(encrypted_integrations))"
      ],
      "code": "return UserIntegrations.model_validate(JSONCryptor().decrypt(encrypted_integrations))"
    },
    {
      "id": "n19",
      "type": "block",
      "statements": [
        "async def update_user_integrations(user_id: str, data: UserIntegrations):\n    encrypted_data = JSONCryptor().encrypt(data.model_dump())\n    await User.prisma().update(where={'id': user_id}, data={'integrations': encrypted_data})",
        "encrypted_data = JSONCryptor().encrypt(data.model_dump())",
        "await User.prisma().update(where={'id': user_id}, data={'integrations': encrypted_data})",
        "async def migrate_and_encrypt_user_integrations():\n    \"\"\"Migrate integration credentials and OAuth states from metadata to integrations column.\"\"\"\n    users = await User.prisma().find_many(where={'metadata': {'path': ['integration_credentials'], 'not': Json({'a': 'yolo'})}})\n    logger.info(f'Migrating integration credentials for {len(users)} users')\n    for user in users:\n        raw_metadata = cast(UserMetadataRaw, user.metadata)\n        metadata = UserMetadata.model_validate(raw_metadata)\n        integrations = await get_user_integrations(user_id=user.id)\n        if metadata.integration_credentials and (not integrations.credentials):\n            integrations.credentials = metadata.integration_credentials\n        if metadata.integration_oauth_states:\n            integrations.oauth_states = metadata.integration_oauth_states\n        await update_user_integrations(user_id=user.id, data=integrations)\n        raw_metadata = dict(raw_metadata)\n        raw_metadata.pop('integration_credentials', None)\n        raw_metadata.pop('integration_oauth_states', None)\n        await User.prisma().update(where={'id': user.id}, data={'metadata': Json(raw_metadata)})",
        "'Migrate integration credentials and OAuth states from metadata to integrations column.'",
        "users = await User.prisma().find_many(where={'metadata': {'path': ['integration_credentials'], 'not': Json({'a': 'yolo'})}})",
        "logger.info(f'Migrating integration credentials for {len(users)} users')"
      ],
      "code": "async def update_user_integrations(user_id: str, data: UserIntegrations):\n    encrypted_data = JSONCryptor().encrypt(data.model_dump())\n    await User.prisma().update(where={'id': user_id}, data={'integrations': encrypted_data})\nencrypted_data = JSONCryptor().encrypt(data.model_dump())\nawait User.prisma().update(where={'id': user_id}, data={'integrations': encrypted_data})\nasync def migrate_and_encrypt_user_integrations():\n    \"\"\"Migrate integration credentials and OAuth states from metadata to integrations column.\"\"\"\n    users = await User.prisma().find_many(where={'metadata': {'path': ['integration_credentials'], 'not': Json({'a': 'yolo'})}})\n    logger.info(f'Migrating integration credentials for {len(users)} users')\n    for user in users:\n        raw_metadata = cast(UserMetadataRaw, user.metadata)\n        metadata = UserMetadata.model_validate(raw_metadata)\n        integrations = await get_user_integrations(user_id=user.id)\n        if metadata.integration_credentials and (not integrations.credentials):\n            integrations.credentials = metadata.integration_credentials\n        if metadata.integration_oauth_states:\n            integrations.oauth_states = metadata.integration_oauth_states\n        await update_user_integrations(user_id=user.id, data=integrations)\n        raw_metadata = dict(raw_metadata)\n        raw_metadata.pop('integration_credentials', None)\n        raw_metadata.pop('integration_oauth_states', None)\n        await User.prisma().update(where={'id': user.id}, data={'metadata': Json(raw_metadata)})\n'Migrate integration credentials and OAuth states from metadata to integrations column.'\nusers = await User.prisma().find_many(where={'metadata': {'path': ['integration_credentials'], 'not': Json({'a': 'yolo'})}})\nlogger.info(f'Migrating integration credentials for {len(users)} users')"
    },
    {
      "id": "n20",
      "type": "block",
      "statements": [
        "user",
        "users"
      ],
      "code": "user\nusers"
    },
    {
      "id": "n21",
      "type": "block",
      "statements": [
        "raw_metadata = cast(UserMetadataRaw, user.metadata)",
        "metadata = UserMetadata.model_validate(raw_metadata)",
        "integrations = await get_user_integrations(user_id=user.id)",
        "metadata.integration_credentials and (not integrations.credentials)"
      ],
      "code": "raw_metadata = cast(UserMetadataRaw, user.metadata)\nmetadata = UserMetadata.model_validate(raw_metadata)\nintegrations = await get_user_integrations(user_id=user.id)\nmetadata.integration_credentials and (not integrations.credentials)"
    },
    {
      "id": "n22",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n23",
      "type": "block",
      "statements": [
        "integrations.credentials = metadata.integration_credentials"
      ],
      "code": "integrations.credentials = metadata.integration_credentials"
    },
    {
      "id": "n24",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n25",
      "type": "block",
      "statements": [
        "metadata.integration_oauth_states"
      ],
      "code": "metadata.integration_oauth_states"
    },
    {
      "id": "n26",
      "type": "block",
      "statements": [
        "integrations.oauth_states = metadata.integration_oauth_states"
      ],
      "code": "integrations.oauth_states = metadata.integration_oauth_states"
    },
    {
      "id": "n27",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n28",
      "type": "block",
      "statements": [
        "await update_user_integrations(user_id=user.id, data=integrations)",
        "raw_metadata = dict(raw_metadata)",
        "raw_metadata.pop('integration_credentials', None)",
        "raw_metadata.pop('integration_oauth_states', None)",
        "await User.prisma().update(where={'id': user.id}, data={'metadata': Json(raw_metadata)})"
      ],
      "code": "await update_user_integrations(user_id=user.id, data=integrations)\nraw_metadata = dict(raw_metadata)\nraw_metadata.pop('integration_credentials', None)\nraw_metadata.pop('integration_oauth_states', None)\nawait User.prisma().update(where={'id': user.id}, data={'metadata': Json(raw_metadata)})"
    }
  ],
  "edges": [
    {
      "source": "n6",
      "target": "n7"
    },
    {
      "source": "n0",
      "target": "n1"
    },
    {
      "source": "n23",
      "target": "n25"
    },
    {
      "source": "n21",
      "target": "n24"
    },
    {
      "source": "n2",
      "target": "n3"
    },
    {
      "source": "n11",
      "target": "n13"
    },
    {
      "source": "n13",
      "target": "n14"
    },
    {
      "source": "n16",
      "target": "n17"
    },
    {
      "source": "n8",
      "target": "n9"
    },
    {
      "source": "n16",
      "target": "n18"
    },
    {
      "source": "n3",
      "target": "n4"
    },
    {
      "source": "n19",
      "target": "n20"
    },
    {
      "source": "n4",
      "target": "n6"
    },
    {
      "source": "n24",
      "target": "n25"
    },
    {
      "source": "n21",
      "target": "n23"
    },
    {
      "source": "n12",
      "target": "n14"
    },
    {
      "source": "n20",
      "target": "n21"
    },
    {
      "source": "n11",
      "target": "n12"
    },
    {
      "source": "n7",
      "target": "n9"
    },
    {
      "source": "n5",
      "target": "n6"
    },
    {
      "source": "n25",
      "target": "n26"
    },
    {
      "source": "n26",
      "target": "n28"
    },
    {
      "source": "n1",
      "target": "n3"
    },
    {
      "source": "n27",
      "target": "n28"
    },
    {
      "source": "n28",
      "target": "n20"
    },
    {
      "source": "n25",
      "target": "n27"
    },
    {
      "source": "n3",
      "target": "n5"
    },
    {
      "source": "n20",
      "target": "n22"
    },
    {
      "source": "n6",
      "target": "n8"
    },
    {
      "source": "n0",
      "target": "n2"
    }
  ]
}