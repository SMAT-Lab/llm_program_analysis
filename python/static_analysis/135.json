{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "from mrjob.job import MRJob",
        "class HitCounts(MRJob):\n\n    def extract_url(self, line):\n        \"\"\"Extract the generated url from the log line.\"\"\"\n        pass\n\n    def extract_year_month(self, line):\n        \"\"\"Return the year and month portions of the timestamp.\"\"\"\n        pass\n\n    def mapper(self, _, line):\n        \"\"\"Parse each log line, extract and transform relevant lines.\n\n        Emit key value pairs of the form:\n\n        (2016-01, url0), 1\n        (2016-01, url0), 1\n        (2016-01, url1), 1\n        \"\"\"\n        url = self.extract_url(line)\n        period = self.extract_year_month(line)\n        yield ((period, url), 1)\n\n    def reducer(self, key, values):\n        \"\"\"Sum values for each key.\n\n        (2016-01, url0), 2\n        (2016-01, url1), 1\n        \"\"\"\n        yield (key, sum(values))\n\n    def steps(self):\n        \"\"\"Run the map and reduce steps.\"\"\"\n        return [self.mr(mapper=self.mapper, reducer=self.reducer)]",
        "def extract_url(self, line):\n    \"\"\"Extract the generated url from the log line.\"\"\"\n    pass",
        "'Extract the generated url from the log line.'",
        "pass",
        "def extract_year_month(self, line):\n    \"\"\"Return the year and month portions of the timestamp.\"\"\"\n    pass",
        "'Return the year and month portions of the timestamp.'",
        "pass",
        "def mapper(self, _, line):\n    \"\"\"Parse each log line, extract and transform relevant lines.\n\n        Emit key value pairs of the form:\n\n        (2016-01, url0), 1\n        (2016-01, url0), 1\n        (2016-01, url1), 1\n        \"\"\"\n    url = self.extract_url(line)\n    period = self.extract_year_month(line)\n    yield ((period, url), 1)",
        "'Parse each log line, extract and transform relevant lines.\\n\\n        Emit key value pairs of the form:\\n\\n        (2016-01, url0), 1\\n        (2016-01, url0), 1\\n        (2016-01, url1), 1\\n        '",
        "url = self.extract_url(line)",
        "period = self.extract_year_month(line)",
        "(yield ((period, url), 1))",
        "def reducer(self, key, values):\n    \"\"\"Sum values for each key.\n\n        (2016-01, url0), 2\n        (2016-01, url1), 1\n        \"\"\"\n    yield (key, sum(values))",
        "'Sum values for each key.\\n\\n        (2016-01, url0), 2\\n        (2016-01, url1), 1\\n        '",
        "(yield (key, sum(values)))",
        "def steps(self):\n    \"\"\"Run the map and reduce steps.\"\"\"\n    return [self.mr(mapper=self.mapper, reducer=self.reducer)]",
        "'Run the map and reduce steps.'",
        "return [self.mr(mapper=self.mapper, reducer=self.reducer)]"
      ],
      "code": "from mrjob.job import MRJob\nclass HitCounts(MRJob):\n\n    def extract_url(self, line):\n        \"\"\"Extract the generated url from the log line.\"\"\"\n        pass\n\n    def extract_year_month(self, line):\n        \"\"\"Return the year and month portions of the timestamp.\"\"\"\n        pass\n\n    def mapper(self, _, line):\n        \"\"\"Parse each log line, extract and transform relevant lines.\n\n        Emit key value pairs of the form:\n\n        (2016-01, url0), 1\n        (2016-01, url0), 1\n        (2016-01, url1), 1\n        \"\"\"\n        url = self.extract_url(line)\n        period = self.extract_year_month(line)\n        yield ((period, url), 1)\n\n    def reducer(self, key, values):\n        \"\"\"Sum values for each key.\n\n        (2016-01, url0), 2\n        (2016-01, url1), 1\n        \"\"\"\n        yield (key, sum(values))\n\n    def steps(self):\n        \"\"\"Run the map and reduce steps.\"\"\"\n        return [self.mr(mapper=self.mapper, reducer=self.reducer)]\ndef extract_url(self, line):\n    \"\"\"Extract the generated url from the log line.\"\"\"\n    pass\n'Extract the generated url from the log line.'\npass\ndef extract_year_month(self, line):\n    \"\"\"Return the year and month portions of the timestamp.\"\"\"\n    pass\n'Return the year and month portions of the timestamp.'\npass\ndef mapper(self, _, line):\n    \"\"\"Parse each log line, extract and transform relevant lines.\n\n        Emit key value pairs of the form:\n\n        (2016-01, url0), 1\n        (2016-01, url0), 1\n        (2016-01, url1), 1\n        \"\"\"\n    url = self.extract_url(line)\n    period = self.extract_year_month(line)\n    yield ((period, url), 1)\n'Parse each log line, extract and transform relevant lines.\\n\\n        Emit key value pairs of the form:\\n\\n        (2016-01, url0), 1\\n        (2016-01, url0), 1\\n        (2016-01, url1), 1\\n        '\nurl = self.extract_url(line)\nperiod = self.extract_year_month(line)\n(yield ((period, url), 1))\ndef reducer(self, key, values):\n    \"\"\"Sum values for each key.\n\n        (2016-01, url0), 2\n        (2016-01, url1), 1\n        \"\"\"\n    yield (key, sum(values))\n'Sum values for each key.\\n\\n        (2016-01, url0), 2\\n        (2016-01, url1), 1\\n        '\n(yield (key, sum(values)))\ndef steps(self):\n    \"\"\"Run the map and reduce steps.\"\"\"\n    return [self.mr(mapper=self.mapper, reducer=self.reducer)]\n'Run the map and reduce steps.'\nreturn [self.mr(mapper=self.mapper, reducer=self.reducer)]"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "__name__ Eq '__main__'"
      ],
      "code": "__name__ Eq '__main__'"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [
        "HitCounts.run()"
      ],
      "code": "HitCounts.run()"
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n4",
      "type": "block",
      "statements": [],
      "code": ""
    }
  ],
  "edges": [
    {
      "source": "n2",
      "target": "n4"
    },
    {
      "source": "n1",
      "target": "n2"
    },
    {
      "source": "n3",
      "target": "n4"
    },
    {
      "source": "n1",
      "target": "n3"
    }
  ]
}