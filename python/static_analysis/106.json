{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "from enum import Enum",
        "from typing import Literal",
        "from e2b_code_interpreter import Sandbox",
        "from pydantic import SecretStr",
        "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema",
        "from backend.data.model import APIKeyCredentials, CredentialsField, CredentialsMetaInput, SchemaField",
        "from backend.integrations.providers import ProviderName",
        "TEST_CREDENTIALS = APIKeyCredentials(id='01234567-89ab-cdef-0123-456789abcdef', provider='e2b', api_key=SecretStr('mock-e2b-api-key'), title='Mock E2B API key', expires_at=None)",
        "TEST_CREDENTIALS_INPUT = {'provider': TEST_CREDENTIALS.provider, 'id': TEST_CREDENTIALS.id, 'type': TEST_CREDENTIALS.type, 'title': TEST_CREDENTIALS.type}",
        "class ProgrammingLanguage(Enum):\n    PYTHON = 'python'\n    JAVASCRIPT = 'js'\n    BASH = 'bash'\n    R = 'r'\n    JAVA = 'java'",
        "PYTHON = 'python'",
        "JAVASCRIPT = 'js'",
        "BASH = 'bash'",
        "R = 'r'",
        "JAVA = 'java'",
        "class CodeExecutionBlock(Block):\n\n    class Input(BlockSchema):\n        credentials: CredentialsMetaInput[Literal[ProviderName.E2B], Literal['api_key']] = CredentialsField(description='Enter your api key for the E2B Sandbox. You can get it in here - https://e2b.dev/docs')\n        setup_commands: list[str] = SchemaField(description='Shell commands to set up the sandbox before running the code. You can use `curl` or `git` to install your desired Debian based package manager. `pip` and `npm` are pre-installed.\\n\\nThese commands are executed with `sh`, in the foreground.', placeholder='pip install cowsay', default=[], advanced=False)\n        code: str = SchemaField(description='Code to execute in the sandbox', placeholder=\"print('Hello, World!')\", default='', advanced=False)\n        language: ProgrammingLanguage = SchemaField(description='Programming language to execute', default=ProgrammingLanguage.PYTHON, advanced=False)\n        timeout: int = SchemaField(description='Execution timeout in seconds', default=300)\n        template_id: str = SchemaField(description='You can use an E2B sandbox template by entering its ID here. Check out the E2B docs for more details: [E2B - Sandbox template](https://e2b.dev/docs/sandbox-template)', default='', advanced=True)\n\n    class Output(BlockSchema):\n        response: str = SchemaField(description='Response from code execution')\n        stdout_logs: str = SchemaField(description='Standard output logs from execution')\n        stderr_logs: str = SchemaField(description='Standard error logs from execution')\n        error: str = SchemaField(description='Error message if execution failed')\n\n    def __init__(self):\n        super().__init__(id='0b02b072-abe7-11ef-8372-fb5d162dd712', description='Executes code in an isolated sandbox environment with internet access.', categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=CodeExecutionBlock.Input, output_schema=CodeExecutionBlock.Output, test_credentials=TEST_CREDENTIALS, test_input={'credentials': TEST_CREDENTIALS_INPUT, 'code': \"print('Hello World')\", 'language': ProgrammingLanguage.PYTHON.value, 'setup_commands': [], 'timeout': 300, 'template_id': ''}, test_output=[('response', 'Hello World'), ('stdout_logs', 'Hello World\\n')], test_mock={'execute_code': lambda code, language, setup_commands, timeout, api_key, template_id: ('Hello World', 'Hello World\\n', '')})\n\n    def execute_code(self, code: str, language: ProgrammingLanguage, setup_commands: list[str], timeout: int, api_key: str, template_id: str):\n        try:\n            sandbox = None\n            if template_id:\n                sandbox = Sandbox(template=template_id, api_key=api_key, timeout=timeout)\n            else:\n                sandbox = Sandbox(api_key=api_key, timeout=timeout)\n            if not sandbox:\n                raise Exception('Sandbox not created')\n            for cmd in setup_commands:\n                sandbox.commands.run(cmd)\n            execution = sandbox.run_code(code, language=language.value, on_error=lambda e: sandbox.kill())\n            if execution.error:\n                raise Exception(execution.error)\n            response = execution.text\n            stdout_logs = ''.join(execution.logs.stdout)\n            stderr_logs = ''.join(execution.logs.stderr)\n            return (response, stdout_logs, stderr_logs)\n        except Exception as e:\n            raise e\n\n    def run(self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs) -> BlockOutput:\n        try:\n            (response, stdout_logs, stderr_logs) = self.execute_code(input_data.code, input_data.language, input_data.setup_commands, input_data.timeout, credentials.api_key.get_secret_value(), input_data.template_id)\n            if response:\n                yield ('response', response)\n            if stdout_logs:\n                yield ('stdout_logs', stdout_logs)\n            if stderr_logs:\n                yield ('stderr_logs', stderr_logs)\n        except Exception as e:\n            yield ('error', str(e))",
        "class Input(BlockSchema):\n    credentials: CredentialsMetaInput[Literal[ProviderName.E2B], Literal['api_key']] = CredentialsField(description='Enter your api key for the E2B Sandbox. You can get it in here - https://e2b.dev/docs')\n    setup_commands: list[str] = SchemaField(description='Shell commands to set up the sandbox before running the code. You can use `curl` or `git` to install your desired Debian based package manager. `pip` and `npm` are pre-installed.\\n\\nThese commands are executed with `sh`, in the foreground.', placeholder='pip install cowsay', default=[], advanced=False)\n    code: str = SchemaField(description='Code to execute in the sandbox', placeholder=\"print('Hello, World!')\", default='', advanced=False)\n    language: ProgrammingLanguage = SchemaField(description='Programming language to execute', default=ProgrammingLanguage.PYTHON, advanced=False)\n    timeout: int = SchemaField(description='Execution timeout in seconds', default=300)\n    template_id: str = SchemaField(description='You can use an E2B sandbox template by entering its ID here. Check out the E2B docs for more details: [E2B - Sandbox template](https://e2b.dev/docs/sandbox-template)', default='', advanced=True)",
        "credentials: CredentialsMetaInput[Literal[ProviderName.E2B], Literal['api_key']] = CredentialsField(description='Enter your api key for the E2B Sandbox. You can get it in here - https://e2b.dev/docs')",
        "setup_commands: list[str] = SchemaField(description='Shell commands to set up the sandbox before running the code. You can use `curl` or `git` to install your desired Debian based package manager. `pip` and `npm` are pre-installed.\\n\\nThese commands are executed with `sh`, in the foreground.', placeholder='pip install cowsay', default=[], advanced=False)",
        "code: str = SchemaField(description='Code to execute in the sandbox', placeholder=\"print('Hello, World!')\", default='', advanced=False)",
        "language: ProgrammingLanguage = SchemaField(description='Programming language to execute', default=ProgrammingLanguage.PYTHON, advanced=False)",
        "timeout: int = SchemaField(description='Execution timeout in seconds', default=300)",
        "template_id: str = SchemaField(description='You can use an E2B sandbox template by entering its ID here. Check out the E2B docs for more details: [E2B - Sandbox template](https://e2b.dev/docs/sandbox-template)', default='', advanced=True)",
        "class Output(BlockSchema):\n    response: str = SchemaField(description='Response from code execution')\n    stdout_logs: str = SchemaField(description='Standard output logs from execution')\n    stderr_logs: str = SchemaField(description='Standard error logs from execution')\n    error: str = SchemaField(description='Error message if execution failed')",
        "response: str = SchemaField(description='Response from code execution')",
        "stdout_logs: str = SchemaField(description='Standard output logs from execution')",
        "stderr_logs: str = SchemaField(description='Standard error logs from execution')",
        "error: str = SchemaField(description='Error message if execution failed')",
        "def __init__(self):\n    super().__init__(id='0b02b072-abe7-11ef-8372-fb5d162dd712', description='Executes code in an isolated sandbox environment with internet access.', categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=CodeExecutionBlock.Input, output_schema=CodeExecutionBlock.Output, test_credentials=TEST_CREDENTIALS, test_input={'credentials': TEST_CREDENTIALS_INPUT, 'code': \"print('Hello World')\", 'language': ProgrammingLanguage.PYTHON.value, 'setup_commands': [], 'timeout': 300, 'template_id': ''}, test_output=[('response', 'Hello World'), ('stdout_logs', 'Hello World\\n')], test_mock={'execute_code': lambda code, language, setup_commands, timeout, api_key, template_id: ('Hello World', 'Hello World\\n', '')})",
        "super().__init__()",
        "def execute_code(self, code: str, language: ProgrammingLanguage, setup_commands: list[str], timeout: int, api_key: str, template_id: str):\n    try:\n        sandbox = None\n        if template_id:\n            sandbox = Sandbox(template=template_id, api_key=api_key, timeout=timeout)\n        else:\n            sandbox = Sandbox(api_key=api_key, timeout=timeout)\n        if not sandbox:\n            raise Exception('Sandbox not created')\n        for cmd in setup_commands:\n            sandbox.commands.run(cmd)\n        execution = sandbox.run_code(code, language=language.value, on_error=lambda e: sandbox.kill())\n        if execution.error:\n            raise Exception(execution.error)\n        response = execution.text\n        stdout_logs = ''.join(execution.logs.stdout)\n        stderr_logs = ''.join(execution.logs.stderr)\n        return (response, stdout_logs, stderr_logs)\n    except Exception as e:\n        raise e",
        "try:\n    sandbox = None\n    if template_id:\n        sandbox = Sandbox(template=template_id, api_key=api_key, timeout=timeout)\n    else:\n        sandbox = Sandbox(api_key=api_key, timeout=timeout)\n    if not sandbox:\n        raise Exception('Sandbox not created')\n    for cmd in setup_commands:\n        sandbox.commands.run(cmd)\n    execution = sandbox.run_code(code, language=language.value, on_error=lambda e: sandbox.kill())\n    if execution.error:\n        raise Exception(execution.error)\n    response = execution.text\n    stdout_logs = ''.join(execution.logs.stdout)\n    stderr_logs = ''.join(execution.logs.stderr)\n    return (response, stdout_logs, stderr_logs)\nexcept Exception as e:\n    raise e",
        "sandbox = None",
        "template_id"
      ],
      "code": "from enum import Enum\nfrom typing import Literal\nfrom e2b_code_interpreter import Sandbox\nfrom pydantic import SecretStr\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import APIKeyCredentials, CredentialsField, CredentialsMetaInput, SchemaField\nfrom backend.integrations.providers import ProviderName\nTEST_CREDENTIALS = APIKeyCredentials(id='01234567-89ab-cdef-0123-456789abcdef', provider='e2b', api_key=SecretStr('mock-e2b-api-key'), title='Mock E2B API key', expires_at=None)\nTEST_CREDENTIALS_INPUT = {'provider': TEST_CREDENTIALS.provider, 'id': TEST_CREDENTIALS.id, 'type': TEST_CREDENTIALS.type, 'title': TEST_CREDENTIALS.type}\nclass ProgrammingLanguage(Enum):\n    PYTHON = 'python'\n    JAVASCRIPT = 'js'\n    BASH = 'bash'\n    R = 'r'\n    JAVA = 'java'\nPYTHON = 'python'\nJAVASCRIPT = 'js'\nBASH = 'bash'\nR = 'r'\nJAVA = 'java'\nclass CodeExecutionBlock(Block):\n\n    class Input(BlockSchema):\n        credentials: CredentialsMetaInput[Literal[ProviderName.E2B], Literal['api_key']] = CredentialsField(description='Enter your api key for the E2B Sandbox. You can get it in here - https://e2b.dev/docs')\n        setup_commands: list[str] = SchemaField(description='Shell commands to set up the sandbox before running the code. You can use `curl` or `git` to install your desired Debian based package manager. `pip` and `npm` are pre-installed.\\n\\nThese commands are executed with `sh`, in the foreground.', placeholder='pip install cowsay', default=[], advanced=False)\n        code: str = SchemaField(description='Code to execute in the sandbox', placeholder=\"print('Hello, World!')\", default='', advanced=False)\n        language: ProgrammingLanguage = SchemaField(description='Programming language to execute', default=ProgrammingLanguage.PYTHON, advanced=False)\n        timeout: int = SchemaField(description='Execution timeout in seconds', default=300)\n        template_id: str = SchemaField(description='You can use an E2B sandbox template by entering its ID here. Check out the E2B docs for more details: [E2B - Sandbox template](https://e2b.dev/docs/sandbox-template)', default='', advanced=True)\n\n    class Output(BlockSchema):\n        response: str = SchemaField(description='Response from code execution')\n        stdout_logs: str = SchemaField(description='Standard output logs from execution')\n        stderr_logs: str = SchemaField(description='Standard error logs from execution')\n        error: str = SchemaField(description='Error message if execution failed')\n\n    def __init__(self):\n        super().__init__(id='0b02b072-abe7-11ef-8372-fb5d162dd712', description='Executes code in an isolated sandbox environment with internet access.', categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=CodeExecutionBlock.Input, output_schema=CodeExecutionBlock.Output, test_credentials=TEST_CREDENTIALS, test_input={'credentials': TEST_CREDENTIALS_INPUT, 'code': \"print('Hello World')\", 'language': ProgrammingLanguage.PYTHON.value, 'setup_commands': [], 'timeout': 300, 'template_id': ''}, test_output=[('response', 'Hello World'), ('stdout_logs', 'Hello World\\n')], test_mock={'execute_code': lambda code, language, setup_commands, timeout, api_key, template_id: ('Hello World', 'Hello World\\n', '')})\n\n    def execute_code(self, code: str, language: ProgrammingLanguage, setup_commands: list[str], timeout: int, api_key: str, template_id: str):\n        try:\n            sandbox = None\n            if template_id:\n                sandbox = Sandbox(template=template_id, api_key=api_key, timeout=timeout)\n            else:\n                sandbox = Sandbox(api_key=api_key, timeout=timeout)\n            if not sandbox:\n                raise Exception('Sandbox not created')\n            for cmd in setup_commands:\n                sandbox.commands.run(cmd)\n            execution = sandbox.run_code(code, language=language.value, on_error=lambda e: sandbox.kill())\n            if execution.error:\n                raise Exception(execution.error)\n            response = execution.text\n            stdout_logs = ''.join(execution.logs.stdout)\n            stderr_logs = ''.join(execution.logs.stderr)\n            return (response, stdout_logs, stderr_logs)\n        except Exception as e:\n            raise e\n\n    def run(self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs) -> BlockOutput:\n        try:\n            (response, stdout_logs, stderr_logs) = self.execute_code(input_data.code, input_data.language, input_data.setup_commands, input_data.timeout, credentials.api_key.get_secret_value(), input_data.template_id)\n            if response:\n                yield ('response', response)\n            if stdout_logs:\n                yield ('stdout_logs', stdout_logs)\n            if stderr_logs:\n                yield ('stderr_logs', stderr_logs)\n        except Exception as e:\n            yield ('error', str(e))\nclass Input(BlockSchema):\n    credentials: CredentialsMetaInput[Literal[ProviderName.E2B], Literal['api_key']] = CredentialsField(description='Enter your api key for the E2B Sandbox. You can get it in here - https://e2b.dev/docs')\n    setup_commands: list[str] = SchemaField(description='Shell commands to set up the sandbox before running the code. You can use `curl` or `git` to install your desired Debian based package manager. `pip` and `npm` are pre-installed.\\n\\nThese commands are executed with `sh`, in the foreground.', placeholder='pip install cowsay', default=[], advanced=False)\n    code: str = SchemaField(description='Code to execute in the sandbox', placeholder=\"print('Hello, World!')\", default='', advanced=False)\n    language: ProgrammingLanguage = SchemaField(description='Programming language to execute', default=ProgrammingLanguage.PYTHON, advanced=False)\n    timeout: int = SchemaField(description='Execution timeout in seconds', default=300)\n    template_id: str = SchemaField(description='You can use an E2B sandbox template by entering its ID here. Check out the E2B docs for more details: [E2B - Sandbox template](https://e2b.dev/docs/sandbox-template)', default='', advanced=True)\ncredentials: CredentialsMetaInput[Literal[ProviderName.E2B], Literal['api_key']] = CredentialsField(description='Enter your api key for the E2B Sandbox. You can get it in here - https://e2b.dev/docs')\nsetup_commands: list[str] = SchemaField(description='Shell commands to set up the sandbox before running the code. You can use `curl` or `git` to install your desired Debian based package manager. `pip` and `npm` are pre-installed.\\n\\nThese commands are executed with `sh`, in the foreground.', placeholder='pip install cowsay', default=[], advanced=False)\ncode: str = SchemaField(description='Code to execute in the sandbox', placeholder=\"print('Hello, World!')\", default='', advanced=False)\nlanguage: ProgrammingLanguage = SchemaField(description='Programming language to execute', default=ProgrammingLanguage.PYTHON, advanced=False)\ntimeout: int = SchemaField(description='Execution timeout in seconds', default=300)\ntemplate_id: str = SchemaField(description='You can use an E2B sandbox template by entering its ID here. Check out the E2B docs for more details: [E2B - Sandbox template](https://e2b.dev/docs/sandbox-template)', default='', advanced=True)\nclass Output(BlockSchema):\n    response: str = SchemaField(description='Response from code execution')\n    stdout_logs: str = SchemaField(description='Standard output logs from execution')\n    stderr_logs: str = SchemaField(description='Standard error logs from execution')\n    error: str = SchemaField(description='Error message if execution failed')\nresponse: str = SchemaField(description='Response from code execution')\nstdout_logs: str = SchemaField(description='Standard output logs from execution')\nstderr_logs: str = SchemaField(description='Standard error logs from execution')\nerror: str = SchemaField(description='Error message if execution failed')\ndef __init__(self):\n    super().__init__(id='0b02b072-abe7-11ef-8372-fb5d162dd712', description='Executes code in an isolated sandbox environment with internet access.', categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=CodeExecutionBlock.Input, output_schema=CodeExecutionBlock.Output, test_credentials=TEST_CREDENTIALS, test_input={'credentials': TEST_CREDENTIALS_INPUT, 'code': \"print('Hello World')\", 'language': ProgrammingLanguage.PYTHON.value, 'setup_commands': [], 'timeout': 300, 'template_id': ''}, test_output=[('response', 'Hello World'), ('stdout_logs', 'Hello World\\n')], test_mock={'execute_code': lambda code, language, setup_commands, timeout, api_key, template_id: ('Hello World', 'Hello World\\n', '')})\nsuper().__init__()\ndef execute_code(self, code: str, language: ProgrammingLanguage, setup_commands: list[str], timeout: int, api_key: str, template_id: str):\n    try:\n        sandbox = None\n        if template_id:\n            sandbox = Sandbox(template=template_id, api_key=api_key, timeout=timeout)\n        else:\n            sandbox = Sandbox(api_key=api_key, timeout=timeout)\n        if not sandbox:\n            raise Exception('Sandbox not created')\n        for cmd in setup_commands:\n            sandbox.commands.run(cmd)\n        execution = sandbox.run_code(code, language=language.value, on_error=lambda e: sandbox.kill())\n        if execution.error:\n            raise Exception(execution.error)\n        response = execution.text\n        stdout_logs = ''.join(execution.logs.stdout)\n        stderr_logs = ''.join(execution.logs.stderr)\n        return (response, stdout_logs, stderr_logs)\n    except Exception as e:\n        raise e\ntry:\n    sandbox = None\n    if template_id:\n        sandbox = Sandbox(template=template_id, api_key=api_key, timeout=timeout)\n    else:\n        sandbox = Sandbox(api_key=api_key, timeout=timeout)\n    if not sandbox:\n        raise Exception('Sandbox not created')\n    for cmd in setup_commands:\n        sandbox.commands.run(cmd)\n    execution = sandbox.run_code(code, language=language.value, on_error=lambda e: sandbox.kill())\n    if execution.error:\n        raise Exception(execution.error)\n    response = execution.text\n    stdout_logs = ''.join(execution.logs.stdout)\n    stderr_logs = ''.join(execution.logs.stderr)\n    return (response, stdout_logs, stderr_logs)\nexcept Exception as e:\n    raise e\nsandbox = None\ntemplate_id"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "sandbox = Sandbox(template=template_id, api_key=api_key, timeout=timeout)"
      ],
      "code": "sandbox = Sandbox(template=template_id, api_key=api_key, timeout=timeout)"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [
        "sandbox = Sandbox(api_key=api_key, timeout=timeout)"
      ],
      "code": "sandbox = Sandbox(api_key=api_key, timeout=timeout)"
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [
        "not sandbox"
      ],
      "code": "not sandbox"
    },
    {
      "id": "n4",
      "type": "block",
      "statements": [
        "raise Exception('Sandbox not created')"
      ],
      "code": "raise Exception('Sandbox not created')"
    },
    {
      "id": "n5",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n6",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n7",
      "type": "block",
      "statements": [
        "cmd",
        "setup_commands"
      ],
      "code": "cmd\nsetup_commands"
    },
    {
      "id": "n8",
      "type": "block",
      "statements": [
        "sandbox.commands.run(cmd)"
      ],
      "code": "sandbox.commands.run(cmd)"
    },
    {
      "id": "n9",
      "type": "block",
      "statements": [
        "execution = sandbox.run_code(code, language=language.value, on_error=lambda e: sandbox.kill())",
        "execution.error"
      ],
      "code": "execution = sandbox.run_code(code, language=language.value, on_error=lambda e: sandbox.kill())\nexecution.error"
    },
    {
      "id": "n10",
      "type": "block",
      "statements": [
        "raise Exception(execution.error)"
      ],
      "code": "raise Exception(execution.error)"
    },
    {
      "id": "n11",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n12",
      "type": "block",
      "statements": [
        "response = execution.text",
        "stdout_logs = ''.join(execution.logs.stdout)",
        "stderr_logs = ''.join(execution.logs.stderr)",
        "return (response, stdout_logs, stderr_logs)"
      ],
      "code": "response = execution.text\nstdout_logs = ''.join(execution.logs.stdout)\nstderr_logs = ''.join(execution.logs.stderr)\nreturn (response, stdout_logs, stderr_logs)"
    },
    {
      "id": "n13",
      "type": "block",
      "statements": [
        "raise e",
        "def run(self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs) -> BlockOutput:\n    try:\n        (response, stdout_logs, stderr_logs) = self.execute_code(input_data.code, input_data.language, input_data.setup_commands, input_data.timeout, credentials.api_key.get_secret_value(), input_data.template_id)\n        if response:\n            yield ('response', response)\n        if stdout_logs:\n            yield ('stdout_logs', stdout_logs)\n        if stderr_logs:\n            yield ('stderr_logs', stderr_logs)\n    except Exception as e:\n        yield ('error', str(e))",
        "try:\n    (response, stdout_logs, stderr_logs) = self.execute_code(input_data.code, input_data.language, input_data.setup_commands, input_data.timeout, credentials.api_key.get_secret_value(), input_data.template_id)\n    if response:\n        yield ('response', response)\n    if stdout_logs:\n        yield ('stdout_logs', stdout_logs)\n    if stderr_logs:\n        yield ('stderr_logs', stderr_logs)\nexcept Exception as e:\n    yield ('error', str(e))",
        "(response, stdout_logs, stderr_logs) = self.execute_code(input_data.code, input_data.language, input_data.setup_commands, input_data.timeout, credentials.api_key.get_secret_value(), input_data.template_id)",
        "response"
      ],
      "code": "raise e\ndef run(self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs) -> BlockOutput:\n    try:\n        (response, stdout_logs, stderr_logs) = self.execute_code(input_data.code, input_data.language, input_data.setup_commands, input_data.timeout, credentials.api_key.get_secret_value(), input_data.template_id)\n        if response:\n            yield ('response', response)\n        if stdout_logs:\n            yield ('stdout_logs', stdout_logs)\n        if stderr_logs:\n            yield ('stderr_logs', stderr_logs)\n    except Exception as e:\n        yield ('error', str(e))\ntry:\n    (response, stdout_logs, stderr_logs) = self.execute_code(input_data.code, input_data.language, input_data.setup_commands, input_data.timeout, credentials.api_key.get_secret_value(), input_data.template_id)\n    if response:\n        yield ('response', response)\n    if stdout_logs:\n        yield ('stdout_logs', stdout_logs)\n    if stderr_logs:\n        yield ('stderr_logs', stderr_logs)\nexcept Exception as e:\n    yield ('error', str(e))\n(response, stdout_logs, stderr_logs) = self.execute_code(input_data.code, input_data.language, input_data.setup_commands, input_data.timeout, credentials.api_key.get_secret_value(), input_data.template_id)\nresponse"
    },
    {
      "id": "n14",
      "type": "block",
      "statements": [
        "(yield ('response', response))"
      ],
      "code": "(yield ('response', response))"
    },
    {
      "id": "n15",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n16",
      "type": "block",
      "statements": [
        "stdout_logs"
      ],
      "code": "stdout_logs"
    },
    {
      "id": "n17",
      "type": "block",
      "statements": [
        "(yield ('stdout_logs', stdout_logs))"
      ],
      "code": "(yield ('stdout_logs', stdout_logs))"
    },
    {
      "id": "n18",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n19",
      "type": "block",
      "statements": [
        "stderr_logs"
      ],
      "code": "stderr_logs"
    },
    {
      "id": "n20",
      "type": "block",
      "statements": [
        "(yield ('stderr_logs', stderr_logs))"
      ],
      "code": "(yield ('stderr_logs', stderr_logs))"
    },
    {
      "id": "n21",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n22",
      "type": "block",
      "statements": [
        "(yield ('error', str(e)))"
      ],
      "code": "(yield ('error', str(e)))"
    }
  ],
  "edges": [
    {
      "source": "n6",
      "target": "n7"
    },
    {
      "source": "n0",
      "target": "n1"
    },
    {
      "source": "n21",
      "target": "n22"
    },
    {
      "source": "n17",
      "target": "n19"
    },
    {
      "source": "n8",
      "target": "n7"
    },
    {
      "source": "n2",
      "target": "n3"
    },
    {
      "source": "n13",
      "target": "n14"
    },
    {
      "source": "n19",
      "target": "n21"
    },
    {
      "source": "n16",
      "target": "n17"
    },
    {
      "source": "n13",
      "target": "n15"
    },
    {
      "source": "n16",
      "target": "n18"
    },
    {
      "source": "n3",
      "target": "n4"
    },
    {
      "source": "n19",
      "target": "n20"
    },
    {
      "source": "n4",
      "target": "n6"
    },
    {
      "source": "n7",
      "target": "n8"
    },
    {
      "source": "n15",
      "target": "n16"
    },
    {
      "source": "n9",
      "target": "n11"
    },
    {
      "source": "n14",
      "target": "n16"
    },
    {
      "source": "n9",
      "target": "n10"
    },
    {
      "source": "n10",
      "target": "n12"
    },
    {
      "source": "n11",
      "target": "n12"
    },
    {
      "source": "n18",
      "target": "n19"
    },
    {
      "source": "n7",
      "target": "n9"
    },
    {
      "source": "n5",
      "target": "n6"
    },
    {
      "source": "n1",
      "target": "n3"
    },
    {
      "source": "n3",
      "target": "n5"
    },
    {
      "source": "n20",
      "target": "n22"
    },
    {
      "source": "n0",
      "target": "n2"
    }
  ]
}