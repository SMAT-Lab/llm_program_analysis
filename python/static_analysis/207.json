{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "'\\nWord Ladder is a classic problem in computer science.\\nThe problem is to transform a start word into an end word\\nby changing one letter at a time.\\nEach intermediate word must be a valid word from a given list of words.\\nThe goal is to find a transformation sequence\\nfrom the start word to the end word.\\n\\nWikipedia: https://en.wikipedia.org/wiki/Word_ladder\\n'",
        "import string",
        "def backtrack(current_word: str, path: list[str], end_word: str, word_set: set[str]) -> list[str]:\n    \"\"\"\n    Helper function to perform backtracking to find the transformation\n    from the current_word to the end_word.\n\n    Parameters:\n    current_word (str): The current word in the transformation sequence.\n    path (list[str]): The list of transformations from begin_word to current_word.\n    end_word (str): The target word for transformation.\n    word_set (set[str]): The set of valid words for transformation.\n\n    Returns:\n    list[str]: The list of transformations from begin_word to end_word.\n               Returns an empty list if there is no valid\n                transformation from current_word to end_word.\n\n    Example:\n    >>> backtrack(\"hit\", [\"hit\"], \"cog\", {\"hot\", \"dot\", \"dog\", \"lot\", \"log\", \"cog\"})\n    ['hit', 'hot', 'dot', 'lot', 'log', 'cog']\n\n    >>> backtrack(\"hit\", [\"hit\"], \"cog\", {\"hot\", \"dot\", \"dog\", \"lot\", \"log\"})\n    []\n\n    >>> backtrack(\"lead\", [\"lead\"], \"gold\", {\"load\", \"goad\", \"gold\", \"lead\", \"lord\"})\n    ['lead', 'lead', 'load', 'goad', 'gold']\n\n    >>> backtrack(\"game\", [\"game\"], \"code\", {\"came\", \"cage\", \"code\", \"cade\", \"gave\"})\n    ['game', 'came', 'cade', 'code']\n    \"\"\"\n    if current_word == end_word:\n        return path\n    for i in range(len(current_word)):\n        for c in string.ascii_lowercase:\n            transformed_word = current_word[:i] + c + current_word[i + 1:]\n            if transformed_word in word_set:\n                word_set.remove(transformed_word)\n                result = backtrack(transformed_word, [*path, transformed_word], end_word, word_set)\n                if result:\n                    return result\n                word_set.add(transformed_word)\n    return []",
        "'\\n    Helper function to perform backtracking to find the transformation\\n    from the current_word to the end_word.\\n\\n    Parameters:\\n    current_word (str): The current word in the transformation sequence.\\n    path (list[str]): The list of transformations from begin_word to current_word.\\n    end_word (str): The target word for transformation.\\n    word_set (set[str]): The set of valid words for transformation.\\n\\n    Returns:\\n    list[str]: The list of transformations from begin_word to end_word.\\n               Returns an empty list if there is no valid\\n                transformation from current_word to end_word.\\n\\n    Example:\\n    >>> backtrack(\"hit\", [\"hit\"], \"cog\", {\"hot\", \"dot\", \"dog\", \"lot\", \"log\", \"cog\"})\\n    [\\'hit\\', \\'hot\\', \\'dot\\', \\'lot\\', \\'log\\', \\'cog\\']\\n\\n    >>> backtrack(\"hit\", [\"hit\"], \"cog\", {\"hot\", \"dot\", \"dog\", \"lot\", \"log\"})\\n    []\\n\\n    >>> backtrack(\"lead\", [\"lead\"], \"gold\", {\"load\", \"goad\", \"gold\", \"lead\", \"lord\"})\\n    [\\'lead\\', \\'lead\\', \\'load\\', \\'goad\\', \\'gold\\']\\n\\n    >>> backtrack(\"game\", [\"game\"], \"code\", {\"came\", \"cage\", \"code\", \"cade\", \"gave\"})\\n    [\\'game\\', \\'came\\', \\'cade\\', \\'code\\']\\n    '",
        "current_word Eq end_word"
      ],
      "code": "'\\nWord Ladder is a classic problem in computer science.\\nThe problem is to transform a start word into an end word\\nby changing one letter at a time.\\nEach intermediate word must be a valid word from a given list of words.\\nThe goal is to find a transformation sequence\\nfrom the start word to the end word.\\n\\nWikipedia: https://en.wikipedia.org/wiki/Word_ladder\\n'\nimport string\ndef backtrack(current_word: str, path: list[str], end_word: str, word_set: set[str]) -> list[str]:\n    \"\"\"\n    Helper function to perform backtracking to find the transformation\n    from the current_word to the end_word.\n\n    Parameters:\n    current_word (str): The current word in the transformation sequence.\n    path (list[str]): The list of transformations from begin_word to current_word.\n    end_word (str): The target word for transformation.\n    word_set (set[str]): The set of valid words for transformation.\n\n    Returns:\n    list[str]: The list of transformations from begin_word to end_word.\n               Returns an empty list if there is no valid\n                transformation from current_word to end_word.\n\n    Example:\n    >>> backtrack(\"hit\", [\"hit\"], \"cog\", {\"hot\", \"dot\", \"dog\", \"lot\", \"log\", \"cog\"})\n    ['hit', 'hot', 'dot', 'lot', 'log', 'cog']\n\n    >>> backtrack(\"hit\", [\"hit\"], \"cog\", {\"hot\", \"dot\", \"dog\", \"lot\", \"log\"})\n    []\n\n    >>> backtrack(\"lead\", [\"lead\"], \"gold\", {\"load\", \"goad\", \"gold\", \"lead\", \"lord\"})\n    ['lead', 'lead', 'load', 'goad', 'gold']\n\n    >>> backtrack(\"game\", [\"game\"], \"code\", {\"came\", \"cage\", \"code\", \"cade\", \"gave\"})\n    ['game', 'came', 'cade', 'code']\n    \"\"\"\n    if current_word == end_word:\n        return path\n    for i in range(len(current_word)):\n        for c in string.ascii_lowercase:\n            transformed_word = current_word[:i] + c + current_word[i + 1:]\n            if transformed_word in word_set:\n                word_set.remove(transformed_word)\n                result = backtrack(transformed_word, [*path, transformed_word], end_word, word_set)\n                if result:\n                    return result\n                word_set.add(transformed_word)\n    return []\n'\\n    Helper function to perform backtracking to find the transformation\\n    from the current_word to the end_word.\\n\\n    Parameters:\\n    current_word (str): The current word in the transformation sequence.\\n    path (list[str]): The list of transformations from begin_word to current_word.\\n    end_word (str): The target word for transformation.\\n    word_set (set[str]): The set of valid words for transformation.\\n\\n    Returns:\\n    list[str]: The list of transformations from begin_word to end_word.\\n               Returns an empty list if there is no valid\\n                transformation from current_word to end_word.\\n\\n    Example:\\n    >>> backtrack(\"hit\", [\"hit\"], \"cog\", {\"hot\", \"dot\", \"dog\", \"lot\", \"log\", \"cog\"})\\n    [\\'hit\\', \\'hot\\', \\'dot\\', \\'lot\\', \\'log\\', \\'cog\\']\\n\\n    >>> backtrack(\"hit\", [\"hit\"], \"cog\", {\"hot\", \"dot\", \"dog\", \"lot\", \"log\"})\\n    []\\n\\n    >>> backtrack(\"lead\", [\"lead\"], \"gold\", {\"load\", \"goad\", \"gold\", \"lead\", \"lord\"})\\n    [\\'lead\\', \\'lead\\', \\'load\\', \\'goad\\', \\'gold\\']\\n\\n    >>> backtrack(\"game\", [\"game\"], \"code\", {\"came\", \"cage\", \"code\", \"cade\", \"gave\"})\\n    [\\'game\\', \\'came\\', \\'cade\\', \\'code\\']\\n    '\ncurrent_word Eq end_word"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "return path"
      ],
      "code": "return path"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [],
      "code": "\n"
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [
        "i",
        "range(len(current_word))"
      ],
      "code": "i\nrange(len(current_word))"
    },
    {
      "id": "n4",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n5",
      "type": "block",
      "statements": [
        "return []"
      ],
      "code": "return []"
    },
    {
      "id": "n6",
      "type": "block",
      "statements": [
        "c",
        "string.ascii_lowercase"
      ],
      "code": "c\nstring.ascii_lowercase"
    },
    {
      "id": "n7",
      "type": "block",
      "statements": [
        "transformed_word = current_word[:i] + c + current_word[i + 1:]",
        "transformed_word In word_set"
      ],
      "code": "transformed_word = current_word[:i] + c + current_word[i + 1:]\ntransformed_word In word_set"
    },
    {
      "id": "n8",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n9",
      "type": "block",
      "statements": [
        "word_set.remove(transformed_word)",
        "result = backtrack(transformed_word, [*path, transformed_word], end_word, word_set)",
        "result"
      ],
      "code": "word_set.remove(transformed_word)\nresult = backtrack(transformed_word, [*path, transformed_word], end_word, word_set)\nresult"
    },
    {
      "id": "n10",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n11",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n12",
      "type": "block",
      "statements": [
        "return result"
      ],
      "code": "return result"
    },
    {
      "id": "n13",
      "type": "block",
      "statements": [],
      "code": "\nword_set.add(transformed_word)"
    },
    {
      "id": "n14",
      "type": "block",
      "statements": [
        "def word_ladder(begin_word: str, end_word: str, word_set: set[str]) -> list[str]:\n    \"\"\"\n    Solve the Word Ladder problem using Backtracking and return\n    the list of transformations from begin_word to end_word.\n\n    Parameters:\n    begin_word (str): The word from which the transformation starts.\n    end_word (str): The target word for transformation.\n    word_list (list[str]): The list of valid words for transformation.\n\n    Returns:\n    list[str]: The list of transformations from begin_word to end_word.\n               Returns an empty list if there is no valid transformation.\n\n    Example:\n    >>> word_ladder(\"hit\", \"cog\", [\"hot\", \"dot\", \"dog\", \"lot\", \"log\", \"cog\"])\n    ['hit', 'hot', 'dot', 'lot', 'log', 'cog']\n\n    >>> word_ladder(\"hit\", \"cog\", [\"hot\", \"dot\", \"dog\", \"lot\", \"log\"])\n    []\n\n    >>> word_ladder(\"lead\", \"gold\", [\"load\", \"goad\", \"gold\", \"lead\", \"lord\"])\n    ['lead', 'lead', 'load', 'goad', 'gold']\n\n    >>> word_ladder(\"game\", \"code\", [\"came\", \"cage\", \"code\", \"cade\", \"gave\"])\n    ['game', 'came', 'cade', 'code']\n    \"\"\"\n    if end_word not in word_set:\n        return []\n    return backtrack(begin_word, [begin_word], end_word, word_set)",
        "'\\n    Solve the Word Ladder problem using Backtracking and return\\n    the list of transformations from begin_word to end_word.\\n\\n    Parameters:\\n    begin_word (str): The word from which the transformation starts.\\n    end_word (str): The target word for transformation.\\n    word_list (list[str]): The list of valid words for transformation.\\n\\n    Returns:\\n    list[str]: The list of transformations from begin_word to end_word.\\n               Returns an empty list if there is no valid transformation.\\n\\n    Example:\\n    >>> word_ladder(\"hit\", \"cog\", [\"hot\", \"dot\", \"dog\", \"lot\", \"log\", \"cog\"])\\n    [\\'hit\\', \\'hot\\', \\'dot\\', \\'lot\\', \\'log\\', \\'cog\\']\\n\\n    >>> word_ladder(\"hit\", \"cog\", [\"hot\", \"dot\", \"dog\", \"lot\", \"log\"])\\n    []\\n\\n    >>> word_ladder(\"lead\", \"gold\", [\"load\", \"goad\", \"gold\", \"lead\", \"lord\"])\\n    [\\'lead\\', \\'lead\\', \\'load\\', \\'goad\\', \\'gold\\']\\n\\n    >>> word_ladder(\"game\", \"code\", [\"came\", \"cage\", \"code\", \"cade\", \"gave\"])\\n    [\\'game\\', \\'came\\', \\'cade\\', \\'code\\']\\n    '",
        "end_word NotIn word_set"
      ],
      "code": "def word_ladder(begin_word: str, end_word: str, word_set: set[str]) -> list[str]:\n    \"\"\"\n    Solve the Word Ladder problem using Backtracking and return\n    the list of transformations from begin_word to end_word.\n\n    Parameters:\n    begin_word (str): The word from which the transformation starts.\n    end_word (str): The target word for transformation.\n    word_list (list[str]): The list of valid words for transformation.\n\n    Returns:\n    list[str]: The list of transformations from begin_word to end_word.\n               Returns an empty list if there is no valid transformation.\n\n    Example:\n    >>> word_ladder(\"hit\", \"cog\", [\"hot\", \"dot\", \"dog\", \"lot\", \"log\", \"cog\"])\n    ['hit', 'hot', 'dot', 'lot', 'log', 'cog']\n\n    >>> word_ladder(\"hit\", \"cog\", [\"hot\", \"dot\", \"dog\", \"lot\", \"log\"])\n    []\n\n    >>> word_ladder(\"lead\", \"gold\", [\"load\", \"goad\", \"gold\", \"lead\", \"lord\"])\n    ['lead', 'lead', 'load', 'goad', 'gold']\n\n    >>> word_ladder(\"game\", \"code\", [\"came\", \"cage\", \"code\", \"cade\", \"gave\"])\n    ['game', 'came', 'cade', 'code']\n    \"\"\"\n    if end_word not in word_set:\n        return []\n    return backtrack(begin_word, [begin_word], end_word, word_set)\n'\\n    Solve the Word Ladder problem using Backtracking and return\\n    the list of transformations from begin_word to end_word.\\n\\n    Parameters:\\n    begin_word (str): The word from which the transformation starts.\\n    end_word (str): The target word for transformation.\\n    word_list (list[str]): The list of valid words for transformation.\\n\\n    Returns:\\n    list[str]: The list of transformations from begin_word to end_word.\\n               Returns an empty list if there is no valid transformation.\\n\\n    Example:\\n    >>> word_ladder(\"hit\", \"cog\", [\"hot\", \"dot\", \"dog\", \"lot\", \"log\", \"cog\"])\\n    [\\'hit\\', \\'hot\\', \\'dot\\', \\'lot\\', \\'log\\', \\'cog\\']\\n\\n    >>> word_ladder(\"hit\", \"cog\", [\"hot\", \"dot\", \"dog\", \"lot\", \"log\"])\\n    []\\n\\n    >>> word_ladder(\"lead\", \"gold\", [\"load\", \"goad\", \"gold\", \"lead\", \"lord\"])\\n    [\\'lead\\', \\'lead\\', \\'load\\', \\'goad\\', \\'gold\\']\\n\\n    >>> word_ladder(\"game\", \"code\", [\"came\", \"cage\", \"code\", \"cade\", \"gave\"])\\n    [\\'game\\', \\'came\\', \\'cade\\', \\'code\\']\\n    '\nend_word NotIn word_set"
    },
    {
      "id": "n15",
      "type": "block",
      "statements": [
        "return []"
      ],
      "code": "return []"
    },
    {
      "id": "n16",
      "type": "block",
      "statements": [],
      "code": "\nreturn backtrack(begin_word, [begin_word], end_word, word_set)"
    }
  ],
  "edges": [
    {
      "source": "n9",
      "target": "n13"
    },
    {
      "source": "n6",
      "target": "n7"
    },
    {
      "source": "n2",
      "target": "n3"
    },
    {
      "source": "n14",
      "target": "n15"
    },
    {
      "source": "n0",
      "target": "n1"
    },
    {
      "source": "n14",
      "target": "n16"
    },
    {
      "source": "n3",
      "target": "n4"
    },
    {
      "source": "n7",
      "target": "n10"
    },
    {
      "source": "n11",
      "target": "n6"
    },
    {
      "source": "n3",
      "target": "n5"
    },
    {
      "source": "n13",
      "target": "n11"
    },
    {
      "source": "n7",
      "target": "n9"
    },
    {
      "source": "n4",
      "target": "n6"
    },
    {
      "source": "n10",
      "target": "n11"
    },
    {
      "source": "n6",
      "target": "n8"
    },
    {
      "source": "n9",
      "target": "n12"
    },
    {
      "source": "n0",
      "target": "n2"
    },
    {
      "source": "n8",
      "target": "n3"
    }
  ]
}