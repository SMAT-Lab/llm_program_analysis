{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "def gray_code(bit_count: int) -> list:\n    \"\"\"\n    Takes in an integer n and returns a n-bit\n    gray code sequence\n    An n-bit gray code sequence is a sequence of 2^n\n    integers where:\n\n    a) Every integer is between [0,2^n -1] inclusive\n    b) The sequence begins with 0\n    c) An integer appears at most one times in the sequence\n    d)The binary representation of every pair of integers differ\n       by exactly one bit\n    e) The binary representation of first and last bit also\n       differ by exactly one bit\n\n    >>> gray_code(2)\n    [0, 1, 3, 2]\n\n    >>> gray_code(1)\n    [0, 1]\n\n    >>> gray_code(3)\n    [0, 1, 3, 2, 6, 7, 5, 4]\n\n    >>> gray_code(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: The given input must be positive\n\n    >>> gray_code(10.6)\n    Traceback (most recent call last):\n        ...\n    TypeError: unsupported operand type(s) for <<: 'int' and 'float'\n    \"\"\"\n    if bit_count < 0:\n        raise ValueError('The given input must be positive')\n    sequence = gray_code_sequence_string(bit_count)\n    for i in range(len(sequence)):\n        sequence[i] = int(sequence[i], 2)\n    return sequence",
        "\"\\n    Takes in an integer n and returns a n-bit\\n    gray code sequence\\n    An n-bit gray code sequence is a sequence of 2^n\\n    integers where:\\n\\n    a) Every integer is between [0,2^n -1] inclusive\\n    b) The sequence begins with 0\\n    c) An integer appears at most one times in the sequence\\n    d)The binary representation of every pair of integers differ\\n       by exactly one bit\\n    e) The binary representation of first and last bit also\\n       differ by exactly one bit\\n\\n    >>> gray_code(2)\\n    [0, 1, 3, 2]\\n\\n    >>> gray_code(1)\\n    [0, 1]\\n\\n    >>> gray_code(3)\\n    [0, 1, 3, 2, 6, 7, 5, 4]\\n\\n    >>> gray_code(-1)\\n    Traceback (most recent call last):\\n        ...\\n    ValueError: The given input must be positive\\n\\n    >>> gray_code(10.6)\\n    Traceback (most recent call last):\\n        ...\\n    TypeError: unsupported operand type(s) for <<: 'int' and 'float'\\n    \"",
        "bit_count Lt 0"
      ],
      "code": "def gray_code(bit_count: int) -> list:\n    \"\"\"\n    Takes in an integer n and returns a n-bit\n    gray code sequence\n    An n-bit gray code sequence is a sequence of 2^n\n    integers where:\n\n    a) Every integer is between [0,2^n -1] inclusive\n    b) The sequence begins with 0\n    c) An integer appears at most one times in the sequence\n    d)The binary representation of every pair of integers differ\n       by exactly one bit\n    e) The binary representation of first and last bit also\n       differ by exactly one bit\n\n    >>> gray_code(2)\n    [0, 1, 3, 2]\n\n    >>> gray_code(1)\n    [0, 1]\n\n    >>> gray_code(3)\n    [0, 1, 3, 2, 6, 7, 5, 4]\n\n    >>> gray_code(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: The given input must be positive\n\n    >>> gray_code(10.6)\n    Traceback (most recent call last):\n        ...\n    TypeError: unsupported operand type(s) for <<: 'int' and 'float'\n    \"\"\"\n    if bit_count < 0:\n        raise ValueError('The given input must be positive')\n    sequence = gray_code_sequence_string(bit_count)\n    for i in range(len(sequence)):\n        sequence[i] = int(sequence[i], 2)\n    return sequence\n\"\\n    Takes in an integer n and returns a n-bit\\n    gray code sequence\\n    An n-bit gray code sequence is a sequence of 2^n\\n    integers where:\\n\\n    a) Every integer is between [0,2^n -1] inclusive\\n    b) The sequence begins with 0\\n    c) An integer appears at most one times in the sequence\\n    d)The binary representation of every pair of integers differ\\n       by exactly one bit\\n    e) The binary representation of first and last bit also\\n       differ by exactly one bit\\n\\n    >>> gray_code(2)\\n    [0, 1, 3, 2]\\n\\n    >>> gray_code(1)\\n    [0, 1]\\n\\n    >>> gray_code(3)\\n    [0, 1, 3, 2, 6, 7, 5, 4]\\n\\n    >>> gray_code(-1)\\n    Traceback (most recent call last):\\n        ...\\n    ValueError: The given input must be positive\\n\\n    >>> gray_code(10.6)\\n    Traceback (most recent call last):\\n        ...\\n    TypeError: unsupported operand type(s) for <<: 'int' and 'float'\\n    \"\nbit_count Lt 0"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "raise ValueError('The given input must be positive')"
      ],
      "code": "raise ValueError('The given input must be positive')"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [
        "sequence = gray_code_sequence_string(bit_count)"
      ],
      "code": "sequence = gray_code_sequence_string(bit_count)"
    },
    {
      "id": "n4",
      "type": "block",
      "statements": [
        "i",
        "range(len(sequence))"
      ],
      "code": "i\nrange(len(sequence))"
    },
    {
      "id": "n5",
      "type": "block",
      "statements": [
        "sequence[i] = int(sequence[i], 2)"
      ],
      "code": "sequence[i] = int(sequence[i], 2)"
    },
    {
      "id": "n6",
      "type": "block",
      "statements": [
        "return sequence"
      ],
      "code": "return sequence"
    },
    {
      "id": "n7",
      "type": "block",
      "statements": [
        "def gray_code_sequence_string(bit_count: int) -> list:\n    \"\"\"\n    Will output the n-bit grey sequence as a\n    string of bits\n\n    >>> gray_code_sequence_string(2)\n    ['00', '01', '11', '10']\n\n    >>> gray_code_sequence_string(1)\n    ['0', '1']\n    \"\"\"\n    if bit_count == 0:\n        return ['0']\n    if bit_count == 1:\n        return ['0', '1']\n    seq_len = 1 << bit_count\n    smaller_sequence = gray_code_sequence_string(bit_count - 1)\n    sequence = []\n    for i in range(seq_len // 2):\n        generated_no = '0' + smaller_sequence[i]\n        sequence.append(generated_no)\n    for i in reversed(range(seq_len // 2)):\n        generated_no = '1' + smaller_sequence[i]\n        sequence.append(generated_no)\n    return sequence",
        "\"\\n    Will output the n-bit grey sequence as a\\n    string of bits\\n\\n    >>> gray_code_sequence_string(2)\\n    ['00', '01', '11', '10']\\n\\n    >>> gray_code_sequence_string(1)\\n    ['0', '1']\\n    \"",
        "bit_count Eq 0"
      ],
      "code": "def gray_code_sequence_string(bit_count: int) -> list:\n    \"\"\"\n    Will output the n-bit grey sequence as a\n    string of bits\n\n    >>> gray_code_sequence_string(2)\n    ['00', '01', '11', '10']\n\n    >>> gray_code_sequence_string(1)\n    ['0', '1']\n    \"\"\"\n    if bit_count == 0:\n        return ['0']\n    if bit_count == 1:\n        return ['0', '1']\n    seq_len = 1 << bit_count\n    smaller_sequence = gray_code_sequence_string(bit_count - 1)\n    sequence = []\n    for i in range(seq_len // 2):\n        generated_no = '0' + smaller_sequence[i]\n        sequence.append(generated_no)\n    for i in reversed(range(seq_len // 2)):\n        generated_no = '1' + smaller_sequence[i]\n        sequence.append(generated_no)\n    return sequence\n\"\\n    Will output the n-bit grey sequence as a\\n    string of bits\\n\\n    >>> gray_code_sequence_string(2)\\n    ['00', '01', '11', '10']\\n\\n    >>> gray_code_sequence_string(1)\\n    ['0', '1']\\n    \"\nbit_count Eq 0"
    },
    {
      "id": "n8",
      "type": "block",
      "statements": [
        "return ['0']"
      ],
      "code": "return ['0']"
    },
    {
      "id": "n9",
      "type": "block",
      "statements": [],
      "code": "\nbit_count Eq 1"
    },
    {
      "id": "n10",
      "type": "block",
      "statements": [
        "return ['0', '1']"
      ],
      "code": "return ['0', '1']"
    },
    {
      "id": "n11",
      "type": "block",
      "statements": [],
      "code": "\nseq_len = 1 << bit_count\nsmaller_sequence = gray_code_sequence_string(bit_count - 1)\nsequence = []"
    },
    {
      "id": "n12",
      "type": "block",
      "statements": [
        "i",
        "range(seq_len FloorDiv 2)"
      ],
      "code": "i\nrange(seq_len FloorDiv 2)"
    },
    {
      "id": "n13",
      "type": "block",
      "statements": [
        "generated_no = '0' + smaller_sequence[i]",
        "sequence.append(generated_no)"
      ],
      "code": "generated_no = '0' + smaller_sequence[i]\nsequence.append(generated_no)"
    },
    {
      "id": "n14",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n15",
      "type": "block",
      "statements": [
        "i",
        "reversed(range(seq_len FloorDiv 2))"
      ],
      "code": "i\nreversed(range(seq_len FloorDiv 2))"
    },
    {
      "id": "n16",
      "type": "block",
      "statements": [
        "generated_no = '1' + smaller_sequence[i]",
        "sequence.append(generated_no)"
      ],
      "code": "generated_no = '1' + smaller_sequence[i]\nsequence.append(generated_no)"
    },
    {
      "id": "n17",
      "type": "block",
      "statements": [
        "return sequence"
      ],
      "code": "return sequence"
    },
    {
      "id": "n18",
      "type": "block",
      "statements": [
        "__name__ Eq '__main__'"
      ],
      "code": "__name__ Eq '__main__'"
    },
    {
      "id": "n19",
      "type": "block",
      "statements": [
        "import doctest",
        "doctest.testmod()"
      ],
      "code": "import doctest\ndoctest.testmod()"
    },
    {
      "id": "n20",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n21",
      "type": "block",
      "statements": [],
      "code": ""
    }
  ],
  "edges": [
    {
      "source": "n14",
      "target": "n15"
    },
    {
      "source": "n0",
      "target": "n1"
    },
    {
      "source": "n2",
      "target": "n3"
    },
    {
      "source": "n19",
      "target": "n21"
    },
    {
      "source": "n16",
      "target": "n15"
    },
    {
      "source": "n5",
      "target": "n4"
    },
    {
      "source": "n3",
      "target": "n4"
    },
    {
      "source": "n4",
      "target": "n5"
    },
    {
      "source": "n4",
      "target": "n6"
    },
    {
      "source": "n12",
      "target": "n13"
    },
    {
      "source": "n7",
      "target": "n8"
    },
    {
      "source": "n15",
      "target": "n16"
    },
    {
      "source": "n9",
      "target": "n11"
    },
    {
      "source": "n12",
      "target": "n14"
    },
    {
      "source": "n20",
      "target": "n21"
    },
    {
      "source": "n9",
      "target": "n10"
    },
    {
      "source": "n11",
      "target": "n12"
    },
    {
      "source": "n18",
      "target": "n19"
    },
    {
      "source": "n7",
      "target": "n9"
    },
    {
      "source": "n18",
      "target": "n20"
    },
    {
      "source": "n1",
      "target": "n3"
    },
    {
      "source": "n13",
      "target": "n12"
    },
    {
      "source": "n0",
      "target": "n2"
    },
    {
      "source": "n15",
      "target": "n17"
    }
  ]
}