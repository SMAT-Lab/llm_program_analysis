{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "import datetime",
        "import typing",
        "from enum import Enum",
        "from typing import Generic, Literal, TypeVar, Union",
        "import prisma.enums",
        "import pydantic",
        "class InstallationLocation(str, Enum):\n    LOCAL = 'local'\n    CLOUD = 'cloud'",
        "LOCAL = 'local'",
        "CLOUD = 'cloud'",
        "class AgentInstalledFromMarketplaceEventData(pydantic.BaseModel):\n    marketplace_agent_id: str\n    installed_agent_id: str\n    installation_location: InstallationLocation",
        "marketplace_agent_id: str",
        "installed_agent_id: str",
        "installation_location: InstallationLocation",
        "class AgentInstalledFromTemplateEventData(pydantic.BaseModel):\n    template_id: str\n    installed_agent_id: str\n    installation_location: InstallationLocation",
        "template_id: str",
        "installed_agent_id: str",
        "installation_location: InstallationLocation",
        "class AgentInstalledFromMarketplaceEvent(pydantic.BaseModel):\n    event_name: Literal['agent_installed_from_marketplace']\n    event_data: AgentInstalledFromMarketplaceEventData",
        "event_name: Literal['agent_installed_from_marketplace']",
        "event_data: AgentInstalledFromMarketplaceEventData",
        "class AgentInstalledFromTemplateEvent(pydantic.BaseModel):\n    event_name: Literal['agent_installed_from_template']\n    event_data: AgentInstalledFromTemplateEventData",
        "event_name: Literal['agent_installed_from_template']",
        "event_data: AgentInstalledFromTemplateEventData",
        "AnalyticsEvent = Union[AgentInstalledFromMarketplaceEvent, AgentInstalledFromTemplateEvent]",
        "class AnalyticsRequest(pydantic.BaseModel):\n    event: AnalyticsEvent",
        "event: AnalyticsEvent",
        "class AddAgentRequest(pydantic.BaseModel):\n    graph: dict[str, typing.Any]\n    author: str\n    keywords: list[str]\n    categories: list[str]",
        "graph: dict[str, typing.Any]",
        "author: str",
        "keywords: list[str]",
        "categories: list[str]",
        "class SubmissionReviewRequest(pydantic.BaseModel):\n    agent_id: str\n    version: int\n    status: prisma.enums.SubmissionStatus\n    comments: str | None",
        "agent_id: str",
        "version: int",
        "status: prisma.enums.SubmissionStatus",
        "comments: str | None",
        "class AgentResponse(pydantic.BaseModel):\n    \"\"\"\n    Represents a response from an agent.\n\n    Attributes:\n        id (str): The ID of the agent.\n        name (str, optional): The name of the agent.\n        description (str, optional): The description of the agent.\n        author (str, optional): The author of the agent.\n        keywords (list[str]): The keywords associated with the agent.\n        categories (list[str]): The categories the agent belongs to.\n        version (int): The version of the agent.\n        createdAt (str): The creation date of the agent.\n        updatedAt (str): The last update date of the agent.\n    \"\"\"\n    id: str\n    name: typing.Optional[str]\n    description: typing.Optional[str]\n    author: typing.Optional[str]\n    keywords: list[str]\n    categories: list[str]\n    version: int\n    createdAt: datetime.datetime\n    updatedAt: datetime.datetime\n    submissionStatus: str\n    views: int = 0\n    downloads: int = 0",
        "'\\n    Represents a response from an agent.\\n\\n    Attributes:\\n        id (str): The ID of the agent.\\n        name (str, optional): The name of the agent.\\n        description (str, optional): The description of the agent.\\n        author (str, optional): The author of the agent.\\n        keywords (list[str]): The keywords associated with the agent.\\n        categories (list[str]): The categories the agent belongs to.\\n        version (int): The version of the agent.\\n        createdAt (str): The creation date of the agent.\\n        updatedAt (str): The last update date of the agent.\\n    '",
        "id: str",
        "name: typing.Optional[str]",
        "description: typing.Optional[str]",
        "author: typing.Optional[str]",
        "keywords: list[str]",
        "categories: list[str]",
        "version: int",
        "createdAt: datetime.datetime",
        "updatedAt: datetime.datetime",
        "submissionStatus: str",
        "views: int = 0",
        "downloads: int = 0",
        "class AgentDetailResponse(pydantic.BaseModel):\n    \"\"\"\n    Represents the response data for an agent detail.\n\n    Attributes:\n        id (str): The ID of the agent.\n        name (Optional[str]): The name of the agent.\n        description (Optional[str]): The description of the agent.\n        author (Optional[str]): The author of the agent.\n        keywords (List[str]): The keywords associated with the agent.\n        categories (List[str]): The categories the agent belongs to.\n        version (int): The version of the agent.\n        createdAt (str): The creation date of the agent.\n        updatedAt (str): The last update date of the agent.\n        graph (Dict[str, Any]): The graph data of the agent.\n    \"\"\"\n    id: str\n    name: typing.Optional[str]\n    description: typing.Optional[str]\n    author: typing.Optional[str]\n    keywords: list[str]\n    categories: list[str]\n    version: int\n    createdAt: datetime.datetime\n    updatedAt: datetime.datetime\n    graph: dict[str, typing.Any]",
        "'\\n    Represents the response data for an agent detail.\\n\\n    Attributes:\\n        id (str): The ID of the agent.\\n        name (Optional[str]): The name of the agent.\\n        description (Optional[str]): The description of the agent.\\n        author (Optional[str]): The author of the agent.\\n        keywords (List[str]): The keywords associated with the agent.\\n        categories (List[str]): The categories the agent belongs to.\\n        version (int): The version of the agent.\\n        createdAt (str): The creation date of the agent.\\n        updatedAt (str): The last update date of the agent.\\n        graph (Dict[str, Any]): The graph data of the agent.\\n    '",
        "id: str",
        "name: typing.Optional[str]",
        "description: typing.Optional[str]",
        "author: typing.Optional[str]",
        "keywords: list[str]",
        "categories: list[str]",
        "version: int",
        "createdAt: datetime.datetime",
        "updatedAt: datetime.datetime",
        "graph: dict[str, typing.Any]",
        "class FeaturedAgentResponse(pydantic.BaseModel):\n    \"\"\"\n    Represents the response data for an agent detail.\n    \"\"\"\n    agentId: str\n    featuredCategories: list[str]\n    createdAt: datetime.datetime\n    updatedAt: datetime.datetime\n    isActive: bool",
        "'\\n    Represents the response data for an agent detail.\\n    '",
        "agentId: str",
        "featuredCategories: list[str]",
        "createdAt: datetime.datetime",
        "updatedAt: datetime.datetime",
        "isActive: bool",
        "class CategoriesResponse(pydantic.BaseModel):\n    \"\"\"\n    Represents the response data for a list of categories.\n\n    Attributes:\n        unique_categories (list[str]): The list of unique categories.\n    \"\"\"\n    unique_categories: list[str]",
        "'\\n    Represents the response data for a list of categories.\\n\\n    Attributes:\\n        unique_categories (list[str]): The list of unique categories.\\n    '",
        "unique_categories: list[str]",
        "T = TypeVar('T')",
        "class ListResponse(pydantic.BaseModel, Generic[T]):\n    \"\"\"\n    Represents a list response.\n\n    Attributes:\n        items (list[T]): The list of items.\n        total_count (int): The total count of items.\n        page (int): The current page number.\n        page_size (int): The number of items per page.\n        total_pages (int): The total number of pages.\n    \"\"\"\n    items: list[T]\n    total_count: int\n    page: int\n    page_size: int\n    total_pages: int",
        "'\\n    Represents a list response.\\n\\n    Attributes:\\n        items (list[T]): The list of items.\\n        total_count (int): The total count of items.\\n        page (int): The current page number.\\n        page_size (int): The number of items per page.\\n        total_pages (int): The total number of pages.\\n    '",
        "items: list[T]",
        "total_count: int",
        "page: int",
        "page_size: int",
        "total_pages: int"
      ],
      "code": "import datetime\nimport typing\nfrom enum import Enum\nfrom typing import Generic, Literal, TypeVar, Union\nimport prisma.enums\nimport pydantic\nclass InstallationLocation(str, Enum):\n    LOCAL = 'local'\n    CLOUD = 'cloud'\nLOCAL = 'local'\nCLOUD = 'cloud'\nclass AgentInstalledFromMarketplaceEventData(pydantic.BaseModel):\n    marketplace_agent_id: str\n    installed_agent_id: str\n    installation_location: InstallationLocation\nmarketplace_agent_id: str\ninstalled_agent_id: str\ninstallation_location: InstallationLocation\nclass AgentInstalledFromTemplateEventData(pydantic.BaseModel):\n    template_id: str\n    installed_agent_id: str\n    installation_location: InstallationLocation\ntemplate_id: str\ninstalled_agent_id: str\ninstallation_location: InstallationLocation\nclass AgentInstalledFromMarketplaceEvent(pydantic.BaseModel):\n    event_name: Literal['agent_installed_from_marketplace']\n    event_data: AgentInstalledFromMarketplaceEventData\nevent_name: Literal['agent_installed_from_marketplace']\nevent_data: AgentInstalledFromMarketplaceEventData\nclass AgentInstalledFromTemplateEvent(pydantic.BaseModel):\n    event_name: Literal['agent_installed_from_template']\n    event_data: AgentInstalledFromTemplateEventData\nevent_name: Literal['agent_installed_from_template']\nevent_data: AgentInstalledFromTemplateEventData\nAnalyticsEvent = Union[AgentInstalledFromMarketplaceEvent, AgentInstalledFromTemplateEvent]\nclass AnalyticsRequest(pydantic.BaseModel):\n    event: AnalyticsEvent\nevent: AnalyticsEvent\nclass AddAgentRequest(pydantic.BaseModel):\n    graph: dict[str, typing.Any]\n    author: str\n    keywords: list[str]\n    categories: list[str]\ngraph: dict[str, typing.Any]\nauthor: str\nkeywords: list[str]\ncategories: list[str]\nclass SubmissionReviewRequest(pydantic.BaseModel):\n    agent_id: str\n    version: int\n    status: prisma.enums.SubmissionStatus\n    comments: str | None\nagent_id: str\nversion: int\nstatus: prisma.enums.SubmissionStatus\ncomments: str | None\nclass AgentResponse(pydantic.BaseModel):\n    \"\"\"\n    Represents a response from an agent.\n\n    Attributes:\n        id (str): The ID of the agent.\n        name (str, optional): The name of the agent.\n        description (str, optional): The description of the agent.\n        author (str, optional): The author of the agent.\n        keywords (list[str]): The keywords associated with the agent.\n        categories (list[str]): The categories the agent belongs to.\n        version (int): The version of the agent.\n        createdAt (str): The creation date of the agent.\n        updatedAt (str): The last update date of the agent.\n    \"\"\"\n    id: str\n    name: typing.Optional[str]\n    description: typing.Optional[str]\n    author: typing.Optional[str]\n    keywords: list[str]\n    categories: list[str]\n    version: int\n    createdAt: datetime.datetime\n    updatedAt: datetime.datetime\n    submissionStatus: str\n    views: int = 0\n    downloads: int = 0\n'\\n    Represents a response from an agent.\\n\\n    Attributes:\\n        id (str): The ID of the agent.\\n        name (str, optional): The name of the agent.\\n        description (str, optional): The description of the agent.\\n        author (str, optional): The author of the agent.\\n        keywords (list[str]): The keywords associated with the agent.\\n        categories (list[str]): The categories the agent belongs to.\\n        version (int): The version of the agent.\\n        createdAt (str): The creation date of the agent.\\n        updatedAt (str): The last update date of the agent.\\n    '\nid: str\nname: typing.Optional[str]\ndescription: typing.Optional[str]\nauthor: typing.Optional[str]\nkeywords: list[str]\ncategories: list[str]\nversion: int\ncreatedAt: datetime.datetime\nupdatedAt: datetime.datetime\nsubmissionStatus: str\nviews: int = 0\ndownloads: int = 0\nclass AgentDetailResponse(pydantic.BaseModel):\n    \"\"\"\n    Represents the response data for an agent detail.\n\n    Attributes:\n        id (str): The ID of the agent.\n        name (Optional[str]): The name of the agent.\n        description (Optional[str]): The description of the agent.\n        author (Optional[str]): The author of the agent.\n        keywords (List[str]): The keywords associated with the agent.\n        categories (List[str]): The categories the agent belongs to.\n        version (int): The version of the agent.\n        createdAt (str): The creation date of the agent.\n        updatedAt (str): The last update date of the agent.\n        graph (Dict[str, Any]): The graph data of the agent.\n    \"\"\"\n    id: str\n    name: typing.Optional[str]\n    description: typing.Optional[str]\n    author: typing.Optional[str]\n    keywords: list[str]\n    categories: list[str]\n    version: int\n    createdAt: datetime.datetime\n    updatedAt: datetime.datetime\n    graph: dict[str, typing.Any]\n'\\n    Represents the response data for an agent detail.\\n\\n    Attributes:\\n        id (str): The ID of the agent.\\n        name (Optional[str]): The name of the agent.\\n        description (Optional[str]): The description of the agent.\\n        author (Optional[str]): The author of the agent.\\n        keywords (List[str]): The keywords associated with the agent.\\n        categories (List[str]): The categories the agent belongs to.\\n        version (int): The version of the agent.\\n        createdAt (str): The creation date of the agent.\\n        updatedAt (str): The last update date of the agent.\\n        graph (Dict[str, Any]): The graph data of the agent.\\n    '\nid: str\nname: typing.Optional[str]\ndescription: typing.Optional[str]\nauthor: typing.Optional[str]\nkeywords: list[str]\ncategories: list[str]\nversion: int\ncreatedAt: datetime.datetime\nupdatedAt: datetime.datetime\ngraph: dict[str, typing.Any]\nclass FeaturedAgentResponse(pydantic.BaseModel):\n    \"\"\"\n    Represents the response data for an agent detail.\n    \"\"\"\n    agentId: str\n    featuredCategories: list[str]\n    createdAt: datetime.datetime\n    updatedAt: datetime.datetime\n    isActive: bool\n'\\n    Represents the response data for an agent detail.\\n    '\nagentId: str\nfeaturedCategories: list[str]\ncreatedAt: datetime.datetime\nupdatedAt: datetime.datetime\nisActive: bool\nclass CategoriesResponse(pydantic.BaseModel):\n    \"\"\"\n    Represents the response data for a list of categories.\n\n    Attributes:\n        unique_categories (list[str]): The list of unique categories.\n    \"\"\"\n    unique_categories: list[str]\n'\\n    Represents the response data for a list of categories.\\n\\n    Attributes:\\n        unique_categories (list[str]): The list of unique categories.\\n    '\nunique_categories: list[str]\nT = TypeVar('T')\nclass ListResponse(pydantic.BaseModel, Generic[T]):\n    \"\"\"\n    Represents a list response.\n\n    Attributes:\n        items (list[T]): The list of items.\n        total_count (int): The total count of items.\n        page (int): The current page number.\n        page_size (int): The number of items per page.\n        total_pages (int): The total number of pages.\n    \"\"\"\n    items: list[T]\n    total_count: int\n    page: int\n    page_size: int\n    total_pages: int\n'\\n    Represents a list response.\\n\\n    Attributes:\\n        items (list[T]): The list of items.\\n        total_count (int): The total count of items.\\n        page (int): The current page number.\\n        page_size (int): The number of items per page.\\n        total_pages (int): The total number of pages.\\n    '\nitems: list[T]\ntotal_count: int\npage: int\npage_size: int\ntotal_pages: int"
    }
  ],
  "edges": []
}