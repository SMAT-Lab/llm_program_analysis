{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "from typing import Any",
        "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema",
        "from backend.data.model import SchemaField",
        "from backend.util.json import json",
        "class StepThroughItemsBlock(Block):\n\n    class Input(BlockSchema):\n        items: list = SchemaField(advanced=False, description='The list or dictionary of items to iterate over', placeholder=\"[1, 2, 3, 4, 5] or {'key1': 'value1', 'key2': 'value2'}\", default=[])\n        items_object: dict = SchemaField(advanced=False, description='The list or dictionary of items to iterate over', placeholder=\"[1, 2, 3, 4, 5] or {'key1': 'value1', 'key2': 'value2'}\", default={})\n        items_str: str = SchemaField(advanced=False, description='The list or dictionary of items to iterate over', placeholder=\"[1, 2, 3, 4, 5] or {'key1': 'value1', 'key2': 'value2'}\", default='')\n\n    class Output(BlockSchema):\n        item: Any = SchemaField(description='The current item in the iteration')\n        key: Any = SchemaField(description='The key or index of the current item in the iteration')\n\n    def __init__(self):\n        super().__init__(id='f66a3543-28d3-4ab5-8945-9b336371e2ce', input_schema=StepThroughItemsBlock.Input, output_schema=StepThroughItemsBlock.Output, categories={BlockCategory.LOGIC}, description='Iterates over a list or dictionary and outputs each item.', test_input={'items': [1, 2, 3, {'key1': 'value1', 'key2': 'value2'}]}, test_output=[('item', 1), ('key', 0), ('item', 2), ('key', 1), ('item', 3), ('key', 2), ('item', {'key1': 'value1', 'key2': 'value2'}), ('key', 3)], test_mock={})\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        for data in [input_data.items, input_data.items_object, input_data.items_str]:\n            if not data:\n                continue\n            if isinstance(data, str):\n                items = json.loads(data)\n            else:\n                items = data\n            if isinstance(items, dict):\n                for item in items.values():\n                    yield ('item', item)\n                    yield ('key', item)\n            else:\n                for (index, item) in enumerate(items):\n                    yield ('item', item)\n                    yield ('key', index)",
        "class Input(BlockSchema):\n    items: list = SchemaField(advanced=False, description='The list or dictionary of items to iterate over', placeholder=\"[1, 2, 3, 4, 5] or {'key1': 'value1', 'key2': 'value2'}\", default=[])\n    items_object: dict = SchemaField(advanced=False, description='The list or dictionary of items to iterate over', placeholder=\"[1, 2, 3, 4, 5] or {'key1': 'value1', 'key2': 'value2'}\", default={})\n    items_str: str = SchemaField(advanced=False, description='The list or dictionary of items to iterate over', placeholder=\"[1, 2, 3, 4, 5] or {'key1': 'value1', 'key2': 'value2'}\", default='')",
        "items: list = SchemaField(advanced=False, description='The list or dictionary of items to iterate over', placeholder=\"[1, 2, 3, 4, 5] or {'key1': 'value1', 'key2': 'value2'}\", default=[])",
        "items_object: dict = SchemaField(advanced=False, description='The list or dictionary of items to iterate over', placeholder=\"[1, 2, 3, 4, 5] or {'key1': 'value1', 'key2': 'value2'}\", default={})",
        "items_str: str = SchemaField(advanced=False, description='The list or dictionary of items to iterate over', placeholder=\"[1, 2, 3, 4, 5] or {'key1': 'value1', 'key2': 'value2'}\", default='')",
        "class Output(BlockSchema):\n    item: Any = SchemaField(description='The current item in the iteration')\n    key: Any = SchemaField(description='The key or index of the current item in the iteration')",
        "item: Any = SchemaField(description='The current item in the iteration')",
        "key: Any = SchemaField(description='The key or index of the current item in the iteration')",
        "def __init__(self):\n    super().__init__(id='f66a3543-28d3-4ab5-8945-9b336371e2ce', input_schema=StepThroughItemsBlock.Input, output_schema=StepThroughItemsBlock.Output, categories={BlockCategory.LOGIC}, description='Iterates over a list or dictionary and outputs each item.', test_input={'items': [1, 2, 3, {'key1': 'value1', 'key2': 'value2'}]}, test_output=[('item', 1), ('key', 0), ('item', 2), ('key', 1), ('item', 3), ('key', 2), ('item', {'key1': 'value1', 'key2': 'value2'}), ('key', 3)], test_mock={})",
        "super().__init__()",
        "def run(self, input_data: Input, **kwargs) -> BlockOutput:\n    for data in [input_data.items, input_data.items_object, input_data.items_str]:\n        if not data:\n            continue\n        if isinstance(data, str):\n            items = json.loads(data)\n        else:\n            items = data\n        if isinstance(items, dict):\n            for item in items.values():\n                yield ('item', item)\n                yield ('key', item)\n        else:\n            for (index, item) in enumerate(items):\n                yield ('item', item)\n                yield ('key', index)"
      ],
      "code": "from typing import Any\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\nfrom backend.util.json import json\nclass StepThroughItemsBlock(Block):\n\n    class Input(BlockSchema):\n        items: list = SchemaField(advanced=False, description='The list or dictionary of items to iterate over', placeholder=\"[1, 2, 3, 4, 5] or {'key1': 'value1', 'key2': 'value2'}\", default=[])\n        items_object: dict = SchemaField(advanced=False, description='The list or dictionary of items to iterate over', placeholder=\"[1, 2, 3, 4, 5] or {'key1': 'value1', 'key2': 'value2'}\", default={})\n        items_str: str = SchemaField(advanced=False, description='The list or dictionary of items to iterate over', placeholder=\"[1, 2, 3, 4, 5] or {'key1': 'value1', 'key2': 'value2'}\", default='')\n\n    class Output(BlockSchema):\n        item: Any = SchemaField(description='The current item in the iteration')\n        key: Any = SchemaField(description='The key or index of the current item in the iteration')\n\n    def __init__(self):\n        super().__init__(id='f66a3543-28d3-4ab5-8945-9b336371e2ce', input_schema=StepThroughItemsBlock.Input, output_schema=StepThroughItemsBlock.Output, categories={BlockCategory.LOGIC}, description='Iterates over a list or dictionary and outputs each item.', test_input={'items': [1, 2, 3, {'key1': 'value1', 'key2': 'value2'}]}, test_output=[('item', 1), ('key', 0), ('item', 2), ('key', 1), ('item', 3), ('key', 2), ('item', {'key1': 'value1', 'key2': 'value2'}), ('key', 3)], test_mock={})\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        for data in [input_data.items, input_data.items_object, input_data.items_str]:\n            if not data:\n                continue\n            if isinstance(data, str):\n                items = json.loads(data)\n            else:\n                items = data\n            if isinstance(items, dict):\n                for item in items.values():\n                    yield ('item', item)\n                    yield ('key', item)\n            else:\n                for (index, item) in enumerate(items):\n                    yield ('item', item)\n                    yield ('key', index)\nclass Input(BlockSchema):\n    items: list = SchemaField(advanced=False, description='The list or dictionary of items to iterate over', placeholder=\"[1, 2, 3, 4, 5] or {'key1': 'value1', 'key2': 'value2'}\", default=[])\n    items_object: dict = SchemaField(advanced=False, description='The list or dictionary of items to iterate over', placeholder=\"[1, 2, 3, 4, 5] or {'key1': 'value1', 'key2': 'value2'}\", default={})\n    items_str: str = SchemaField(advanced=False, description='The list or dictionary of items to iterate over', placeholder=\"[1, 2, 3, 4, 5] or {'key1': 'value1', 'key2': 'value2'}\", default='')\nitems: list = SchemaField(advanced=False, description='The list or dictionary of items to iterate over', placeholder=\"[1, 2, 3, 4, 5] or {'key1': 'value1', 'key2': 'value2'}\", default=[])\nitems_object: dict = SchemaField(advanced=False, description='The list or dictionary of items to iterate over', placeholder=\"[1, 2, 3, 4, 5] or {'key1': 'value1', 'key2': 'value2'}\", default={})\nitems_str: str = SchemaField(advanced=False, description='The list or dictionary of items to iterate over', placeholder=\"[1, 2, 3, 4, 5] or {'key1': 'value1', 'key2': 'value2'}\", default='')\nclass Output(BlockSchema):\n    item: Any = SchemaField(description='The current item in the iteration')\n    key: Any = SchemaField(description='The key or index of the current item in the iteration')\nitem: Any = SchemaField(description='The current item in the iteration')\nkey: Any = SchemaField(description='The key or index of the current item in the iteration')\ndef __init__(self):\n    super().__init__(id='f66a3543-28d3-4ab5-8945-9b336371e2ce', input_schema=StepThroughItemsBlock.Input, output_schema=StepThroughItemsBlock.Output, categories={BlockCategory.LOGIC}, description='Iterates over a list or dictionary and outputs each item.', test_input={'items': [1, 2, 3, {'key1': 'value1', 'key2': 'value2'}]}, test_output=[('item', 1), ('key', 0), ('item', 2), ('key', 1), ('item', 3), ('key', 2), ('item', {'key1': 'value1', 'key2': 'value2'}), ('key', 3)], test_mock={})\nsuper().__init__()\ndef run(self, input_data: Input, **kwargs) -> BlockOutput:\n    for data in [input_data.items, input_data.items_object, input_data.items_str]:\n        if not data:\n            continue\n        if isinstance(data, str):\n            items = json.loads(data)\n        else:\n            items = data\n        if isinstance(items, dict):\n            for item in items.values():\n                yield ('item', item)\n                yield ('key', item)\n        else:\n            for (index, item) in enumerate(items):\n                yield ('item', item)\n                yield ('key', index)"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "data",
        "[input_data.items, input_data.items_object, input_data.items_str]"
      ],
      "code": "data\n[input_data.items, input_data.items_object, input_data.items_str]"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [
        "not data"
      ],
      "code": "not data"
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n4",
      "type": "block",
      "statements": [
        "continue"
      ],
      "code": "continue"
    },
    {
      "id": "n5",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n6",
      "type": "block",
      "statements": [
        "isinstance(data, str)"
      ],
      "code": "isinstance(data, str)"
    },
    {
      "id": "n7",
      "type": "block",
      "statements": [
        "items = json.loads(data)"
      ],
      "code": "items = json.loads(data)"
    },
    {
      "id": "n8",
      "type": "block",
      "statements": [
        "items = data"
      ],
      "code": "items = data"
    },
    {
      "id": "n9",
      "type": "block",
      "statements": [
        "isinstance(items, dict)"
      ],
      "code": "isinstance(items, dict)"
    },
    {
      "id": "n10",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n11",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n12",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n13",
      "type": "block",
      "statements": [
        "item",
        "items.values()"
      ],
      "code": "item\nitems.values()"
    },
    {
      "id": "n14",
      "type": "block",
      "statements": [
        "(yield ('item', item))",
        "(yield ('key', item))"
      ],
      "code": "(yield ('item', item))\n(yield ('key', item))"
    },
    {
      "id": "n15",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n16",
      "type": "block",
      "statements": [
        "(index, item)",
        "enumerate(items)"
      ],
      "code": "(index, item)\nenumerate(items)"
    },
    {
      "id": "n17",
      "type": "block",
      "statements": [
        "(yield ('item', item))",
        "(yield ('key', index))"
      ],
      "code": "(yield ('item', item))\n(yield ('key', index))"
    },
    {
      "id": "n18",
      "type": "block",
      "statements": [],
      "code": ""
    }
  ],
  "edges": [
    {
      "source": "n6",
      "target": "n7"
    },
    {
      "source": "n0",
      "target": "n1"
    },
    {
      "source": "n18",
      "target": "n12"
    },
    {
      "source": "n13",
      "target": "n14"
    },
    {
      "source": "n12",
      "target": "n1"
    },
    {
      "source": "n2",
      "target": "n4"
    },
    {
      "source": "n16",
      "target": "n17"
    },
    {
      "source": "n13",
      "target": "n15"
    },
    {
      "source": "n16",
      "target": "n18"
    },
    {
      "source": "n8",
      "target": "n9"
    },
    {
      "source": "n1",
      "target": "n2"
    },
    {
      "source": "n4",
      "target": "n6"
    },
    {
      "source": "n15",
      "target": "n12"
    },
    {
      "source": "n9",
      "target": "n11"
    },
    {
      "source": "n17",
      "target": "n16"
    },
    {
      "source": "n11",
      "target": "n16"
    },
    {
      "source": "n9",
      "target": "n10"
    },
    {
      "source": "n7",
      "target": "n9"
    },
    {
      "source": "n5",
      "target": "n6"
    },
    {
      "source": "n1",
      "target": "n3"
    },
    {
      "source": "n2",
      "target": "n5"
    },
    {
      "source": "n14",
      "target": "n13"
    },
    {
      "source": "n10",
      "target": "n13"
    },
    {
      "source": "n6",
      "target": "n8"
    }
  ]
}