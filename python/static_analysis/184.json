{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "from typing import Dict, Set",
        "from fastapi import WebSocket",
        "from backend.data import execution",
        "from backend.server.model import Methods, WsMessage",
        "class ConnectionManager:\n\n    def __init__(self):\n        self.active_connections: Set[WebSocket] = set()\n        self.subscriptions: Dict[str, Set[WebSocket]] = {}\n\n    async def connect(self, websocket: WebSocket):\n        await websocket.accept()\n        self.active_connections.add(websocket)\n\n    def disconnect(self, websocket: WebSocket):\n        self.active_connections.remove(websocket)\n        for subscribers in self.subscriptions.values():\n            subscribers.discard(websocket)\n\n    async def subscribe(self, graph_id: str, websocket: WebSocket):\n        if graph_id not in self.subscriptions:\n            self.subscriptions[graph_id] = set()\n        self.subscriptions[graph_id].add(websocket)\n\n    async def unsubscribe(self, graph_id: str, websocket: WebSocket):\n        if graph_id in self.subscriptions:\n            self.subscriptions[graph_id].discard(websocket)\n            if not self.subscriptions[graph_id]:\n                del self.subscriptions[graph_id]\n\n    async def send_execution_result(self, result: execution.ExecutionResult):\n        graph_id = result.graph_id\n        if graph_id in self.subscriptions:\n            message = WsMessage(method=Methods.EXECUTION_EVENT, channel=graph_id, data=result.model_dump()).model_dump_json()\n            for connection in self.subscriptions[graph_id]:\n                await connection.send_text(message)",
        "def __init__(self):\n    self.active_connections: Set[WebSocket] = set()\n    self.subscriptions: Dict[str, Set[WebSocket]] = {}",
        "self.active_connections: Set[WebSocket] = set()",
        "self.subscriptions: Dict[str, Set[WebSocket]] = {}",
        "async def connect(self, websocket: WebSocket):\n    await websocket.accept()\n    self.active_connections.add(websocket)",
        "await websocket.accept()",
        "self.active_connections.add(websocket)",
        "def disconnect(self, websocket: WebSocket):\n    self.active_connections.remove(websocket)\n    for subscribers in self.subscriptions.values():\n        subscribers.discard(websocket)",
        "self.active_connections.remove(websocket)"
      ],
      "code": "from typing import Dict, Set\nfrom fastapi import WebSocket\nfrom backend.data import execution\nfrom backend.server.model import Methods, WsMessage\nclass ConnectionManager:\n\n    def __init__(self):\n        self.active_connections: Set[WebSocket] = set()\n        self.subscriptions: Dict[str, Set[WebSocket]] = {}\n\n    async def connect(self, websocket: WebSocket):\n        await websocket.accept()\n        self.active_connections.add(websocket)\n\n    def disconnect(self, websocket: WebSocket):\n        self.active_connections.remove(websocket)\n        for subscribers in self.subscriptions.values():\n            subscribers.discard(websocket)\n\n    async def subscribe(self, graph_id: str, websocket: WebSocket):\n        if graph_id not in self.subscriptions:\n            self.subscriptions[graph_id] = set()\n        self.subscriptions[graph_id].add(websocket)\n\n    async def unsubscribe(self, graph_id: str, websocket: WebSocket):\n        if graph_id in self.subscriptions:\n            self.subscriptions[graph_id].discard(websocket)\n            if not self.subscriptions[graph_id]:\n                del self.subscriptions[graph_id]\n\n    async def send_execution_result(self, result: execution.ExecutionResult):\n        graph_id = result.graph_id\n        if graph_id in self.subscriptions:\n            message = WsMessage(method=Methods.EXECUTION_EVENT, channel=graph_id, data=result.model_dump()).model_dump_json()\n            for connection in self.subscriptions[graph_id]:\n                await connection.send_text(message)\ndef __init__(self):\n    self.active_connections: Set[WebSocket] = set()\n    self.subscriptions: Dict[str, Set[WebSocket]] = {}\nself.active_connections: Set[WebSocket] = set()\nself.subscriptions: Dict[str, Set[WebSocket]] = {}\nasync def connect(self, websocket: WebSocket):\n    await websocket.accept()\n    self.active_connections.add(websocket)\nawait websocket.accept()\nself.active_connections.add(websocket)\ndef disconnect(self, websocket: WebSocket):\n    self.active_connections.remove(websocket)\n    for subscribers in self.subscriptions.values():\n        subscribers.discard(websocket)\nself.active_connections.remove(websocket)"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "subscribers",
        "self.subscriptions.values()"
      ],
      "code": "subscribers\nself.subscriptions.values()"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [
        "subscribers.discard(websocket)"
      ],
      "code": "subscribers.discard(websocket)"
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [
        "async def subscribe(self, graph_id: str, websocket: WebSocket):\n    if graph_id not in self.subscriptions:\n        self.subscriptions[graph_id] = set()\n    self.subscriptions[graph_id].add(websocket)",
        "graph_id NotIn self.subscriptions"
      ],
      "code": "async def subscribe(self, graph_id: str, websocket: WebSocket):\n    if graph_id not in self.subscriptions:\n        self.subscriptions[graph_id] = set()\n    self.subscriptions[graph_id].add(websocket)\ngraph_id NotIn self.subscriptions"
    },
    {
      "id": "n4",
      "type": "block",
      "statements": [
        "self.subscriptions[graph_id] = set()"
      ],
      "code": "self.subscriptions[graph_id] = set()"
    },
    {
      "id": "n5",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n6",
      "type": "block",
      "statements": [
        "self.subscriptions[graph_id].add(websocket)",
        "async def unsubscribe(self, graph_id: str, websocket: WebSocket):\n    if graph_id in self.subscriptions:\n        self.subscriptions[graph_id].discard(websocket)\n        if not self.subscriptions[graph_id]:\n            del self.subscriptions[graph_id]",
        "graph_id In self.subscriptions"
      ],
      "code": "self.subscriptions[graph_id].add(websocket)\nasync def unsubscribe(self, graph_id: str, websocket: WebSocket):\n    if graph_id in self.subscriptions:\n        self.subscriptions[graph_id].discard(websocket)\n        if not self.subscriptions[graph_id]:\n            del self.subscriptions[graph_id]\ngraph_id In self.subscriptions"
    },
    {
      "id": "n7",
      "type": "block",
      "statements": [
        "self.subscriptions[graph_id].discard(websocket)",
        "not self.subscriptions[graph_id]"
      ],
      "code": "self.subscriptions[graph_id].discard(websocket)\nnot self.subscriptions[graph_id]"
    },
    {
      "id": "n8",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n9",
      "type": "block",
      "statements": [
        "async def send_execution_result(self, result: execution.ExecutionResult):\n    graph_id = result.graph_id\n    if graph_id in self.subscriptions:\n        message = WsMessage(method=Methods.EXECUTION_EVENT, channel=graph_id, data=result.model_dump()).model_dump_json()\n        for connection in self.subscriptions[graph_id]:\n            await connection.send_text(message)",
        "graph_id = result.graph_id",
        "graph_id In self.subscriptions"
      ],
      "code": "async def send_execution_result(self, result: execution.ExecutionResult):\n    graph_id = result.graph_id\n    if graph_id in self.subscriptions:\n        message = WsMessage(method=Methods.EXECUTION_EVENT, channel=graph_id, data=result.model_dump()).model_dump_json()\n        for connection in self.subscriptions[graph_id]:\n            await connection.send_text(message)\ngraph_id = result.graph_id\ngraph_id In self.subscriptions"
    },
    {
      "id": "n10",
      "type": "block",
      "statements": [
        "del self.subscriptions[graph_id]"
      ],
      "code": "del self.subscriptions[graph_id]"
    },
    {
      "id": "n11",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n12",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n13",
      "type": "block",
      "statements": [
        "message = WsMessage(method=Methods.EXECUTION_EVENT, channel=graph_id, data=result.model_dump()).model_dump_json()"
      ],
      "code": "message = WsMessage(method=Methods.EXECUTION_EVENT, channel=graph_id, data=result.model_dump()).model_dump_json()"
    },
    {
      "id": "n14",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n15",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n16",
      "type": "block",
      "statements": [
        "connection",
        "self.subscriptions[graph_id]"
      ],
      "code": "connection\nself.subscriptions[graph_id]"
    },
    {
      "id": "n17",
      "type": "block",
      "statements": [
        "await connection.send_text(message)"
      ],
      "code": "await connection.send_text(message)"
    },
    {
      "id": "n18",
      "type": "block",
      "statements": [],
      "code": ""
    }
  ],
  "edges": [
    {
      "source": "n6",
      "target": "n7"
    },
    {
      "source": "n14",
      "target": "n15"
    },
    {
      "source": "n0",
      "target": "n1"
    },
    {
      "source": "n7",
      "target": "n11"
    },
    {
      "source": "n7",
      "target": "n10"
    },
    {
      "source": "n9",
      "target": "n13"
    },
    {
      "source": "n9",
      "target": "n14"
    },
    {
      "source": "n16",
      "target": "n17"
    },
    {
      "source": "n8",
      "target": "n9"
    },
    {
      "source": "n16",
      "target": "n18"
    },
    {
      "source": "n3",
      "target": "n4"
    },
    {
      "source": "n12",
      "target": "n9"
    },
    {
      "source": "n1",
      "target": "n2"
    },
    {
      "source": "n4",
      "target": "n6"
    },
    {
      "source": "n18",
      "target": "n15"
    },
    {
      "source": "n17",
      "target": "n16"
    },
    {
      "source": "n10",
      "target": "n12"
    },
    {
      "source": "n11",
      "target": "n12"
    },
    {
      "source": "n5",
      "target": "n6"
    },
    {
      "source": "n1",
      "target": "n3"
    },
    {
      "source": "n13",
      "target": "n16"
    },
    {
      "source": "n3",
      "target": "n5"
    },
    {
      "source": "n6",
      "target": "n8"
    },
    {
      "source": "n2",
      "target": "n1"
    }
  ]
}