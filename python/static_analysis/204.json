{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "from backend.blocks.hubspot._auth import HubSpotCredentials, HubSpotCredentialsField, HubSpotCredentialsInput",
        "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema",
        "from backend.data.model import SchemaField",
        "from backend.util.request import requests",
        "class HubSpotCompanyBlock(Block):\n\n    class Input(BlockSchema):\n        credentials: HubSpotCredentialsInput = HubSpotCredentialsField()\n        operation: str = SchemaField(description='Operation to perform (create, update, get)', default='get')\n        company_data: dict = SchemaField(description='Company data for create/update operations', default={})\n        domain: str = SchemaField(description='Company domain for get/update operations', default='')\n\n    class Output(BlockSchema):\n        company: dict = SchemaField(description='Company information')\n        status: str = SchemaField(description='Operation status')\n\n    def __init__(self):\n        super().__init__(id='3ae02219-d540-47cd-9c78-3ad6c7d9820a', description='Manages HubSpot companies - create, update, and retrieve company information', categories={BlockCategory.CRM}, input_schema=HubSpotCompanyBlock.Input, output_schema=HubSpotCompanyBlock.Output)\n\n    def run(self, input_data: Input, *, credentials: HubSpotCredentials, **kwargs) -> BlockOutput:\n        base_url = 'https://api.hubapi.com/crm/v3/objects/companies'\n        headers = {'Authorization': f'Bearer {credentials.api_key.get_secret_value()}', 'Content-Type': 'application/json'}\n        if input_data.operation == 'create':\n            response = requests.post(base_url, headers=headers, json={'properties': input_data.company_data})\n            result = response.json()\n            yield ('company', result)\n            yield ('status', 'created')\n        elif input_data.operation == 'get':\n            search_url = f'{base_url}/search'\n            search_data = {'filterGroups': [{'filters': [{'propertyName': 'domain', 'operator': 'EQ', 'value': input_data.domain}]}]}\n            response = requests.post(search_url, headers=headers, json=search_data)\n            result = response.json()\n            yield ('company', result.get('results', [{}])[0])\n            yield ('status', 'retrieved')\n        elif input_data.operation == 'update':\n            search_response = requests.post(f'{base_url}/search', headers=headers, json={'filterGroups': [{'filters': [{'propertyName': 'domain', 'operator': 'EQ', 'value': input_data.domain}]}]})\n            company_id = search_response.json().get('results', [{}])[0].get('id')\n            if company_id:\n                response = requests.patch(f'{base_url}/{company_id}', headers=headers, json={'properties': input_data.company_data})\n                result = response.json()\n                yield ('company', result)\n                yield ('status', 'updated')\n            else:\n                yield ('company', {})\n                yield ('status', 'company_not_found')",
        "class Input(BlockSchema):\n    credentials: HubSpotCredentialsInput = HubSpotCredentialsField()\n    operation: str = SchemaField(description='Operation to perform (create, update, get)', default='get')\n    company_data: dict = SchemaField(description='Company data for create/update operations', default={})\n    domain: str = SchemaField(description='Company domain for get/update operations', default='')",
        "credentials: HubSpotCredentialsInput = HubSpotCredentialsField()",
        "operation: str = SchemaField(description='Operation to perform (create, update, get)', default='get')",
        "company_data: dict = SchemaField(description='Company data for create/update operations', default={})",
        "domain: str = SchemaField(description='Company domain for get/update operations', default='')",
        "class Output(BlockSchema):\n    company: dict = SchemaField(description='Company information')\n    status: str = SchemaField(description='Operation status')",
        "company: dict = SchemaField(description='Company information')",
        "status: str = SchemaField(description='Operation status')",
        "def __init__(self):\n    super().__init__(id='3ae02219-d540-47cd-9c78-3ad6c7d9820a', description='Manages HubSpot companies - create, update, and retrieve company information', categories={BlockCategory.CRM}, input_schema=HubSpotCompanyBlock.Input, output_schema=HubSpotCompanyBlock.Output)",
        "super().__init__()",
        "def run(self, input_data: Input, *, credentials: HubSpotCredentials, **kwargs) -> BlockOutput:\n    base_url = 'https://api.hubapi.com/crm/v3/objects/companies'\n    headers = {'Authorization': f'Bearer {credentials.api_key.get_secret_value()}', 'Content-Type': 'application/json'}\n    if input_data.operation == 'create':\n        response = requests.post(base_url, headers=headers, json={'properties': input_data.company_data})\n        result = response.json()\n        yield ('company', result)\n        yield ('status', 'created')\n    elif input_data.operation == 'get':\n        search_url = f'{base_url}/search'\n        search_data = {'filterGroups': [{'filters': [{'propertyName': 'domain', 'operator': 'EQ', 'value': input_data.domain}]}]}\n        response = requests.post(search_url, headers=headers, json=search_data)\n        result = response.json()\n        yield ('company', result.get('results', [{}])[0])\n        yield ('status', 'retrieved')\n    elif input_data.operation == 'update':\n        search_response = requests.post(f'{base_url}/search', headers=headers, json={'filterGroups': [{'filters': [{'propertyName': 'domain', 'operator': 'EQ', 'value': input_data.domain}]}]})\n        company_id = search_response.json().get('results', [{}])[0].get('id')\n        if company_id:\n            response = requests.patch(f'{base_url}/{company_id}', headers=headers, json={'properties': input_data.company_data})\n            result = response.json()\n            yield ('company', result)\n            yield ('status', 'updated')\n        else:\n            yield ('company', {})\n            yield ('status', 'company_not_found')",
        "base_url = 'https://api.hubapi.com/crm/v3/objects/companies'",
        "headers = {'Authorization': f'Bearer {credentials.api_key.get_secret_value()}', 'Content-Type': 'application/json'}",
        "input_data.operation Eq 'create'"
      ],
      "code": "from backend.blocks.hubspot._auth import HubSpotCredentials, HubSpotCredentialsField, HubSpotCredentialsInput\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\nfrom backend.util.request import requests\nclass HubSpotCompanyBlock(Block):\n\n    class Input(BlockSchema):\n        credentials: HubSpotCredentialsInput = HubSpotCredentialsField()\n        operation: str = SchemaField(description='Operation to perform (create, update, get)', default='get')\n        company_data: dict = SchemaField(description='Company data for create/update operations', default={})\n        domain: str = SchemaField(description='Company domain for get/update operations', default='')\n\n    class Output(BlockSchema):\n        company: dict = SchemaField(description='Company information')\n        status: str = SchemaField(description='Operation status')\n\n    def __init__(self):\n        super().__init__(id='3ae02219-d540-47cd-9c78-3ad6c7d9820a', description='Manages HubSpot companies - create, update, and retrieve company information', categories={BlockCategory.CRM}, input_schema=HubSpotCompanyBlock.Input, output_schema=HubSpotCompanyBlock.Output)\n\n    def run(self, input_data: Input, *, credentials: HubSpotCredentials, **kwargs) -> BlockOutput:\n        base_url = 'https://api.hubapi.com/crm/v3/objects/companies'\n        headers = {'Authorization': f'Bearer {credentials.api_key.get_secret_value()}', 'Content-Type': 'application/json'}\n        if input_data.operation == 'create':\n            response = requests.post(base_url, headers=headers, json={'properties': input_data.company_data})\n            result = response.json()\n            yield ('company', result)\n            yield ('status', 'created')\n        elif input_data.operation == 'get':\n            search_url = f'{base_url}/search'\n            search_data = {'filterGroups': [{'filters': [{'propertyName': 'domain', 'operator': 'EQ', 'value': input_data.domain}]}]}\n            response = requests.post(search_url, headers=headers, json=search_data)\n            result = response.json()\n            yield ('company', result.get('results', [{}])[0])\n            yield ('status', 'retrieved')\n        elif input_data.operation == 'update':\n            search_response = requests.post(f'{base_url}/search', headers=headers, json={'filterGroups': [{'filters': [{'propertyName': 'domain', 'operator': 'EQ', 'value': input_data.domain}]}]})\n            company_id = search_response.json().get('results', [{}])[0].get('id')\n            if company_id:\n                response = requests.patch(f'{base_url}/{company_id}', headers=headers, json={'properties': input_data.company_data})\n                result = response.json()\n                yield ('company', result)\n                yield ('status', 'updated')\n            else:\n                yield ('company', {})\n                yield ('status', 'company_not_found')\nclass Input(BlockSchema):\n    credentials: HubSpotCredentialsInput = HubSpotCredentialsField()\n    operation: str = SchemaField(description='Operation to perform (create, update, get)', default='get')\n    company_data: dict = SchemaField(description='Company data for create/update operations', default={})\n    domain: str = SchemaField(description='Company domain for get/update operations', default='')\ncredentials: HubSpotCredentialsInput = HubSpotCredentialsField()\noperation: str = SchemaField(description='Operation to perform (create, update, get)', default='get')\ncompany_data: dict = SchemaField(description='Company data for create/update operations', default={})\ndomain: str = SchemaField(description='Company domain for get/update operations', default='')\nclass Output(BlockSchema):\n    company: dict = SchemaField(description='Company information')\n    status: str = SchemaField(description='Operation status')\ncompany: dict = SchemaField(description='Company information')\nstatus: str = SchemaField(description='Operation status')\ndef __init__(self):\n    super().__init__(id='3ae02219-d540-47cd-9c78-3ad6c7d9820a', description='Manages HubSpot companies - create, update, and retrieve company information', categories={BlockCategory.CRM}, input_schema=HubSpotCompanyBlock.Input, output_schema=HubSpotCompanyBlock.Output)\nsuper().__init__()\ndef run(self, input_data: Input, *, credentials: HubSpotCredentials, **kwargs) -> BlockOutput:\n    base_url = 'https://api.hubapi.com/crm/v3/objects/companies'\n    headers = {'Authorization': f'Bearer {credentials.api_key.get_secret_value()}', 'Content-Type': 'application/json'}\n    if input_data.operation == 'create':\n        response = requests.post(base_url, headers=headers, json={'properties': input_data.company_data})\n        result = response.json()\n        yield ('company', result)\n        yield ('status', 'created')\n    elif input_data.operation == 'get':\n        search_url = f'{base_url}/search'\n        search_data = {'filterGroups': [{'filters': [{'propertyName': 'domain', 'operator': 'EQ', 'value': input_data.domain}]}]}\n        response = requests.post(search_url, headers=headers, json=search_data)\n        result = response.json()\n        yield ('company', result.get('results', [{}])[0])\n        yield ('status', 'retrieved')\n    elif input_data.operation == 'update':\n        search_response = requests.post(f'{base_url}/search', headers=headers, json={'filterGroups': [{'filters': [{'propertyName': 'domain', 'operator': 'EQ', 'value': input_data.domain}]}]})\n        company_id = search_response.json().get('results', [{}])[0].get('id')\n        if company_id:\n            response = requests.patch(f'{base_url}/{company_id}', headers=headers, json={'properties': input_data.company_data})\n            result = response.json()\n            yield ('company', result)\n            yield ('status', 'updated')\n        else:\n            yield ('company', {})\n            yield ('status', 'company_not_found')\nbase_url = 'https://api.hubapi.com/crm/v3/objects/companies'\nheaders = {'Authorization': f'Bearer {credentials.api_key.get_secret_value()}', 'Content-Type': 'application/json'}\ninput_data.operation Eq 'create'"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "response = requests.post(base_url, headers=headers, json={'properties': input_data.company_data})",
        "result = response.json()",
        "(yield ('company', result))",
        "(yield ('status', 'created'))"
      ],
      "code": "response = requests.post(base_url, headers=headers, json={'properties': input_data.company_data})\nresult = response.json()\n(yield ('company', result))\n(yield ('status', 'created'))"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [
        "input_data.operation Eq 'get'"
      ],
      "code": "input_data.operation Eq 'get'"
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n4",
      "type": "block",
      "statements": [
        "search_url = f'{base_url}/search'",
        "search_data = {'filterGroups': [{'filters': [{'propertyName': 'domain', 'operator': 'EQ', 'value': input_data.domain}]}]}",
        "response = requests.post(search_url, headers=headers, json=search_data)",
        "result = response.json()",
        "(yield ('company', result.get('results', [{}])[0]))",
        "(yield ('status', 'retrieved'))"
      ],
      "code": "search_url = f'{base_url}/search'\nsearch_data = {'filterGroups': [{'filters': [{'propertyName': 'domain', 'operator': 'EQ', 'value': input_data.domain}]}]}\nresponse = requests.post(search_url, headers=headers, json=search_data)\nresult = response.json()\n(yield ('company', result.get('results', [{}])[0]))\n(yield ('status', 'retrieved'))"
    },
    {
      "id": "n5",
      "type": "block",
      "statements": [
        "input_data.operation Eq 'update'"
      ],
      "code": "input_data.operation Eq 'update'"
    },
    {
      "id": "n6",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n7",
      "type": "block",
      "statements": [
        "search_response = requests.post(f'{base_url}/search', headers=headers, json={'filterGroups': [{'filters': [{'propertyName': 'domain', 'operator': 'EQ', 'value': input_data.domain}]}]})",
        "company_id = search_response.json().get('results', [{}])[0].get('id')",
        "company_id"
      ],
      "code": "search_response = requests.post(f'{base_url}/search', headers=headers, json={'filterGroups': [{'filters': [{'propertyName': 'domain', 'operator': 'EQ', 'value': input_data.domain}]}]})\ncompany_id = search_response.json().get('results', [{}])[0].get('id')\ncompany_id"
    },
    {
      "id": "n8",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n9",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n10",
      "type": "block",
      "statements": [
        "response = requests.patch(f'{base_url}/{company_id}', headers=headers, json={'properties': input_data.company_data})",
        "result = response.json()",
        "(yield ('company', result))",
        "(yield ('status', 'updated'))"
      ],
      "code": "response = requests.patch(f'{base_url}/{company_id}', headers=headers, json={'properties': input_data.company_data})\nresult = response.json()\n(yield ('company', result))\n(yield ('status', 'updated'))"
    },
    {
      "id": "n11",
      "type": "block",
      "statements": [
        "(yield ('company', {}))",
        "(yield ('status', 'company_not_found'))"
      ],
      "code": "(yield ('company', {}))\n(yield ('status', 'company_not_found'))"
    },
    {
      "id": "n12",
      "type": "block",
      "statements": [],
      "code": ""
    }
  ],
  "edges": [
    {
      "source": "n5",
      "target": "n8"
    },
    {
      "source": "n1",
      "target": "n3"
    },
    {
      "source": "n6",
      "target": "n3"
    },
    {
      "source": "n0",
      "target": "n1"
    },
    {
      "source": "n2",
      "target": "n4"
    },
    {
      "source": "n2",
      "target": "n5"
    },
    {
      "source": "n8",
      "target": "n9"
    },
    {
      "source": "n7",
      "target": "n11"
    },
    {
      "source": "n12",
      "target": "n9"
    },
    {
      "source": "n9",
      "target": "n6"
    },
    {
      "source": "n5",
      "target": "n7"
    },
    {
      "source": "n4",
      "target": "n6"
    },
    {
      "source": "n10",
      "target": "n12"
    },
    {
      "source": "n11",
      "target": "n12"
    },
    {
      "source": "n7",
      "target": "n10"
    },
    {
      "source": "n0",
      "target": "n2"
    }
  ]
}