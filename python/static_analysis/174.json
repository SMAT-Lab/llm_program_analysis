{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "from collections import deque",
        "from enum import Enum",
        "class State(Enum):\n    unvisited = 0\n    visited = 1",
        "unvisited = 0",
        "visited = 1",
        "class Graph(object):\n\n    def bfs(self, source, dest):\n        if source is None:\n            return False\n        queue = deque()\n        queue.append(source)\n        source.visit_state = State.visited\n        while queue:\n            node = queue.popleft()\n            print(node)\n            if dest is node:\n                return True\n            for adjacent_node in node.adj_nodes.values():\n                if adjacent_node.visit_state == State.unvisited:\n                    queue.append(adjacent_node)\n                    adjacent_node.visit_state = State.visited\n        return False",
        "def bfs(self, source, dest):\n    if source is None:\n        return False\n    queue = deque()\n    queue.append(source)\n    source.visit_state = State.visited\n    while queue:\n        node = queue.popleft()\n        print(node)\n        if dest is node:\n            return True\n        for adjacent_node in node.adj_nodes.values():\n            if adjacent_node.visit_state == State.unvisited:\n                queue.append(adjacent_node)\n                adjacent_node.visit_state = State.visited\n    return False",
        "source Is None"
      ],
      "code": "from collections import deque\nfrom enum import Enum\nclass State(Enum):\n    unvisited = 0\n    visited = 1\nunvisited = 0\nvisited = 1\nclass Graph(object):\n\n    def bfs(self, source, dest):\n        if source is None:\n            return False\n        queue = deque()\n        queue.append(source)\n        source.visit_state = State.visited\n        while queue:\n            node = queue.popleft()\n            print(node)\n            if dest is node:\n                return True\n            for adjacent_node in node.adj_nodes.values():\n                if adjacent_node.visit_state == State.unvisited:\n                    queue.append(adjacent_node)\n                    adjacent_node.visit_state = State.visited\n        return False\ndef bfs(self, source, dest):\n    if source is None:\n        return False\n    queue = deque()\n    queue.append(source)\n    source.visit_state = State.visited\n    while queue:\n        node = queue.popleft()\n        print(node)\n        if dest is node:\n            return True\n        for adjacent_node in node.adj_nodes.values():\n            if adjacent_node.visit_state == State.unvisited:\n                queue.append(adjacent_node)\n                adjacent_node.visit_state = State.visited\n    return False\nsource Is None"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "return False"
      ],
      "code": "return False"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [],
      "code": "\nqueue = deque()\nqueue.append(source)\nsource.visit_state = State.visited"
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [
        "queue"
      ],
      "code": "queue"
    },
    {
      "id": "n4",
      "type": "block",
      "statements": [
        "node = queue.popleft()",
        "print(node)",
        "dest Is node"
      ],
      "code": "node = queue.popleft()\nprint(node)\ndest Is node"
    },
    {
      "id": "n5",
      "type": "block",
      "statements": [
        "return False"
      ],
      "code": "return False"
    },
    {
      "id": "n6",
      "type": "block",
      "statements": [
        "return True"
      ],
      "code": "return True"
    },
    {
      "id": "n7",
      "type": "block",
      "statements": [],
      "code": "\n"
    },
    {
      "id": "n8",
      "type": "block",
      "statements": [
        "adjacent_node",
        "node.adj_nodes.values()"
      ],
      "code": "adjacent_node\nnode.adj_nodes.values()"
    },
    {
      "id": "n9",
      "type": "block",
      "statements": [
        "adjacent_node.visit_state Eq State.unvisited"
      ],
      "code": "adjacent_node.visit_state Eq State.unvisited"
    },
    {
      "id": "n10",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n11",
      "type": "block",
      "statements": [
        "queue.append(adjacent_node)",
        "adjacent_node.visit_state = State.visited"
      ],
      "code": "queue.append(adjacent_node)\nadjacent_node.visit_state = State.visited"
    },
    {
      "id": "n12",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n13",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n14",
      "type": "block",
      "statements": [
        "class Person(object):\n\n    def __init__(self, id, name):\n        self.id = id\n        self.name = name\n        self.friend_ids = []",
        "def __init__(self, id, name):\n    self.id = id\n    self.name = name\n    self.friend_ids = []",
        "self.id = id",
        "self.name = name",
        "self.friend_ids = []",
        "class LookupService(object):\n\n    def __init__(self):\n        self.lookup = {}\n\n    def get_person(self, person_id):\n        person_server = self.lookup[person_id]\n        return person_server.people[person_id]",
        "def __init__(self):\n    self.lookup = {}",
        "self.lookup = {}",
        "def get_person(self, person_id):\n    person_server = self.lookup[person_id]\n    return person_server.people[person_id]",
        "person_server = self.lookup[person_id]",
        "return person_server.people[person_id]"
      ],
      "code": "class Person(object):\n\n    def __init__(self, id, name):\n        self.id = id\n        self.name = name\n        self.friend_ids = []\ndef __init__(self, id, name):\n    self.id = id\n    self.name = name\n    self.friend_ids = []\nself.id = id\nself.name = name\nself.friend_ids = []\nclass LookupService(object):\n\n    def __init__(self):\n        self.lookup = {}\n\n    def get_person(self, person_id):\n        person_server = self.lookup[person_id]\n        return person_server.people[person_id]\ndef __init__(self):\n    self.lookup = {}\nself.lookup = {}\ndef get_person(self, person_id):\n    person_server = self.lookup[person_id]\n    return person_server.people[person_id]\nperson_server = self.lookup[person_id]\nreturn person_server.people[person_id]"
    },
    {
      "id": "n15",
      "type": "block",
      "statements": [
        "class PersonServer(object):\n\n    def __init__(self):\n        self.people = {}\n\n    def get_people(self, ids):\n        results = []\n        for id in ids:\n            if id in self.people:\n                results.append(self.people[id])\n        return results",
        "def __init__(self):\n    self.people = {}",
        "self.people = {}",
        "def get_people(self, ids):\n    results = []\n    for id in ids:\n        if id in self.people:\n            results.append(self.people[id])\n    return results",
        "results = []"
      ],
      "code": "class PersonServer(object):\n\n    def __init__(self):\n        self.people = {}\n\n    def get_people(self, ids):\n        results = []\n        for id in ids:\n            if id in self.people:\n                results.append(self.people[id])\n        return results\ndef __init__(self):\n    self.people = {}\nself.people = {}\ndef get_people(self, ids):\n    results = []\n    for id in ids:\n        if id in self.people:\n            results.append(self.people[id])\n    return results\nresults = []"
    },
    {
      "id": "n16",
      "type": "block",
      "statements": [
        "id",
        "ids"
      ],
      "code": "id\nids"
    },
    {
      "id": "n17",
      "type": "block",
      "statements": [
        "id In self.people"
      ],
      "code": "id In self.people"
    },
    {
      "id": "n18",
      "type": "block",
      "statements": [
        "return results"
      ],
      "code": "return results"
    },
    {
      "id": "n19",
      "type": "block",
      "statements": [
        "results.append(self.people[id])"
      ],
      "code": "results.append(self.people[id])"
    },
    {
      "id": "n20",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n21",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n22",
      "type": "block",
      "statements": [
        "class UserGraphService(object):\n\n    def __init__(self, person_ids, lookup):\n        self.lookup = lookup\n        self.person_ids = person_ids\n        self.visited_ids = set()\n\n    def bfs(self, source, dest):\n        pass",
        "def __init__(self, person_ids, lookup):\n    self.lookup = lookup\n    self.person_ids = person_ids\n    self.visited_ids = set()",
        "self.lookup = lookup",
        "self.person_ids = person_ids",
        "self.visited_ids = set()",
        "def bfs(self, source, dest):\n    pass",
        "pass"
      ],
      "code": "class UserGraphService(object):\n\n    def __init__(self, person_ids, lookup):\n        self.lookup = lookup\n        self.person_ids = person_ids\n        self.visited_ids = set()\n\n    def bfs(self, source, dest):\n        pass\ndef __init__(self, person_ids, lookup):\n    self.lookup = lookup\n    self.person_ids = person_ids\n    self.visited_ids = set()\nself.lookup = lookup\nself.person_ids = person_ids\nself.visited_ids = set()\ndef bfs(self, source, dest):\n    pass\npass"
    }
  ],
  "edges": [
    {
      "source": "n0",
      "target": "n1"
    },
    {
      "source": "n17",
      "target": "n19"
    },
    {
      "source": "n2",
      "target": "n3"
    },
    {
      "source": "n19",
      "target": "n21"
    },
    {
      "source": "n21",
      "target": "n16"
    },
    {
      "source": "n17",
      "target": "n20"
    },
    {
      "source": "n16",
      "target": "n17"
    },
    {
      "source": "n3",
      "target": "n4"
    },
    {
      "source": "n16",
      "target": "n18"
    },
    {
      "source": "n8",
      "target": "n9"
    },
    {
      "source": "n4",
      "target": "n6"
    },
    {
      "source": "n12",
      "target": "n13"
    },
    {
      "source": "n7",
      "target": "n8"
    },
    {
      "source": "n15",
      "target": "n16"
    },
    {
      "source": "n9",
      "target": "n11"
    },
    {
      "source": "n4",
      "target": "n7"
    },
    {
      "source": "n20",
      "target": "n21"
    },
    {
      "source": "n8",
      "target": "n10"
    },
    {
      "source": "n13",
      "target": "n8"
    },
    {
      "source": "n3",
      "target": "n5"
    },
    {
      "source": "n11",
      "target": "n13"
    },
    {
      "source": "n9",
      "target": "n12"
    },
    {
      "source": "n10",
      "target": "n3"
    },
    {
      "source": "n0",
      "target": "n2"
    }
  ]
}