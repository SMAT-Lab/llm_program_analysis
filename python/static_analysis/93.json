{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "def is_valid(puzzle: list[list[str]], word: str, row: int, col: int, vertical: bool) -> bool:\n    \"\"\"\n    Check if a word can be placed at the given position.\n\n    >>> puzzle = [\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', '']\n    ... ]\n    >>> is_valid(puzzle, 'word', 0, 0, True)\n    True\n    >>> puzzle = [\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', '']\n    ... ]\n    >>> is_valid(puzzle, 'word', 0, 0, False)\n    True\n    \"\"\"\n    for i in range(len(word)):\n        if vertical:\n            if row + i >= len(puzzle) or puzzle[row + i][col] != '':\n                return False\n        elif col + i >= len(puzzle[0]) or puzzle[row][col + i] != '':\n            return False\n    return True",
        "\"\\n    Check if a word can be placed at the given position.\\n\\n    >>> puzzle = [\\n    ...     ['', '', '', ''],\\n    ...     ['', '', '', ''],\\n    ...     ['', '', '', ''],\\n    ...     ['', '', '', '']\\n    ... ]\\n    >>> is_valid(puzzle, 'word', 0, 0, True)\\n    True\\n    >>> puzzle = [\\n    ...     ['', '', '', ''],\\n    ...     ['', '', '', ''],\\n    ...     ['', '', '', ''],\\n    ...     ['', '', '', '']\\n    ... ]\\n    >>> is_valid(puzzle, 'word', 0, 0, False)\\n    True\\n    \""
      ],
      "code": "def is_valid(puzzle: list[list[str]], word: str, row: int, col: int, vertical: bool) -> bool:\n    \"\"\"\n    Check if a word can be placed at the given position.\n\n    >>> puzzle = [\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', '']\n    ... ]\n    >>> is_valid(puzzle, 'word', 0, 0, True)\n    True\n    >>> puzzle = [\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', '']\n    ... ]\n    >>> is_valid(puzzle, 'word', 0, 0, False)\n    True\n    \"\"\"\n    for i in range(len(word)):\n        if vertical:\n            if row + i >= len(puzzle) or puzzle[row + i][col] != '':\n                return False\n        elif col + i >= len(puzzle[0]) or puzzle[row][col + i] != '':\n            return False\n    return True\n\"\\n    Check if a word can be placed at the given position.\\n\\n    >>> puzzle = [\\n    ...     ['', '', '', ''],\\n    ...     ['', '', '', ''],\\n    ...     ['', '', '', ''],\\n    ...     ['', '', '', '']\\n    ... ]\\n    >>> is_valid(puzzle, 'word', 0, 0, True)\\n    True\\n    >>> puzzle = [\\n    ...     ['', '', '', ''],\\n    ...     ['', '', '', ''],\\n    ...     ['', '', '', ''],\\n    ...     ['', '', '', '']\\n    ... ]\\n    >>> is_valid(puzzle, 'word', 0, 0, False)\\n    True\\n    \""
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "i",
        "range(len(word))"
      ],
      "code": "i\nrange(len(word))"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [
        "vertical"
      ],
      "code": "vertical"
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [
        "return True"
      ],
      "code": "return True"
    },
    {
      "id": "n4",
      "type": "block",
      "statements": [
        "row + i >= len(puzzle) or puzzle[row + i][col] != ''"
      ],
      "code": "row + i >= len(puzzle) or puzzle[row + i][col] != ''"
    },
    {
      "id": "n5",
      "type": "block",
      "statements": [
        "col + i >= len(puzzle[0]) or puzzle[row][col + i] != ''"
      ],
      "code": "col + i >= len(puzzle[0]) or puzzle[row][col + i] != ''"
    },
    {
      "id": "n6",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n7",
      "type": "block",
      "statements": [
        "return False"
      ],
      "code": "return False"
    },
    {
      "id": "n8",
      "type": "block",
      "statements": [],
      "code": "\n"
    },
    {
      "id": "n9",
      "type": "block",
      "statements": [
        "return False"
      ],
      "code": "return False"
    },
    {
      "id": "n10",
      "type": "block",
      "statements": [],
      "code": "\n"
    },
    {
      "id": "n11",
      "type": "block",
      "statements": [
        "def place_word(puzzle: list[list[str]], word: str, row: int, col: int, vertical: bool) -> None:\n    \"\"\"\n    Place a word at the given position.\n\n    >>> puzzle = [\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', '']\n    ... ]\n    >>> place_word(puzzle, 'word', 0, 0, True)\n    >>> puzzle\n    [['w', '', '', ''], ['o', '', '', ''], ['r', '', '', ''], ['d', '', '', '']]\n    \"\"\"\n    for (i, char) in enumerate(word):\n        if vertical:\n            puzzle[row + i][col] = char\n        else:\n            puzzle[row][col + i] = char",
        "\"\\n    Place a word at the given position.\\n\\n    >>> puzzle = [\\n    ...     ['', '', '', ''],\\n    ...     ['', '', '', ''],\\n    ...     ['', '', '', ''],\\n    ...     ['', '', '', '']\\n    ... ]\\n    >>> place_word(puzzle, 'word', 0, 0, True)\\n    >>> puzzle\\n    [['w', '', '', ''], ['o', '', '', ''], ['r', '', '', ''], ['d', '', '', '']]\\n    \""
      ],
      "code": "def place_word(puzzle: list[list[str]], word: str, row: int, col: int, vertical: bool) -> None:\n    \"\"\"\n    Place a word at the given position.\n\n    >>> puzzle = [\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', '']\n    ... ]\n    >>> place_word(puzzle, 'word', 0, 0, True)\n    >>> puzzle\n    [['w', '', '', ''], ['o', '', '', ''], ['r', '', '', ''], ['d', '', '', '']]\n    \"\"\"\n    for (i, char) in enumerate(word):\n        if vertical:\n            puzzle[row + i][col] = char\n        else:\n            puzzle[row][col + i] = char\n\"\\n    Place a word at the given position.\\n\\n    >>> puzzle = [\\n    ...     ['', '', '', ''],\\n    ...     ['', '', '', ''],\\n    ...     ['', '', '', ''],\\n    ...     ['', '', '', '']\\n    ... ]\\n    >>> place_word(puzzle, 'word', 0, 0, True)\\n    >>> puzzle\\n    [['w', '', '', ''], ['o', '', '', ''], ['r', '', '', ''], ['d', '', '', '']]\\n    \""
    },
    {
      "id": "n12",
      "type": "block",
      "statements": [
        "(i, char)",
        "enumerate(word)"
      ],
      "code": "(i, char)\nenumerate(word)"
    },
    {
      "id": "n13",
      "type": "block",
      "statements": [
        "vertical"
      ],
      "code": "vertical"
    },
    {
      "id": "n14",
      "type": "block",
      "statements": [
        "def remove_word(puzzle: list[list[str]], word: str, row: int, col: int, vertical: bool) -> None:\n    \"\"\"\n    Remove a word from the given position.\n\n    >>> puzzle = [\n    ...     ['w', '', '', ''],\n    ...     ['o', '', '', ''],\n    ...     ['r', '', '', ''],\n    ...     ['d', '', '', '']\n    ... ]\n    >>> remove_word(puzzle, 'word', 0, 0, True)\n    >>> puzzle\n    [['', '', '', ''], ['', '', '', ''], ['', '', '', ''], ['', '', '', '']]\n    \"\"\"\n    for i in range(len(word)):\n        if vertical:\n            puzzle[row + i][col] = ''\n        else:\n            puzzle[row][col + i] = ''",
        "\"\\n    Remove a word from the given position.\\n\\n    >>> puzzle = [\\n    ...     ['w', '', '', ''],\\n    ...     ['o', '', '', ''],\\n    ...     ['r', '', '', ''],\\n    ...     ['d', '', '', '']\\n    ... ]\\n    >>> remove_word(puzzle, 'word', 0, 0, True)\\n    >>> puzzle\\n    [['', '', '', ''], ['', '', '', ''], ['', '', '', ''], ['', '', '', '']]\\n    \""
      ],
      "code": "def remove_word(puzzle: list[list[str]], word: str, row: int, col: int, vertical: bool) -> None:\n    \"\"\"\n    Remove a word from the given position.\n\n    >>> puzzle = [\n    ...     ['w', '', '', ''],\n    ...     ['o', '', '', ''],\n    ...     ['r', '', '', ''],\n    ...     ['d', '', '', '']\n    ... ]\n    >>> remove_word(puzzle, 'word', 0, 0, True)\n    >>> puzzle\n    [['', '', '', ''], ['', '', '', ''], ['', '', '', ''], ['', '', '', '']]\n    \"\"\"\n    for i in range(len(word)):\n        if vertical:\n            puzzle[row + i][col] = ''\n        else:\n            puzzle[row][col + i] = ''\n\"\\n    Remove a word from the given position.\\n\\n    >>> puzzle = [\\n    ...     ['w', '', '', ''],\\n    ...     ['o', '', '', ''],\\n    ...     ['r', '', '', ''],\\n    ...     ['d', '', '', '']\\n    ... ]\\n    >>> remove_word(puzzle, 'word', 0, 0, True)\\n    >>> puzzle\\n    [['', '', '', ''], ['', '', '', ''], ['', '', '', ''], ['', '', '', '']]\\n    \""
    },
    {
      "id": "n15",
      "type": "block",
      "statements": [
        "puzzle[row + i][col] = char"
      ],
      "code": "puzzle[row + i][col] = char"
    },
    {
      "id": "n16",
      "type": "block",
      "statements": [
        "puzzle[row][col + i] = char"
      ],
      "code": "puzzle[row][col + i] = char"
    },
    {
      "id": "n17",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n18",
      "type": "block",
      "statements": [
        "i",
        "range(len(word))"
      ],
      "code": "i\nrange(len(word))"
    },
    {
      "id": "n19",
      "type": "block",
      "statements": [
        "vertical"
      ],
      "code": "vertical"
    },
    {
      "id": "n20",
      "type": "block",
      "statements": [
        "def solve_crossword(puzzle: list[list[str]], words: list[str]) -> bool:\n    \"\"\"\n    Solve the crossword puzzle using backtracking.\n\n    >>> puzzle = [\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', '']\n    ... ]\n\n    >>> words = ['word', 'four', 'more', 'last']\n    >>> solve_crossword(puzzle, words)\n    True\n    >>> puzzle = [\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', '']\n    ... ]\n    >>> words = ['word', 'four', 'more', 'paragraphs']\n    >>> solve_crossword(puzzle, words)\n    False\n    \"\"\"\n    for row in range(len(puzzle)):\n        for col in range(len(puzzle[0])):\n            if puzzle[row][col] == '':\n                for word in words:\n                    for vertical in [True, False]:\n                        if is_valid(puzzle, word, row, col, vertical):\n                            place_word(puzzle, word, row, col, vertical)\n                            words.remove(word)\n                            if solve_crossword(puzzle, words):\n                                return True\n                            words.append(word)\n                            remove_word(puzzle, word, row, col, vertical)\n                return False\n    return True",
        "\"\\n    Solve the crossword puzzle using backtracking.\\n\\n    >>> puzzle = [\\n    ...     ['', '', '', ''],\\n    ...     ['', '', '', ''],\\n    ...     ['', '', '', ''],\\n    ...     ['', '', '', '']\\n    ... ]\\n\\n    >>> words = ['word', 'four', 'more', 'last']\\n    >>> solve_crossword(puzzle, words)\\n    True\\n    >>> puzzle = [\\n    ...     ['', '', '', ''],\\n    ...     ['', '', '', ''],\\n    ...     ['', '', '', ''],\\n    ...     ['', '', '', '']\\n    ... ]\\n    >>> words = ['word', 'four', 'more', 'paragraphs']\\n    >>> solve_crossword(puzzle, words)\\n    False\\n    \""
      ],
      "code": "def solve_crossword(puzzle: list[list[str]], words: list[str]) -> bool:\n    \"\"\"\n    Solve the crossword puzzle using backtracking.\n\n    >>> puzzle = [\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', '']\n    ... ]\n\n    >>> words = ['word', 'four', 'more', 'last']\n    >>> solve_crossword(puzzle, words)\n    True\n    >>> puzzle = [\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', ''],\n    ...     ['', '', '', '']\n    ... ]\n    >>> words = ['word', 'four', 'more', 'paragraphs']\n    >>> solve_crossword(puzzle, words)\n    False\n    \"\"\"\n    for row in range(len(puzzle)):\n        for col in range(len(puzzle[0])):\n            if puzzle[row][col] == '':\n                for word in words:\n                    for vertical in [True, False]:\n                        if is_valid(puzzle, word, row, col, vertical):\n                            place_word(puzzle, word, row, col, vertical)\n                            words.remove(word)\n                            if solve_crossword(puzzle, words):\n                                return True\n                            words.append(word)\n                            remove_word(puzzle, word, row, col, vertical)\n                return False\n    return True\n\"\\n    Solve the crossword puzzle using backtracking.\\n\\n    >>> puzzle = [\\n    ...     ['', '', '', ''],\\n    ...     ['', '', '', ''],\\n    ...     ['', '', '', ''],\\n    ...     ['', '', '', '']\\n    ... ]\\n\\n    >>> words = ['word', 'four', 'more', 'last']\\n    >>> solve_crossword(puzzle, words)\\n    True\\n    >>> puzzle = [\\n    ...     ['', '', '', ''],\\n    ...     ['', '', '', ''],\\n    ...     ['', '', '', ''],\\n    ...     ['', '', '', '']\\n    ... ]\\n    >>> words = ['word', 'four', 'more', 'paragraphs']\\n    >>> solve_crossword(puzzle, words)\\n    False\\n    \""
    },
    {
      "id": "n21",
      "type": "block",
      "statements": [
        "puzzle[row + i][col] = ''"
      ],
      "code": "puzzle[row + i][col] = ''"
    },
    {
      "id": "n22",
      "type": "block",
      "statements": [
        "puzzle[row][col + i] = ''"
      ],
      "code": "puzzle[row][col + i] = ''"
    },
    {
      "id": "n23",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n24",
      "type": "block",
      "statements": [
        "row",
        "range(len(puzzle))"
      ],
      "code": "row\nrange(len(puzzle))"
    },
    {
      "id": "n25",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n26",
      "type": "block",
      "statements": [
        "return True"
      ],
      "code": "return True"
    },
    {
      "id": "n27",
      "type": "block",
      "statements": [
        "col",
        "range(len(puzzle[0]))"
      ],
      "code": "col\nrange(len(puzzle[0]))"
    },
    {
      "id": "n28",
      "type": "block",
      "statements": [
        "puzzle[row][col] Eq ''"
      ],
      "code": "puzzle[row][col] Eq ''"
    },
    {
      "id": "n29",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n30",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n31",
      "type": "block",
      "statements": [],
      "code": "\n"
    },
    {
      "id": "n32",
      "type": "block",
      "statements": [
        "word",
        "words"
      ],
      "code": "word\nwords"
    },
    {
      "id": "n33",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n34",
      "type": "block",
      "statements": [
        "return False"
      ],
      "code": "return False"
    },
    {
      "id": "n35",
      "type": "block",
      "statements": [
        "vertical",
        "[True, False]"
      ],
      "code": "vertical\n[True, False]"
    },
    {
      "id": "n36",
      "type": "block",
      "statements": [
        "is_valid(puzzle, word, row, col, vertical)"
      ],
      "code": "is_valid(puzzle, word, row, col, vertical)"
    },
    {
      "id": "n37",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n38",
      "type": "block",
      "statements": [
        "place_word(puzzle, word, row, col, vertical)",
        "words.remove(word)",
        "solve_crossword(puzzle, words)"
      ],
      "code": "place_word(puzzle, word, row, col, vertical)\nwords.remove(word)\nsolve_crossword(puzzle, words)"
    },
    {
      "id": "n39",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n40",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n41",
      "type": "block",
      "statements": [
        "return True"
      ],
      "code": "return True"
    },
    {
      "id": "n42",
      "type": "block",
      "statements": [],
      "code": "\nwords.append(word)\nremove_word(puzzle, word, row, col, vertical)"
    },
    {
      "id": "n43",
      "type": "block",
      "statements": [
        "__name__ Eq '__main__'"
      ],
      "code": "__name__ Eq '__main__'"
    },
    {
      "id": "n44",
      "type": "block",
      "statements": [
        "PUZZLE = [[''] * 3 for _ in range(3)]",
        "WORDS = ['cat', 'dog', 'car']",
        "solve_crossword(PUZZLE, WORDS)"
      ],
      "code": "PUZZLE = [[''] * 3 for _ in range(3)]\nWORDS = ['cat', 'dog', 'car']\nsolve_crossword(PUZZLE, WORDS)"
    },
    {
      "id": "n45",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n46",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n47",
      "type": "block",
      "statements": [
        "print('Solution found:')"
      ],
      "code": "print('Solution found:')"
    },
    {
      "id": "n48",
      "type": "block",
      "statements": [
        "print('No solution found:')"
      ],
      "code": "print('No solution found:')"
    },
    {
      "id": "n49",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n50",
      "type": "block",
      "statements": [
        "row",
        "PUZZLE"
      ],
      "code": "row\nPUZZLE"
    },
    {
      "id": "n51",
      "type": "block",
      "statements": [
        "print(' '.join(row))"
      ],
      "code": "print(' '.join(row))"
    },
    {
      "id": "n52",
      "type": "block",
      "statements": [],
      "code": ""
    }
  ],
  "edges": [
    {
      "source": "n52",
      "target": "n49"
    },
    {
      "source": "n5",
      "target": "n9"
    },
    {
      "source": "n0",
      "target": "n1"
    },
    {
      "source": "n6",
      "target": "n1"
    },
    {
      "source": "n49",
      "target": "n46"
    },
    {
      "source": "n8",
      "target": "n6"
    },
    {
      "source": "n42",
      "target": "n40"
    },
    {
      "source": "n14",
      "target": "n18"
    },
    {
      "source": "n37",
      "target": "n32"
    },
    {
      "source": "n50",
      "target": "n51"
    },
    {
      "source": "n22",
      "target": "n23"
    },
    {
      "source": "n51",
      "target": "n50"
    },
    {
      "source": "n35",
      "target": "n37"
    },
    {
      "source": "n19",
      "target": "n21"
    },
    {
      "source": "n35",
      "target": "n36"
    },
    {
      "source": "n2",
      "target": "n4"
    },
    {
      "source": "n16",
      "target": "n17"
    },
    {
      "source": "n13",
      "target": "n15"
    },
    {
      "source": "n30",
      "target": "n32"
    },
    {
      "source": "n1",
      "target": "n2"
    },
    {
      "source": "n33",
      "target": "n35"
    },
    {
      "source": "n31",
      "target": "n27"
    },
    {
      "source": "n4",
      "target": "n8"
    },
    {
      "source": "n12",
      "target": "n13"
    },
    {
      "source": "n24",
      "target": "n25"
    },
    {
      "source": "n50",
      "target": "n52"
    },
    {
      "source": "n21",
      "target": "n23"
    },
    {
      "source": "n36",
      "target": "n39"
    },
    {
      "source": "n38",
      "target": "n42"
    },
    {
      "source": "n43",
      "target": "n44"
    },
    {
      "source": "n5",
      "target": "n10"
    },
    {
      "source": "n12",
      "target": "n14"
    },
    {
      "source": "n19",
      "target": "n22"
    },
    {
      "source": "n44",
      "target": "n47"
    },
    {
      "source": "n10",
      "target": "n6"
    },
    {
      "source": "n4",
      "target": "n7"
    },
    {
      "source": "n40",
      "target": "n35"
    },
    {
      "source": "n17",
      "target": "n12"
    },
    {
      "source": "n36",
      "target": "n38"
    },
    {
      "source": "n32",
      "target": "n33"
    },
    {
      "source": "n28",
      "target": "n30"
    },
    {
      "source": "n44",
      "target": "n48"
    },
    {
      "source": "n45",
      "target": "n46"
    },
    {
      "source": "n11",
      "target": "n12"
    },
    {
      "source": "n18",
      "target": "n19"
    },
    {
      "source": "n29",
      "target": "n24"
    },
    {
      "source": "n18",
      "target": "n20"
    },
    {
      "source": "n27",
      "target": "n29"
    },
    {
      "source": "n1",
      "target": "n3"
    },
    {
      "source": "n24",
      "target": "n26"
    },
    {
      "source": "n43",
      "target": "n45"
    },
    {
      "source": "n27",
      "target": "n28"
    },
    {
      "source": "n47",
      "target": "n50"
    },
    {
      "source": "n2",
      "target": "n5"
    },
    {
      "source": "n13",
      "target": "n16"
    },
    {
      "source": "n38",
      "target": "n41"
    },
    {
      "source": "n25",
      "target": "n27"
    },
    {
      "source": "n39",
      "target": "n40"
    },
    {
      "source": "n20",
      "target": "n24"
    },
    {
      "source": "n32",
      "target": "n34"
    },
    {
      "source": "n28",
      "target": "n31"
    },
    {
      "source": "n23",
      "target": "n18"
    },
    {
      "source": "n48",
      "target": "n49"
    },
    {
      "source": "n15",
      "target": "n17"
    }
  ]
}