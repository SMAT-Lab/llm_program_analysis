{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "def find_previous_power_of_two(number: int) -> int:\n    \"\"\"\n    Find the largest power of two that is less than or equal to a given integer.\n    https://stackoverflow.com/questions/1322510\n\n    >>> [find_previous_power_of_two(i) for i in range(18)]\n    [0, 1, 2, 2, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 16, 16]\n    >>> find_previous_power_of_two(-5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    >>> find_previous_power_of_two(10.5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    \"\"\"\n    if not isinstance(number, int) or number < 0:\n        raise ValueError('Input must be a non-negative integer')\n    if number == 0:\n        return 0\n    power = 1\n    while power <= number:\n        power <<= 1\n    return power >> 1 if number > 1 else 1",
        "'\\n    Find the largest power of two that is less than or equal to a given integer.\\n    https://stackoverflow.com/questions/1322510\\n\\n    >>> [find_previous_power_of_two(i) for i in range(18)]\\n    [0, 1, 2, 2, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 16, 16]\\n    >>> find_previous_power_of_two(-5)\\n    Traceback (most recent call last):\\n        ...\\n    ValueError: Input must be a non-negative integer\\n    >>> find_previous_power_of_two(10.5)\\n    Traceback (most recent call last):\\n        ...\\n    ValueError: Input must be a non-negative integer\\n    '",
        "not isinstance(number, int) or number < 0"
      ],
      "code": "def find_previous_power_of_two(number: int) -> int:\n    \"\"\"\n    Find the largest power of two that is less than or equal to a given integer.\n    https://stackoverflow.com/questions/1322510\n\n    >>> [find_previous_power_of_two(i) for i in range(18)]\n    [0, 1, 2, 2, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 16, 16]\n    >>> find_previous_power_of_two(-5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    >>> find_previous_power_of_two(10.5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    \"\"\"\n    if not isinstance(number, int) or number < 0:\n        raise ValueError('Input must be a non-negative integer')\n    if number == 0:\n        return 0\n    power = 1\n    while power <= number:\n        power <<= 1\n    return power >> 1 if number > 1 else 1\n'\\n    Find the largest power of two that is less than or equal to a given integer.\\n    https://stackoverflow.com/questions/1322510\\n\\n    >>> [find_previous_power_of_two(i) for i in range(18)]\\n    [0, 1, 2, 2, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 16, 16]\\n    >>> find_previous_power_of_two(-5)\\n    Traceback (most recent call last):\\n        ...\\n    ValueError: Input must be a non-negative integer\\n    >>> find_previous_power_of_two(10.5)\\n    Traceback (most recent call last):\\n        ...\\n    ValueError: Input must be a non-negative integer\\n    '\nnot isinstance(number, int) or number < 0"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "raise ValueError('Input must be a non-negative integer')"
      ],
      "code": "raise ValueError('Input must be a non-negative integer')"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [
        "number Eq 0"
      ],
      "code": "number Eq 0"
    },
    {
      "id": "n4",
      "type": "block",
      "statements": [
        "return 0"
      ],
      "code": "return 0"
    },
    {
      "id": "n5",
      "type": "block",
      "statements": [],
      "code": "\npower = 1"
    },
    {
      "id": "n6",
      "type": "block",
      "statements": [
        "power LtE number"
      ],
      "code": "power LtE number"
    },
    {
      "id": "n7",
      "type": "block",
      "statements": [
        "power <<= 1"
      ],
      "code": "power <<= 1"
    },
    {
      "id": "n8",
      "type": "block",
      "statements": [
        "return power >> 1 if number > 1 else 1"
      ],
      "code": "return power >> 1 if number > 1 else 1"
    },
    {
      "id": "n9",
      "type": "block",
      "statements": [
        "__name__ Eq '__main__'"
      ],
      "code": "__name__ Eq '__main__'"
    },
    {
      "id": "n10",
      "type": "block",
      "statements": [
        "import doctest",
        "doctest.testmod()"
      ],
      "code": "import doctest\ndoctest.testmod()"
    },
    {
      "id": "n11",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n12",
      "type": "block",
      "statements": [],
      "code": ""
    }
  ],
  "edges": [
    {
      "source": "n7",
      "target": "n6"
    },
    {
      "source": "n5",
      "target": "n6"
    },
    {
      "source": "n9",
      "target": "n11"
    },
    {
      "source": "n6",
      "target": "n7"
    },
    {
      "source": "n1",
      "target": "n3"
    },
    {
      "source": "n0",
      "target": "n2"
    },
    {
      "source": "n0",
      "target": "n1"
    },
    {
      "source": "n3",
      "target": "n4"
    },
    {
      "source": "n3",
      "target": "n5"
    },
    {
      "source": "n9",
      "target": "n10"
    },
    {
      "source": "n10",
      "target": "n12"
    },
    {
      "source": "n11",
      "target": "n12"
    },
    {
      "source": "n6",
      "target": "n8"
    },
    {
      "source": "n2",
      "target": "n3"
    }
  ]
}