{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "import logging",
        "import uuid",
        "from datetime import datetime, timezone",
        "from typing import List, Optional",
        "from autogpt_libs.api_key.key_manager import APIKeyManager",
        "from prisma.enums import APIKeyPermission, APIKeyStatus",
        "from prisma.errors import PrismaError",
        "from prisma.models import APIKey as PrismaAPIKey",
        "from prisma.types import APIKeyCreateInput, APIKeyUpdateInput, APIKeyWhereInput, APIKeyWhereUniqueInput",
        "from pydantic import BaseModel",
        "from backend.data.db import BaseDbModel",
        "logger = logging.getLogger(__name__)",
        "class APIKeyError(Exception):\n    \"\"\"Base exception for API key operations\"\"\"\n    pass",
        "'Base exception for API key operations'",
        "pass",
        "class APIKeyNotFoundError(APIKeyError):\n    \"\"\"Raised when an API key is not found\"\"\"\n    pass",
        "'Raised when an API key is not found'",
        "pass",
        "class APIKeyPermissionError(APIKeyError):\n    \"\"\"Raised when there are permission issues with API key operations\"\"\"\n    pass",
        "'Raised when there are permission issues with API key operations'",
        "pass",
        "class APIKeyValidationError(APIKeyError):\n    \"\"\"Raised when API key validation fails\"\"\"\n    pass",
        "'Raised when API key validation fails'",
        "pass",
        "class APIKey(BaseDbModel):\n    name: str\n    prefix: str\n    key: str\n    status: APIKeyStatus = APIKeyStatus.ACTIVE\n    permissions: List[APIKeyPermission]\n    postfix: str\n    created_at: datetime\n    last_used_at: Optional[datetime] = None\n    revoked_at: Optional[datetime] = None\n    description: Optional[str] = None\n    user_id: str\n\n    @staticmethod\n    def from_db(api_key: PrismaAPIKey):\n        try:\n            return APIKey(id=api_key.id, name=api_key.name, prefix=api_key.prefix, postfix=api_key.postfix, key=api_key.key, status=APIKeyStatus(api_key.status), permissions=[APIKeyPermission(p) for p in api_key.permissions], created_at=api_key.createdAt, last_used_at=api_key.lastUsedAt, revoked_at=api_key.revokedAt, description=api_key.description, user_id=api_key.userId)\n        except Exception as e:\n            logger.error(f'Error creating APIKey from db: {str(e)}')\n            raise APIKeyError(f'Failed to create API key object: {str(e)}')",
        "name: str",
        "prefix: str",
        "key: str",
        "status: APIKeyStatus = APIKeyStatus.ACTIVE",
        "permissions: List[APIKeyPermission]",
        "postfix: str",
        "created_at: datetime",
        "last_used_at: Optional[datetime] = None",
        "revoked_at: Optional[datetime] = None",
        "description: Optional[str] = None",
        "user_id: str",
        "@staticmethod\ndef from_db(api_key: PrismaAPIKey):\n    try:\n        return APIKey(id=api_key.id, name=api_key.name, prefix=api_key.prefix, postfix=api_key.postfix, key=api_key.key, status=APIKeyStatus(api_key.status), permissions=[APIKeyPermission(p) for p in api_key.permissions], created_at=api_key.createdAt, last_used_at=api_key.lastUsedAt, revoked_at=api_key.revokedAt, description=api_key.description, user_id=api_key.userId)\n    except Exception as e:\n        logger.error(f'Error creating APIKey from db: {str(e)}')\n        raise APIKeyError(f'Failed to create API key object: {str(e)}')",
        "try:\n    return APIKey(id=api_key.id, name=api_key.name, prefix=api_key.prefix, postfix=api_key.postfix, key=api_key.key, status=APIKeyStatus(api_key.status), permissions=[APIKeyPermission(p) for p in api_key.permissions], created_at=api_key.createdAt, last_used_at=api_key.lastUsedAt, revoked_at=api_key.revokedAt, description=api_key.description, user_id=api_key.userId)\nexcept Exception as e:\n    logger.error(f'Error creating APIKey from db: {str(e)}')\n    raise APIKeyError(f'Failed to create API key object: {str(e)}')",
        "return APIKey(id=api_key.id, name=api_key.name, prefix=api_key.prefix, postfix=api_key.postfix, key=api_key.key, status=APIKeyStatus(api_key.status), permissions=[APIKeyPermission(p) for p in api_key.permissions], created_at=api_key.createdAt, last_used_at=api_key.lastUsedAt, revoked_at=api_key.revokedAt, description=api_key.description, user_id=api_key.userId)"
      ],
      "code": "import logging\nimport uuid\nfrom datetime import datetime, timezone\nfrom typing import List, Optional\nfrom autogpt_libs.api_key.key_manager import APIKeyManager\nfrom prisma.enums import APIKeyPermission, APIKeyStatus\nfrom prisma.errors import PrismaError\nfrom prisma.models import APIKey as PrismaAPIKey\nfrom prisma.types import APIKeyCreateInput, APIKeyUpdateInput, APIKeyWhereInput, APIKeyWhereUniqueInput\nfrom pydantic import BaseModel\nfrom backend.data.db import BaseDbModel\nlogger = logging.getLogger(__name__)\nclass APIKeyError(Exception):\n    \"\"\"Base exception for API key operations\"\"\"\n    pass\n'Base exception for API key operations'\npass\nclass APIKeyNotFoundError(APIKeyError):\n    \"\"\"Raised when an API key is not found\"\"\"\n    pass\n'Raised when an API key is not found'\npass\nclass APIKeyPermissionError(APIKeyError):\n    \"\"\"Raised when there are permission issues with API key operations\"\"\"\n    pass\n'Raised when there are permission issues with API key operations'\npass\nclass APIKeyValidationError(APIKeyError):\n    \"\"\"Raised when API key validation fails\"\"\"\n    pass\n'Raised when API key validation fails'\npass\nclass APIKey(BaseDbModel):\n    name: str\n    prefix: str\n    key: str\n    status: APIKeyStatus = APIKeyStatus.ACTIVE\n    permissions: List[APIKeyPermission]\n    postfix: str\n    created_at: datetime\n    last_used_at: Optional[datetime] = None\n    revoked_at: Optional[datetime] = None\n    description: Optional[str] = None\n    user_id: str\n\n    @staticmethod\n    def from_db(api_key: PrismaAPIKey):\n        try:\n            return APIKey(id=api_key.id, name=api_key.name, prefix=api_key.prefix, postfix=api_key.postfix, key=api_key.key, status=APIKeyStatus(api_key.status), permissions=[APIKeyPermission(p) for p in api_key.permissions], created_at=api_key.createdAt, last_used_at=api_key.lastUsedAt, revoked_at=api_key.revokedAt, description=api_key.description, user_id=api_key.userId)\n        except Exception as e:\n            logger.error(f'Error creating APIKey from db: {str(e)}')\n            raise APIKeyError(f'Failed to create API key object: {str(e)}')\nname: str\nprefix: str\nkey: str\nstatus: APIKeyStatus = APIKeyStatus.ACTIVE\npermissions: List[APIKeyPermission]\npostfix: str\ncreated_at: datetime\nlast_used_at: Optional[datetime] = None\nrevoked_at: Optional[datetime] = None\ndescription: Optional[str] = None\nuser_id: str\n@staticmethod\ndef from_db(api_key: PrismaAPIKey):\n    try:\n        return APIKey(id=api_key.id, name=api_key.name, prefix=api_key.prefix, postfix=api_key.postfix, key=api_key.key, status=APIKeyStatus(api_key.status), permissions=[APIKeyPermission(p) for p in api_key.permissions], created_at=api_key.createdAt, last_used_at=api_key.lastUsedAt, revoked_at=api_key.revokedAt, description=api_key.description, user_id=api_key.userId)\n    except Exception as e:\n        logger.error(f'Error creating APIKey from db: {str(e)}')\n        raise APIKeyError(f'Failed to create API key object: {str(e)}')\ntry:\n    return APIKey(id=api_key.id, name=api_key.name, prefix=api_key.prefix, postfix=api_key.postfix, key=api_key.key, status=APIKeyStatus(api_key.status), permissions=[APIKeyPermission(p) for p in api_key.permissions], created_at=api_key.createdAt, last_used_at=api_key.lastUsedAt, revoked_at=api_key.revokedAt, description=api_key.description, user_id=api_key.userId)\nexcept Exception as e:\n    logger.error(f'Error creating APIKey from db: {str(e)}')\n    raise APIKeyError(f'Failed to create API key object: {str(e)}')\nreturn APIKey(id=api_key.id, name=api_key.name, prefix=api_key.prefix, postfix=api_key.postfix, key=api_key.key, status=APIKeyStatus(api_key.status), permissions=[APIKeyPermission(p) for p in api_key.permissions], created_at=api_key.createdAt, last_used_at=api_key.lastUsedAt, revoked_at=api_key.revokedAt, description=api_key.description, user_id=api_key.userId)"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "logger.error(f'Error creating APIKey from db: {str(e)}')",
        "raise APIKeyError(f'Failed to create API key object: {str(e)}')",
        "class APIKeyWithoutHash(BaseModel):\n    id: str\n    name: str\n    prefix: str\n    postfix: str\n    status: APIKeyStatus\n    permissions: List[APIKeyPermission]\n    created_at: datetime\n    last_used_at: Optional[datetime]\n    revoked_at: Optional[datetime]\n    description: Optional[str]\n    user_id: str\n\n    @staticmethod\n    def from_db(api_key: PrismaAPIKey):\n        try:\n            return APIKeyWithoutHash(id=api_key.id, name=api_key.name, prefix=api_key.prefix, postfix=api_key.postfix, status=APIKeyStatus(api_key.status), permissions=[APIKeyPermission(p) for p in api_key.permissions], created_at=api_key.createdAt, last_used_at=api_key.lastUsedAt, revoked_at=api_key.revokedAt, description=api_key.description, user_id=api_key.userId)\n        except Exception as e:\n            logger.error(f'Error creating APIKeyWithoutHash from db: {str(e)}')\n            raise APIKeyError(f'Failed to create API key object: {str(e)}')",
        "id: str",
        "name: str",
        "prefix: str",
        "postfix: str",
        "status: APIKeyStatus",
        "permissions: List[APIKeyPermission]",
        "created_at: datetime",
        "last_used_at: Optional[datetime]",
        "revoked_at: Optional[datetime]",
        "description: Optional[str]",
        "user_id: str",
        "@staticmethod\ndef from_db(api_key: PrismaAPIKey):\n    try:\n        return APIKeyWithoutHash(id=api_key.id, name=api_key.name, prefix=api_key.prefix, postfix=api_key.postfix, status=APIKeyStatus(api_key.status), permissions=[APIKeyPermission(p) for p in api_key.permissions], created_at=api_key.createdAt, last_used_at=api_key.lastUsedAt, revoked_at=api_key.revokedAt, description=api_key.description, user_id=api_key.userId)\n    except Exception as e:\n        logger.error(f'Error creating APIKeyWithoutHash from db: {str(e)}')\n        raise APIKeyError(f'Failed to create API key object: {str(e)}')",
        "try:\n    return APIKeyWithoutHash(id=api_key.id, name=api_key.name, prefix=api_key.prefix, postfix=api_key.postfix, status=APIKeyStatus(api_key.status), permissions=[APIKeyPermission(p) for p in api_key.permissions], created_at=api_key.createdAt, last_used_at=api_key.lastUsedAt, revoked_at=api_key.revokedAt, description=api_key.description, user_id=api_key.userId)\nexcept Exception as e:\n    logger.error(f'Error creating APIKeyWithoutHash from db: {str(e)}')\n    raise APIKeyError(f'Failed to create API key object: {str(e)}')",
        "return APIKeyWithoutHash(id=api_key.id, name=api_key.name, prefix=api_key.prefix, postfix=api_key.postfix, status=APIKeyStatus(api_key.status), permissions=[APIKeyPermission(p) for p in api_key.permissions], created_at=api_key.createdAt, last_used_at=api_key.lastUsedAt, revoked_at=api_key.revokedAt, description=api_key.description, user_id=api_key.userId)"
      ],
      "code": "logger.error(f'Error creating APIKey from db: {str(e)}')\nraise APIKeyError(f'Failed to create API key object: {str(e)}')\nclass APIKeyWithoutHash(BaseModel):\n    id: str\n    name: str\n    prefix: str\n    postfix: str\n    status: APIKeyStatus\n    permissions: List[APIKeyPermission]\n    created_at: datetime\n    last_used_at: Optional[datetime]\n    revoked_at: Optional[datetime]\n    description: Optional[str]\n    user_id: str\n\n    @staticmethod\n    def from_db(api_key: PrismaAPIKey):\n        try:\n            return APIKeyWithoutHash(id=api_key.id, name=api_key.name, prefix=api_key.prefix, postfix=api_key.postfix, status=APIKeyStatus(api_key.status), permissions=[APIKeyPermission(p) for p in api_key.permissions], created_at=api_key.createdAt, last_used_at=api_key.lastUsedAt, revoked_at=api_key.revokedAt, description=api_key.description, user_id=api_key.userId)\n        except Exception as e:\n            logger.error(f'Error creating APIKeyWithoutHash from db: {str(e)}')\n            raise APIKeyError(f'Failed to create API key object: {str(e)}')\nid: str\nname: str\nprefix: str\npostfix: str\nstatus: APIKeyStatus\npermissions: List[APIKeyPermission]\ncreated_at: datetime\nlast_used_at: Optional[datetime]\nrevoked_at: Optional[datetime]\ndescription: Optional[str]\nuser_id: str\n@staticmethod\ndef from_db(api_key: PrismaAPIKey):\n    try:\n        return APIKeyWithoutHash(id=api_key.id, name=api_key.name, prefix=api_key.prefix, postfix=api_key.postfix, status=APIKeyStatus(api_key.status), permissions=[APIKeyPermission(p) for p in api_key.permissions], created_at=api_key.createdAt, last_used_at=api_key.lastUsedAt, revoked_at=api_key.revokedAt, description=api_key.description, user_id=api_key.userId)\n    except Exception as e:\n        logger.error(f'Error creating APIKeyWithoutHash from db: {str(e)}')\n        raise APIKeyError(f'Failed to create API key object: {str(e)}')\ntry:\n    return APIKeyWithoutHash(id=api_key.id, name=api_key.name, prefix=api_key.prefix, postfix=api_key.postfix, status=APIKeyStatus(api_key.status), permissions=[APIKeyPermission(p) for p in api_key.permissions], created_at=api_key.createdAt, last_used_at=api_key.lastUsedAt, revoked_at=api_key.revokedAt, description=api_key.description, user_id=api_key.userId)\nexcept Exception as e:\n    logger.error(f'Error creating APIKeyWithoutHash from db: {str(e)}')\n    raise APIKeyError(f'Failed to create API key object: {str(e)}')\nreturn APIKeyWithoutHash(id=api_key.id, name=api_key.name, prefix=api_key.prefix, postfix=api_key.postfix, status=APIKeyStatus(api_key.status), permissions=[APIKeyPermission(p) for p in api_key.permissions], created_at=api_key.createdAt, last_used_at=api_key.lastUsedAt, revoked_at=api_key.revokedAt, description=api_key.description, user_id=api_key.userId)"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [
        "logger.error(f'Error creating APIKeyWithoutHash from db: {str(e)}')",
        "raise APIKeyError(f'Failed to create API key object: {str(e)}')",
        "async def generate_api_key(name: str, user_id: str, permissions: List[APIKeyPermission], description: Optional[str]=None) -> tuple[APIKeyWithoutHash, str]:\n    \"\"\"\n    Generate a new API key and store it in the database.\n    Returns the API key object (without hash) and the plain text key.\n    \"\"\"\n    try:\n        api_manager = APIKeyManager()\n        key = api_manager.generate_api_key()\n        api_key = await PrismaAPIKey.prisma().create(data=APIKeyCreateInput(id=str(uuid.uuid4()), name=name, prefix=key.prefix, postfix=key.postfix, key=key.hash, permissions=[p for p in permissions], description=description, userId=user_id))\n        api_key_without_hash = APIKeyWithoutHash.from_db(api_key)\n        return (api_key_without_hash, key.raw)\n    except PrismaError as e:\n        logger.error(f'Database error while generating API key: {str(e)}')\n        raise APIKeyError(f'Failed to generate API key: {str(e)}')\n    except Exception as e:\n        logger.error(f'Unexpected error while generating API key: {str(e)}')\n        raise APIKeyError(f'Failed to generate API key: {str(e)}')",
        "'\\n    Generate a new API key and store it in the database.\\n    Returns the API key object (without hash) and the plain text key.\\n    '",
        "try:\n    api_manager = APIKeyManager()\n    key = api_manager.generate_api_key()\n    api_key = await PrismaAPIKey.prisma().create(data=APIKeyCreateInput(id=str(uuid.uuid4()), name=name, prefix=key.prefix, postfix=key.postfix, key=key.hash, permissions=[p for p in permissions], description=description, userId=user_id))\n    api_key_without_hash = APIKeyWithoutHash.from_db(api_key)\n    return (api_key_without_hash, key.raw)\nexcept PrismaError as e:\n    logger.error(f'Database error while generating API key: {str(e)}')\n    raise APIKeyError(f'Failed to generate API key: {str(e)}')\nexcept Exception as e:\n    logger.error(f'Unexpected error while generating API key: {str(e)}')\n    raise APIKeyError(f'Failed to generate API key: {str(e)}')",
        "api_manager = APIKeyManager()",
        "key = api_manager.generate_api_key()",
        "api_key = await PrismaAPIKey.prisma().create(data=APIKeyCreateInput(id=str(uuid.uuid4()), name=name, prefix=key.prefix, postfix=key.postfix, key=key.hash, permissions=[p for p in permissions], description=description, userId=user_id))",
        "api_key_without_hash = APIKeyWithoutHash.from_db(api_key)",
        "return (api_key_without_hash, key.raw)"
      ],
      "code": "logger.error(f'Error creating APIKeyWithoutHash from db: {str(e)}')\nraise APIKeyError(f'Failed to create API key object: {str(e)}')\nasync def generate_api_key(name: str, user_id: str, permissions: List[APIKeyPermission], description: Optional[str]=None) -> tuple[APIKeyWithoutHash, str]:\n    \"\"\"\n    Generate a new API key and store it in the database.\n    Returns the API key object (without hash) and the plain text key.\n    \"\"\"\n    try:\n        api_manager = APIKeyManager()\n        key = api_manager.generate_api_key()\n        api_key = await PrismaAPIKey.prisma().create(data=APIKeyCreateInput(id=str(uuid.uuid4()), name=name, prefix=key.prefix, postfix=key.postfix, key=key.hash, permissions=[p for p in permissions], description=description, userId=user_id))\n        api_key_without_hash = APIKeyWithoutHash.from_db(api_key)\n        return (api_key_without_hash, key.raw)\n    except PrismaError as e:\n        logger.error(f'Database error while generating API key: {str(e)}')\n        raise APIKeyError(f'Failed to generate API key: {str(e)}')\n    except Exception as e:\n        logger.error(f'Unexpected error while generating API key: {str(e)}')\n        raise APIKeyError(f'Failed to generate API key: {str(e)}')\n'\\n    Generate a new API key and store it in the database.\\n    Returns the API key object (without hash) and the plain text key.\\n    '\ntry:\n    api_manager = APIKeyManager()\n    key = api_manager.generate_api_key()\n    api_key = await PrismaAPIKey.prisma().create(data=APIKeyCreateInput(id=str(uuid.uuid4()), name=name, prefix=key.prefix, postfix=key.postfix, key=key.hash, permissions=[p for p in permissions], description=description, userId=user_id))\n    api_key_without_hash = APIKeyWithoutHash.from_db(api_key)\n    return (api_key_without_hash, key.raw)\nexcept PrismaError as e:\n    logger.error(f'Database error while generating API key: {str(e)}')\n    raise APIKeyError(f'Failed to generate API key: {str(e)}')\nexcept Exception as e:\n    logger.error(f'Unexpected error while generating API key: {str(e)}')\n    raise APIKeyError(f'Failed to generate API key: {str(e)}')\napi_manager = APIKeyManager()\nkey = api_manager.generate_api_key()\napi_key = await PrismaAPIKey.prisma().create(data=APIKeyCreateInput(id=str(uuid.uuid4()), name=name, prefix=key.prefix, postfix=key.postfix, key=key.hash, permissions=[p for p in permissions], description=description, userId=user_id))\napi_key_without_hash = APIKeyWithoutHash.from_db(api_key)\nreturn (api_key_without_hash, key.raw)"
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [
        "logger.error(f'Database error while generating API key: {str(e)}')",
        "raise APIKeyError(f'Failed to generate API key: {str(e)}')",
        "logger.error(f'Unexpected error while generating API key: {str(e)}')",
        "raise APIKeyError(f'Failed to generate API key: {str(e)}')",
        "async def validate_api_key(plain_text_key: str) -> Optional[APIKey]:\n    \"\"\"\n    Validate an API key and return the API key object if valid.\n    \"\"\"\n    try:\n        if not plain_text_key.startswith(APIKeyManager.PREFIX):\n            logger.warning('Invalid API key format')\n            return None\n        prefix = plain_text_key[:APIKeyManager.PREFIX_LENGTH]\n        api_manager = APIKeyManager()\n        api_key = await PrismaAPIKey.prisma().find_first(where=APIKeyWhereInput(prefix=prefix, status=APIKeyStatus.ACTIVE))\n        if not api_key:\n            logger.warning(f'No active API key found with prefix {prefix}')\n            return None\n        is_valid = api_manager.verify_api_key(plain_text_key, api_key.key)\n        if not is_valid:\n            logger.warning('API key verification failed')\n            return None\n        return APIKey.from_db(api_key)\n    except Exception as e:\n        logger.error(f'Error validating API key: {str(e)}')\n        raise APIKeyValidationError(f'Failed to validate API key: {str(e)}')",
        "'\\n    Validate an API key and return the API key object if valid.\\n    '",
        "try:\n    if not plain_text_key.startswith(APIKeyManager.PREFIX):\n        logger.warning('Invalid API key format')\n        return None\n    prefix = plain_text_key[:APIKeyManager.PREFIX_LENGTH]\n    api_manager = APIKeyManager()\n    api_key = await PrismaAPIKey.prisma().find_first(where=APIKeyWhereInput(prefix=prefix, status=APIKeyStatus.ACTIVE))\n    if not api_key:\n        logger.warning(f'No active API key found with prefix {prefix}')\n        return None\n    is_valid = api_manager.verify_api_key(plain_text_key, api_key.key)\n    if not is_valid:\n        logger.warning('API key verification failed')\n        return None\n    return APIKey.from_db(api_key)\nexcept Exception as e:\n    logger.error(f'Error validating API key: {str(e)}')\n    raise APIKeyValidationError(f'Failed to validate API key: {str(e)}')",
        "not plain_text_key.startswith(APIKeyManager.PREFIX)"
      ],
      "code": "logger.error(f'Database error while generating API key: {str(e)}')\nraise APIKeyError(f'Failed to generate API key: {str(e)}')\nlogger.error(f'Unexpected error while generating API key: {str(e)}')\nraise APIKeyError(f'Failed to generate API key: {str(e)}')\nasync def validate_api_key(plain_text_key: str) -> Optional[APIKey]:\n    \"\"\"\n    Validate an API key and return the API key object if valid.\n    \"\"\"\n    try:\n        if not plain_text_key.startswith(APIKeyManager.PREFIX):\n            logger.warning('Invalid API key format')\n            return None\n        prefix = plain_text_key[:APIKeyManager.PREFIX_LENGTH]\n        api_manager = APIKeyManager()\n        api_key = await PrismaAPIKey.prisma().find_first(where=APIKeyWhereInput(prefix=prefix, status=APIKeyStatus.ACTIVE))\n        if not api_key:\n            logger.warning(f'No active API key found with prefix {prefix}')\n            return None\n        is_valid = api_manager.verify_api_key(plain_text_key, api_key.key)\n        if not is_valid:\n            logger.warning('API key verification failed')\n            return None\n        return APIKey.from_db(api_key)\n    except Exception as e:\n        logger.error(f'Error validating API key: {str(e)}')\n        raise APIKeyValidationError(f'Failed to validate API key: {str(e)}')\n'\\n    Validate an API key and return the API key object if valid.\\n    '\ntry:\n    if not plain_text_key.startswith(APIKeyManager.PREFIX):\n        logger.warning('Invalid API key format')\n        return None\n    prefix = plain_text_key[:APIKeyManager.PREFIX_LENGTH]\n    api_manager = APIKeyManager()\n    api_key = await PrismaAPIKey.prisma().find_first(where=APIKeyWhereInput(prefix=prefix, status=APIKeyStatus.ACTIVE))\n    if not api_key:\n        logger.warning(f'No active API key found with prefix {prefix}')\n        return None\n    is_valid = api_manager.verify_api_key(plain_text_key, api_key.key)\n    if not is_valid:\n        logger.warning('API key verification failed')\n        return None\n    return APIKey.from_db(api_key)\nexcept Exception as e:\n    logger.error(f'Error validating API key: {str(e)}')\n    raise APIKeyValidationError(f'Failed to validate API key: {str(e)}')\nnot plain_text_key.startswith(APIKeyManager.PREFIX)"
    },
    {
      "id": "n4",
      "type": "block",
      "statements": [
        "logger.warning('Invalid API key format')",
        "return None"
      ],
      "code": "logger.warning('Invalid API key format')\nreturn None"
    },
    {
      "id": "n5",
      "type": "block",
      "statements": [],
      "code": "\nprefix = plain_text_key[:APIKeyManager.PREFIX_LENGTH]\napi_manager = APIKeyManager()\napi_key = await PrismaAPIKey.prisma().find_first(where=APIKeyWhereInput(prefix=prefix, status=APIKeyStatus.ACTIVE))\nnot api_key"
    },
    {
      "id": "n6",
      "type": "block",
      "statements": [
        "logger.warning(f'No active API key found with prefix {prefix}')",
        "return None"
      ],
      "code": "logger.warning(f'No active API key found with prefix {prefix}')\nreturn None"
    },
    {
      "id": "n7",
      "type": "block",
      "statements": [],
      "code": "\nis_valid = api_manager.verify_api_key(plain_text_key, api_key.key)\nnot is_valid"
    },
    {
      "id": "n8",
      "type": "block",
      "statements": [
        "logger.warning('API key verification failed')",
        "return None"
      ],
      "code": "logger.warning('API key verification failed')\nreturn None"
    },
    {
      "id": "n9",
      "type": "block",
      "statements": [],
      "code": "\nreturn APIKey.from_db(api_key)"
    },
    {
      "id": "n10",
      "type": "block",
      "statements": [
        "logger.error(f'Error validating API key: {str(e)}')",
        "raise APIKeyValidationError(f'Failed to validate API key: {str(e)}')",
        "async def revoke_api_key(key_id: str, user_id: str) -> Optional[APIKeyWithoutHash]:\n    try:\n        api_key = await PrismaAPIKey.prisma().find_unique(where={'id': key_id})\n        if not api_key:\n            raise APIKeyNotFoundError(f'API key with id {key_id} not found')\n        if api_key.userId != user_id:\n            raise APIKeyPermissionError('You do not have permission to revoke this API key.')\n        where_clause: APIKeyWhereUniqueInput = {'id': key_id}\n        updated_api_key = await PrismaAPIKey.prisma().update(where=where_clause, data=APIKeyUpdateInput(status=APIKeyStatus.REVOKED, revokedAt=datetime.now(timezone.utc)))\n        if updated_api_key:\n            return APIKeyWithoutHash.from_db(updated_api_key)\n        return None\n    except (APIKeyNotFoundError, APIKeyPermissionError) as e:\n        raise e\n    except PrismaError as e:\n        logger.error(f'Database error while revoking API key: {str(e)}')\n        raise APIKeyError(f'Failed to revoke API key: {str(e)}')\n    except Exception as e:\n        logger.error(f'Unexpected error while revoking API key: {str(e)}')\n        raise APIKeyError(f'Failed to revoke API key: {str(e)}')",
        "try:\n    api_key = await PrismaAPIKey.prisma().find_unique(where={'id': key_id})\n    if not api_key:\n        raise APIKeyNotFoundError(f'API key with id {key_id} not found')\n    if api_key.userId != user_id:\n        raise APIKeyPermissionError('You do not have permission to revoke this API key.')\n    where_clause: APIKeyWhereUniqueInput = {'id': key_id}\n    updated_api_key = await PrismaAPIKey.prisma().update(where=where_clause, data=APIKeyUpdateInput(status=APIKeyStatus.REVOKED, revokedAt=datetime.now(timezone.utc)))\n    if updated_api_key:\n        return APIKeyWithoutHash.from_db(updated_api_key)\n    return None\nexcept (APIKeyNotFoundError, APIKeyPermissionError) as e:\n    raise e\nexcept PrismaError as e:\n    logger.error(f'Database error while revoking API key: {str(e)}')\n    raise APIKeyError(f'Failed to revoke API key: {str(e)}')\nexcept Exception as e:\n    logger.error(f'Unexpected error while revoking API key: {str(e)}')\n    raise APIKeyError(f'Failed to revoke API key: {str(e)}')",
        "api_key = await PrismaAPIKey.prisma().find_unique(where={'id': key_id})",
        "not api_key"
      ],
      "code": "logger.error(f'Error validating API key: {str(e)}')\nraise APIKeyValidationError(f'Failed to validate API key: {str(e)}')\nasync def revoke_api_key(key_id: str, user_id: str) -> Optional[APIKeyWithoutHash]:\n    try:\n        api_key = await PrismaAPIKey.prisma().find_unique(where={'id': key_id})\n        if not api_key:\n            raise APIKeyNotFoundError(f'API key with id {key_id} not found')\n        if api_key.userId != user_id:\n            raise APIKeyPermissionError('You do not have permission to revoke this API key.')\n        where_clause: APIKeyWhereUniqueInput = {'id': key_id}\n        updated_api_key = await PrismaAPIKey.prisma().update(where=where_clause, data=APIKeyUpdateInput(status=APIKeyStatus.REVOKED, revokedAt=datetime.now(timezone.utc)))\n        if updated_api_key:\n            return APIKeyWithoutHash.from_db(updated_api_key)\n        return None\n    except (APIKeyNotFoundError, APIKeyPermissionError) as e:\n        raise e\n    except PrismaError as e:\n        logger.error(f'Database error while revoking API key: {str(e)}')\n        raise APIKeyError(f'Failed to revoke API key: {str(e)}')\n    except Exception as e:\n        logger.error(f'Unexpected error while revoking API key: {str(e)}')\n        raise APIKeyError(f'Failed to revoke API key: {str(e)}')\ntry:\n    api_key = await PrismaAPIKey.prisma().find_unique(where={'id': key_id})\n    if not api_key:\n        raise APIKeyNotFoundError(f'API key with id {key_id} not found')\n    if api_key.userId != user_id:\n        raise APIKeyPermissionError('You do not have permission to revoke this API key.')\n    where_clause: APIKeyWhereUniqueInput = {'id': key_id}\n    updated_api_key = await PrismaAPIKey.prisma().update(where=where_clause, data=APIKeyUpdateInput(status=APIKeyStatus.REVOKED, revokedAt=datetime.now(timezone.utc)))\n    if updated_api_key:\n        return APIKeyWithoutHash.from_db(updated_api_key)\n    return None\nexcept (APIKeyNotFoundError, APIKeyPermissionError) as e:\n    raise e\nexcept PrismaError as e:\n    logger.error(f'Database error while revoking API key: {str(e)}')\n    raise APIKeyError(f'Failed to revoke API key: {str(e)}')\nexcept Exception as e:\n    logger.error(f'Unexpected error while revoking API key: {str(e)}')\n    raise APIKeyError(f'Failed to revoke API key: {str(e)}')\napi_key = await PrismaAPIKey.prisma().find_unique(where={'id': key_id})\nnot api_key"
    },
    {
      "id": "n11",
      "type": "block",
      "statements": [
        "raise APIKeyNotFoundError(f'API key with id {key_id} not found')"
      ],
      "code": "raise APIKeyNotFoundError(f'API key with id {key_id} not found')"
    },
    {
      "id": "n12",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n13",
      "type": "block",
      "statements": [
        "api_key.userId NotEq user_id"
      ],
      "code": "api_key.userId NotEq user_id"
    },
    {
      "id": "n14",
      "type": "block",
      "statements": [
        "raise APIKeyPermissionError('You do not have permission to revoke this API key.')"
      ],
      "code": "raise APIKeyPermissionError('You do not have permission to revoke this API key.')"
    },
    {
      "id": "n15",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n16",
      "type": "block",
      "statements": [
        "where_clause: APIKeyWhereUniqueInput = {'id': key_id}",
        "updated_api_key = await PrismaAPIKey.prisma().update(where=where_clause, data=APIKeyUpdateInput(status=APIKeyStatus.REVOKED, revokedAt=datetime.now(timezone.utc)))",
        "updated_api_key"
      ],
      "code": "where_clause: APIKeyWhereUniqueInput = {'id': key_id}\nupdated_api_key = await PrismaAPIKey.prisma().update(where=where_clause, data=APIKeyUpdateInput(status=APIKeyStatus.REVOKED, revokedAt=datetime.now(timezone.utc)))\nupdated_api_key"
    },
    {
      "id": "n17",
      "type": "block",
      "statements": [
        "return APIKeyWithoutHash.from_db(updated_api_key)"
      ],
      "code": "return APIKeyWithoutHash.from_db(updated_api_key)"
    },
    {
      "id": "n18",
      "type": "block",
      "statements": [],
      "code": "\nreturn None"
    },
    {
      "id": "n19",
      "type": "block",
      "statements": [
        "raise e",
        "logger.error(f'Database error while revoking API key: {str(e)}')",
        "raise APIKeyError(f'Failed to revoke API key: {str(e)}')",
        "logger.error(f'Unexpected error while revoking API key: {str(e)}')",
        "raise APIKeyError(f'Failed to revoke API key: {str(e)}')",
        "async def list_user_api_keys(user_id: str) -> List[APIKeyWithoutHash]:\n    try:\n        where_clause: APIKeyWhereInput = {'userId': user_id}\n        api_keys = await PrismaAPIKey.prisma().find_many(where=where_clause, order={'createdAt': 'desc'})\n        return [APIKeyWithoutHash.from_db(key) for key in api_keys]\n    except PrismaError as e:\n        logger.error(f'Database error while listing API keys: {str(e)}')\n        raise APIKeyError(f'Failed to list API keys: {str(e)}')\n    except Exception as e:\n        logger.error(f'Unexpected error while listing API keys: {str(e)}')\n        raise APIKeyError(f'Failed to list API keys: {str(e)}')",
        "try:\n    where_clause: APIKeyWhereInput = {'userId': user_id}\n    api_keys = await PrismaAPIKey.prisma().find_many(where=where_clause, order={'createdAt': 'desc'})\n    return [APIKeyWithoutHash.from_db(key) for key in api_keys]\nexcept PrismaError as e:\n    logger.error(f'Database error while listing API keys: {str(e)}')\n    raise APIKeyError(f'Failed to list API keys: {str(e)}')\nexcept Exception as e:\n    logger.error(f'Unexpected error while listing API keys: {str(e)}')\n    raise APIKeyError(f'Failed to list API keys: {str(e)}')",
        "where_clause: APIKeyWhereInput = {'userId': user_id}",
        "api_keys = await PrismaAPIKey.prisma().find_many(where=where_clause, order={'createdAt': 'desc'})",
        "return [APIKeyWithoutHash.from_db(key) for key in api_keys]"
      ],
      "code": "raise e\nlogger.error(f'Database error while revoking API key: {str(e)}')\nraise APIKeyError(f'Failed to revoke API key: {str(e)}')\nlogger.error(f'Unexpected error while revoking API key: {str(e)}')\nraise APIKeyError(f'Failed to revoke API key: {str(e)}')\nasync def list_user_api_keys(user_id: str) -> List[APIKeyWithoutHash]:\n    try:\n        where_clause: APIKeyWhereInput = {'userId': user_id}\n        api_keys = await PrismaAPIKey.prisma().find_many(where=where_clause, order={'createdAt': 'desc'})\n        return [APIKeyWithoutHash.from_db(key) for key in api_keys]\n    except PrismaError as e:\n        logger.error(f'Database error while listing API keys: {str(e)}')\n        raise APIKeyError(f'Failed to list API keys: {str(e)}')\n    except Exception as e:\n        logger.error(f'Unexpected error while listing API keys: {str(e)}')\n        raise APIKeyError(f'Failed to list API keys: {str(e)}')\ntry:\n    where_clause: APIKeyWhereInput = {'userId': user_id}\n    api_keys = await PrismaAPIKey.prisma().find_many(where=where_clause, order={'createdAt': 'desc'})\n    return [APIKeyWithoutHash.from_db(key) for key in api_keys]\nexcept PrismaError as e:\n    logger.error(f'Database error while listing API keys: {str(e)}')\n    raise APIKeyError(f'Failed to list API keys: {str(e)}')\nexcept Exception as e:\n    logger.error(f'Unexpected error while listing API keys: {str(e)}')\n    raise APIKeyError(f'Failed to list API keys: {str(e)}')\nwhere_clause: APIKeyWhereInput = {'userId': user_id}\napi_keys = await PrismaAPIKey.prisma().find_many(where=where_clause, order={'createdAt': 'desc'})\nreturn [APIKeyWithoutHash.from_db(key) for key in api_keys]"
    },
    {
      "id": "n20",
      "type": "block",
      "statements": [
        "logger.error(f'Database error while listing API keys: {str(e)}')",
        "raise APIKeyError(f'Failed to list API keys: {str(e)}')",
        "logger.error(f'Unexpected error while listing API keys: {str(e)}')",
        "raise APIKeyError(f'Failed to list API keys: {str(e)}')",
        "async def suspend_api_key(key_id: str, user_id: str) -> Optional[APIKeyWithoutHash]:\n    try:\n        api_key = await PrismaAPIKey.prisma().find_unique(where={'id': key_id})\n        if not api_key:\n            raise APIKeyNotFoundError(f'API key with id {key_id} not found')\n        if api_key.userId != user_id:\n            raise APIKeyPermissionError('You do not have permission to suspend this API key.')\n        where_clause: APIKeyWhereUniqueInput = {'id': key_id}\n        updated_api_key = await PrismaAPIKey.prisma().update(where=where_clause, data=APIKeyUpdateInput(status=APIKeyStatus.SUSPENDED))\n        if updated_api_key:\n            return APIKeyWithoutHash.from_db(updated_api_key)\n        return None\n    except (APIKeyNotFoundError, APIKeyPermissionError) as e:\n        raise e\n    except PrismaError as e:\n        logger.error(f'Database error while suspending API key: {str(e)}')\n        raise APIKeyError(f'Failed to suspend API key: {str(e)}')\n    except Exception as e:\n        logger.error(f'Unexpected error while suspending API key: {str(e)}')\n        raise APIKeyError(f'Failed to suspend API key: {str(e)}')",
        "try:\n    api_key = await PrismaAPIKey.prisma().find_unique(where={'id': key_id})\n    if not api_key:\n        raise APIKeyNotFoundError(f'API key with id {key_id} not found')\n    if api_key.userId != user_id:\n        raise APIKeyPermissionError('You do not have permission to suspend this API key.')\n    where_clause: APIKeyWhereUniqueInput = {'id': key_id}\n    updated_api_key = await PrismaAPIKey.prisma().update(where=where_clause, data=APIKeyUpdateInput(status=APIKeyStatus.SUSPENDED))\n    if updated_api_key:\n        return APIKeyWithoutHash.from_db(updated_api_key)\n    return None\nexcept (APIKeyNotFoundError, APIKeyPermissionError) as e:\n    raise e\nexcept PrismaError as e:\n    logger.error(f'Database error while suspending API key: {str(e)}')\n    raise APIKeyError(f'Failed to suspend API key: {str(e)}')\nexcept Exception as e:\n    logger.error(f'Unexpected error while suspending API key: {str(e)}')\n    raise APIKeyError(f'Failed to suspend API key: {str(e)}')",
        "api_key = await PrismaAPIKey.prisma().find_unique(where={'id': key_id})",
        "not api_key"
      ],
      "code": "logger.error(f'Database error while listing API keys: {str(e)}')\nraise APIKeyError(f'Failed to list API keys: {str(e)}')\nlogger.error(f'Unexpected error while listing API keys: {str(e)}')\nraise APIKeyError(f'Failed to list API keys: {str(e)}')\nasync def suspend_api_key(key_id: str, user_id: str) -> Optional[APIKeyWithoutHash]:\n    try:\n        api_key = await PrismaAPIKey.prisma().find_unique(where={'id': key_id})\n        if not api_key:\n            raise APIKeyNotFoundError(f'API key with id {key_id} not found')\n        if api_key.userId != user_id:\n            raise APIKeyPermissionError('You do not have permission to suspend this API key.')\n        where_clause: APIKeyWhereUniqueInput = {'id': key_id}\n        updated_api_key = await PrismaAPIKey.prisma().update(where=where_clause, data=APIKeyUpdateInput(status=APIKeyStatus.SUSPENDED))\n        if updated_api_key:\n            return APIKeyWithoutHash.from_db(updated_api_key)\n        return None\n    except (APIKeyNotFoundError, APIKeyPermissionError) as e:\n        raise e\n    except PrismaError as e:\n        logger.error(f'Database error while suspending API key: {str(e)}')\n        raise APIKeyError(f'Failed to suspend API key: {str(e)}')\n    except Exception as e:\n        logger.error(f'Unexpected error while suspending API key: {str(e)}')\n        raise APIKeyError(f'Failed to suspend API key: {str(e)}')\ntry:\n    api_key = await PrismaAPIKey.prisma().find_unique(where={'id': key_id})\n    if not api_key:\n        raise APIKeyNotFoundError(f'API key with id {key_id} not found')\n    if api_key.userId != user_id:\n        raise APIKeyPermissionError('You do not have permission to suspend this API key.')\n    where_clause: APIKeyWhereUniqueInput = {'id': key_id}\n    updated_api_key = await PrismaAPIKey.prisma().update(where=where_clause, data=APIKeyUpdateInput(status=APIKeyStatus.SUSPENDED))\n    if updated_api_key:\n        return APIKeyWithoutHash.from_db(updated_api_key)\n    return None\nexcept (APIKeyNotFoundError, APIKeyPermissionError) as e:\n    raise e\nexcept PrismaError as e:\n    logger.error(f'Database error while suspending API key: {str(e)}')\n    raise APIKeyError(f'Failed to suspend API key: {str(e)}')\nexcept Exception as e:\n    logger.error(f'Unexpected error while suspending API key: {str(e)}')\n    raise APIKeyError(f'Failed to suspend API key: {str(e)}')\napi_key = await PrismaAPIKey.prisma().find_unique(where={'id': key_id})\nnot api_key"
    },
    {
      "id": "n21",
      "type": "block",
      "statements": [
        "raise APIKeyNotFoundError(f'API key with id {key_id} not found')"
      ],
      "code": "raise APIKeyNotFoundError(f'API key with id {key_id} not found')"
    },
    {
      "id": "n22",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n23",
      "type": "block",
      "statements": [
        "api_key.userId NotEq user_id"
      ],
      "code": "api_key.userId NotEq user_id"
    },
    {
      "id": "n24",
      "type": "block",
      "statements": [
        "raise APIKeyPermissionError('You do not have permission to suspend this API key.')"
      ],
      "code": "raise APIKeyPermissionError('You do not have permission to suspend this API key.')"
    },
    {
      "id": "n25",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n26",
      "type": "block",
      "statements": [
        "where_clause: APIKeyWhereUniqueInput = {'id': key_id}",
        "updated_api_key = await PrismaAPIKey.prisma().update(where=where_clause, data=APIKeyUpdateInput(status=APIKeyStatus.SUSPENDED))",
        "updated_api_key"
      ],
      "code": "where_clause: APIKeyWhereUniqueInput = {'id': key_id}\nupdated_api_key = await PrismaAPIKey.prisma().update(where=where_clause, data=APIKeyUpdateInput(status=APIKeyStatus.SUSPENDED))\nupdated_api_key"
    },
    {
      "id": "n27",
      "type": "block",
      "statements": [
        "return APIKeyWithoutHash.from_db(updated_api_key)"
      ],
      "code": "return APIKeyWithoutHash.from_db(updated_api_key)"
    },
    {
      "id": "n28",
      "type": "block",
      "statements": [],
      "code": "\nreturn None"
    },
    {
      "id": "n29",
      "type": "block",
      "statements": [
        "raise e",
        "logger.error(f'Database error while suspending API key: {str(e)}')",
        "raise APIKeyError(f'Failed to suspend API key: {str(e)}')",
        "logger.error(f'Unexpected error while suspending API key: {str(e)}')",
        "raise APIKeyError(f'Failed to suspend API key: {str(e)}')",
        "def has_permission(api_key: APIKey, required_permission: APIKeyPermission) -> bool:\n    try:\n        return required_permission in api_key.permissions\n    except Exception as e:\n        logger.error(f'Error checking API key permissions: {str(e)}')\n        return False",
        "try:\n    return required_permission in api_key.permissions\nexcept Exception as e:\n    logger.error(f'Error checking API key permissions: {str(e)}')\n    return False",
        "return required_permission in api_key.permissions"
      ],
      "code": "raise e\nlogger.error(f'Database error while suspending API key: {str(e)}')\nraise APIKeyError(f'Failed to suspend API key: {str(e)}')\nlogger.error(f'Unexpected error while suspending API key: {str(e)}')\nraise APIKeyError(f'Failed to suspend API key: {str(e)}')\ndef has_permission(api_key: APIKey, required_permission: APIKeyPermission) -> bool:\n    try:\n        return required_permission in api_key.permissions\n    except Exception as e:\n        logger.error(f'Error checking API key permissions: {str(e)}')\n        return False\ntry:\n    return required_permission in api_key.permissions\nexcept Exception as e:\n    logger.error(f'Error checking API key permissions: {str(e)}')\n    return False\nreturn required_permission in api_key.permissions"
    },
    {
      "id": "n30",
      "type": "block",
      "statements": [
        "logger.error(f'Error checking API key permissions: {str(e)}')",
        "return False"
      ],
      "code": "logger.error(f'Error checking API key permissions: {str(e)}')\nreturn False"
    },
    {
      "id": "n31",
      "type": "block",
      "statements": [
        "async def get_api_key_by_id(key_id: str, user_id: str) -> Optional[APIKeyWithoutHash]:\n    try:\n        api_key = await PrismaAPIKey.prisma().find_first(where=APIKeyWhereInput(id=key_id, userId=user_id))\n        if not api_key:\n            return None\n        return APIKeyWithoutHash.from_db(api_key)\n    except PrismaError as e:\n        logger.error(f'Database error while getting API key: {str(e)}')\n        raise APIKeyError(f'Failed to get API key: {str(e)}')\n    except Exception as e:\n        logger.error(f'Unexpected error while getting API key: {str(e)}')\n        raise APIKeyError(f'Failed to get API key: {str(e)}')",
        "try:\n    api_key = await PrismaAPIKey.prisma().find_first(where=APIKeyWhereInput(id=key_id, userId=user_id))\n    if not api_key:\n        return None\n    return APIKeyWithoutHash.from_db(api_key)\nexcept PrismaError as e:\n    logger.error(f'Database error while getting API key: {str(e)}')\n    raise APIKeyError(f'Failed to get API key: {str(e)}')\nexcept Exception as e:\n    logger.error(f'Unexpected error while getting API key: {str(e)}')\n    raise APIKeyError(f'Failed to get API key: {str(e)}')",
        "api_key = await PrismaAPIKey.prisma().find_first(where=APIKeyWhereInput(id=key_id, userId=user_id))",
        "not api_key"
      ],
      "code": "async def get_api_key_by_id(key_id: str, user_id: str) -> Optional[APIKeyWithoutHash]:\n    try:\n        api_key = await PrismaAPIKey.prisma().find_first(where=APIKeyWhereInput(id=key_id, userId=user_id))\n        if not api_key:\n            return None\n        return APIKeyWithoutHash.from_db(api_key)\n    except PrismaError as e:\n        logger.error(f'Database error while getting API key: {str(e)}')\n        raise APIKeyError(f'Failed to get API key: {str(e)}')\n    except Exception as e:\n        logger.error(f'Unexpected error while getting API key: {str(e)}')\n        raise APIKeyError(f'Failed to get API key: {str(e)}')\ntry:\n    api_key = await PrismaAPIKey.prisma().find_first(where=APIKeyWhereInput(id=key_id, userId=user_id))\n    if not api_key:\n        return None\n    return APIKeyWithoutHash.from_db(api_key)\nexcept PrismaError as e:\n    logger.error(f'Database error while getting API key: {str(e)}')\n    raise APIKeyError(f'Failed to get API key: {str(e)}')\nexcept Exception as e:\n    logger.error(f'Unexpected error while getting API key: {str(e)}')\n    raise APIKeyError(f'Failed to get API key: {str(e)}')\napi_key = await PrismaAPIKey.prisma().find_first(where=APIKeyWhereInput(id=key_id, userId=user_id))\nnot api_key"
    },
    {
      "id": "n32",
      "type": "block",
      "statements": [
        "return None"
      ],
      "code": "return None"
    },
    {
      "id": "n33",
      "type": "block",
      "statements": [],
      "code": "\nreturn APIKeyWithoutHash.from_db(api_key)"
    },
    {
      "id": "n34",
      "type": "block",
      "statements": [
        "logger.error(f'Database error while getting API key: {str(e)}')",
        "raise APIKeyError(f'Failed to get API key: {str(e)}')",
        "logger.error(f'Unexpected error while getting API key: {str(e)}')",
        "raise APIKeyError(f'Failed to get API key: {str(e)}')",
        "async def update_api_key_permissions(key_id: str, user_id: str, permissions: List[APIKeyPermission]) -> Optional[APIKeyWithoutHash]:\n    \"\"\"\n    Update the permissions of an API key.\n    \"\"\"\n    try:\n        api_key = await PrismaAPIKey.prisma().find_unique(where={'id': key_id})\n        if api_key is None:\n            raise APIKeyNotFoundError('No such API key found.')\n        if api_key.userId != user_id:\n            raise APIKeyPermissionError('You do not have permission to update this API key.')\n        where_clause: APIKeyWhereUniqueInput = {'id': key_id}\n        updated_api_key = await PrismaAPIKey.prisma().update(where=where_clause, data=APIKeyUpdateInput(permissions=permissions))\n        if updated_api_key:\n            return APIKeyWithoutHash.from_db(updated_api_key)\n        return None\n    except (APIKeyNotFoundError, APIKeyPermissionError) as e:\n        raise e\n    except PrismaError as e:\n        logger.error(f'Database error while updating API key permissions: {str(e)}')\n        raise APIKeyError(f'Failed to update API key permissions: {str(e)}')\n    except Exception as e:\n        logger.error(f'Unexpected error while updating API key permissions: {str(e)}')\n        raise APIKeyError(f'Failed to update API key permissions: {str(e)}')",
        "'\\n    Update the permissions of an API key.\\n    '",
        "try:\n    api_key = await PrismaAPIKey.prisma().find_unique(where={'id': key_id})\n    if api_key is None:\n        raise APIKeyNotFoundError('No such API key found.')\n    if api_key.userId != user_id:\n        raise APIKeyPermissionError('You do not have permission to update this API key.')\n    where_clause: APIKeyWhereUniqueInput = {'id': key_id}\n    updated_api_key = await PrismaAPIKey.prisma().update(where=where_clause, data=APIKeyUpdateInput(permissions=permissions))\n    if updated_api_key:\n        return APIKeyWithoutHash.from_db(updated_api_key)\n    return None\nexcept (APIKeyNotFoundError, APIKeyPermissionError) as e:\n    raise e\nexcept PrismaError as e:\n    logger.error(f'Database error while updating API key permissions: {str(e)}')\n    raise APIKeyError(f'Failed to update API key permissions: {str(e)}')\nexcept Exception as e:\n    logger.error(f'Unexpected error while updating API key permissions: {str(e)}')\n    raise APIKeyError(f'Failed to update API key permissions: {str(e)}')",
        "api_key = await PrismaAPIKey.prisma().find_unique(where={'id': key_id})",
        "api_key Is None"
      ],
      "code": "logger.error(f'Database error while getting API key: {str(e)}')\nraise APIKeyError(f'Failed to get API key: {str(e)}')\nlogger.error(f'Unexpected error while getting API key: {str(e)}')\nraise APIKeyError(f'Failed to get API key: {str(e)}')\nasync def update_api_key_permissions(key_id: str, user_id: str, permissions: List[APIKeyPermission]) -> Optional[APIKeyWithoutHash]:\n    \"\"\"\n    Update the permissions of an API key.\n    \"\"\"\n    try:\n        api_key = await PrismaAPIKey.prisma().find_unique(where={'id': key_id})\n        if api_key is None:\n            raise APIKeyNotFoundError('No such API key found.')\n        if api_key.userId != user_id:\n            raise APIKeyPermissionError('You do not have permission to update this API key.')\n        where_clause: APIKeyWhereUniqueInput = {'id': key_id}\n        updated_api_key = await PrismaAPIKey.prisma().update(where=where_clause, data=APIKeyUpdateInput(permissions=permissions))\n        if updated_api_key:\n            return APIKeyWithoutHash.from_db(updated_api_key)\n        return None\n    except (APIKeyNotFoundError, APIKeyPermissionError) as e:\n        raise e\n    except PrismaError as e:\n        logger.error(f'Database error while updating API key permissions: {str(e)}')\n        raise APIKeyError(f'Failed to update API key permissions: {str(e)}')\n    except Exception as e:\n        logger.error(f'Unexpected error while updating API key permissions: {str(e)}')\n        raise APIKeyError(f'Failed to update API key permissions: {str(e)}')\n'\\n    Update the permissions of an API key.\\n    '\ntry:\n    api_key = await PrismaAPIKey.prisma().find_unique(where={'id': key_id})\n    if api_key is None:\n        raise APIKeyNotFoundError('No such API key found.')\n    if api_key.userId != user_id:\n        raise APIKeyPermissionError('You do not have permission to update this API key.')\n    where_clause: APIKeyWhereUniqueInput = {'id': key_id}\n    updated_api_key = await PrismaAPIKey.prisma().update(where=where_clause, data=APIKeyUpdateInput(permissions=permissions))\n    if updated_api_key:\n        return APIKeyWithoutHash.from_db(updated_api_key)\n    return None\nexcept (APIKeyNotFoundError, APIKeyPermissionError) as e:\n    raise e\nexcept PrismaError as e:\n    logger.error(f'Database error while updating API key permissions: {str(e)}')\n    raise APIKeyError(f'Failed to update API key permissions: {str(e)}')\nexcept Exception as e:\n    logger.error(f'Unexpected error while updating API key permissions: {str(e)}')\n    raise APIKeyError(f'Failed to update API key permissions: {str(e)}')\napi_key = await PrismaAPIKey.prisma().find_unique(where={'id': key_id})\napi_key Is None"
    },
    {
      "id": "n35",
      "type": "block",
      "statements": [
        "raise APIKeyNotFoundError('No such API key found.')"
      ],
      "code": "raise APIKeyNotFoundError('No such API key found.')"
    },
    {
      "id": "n36",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n37",
      "type": "block",
      "statements": [
        "api_key.userId NotEq user_id"
      ],
      "code": "api_key.userId NotEq user_id"
    },
    {
      "id": "n38",
      "type": "block",
      "statements": [
        "raise APIKeyPermissionError('You do not have permission to update this API key.')"
      ],
      "code": "raise APIKeyPermissionError('You do not have permission to update this API key.')"
    },
    {
      "id": "n39",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n40",
      "type": "block",
      "statements": [
        "where_clause: APIKeyWhereUniqueInput = {'id': key_id}",
        "updated_api_key = await PrismaAPIKey.prisma().update(where=where_clause, data=APIKeyUpdateInput(permissions=permissions))",
        "updated_api_key"
      ],
      "code": "where_clause: APIKeyWhereUniqueInput = {'id': key_id}\nupdated_api_key = await PrismaAPIKey.prisma().update(where=where_clause, data=APIKeyUpdateInput(permissions=permissions))\nupdated_api_key"
    },
    {
      "id": "n41",
      "type": "block",
      "statements": [
        "return APIKeyWithoutHash.from_db(updated_api_key)"
      ],
      "code": "return APIKeyWithoutHash.from_db(updated_api_key)"
    },
    {
      "id": "n42",
      "type": "block",
      "statements": [],
      "code": "\nreturn None"
    },
    {
      "id": "n43",
      "type": "block",
      "statements": [
        "raise e",
        "logger.error(f'Database error while updating API key permissions: {str(e)}')",
        "raise APIKeyError(f'Failed to update API key permissions: {str(e)}')",
        "logger.error(f'Unexpected error while updating API key permissions: {str(e)}')",
        "raise APIKeyError(f'Failed to update API key permissions: {str(e)}')"
      ],
      "code": "raise e\nlogger.error(f'Database error while updating API key permissions: {str(e)}')\nraise APIKeyError(f'Failed to update API key permissions: {str(e)}')\nlogger.error(f'Unexpected error while updating API key permissions: {str(e)}')\nraise APIKeyError(f'Failed to update API key permissions: {str(e)}')"
    }
  ],
  "edges": [
    {
      "source": "n23",
      "target": "n25"
    },
    {
      "source": "n35",
      "target": "n37"
    },
    {
      "source": "n22",
      "target": "n23"
    },
    {
      "source": "n34",
      "target": "n35"
    },
    {
      "source": "n10",
      "target": "n11"
    },
    {
      "source": "n26",
      "target": "n27"
    },
    {
      "source": "n13",
      "target": "n14"
    },
    {
      "source": "n40",
      "target": "n41"
    },
    {
      "source": "n23",
      "target": "n24"
    },
    {
      "source": "n16",
      "target": "n17"
    },
    {
      "source": "n13",
      "target": "n15"
    },
    {
      "source": "n16",
      "target": "n18"
    },
    {
      "source": "n3",
      "target": "n4"
    },
    {
      "source": "n12",
      "target": "n13"
    },
    {
      "source": "n34",
      "target": "n36"
    },
    {
      "source": "n21",
      "target": "n23"
    },
    {
      "source": "n15",
      "target": "n16"
    },
    {
      "source": "n7",
      "target": "n8"
    },
    {
      "source": "n31",
      "target": "n33"
    },
    {
      "source": "n14",
      "target": "n16"
    },
    {
      "source": "n20",
      "target": "n21"
    },
    {
      "source": "n37",
      "target": "n39"
    },
    {
      "source": "n31",
      "target": "n32"
    },
    {
      "source": "n10",
      "target": "n12"
    },
    {
      "source": "n37",
      "target": "n38"
    },
    {
      "source": "n38",
      "target": "n40"
    },
    {
      "source": "n5",
      "target": "n6"
    },
    {
      "source": "n7",
      "target": "n9"
    },
    {
      "source": "n25",
      "target": "n26"
    },
    {
      "source": "n40",
      "target": "n42"
    },
    {
      "source": "n26",
      "target": "n28"
    },
    {
      "source": "n24",
      "target": "n26"
    },
    {
      "source": "n36",
      "target": "n37"
    },
    {
      "source": "n3",
      "target": "n5"
    },
    {
      "source": "n20",
      "target": "n22"
    },
    {
      "source": "n39",
      "target": "n40"
    },
    {
      "source": "n5",
      "target": "n7"
    },
    {
      "source": "n11",
      "target": "n13"
    }
  ]
}