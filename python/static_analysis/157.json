{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "import logging",
        "import os",
        "from dotenv import load_dotenv",
        "from redis import Redis",
        "from redis.asyncio import Redis as AsyncRedis",
        "from backend.util.retry import conn_retry",
        "load_dotenv()",
        "HOST = os.getenv('REDIS_HOST', 'localhost')",
        "PORT = int(os.getenv('REDIS_PORT', '6379'))",
        "PASSWORD = os.getenv('REDIS_PASSWORD', 'password')",
        "logger = logging.getLogger(__name__)",
        "connection: Redis | None = None",
        "connection_async: AsyncRedis | None = None",
        "@conn_retry('Redis', 'Acquiring connection')\ndef connect() -> Redis:\n    global connection\n    if connection:\n        return connection\n    c = Redis(host=HOST, port=PORT, password=PASSWORD, decode_responses=True)\n    c.ping()\n    connection = c\n    return connection",
        "global connection",
        "connection"
      ],
      "code": "import logging\nimport os\nfrom dotenv import load_dotenv\nfrom redis import Redis\nfrom redis.asyncio import Redis as AsyncRedis\nfrom backend.util.retry import conn_retry\nload_dotenv()\nHOST = os.getenv('REDIS_HOST', 'localhost')\nPORT = int(os.getenv('REDIS_PORT', '6379'))\nPASSWORD = os.getenv('REDIS_PASSWORD', 'password')\nlogger = logging.getLogger(__name__)\nconnection: Redis | None = None\nconnection_async: AsyncRedis | None = None\n@conn_retry('Redis', 'Acquiring connection')\ndef connect() -> Redis:\n    global connection\n    if connection:\n        return connection\n    c = Redis(host=HOST, port=PORT, password=PASSWORD, decode_responses=True)\n    c.ping()\n    connection = c\n    return connection\nglobal connection\nconnection"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "return connection"
      ],
      "code": "return connection"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [],
      "code": "\nc = Redis(host=HOST, port=PORT, password=PASSWORD, decode_responses=True)\nc.ping()\nconnection = c\nreturn connection"
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [
        "@conn_retry('Redis', 'Releasing connection')\ndef disconnect():\n    global connection\n    if connection:\n        connection.close()\n    connection = None",
        "global connection",
        "connection"
      ],
      "code": "@conn_retry('Redis', 'Releasing connection')\ndef disconnect():\n    global connection\n    if connection:\n        connection.close()\n    connection = None\nglobal connection\nconnection"
    },
    {
      "id": "n4",
      "type": "block",
      "statements": [
        "connection.close()"
      ],
      "code": "connection.close()"
    },
    {
      "id": "n5",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n6",
      "type": "block",
      "statements": [
        "connection = None",
        "def get_redis(auto_connect: bool=True) -> Redis:\n    if connection:\n        return connection\n    if auto_connect:\n        return connect()\n    raise RuntimeError('Redis connection is not established')",
        "connection"
      ],
      "code": "connection = None\ndef get_redis(auto_connect: bool=True) -> Redis:\n    if connection:\n        return connection\n    if auto_connect:\n        return connect()\n    raise RuntimeError('Redis connection is not established')\nconnection"
    },
    {
      "id": "n7",
      "type": "block",
      "statements": [
        "return connection"
      ],
      "code": "return connection"
    },
    {
      "id": "n8",
      "type": "block",
      "statements": [],
      "code": "\nauto_connect"
    },
    {
      "id": "n9",
      "type": "block",
      "statements": [
        "return connect()"
      ],
      "code": "return connect()"
    },
    {
      "id": "n10",
      "type": "block",
      "statements": [],
      "code": "\nraise RuntimeError('Redis connection is not established')\n@conn_retry('AsyncRedis', 'Acquiring connection')\nasync def connect_async() -> AsyncRedis:\n    global connection_async\n    if connection_async:\n        return connection_async\n    c = AsyncRedis(host=HOST, port=PORT, password=PASSWORD, decode_responses=True)\n    await c.ping()\n    connection_async = c\n    return connection_async\nglobal connection_async\nconnection_async"
    },
    {
      "id": "n11",
      "type": "block",
      "statements": [
        "return connection_async"
      ],
      "code": "return connection_async"
    },
    {
      "id": "n12",
      "type": "block",
      "statements": [],
      "code": "\nc = AsyncRedis(host=HOST, port=PORT, password=PASSWORD, decode_responses=True)\nawait c.ping()\nconnection_async = c\nreturn connection_async"
    },
    {
      "id": "n13",
      "type": "block",
      "statements": [
        "@conn_retry('AsyncRedis', 'Releasing connection')\nasync def disconnect_async():\n    global connection_async\n    if connection_async:\n        await connection_async.close()\n    connection_async = None",
        "global connection_async",
        "connection_async"
      ],
      "code": "@conn_retry('AsyncRedis', 'Releasing connection')\nasync def disconnect_async():\n    global connection_async\n    if connection_async:\n        await connection_async.close()\n    connection_async = None\nglobal connection_async\nconnection_async"
    },
    {
      "id": "n14",
      "type": "block",
      "statements": [
        "await connection_async.close()"
      ],
      "code": "await connection_async.close()"
    },
    {
      "id": "n15",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n16",
      "type": "block",
      "statements": [
        "connection_async = None",
        "async def get_redis_async(auto_connect: bool=True) -> AsyncRedis:\n    if connection_async:\n        return connection_async\n    if auto_connect:\n        return await connect_async()\n    raise RuntimeError('AsyncRedis connection is not established')",
        "connection_async"
      ],
      "code": "connection_async = None\nasync def get_redis_async(auto_connect: bool=True) -> AsyncRedis:\n    if connection_async:\n        return connection_async\n    if auto_connect:\n        return await connect_async()\n    raise RuntimeError('AsyncRedis connection is not established')\nconnection_async"
    },
    {
      "id": "n17",
      "type": "block",
      "statements": [
        "return connection_async"
      ],
      "code": "return connection_async"
    },
    {
      "id": "n18",
      "type": "block",
      "statements": [],
      "code": "\nauto_connect"
    },
    {
      "id": "n19",
      "type": "block",
      "statements": [
        "return await connect_async()"
      ],
      "code": "return await connect_async()"
    },
    {
      "id": "n20",
      "type": "block",
      "statements": [],
      "code": "\nraise RuntimeError('AsyncRedis connection is not established')"
    }
  ],
  "edges": [
    {
      "source": "n6",
      "target": "n7"
    },
    {
      "source": "n0",
      "target": "n1"
    },
    {
      "source": "n10",
      "target": "n11"
    },
    {
      "source": "n13",
      "target": "n14"
    },
    {
      "source": "n16",
      "target": "n17"
    },
    {
      "source": "n13",
      "target": "n15"
    },
    {
      "source": "n16",
      "target": "n18"
    },
    {
      "source": "n3",
      "target": "n4"
    },
    {
      "source": "n8",
      "target": "n9"
    },
    {
      "source": "n4",
      "target": "n6"
    },
    {
      "source": "n15",
      "target": "n16"
    },
    {
      "source": "n14",
      "target": "n16"
    },
    {
      "source": "n10",
      "target": "n12"
    },
    {
      "source": "n18",
      "target": "n19"
    },
    {
      "source": "n5",
      "target": "n6"
    },
    {
      "source": "n18",
      "target": "n20"
    },
    {
      "source": "n8",
      "target": "n10"
    },
    {
      "source": "n3",
      "target": "n5"
    },
    {
      "source": "n6",
      "target": "n8"
    },
    {
      "source": "n0",
      "target": "n2"
    }
  ]
}