{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "import json",
        "from typing import Optional",
        "from cryptography.fernet import Fernet",
        "from backend.util.settings import Settings",
        "ENCRYPTION_KEY = Settings().secrets.encryption_key",
        "class JSONCryptor:\n\n    def __init__(self, key: Optional[str]=None):\n        self.key = key or ENCRYPTION_KEY\n        if not self.key:\n            raise ValueError('Encryption key must be provided or set in ENCRYPTION_KEY environment variable')\n        self.fernet = Fernet(self.key.encode() if isinstance(self.key, str) else self.key)\n\n    def encrypt(self, data: dict) -> str:\n        \"\"\"Encrypt dictionary data to string\"\"\"\n        json_str = json.dumps(data)\n        encrypted = self.fernet.encrypt(json_str.encode())\n        return encrypted.decode()\n\n    def decrypt(self, encrypted_str: str) -> dict:\n        \"\"\"Decrypt string to dictionary\"\"\"\n        if not encrypted_str:\n            return {}\n        decrypted = self.fernet.decrypt(encrypted_str.encode())\n        return json.loads(decrypted.decode())",
        "def __init__(self, key: Optional[str]=None):\n    self.key = key or ENCRYPTION_KEY\n    if not self.key:\n        raise ValueError('Encryption key must be provided or set in ENCRYPTION_KEY environment variable')\n    self.fernet = Fernet(self.key.encode() if isinstance(self.key, str) else self.key)",
        "self.key = key or ENCRYPTION_KEY",
        "not self.key"
      ],
      "code": "import json\nfrom typing import Optional\nfrom cryptography.fernet import Fernet\nfrom backend.util.settings import Settings\nENCRYPTION_KEY = Settings().secrets.encryption_key\nclass JSONCryptor:\n\n    def __init__(self, key: Optional[str]=None):\n        self.key = key or ENCRYPTION_KEY\n        if not self.key:\n            raise ValueError('Encryption key must be provided or set in ENCRYPTION_KEY environment variable')\n        self.fernet = Fernet(self.key.encode() if isinstance(self.key, str) else self.key)\n\n    def encrypt(self, data: dict) -> str:\n        \"\"\"Encrypt dictionary data to string\"\"\"\n        json_str = json.dumps(data)\n        encrypted = self.fernet.encrypt(json_str.encode())\n        return encrypted.decode()\n\n    def decrypt(self, encrypted_str: str) -> dict:\n        \"\"\"Decrypt string to dictionary\"\"\"\n        if not encrypted_str:\n            return {}\n        decrypted = self.fernet.decrypt(encrypted_str.encode())\n        return json.loads(decrypted.decode())\ndef __init__(self, key: Optional[str]=None):\n    self.key = key or ENCRYPTION_KEY\n    if not self.key:\n        raise ValueError('Encryption key must be provided or set in ENCRYPTION_KEY environment variable')\n    self.fernet = Fernet(self.key.encode() if isinstance(self.key, str) else self.key)\nself.key = key or ENCRYPTION_KEY\nnot self.key"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "raise ValueError('Encryption key must be provided or set in ENCRYPTION_KEY environment variable')"
      ],
      "code": "raise ValueError('Encryption key must be provided or set in ENCRYPTION_KEY environment variable')"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [
        "self.fernet = Fernet(self.key.encode() if isinstance(self.key, str) else self.key)",
        "def encrypt(self, data: dict) -> str:\n    \"\"\"Encrypt dictionary data to string\"\"\"\n    json_str = json.dumps(data)\n    encrypted = self.fernet.encrypt(json_str.encode())\n    return encrypted.decode()",
        "'Encrypt dictionary data to string'",
        "json_str = json.dumps(data)",
        "encrypted = self.fernet.encrypt(json_str.encode())",
        "return encrypted.decode()"
      ],
      "code": "self.fernet = Fernet(self.key.encode() if isinstance(self.key, str) else self.key)\ndef encrypt(self, data: dict) -> str:\n    \"\"\"Encrypt dictionary data to string\"\"\"\n    json_str = json.dumps(data)\n    encrypted = self.fernet.encrypt(json_str.encode())\n    return encrypted.decode()\n'Encrypt dictionary data to string'\njson_str = json.dumps(data)\nencrypted = self.fernet.encrypt(json_str.encode())\nreturn encrypted.decode()"
    },
    {
      "id": "n4",
      "type": "block",
      "statements": [
        "def decrypt(self, encrypted_str: str) -> dict:\n    \"\"\"Decrypt string to dictionary\"\"\"\n    if not encrypted_str:\n        return {}\n    decrypted = self.fernet.decrypt(encrypted_str.encode())\n    return json.loads(decrypted.decode())",
        "'Decrypt string to dictionary'",
        "not encrypted_str"
      ],
      "code": "def decrypt(self, encrypted_str: str) -> dict:\n    \"\"\"Decrypt string to dictionary\"\"\"\n    if not encrypted_str:\n        return {}\n    decrypted = self.fernet.decrypt(encrypted_str.encode())\n    return json.loads(decrypted.decode())\n'Decrypt string to dictionary'\nnot encrypted_str"
    },
    {
      "id": "n5",
      "type": "block",
      "statements": [
        "return {}"
      ],
      "code": "return {}"
    },
    {
      "id": "n6",
      "type": "block",
      "statements": [],
      "code": "\ndecrypted = self.fernet.decrypt(encrypted_str.encode())\nreturn json.loads(decrypted.decode())"
    }
  ],
  "edges": [
    {
      "source": "n1",
      "target": "n3"
    },
    {
      "source": "n0",
      "target": "n2"
    },
    {
      "source": "n0",
      "target": "n1"
    },
    {
      "source": "n4",
      "target": "n5"
    },
    {
      "source": "n4",
      "target": "n6"
    },
    {
      "source": "n2",
      "target": "n3"
    }
  ]
}