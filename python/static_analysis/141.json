{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "import re",
        "from typing_extensions import TypedDict",
        "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema",
        "from backend.data.model import SchemaField",
        "from ._api import get_api",
        "from ._auth import TEST_CREDENTIALS, TEST_CREDENTIALS_INPUT, GithubCredentials, GithubCredentialsField, GithubCredentialsInput",
        "class GithubListPullRequestsBlock(Block):\n\n    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField('repo')\n        repo_url: str = SchemaField(description='URL of the GitHub repository', placeholder='https://github.com/owner/repo')\n\n    class Output(BlockSchema):\n\n        class PRItem(TypedDict):\n            title: str\n            url: str\n        pull_request: PRItem = SchemaField(title='Pull Request', description='PRs with their title and URL')\n        error: str = SchemaField(description='Error message if listing issues failed')\n\n    def __init__(self):\n        super().__init__(id='ffef3c4c-6cd0-48dd-817d-459f975219f4', description='This block lists all pull requests for a specified GitHub repository.', categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=GithubListPullRequestsBlock.Input, output_schema=GithubListPullRequestsBlock.Output, test_input={'repo_url': 'https://github.com/owner/repo', 'credentials': TEST_CREDENTIALS_INPUT}, test_credentials=TEST_CREDENTIALS, test_output=[('pull_request', {'title': 'Pull request 1', 'url': 'https://github.com/owner/repo/pull/1'})], test_mock={'list_prs': lambda *args, **kwargs: [{'title': 'Pull request 1', 'url': 'https://github.com/owner/repo/pull/1'}]})\n\n    @staticmethod\n    def list_prs(credentials: GithubCredentials, repo_url: str) -> list[Output.PRItem]:\n        api = get_api(credentials)\n        pulls_url = repo_url + '/pulls'\n        response = api.get(pulls_url)\n        data = response.json()\n        pull_requests: list[GithubListPullRequestsBlock.Output.PRItem] = [{'title': pr['title'], 'url': pr['html_url']} for pr in data]\n        return pull_requests\n\n    def run(self, input_data: Input, *, credentials: GithubCredentials, **kwargs) -> BlockOutput:\n        pull_requests = self.list_prs(credentials, input_data.repo_url)\n        yield from (('pull_request', pr) for pr in pull_requests)",
        "class Input(BlockSchema):\n    credentials: GithubCredentialsInput = GithubCredentialsField('repo')\n    repo_url: str = SchemaField(description='URL of the GitHub repository', placeholder='https://github.com/owner/repo')",
        "credentials: GithubCredentialsInput = GithubCredentialsField('repo')",
        "repo_url: str = SchemaField(description='URL of the GitHub repository', placeholder='https://github.com/owner/repo')",
        "class Output(BlockSchema):\n\n    class PRItem(TypedDict):\n        title: str\n        url: str\n    pull_request: PRItem = SchemaField(title='Pull Request', description='PRs with their title and URL')\n    error: str = SchemaField(description='Error message if listing issues failed')",
        "class PRItem(TypedDict):\n    title: str\n    url: str",
        "title: str",
        "url: str",
        "pull_request: PRItem = SchemaField(title='Pull Request', description='PRs with their title and URL')",
        "error: str = SchemaField(description='Error message if listing issues failed')",
        "def __init__(self):\n    super().__init__(id='ffef3c4c-6cd0-48dd-817d-459f975219f4', description='This block lists all pull requests for a specified GitHub repository.', categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=GithubListPullRequestsBlock.Input, output_schema=GithubListPullRequestsBlock.Output, test_input={'repo_url': 'https://github.com/owner/repo', 'credentials': TEST_CREDENTIALS_INPUT}, test_credentials=TEST_CREDENTIALS, test_output=[('pull_request', {'title': 'Pull request 1', 'url': 'https://github.com/owner/repo/pull/1'})], test_mock={'list_prs': lambda *args, **kwargs: [{'title': 'Pull request 1', 'url': 'https://github.com/owner/repo/pull/1'}]})",
        "super().__init__()",
        "@staticmethod\ndef list_prs(credentials: GithubCredentials, repo_url: str) -> list[Output.PRItem]:\n    api = get_api(credentials)\n    pulls_url = repo_url + '/pulls'\n    response = api.get(pulls_url)\n    data = response.json()\n    pull_requests: list[GithubListPullRequestsBlock.Output.PRItem] = [{'title': pr['title'], 'url': pr['html_url']} for pr in data]\n    return pull_requests",
        "api = get_api(credentials)",
        "pulls_url = repo_url + '/pulls'",
        "response = api.get(pulls_url)",
        "data = response.json()",
        "pull_requests: list[GithubListPullRequestsBlock.Output.PRItem] = [{'title': pr['title'], 'url': pr['html_url']} for pr in data]",
        "return pull_requests"
      ],
      "code": "import re\nfrom typing_extensions import TypedDict\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\nfrom ._api import get_api\nfrom ._auth import TEST_CREDENTIALS, TEST_CREDENTIALS_INPUT, GithubCredentials, GithubCredentialsField, GithubCredentialsInput\nclass GithubListPullRequestsBlock(Block):\n\n    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField('repo')\n        repo_url: str = SchemaField(description='URL of the GitHub repository', placeholder='https://github.com/owner/repo')\n\n    class Output(BlockSchema):\n\n        class PRItem(TypedDict):\n            title: str\n            url: str\n        pull_request: PRItem = SchemaField(title='Pull Request', description='PRs with their title and URL')\n        error: str = SchemaField(description='Error message if listing issues failed')\n\n    def __init__(self):\n        super().__init__(id='ffef3c4c-6cd0-48dd-817d-459f975219f4', description='This block lists all pull requests for a specified GitHub repository.', categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=GithubListPullRequestsBlock.Input, output_schema=GithubListPullRequestsBlock.Output, test_input={'repo_url': 'https://github.com/owner/repo', 'credentials': TEST_CREDENTIALS_INPUT}, test_credentials=TEST_CREDENTIALS, test_output=[('pull_request', {'title': 'Pull request 1', 'url': 'https://github.com/owner/repo/pull/1'})], test_mock={'list_prs': lambda *args, **kwargs: [{'title': 'Pull request 1', 'url': 'https://github.com/owner/repo/pull/1'}]})\n\n    @staticmethod\n    def list_prs(credentials: GithubCredentials, repo_url: str) -> list[Output.PRItem]:\n        api = get_api(credentials)\n        pulls_url = repo_url + '/pulls'\n        response = api.get(pulls_url)\n        data = response.json()\n        pull_requests: list[GithubListPullRequestsBlock.Output.PRItem] = [{'title': pr['title'], 'url': pr['html_url']} for pr in data]\n        return pull_requests\n\n    def run(self, input_data: Input, *, credentials: GithubCredentials, **kwargs) -> BlockOutput:\n        pull_requests = self.list_prs(credentials, input_data.repo_url)\n        yield from (('pull_request', pr) for pr in pull_requests)\nclass Input(BlockSchema):\n    credentials: GithubCredentialsInput = GithubCredentialsField('repo')\n    repo_url: str = SchemaField(description='URL of the GitHub repository', placeholder='https://github.com/owner/repo')\ncredentials: GithubCredentialsInput = GithubCredentialsField('repo')\nrepo_url: str = SchemaField(description='URL of the GitHub repository', placeholder='https://github.com/owner/repo')\nclass Output(BlockSchema):\n\n    class PRItem(TypedDict):\n        title: str\n        url: str\n    pull_request: PRItem = SchemaField(title='Pull Request', description='PRs with their title and URL')\n    error: str = SchemaField(description='Error message if listing issues failed')\nclass PRItem(TypedDict):\n    title: str\n    url: str\ntitle: str\nurl: str\npull_request: PRItem = SchemaField(title='Pull Request', description='PRs with their title and URL')\nerror: str = SchemaField(description='Error message if listing issues failed')\ndef __init__(self):\n    super().__init__(id='ffef3c4c-6cd0-48dd-817d-459f975219f4', description='This block lists all pull requests for a specified GitHub repository.', categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=GithubListPullRequestsBlock.Input, output_schema=GithubListPullRequestsBlock.Output, test_input={'repo_url': 'https://github.com/owner/repo', 'credentials': TEST_CREDENTIALS_INPUT}, test_credentials=TEST_CREDENTIALS, test_output=[('pull_request', {'title': 'Pull request 1', 'url': 'https://github.com/owner/repo/pull/1'})], test_mock={'list_prs': lambda *args, **kwargs: [{'title': 'Pull request 1', 'url': 'https://github.com/owner/repo/pull/1'}]})\nsuper().__init__()\n@staticmethod\ndef list_prs(credentials: GithubCredentials, repo_url: str) -> list[Output.PRItem]:\n    api = get_api(credentials)\n    pulls_url = repo_url + '/pulls'\n    response = api.get(pulls_url)\n    data = response.json()\n    pull_requests: list[GithubListPullRequestsBlock.Output.PRItem] = [{'title': pr['title'], 'url': pr['html_url']} for pr in data]\n    return pull_requests\napi = get_api(credentials)\npulls_url = repo_url + '/pulls'\nresponse = api.get(pulls_url)\ndata = response.json()\npull_requests: list[GithubListPullRequestsBlock.Output.PRItem] = [{'title': pr['title'], 'url': pr['html_url']} for pr in data]\nreturn pull_requests"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "def run(self, input_data: Input, *, credentials: GithubCredentials, **kwargs) -> BlockOutput:\n    pull_requests = self.list_prs(credentials, input_data.repo_url)\n    yield from (('pull_request', pr) for pr in pull_requests)",
        "pull_requests = self.list_prs(credentials, input_data.repo_url)",
        "(yield from (('pull_request', pr) for pr in pull_requests))",
        "class GithubMakePullRequestBlock(Block):\n\n    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField('repo')\n        repo_url: str = SchemaField(description='URL of the GitHub repository', placeholder='https://github.com/owner/repo')\n        title: str = SchemaField(description='Title of the pull request', placeholder='Enter the pull request title')\n        body: str = SchemaField(description='Body of the pull request', placeholder='Enter the pull request body')\n        head: str = SchemaField(description='The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace head with a user like this: username:branch.', placeholder='Enter the head branch')\n        base: str = SchemaField(description='The name of the branch you want the changes pulled into.', placeholder='Enter the base branch')\n\n    class Output(BlockSchema):\n        number: int = SchemaField(description='Number of the created pull request')\n        url: str = SchemaField(description='URL of the created pull request')\n        error: str = SchemaField(description='Error message if the pull request creation failed')\n\n    def __init__(self):\n        super().__init__(id='dfb987f8-f197-4b2e-bf19-111812afd692', description='This block creates a new pull request on a specified GitHub repository.', categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=GithubMakePullRequestBlock.Input, output_schema=GithubMakePullRequestBlock.Output, test_input={'repo_url': 'https://github.com/owner/repo', 'title': 'Test Pull Request', 'body': 'This is a test pull request.', 'head': 'feature-branch', 'base': 'main', 'credentials': TEST_CREDENTIALS_INPUT}, test_credentials=TEST_CREDENTIALS, test_output=[('number', 1), ('url', 'https://github.com/owner/repo/pull/1')], test_mock={'create_pr': lambda *args, **kwargs: (1, 'https://github.com/owner/repo/pull/1')})\n\n    @staticmethod\n    def create_pr(credentials: GithubCredentials, repo_url: str, title: str, body: str, head: str, base: str) -> tuple[int, str]:\n        api = get_api(credentials)\n        pulls_url = repo_url + '/pulls'\n        data = {'title': title, 'body': body, 'head': head, 'base': base}\n        response = api.post(pulls_url, json=data)\n        pr_data = response.json()\n        return (pr_data['number'], pr_data['html_url'])\n\n    def run(self, input_data: Input, *, credentials: GithubCredentials, **kwargs) -> BlockOutput:\n        try:\n            (number, url) = self.create_pr(credentials, input_data.repo_url, input_data.title, input_data.body, input_data.head, input_data.base)\n            yield ('number', number)\n            yield ('url', url)\n        except Exception as e:\n            yield ('error', str(e))",
        "class Input(BlockSchema):\n    credentials: GithubCredentialsInput = GithubCredentialsField('repo')\n    repo_url: str = SchemaField(description='URL of the GitHub repository', placeholder='https://github.com/owner/repo')\n    title: str = SchemaField(description='Title of the pull request', placeholder='Enter the pull request title')\n    body: str = SchemaField(description='Body of the pull request', placeholder='Enter the pull request body')\n    head: str = SchemaField(description='The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace head with a user like this: username:branch.', placeholder='Enter the head branch')\n    base: str = SchemaField(description='The name of the branch you want the changes pulled into.', placeholder='Enter the base branch')",
        "credentials: GithubCredentialsInput = GithubCredentialsField('repo')",
        "repo_url: str = SchemaField(description='URL of the GitHub repository', placeholder='https://github.com/owner/repo')",
        "title: str = SchemaField(description='Title of the pull request', placeholder='Enter the pull request title')",
        "body: str = SchemaField(description='Body of the pull request', placeholder='Enter the pull request body')",
        "head: str = SchemaField(description='The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace head with a user like this: username:branch.', placeholder='Enter the head branch')",
        "base: str = SchemaField(description='The name of the branch you want the changes pulled into.', placeholder='Enter the base branch')",
        "class Output(BlockSchema):\n    number: int = SchemaField(description='Number of the created pull request')\n    url: str = SchemaField(description='URL of the created pull request')\n    error: str = SchemaField(description='Error message if the pull request creation failed')",
        "number: int = SchemaField(description='Number of the created pull request')",
        "url: str = SchemaField(description='URL of the created pull request')",
        "error: str = SchemaField(description='Error message if the pull request creation failed')",
        "def __init__(self):\n    super().__init__(id='dfb987f8-f197-4b2e-bf19-111812afd692', description='This block creates a new pull request on a specified GitHub repository.', categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=GithubMakePullRequestBlock.Input, output_schema=GithubMakePullRequestBlock.Output, test_input={'repo_url': 'https://github.com/owner/repo', 'title': 'Test Pull Request', 'body': 'This is a test pull request.', 'head': 'feature-branch', 'base': 'main', 'credentials': TEST_CREDENTIALS_INPUT}, test_credentials=TEST_CREDENTIALS, test_output=[('number', 1), ('url', 'https://github.com/owner/repo/pull/1')], test_mock={'create_pr': lambda *args, **kwargs: (1, 'https://github.com/owner/repo/pull/1')})",
        "super().__init__()",
        "@staticmethod\ndef create_pr(credentials: GithubCredentials, repo_url: str, title: str, body: str, head: str, base: str) -> tuple[int, str]:\n    api = get_api(credentials)\n    pulls_url = repo_url + '/pulls'\n    data = {'title': title, 'body': body, 'head': head, 'base': base}\n    response = api.post(pulls_url, json=data)\n    pr_data = response.json()\n    return (pr_data['number'], pr_data['html_url'])",
        "api = get_api(credentials)",
        "pulls_url = repo_url + '/pulls'",
        "data = {'title': title, 'body': body, 'head': head, 'base': base}",
        "response = api.post(pulls_url, json=data)",
        "pr_data = response.json()",
        "return (pr_data['number'], pr_data['html_url'])"
      ],
      "code": "def run(self, input_data: Input, *, credentials: GithubCredentials, **kwargs) -> BlockOutput:\n    pull_requests = self.list_prs(credentials, input_data.repo_url)\n    yield from (('pull_request', pr) for pr in pull_requests)\npull_requests = self.list_prs(credentials, input_data.repo_url)\n(yield from (('pull_request', pr) for pr in pull_requests))\nclass GithubMakePullRequestBlock(Block):\n\n    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField('repo')\n        repo_url: str = SchemaField(description='URL of the GitHub repository', placeholder='https://github.com/owner/repo')\n        title: str = SchemaField(description='Title of the pull request', placeholder='Enter the pull request title')\n        body: str = SchemaField(description='Body of the pull request', placeholder='Enter the pull request body')\n        head: str = SchemaField(description='The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace head with a user like this: username:branch.', placeholder='Enter the head branch')\n        base: str = SchemaField(description='The name of the branch you want the changes pulled into.', placeholder='Enter the base branch')\n\n    class Output(BlockSchema):\n        number: int = SchemaField(description='Number of the created pull request')\n        url: str = SchemaField(description='URL of the created pull request')\n        error: str = SchemaField(description='Error message if the pull request creation failed')\n\n    def __init__(self):\n        super().__init__(id='dfb987f8-f197-4b2e-bf19-111812afd692', description='This block creates a new pull request on a specified GitHub repository.', categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=GithubMakePullRequestBlock.Input, output_schema=GithubMakePullRequestBlock.Output, test_input={'repo_url': 'https://github.com/owner/repo', 'title': 'Test Pull Request', 'body': 'This is a test pull request.', 'head': 'feature-branch', 'base': 'main', 'credentials': TEST_CREDENTIALS_INPUT}, test_credentials=TEST_CREDENTIALS, test_output=[('number', 1), ('url', 'https://github.com/owner/repo/pull/1')], test_mock={'create_pr': lambda *args, **kwargs: (1, 'https://github.com/owner/repo/pull/1')})\n\n    @staticmethod\n    def create_pr(credentials: GithubCredentials, repo_url: str, title: str, body: str, head: str, base: str) -> tuple[int, str]:\n        api = get_api(credentials)\n        pulls_url = repo_url + '/pulls'\n        data = {'title': title, 'body': body, 'head': head, 'base': base}\n        response = api.post(pulls_url, json=data)\n        pr_data = response.json()\n        return (pr_data['number'], pr_data['html_url'])\n\n    def run(self, input_data: Input, *, credentials: GithubCredentials, **kwargs) -> BlockOutput:\n        try:\n            (number, url) = self.create_pr(credentials, input_data.repo_url, input_data.title, input_data.body, input_data.head, input_data.base)\n            yield ('number', number)\n            yield ('url', url)\n        except Exception as e:\n            yield ('error', str(e))\nclass Input(BlockSchema):\n    credentials: GithubCredentialsInput = GithubCredentialsField('repo')\n    repo_url: str = SchemaField(description='URL of the GitHub repository', placeholder='https://github.com/owner/repo')\n    title: str = SchemaField(description='Title of the pull request', placeholder='Enter the pull request title')\n    body: str = SchemaField(description='Body of the pull request', placeholder='Enter the pull request body')\n    head: str = SchemaField(description='The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace head with a user like this: username:branch.', placeholder='Enter the head branch')\n    base: str = SchemaField(description='The name of the branch you want the changes pulled into.', placeholder='Enter the base branch')\ncredentials: GithubCredentialsInput = GithubCredentialsField('repo')\nrepo_url: str = SchemaField(description='URL of the GitHub repository', placeholder='https://github.com/owner/repo')\ntitle: str = SchemaField(description='Title of the pull request', placeholder='Enter the pull request title')\nbody: str = SchemaField(description='Body of the pull request', placeholder='Enter the pull request body')\nhead: str = SchemaField(description='The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace head with a user like this: username:branch.', placeholder='Enter the head branch')\nbase: str = SchemaField(description='The name of the branch you want the changes pulled into.', placeholder='Enter the base branch')\nclass Output(BlockSchema):\n    number: int = SchemaField(description='Number of the created pull request')\n    url: str = SchemaField(description='URL of the created pull request')\n    error: str = SchemaField(description='Error message if the pull request creation failed')\nnumber: int = SchemaField(description='Number of the created pull request')\nurl: str = SchemaField(description='URL of the created pull request')\nerror: str = SchemaField(description='Error message if the pull request creation failed')\ndef __init__(self):\n    super().__init__(id='dfb987f8-f197-4b2e-bf19-111812afd692', description='This block creates a new pull request on a specified GitHub repository.', categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=GithubMakePullRequestBlock.Input, output_schema=GithubMakePullRequestBlock.Output, test_input={'repo_url': 'https://github.com/owner/repo', 'title': 'Test Pull Request', 'body': 'This is a test pull request.', 'head': 'feature-branch', 'base': 'main', 'credentials': TEST_CREDENTIALS_INPUT}, test_credentials=TEST_CREDENTIALS, test_output=[('number', 1), ('url', 'https://github.com/owner/repo/pull/1')], test_mock={'create_pr': lambda *args, **kwargs: (1, 'https://github.com/owner/repo/pull/1')})\nsuper().__init__()\n@staticmethod\ndef create_pr(credentials: GithubCredentials, repo_url: str, title: str, body: str, head: str, base: str) -> tuple[int, str]:\n    api = get_api(credentials)\n    pulls_url = repo_url + '/pulls'\n    data = {'title': title, 'body': body, 'head': head, 'base': base}\n    response = api.post(pulls_url, json=data)\n    pr_data = response.json()\n    return (pr_data['number'], pr_data['html_url'])\napi = get_api(credentials)\npulls_url = repo_url + '/pulls'\ndata = {'title': title, 'body': body, 'head': head, 'base': base}\nresponse = api.post(pulls_url, json=data)\npr_data = response.json()\nreturn (pr_data['number'], pr_data['html_url'])"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [
        "def run(self, input_data: Input, *, credentials: GithubCredentials, **kwargs) -> BlockOutput:\n    try:\n        (number, url) = self.create_pr(credentials, input_data.repo_url, input_data.title, input_data.body, input_data.head, input_data.base)\n        yield ('number', number)\n        yield ('url', url)\n    except Exception as e:\n        yield ('error', str(e))",
        "try:\n    (number, url) = self.create_pr(credentials, input_data.repo_url, input_data.title, input_data.body, input_data.head, input_data.base)\n    yield ('number', number)\n    yield ('url', url)\nexcept Exception as e:\n    yield ('error', str(e))",
        "(number, url) = self.create_pr(credentials, input_data.repo_url, input_data.title, input_data.body, input_data.head, input_data.base)",
        "(yield ('number', number))",
        "(yield ('url', url))",
        "(yield ('error', str(e)))",
        "class GithubReadPullRequestBlock(Block):\n\n    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField('repo')\n        pr_url: str = SchemaField(description='URL of the GitHub pull request', placeholder='https://github.com/owner/repo/pull/1')\n        include_pr_changes: bool = SchemaField(description='Whether to include the changes made in the pull request', default=False)\n\n    class Output(BlockSchema):\n        title: str = SchemaField(description='Title of the pull request')\n        body: str = SchemaField(description='Body of the pull request')\n        author: str = SchemaField(description='User who created the pull request')\n        changes: str = SchemaField(description='Changes made in the pull request')\n        error: str = SchemaField(description='Error message if reading the pull request failed')\n\n    def __init__(self):\n        super().__init__(id='bf94b2a4-1a30-4600-a783-a8a44ee31301', description='This block reads the body, title, user, and changes of a specified GitHub pull request.', categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=GithubReadPullRequestBlock.Input, output_schema=GithubReadPullRequestBlock.Output, test_input={'pr_url': 'https://github.com/owner/repo/pull/1', 'include_pr_changes': True, 'credentials': TEST_CREDENTIALS_INPUT}, test_credentials=TEST_CREDENTIALS, test_output=[('title', 'Title of the pull request'), ('body', 'This is the body of the pull request.'), ('author', 'username'), ('changes', 'List of changes made in the pull request.')], test_mock={'read_pr': lambda *args, **kwargs: ('Title of the pull request', 'This is the body of the pull request.', 'username'), 'read_pr_changes': lambda *args, **kwargs: 'List of changes made in the pull request.'})\n\n    @staticmethod\n    def read_pr(credentials: GithubCredentials, pr_url: str) -> tuple[str, str, str]:\n        api = get_api(credentials)\n        issue_url = pr_url.replace('/pull/', '/issues/')\n        response = api.get(issue_url)\n        data = response.json()\n        title = data.get('title', 'No title found')\n        body = data.get('body', 'No body content found')\n        author = data.get('user', {}).get('login', 'No user found')\n        return (title, body, author)\n\n    @staticmethod\n    def read_pr_changes(credentials: GithubCredentials, pr_url: str) -> str:\n        api = get_api(credentials)\n        files_url = prepare_pr_api_url(pr_url=pr_url, path='files')\n        response = api.get(files_url)\n        files = response.json()\n        changes = []\n        for file in files:\n            filename = file.get('filename')\n            patch = file.get('patch')\n            if filename and patch:\n                changes.append(f'File: {filename}\\n{patch}')\n        return '\\n\\n'.join(changes)\n\n    def run(self, input_data: Input, *, credentials: GithubCredentials, **kwargs) -> BlockOutput:\n        (title, body, author) = self.read_pr(credentials, input_data.pr_url)\n        yield ('title', title)\n        yield ('body', body)\n        yield ('author', author)\n        if input_data.include_pr_changes:\n            changes = self.read_pr_changes(credentials, input_data.pr_url)\n            yield ('changes', changes)",
        "class Input(BlockSchema):\n    credentials: GithubCredentialsInput = GithubCredentialsField('repo')\n    pr_url: str = SchemaField(description='URL of the GitHub pull request', placeholder='https://github.com/owner/repo/pull/1')\n    include_pr_changes: bool = SchemaField(description='Whether to include the changes made in the pull request', default=False)",
        "credentials: GithubCredentialsInput = GithubCredentialsField('repo')",
        "pr_url: str = SchemaField(description='URL of the GitHub pull request', placeholder='https://github.com/owner/repo/pull/1')",
        "include_pr_changes: bool = SchemaField(description='Whether to include the changes made in the pull request', default=False)",
        "class Output(BlockSchema):\n    title: str = SchemaField(description='Title of the pull request')\n    body: str = SchemaField(description='Body of the pull request')\n    author: str = SchemaField(description='User who created the pull request')\n    changes: str = SchemaField(description='Changes made in the pull request')\n    error: str = SchemaField(description='Error message if reading the pull request failed')",
        "title: str = SchemaField(description='Title of the pull request')",
        "body: str = SchemaField(description='Body of the pull request')",
        "author: str = SchemaField(description='User who created the pull request')",
        "changes: str = SchemaField(description='Changes made in the pull request')",
        "error: str = SchemaField(description='Error message if reading the pull request failed')",
        "def __init__(self):\n    super().__init__(id='bf94b2a4-1a30-4600-a783-a8a44ee31301', description='This block reads the body, title, user, and changes of a specified GitHub pull request.', categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=GithubReadPullRequestBlock.Input, output_schema=GithubReadPullRequestBlock.Output, test_input={'pr_url': 'https://github.com/owner/repo/pull/1', 'include_pr_changes': True, 'credentials': TEST_CREDENTIALS_INPUT}, test_credentials=TEST_CREDENTIALS, test_output=[('title', 'Title of the pull request'), ('body', 'This is the body of the pull request.'), ('author', 'username'), ('changes', 'List of changes made in the pull request.')], test_mock={'read_pr': lambda *args, **kwargs: ('Title of the pull request', 'This is the body of the pull request.', 'username'), 'read_pr_changes': lambda *args, **kwargs: 'List of changes made in the pull request.'})",
        "super().__init__()",
        "@staticmethod\ndef read_pr(credentials: GithubCredentials, pr_url: str) -> tuple[str, str, str]:\n    api = get_api(credentials)\n    issue_url = pr_url.replace('/pull/', '/issues/')\n    response = api.get(issue_url)\n    data = response.json()\n    title = data.get('title', 'No title found')\n    body = data.get('body', 'No body content found')\n    author = data.get('user', {}).get('login', 'No user found')\n    return (title, body, author)",
        "api = get_api(credentials)",
        "issue_url = pr_url.replace('/pull/', '/issues/')",
        "response = api.get(issue_url)",
        "data = response.json()",
        "title = data.get('title', 'No title found')",
        "body = data.get('body', 'No body content found')",
        "author = data.get('user', {}).get('login', 'No user found')",
        "return (title, body, author)"
      ],
      "code": "def run(self, input_data: Input, *, credentials: GithubCredentials, **kwargs) -> BlockOutput:\n    try:\n        (number, url) = self.create_pr(credentials, input_data.repo_url, input_data.title, input_data.body, input_data.head, input_data.base)\n        yield ('number', number)\n        yield ('url', url)\n    except Exception as e:\n        yield ('error', str(e))\ntry:\n    (number, url) = self.create_pr(credentials, input_data.repo_url, input_data.title, input_data.body, input_data.head, input_data.base)\n    yield ('number', number)\n    yield ('url', url)\nexcept Exception as e:\n    yield ('error', str(e))\n(number, url) = self.create_pr(credentials, input_data.repo_url, input_data.title, input_data.body, input_data.head, input_data.base)\n(yield ('number', number))\n(yield ('url', url))\n(yield ('error', str(e)))\nclass GithubReadPullRequestBlock(Block):\n\n    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField('repo')\n        pr_url: str = SchemaField(description='URL of the GitHub pull request', placeholder='https://github.com/owner/repo/pull/1')\n        include_pr_changes: bool = SchemaField(description='Whether to include the changes made in the pull request', default=False)\n\n    class Output(BlockSchema):\n        title: str = SchemaField(description='Title of the pull request')\n        body: str = SchemaField(description='Body of the pull request')\n        author: str = SchemaField(description='User who created the pull request')\n        changes: str = SchemaField(description='Changes made in the pull request')\n        error: str = SchemaField(description='Error message if reading the pull request failed')\n\n    def __init__(self):\n        super().__init__(id='bf94b2a4-1a30-4600-a783-a8a44ee31301', description='This block reads the body, title, user, and changes of a specified GitHub pull request.', categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=GithubReadPullRequestBlock.Input, output_schema=GithubReadPullRequestBlock.Output, test_input={'pr_url': 'https://github.com/owner/repo/pull/1', 'include_pr_changes': True, 'credentials': TEST_CREDENTIALS_INPUT}, test_credentials=TEST_CREDENTIALS, test_output=[('title', 'Title of the pull request'), ('body', 'This is the body of the pull request.'), ('author', 'username'), ('changes', 'List of changes made in the pull request.')], test_mock={'read_pr': lambda *args, **kwargs: ('Title of the pull request', 'This is the body of the pull request.', 'username'), 'read_pr_changes': lambda *args, **kwargs: 'List of changes made in the pull request.'})\n\n    @staticmethod\n    def read_pr(credentials: GithubCredentials, pr_url: str) -> tuple[str, str, str]:\n        api = get_api(credentials)\n        issue_url = pr_url.replace('/pull/', '/issues/')\n        response = api.get(issue_url)\n        data = response.json()\n        title = data.get('title', 'No title found')\n        body = data.get('body', 'No body content found')\n        author = data.get('user', {}).get('login', 'No user found')\n        return (title, body, author)\n\n    @staticmethod\n    def read_pr_changes(credentials: GithubCredentials, pr_url: str) -> str:\n        api = get_api(credentials)\n        files_url = prepare_pr_api_url(pr_url=pr_url, path='files')\n        response = api.get(files_url)\n        files = response.json()\n        changes = []\n        for file in files:\n            filename = file.get('filename')\n            patch = file.get('patch')\n            if filename and patch:\n                changes.append(f'File: {filename}\\n{patch}')\n        return '\\n\\n'.join(changes)\n\n    def run(self, input_data: Input, *, credentials: GithubCredentials, **kwargs) -> BlockOutput:\n        (title, body, author) = self.read_pr(credentials, input_data.pr_url)\n        yield ('title', title)\n        yield ('body', body)\n        yield ('author', author)\n        if input_data.include_pr_changes:\n            changes = self.read_pr_changes(credentials, input_data.pr_url)\n            yield ('changes', changes)\nclass Input(BlockSchema):\n    credentials: GithubCredentialsInput = GithubCredentialsField('repo')\n    pr_url: str = SchemaField(description='URL of the GitHub pull request', placeholder='https://github.com/owner/repo/pull/1')\n    include_pr_changes: bool = SchemaField(description='Whether to include the changes made in the pull request', default=False)\ncredentials: GithubCredentialsInput = GithubCredentialsField('repo')\npr_url: str = SchemaField(description='URL of the GitHub pull request', placeholder='https://github.com/owner/repo/pull/1')\ninclude_pr_changes: bool = SchemaField(description='Whether to include the changes made in the pull request', default=False)\nclass Output(BlockSchema):\n    title: str = SchemaField(description='Title of the pull request')\n    body: str = SchemaField(description='Body of the pull request')\n    author: str = SchemaField(description='User who created the pull request')\n    changes: str = SchemaField(description='Changes made in the pull request')\n    error: str = SchemaField(description='Error message if reading the pull request failed')\ntitle: str = SchemaField(description='Title of the pull request')\nbody: str = SchemaField(description='Body of the pull request')\nauthor: str = SchemaField(description='User who created the pull request')\nchanges: str = SchemaField(description='Changes made in the pull request')\nerror: str = SchemaField(description='Error message if reading the pull request failed')\ndef __init__(self):\n    super().__init__(id='bf94b2a4-1a30-4600-a783-a8a44ee31301', description='This block reads the body, title, user, and changes of a specified GitHub pull request.', categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=GithubReadPullRequestBlock.Input, output_schema=GithubReadPullRequestBlock.Output, test_input={'pr_url': 'https://github.com/owner/repo/pull/1', 'include_pr_changes': True, 'credentials': TEST_CREDENTIALS_INPUT}, test_credentials=TEST_CREDENTIALS, test_output=[('title', 'Title of the pull request'), ('body', 'This is the body of the pull request.'), ('author', 'username'), ('changes', 'List of changes made in the pull request.')], test_mock={'read_pr': lambda *args, **kwargs: ('Title of the pull request', 'This is the body of the pull request.', 'username'), 'read_pr_changes': lambda *args, **kwargs: 'List of changes made in the pull request.'})\nsuper().__init__()\n@staticmethod\ndef read_pr(credentials: GithubCredentials, pr_url: str) -> tuple[str, str, str]:\n    api = get_api(credentials)\n    issue_url = pr_url.replace('/pull/', '/issues/')\n    response = api.get(issue_url)\n    data = response.json()\n    title = data.get('title', 'No title found')\n    body = data.get('body', 'No body content found')\n    author = data.get('user', {}).get('login', 'No user found')\n    return (title, body, author)\napi = get_api(credentials)\nissue_url = pr_url.replace('/pull/', '/issues/')\nresponse = api.get(issue_url)\ndata = response.json()\ntitle = data.get('title', 'No title found')\nbody = data.get('body', 'No body content found')\nauthor = data.get('user', {}).get('login', 'No user found')\nreturn (title, body, author)"
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [
        "@staticmethod\ndef read_pr_changes(credentials: GithubCredentials, pr_url: str) -> str:\n    api = get_api(credentials)\n    files_url = prepare_pr_api_url(pr_url=pr_url, path='files')\n    response = api.get(files_url)\n    files = response.json()\n    changes = []\n    for file in files:\n        filename = file.get('filename')\n        patch = file.get('patch')\n        if filename and patch:\n            changes.append(f'File: {filename}\\n{patch}')\n    return '\\n\\n'.join(changes)",
        "api = get_api(credentials)",
        "files_url = prepare_pr_api_url(pr_url=pr_url, path='files')",
        "response = api.get(files_url)",
        "files = response.json()",
        "changes = []"
      ],
      "code": "@staticmethod\ndef read_pr_changes(credentials: GithubCredentials, pr_url: str) -> str:\n    api = get_api(credentials)\n    files_url = prepare_pr_api_url(pr_url=pr_url, path='files')\n    response = api.get(files_url)\n    files = response.json()\n    changes = []\n    for file in files:\n        filename = file.get('filename')\n        patch = file.get('patch')\n        if filename and patch:\n            changes.append(f'File: {filename}\\n{patch}')\n    return '\\n\\n'.join(changes)\napi = get_api(credentials)\nfiles_url = prepare_pr_api_url(pr_url=pr_url, path='files')\nresponse = api.get(files_url)\nfiles = response.json()\nchanges = []"
    },
    {
      "id": "n4",
      "type": "block",
      "statements": [
        "file",
        "files"
      ],
      "code": "file\nfiles"
    },
    {
      "id": "n5",
      "type": "block",
      "statements": [
        "filename = file.get('filename')",
        "patch = file.get('patch')",
        "filename and patch"
      ],
      "code": "filename = file.get('filename')\npatch = file.get('patch')\nfilename and patch"
    },
    {
      "id": "n6",
      "type": "block",
      "statements": [
        "return '\\n\\n'.join(changes)"
      ],
      "code": "return '\\n\\n'.join(changes)"
    },
    {
      "id": "n7",
      "type": "block",
      "statements": [
        "changes.append(f'File: {filename}\\n{patch}')"
      ],
      "code": "changes.append(f'File: {filename}\\n{patch}')"
    },
    {
      "id": "n8",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n9",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n10",
      "type": "block",
      "statements": [
        "def run(self, input_data: Input, *, credentials: GithubCredentials, **kwargs) -> BlockOutput:\n    (title, body, author) = self.read_pr(credentials, input_data.pr_url)\n    yield ('title', title)\n    yield ('body', body)\n    yield ('author', author)\n    if input_data.include_pr_changes:\n        changes = self.read_pr_changes(credentials, input_data.pr_url)\n        yield ('changes', changes)",
        "(title, body, author) = self.read_pr(credentials, input_data.pr_url)",
        "(yield ('title', title))",
        "(yield ('body', body))",
        "(yield ('author', author))",
        "input_data.include_pr_changes"
      ],
      "code": "def run(self, input_data: Input, *, credentials: GithubCredentials, **kwargs) -> BlockOutput:\n    (title, body, author) = self.read_pr(credentials, input_data.pr_url)\n    yield ('title', title)\n    yield ('body', body)\n    yield ('author', author)\n    if input_data.include_pr_changes:\n        changes = self.read_pr_changes(credentials, input_data.pr_url)\n        yield ('changes', changes)\n(title, body, author) = self.read_pr(credentials, input_data.pr_url)\n(yield ('title', title))\n(yield ('body', body))\n(yield ('author', author))\ninput_data.include_pr_changes"
    },
    {
      "id": "n11",
      "type": "block",
      "statements": [
        "changes = self.read_pr_changes(credentials, input_data.pr_url)",
        "(yield ('changes', changes))"
      ],
      "code": "changes = self.read_pr_changes(credentials, input_data.pr_url)\n(yield ('changes', changes))"
    },
    {
      "id": "n12",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n13",
      "type": "block",
      "statements": [
        "class GithubAssignPRReviewerBlock(Block):\n\n    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField('repo')\n        pr_url: str = SchemaField(description='URL of the GitHub pull request', placeholder='https://github.com/owner/repo/pull/1')\n        reviewer: str = SchemaField(description='Username of the reviewer to assign', placeholder=\"Enter the reviewer's username\")\n\n    class Output(BlockSchema):\n        status: str = SchemaField(description='Status of the reviewer assignment operation')\n        error: str = SchemaField(description='Error message if the reviewer assignment failed')\n\n    def __init__(self):\n        super().__init__(id='c0d22c5e-e688-43e3-ba43-d5faba7927fd', description='This block assigns a reviewer to a specified GitHub pull request.', categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=GithubAssignPRReviewerBlock.Input, output_schema=GithubAssignPRReviewerBlock.Output, test_input={'pr_url': 'https://github.com/owner/repo/pull/1', 'reviewer': 'reviewer_username', 'credentials': TEST_CREDENTIALS_INPUT}, test_credentials=TEST_CREDENTIALS, test_output=[('status', 'Reviewer assigned successfully')], test_mock={'assign_reviewer': lambda *args, **kwargs: 'Reviewer assigned successfully'})\n\n    @staticmethod\n    def assign_reviewer(credentials: GithubCredentials, pr_url: str, reviewer: str) -> str:\n        api = get_api(credentials)\n        reviewers_url = prepare_pr_api_url(pr_url=pr_url, path='requested_reviewers')\n        data = {'reviewers': [reviewer]}\n        api.post(reviewers_url, json=data)\n        return 'Reviewer assigned successfully'\n\n    def run(self, input_data: Input, *, credentials: GithubCredentials, **kwargs) -> BlockOutput:\n        try:\n            status = self.assign_reviewer(credentials, input_data.pr_url, input_data.reviewer)\n            yield ('status', status)\n        except Exception as e:\n            yield ('error', str(e))",
        "class Input(BlockSchema):\n    credentials: GithubCredentialsInput = GithubCredentialsField('repo')\n    pr_url: str = SchemaField(description='URL of the GitHub pull request', placeholder='https://github.com/owner/repo/pull/1')\n    reviewer: str = SchemaField(description='Username of the reviewer to assign', placeholder=\"Enter the reviewer's username\")",
        "credentials: GithubCredentialsInput = GithubCredentialsField('repo')",
        "pr_url: str = SchemaField(description='URL of the GitHub pull request', placeholder='https://github.com/owner/repo/pull/1')",
        "reviewer: str = SchemaField(description='Username of the reviewer to assign', placeholder=\"Enter the reviewer's username\")",
        "class Output(BlockSchema):\n    status: str = SchemaField(description='Status of the reviewer assignment operation')\n    error: str = SchemaField(description='Error message if the reviewer assignment failed')",
        "status: str = SchemaField(description='Status of the reviewer assignment operation')",
        "error: str = SchemaField(description='Error message if the reviewer assignment failed')",
        "def __init__(self):\n    super().__init__(id='c0d22c5e-e688-43e3-ba43-d5faba7927fd', description='This block assigns a reviewer to a specified GitHub pull request.', categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=GithubAssignPRReviewerBlock.Input, output_schema=GithubAssignPRReviewerBlock.Output, test_input={'pr_url': 'https://github.com/owner/repo/pull/1', 'reviewer': 'reviewer_username', 'credentials': TEST_CREDENTIALS_INPUT}, test_credentials=TEST_CREDENTIALS, test_output=[('status', 'Reviewer assigned successfully')], test_mock={'assign_reviewer': lambda *args, **kwargs: 'Reviewer assigned successfully'})",
        "super().__init__()",
        "@staticmethod\ndef assign_reviewer(credentials: GithubCredentials, pr_url: str, reviewer: str) -> str:\n    api = get_api(credentials)\n    reviewers_url = prepare_pr_api_url(pr_url=pr_url, path='requested_reviewers')\n    data = {'reviewers': [reviewer]}\n    api.post(reviewers_url, json=data)\n    return 'Reviewer assigned successfully'",
        "api = get_api(credentials)",
        "reviewers_url = prepare_pr_api_url(pr_url=pr_url, path='requested_reviewers')",
        "data = {'reviewers': [reviewer]}",
        "api.post(reviewers_url)",
        "return 'Reviewer assigned successfully'"
      ],
      "code": "class GithubAssignPRReviewerBlock(Block):\n\n    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField('repo')\n        pr_url: str = SchemaField(description='URL of the GitHub pull request', placeholder='https://github.com/owner/repo/pull/1')\n        reviewer: str = SchemaField(description='Username of the reviewer to assign', placeholder=\"Enter the reviewer's username\")\n\n    class Output(BlockSchema):\n        status: str = SchemaField(description='Status of the reviewer assignment operation')\n        error: str = SchemaField(description='Error message if the reviewer assignment failed')\n\n    def __init__(self):\n        super().__init__(id='c0d22c5e-e688-43e3-ba43-d5faba7927fd', description='This block assigns a reviewer to a specified GitHub pull request.', categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=GithubAssignPRReviewerBlock.Input, output_schema=GithubAssignPRReviewerBlock.Output, test_input={'pr_url': 'https://github.com/owner/repo/pull/1', 'reviewer': 'reviewer_username', 'credentials': TEST_CREDENTIALS_INPUT}, test_credentials=TEST_CREDENTIALS, test_output=[('status', 'Reviewer assigned successfully')], test_mock={'assign_reviewer': lambda *args, **kwargs: 'Reviewer assigned successfully'})\n\n    @staticmethod\n    def assign_reviewer(credentials: GithubCredentials, pr_url: str, reviewer: str) -> str:\n        api = get_api(credentials)\n        reviewers_url = prepare_pr_api_url(pr_url=pr_url, path='requested_reviewers')\n        data = {'reviewers': [reviewer]}\n        api.post(reviewers_url, json=data)\n        return 'Reviewer assigned successfully'\n\n    def run(self, input_data: Input, *, credentials: GithubCredentials, **kwargs) -> BlockOutput:\n        try:\n            status = self.assign_reviewer(credentials, input_data.pr_url, input_data.reviewer)\n            yield ('status', status)\n        except Exception as e:\n            yield ('error', str(e))\nclass Input(BlockSchema):\n    credentials: GithubCredentialsInput = GithubCredentialsField('repo')\n    pr_url: str = SchemaField(description='URL of the GitHub pull request', placeholder='https://github.com/owner/repo/pull/1')\n    reviewer: str = SchemaField(description='Username of the reviewer to assign', placeholder=\"Enter the reviewer's username\")\ncredentials: GithubCredentialsInput = GithubCredentialsField('repo')\npr_url: str = SchemaField(description='URL of the GitHub pull request', placeholder='https://github.com/owner/repo/pull/1')\nreviewer: str = SchemaField(description='Username of the reviewer to assign', placeholder=\"Enter the reviewer's username\")\nclass Output(BlockSchema):\n    status: str = SchemaField(description='Status of the reviewer assignment operation')\n    error: str = SchemaField(description='Error message if the reviewer assignment failed')\nstatus: str = SchemaField(description='Status of the reviewer assignment operation')\nerror: str = SchemaField(description='Error message if the reviewer assignment failed')\ndef __init__(self):\n    super().__init__(id='c0d22c5e-e688-43e3-ba43-d5faba7927fd', description='This block assigns a reviewer to a specified GitHub pull request.', categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=GithubAssignPRReviewerBlock.Input, output_schema=GithubAssignPRReviewerBlock.Output, test_input={'pr_url': 'https://github.com/owner/repo/pull/1', 'reviewer': 'reviewer_username', 'credentials': TEST_CREDENTIALS_INPUT}, test_credentials=TEST_CREDENTIALS, test_output=[('status', 'Reviewer assigned successfully')], test_mock={'assign_reviewer': lambda *args, **kwargs: 'Reviewer assigned successfully'})\nsuper().__init__()\n@staticmethod\ndef assign_reviewer(credentials: GithubCredentials, pr_url: str, reviewer: str) -> str:\n    api = get_api(credentials)\n    reviewers_url = prepare_pr_api_url(pr_url=pr_url, path='requested_reviewers')\n    data = {'reviewers': [reviewer]}\n    api.post(reviewers_url, json=data)\n    return 'Reviewer assigned successfully'\napi = get_api(credentials)\nreviewers_url = prepare_pr_api_url(pr_url=pr_url, path='requested_reviewers')\ndata = {'reviewers': [reviewer]}\napi.post(reviewers_url)\nreturn 'Reviewer assigned successfully'"
    },
    {
      "id": "n14",
      "type": "block",
      "statements": [
        "def run(self, input_data: Input, *, credentials: GithubCredentials, **kwargs) -> BlockOutput:\n    try:\n        status = self.assign_reviewer(credentials, input_data.pr_url, input_data.reviewer)\n        yield ('status', status)\n    except Exception as e:\n        yield ('error', str(e))",
        "try:\n    status = self.assign_reviewer(credentials, input_data.pr_url, input_data.reviewer)\n    yield ('status', status)\nexcept Exception as e:\n    yield ('error', str(e))",
        "status = self.assign_reviewer(credentials, input_data.pr_url, input_data.reviewer)",
        "(yield ('status', status))",
        "(yield ('error', str(e)))",
        "class GithubUnassignPRReviewerBlock(Block):\n\n    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField('repo')\n        pr_url: str = SchemaField(description='URL of the GitHub pull request', placeholder='https://github.com/owner/repo/pull/1')\n        reviewer: str = SchemaField(description='Username of the reviewer to unassign', placeholder=\"Enter the reviewer's username\")\n\n    class Output(BlockSchema):\n        status: str = SchemaField(description='Status of the reviewer unassignment operation')\n        error: str = SchemaField(description='Error message if the reviewer unassignment failed')\n\n    def __init__(self):\n        super().__init__(id='9637945d-c602-4875-899a-9c22f8fd30de', description='This block unassigns a reviewer from a specified GitHub pull request.', categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=GithubUnassignPRReviewerBlock.Input, output_schema=GithubUnassignPRReviewerBlock.Output, test_input={'pr_url': 'https://github.com/owner/repo/pull/1', 'reviewer': 'reviewer_username', 'credentials': TEST_CREDENTIALS_INPUT}, test_credentials=TEST_CREDENTIALS, test_output=[('status', 'Reviewer unassigned successfully')], test_mock={'unassign_reviewer': lambda *args, **kwargs: 'Reviewer unassigned successfully'})\n\n    @staticmethod\n    def unassign_reviewer(credentials: GithubCredentials, pr_url: str, reviewer: str) -> str:\n        api = get_api(credentials)\n        reviewers_url = prepare_pr_api_url(pr_url=pr_url, path='requested_reviewers')\n        data = {'reviewers': [reviewer]}\n        api.delete(reviewers_url, json=data)\n        return 'Reviewer unassigned successfully'\n\n    def run(self, input_data: Input, *, credentials: GithubCredentials, **kwargs) -> BlockOutput:\n        try:\n            status = self.unassign_reviewer(credentials, input_data.pr_url, input_data.reviewer)\n            yield ('status', status)\n        except Exception as e:\n            yield ('error', str(e))",
        "class Input(BlockSchema):\n    credentials: GithubCredentialsInput = GithubCredentialsField('repo')\n    pr_url: str = SchemaField(description='URL of the GitHub pull request', placeholder='https://github.com/owner/repo/pull/1')\n    reviewer: str = SchemaField(description='Username of the reviewer to unassign', placeholder=\"Enter the reviewer's username\")",
        "credentials: GithubCredentialsInput = GithubCredentialsField('repo')",
        "pr_url: str = SchemaField(description='URL of the GitHub pull request', placeholder='https://github.com/owner/repo/pull/1')",
        "reviewer: str = SchemaField(description='Username of the reviewer to unassign', placeholder=\"Enter the reviewer's username\")",
        "class Output(BlockSchema):\n    status: str = SchemaField(description='Status of the reviewer unassignment operation')\n    error: str = SchemaField(description='Error message if the reviewer unassignment failed')",
        "status: str = SchemaField(description='Status of the reviewer unassignment operation')",
        "error: str = SchemaField(description='Error message if the reviewer unassignment failed')",
        "def __init__(self):\n    super().__init__(id='9637945d-c602-4875-899a-9c22f8fd30de', description='This block unassigns a reviewer from a specified GitHub pull request.', categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=GithubUnassignPRReviewerBlock.Input, output_schema=GithubUnassignPRReviewerBlock.Output, test_input={'pr_url': 'https://github.com/owner/repo/pull/1', 'reviewer': 'reviewer_username', 'credentials': TEST_CREDENTIALS_INPUT}, test_credentials=TEST_CREDENTIALS, test_output=[('status', 'Reviewer unassigned successfully')], test_mock={'unassign_reviewer': lambda *args, **kwargs: 'Reviewer unassigned successfully'})",
        "super().__init__()",
        "@staticmethod\ndef unassign_reviewer(credentials: GithubCredentials, pr_url: str, reviewer: str) -> str:\n    api = get_api(credentials)\n    reviewers_url = prepare_pr_api_url(pr_url=pr_url, path='requested_reviewers')\n    data = {'reviewers': [reviewer]}\n    api.delete(reviewers_url, json=data)\n    return 'Reviewer unassigned successfully'",
        "api = get_api(credentials)",
        "reviewers_url = prepare_pr_api_url(pr_url=pr_url, path='requested_reviewers')",
        "data = {'reviewers': [reviewer]}",
        "api.delete(reviewers_url)",
        "return 'Reviewer unassigned successfully'"
      ],
      "code": "def run(self, input_data: Input, *, credentials: GithubCredentials, **kwargs) -> BlockOutput:\n    try:\n        status = self.assign_reviewer(credentials, input_data.pr_url, input_data.reviewer)\n        yield ('status', status)\n    except Exception as e:\n        yield ('error', str(e))\ntry:\n    status = self.assign_reviewer(credentials, input_data.pr_url, input_data.reviewer)\n    yield ('status', status)\nexcept Exception as e:\n    yield ('error', str(e))\nstatus = self.assign_reviewer(credentials, input_data.pr_url, input_data.reviewer)\n(yield ('status', status))\n(yield ('error', str(e)))\nclass GithubUnassignPRReviewerBlock(Block):\n\n    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField('repo')\n        pr_url: str = SchemaField(description='URL of the GitHub pull request', placeholder='https://github.com/owner/repo/pull/1')\n        reviewer: str = SchemaField(description='Username of the reviewer to unassign', placeholder=\"Enter the reviewer's username\")\n\n    class Output(BlockSchema):\n        status: str = SchemaField(description='Status of the reviewer unassignment operation')\n        error: str = SchemaField(description='Error message if the reviewer unassignment failed')\n\n    def __init__(self):\n        super().__init__(id='9637945d-c602-4875-899a-9c22f8fd30de', description='This block unassigns a reviewer from a specified GitHub pull request.', categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=GithubUnassignPRReviewerBlock.Input, output_schema=GithubUnassignPRReviewerBlock.Output, test_input={'pr_url': 'https://github.com/owner/repo/pull/1', 'reviewer': 'reviewer_username', 'credentials': TEST_CREDENTIALS_INPUT}, test_credentials=TEST_CREDENTIALS, test_output=[('status', 'Reviewer unassigned successfully')], test_mock={'unassign_reviewer': lambda *args, **kwargs: 'Reviewer unassigned successfully'})\n\n    @staticmethod\n    def unassign_reviewer(credentials: GithubCredentials, pr_url: str, reviewer: str) -> str:\n        api = get_api(credentials)\n        reviewers_url = prepare_pr_api_url(pr_url=pr_url, path='requested_reviewers')\n        data = {'reviewers': [reviewer]}\n        api.delete(reviewers_url, json=data)\n        return 'Reviewer unassigned successfully'\n\n    def run(self, input_data: Input, *, credentials: GithubCredentials, **kwargs) -> BlockOutput:\n        try:\n            status = self.unassign_reviewer(credentials, input_data.pr_url, input_data.reviewer)\n            yield ('status', status)\n        except Exception as e:\n            yield ('error', str(e))\nclass Input(BlockSchema):\n    credentials: GithubCredentialsInput = GithubCredentialsField('repo')\n    pr_url: str = SchemaField(description='URL of the GitHub pull request', placeholder='https://github.com/owner/repo/pull/1')\n    reviewer: str = SchemaField(description='Username of the reviewer to unassign', placeholder=\"Enter the reviewer's username\")\ncredentials: GithubCredentialsInput = GithubCredentialsField('repo')\npr_url: str = SchemaField(description='URL of the GitHub pull request', placeholder='https://github.com/owner/repo/pull/1')\nreviewer: str = SchemaField(description='Username of the reviewer to unassign', placeholder=\"Enter the reviewer's username\")\nclass Output(BlockSchema):\n    status: str = SchemaField(description='Status of the reviewer unassignment operation')\n    error: str = SchemaField(description='Error message if the reviewer unassignment failed')\nstatus: str = SchemaField(description='Status of the reviewer unassignment operation')\nerror: str = SchemaField(description='Error message if the reviewer unassignment failed')\ndef __init__(self):\n    super().__init__(id='9637945d-c602-4875-899a-9c22f8fd30de', description='This block unassigns a reviewer from a specified GitHub pull request.', categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=GithubUnassignPRReviewerBlock.Input, output_schema=GithubUnassignPRReviewerBlock.Output, test_input={'pr_url': 'https://github.com/owner/repo/pull/1', 'reviewer': 'reviewer_username', 'credentials': TEST_CREDENTIALS_INPUT}, test_credentials=TEST_CREDENTIALS, test_output=[('status', 'Reviewer unassigned successfully')], test_mock={'unassign_reviewer': lambda *args, **kwargs: 'Reviewer unassigned successfully'})\nsuper().__init__()\n@staticmethod\ndef unassign_reviewer(credentials: GithubCredentials, pr_url: str, reviewer: str) -> str:\n    api = get_api(credentials)\n    reviewers_url = prepare_pr_api_url(pr_url=pr_url, path='requested_reviewers')\n    data = {'reviewers': [reviewer]}\n    api.delete(reviewers_url, json=data)\n    return 'Reviewer unassigned successfully'\napi = get_api(credentials)\nreviewers_url = prepare_pr_api_url(pr_url=pr_url, path='requested_reviewers')\ndata = {'reviewers': [reviewer]}\napi.delete(reviewers_url)\nreturn 'Reviewer unassigned successfully'"
    },
    {
      "id": "n15",
      "type": "block",
      "statements": [
        "def run(self, input_data: Input, *, credentials: GithubCredentials, **kwargs) -> BlockOutput:\n    try:\n        status = self.unassign_reviewer(credentials, input_data.pr_url, input_data.reviewer)\n        yield ('status', status)\n    except Exception as e:\n        yield ('error', str(e))",
        "try:\n    status = self.unassign_reviewer(credentials, input_data.pr_url, input_data.reviewer)\n    yield ('status', status)\nexcept Exception as e:\n    yield ('error', str(e))",
        "status = self.unassign_reviewer(credentials, input_data.pr_url, input_data.reviewer)",
        "(yield ('status', status))",
        "(yield ('error', str(e)))",
        "class GithubListPRReviewersBlock(Block):\n\n    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField('repo')\n        pr_url: str = SchemaField(description='URL of the GitHub pull request', placeholder='https://github.com/owner/repo/pull/1')\n\n    class Output(BlockSchema):\n\n        class ReviewerItem(TypedDict):\n            username: str\n            url: str\n        reviewer: ReviewerItem = SchemaField(title='Reviewer', description='Reviewers with their username and profile URL')\n        error: str = SchemaField(description='Error message if listing reviewers failed')\n\n    def __init__(self):\n        super().__init__(id='2646956e-96d5-4754-a3df-034017e7ed96', description='This block lists all reviewers for a specified GitHub pull request.', categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=GithubListPRReviewersBlock.Input, output_schema=GithubListPRReviewersBlock.Output, test_input={'pr_url': 'https://github.com/owner/repo/pull/1', 'credentials': TEST_CREDENTIALS_INPUT}, test_credentials=TEST_CREDENTIALS, test_output=[('reviewer', {'username': 'reviewer1', 'url': 'https://github.com/reviewer1'})], test_mock={'list_reviewers': lambda *args, **kwargs: [{'username': 'reviewer1', 'url': 'https://github.com/reviewer1'}]})\n\n    @staticmethod\n    def list_reviewers(credentials: GithubCredentials, pr_url: str) -> list[Output.ReviewerItem]:\n        api = get_api(credentials)\n        reviewers_url = prepare_pr_api_url(pr_url=pr_url, path='requested_reviewers')\n        response = api.get(reviewers_url)\n        data = response.json()\n        reviewers: list[GithubListPRReviewersBlock.Output.ReviewerItem] = [{'username': reviewer['login'], 'url': reviewer['html_url']} for reviewer in data.get('users', [])]\n        return reviewers\n\n    def run(self, input_data: Input, *, credentials: GithubCredentials, **kwargs) -> BlockOutput:\n        reviewers = self.list_reviewers(credentials, input_data.pr_url)\n        yield from (('reviewer', reviewer) for reviewer in reviewers)",
        "class Input(BlockSchema):\n    credentials: GithubCredentialsInput = GithubCredentialsField('repo')\n    pr_url: str = SchemaField(description='URL of the GitHub pull request', placeholder='https://github.com/owner/repo/pull/1')",
        "credentials: GithubCredentialsInput = GithubCredentialsField('repo')",
        "pr_url: str = SchemaField(description='URL of the GitHub pull request', placeholder='https://github.com/owner/repo/pull/1')",
        "class Output(BlockSchema):\n\n    class ReviewerItem(TypedDict):\n        username: str\n        url: str\n    reviewer: ReviewerItem = SchemaField(title='Reviewer', description='Reviewers with their username and profile URL')\n    error: str = SchemaField(description='Error message if listing reviewers failed')",
        "class ReviewerItem(TypedDict):\n    username: str\n    url: str",
        "username: str",
        "url: str",
        "reviewer: ReviewerItem = SchemaField(title='Reviewer', description='Reviewers with their username and profile URL')",
        "error: str = SchemaField(description='Error message if listing reviewers failed')",
        "def __init__(self):\n    super().__init__(id='2646956e-96d5-4754-a3df-034017e7ed96', description='This block lists all reviewers for a specified GitHub pull request.', categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=GithubListPRReviewersBlock.Input, output_schema=GithubListPRReviewersBlock.Output, test_input={'pr_url': 'https://github.com/owner/repo/pull/1', 'credentials': TEST_CREDENTIALS_INPUT}, test_credentials=TEST_CREDENTIALS, test_output=[('reviewer', {'username': 'reviewer1', 'url': 'https://github.com/reviewer1'})], test_mock={'list_reviewers': lambda *args, **kwargs: [{'username': 'reviewer1', 'url': 'https://github.com/reviewer1'}]})",
        "super().__init__()",
        "@staticmethod\ndef list_reviewers(credentials: GithubCredentials, pr_url: str) -> list[Output.ReviewerItem]:\n    api = get_api(credentials)\n    reviewers_url = prepare_pr_api_url(pr_url=pr_url, path='requested_reviewers')\n    response = api.get(reviewers_url)\n    data = response.json()\n    reviewers: list[GithubListPRReviewersBlock.Output.ReviewerItem] = [{'username': reviewer['login'], 'url': reviewer['html_url']} for reviewer in data.get('users', [])]\n    return reviewers",
        "api = get_api(credentials)",
        "reviewers_url = prepare_pr_api_url(pr_url=pr_url, path='requested_reviewers')",
        "response = api.get(reviewers_url)",
        "data = response.json()",
        "reviewers: list[GithubListPRReviewersBlock.Output.ReviewerItem] = [{'username': reviewer['login'], 'url': reviewer['html_url']} for reviewer in data.get('users', [])]",
        "return reviewers"
      ],
      "code": "def run(self, input_data: Input, *, credentials: GithubCredentials, **kwargs) -> BlockOutput:\n    try:\n        status = self.unassign_reviewer(credentials, input_data.pr_url, input_data.reviewer)\n        yield ('status', status)\n    except Exception as e:\n        yield ('error', str(e))\ntry:\n    status = self.unassign_reviewer(credentials, input_data.pr_url, input_data.reviewer)\n    yield ('status', status)\nexcept Exception as e:\n    yield ('error', str(e))\nstatus = self.unassign_reviewer(credentials, input_data.pr_url, input_data.reviewer)\n(yield ('status', status))\n(yield ('error', str(e)))\nclass GithubListPRReviewersBlock(Block):\n\n    class Input(BlockSchema):\n        credentials: GithubCredentialsInput = GithubCredentialsField('repo')\n        pr_url: str = SchemaField(description='URL of the GitHub pull request', placeholder='https://github.com/owner/repo/pull/1')\n\n    class Output(BlockSchema):\n\n        class ReviewerItem(TypedDict):\n            username: str\n            url: str\n        reviewer: ReviewerItem = SchemaField(title='Reviewer', description='Reviewers with their username and profile URL')\n        error: str = SchemaField(description='Error message if listing reviewers failed')\n\n    def __init__(self):\n        super().__init__(id='2646956e-96d5-4754-a3df-034017e7ed96', description='This block lists all reviewers for a specified GitHub pull request.', categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=GithubListPRReviewersBlock.Input, output_schema=GithubListPRReviewersBlock.Output, test_input={'pr_url': 'https://github.com/owner/repo/pull/1', 'credentials': TEST_CREDENTIALS_INPUT}, test_credentials=TEST_CREDENTIALS, test_output=[('reviewer', {'username': 'reviewer1', 'url': 'https://github.com/reviewer1'})], test_mock={'list_reviewers': lambda *args, **kwargs: [{'username': 'reviewer1', 'url': 'https://github.com/reviewer1'}]})\n\n    @staticmethod\n    def list_reviewers(credentials: GithubCredentials, pr_url: str) -> list[Output.ReviewerItem]:\n        api = get_api(credentials)\n        reviewers_url = prepare_pr_api_url(pr_url=pr_url, path='requested_reviewers')\n        response = api.get(reviewers_url)\n        data = response.json()\n        reviewers: list[GithubListPRReviewersBlock.Output.ReviewerItem] = [{'username': reviewer['login'], 'url': reviewer['html_url']} for reviewer in data.get('users', [])]\n        return reviewers\n\n    def run(self, input_data: Input, *, credentials: GithubCredentials, **kwargs) -> BlockOutput:\n        reviewers = self.list_reviewers(credentials, input_data.pr_url)\n        yield from (('reviewer', reviewer) for reviewer in reviewers)\nclass Input(BlockSchema):\n    credentials: GithubCredentialsInput = GithubCredentialsField('repo')\n    pr_url: str = SchemaField(description='URL of the GitHub pull request', placeholder='https://github.com/owner/repo/pull/1')\ncredentials: GithubCredentialsInput = GithubCredentialsField('repo')\npr_url: str = SchemaField(description='URL of the GitHub pull request', placeholder='https://github.com/owner/repo/pull/1')\nclass Output(BlockSchema):\n\n    class ReviewerItem(TypedDict):\n        username: str\n        url: str\n    reviewer: ReviewerItem = SchemaField(title='Reviewer', description='Reviewers with their username and profile URL')\n    error: str = SchemaField(description='Error message if listing reviewers failed')\nclass ReviewerItem(TypedDict):\n    username: str\n    url: str\nusername: str\nurl: str\nreviewer: ReviewerItem = SchemaField(title='Reviewer', description='Reviewers with their username and profile URL')\nerror: str = SchemaField(description='Error message if listing reviewers failed')\ndef __init__(self):\n    super().__init__(id='2646956e-96d5-4754-a3df-034017e7ed96', description='This block lists all reviewers for a specified GitHub pull request.', categories={BlockCategory.DEVELOPER_TOOLS}, input_schema=GithubListPRReviewersBlock.Input, output_schema=GithubListPRReviewersBlock.Output, test_input={'pr_url': 'https://github.com/owner/repo/pull/1', 'credentials': TEST_CREDENTIALS_INPUT}, test_credentials=TEST_CREDENTIALS, test_output=[('reviewer', {'username': 'reviewer1', 'url': 'https://github.com/reviewer1'})], test_mock={'list_reviewers': lambda *args, **kwargs: [{'username': 'reviewer1', 'url': 'https://github.com/reviewer1'}]})\nsuper().__init__()\n@staticmethod\ndef list_reviewers(credentials: GithubCredentials, pr_url: str) -> list[Output.ReviewerItem]:\n    api = get_api(credentials)\n    reviewers_url = prepare_pr_api_url(pr_url=pr_url, path='requested_reviewers')\n    response = api.get(reviewers_url)\n    data = response.json()\n    reviewers: list[GithubListPRReviewersBlock.Output.ReviewerItem] = [{'username': reviewer['login'], 'url': reviewer['html_url']} for reviewer in data.get('users', [])]\n    return reviewers\napi = get_api(credentials)\nreviewers_url = prepare_pr_api_url(pr_url=pr_url, path='requested_reviewers')\nresponse = api.get(reviewers_url)\ndata = response.json()\nreviewers: list[GithubListPRReviewersBlock.Output.ReviewerItem] = [{'username': reviewer['login'], 'url': reviewer['html_url']} for reviewer in data.get('users', [])]\nreturn reviewers"
    },
    {
      "id": "n16",
      "type": "block",
      "statements": [
        "def run(self, input_data: Input, *, credentials: GithubCredentials, **kwargs) -> BlockOutput:\n    reviewers = self.list_reviewers(credentials, input_data.pr_url)\n    yield from (('reviewer', reviewer) for reviewer in reviewers)",
        "reviewers = self.list_reviewers(credentials, input_data.pr_url)",
        "(yield from (('reviewer', reviewer) for reviewer in reviewers))",
        "def prepare_pr_api_url(pr_url: str, path: str) -> str:\n    pattern = '^(?:https?://)?([^/]+/[^/]+/[^/]+)/pull/(\\\\d+)'\n    match = re.match(pattern, pr_url)\n    if not match:\n        return pr_url\n    (base_url, pr_number) = match.groups()\n    return f'{base_url}/pulls/{pr_number}/{path}'",
        "pattern = '^(?:https?://)?([^/]+/[^/]+/[^/]+)/pull/(\\\\d+)'",
        "match = re.match(pattern, pr_url)",
        "not match"
      ],
      "code": "def run(self, input_data: Input, *, credentials: GithubCredentials, **kwargs) -> BlockOutput:\n    reviewers = self.list_reviewers(credentials, input_data.pr_url)\n    yield from (('reviewer', reviewer) for reviewer in reviewers)\nreviewers = self.list_reviewers(credentials, input_data.pr_url)\n(yield from (('reviewer', reviewer) for reviewer in reviewers))\ndef prepare_pr_api_url(pr_url: str, path: str) -> str:\n    pattern = '^(?:https?://)?([^/]+/[^/]+/[^/]+)/pull/(\\\\d+)'\n    match = re.match(pattern, pr_url)\n    if not match:\n        return pr_url\n    (base_url, pr_number) = match.groups()\n    return f'{base_url}/pulls/{pr_number}/{path}'\npattern = '^(?:https?://)?([^/]+/[^/]+/[^/]+)/pull/(\\\\d+)'\nmatch = re.match(pattern, pr_url)\nnot match"
    },
    {
      "id": "n17",
      "type": "block",
      "statements": [
        "return pr_url"
      ],
      "code": "return pr_url"
    },
    {
      "id": "n18",
      "type": "block",
      "statements": [],
      "code": "\n(base_url, pr_number) = match.groups()\nreturn f'{base_url}/pulls/{pr_number}/{path}'"
    }
  ],
  "edges": [
    {
      "source": "n5",
      "target": "n8"
    },
    {
      "source": "n16",
      "target": "n17"
    },
    {
      "source": "n8",
      "target": "n9"
    },
    {
      "source": "n16",
      "target": "n18"
    },
    {
      "source": "n3",
      "target": "n4"
    },
    {
      "source": "n10",
      "target": "n11"
    },
    {
      "source": "n9",
      "target": "n4"
    },
    {
      "source": "n4",
      "target": "n5"
    },
    {
      "source": "n5",
      "target": "n7"
    },
    {
      "source": "n10",
      "target": "n12"
    },
    {
      "source": "n12",
      "target": "n13"
    },
    {
      "source": "n11",
      "target": "n13"
    },
    {
      "source": "n4",
      "target": "n6"
    },
    {
      "source": "n7",
      "target": "n9"
    }
  ]
}