{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "import asyncio",
        "import random",
        "from datetime import datetime",
        "import prisma.enums",
        "from faker import Faker",
        "from prisma import Prisma",
        "faker = Faker()",
        "NUM_USERS = 100",
        "NUM_AGENT_BLOCKS = 100",
        "MIN_GRAPHS_PER_USER = 1",
        "MAX_GRAPHS_PER_USER = 5",
        "MIN_NODES_PER_GRAPH = 2",
        "MAX_NODES_PER_GRAPH = 5",
        "MIN_PRESETS_PER_USER = 1",
        "MAX_PRESETS_PER_USER = 5",
        "MIN_AGENTS_PER_USER = 1",
        "MAX_AGENTS_PER_USER = 10",
        "MIN_EXECUTIONS_PER_GRAPH = 1",
        "MAX_EXECUTIONS_PER_GRAPH = 20",
        "MIN_REVIEWS_PER_VERSION = 1",
        "MAX_REVIEWS_PER_VERSION = 5",
        "def get_image():\n    url = faker.image_url()\n    while 'placekitten.com' in url:\n        url = faker.image_url()\n    return url",
        "url = faker.image_url()"
      ],
      "code": "import asyncio\nimport random\nfrom datetime import datetime\nimport prisma.enums\nfrom faker import Faker\nfrom prisma import Prisma\nfaker = Faker()\nNUM_USERS = 100\nNUM_AGENT_BLOCKS = 100\nMIN_GRAPHS_PER_USER = 1\nMAX_GRAPHS_PER_USER = 5\nMIN_NODES_PER_GRAPH = 2\nMAX_NODES_PER_GRAPH = 5\nMIN_PRESETS_PER_USER = 1\nMAX_PRESETS_PER_USER = 5\nMIN_AGENTS_PER_USER = 1\nMAX_AGENTS_PER_USER = 10\nMIN_EXECUTIONS_PER_GRAPH = 1\nMAX_EXECUTIONS_PER_GRAPH = 20\nMIN_REVIEWS_PER_VERSION = 1\nMAX_REVIEWS_PER_VERSION = 5\ndef get_image():\n    url = faker.image_url()\n    while 'placekitten.com' in url:\n        url = faker.image_url()\n    return url\nurl = faker.image_url()"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "'placekitten.com' In url"
      ],
      "code": "'placekitten.com' In url"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [
        "url = faker.image_url()"
      ],
      "code": "url = faker.image_url()"
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [
        "return url"
      ],
      "code": "return url"
    },
    {
      "id": "n4",
      "type": "block",
      "statements": [
        "async def main():\n    db = Prisma()\n    await db.connect()\n    print(f'Inserting {NUM_USERS} users')\n    users = []\n    for _ in range(NUM_USERS):\n        user = await db.user.create(data={'id': str(faker.uuid4()), 'email': faker.unique.email(), 'name': faker.name(), 'metadata': prisma.Json({}), 'integrations': ''})\n        users.append(user)\n    agent_blocks = []\n    print(f'Inserting {NUM_AGENT_BLOCKS} agent blocks')\n    for _ in range(NUM_AGENT_BLOCKS):\n        block = await db.agentblock.create(data={'name': f'{faker.word()}_{str(faker.uuid4())[:8]}', 'inputSchema': '{}', 'outputSchema': '{}'})\n        agent_blocks.append(block)\n    agent_graphs = []\n    print(f'Inserting {NUM_USERS * MAX_GRAPHS_PER_USER} agent graphs')\n    for user in users:\n        for _ in range(random.randint(MIN_GRAPHS_PER_USER, MAX_GRAPHS_PER_USER)):\n            graph = await db.agentgraph.create(data={'name': faker.sentence(nb_words=3), 'description': faker.text(max_nb_chars=200), 'userId': user.id, 'isActive': True, 'isTemplate': False})\n            agent_graphs.append(graph)\n    agent_nodes = []\n    print(f'Inserting {NUM_USERS * MAX_GRAPHS_PER_USER * MAX_NODES_PER_GRAPH} agent nodes')\n    for graph in agent_graphs:\n        num_nodes = random.randint(MIN_NODES_PER_GRAPH, MAX_NODES_PER_GRAPH)\n        for _ in range(num_nodes):\n            block = random.choice(agent_blocks)\n            node = await db.agentnode.create(data={'agentBlockId': block.id, 'agentGraphId': graph.id, 'agentGraphVersion': graph.version, 'constantInput': '{}', 'metadata': '{}'})\n            agent_nodes.append(node)\n    agent_presets = []\n    print(f'Inserting {NUM_USERS * MAX_PRESETS_PER_USER} agent presets')\n    for user in users:\n        num_presets = random.randint(MIN_PRESETS_PER_USER, MAX_PRESETS_PER_USER)\n        for _ in range(num_presets):\n            graph = random.choice(agent_graphs)\n            preset = await db.agentpreset.create(data={'name': faker.sentence(nb_words=3), 'description': faker.text(max_nb_chars=200), 'userId': user.id, 'agentId': graph.id, 'agentVersion': graph.version, 'isActive': True})\n            agent_presets.append(preset)\n    user_agents = []\n    print(f'Inserting {NUM_USERS * MAX_AGENTS_PER_USER} user agents')\n    for user in users:\n        num_agents = random.randint(MIN_AGENTS_PER_USER, MAX_AGENTS_PER_USER)\n        for _ in range(num_agents):\n            graph = random.choice(agent_graphs)\n            preset = random.choice(agent_presets)\n            user_agent = await db.useragent.create(data={'userId': user.id, 'agentId': graph.id, 'agentVersion': graph.version, 'agentPresetId': preset.id, 'isFavorite': random.choice([True, False]), 'isCreatedByUser': random.choice([True, False]), 'isArchived': random.choice([True, False]), 'isDeleted': random.choice([True, False])})\n            user_agents.append(user_agent)\n    agent_graph_executions = []\n    print(f'Inserting {NUM_USERS * MAX_GRAPHS_PER_USER * MAX_EXECUTIONS_PER_GRAPH} agent graph executions')\n    graph_execution_data = []\n    for graph in agent_graphs:\n        user = random.choice(users)\n        num_executions = random.randint(MIN_EXECUTIONS_PER_GRAPH, MAX_EXECUTIONS_PER_GRAPH)\n        for _ in range(num_executions):\n            matching_presets = [p for p in agent_presets if p.agentId == graph.id]\n            preset = random.choice(matching_presets) if matching_presets and random.random() < 0.5 else None\n            graph_execution_data.append({'agentGraphId': graph.id, 'agentGraphVersion': graph.version, 'userId': user.id, 'executionStatus': prisma.enums.AgentExecutionStatus.COMPLETED, 'startedAt': faker.date_time_this_year(), 'agentPresetId': preset.id if preset else None})\n    agent_graph_executions = await db.agentgraphexecution.create_many(data=graph_execution_data)\n    agent_graph_executions = await db.agentgraphexecution.find_many()\n    print(f'Inserting {NUM_USERS * MAX_GRAPHS_PER_USER * MAX_EXECUTIONS_PER_GRAPH} agent node executions')\n    node_execution_data = []\n    for execution in agent_graph_executions:\n        nodes = [node for node in agent_nodes if node.agentGraphId == execution.agentGraphId]\n        for node in nodes:\n            node_execution_data.append({'agentGraphExecutionId': execution.id, 'agentNodeId': node.id, 'executionStatus': prisma.enums.AgentExecutionStatus.COMPLETED, 'addedTime': datetime.now()})\n    agent_node_executions = await db.agentnodeexecution.create_many(data=node_execution_data)\n    agent_node_executions = await db.agentnodeexecution.find_many()\n    print(f'Inserting {NUM_USERS * MAX_GRAPHS_PER_USER * MAX_EXECUTIONS_PER_GRAPH} agent node execution input/outputs')\n    input_output_data = []\n    for node_execution in agent_node_executions:\n        input_output_data.append({'name': 'input1', 'data': '{}', 'time': datetime.now(), 'referencedByInputExecId': node_execution.id})\n        input_output_data.append({'name': 'output1', 'data': '{}', 'time': datetime.now(), 'referencedByOutputExecId': node_execution.id})\n    await db.agentnodeexecutioninputoutput.create_many(data=input_output_data)\n    print(f'Inserting {NUM_USERS * MAX_GRAPHS_PER_USER} agent node links')\n    for graph in agent_graphs:\n        nodes = [node for node in agent_nodes if node.agentGraphId == graph.id]\n        if len(nodes) >= 2:\n            source_node = nodes[0]\n            sink_node = nodes[1]\n            await db.agentnodelink.create(data={'agentNodeSourceId': source_node.id, 'sourceName': 'output1', 'agentNodeSinkId': sink_node.id, 'sinkName': 'input1', 'isStatic': False})\n    print(f'Inserting {NUM_USERS} analytics details')\n    for user in users:\n        for _ in range(1):\n            await db.analyticsdetails.create(data={'userId': user.id, 'type': faker.word(), 'data': prisma.Json({}), 'dataIndex': faker.word()})\n    print(f'Inserting {NUM_USERS} analytics metrics')\n    for user in users:\n        for _ in range(1):\n            await db.analyticsmetrics.create(data={'userId': user.id, 'analyticMetric': faker.word(), 'value': random.uniform(0, 100), 'dataString': faker.word()})\n    print(f'Inserting {NUM_USERS} credit transactions')\n    for user in users:\n        for _ in range(1):\n            block = random.choice(agent_blocks)\n            await db.credittransaction.create(data={'transactionKey': str(faker.uuid4()), 'userId': user.id, 'blockId': block.id, 'amount': random.randint(1, 100), 'type': prisma.enums.CreditTransactionType.TOP_UP if random.random() < 0.5 else prisma.enums.CreditTransactionType.USAGE, 'metadata': prisma.Json({})})\n    profiles = []\n    print(f'Inserting {NUM_USERS} profiles')\n    for user in users:\n        profile = await db.profile.create(data={'userId': user.id, 'name': user.name or faker.name(), 'username': faker.unique.user_name(), 'description': faker.text(), 'links': [faker.url() for _ in range(3)], 'avatarUrl': get_image()})\n        profiles.append(profile)\n    store_listings = []\n    print(f'Inserting {NUM_USERS} store listings')\n    for graph in agent_graphs:\n        user = random.choice(users)\n        listing = await db.storelisting.create(data={'agentId': graph.id, 'agentVersion': graph.version, 'owningUserId': user.id, 'isApproved': random.choice([True, False])})\n        store_listings.append(listing)\n    store_listing_versions = []\n    print(f'Inserting {NUM_USERS} store listing versions')\n    for listing in store_listings:\n        graph = [g for g in agent_graphs if g.id == listing.agentId][0]\n        version = await db.storelistingversion.create(data={'agentId': graph.id, 'agentVersion': graph.version, 'slug': faker.slug(), 'name': graph.name or faker.sentence(nb_words=3), 'subHeading': faker.sentence(), 'videoUrl': faker.url(), 'imageUrls': [get_image() for _ in range(3)], 'description': faker.text(), 'categories': [faker.word() for _ in range(3)], 'isFeatured': random.choice([True, False]), 'isAvailable': True, 'isApproved': random.choice([True, False]), 'storeListingId': listing.id})\n        store_listing_versions.append(version)\n    print(f'Inserting {NUM_USERS * MAX_REVIEWS_PER_VERSION} store listing reviews')\n    for version in store_listing_versions:\n        available_reviewers = users.copy()\n        random.shuffle(available_reviewers)\n        num_reviews = min(random.randint(MIN_REVIEWS_PER_VERSION, MAX_REVIEWS_PER_VERSION), len(available_reviewers))\n        for reviewer in available_reviewers[:num_reviews]:\n            await db.storelistingreview.create(data={'storeListingVersionId': version.id, 'reviewByUserId': reviewer.id, 'score': random.randint(1, 5), 'comments': faker.text()})\n    print(f'Inserting {NUM_USERS} store listing submissions')\n    for listing in store_listings:\n        version = random.choice(store_listing_versions)\n        reviewer = random.choice(users)\n        status: prisma.enums.SubmissionStatus = random.choice([prisma.enums.SubmissionStatus.PENDING, prisma.enums.SubmissionStatus.APPROVED, prisma.enums.SubmissionStatus.REJECTED])\n        await db.storelistingsubmission.create(data={'storeListingId': listing.id, 'storeListingVersionId': version.id, 'reviewerId': reviewer.id, 'Status': status, 'reviewComments': faker.text()})\n    print(f'Inserting {NUM_USERS} api keys')\n    for user in users:\n        await db.apikey.create(data={'name': faker.word(), 'prefix': str(faker.uuid4())[:8], 'postfix': str(faker.uuid4())[-8:], 'key': str(faker.sha256()), 'status': prisma.enums.APIKeyStatus.ACTIVE, 'permissions': [prisma.enums.APIKeyPermission.EXECUTE_GRAPH, prisma.enums.APIKeyPermission.READ_GRAPH], 'description': faker.text(), 'userId': user.id})\n    await db.disconnect()",
        "db = Prisma()",
        "await db.connect()",
        "print(f'Inserting {NUM_USERS} users')",
        "users = []"
      ],
      "code": "async def main():\n    db = Prisma()\n    await db.connect()\n    print(f'Inserting {NUM_USERS} users')\n    users = []\n    for _ in range(NUM_USERS):\n        user = await db.user.create(data={'id': str(faker.uuid4()), 'email': faker.unique.email(), 'name': faker.name(), 'metadata': prisma.Json({}), 'integrations': ''})\n        users.append(user)\n    agent_blocks = []\n    print(f'Inserting {NUM_AGENT_BLOCKS} agent blocks')\n    for _ in range(NUM_AGENT_BLOCKS):\n        block = await db.agentblock.create(data={'name': f'{faker.word()}_{str(faker.uuid4())[:8]}', 'inputSchema': '{}', 'outputSchema': '{}'})\n        agent_blocks.append(block)\n    agent_graphs = []\n    print(f'Inserting {NUM_USERS * MAX_GRAPHS_PER_USER} agent graphs')\n    for user in users:\n        for _ in range(random.randint(MIN_GRAPHS_PER_USER, MAX_GRAPHS_PER_USER)):\n            graph = await db.agentgraph.create(data={'name': faker.sentence(nb_words=3), 'description': faker.text(max_nb_chars=200), 'userId': user.id, 'isActive': True, 'isTemplate': False})\n            agent_graphs.append(graph)\n    agent_nodes = []\n    print(f'Inserting {NUM_USERS * MAX_GRAPHS_PER_USER * MAX_NODES_PER_GRAPH} agent nodes')\n    for graph in agent_graphs:\n        num_nodes = random.randint(MIN_NODES_PER_GRAPH, MAX_NODES_PER_GRAPH)\n        for _ in range(num_nodes):\n            block = random.choice(agent_blocks)\n            node = await db.agentnode.create(data={'agentBlockId': block.id, 'agentGraphId': graph.id, 'agentGraphVersion': graph.version, 'constantInput': '{}', 'metadata': '{}'})\n            agent_nodes.append(node)\n    agent_presets = []\n    print(f'Inserting {NUM_USERS * MAX_PRESETS_PER_USER} agent presets')\n    for user in users:\n        num_presets = random.randint(MIN_PRESETS_PER_USER, MAX_PRESETS_PER_USER)\n        for _ in range(num_presets):\n            graph = random.choice(agent_graphs)\n            preset = await db.agentpreset.create(data={'name': faker.sentence(nb_words=3), 'description': faker.text(max_nb_chars=200), 'userId': user.id, 'agentId': graph.id, 'agentVersion': graph.version, 'isActive': True})\n            agent_presets.append(preset)\n    user_agents = []\n    print(f'Inserting {NUM_USERS * MAX_AGENTS_PER_USER} user agents')\n    for user in users:\n        num_agents = random.randint(MIN_AGENTS_PER_USER, MAX_AGENTS_PER_USER)\n        for _ in range(num_agents):\n            graph = random.choice(agent_graphs)\n            preset = random.choice(agent_presets)\n            user_agent = await db.useragent.create(data={'userId': user.id, 'agentId': graph.id, 'agentVersion': graph.version, 'agentPresetId': preset.id, 'isFavorite': random.choice([True, False]), 'isCreatedByUser': random.choice([True, False]), 'isArchived': random.choice([True, False]), 'isDeleted': random.choice([True, False])})\n            user_agents.append(user_agent)\n    agent_graph_executions = []\n    print(f'Inserting {NUM_USERS * MAX_GRAPHS_PER_USER * MAX_EXECUTIONS_PER_GRAPH} agent graph executions')\n    graph_execution_data = []\n    for graph in agent_graphs:\n        user = random.choice(users)\n        num_executions = random.randint(MIN_EXECUTIONS_PER_GRAPH, MAX_EXECUTIONS_PER_GRAPH)\n        for _ in range(num_executions):\n            matching_presets = [p for p in agent_presets if p.agentId == graph.id]\n            preset = random.choice(matching_presets) if matching_presets and random.random() < 0.5 else None\n            graph_execution_data.append({'agentGraphId': graph.id, 'agentGraphVersion': graph.version, 'userId': user.id, 'executionStatus': prisma.enums.AgentExecutionStatus.COMPLETED, 'startedAt': faker.date_time_this_year(), 'agentPresetId': preset.id if preset else None})\n    agent_graph_executions = await db.agentgraphexecution.create_many(data=graph_execution_data)\n    agent_graph_executions = await db.agentgraphexecution.find_many()\n    print(f'Inserting {NUM_USERS * MAX_GRAPHS_PER_USER * MAX_EXECUTIONS_PER_GRAPH} agent node executions')\n    node_execution_data = []\n    for execution in agent_graph_executions:\n        nodes = [node for node in agent_nodes if node.agentGraphId == execution.agentGraphId]\n        for node in nodes:\n            node_execution_data.append({'agentGraphExecutionId': execution.id, 'agentNodeId': node.id, 'executionStatus': prisma.enums.AgentExecutionStatus.COMPLETED, 'addedTime': datetime.now()})\n    agent_node_executions = await db.agentnodeexecution.create_many(data=node_execution_data)\n    agent_node_executions = await db.agentnodeexecution.find_many()\n    print(f'Inserting {NUM_USERS * MAX_GRAPHS_PER_USER * MAX_EXECUTIONS_PER_GRAPH} agent node execution input/outputs')\n    input_output_data = []\n    for node_execution in agent_node_executions:\n        input_output_data.append({'name': 'input1', 'data': '{}', 'time': datetime.now(), 'referencedByInputExecId': node_execution.id})\n        input_output_data.append({'name': 'output1', 'data': '{}', 'time': datetime.now(), 'referencedByOutputExecId': node_execution.id})\n    await db.agentnodeexecutioninputoutput.create_many(data=input_output_data)\n    print(f'Inserting {NUM_USERS * MAX_GRAPHS_PER_USER} agent node links')\n    for graph in agent_graphs:\n        nodes = [node for node in agent_nodes if node.agentGraphId == graph.id]\n        if len(nodes) >= 2:\n            source_node = nodes[0]\n            sink_node = nodes[1]\n            await db.agentnodelink.create(data={'agentNodeSourceId': source_node.id, 'sourceName': 'output1', 'agentNodeSinkId': sink_node.id, 'sinkName': 'input1', 'isStatic': False})\n    print(f'Inserting {NUM_USERS} analytics details')\n    for user in users:\n        for _ in range(1):\n            await db.analyticsdetails.create(data={'userId': user.id, 'type': faker.word(), 'data': prisma.Json({}), 'dataIndex': faker.word()})\n    print(f'Inserting {NUM_USERS} analytics metrics')\n    for user in users:\n        for _ in range(1):\n            await db.analyticsmetrics.create(data={'userId': user.id, 'analyticMetric': faker.word(), 'value': random.uniform(0, 100), 'dataString': faker.word()})\n    print(f'Inserting {NUM_USERS} credit transactions')\n    for user in users:\n        for _ in range(1):\n            block = random.choice(agent_blocks)\n            await db.credittransaction.create(data={'transactionKey': str(faker.uuid4()), 'userId': user.id, 'blockId': block.id, 'amount': random.randint(1, 100), 'type': prisma.enums.CreditTransactionType.TOP_UP if random.random() < 0.5 else prisma.enums.CreditTransactionType.USAGE, 'metadata': prisma.Json({})})\n    profiles = []\n    print(f'Inserting {NUM_USERS} profiles')\n    for user in users:\n        profile = await db.profile.create(data={'userId': user.id, 'name': user.name or faker.name(), 'username': faker.unique.user_name(), 'description': faker.text(), 'links': [faker.url() for _ in range(3)], 'avatarUrl': get_image()})\n        profiles.append(profile)\n    store_listings = []\n    print(f'Inserting {NUM_USERS} store listings')\n    for graph in agent_graphs:\n        user = random.choice(users)\n        listing = await db.storelisting.create(data={'agentId': graph.id, 'agentVersion': graph.version, 'owningUserId': user.id, 'isApproved': random.choice([True, False])})\n        store_listings.append(listing)\n    store_listing_versions = []\n    print(f'Inserting {NUM_USERS} store listing versions')\n    for listing in store_listings:\n        graph = [g for g in agent_graphs if g.id == listing.agentId][0]\n        version = await db.storelistingversion.create(data={'agentId': graph.id, 'agentVersion': graph.version, 'slug': faker.slug(), 'name': graph.name or faker.sentence(nb_words=3), 'subHeading': faker.sentence(), 'videoUrl': faker.url(), 'imageUrls': [get_image() for _ in range(3)], 'description': faker.text(), 'categories': [faker.word() for _ in range(3)], 'isFeatured': random.choice([True, False]), 'isAvailable': True, 'isApproved': random.choice([True, False]), 'storeListingId': listing.id})\n        store_listing_versions.append(version)\n    print(f'Inserting {NUM_USERS * MAX_REVIEWS_PER_VERSION} store listing reviews')\n    for version in store_listing_versions:\n        available_reviewers = users.copy()\n        random.shuffle(available_reviewers)\n        num_reviews = min(random.randint(MIN_REVIEWS_PER_VERSION, MAX_REVIEWS_PER_VERSION), len(available_reviewers))\n        for reviewer in available_reviewers[:num_reviews]:\n            await db.storelistingreview.create(data={'storeListingVersionId': version.id, 'reviewByUserId': reviewer.id, 'score': random.randint(1, 5), 'comments': faker.text()})\n    print(f'Inserting {NUM_USERS} store listing submissions')\n    for listing in store_listings:\n        version = random.choice(store_listing_versions)\n        reviewer = random.choice(users)\n        status: prisma.enums.SubmissionStatus = random.choice([prisma.enums.SubmissionStatus.PENDING, prisma.enums.SubmissionStatus.APPROVED, prisma.enums.SubmissionStatus.REJECTED])\n        await db.storelistingsubmission.create(data={'storeListingId': listing.id, 'storeListingVersionId': version.id, 'reviewerId': reviewer.id, 'Status': status, 'reviewComments': faker.text()})\n    print(f'Inserting {NUM_USERS} api keys')\n    for user in users:\n        await db.apikey.create(data={'name': faker.word(), 'prefix': str(faker.uuid4())[:8], 'postfix': str(faker.uuid4())[-8:], 'key': str(faker.sha256()), 'status': prisma.enums.APIKeyStatus.ACTIVE, 'permissions': [prisma.enums.APIKeyPermission.EXECUTE_GRAPH, prisma.enums.APIKeyPermission.READ_GRAPH], 'description': faker.text(), 'userId': user.id})\n    await db.disconnect()\ndb = Prisma()\nawait db.connect()\nprint(f'Inserting {NUM_USERS} users')\nusers = []"
    },
    {
      "id": "n5",
      "type": "block",
      "statements": [
        "_",
        "range(NUM_USERS)"
      ],
      "code": "_\nrange(NUM_USERS)"
    },
    {
      "id": "n6",
      "type": "block",
      "statements": [
        "user = await db.user.create(data={'id': str(faker.uuid4()), 'email': faker.unique.email(), 'name': faker.name(), 'metadata': prisma.Json({}), 'integrations': ''})",
        "users.append(user)"
      ],
      "code": "user = await db.user.create(data={'id': str(faker.uuid4()), 'email': faker.unique.email(), 'name': faker.name(), 'metadata': prisma.Json({}), 'integrations': ''})\nusers.append(user)"
    },
    {
      "id": "n7",
      "type": "block",
      "statements": [
        "agent_blocks = []",
        "print(f'Inserting {NUM_AGENT_BLOCKS} agent blocks')"
      ],
      "code": "agent_blocks = []\nprint(f'Inserting {NUM_AGENT_BLOCKS} agent blocks')"
    },
    {
      "id": "n8",
      "type": "block",
      "statements": [
        "_",
        "range(NUM_AGENT_BLOCKS)"
      ],
      "code": "_\nrange(NUM_AGENT_BLOCKS)"
    },
    {
      "id": "n9",
      "type": "block",
      "statements": [
        "block = await db.agentblock.create(data={'name': f'{faker.word()}_{str(faker.uuid4())[:8]}', 'inputSchema': '{}', 'outputSchema': '{}'})",
        "agent_blocks.append(block)"
      ],
      "code": "block = await db.agentblock.create(data={'name': f'{faker.word()}_{str(faker.uuid4())[:8]}', 'inputSchema': '{}', 'outputSchema': '{}'})\nagent_blocks.append(block)"
    },
    {
      "id": "n10",
      "type": "block",
      "statements": [
        "agent_graphs = []",
        "print(f'Inserting {NUM_USERS * MAX_GRAPHS_PER_USER} agent graphs')"
      ],
      "code": "agent_graphs = []\nprint(f'Inserting {NUM_USERS * MAX_GRAPHS_PER_USER} agent graphs')"
    },
    {
      "id": "n11",
      "type": "block",
      "statements": [
        "user",
        "users"
      ],
      "code": "user\nusers"
    },
    {
      "id": "n12",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n13",
      "type": "block",
      "statements": [
        "agent_nodes = []",
        "print(f'Inserting {NUM_USERS * MAX_GRAPHS_PER_USER * MAX_NODES_PER_GRAPH} agent nodes')"
      ],
      "code": "agent_nodes = []\nprint(f'Inserting {NUM_USERS * MAX_GRAPHS_PER_USER * MAX_NODES_PER_GRAPH} agent nodes')"
    },
    {
      "id": "n14",
      "type": "block",
      "statements": [
        "_",
        "range(random.randint(MIN_GRAPHS_PER_USER, MAX_GRAPHS_PER_USER))"
      ],
      "code": "_\nrange(random.randint(MIN_GRAPHS_PER_USER, MAX_GRAPHS_PER_USER))"
    },
    {
      "id": "n15",
      "type": "block",
      "statements": [
        "graph = await db.agentgraph.create(data={'name': faker.sentence(nb_words=3), 'description': faker.text(max_nb_chars=200), 'userId': user.id, 'isActive': True, 'isTemplate': False})",
        "agent_graphs.append(graph)"
      ],
      "code": "graph = await db.agentgraph.create(data={'name': faker.sentence(nb_words=3), 'description': faker.text(max_nb_chars=200), 'userId': user.id, 'isActive': True, 'isTemplate': False})\nagent_graphs.append(graph)"
    },
    {
      "id": "n16",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n17",
      "type": "block",
      "statements": [
        "graph",
        "agent_graphs"
      ],
      "code": "graph\nagent_graphs"
    },
    {
      "id": "n18",
      "type": "block",
      "statements": [
        "num_nodes = random.randint(MIN_NODES_PER_GRAPH, MAX_NODES_PER_GRAPH)"
      ],
      "code": "num_nodes = random.randint(MIN_NODES_PER_GRAPH, MAX_NODES_PER_GRAPH)"
    },
    {
      "id": "n19",
      "type": "block",
      "statements": [
        "agent_presets = []",
        "print(f'Inserting {NUM_USERS * MAX_PRESETS_PER_USER} agent presets')"
      ],
      "code": "agent_presets = []\nprint(f'Inserting {NUM_USERS * MAX_PRESETS_PER_USER} agent presets')"
    },
    {
      "id": "n20",
      "type": "block",
      "statements": [
        "_",
        "range(num_nodes)"
      ],
      "code": "_\nrange(num_nodes)"
    },
    {
      "id": "n21",
      "type": "block",
      "statements": [
        "block = random.choice(agent_blocks)",
        "node = await db.agentnode.create(data={'agentBlockId': block.id, 'agentGraphId': graph.id, 'agentGraphVersion': graph.version, 'constantInput': '{}', 'metadata': '{}'})",
        "agent_nodes.append(node)"
      ],
      "code": "block = random.choice(agent_blocks)\nnode = await db.agentnode.create(data={'agentBlockId': block.id, 'agentGraphId': graph.id, 'agentGraphVersion': graph.version, 'constantInput': '{}', 'metadata': '{}'})\nagent_nodes.append(node)"
    },
    {
      "id": "n22",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n23",
      "type": "block",
      "statements": [
        "user",
        "users"
      ],
      "code": "user\nusers"
    },
    {
      "id": "n24",
      "type": "block",
      "statements": [
        "num_presets = random.randint(MIN_PRESETS_PER_USER, MAX_PRESETS_PER_USER)"
      ],
      "code": "num_presets = random.randint(MIN_PRESETS_PER_USER, MAX_PRESETS_PER_USER)"
    },
    {
      "id": "n25",
      "type": "block",
      "statements": [
        "user_agents = []",
        "print(f'Inserting {NUM_USERS * MAX_AGENTS_PER_USER} user agents')"
      ],
      "code": "user_agents = []\nprint(f'Inserting {NUM_USERS * MAX_AGENTS_PER_USER} user agents')"
    },
    {
      "id": "n26",
      "type": "block",
      "statements": [
        "_",
        "range(num_presets)"
      ],
      "code": "_\nrange(num_presets)"
    },
    {
      "id": "n27",
      "type": "block",
      "statements": [
        "graph = random.choice(agent_graphs)",
        "preset = await db.agentpreset.create(data={'name': faker.sentence(nb_words=3), 'description': faker.text(max_nb_chars=200), 'userId': user.id, 'agentId': graph.id, 'agentVersion': graph.version, 'isActive': True})",
        "agent_presets.append(preset)"
      ],
      "code": "graph = random.choice(agent_graphs)\npreset = await db.agentpreset.create(data={'name': faker.sentence(nb_words=3), 'description': faker.text(max_nb_chars=200), 'userId': user.id, 'agentId': graph.id, 'agentVersion': graph.version, 'isActive': True})\nagent_presets.append(preset)"
    },
    {
      "id": "n28",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n29",
      "type": "block",
      "statements": [
        "user",
        "users"
      ],
      "code": "user\nusers"
    },
    {
      "id": "n30",
      "type": "block",
      "statements": [
        "num_agents = random.randint(MIN_AGENTS_PER_USER, MAX_AGENTS_PER_USER)"
      ],
      "code": "num_agents = random.randint(MIN_AGENTS_PER_USER, MAX_AGENTS_PER_USER)"
    },
    {
      "id": "n31",
      "type": "block",
      "statements": [
        "agent_graph_executions = []",
        "print(f'Inserting {NUM_USERS * MAX_GRAPHS_PER_USER * MAX_EXECUTIONS_PER_GRAPH} agent graph executions')",
        "graph_execution_data = []"
      ],
      "code": "agent_graph_executions = []\nprint(f'Inserting {NUM_USERS * MAX_GRAPHS_PER_USER * MAX_EXECUTIONS_PER_GRAPH} agent graph executions')\ngraph_execution_data = []"
    },
    {
      "id": "n32",
      "type": "block",
      "statements": [
        "_",
        "range(num_agents)"
      ],
      "code": "_\nrange(num_agents)"
    },
    {
      "id": "n33",
      "type": "block",
      "statements": [
        "graph = random.choice(agent_graphs)",
        "preset = random.choice(agent_presets)",
        "user_agent = await db.useragent.create(data={'userId': user.id, 'agentId': graph.id, 'agentVersion': graph.version, 'agentPresetId': preset.id, 'isFavorite': random.choice([True, False]), 'isCreatedByUser': random.choice([True, False]), 'isArchived': random.choice([True, False]), 'isDeleted': random.choice([True, False])})",
        "user_agents.append(user_agent)"
      ],
      "code": "graph = random.choice(agent_graphs)\npreset = random.choice(agent_presets)\nuser_agent = await db.useragent.create(data={'userId': user.id, 'agentId': graph.id, 'agentVersion': graph.version, 'agentPresetId': preset.id, 'isFavorite': random.choice([True, False]), 'isCreatedByUser': random.choice([True, False]), 'isArchived': random.choice([True, False]), 'isDeleted': random.choice([True, False])})\nuser_agents.append(user_agent)"
    },
    {
      "id": "n34",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n35",
      "type": "block",
      "statements": [
        "graph",
        "agent_graphs"
      ],
      "code": "graph\nagent_graphs"
    },
    {
      "id": "n36",
      "type": "block",
      "statements": [
        "user = random.choice(users)",
        "num_executions = random.randint(MIN_EXECUTIONS_PER_GRAPH, MAX_EXECUTIONS_PER_GRAPH)"
      ],
      "code": "user = random.choice(users)\nnum_executions = random.randint(MIN_EXECUTIONS_PER_GRAPH, MAX_EXECUTIONS_PER_GRAPH)"
    },
    {
      "id": "n37",
      "type": "block",
      "statements": [
        "agent_graph_executions = await db.agentgraphexecution.create_many(data=graph_execution_data)",
        "agent_graph_executions = await db.agentgraphexecution.find_many()",
        "print(f'Inserting {NUM_USERS * MAX_GRAPHS_PER_USER * MAX_EXECUTIONS_PER_GRAPH} agent node executions')",
        "node_execution_data = []"
      ],
      "code": "agent_graph_executions = await db.agentgraphexecution.create_many(data=graph_execution_data)\nagent_graph_executions = await db.agentgraphexecution.find_many()\nprint(f'Inserting {NUM_USERS * MAX_GRAPHS_PER_USER * MAX_EXECUTIONS_PER_GRAPH} agent node executions')\nnode_execution_data = []"
    },
    {
      "id": "n38",
      "type": "block",
      "statements": [
        "_",
        "range(num_executions)"
      ],
      "code": "_\nrange(num_executions)"
    },
    {
      "id": "n39",
      "type": "block",
      "statements": [
        "matching_presets = [p for p in agent_presets if p.agentId == graph.id]",
        "preset = random.choice(matching_presets) if matching_presets and random.random() < 0.5 else None",
        "graph_execution_data.append({'agentGraphId': graph.id, 'agentGraphVersion': graph.version, 'userId': user.id, 'executionStatus': prisma.enums.AgentExecutionStatus.COMPLETED, 'startedAt': faker.date_time_this_year(), 'agentPresetId': preset.id if preset else None})"
      ],
      "code": "matching_presets = [p for p in agent_presets if p.agentId == graph.id]\npreset = random.choice(matching_presets) if matching_presets and random.random() < 0.5 else None\ngraph_execution_data.append({'agentGraphId': graph.id, 'agentGraphVersion': graph.version, 'userId': user.id, 'executionStatus': prisma.enums.AgentExecutionStatus.COMPLETED, 'startedAt': faker.date_time_this_year(), 'agentPresetId': preset.id if preset else None})"
    },
    {
      "id": "n40",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n41",
      "type": "block",
      "statements": [
        "execution",
        "agent_graph_executions"
      ],
      "code": "execution\nagent_graph_executions"
    },
    {
      "id": "n42",
      "type": "block",
      "statements": [
        "nodes = [node for node in agent_nodes if node.agentGraphId == execution.agentGraphId]"
      ],
      "code": "nodes = [node for node in agent_nodes if node.agentGraphId == execution.agentGraphId]"
    },
    {
      "id": "n43",
      "type": "block",
      "statements": [
        "agent_node_executions = await db.agentnodeexecution.create_many(data=node_execution_data)",
        "agent_node_executions = await db.agentnodeexecution.find_many()",
        "print(f'Inserting {NUM_USERS * MAX_GRAPHS_PER_USER * MAX_EXECUTIONS_PER_GRAPH} agent node execution input/outputs')",
        "input_output_data = []"
      ],
      "code": "agent_node_executions = await db.agentnodeexecution.create_many(data=node_execution_data)\nagent_node_executions = await db.agentnodeexecution.find_many()\nprint(f'Inserting {NUM_USERS * MAX_GRAPHS_PER_USER * MAX_EXECUTIONS_PER_GRAPH} agent node execution input/outputs')\ninput_output_data = []"
    },
    {
      "id": "n44",
      "type": "block",
      "statements": [
        "node",
        "nodes"
      ],
      "code": "node\nnodes"
    },
    {
      "id": "n45",
      "type": "block",
      "statements": [
        "node_execution_data.append({'agentGraphExecutionId': execution.id, 'agentNodeId': node.id, 'executionStatus': prisma.enums.AgentExecutionStatus.COMPLETED, 'addedTime': datetime.now()})"
      ],
      "code": "node_execution_data.append({'agentGraphExecutionId': execution.id, 'agentNodeId': node.id, 'executionStatus': prisma.enums.AgentExecutionStatus.COMPLETED, 'addedTime': datetime.now()})"
    },
    {
      "id": "n46",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n47",
      "type": "block",
      "statements": [
        "node_execution",
        "agent_node_executions"
      ],
      "code": "node_execution\nagent_node_executions"
    },
    {
      "id": "n48",
      "type": "block",
      "statements": [
        "input_output_data.append({'name': 'input1', 'data': '{}', 'time': datetime.now(), 'referencedByInputExecId': node_execution.id})",
        "input_output_data.append({'name': 'output1', 'data': '{}', 'time': datetime.now(), 'referencedByOutputExecId': node_execution.id})"
      ],
      "code": "input_output_data.append({'name': 'input1', 'data': '{}', 'time': datetime.now(), 'referencedByInputExecId': node_execution.id})\ninput_output_data.append({'name': 'output1', 'data': '{}', 'time': datetime.now(), 'referencedByOutputExecId': node_execution.id})"
    },
    {
      "id": "n49",
      "type": "block",
      "statements": [
        "await db.agentnodeexecutioninputoutput.create_many(data=input_output_data)",
        "print(f'Inserting {NUM_USERS * MAX_GRAPHS_PER_USER} agent node links')"
      ],
      "code": "await db.agentnodeexecutioninputoutput.create_many(data=input_output_data)\nprint(f'Inserting {NUM_USERS * MAX_GRAPHS_PER_USER} agent node links')"
    },
    {
      "id": "n50",
      "type": "block",
      "statements": [
        "graph",
        "agent_graphs"
      ],
      "code": "graph\nagent_graphs"
    },
    {
      "id": "n51",
      "type": "block",
      "statements": [
        "nodes = [node for node in agent_nodes if node.agentGraphId == graph.id]",
        "len(nodes) GtE 2"
      ],
      "code": "nodes = [node for node in agent_nodes if node.agentGraphId == graph.id]\nlen(nodes) GtE 2"
    },
    {
      "id": "n52",
      "type": "block",
      "statements": [
        "print(f'Inserting {NUM_USERS} analytics details')"
      ],
      "code": "print(f'Inserting {NUM_USERS} analytics details')"
    },
    {
      "id": "n53",
      "type": "block",
      "statements": [
        "source_node = nodes[0]",
        "sink_node = nodes[1]",
        "await db.agentnodelink.create(data={'agentNodeSourceId': source_node.id, 'sourceName': 'output1', 'agentNodeSinkId': sink_node.id, 'sinkName': 'input1', 'isStatic': False})"
      ],
      "code": "source_node = nodes[0]\nsink_node = nodes[1]\nawait db.agentnodelink.create(data={'agentNodeSourceId': source_node.id, 'sourceName': 'output1', 'agentNodeSinkId': sink_node.id, 'sinkName': 'input1', 'isStatic': False})"
    },
    {
      "id": "n54",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n55",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n56",
      "type": "block",
      "statements": [
        "user",
        "users"
      ],
      "code": "user\nusers"
    },
    {
      "id": "n57",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n58",
      "type": "block",
      "statements": [
        "print(f'Inserting {NUM_USERS} analytics metrics')"
      ],
      "code": "print(f'Inserting {NUM_USERS} analytics metrics')"
    },
    {
      "id": "n59",
      "type": "block",
      "statements": [
        "_",
        "range(1)"
      ],
      "code": "_\nrange(1)"
    },
    {
      "id": "n60",
      "type": "block",
      "statements": [
        "await db.analyticsdetails.create(data={'userId': user.id, 'type': faker.word(), 'data': prisma.Json({}), 'dataIndex': faker.word()})"
      ],
      "code": "await db.analyticsdetails.create(data={'userId': user.id, 'type': faker.word(), 'data': prisma.Json({}), 'dataIndex': faker.word()})"
    },
    {
      "id": "n61",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n62",
      "type": "block",
      "statements": [
        "user",
        "users"
      ],
      "code": "user\nusers"
    },
    {
      "id": "n63",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n64",
      "type": "block",
      "statements": [
        "print(f'Inserting {NUM_USERS} credit transactions')"
      ],
      "code": "print(f'Inserting {NUM_USERS} credit transactions')"
    },
    {
      "id": "n65",
      "type": "block",
      "statements": [
        "_",
        "range(1)"
      ],
      "code": "_\nrange(1)"
    },
    {
      "id": "n66",
      "type": "block",
      "statements": [
        "await db.analyticsmetrics.create(data={'userId': user.id, 'analyticMetric': faker.word(), 'value': random.uniform(0, 100), 'dataString': faker.word()})"
      ],
      "code": "await db.analyticsmetrics.create(data={'userId': user.id, 'analyticMetric': faker.word(), 'value': random.uniform(0, 100), 'dataString': faker.word()})"
    },
    {
      "id": "n67",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n68",
      "type": "block",
      "statements": [
        "user",
        "users"
      ],
      "code": "user\nusers"
    },
    {
      "id": "n69",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n70",
      "type": "block",
      "statements": [
        "profiles = []",
        "print(f'Inserting {NUM_USERS} profiles')"
      ],
      "code": "profiles = []\nprint(f'Inserting {NUM_USERS} profiles')"
    },
    {
      "id": "n71",
      "type": "block",
      "statements": [
        "_",
        "range(1)"
      ],
      "code": "_\nrange(1)"
    },
    {
      "id": "n72",
      "type": "block",
      "statements": [
        "block = random.choice(agent_blocks)",
        "await db.credittransaction.create(data={'transactionKey': str(faker.uuid4()), 'userId': user.id, 'blockId': block.id, 'amount': random.randint(1, 100), 'type': prisma.enums.CreditTransactionType.TOP_UP if random.random() < 0.5 else prisma.enums.CreditTransactionType.USAGE, 'metadata': prisma.Json({})})"
      ],
      "code": "block = random.choice(agent_blocks)\nawait db.credittransaction.create(data={'transactionKey': str(faker.uuid4()), 'userId': user.id, 'blockId': block.id, 'amount': random.randint(1, 100), 'type': prisma.enums.CreditTransactionType.TOP_UP if random.random() < 0.5 else prisma.enums.CreditTransactionType.USAGE, 'metadata': prisma.Json({})})"
    },
    {
      "id": "n73",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n74",
      "type": "block",
      "statements": [
        "user",
        "users"
      ],
      "code": "user\nusers"
    },
    {
      "id": "n75",
      "type": "block",
      "statements": [
        "profile = await db.profile.create(data={'userId': user.id, 'name': user.name or faker.name(), 'username': faker.unique.user_name(), 'description': faker.text(), 'links': [faker.url() for _ in range(3)], 'avatarUrl': get_image()})",
        "profiles.append(profile)"
      ],
      "code": "profile = await db.profile.create(data={'userId': user.id, 'name': user.name or faker.name(), 'username': faker.unique.user_name(), 'description': faker.text(), 'links': [faker.url() for _ in range(3)], 'avatarUrl': get_image()})\nprofiles.append(profile)"
    },
    {
      "id": "n76",
      "type": "block",
      "statements": [
        "store_listings = []",
        "print(f'Inserting {NUM_USERS} store listings')"
      ],
      "code": "store_listings = []\nprint(f'Inserting {NUM_USERS} store listings')"
    },
    {
      "id": "n77",
      "type": "block",
      "statements": [
        "graph",
        "agent_graphs"
      ],
      "code": "graph\nagent_graphs"
    },
    {
      "id": "n78",
      "type": "block",
      "statements": [
        "user = random.choice(users)",
        "listing = await db.storelisting.create(data={'agentId': graph.id, 'agentVersion': graph.version, 'owningUserId': user.id, 'isApproved': random.choice([True, False])})",
        "store_listings.append(listing)"
      ],
      "code": "user = random.choice(users)\nlisting = await db.storelisting.create(data={'agentId': graph.id, 'agentVersion': graph.version, 'owningUserId': user.id, 'isApproved': random.choice([True, False])})\nstore_listings.append(listing)"
    },
    {
      "id": "n79",
      "type": "block",
      "statements": [
        "store_listing_versions = []",
        "print(f'Inserting {NUM_USERS} store listing versions')"
      ],
      "code": "store_listing_versions = []\nprint(f'Inserting {NUM_USERS} store listing versions')"
    },
    {
      "id": "n80",
      "type": "block",
      "statements": [
        "listing",
        "store_listings"
      ],
      "code": "listing\nstore_listings"
    },
    {
      "id": "n81",
      "type": "block",
      "statements": [
        "graph = [g for g in agent_graphs if g.id == listing.agentId][0]",
        "version = await db.storelistingversion.create(data={'agentId': graph.id, 'agentVersion': graph.version, 'slug': faker.slug(), 'name': graph.name or faker.sentence(nb_words=3), 'subHeading': faker.sentence(), 'videoUrl': faker.url(), 'imageUrls': [get_image() for _ in range(3)], 'description': faker.text(), 'categories': [faker.word() for _ in range(3)], 'isFeatured': random.choice([True, False]), 'isAvailable': True, 'isApproved': random.choice([True, False]), 'storeListingId': listing.id})",
        "store_listing_versions.append(version)"
      ],
      "code": "graph = [g for g in agent_graphs if g.id == listing.agentId][0]\nversion = await db.storelistingversion.create(data={'agentId': graph.id, 'agentVersion': graph.version, 'slug': faker.slug(), 'name': graph.name or faker.sentence(nb_words=3), 'subHeading': faker.sentence(), 'videoUrl': faker.url(), 'imageUrls': [get_image() for _ in range(3)], 'description': faker.text(), 'categories': [faker.word() for _ in range(3)], 'isFeatured': random.choice([True, False]), 'isAvailable': True, 'isApproved': random.choice([True, False]), 'storeListingId': listing.id})\nstore_listing_versions.append(version)"
    },
    {
      "id": "n82",
      "type": "block",
      "statements": [
        "print(f'Inserting {NUM_USERS * MAX_REVIEWS_PER_VERSION} store listing reviews')"
      ],
      "code": "print(f'Inserting {NUM_USERS * MAX_REVIEWS_PER_VERSION} store listing reviews')"
    },
    {
      "id": "n83",
      "type": "block",
      "statements": [
        "version",
        "store_listing_versions"
      ],
      "code": "version\nstore_listing_versions"
    },
    {
      "id": "n84",
      "type": "block",
      "statements": [
        "available_reviewers = users.copy()",
        "random.shuffle(available_reviewers)",
        "num_reviews = min(random.randint(MIN_REVIEWS_PER_VERSION, MAX_REVIEWS_PER_VERSION), len(available_reviewers))"
      ],
      "code": "available_reviewers = users.copy()\nrandom.shuffle(available_reviewers)\nnum_reviews = min(random.randint(MIN_REVIEWS_PER_VERSION, MAX_REVIEWS_PER_VERSION), len(available_reviewers))"
    },
    {
      "id": "n85",
      "type": "block",
      "statements": [
        "print(f'Inserting {NUM_USERS} store listing submissions')"
      ],
      "code": "print(f'Inserting {NUM_USERS} store listing submissions')"
    },
    {
      "id": "n86",
      "type": "block",
      "statements": [
        "reviewer",
        "available_reviewers[:num_reviews]"
      ],
      "code": "reviewer\navailable_reviewers[:num_reviews]"
    },
    {
      "id": "n87",
      "type": "block",
      "statements": [
        "await db.storelistingreview.create(data={'storeListingVersionId': version.id, 'reviewByUserId': reviewer.id, 'score': random.randint(1, 5), 'comments': faker.text()})"
      ],
      "code": "await db.storelistingreview.create(data={'storeListingVersionId': version.id, 'reviewByUserId': reviewer.id, 'score': random.randint(1, 5), 'comments': faker.text()})"
    },
    {
      "id": "n88",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n89",
      "type": "block",
      "statements": [
        "listing",
        "store_listings"
      ],
      "code": "listing\nstore_listings"
    },
    {
      "id": "n90",
      "type": "block",
      "statements": [
        "version = random.choice(store_listing_versions)",
        "reviewer = random.choice(users)",
        "status: prisma.enums.SubmissionStatus = random.choice([prisma.enums.SubmissionStatus.PENDING, prisma.enums.SubmissionStatus.APPROVED, prisma.enums.SubmissionStatus.REJECTED])",
        "await db.storelistingsubmission.create(data={'storeListingId': listing.id, 'storeListingVersionId': version.id, 'reviewerId': reviewer.id, 'Status': status, 'reviewComments': faker.text()})"
      ],
      "code": "version = random.choice(store_listing_versions)\nreviewer = random.choice(users)\nstatus: prisma.enums.SubmissionStatus = random.choice([prisma.enums.SubmissionStatus.PENDING, prisma.enums.SubmissionStatus.APPROVED, prisma.enums.SubmissionStatus.REJECTED])\nawait db.storelistingsubmission.create(data={'storeListingId': listing.id, 'storeListingVersionId': version.id, 'reviewerId': reviewer.id, 'Status': status, 'reviewComments': faker.text()})"
    },
    {
      "id": "n91",
      "type": "block",
      "statements": [
        "print(f'Inserting {NUM_USERS} api keys')"
      ],
      "code": "print(f'Inserting {NUM_USERS} api keys')"
    },
    {
      "id": "n92",
      "type": "block",
      "statements": [
        "user",
        "users"
      ],
      "code": "user\nusers"
    },
    {
      "id": "n93",
      "type": "block",
      "statements": [
        "await db.apikey.create(data={'name': faker.word(), 'prefix': str(faker.uuid4())[:8], 'postfix': str(faker.uuid4())[-8:], 'key': str(faker.sha256()), 'status': prisma.enums.APIKeyStatus.ACTIVE, 'permissions': [prisma.enums.APIKeyPermission.EXECUTE_GRAPH, prisma.enums.APIKeyPermission.READ_GRAPH], 'description': faker.text(), 'userId': user.id})"
      ],
      "code": "await db.apikey.create(data={'name': faker.word(), 'prefix': str(faker.uuid4())[:8], 'postfix': str(faker.uuid4())[-8:], 'key': str(faker.sha256()), 'status': prisma.enums.APIKeyStatus.ACTIVE, 'permissions': [prisma.enums.APIKeyPermission.EXECUTE_GRAPH, prisma.enums.APIKeyPermission.READ_GRAPH], 'description': faker.text(), 'userId': user.id})"
    },
    {
      "id": "n94",
      "type": "block",
      "statements": [
        "await db.disconnect()",
        "__name__ Eq '__main__'"
      ],
      "code": "await db.disconnect()\n__name__ Eq '__main__'"
    },
    {
      "id": "n95",
      "type": "block",
      "statements": [
        "asyncio.run(main())"
      ],
      "code": "asyncio.run(main())"
    },
    {
      "id": "n96",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n97",
      "type": "block",
      "statements": [],
      "code": ""
    }
  ],
  "edges": [
    {
      "source": "n74",
      "target": "n75"
    },
    {
      "source": "n83",
      "target": "n85"
    },
    {
      "source": "n0",
      "target": "n1"
    },
    {
      "source": "n14",
      "target": "n15"
    },
    {
      "source": "n27",
      "target": "n26"
    },
    {
      "source": "n50",
      "target": "n51"
    },
    {
      "source": "n59",
      "target": "n60"
    },
    {
      "source": "n17",
      "target": "n19"
    },
    {
      "source": "n43",
      "target": "n47"
    },
    {
      "source": "n26",
      "target": "n27"
    },
    {
      "source": "n23",
      "target": "n24"
    },
    {
      "source": "n35",
      "target": "n36"
    },
    {
      "source": "n68",
      "target": "n69"
    },
    {
      "source": "n8",
      "target": "n9"
    },
    {
      "source": "n80",
      "target": "n81"
    },
    {
      "source": "n81",
      "target": "n80"
    },
    {
      "source": "n53",
      "target": "n55"
    },
    {
      "source": "n1",
      "target": "n2"
    },
    {
      "source": "n61",
      "target": "n56"
    },
    {
      "source": "n37",
      "target": "n41"
    },
    {
      "source": "n71",
      "target": "n72"
    },
    {
      "source": "n89",
      "target": "n91"
    },
    {
      "source": "n49",
      "target": "n50"
    },
    {
      "source": "n41",
      "target": "n43"
    },
    {
      "source": "n20",
      "target": "n21"
    },
    {
      "source": "n59",
      "target": "n61"
    },
    {
      "source": "n29",
      "target": "n31"
    },
    {
      "source": "n5",
      "target": "n6"
    },
    {
      "source": "n18",
      "target": "n20"
    },
    {
      "source": "n91",
      "target": "n92"
    },
    {
      "source": "n41",
      "target": "n42"
    },
    {
      "source": "n65",
      "target": "n66"
    },
    {
      "source": "n38",
      "target": "n39"
    },
    {
      "source": "n21",
      "target": "n20"
    },
    {
      "source": "n2",
      "target": "n1"
    },
    {
      "source": "n87",
      "target": "n86"
    },
    {
      "source": "n17",
      "target": "n18"
    },
    {
      "source": "n23",
      "target": "n25"
    },
    {
      "source": "n78",
      "target": "n77"
    },
    {
      "source": "n35",
      "target": "n37"
    },
    {
      "source": "n88",
      "target": "n83"
    },
    {
      "source": "n69",
      "target": "n71"
    },
    {
      "source": "n60",
      "target": "n59"
    },
    {
      "source": "n31",
      "target": "n35"
    },
    {
      "source": "n25",
      "target": "n29"
    },
    {
      "source": "n92",
      "target": "n94"
    },
    {
      "source": "n96",
      "target": "n97"
    },
    {
      "source": "n95",
      "target": "n97"
    },
    {
      "source": "n29",
      "target": "n30"
    },
    {
      "source": "n80",
      "target": "n82"
    },
    {
      "source": "n52",
      "target": "n56"
    },
    {
      "source": "n89",
      "target": "n90"
    },
    {
      "source": "n33",
      "target": "n32"
    },
    {
      "source": "n11",
      "target": "n12"
    },
    {
      "source": "n64",
      "target": "n68"
    },
    {
      "source": "n38",
      "target": "n40"
    },
    {
      "source": "n42",
      "target": "n44"
    },
    {
      "source": "n26",
      "target": "n28"
    },
    {
      "source": "n65",
      "target": "n67"
    },
    {
      "source": "n86",
      "target": "n87"
    },
    {
      "source": "n94",
      "target": "n96"
    },
    {
      "source": "n6",
      "target": "n5"
    },
    {
      "source": "n57",
      "target": "n59"
    },
    {
      "source": "n30",
      "target": "n32"
    },
    {
      "source": "n56",
      "target": "n58"
    },
    {
      "source": "n55",
      "target": "n50"
    },
    {
      "source": "n93",
      "target": "n92"
    },
    {
      "source": "n74",
      "target": "n76"
    },
    {
      "source": "n47",
      "target": "n49"
    },
    {
      "source": "n83",
      "target": "n84"
    },
    {
      "source": "n77",
      "target": "n78"
    },
    {
      "source": "n44",
      "target": "n45"
    },
    {
      "source": "n58",
      "target": "n62"
    },
    {
      "source": "n51",
      "target": "n54"
    },
    {
      "source": "n46",
      "target": "n41"
    },
    {
      "source": "n39",
      "target": "n38"
    },
    {
      "source": "n82",
      "target": "n83"
    },
    {
      "source": "n16",
      "target": "n11"
    },
    {
      "source": "n72",
      "target": "n71"
    },
    {
      "source": "n86",
      "target": "n88"
    },
    {
      "source": "n13",
      "target": "n17"
    },
    {
      "source": "n47",
      "target": "n48"
    },
    {
      "source": "n22",
      "target": "n17"
    },
    {
      "source": "n51",
      "target": "n53"
    },
    {
      "source": "n94",
      "target": "n95"
    },
    {
      "source": "n79",
      "target": "n80"
    },
    {
      "source": "n14",
      "target": "n16"
    },
    {
      "source": "n62",
      "target": "n63"
    },
    {
      "source": "n70",
      "target": "n74"
    },
    {
      "source": "n1",
      "target": "n3"
    },
    {
      "source": "n24",
      "target": "n26"
    },
    {
      "source": "n75",
      "target": "n74"
    },
    {
      "source": "n45",
      "target": "n44"
    },
    {
      "source": "n66",
      "target": "n65"
    },
    {
      "source": "n9",
      "target": "n8"
    },
    {
      "source": "n32",
      "target": "n34"
    },
    {
      "source": "n63",
      "target": "n65"
    },
    {
      "source": "n11",
      "target": "n13"
    },
    {
      "source": "n54",
      "target": "n55"
    },
    {
      "source": "n10",
      "target": "n11"
    },
    {
      "source": "n48",
      "target": "n47"
    },
    {
      "source": "n85",
      "target": "n89"
    },
    {
      "source": "n28",
      "target": "n23"
    },
    {
      "source": "n71",
      "target": "n73"
    },
    {
      "source": "n68",
      "target": "n70"
    },
    {
      "source": "n4",
      "target": "n5"
    },
    {
      "source": "n84",
      "target": "n86"
    },
    {
      "source": "n50",
      "target": "n52"
    },
    {
      "source": "n7",
      "target": "n8"
    },
    {
      "source": "n90",
      "target": "n89"
    },
    {
      "source": "n62",
      "target": "n64"
    },
    {
      "source": "n12",
      "target": "n14"
    },
    {
      "source": "n44",
      "target": "n46"
    },
    {
      "source": "n36",
      "target": "n38"
    },
    {
      "source": "n67",
      "target": "n62"
    },
    {
      "source": "n32",
      "target": "n33"
    },
    {
      "source": "n40",
      "target": "n35"
    },
    {
      "source": "n73",
      "target": "n68"
    },
    {
      "source": "n34",
      "target": "n29"
    },
    {
      "source": "n77",
      "target": "n79"
    },
    {
      "source": "n8",
      "target": "n10"
    },
    {
      "source": "n76",
      "target": "n77"
    },
    {
      "source": "n15",
      "target": "n14"
    },
    {
      "source": "n19",
      "target": "n23"
    },
    {
      "source": "n20",
      "target": "n22"
    },
    {
      "source": "n5",
      "target": "n7"
    },
    {
      "source": "n92",
      "target": "n93"
    },
    {
      "source": "n56",
      "target": "n57"
    }
  ]
}