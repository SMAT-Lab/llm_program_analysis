{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "import asyncio",
        "import logging",
        "from contextlib import asynccontextmanager",
        "import uvicorn",
        "from autogpt_libs.auth import parse_jwt_token",
        "from fastapi import Depends, FastAPI, WebSocket, WebSocketDisconnect",
        "from starlette.middleware.cors import CORSMiddleware",
        "from backend.data import redis",
        "from backend.data.execution import AsyncRedisExecutionEventBus",
        "from backend.data.user import DEFAULT_USER_ID",
        "from backend.server.conn_manager import ConnectionManager",
        "from backend.server.model import ExecutionSubscription, Methods, WsMessage",
        "from backend.util.service import AppProcess",
        "from backend.util.settings import AppEnvironment, Config, Settings",
        "logger = logging.getLogger(__name__)",
        "settings = Settings()",
        "@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    manager = get_connection_manager()\n    fut = asyncio.create_task(event_broadcaster(manager))\n    fut.add_done_callback(lambda _: logger.info('Event broadcaster stopped'))\n    yield",
        "manager = get_connection_manager()",
        "fut = asyncio.create_task(event_broadcaster(manager))",
        "fut.add_done_callback(lambda _: logger.info('Event broadcaster stopped'))",
        "(yield)",
        "docs_url = '/docs' if settings.config.app_env == AppEnvironment.LOCAL else None",
        "app = FastAPI(lifespan=lifespan, docs_url=docs_url)",
        "_connection_manager = None",
        "def get_connection_manager():\n    global _connection_manager\n    if _connection_manager is None:\n        _connection_manager = ConnectionManager()\n    return _connection_manager",
        "global _connection_manager",
        "_connection_manager Is None"
      ],
      "code": "import asyncio\nimport logging\nfrom contextlib import asynccontextmanager\nimport uvicorn\nfrom autogpt_libs.auth import parse_jwt_token\nfrom fastapi import Depends, FastAPI, WebSocket, WebSocketDisconnect\nfrom starlette.middleware.cors import CORSMiddleware\nfrom backend.data import redis\nfrom backend.data.execution import AsyncRedisExecutionEventBus\nfrom backend.data.user import DEFAULT_USER_ID\nfrom backend.server.conn_manager import ConnectionManager\nfrom backend.server.model import ExecutionSubscription, Methods, WsMessage\nfrom backend.util.service import AppProcess\nfrom backend.util.settings import AppEnvironment, Config, Settings\nlogger = logging.getLogger(__name__)\nsettings = Settings()\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    manager = get_connection_manager()\n    fut = asyncio.create_task(event_broadcaster(manager))\n    fut.add_done_callback(lambda _: logger.info('Event broadcaster stopped'))\n    yield\nmanager = get_connection_manager()\nfut = asyncio.create_task(event_broadcaster(manager))\nfut.add_done_callback(lambda _: logger.info('Event broadcaster stopped'))\n(yield)\ndocs_url = '/docs' if settings.config.app_env == AppEnvironment.LOCAL else None\napp = FastAPI(lifespan=lifespan, docs_url=docs_url)\n_connection_manager = None\ndef get_connection_manager():\n    global _connection_manager\n    if _connection_manager is None:\n        _connection_manager = ConnectionManager()\n    return _connection_manager\nglobal _connection_manager\n_connection_manager Is None"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "_connection_manager = ConnectionManager()"
      ],
      "code": "_connection_manager = ConnectionManager()"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [
        "return _connection_manager"
      ],
      "code": "return _connection_manager"
    },
    {
      "id": "n4",
      "type": "block",
      "statements": [
        "async def event_broadcaster(manager: ConnectionManager):\n    try:\n        redis.connect()\n        event_queue = AsyncRedisExecutionEventBus()\n        async for event in event_queue.listen():\n            await manager.send_execution_result(event)\n    except Exception as e:\n        logger.exception(f'Event broadcaster error: {e}')\n        raise\n    finally:\n        redis.disconnect()",
        "try:\n    redis.connect()\n    event_queue = AsyncRedisExecutionEventBus()\n    async for event in event_queue.listen():\n        await manager.send_execution_result(event)\nexcept Exception as e:\n    logger.exception(f'Event broadcaster error: {e}')\n    raise\nfinally:\n    redis.disconnect()",
        "redis.connect()",
        "event_queue = AsyncRedisExecutionEventBus()",
        "async for event in event_queue.listen():\n    await manager.send_execution_result(event)",
        "await manager.send_execution_result(event)",
        "logger.exception(f'Event broadcaster error: {e}')",
        "raise",
        "redis.disconnect()",
        "async def authenticate_websocket(websocket: WebSocket) -> str:\n    if not settings.config.enable_auth:\n        return DEFAULT_USER_ID\n    token = websocket.query_params.get('token')\n    if not token:\n        await websocket.close(code=4001, reason='Missing authentication token')\n        return ''\n    try:\n        payload = parse_jwt_token(token)\n        user_id = payload.get('sub')\n        if not user_id:\n            await websocket.close(code=4002, reason='Invalid token')\n            return ''\n        return user_id\n    except ValueError:\n        await websocket.close(code=4003, reason='Invalid token')\n        return ''",
        "not settings.config.enable_auth"
      ],
      "code": "async def event_broadcaster(manager: ConnectionManager):\n    try:\n        redis.connect()\n        event_queue = AsyncRedisExecutionEventBus()\n        async for event in event_queue.listen():\n            await manager.send_execution_result(event)\n    except Exception as e:\n        logger.exception(f'Event broadcaster error: {e}')\n        raise\n    finally:\n        redis.disconnect()\ntry:\n    redis.connect()\n    event_queue = AsyncRedisExecutionEventBus()\n    async for event in event_queue.listen():\n        await manager.send_execution_result(event)\nexcept Exception as e:\n    logger.exception(f'Event broadcaster error: {e}')\n    raise\nfinally:\n    redis.disconnect()\nredis.connect()\nevent_queue = AsyncRedisExecutionEventBus()\nasync for event in event_queue.listen():\n    await manager.send_execution_result(event)\nawait manager.send_execution_result(event)\nlogger.exception(f'Event broadcaster error: {e}')\nraise\nredis.disconnect()\nasync def authenticate_websocket(websocket: WebSocket) -> str:\n    if not settings.config.enable_auth:\n        return DEFAULT_USER_ID\n    token = websocket.query_params.get('token')\n    if not token:\n        await websocket.close(code=4001, reason='Missing authentication token')\n        return ''\n    try:\n        payload = parse_jwt_token(token)\n        user_id = payload.get('sub')\n        if not user_id:\n            await websocket.close(code=4002, reason='Invalid token')\n            return ''\n        return user_id\n    except ValueError:\n        await websocket.close(code=4003, reason='Invalid token')\n        return ''\nnot settings.config.enable_auth"
    },
    {
      "id": "n5",
      "type": "block",
      "statements": [
        "return DEFAULT_USER_ID"
      ],
      "code": "return DEFAULT_USER_ID"
    },
    {
      "id": "n6",
      "type": "block",
      "statements": [],
      "code": "\ntoken = websocket.query_params.get('token')\nnot token"
    },
    {
      "id": "n7",
      "type": "block",
      "statements": [
        "await websocket.close(code=4001, reason='Missing authentication token')",
        "return ''"
      ],
      "code": "await websocket.close(code=4001, reason='Missing authentication token')\nreturn ''"
    },
    {
      "id": "n8",
      "type": "block",
      "statements": [],
      "code": "\ntry:\n    payload = parse_jwt_token(token)\n    user_id = payload.get('sub')\n    if not user_id:\n        await websocket.close(code=4002, reason='Invalid token')\n        return ''\n    return user_id\nexcept ValueError:\n    await websocket.close(code=4003, reason='Invalid token')\n    return ''\npayload = parse_jwt_token(token)\nuser_id = payload.get('sub')\nnot user_id"
    },
    {
      "id": "n9",
      "type": "block",
      "statements": [
        "await websocket.close(code=4002, reason='Invalid token')",
        "return ''"
      ],
      "code": "await websocket.close(code=4002, reason='Invalid token')\nreturn ''"
    },
    {
      "id": "n10",
      "type": "block",
      "statements": [],
      "code": "\nreturn user_id"
    },
    {
      "id": "n11",
      "type": "block",
      "statements": [
        "await websocket.close(code=4003, reason='Invalid token')",
        "return ''"
      ],
      "code": "await websocket.close(code=4003, reason='Invalid token')\nreturn ''"
    },
    {
      "id": "n12",
      "type": "block",
      "statements": [
        "async def handle_subscribe(websocket: WebSocket, manager: ConnectionManager, message: WsMessage):\n    if not message.data:\n        await websocket.send_text(WsMessage(method=Methods.ERROR, success=False, error='Subscription data missing').model_dump_json())\n    else:\n        ex_sub = ExecutionSubscription.model_validate(message.data)\n        await manager.subscribe(ex_sub.graph_id, websocket)\n        logger.debug(f'New execution subscription for graph {ex_sub.graph_id}')\n        await websocket.send_text(WsMessage(method=Methods.SUBSCRIBE, success=True, channel=ex_sub.graph_id).model_dump_json())",
        "not message.data"
      ],
      "code": "async def handle_subscribe(websocket: WebSocket, manager: ConnectionManager, message: WsMessage):\n    if not message.data:\n        await websocket.send_text(WsMessage(method=Methods.ERROR, success=False, error='Subscription data missing').model_dump_json())\n    else:\n        ex_sub = ExecutionSubscription.model_validate(message.data)\n        await manager.subscribe(ex_sub.graph_id, websocket)\n        logger.debug(f'New execution subscription for graph {ex_sub.graph_id}')\n        await websocket.send_text(WsMessage(method=Methods.SUBSCRIBE, success=True, channel=ex_sub.graph_id).model_dump_json())\nnot message.data"
    },
    {
      "id": "n13",
      "type": "block",
      "statements": [
        "await websocket.send_text(WsMessage(method=Methods.ERROR, success=False, error='Subscription data missing').model_dump_json())"
      ],
      "code": "await websocket.send_text(WsMessage(method=Methods.ERROR, success=False, error='Subscription data missing').model_dump_json())"
    },
    {
      "id": "n14",
      "type": "block",
      "statements": [
        "ex_sub = ExecutionSubscription.model_validate(message.data)",
        "await manager.subscribe(ex_sub.graph_id, websocket)",
        "logger.debug(f'New execution subscription for graph {ex_sub.graph_id}')",
        "await websocket.send_text(WsMessage(method=Methods.SUBSCRIBE, success=True, channel=ex_sub.graph_id).model_dump_json())"
      ],
      "code": "ex_sub = ExecutionSubscription.model_validate(message.data)\nawait manager.subscribe(ex_sub.graph_id, websocket)\nlogger.debug(f'New execution subscription for graph {ex_sub.graph_id}')\nawait websocket.send_text(WsMessage(method=Methods.SUBSCRIBE, success=True, channel=ex_sub.graph_id).model_dump_json())"
    },
    {
      "id": "n15",
      "type": "block",
      "statements": [
        "async def handle_unsubscribe(websocket: WebSocket, manager: ConnectionManager, message: WsMessage):\n    if not message.data:\n        await websocket.send_text(WsMessage(method=Methods.ERROR, success=False, error='Subscription data missing').model_dump_json())\n    else:\n        ex_sub = ExecutionSubscription.model_validate(message.data)\n        await manager.unsubscribe(ex_sub.graph_id, websocket)\n        logger.debug(f'Removed execution subscription for graph {ex_sub.graph_id}')\n        await websocket.send_text(WsMessage(method=Methods.UNSUBSCRIBE, success=True, channel=ex_sub.graph_id).model_dump_json())",
        "not message.data"
      ],
      "code": "async def handle_unsubscribe(websocket: WebSocket, manager: ConnectionManager, message: WsMessage):\n    if not message.data:\n        await websocket.send_text(WsMessage(method=Methods.ERROR, success=False, error='Subscription data missing').model_dump_json())\n    else:\n        ex_sub = ExecutionSubscription.model_validate(message.data)\n        await manager.unsubscribe(ex_sub.graph_id, websocket)\n        logger.debug(f'Removed execution subscription for graph {ex_sub.graph_id}')\n        await websocket.send_text(WsMessage(method=Methods.UNSUBSCRIBE, success=True, channel=ex_sub.graph_id).model_dump_json())\nnot message.data"
    },
    {
      "id": "n16",
      "type": "block",
      "statements": [
        "await websocket.send_text(WsMessage(method=Methods.ERROR, success=False, error='Subscription data missing').model_dump_json())"
      ],
      "code": "await websocket.send_text(WsMessage(method=Methods.ERROR, success=False, error='Subscription data missing').model_dump_json())"
    },
    {
      "id": "n17",
      "type": "block",
      "statements": [
        "ex_sub = ExecutionSubscription.model_validate(message.data)",
        "await manager.unsubscribe(ex_sub.graph_id, websocket)",
        "logger.debug(f'Removed execution subscription for graph {ex_sub.graph_id}')",
        "await websocket.send_text(WsMessage(method=Methods.UNSUBSCRIBE, success=True, channel=ex_sub.graph_id).model_dump_json())"
      ],
      "code": "ex_sub = ExecutionSubscription.model_validate(message.data)\nawait manager.unsubscribe(ex_sub.graph_id, websocket)\nlogger.debug(f'Removed execution subscription for graph {ex_sub.graph_id}')\nawait websocket.send_text(WsMessage(method=Methods.UNSUBSCRIBE, success=True, channel=ex_sub.graph_id).model_dump_json())"
    },
    {
      "id": "n18",
      "type": "block",
      "statements": [
        "@app.get('/')\nasync def health():\n    return {'status': 'healthy'}",
        "return {'status': 'healthy'}"
      ],
      "code": "@app.get('/')\nasync def health():\n    return {'status': 'healthy'}\nreturn {'status': 'healthy'}"
    },
    {
      "id": "n19",
      "type": "block",
      "statements": [
        "@app.websocket('/ws')\nasync def websocket_router(websocket: WebSocket, manager: ConnectionManager=Depends(get_connection_manager)):\n    user_id = await authenticate_websocket(websocket)\n    if not user_id:\n        return\n    await manager.connect(websocket)\n    try:\n        while True:\n            data = await websocket.receive_text()\n            message = WsMessage.model_validate_json(data)\n            if message.method == Methods.HEARTBEAT:\n                await websocket.send_json({'method': Methods.HEARTBEAT.value, 'data': 'pong', 'success': True})\n                continue\n            if message.method == Methods.SUBSCRIBE:\n                await handle_subscribe(websocket, manager, message)\n            elif message.method == Methods.UNSUBSCRIBE:\n                await handle_unsubscribe(websocket, manager, message)\n            elif message.method == Methods.ERROR:\n                logger.error(f'WebSocket Error message received: {message.data}')\n            else:\n                logger.warning(f'Unknown WebSocket message type {message.method} received: {message.data}')\n                await websocket.send_text(WsMessage(method=Methods.ERROR, success=False, error='Message type is not processed by the server').model_dump_json())\n    except WebSocketDisconnect:\n        manager.disconnect(websocket)\n        logger.debug('WebSocket client disconnected')",
        "user_id = await authenticate_websocket(websocket)",
        "not user_id"
      ],
      "code": "@app.websocket('/ws')\nasync def websocket_router(websocket: WebSocket, manager: ConnectionManager=Depends(get_connection_manager)):\n    user_id = await authenticate_websocket(websocket)\n    if not user_id:\n        return\n    await manager.connect(websocket)\n    try:\n        while True:\n            data = await websocket.receive_text()\n            message = WsMessage.model_validate_json(data)\n            if message.method == Methods.HEARTBEAT:\n                await websocket.send_json({'method': Methods.HEARTBEAT.value, 'data': 'pong', 'success': True})\n                continue\n            if message.method == Methods.SUBSCRIBE:\n                await handle_subscribe(websocket, manager, message)\n            elif message.method == Methods.UNSUBSCRIBE:\n                await handle_unsubscribe(websocket, manager, message)\n            elif message.method == Methods.ERROR:\n                logger.error(f'WebSocket Error message received: {message.data}')\n            else:\n                logger.warning(f'Unknown WebSocket message type {message.method} received: {message.data}')\n                await websocket.send_text(WsMessage(method=Methods.ERROR, success=False, error='Message type is not processed by the server').model_dump_json())\n    except WebSocketDisconnect:\n        manager.disconnect(websocket)\n        logger.debug('WebSocket client disconnected')\nuser_id = await authenticate_websocket(websocket)\nnot user_id"
    },
    {
      "id": "n20",
      "type": "block",
      "statements": [
        "return"
      ],
      "code": "return"
    },
    {
      "id": "n21",
      "type": "block",
      "statements": [],
      "code": "\nawait manager.connect(websocket)\ntry:\n    while True:\n        data = await websocket.receive_text()\n        message = WsMessage.model_validate_json(data)\n        if message.method == Methods.HEARTBEAT:\n            await websocket.send_json({'method': Methods.HEARTBEAT.value, 'data': 'pong', 'success': True})\n            continue\n        if message.method == Methods.SUBSCRIBE:\n            await handle_subscribe(websocket, manager, message)\n        elif message.method == Methods.UNSUBSCRIBE:\n            await handle_unsubscribe(websocket, manager, message)\n        elif message.method == Methods.ERROR:\n            logger.error(f'WebSocket Error message received: {message.data}')\n        else:\n            logger.warning(f'Unknown WebSocket message type {message.method} received: {message.data}')\n            await websocket.send_text(WsMessage(method=Methods.ERROR, success=False, error='Message type is not processed by the server').model_dump_json())\nexcept WebSocketDisconnect:\n    manager.disconnect(websocket)\n    logger.debug('WebSocket client disconnected')"
    },
    {
      "id": "n22",
      "type": "block",
      "statements": [
        "True"
      ],
      "code": "True"
    },
    {
      "id": "n23",
      "type": "block",
      "statements": [
        "data = await websocket.receive_text()",
        "message = WsMessage.model_validate_json(data)",
        "message.method Eq Methods.HEARTBEAT"
      ],
      "code": "data = await websocket.receive_text()\nmessage = WsMessage.model_validate_json(data)\nmessage.method Eq Methods.HEARTBEAT"
    },
    {
      "id": "n24",
      "type": "block",
      "statements": [
        "manager.disconnect(websocket)",
        "logger.debug('WebSocket client disconnected')",
        "class WebsocketServer(AppProcess):\n\n    def run(self):\n        logger.info(f'CORS allow origins: {settings.config.backend_cors_allow_origins}')\n        server_app = CORSMiddleware(app=app, allow_origins=settings.config.backend_cors_allow_origins, allow_credentials=True, allow_methods=['*'], allow_headers=['*'])\n        uvicorn.run(server_app, host=Config().websocket_server_host, port=Config().websocket_server_port)",
        "def run(self):\n    logger.info(f'CORS allow origins: {settings.config.backend_cors_allow_origins}')\n    server_app = CORSMiddleware(app=app, allow_origins=settings.config.backend_cors_allow_origins, allow_credentials=True, allow_methods=['*'], allow_headers=['*'])\n    uvicorn.run(server_app, host=Config().websocket_server_host, port=Config().websocket_server_port)",
        "logger.info(f'CORS allow origins: {settings.config.backend_cors_allow_origins}')",
        "server_app = CORSMiddleware(app=app, allow_origins=settings.config.backend_cors_allow_origins, allow_credentials=True, allow_methods=['*'], allow_headers=['*'])",
        "uvicorn.run(server_app)"
      ],
      "code": "manager.disconnect(websocket)\nlogger.debug('WebSocket client disconnected')\nclass WebsocketServer(AppProcess):\n\n    def run(self):\n        logger.info(f'CORS allow origins: {settings.config.backend_cors_allow_origins}')\n        server_app = CORSMiddleware(app=app, allow_origins=settings.config.backend_cors_allow_origins, allow_credentials=True, allow_methods=['*'], allow_headers=['*'])\n        uvicorn.run(server_app, host=Config().websocket_server_host, port=Config().websocket_server_port)\ndef run(self):\n    logger.info(f'CORS allow origins: {settings.config.backend_cors_allow_origins}')\n    server_app = CORSMiddleware(app=app, allow_origins=settings.config.backend_cors_allow_origins, allow_credentials=True, allow_methods=['*'], allow_headers=['*'])\n    uvicorn.run(server_app, host=Config().websocket_server_host, port=Config().websocket_server_port)\nlogger.info(f'CORS allow origins: {settings.config.backend_cors_allow_origins}')\nserver_app = CORSMiddleware(app=app, allow_origins=settings.config.backend_cors_allow_origins, allow_credentials=True, allow_methods=['*'], allow_headers=['*'])\nuvicorn.run(server_app)"
    },
    {
      "id": "n25",
      "type": "block",
      "statements": [
        "await websocket.send_json({'method': Methods.HEARTBEAT.value, 'data': 'pong', 'success': True})",
        "continue"
      ],
      "code": "await websocket.send_json({'method': Methods.HEARTBEAT.value, 'data': 'pong', 'success': True})\ncontinue"
    },
    {
      "id": "n26",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n27",
      "type": "block",
      "statements": [
        "message.method Eq Methods.SUBSCRIBE"
      ],
      "code": "message.method Eq Methods.SUBSCRIBE"
    },
    {
      "id": "n28",
      "type": "block",
      "statements": [
        "await handle_subscribe(websocket, manager, message)"
      ],
      "code": "await handle_subscribe(websocket, manager, message)"
    },
    {
      "id": "n29",
      "type": "block",
      "statements": [
        "message.method Eq Methods.UNSUBSCRIBE"
      ],
      "code": "message.method Eq Methods.UNSUBSCRIBE"
    },
    {
      "id": "n30",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n31",
      "type": "block",
      "statements": [
        "await handle_unsubscribe(websocket, manager, message)"
      ],
      "code": "await handle_unsubscribe(websocket, manager, message)"
    },
    {
      "id": "n32",
      "type": "block",
      "statements": [
        "message.method Eq Methods.ERROR"
      ],
      "code": "message.method Eq Methods.ERROR"
    },
    {
      "id": "n33",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n34",
      "type": "block",
      "statements": [
        "logger.error(f'WebSocket Error message received: {message.data}')"
      ],
      "code": "logger.error(f'WebSocket Error message received: {message.data}')"
    },
    {
      "id": "n35",
      "type": "block",
      "statements": [
        "logger.warning(f'Unknown WebSocket message type {message.method} received: {message.data}')",
        "await websocket.send_text(WsMessage(method=Methods.ERROR, success=False, error='Message type is not processed by the server').model_dump_json())"
      ],
      "code": "logger.warning(f'Unknown WebSocket message type {message.method} received: {message.data}')\nawait websocket.send_text(WsMessage(method=Methods.ERROR, success=False, error='Message type is not processed by the server').model_dump_json())"
    },
    {
      "id": "n36",
      "type": "block",
      "statements": [],
      "code": ""
    }
  ],
  "edges": [
    {
      "source": "n6",
      "target": "n7"
    },
    {
      "source": "n14",
      "target": "n15"
    },
    {
      "source": "n0",
      "target": "n1"
    },
    {
      "source": "n17",
      "target": "n18"
    },
    {
      "source": "n23",
      "target": "n25"
    },
    {
      "source": "n21",
      "target": "n22"
    },
    {
      "source": "n22",
      "target": "n23"
    },
    {
      "source": "n26",
      "target": "n27"
    },
    {
      "source": "n2",
      "target": "n3"
    },
    {
      "source": "n19",
      "target": "n21"
    },
    {
      "source": "n29",
      "target": "n32"
    },
    {
      "source": "n35",
      "target": "n36"
    },
    {
      "source": "n8",
      "target": "n9"
    },
    {
      "source": "n16",
      "target": "n18"
    },
    {
      "source": "n13",
      "target": "n15"
    },
    {
      "source": "n19",
      "target": "n20"
    },
    {
      "source": "n4",
      "target": "n5"
    },
    {
      "source": "n4",
      "target": "n6"
    },
    {
      "source": "n12",
      "target": "n13"
    },
    {
      "source": "n34",
      "target": "n36"
    },
    {
      "source": "n23",
      "target": "n26"
    },
    {
      "source": "n31",
      "target": "n33"
    },
    {
      "source": "n15",
      "target": "n16"
    },
    {
      "source": "n32",
      "target": "n35"
    },
    {
      "source": "n30",
      "target": "n22"
    },
    {
      "source": "n12",
      "target": "n14"
    },
    {
      "source": "n28",
      "target": "n30"
    },
    {
      "source": "n36",
      "target": "n33"
    },
    {
      "source": "n29",
      "target": "n31"
    },
    {
      "source": "n27",
      "target": "n29"
    },
    {
      "source": "n1",
      "target": "n3"
    },
    {
      "source": "n8",
      "target": "n10"
    },
    {
      "source": "n27",
      "target": "n28"
    },
    {
      "source": "n33",
      "target": "n30"
    },
    {
      "source": "n25",
      "target": "n27"
    },
    {
      "source": "n22",
      "target": "n24"
    },
    {
      "source": "n32",
      "target": "n34"
    },
    {
      "source": "n6",
      "target": "n8"
    },
    {
      "source": "n0",
      "target": "n2"
    },
    {
      "source": "n15",
      "target": "n17"
    }
  ]
}