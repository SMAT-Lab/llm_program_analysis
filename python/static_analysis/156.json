{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "from fastapi import HTTPException, Request",
        "from starlette.middleware.base import RequestResponseEndpoint",
        "from .limiter import RateLimiter",
        "async def rate_limit_middleware(request: Request, call_next: RequestResponseEndpoint):\n    \"\"\"FastAPI middleware for rate limiting API requests.\"\"\"\n    limiter = RateLimiter()\n    if not request.url.path.startswith('/api'):\n        return await call_next(request)\n    api_key = request.headers.get('Authorization')\n    if not api_key:\n        return await call_next(request)\n    api_key = api_key.replace('Bearer ', '')\n    (is_allowed, remaining, reset_time) = await limiter.check_rate_limit(api_key)\n    if not is_allowed:\n        raise HTTPException(status_code=429, detail='Rate limit exceeded. Please try again later.')\n    response = await call_next(request)\n    response.headers['X-RateLimit-Limit'] = str(limiter.max_requests)\n    response.headers['X-RateLimit-Remaining'] = str(remaining)\n    response.headers['X-RateLimit-Reset'] = str(reset_time)\n    return response",
        "'FastAPI middleware for rate limiting API requests.'",
        "limiter = RateLimiter()",
        "not request.url.path.startswith('/api')"
      ],
      "code": "from fastapi import HTTPException, Request\nfrom starlette.middleware.base import RequestResponseEndpoint\nfrom .limiter import RateLimiter\nasync def rate_limit_middleware(request: Request, call_next: RequestResponseEndpoint):\n    \"\"\"FastAPI middleware for rate limiting API requests.\"\"\"\n    limiter = RateLimiter()\n    if not request.url.path.startswith('/api'):\n        return await call_next(request)\n    api_key = request.headers.get('Authorization')\n    if not api_key:\n        return await call_next(request)\n    api_key = api_key.replace('Bearer ', '')\n    (is_allowed, remaining, reset_time) = await limiter.check_rate_limit(api_key)\n    if not is_allowed:\n        raise HTTPException(status_code=429, detail='Rate limit exceeded. Please try again later.')\n    response = await call_next(request)\n    response.headers['X-RateLimit-Limit'] = str(limiter.max_requests)\n    response.headers['X-RateLimit-Remaining'] = str(remaining)\n    response.headers['X-RateLimit-Reset'] = str(reset_time)\n    return response\n'FastAPI middleware for rate limiting API requests.'\nlimiter = RateLimiter()\nnot request.url.path.startswith('/api')"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "return await call_next(request)"
      ],
      "code": "return await call_next(request)"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [],
      "code": "\napi_key = request.headers.get('Authorization')\nnot api_key"
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [
        "return await call_next(request)"
      ],
      "code": "return await call_next(request)"
    },
    {
      "id": "n4",
      "type": "block",
      "statements": [],
      "code": "\napi_key = api_key.replace('Bearer ', '')\n(is_allowed, remaining, reset_time) = await limiter.check_rate_limit(api_key)\nnot is_allowed"
    },
    {
      "id": "n5",
      "type": "block",
      "statements": [
        "raise HTTPException(status_code=429, detail='Rate limit exceeded. Please try again later.')"
      ],
      "code": "raise HTTPException(status_code=429, detail='Rate limit exceeded. Please try again later.')"
    },
    {
      "id": "n6",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n7",
      "type": "block",
      "statements": [
        "response = await call_next(request)",
        "response.headers['X-RateLimit-Limit'] = str(limiter.max_requests)",
        "response.headers['X-RateLimit-Remaining'] = str(remaining)",
        "response.headers['X-RateLimit-Reset'] = str(reset_time)",
        "return response"
      ],
      "code": "response = await call_next(request)\nresponse.headers['X-RateLimit-Limit'] = str(limiter.max_requests)\nresponse.headers['X-RateLimit-Remaining'] = str(remaining)\nresponse.headers['X-RateLimit-Reset'] = str(reset_time)\nreturn response"
    }
  ],
  "edges": [
    {
      "source": "n6",
      "target": "n7"
    },
    {
      "source": "n2",
      "target": "n4"
    },
    {
      "source": "n0",
      "target": "n1"
    },
    {
      "source": "n0",
      "target": "n2"
    },
    {
      "source": "n5",
      "target": "n7"
    },
    {
      "source": "n4",
      "target": "n6"
    },
    {
      "source": "n4",
      "target": "n5"
    },
    {
      "source": "n2",
      "target": "n3"
    }
  ]
}