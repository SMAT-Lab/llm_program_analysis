{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "class QueryApi(object):\n\n    def __init__(self, memory_cache, reverse_index_cluster):\n        self.memory_cache = memory_cache\n        self.reverse_index_cluster = reverse_index_cluster\n\n    def parse_query(self, query):\n        \"\"\"Remove markup, break text into terms, deal with typos,\n        normalize capitalization, convert to use boolean operations.\n        \"\"\"\n        ...\n\n    def process_query(self, query):\n        query = self.parse_query(query)\n        results = self.memory_cache.get(query)\n        if results is None:\n            results = self.reverse_index_cluster.process_search(query)\n            self.memory_cache.set(query, results)\n        return results",
        "def __init__(self, memory_cache, reverse_index_cluster):\n    self.memory_cache = memory_cache\n    self.reverse_index_cluster = reverse_index_cluster",
        "self.memory_cache = memory_cache",
        "self.reverse_index_cluster = reverse_index_cluster",
        "def parse_query(self, query):\n    \"\"\"Remove markup, break text into terms, deal with typos,\n        normalize capitalization, convert to use boolean operations.\n        \"\"\"\n    ...",
        "'Remove markup, break text into terms, deal with typos,\\n        normalize capitalization, convert to use boolean operations.\\n        '",
        "Ellipsis",
        "def process_query(self, query):\n    query = self.parse_query(query)\n    results = self.memory_cache.get(query)\n    if results is None:\n        results = self.reverse_index_cluster.process_search(query)\n        self.memory_cache.set(query, results)\n    return results",
        "query = self.parse_query(query)",
        "results = self.memory_cache.get(query)",
        "results Is None"
      ],
      "code": "class QueryApi(object):\n\n    def __init__(self, memory_cache, reverse_index_cluster):\n        self.memory_cache = memory_cache\n        self.reverse_index_cluster = reverse_index_cluster\n\n    def parse_query(self, query):\n        \"\"\"Remove markup, break text into terms, deal with typos,\n        normalize capitalization, convert to use boolean operations.\n        \"\"\"\n        ...\n\n    def process_query(self, query):\n        query = self.parse_query(query)\n        results = self.memory_cache.get(query)\n        if results is None:\n            results = self.reverse_index_cluster.process_search(query)\n            self.memory_cache.set(query, results)\n        return results\ndef __init__(self, memory_cache, reverse_index_cluster):\n    self.memory_cache = memory_cache\n    self.reverse_index_cluster = reverse_index_cluster\nself.memory_cache = memory_cache\nself.reverse_index_cluster = reverse_index_cluster\ndef parse_query(self, query):\n    \"\"\"Remove markup, break text into terms, deal with typos,\n        normalize capitalization, convert to use boolean operations.\n        \"\"\"\n    ...\n'Remove markup, break text into terms, deal with typos,\\n        normalize capitalization, convert to use boolean operations.\\n        '\nEllipsis\ndef process_query(self, query):\n    query = self.parse_query(query)\n    results = self.memory_cache.get(query)\n    if results is None:\n        results = self.reverse_index_cluster.process_search(query)\n        self.memory_cache.set(query, results)\n    return results\nquery = self.parse_query(query)\nresults = self.memory_cache.get(query)\nresults Is None"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "results = self.reverse_index_cluster.process_search(query)",
        "self.memory_cache.set(query, results)"
      ],
      "code": "results = self.reverse_index_cluster.process_search(query)\nself.memory_cache.set(query, results)"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [
        "return results"
      ],
      "code": "return results"
    },
    {
      "id": "n4",
      "type": "block",
      "statements": [
        "class Node(object):\n\n    def __init__(self, query, results):\n        self.query = query\n        self.results = results",
        "def __init__(self, query, results):\n    self.query = query\n    self.results = results",
        "self.query = query",
        "self.results = results",
        "class LinkedList(object):\n\n    def __init__(self):\n        self.head = None\n        self.tail = None\n\n    def move_to_front(self, node):\n        ...\n\n    def append_to_front(self, node):\n        ...\n\n    def remove_from_tail(self):\n        ...",
        "def __init__(self):\n    self.head = None\n    self.tail = None",
        "self.head = None",
        "self.tail = None",
        "def move_to_front(self, node):\n    ...",
        "Ellipsis",
        "def append_to_front(self, node):\n    ...",
        "Ellipsis",
        "def remove_from_tail(self):\n    ...",
        "Ellipsis",
        "class Cache(object):\n\n    def __init__(self, MAX_SIZE):\n        self.MAX_SIZE = MAX_SIZE\n        self.size = 0\n        self.lookup = {}\n        self.linked_list = LinkedList()\n\n    def get(self, query):\n        \"\"\"Get the stored query result from the cache.\n\n        Accessing a node updates its position to the front of the LRU list.\n        \"\"\"\n        node = self.lookup[query]\n        if node is None:\n            return None\n        self.linked_list.move_to_front(node)\n        return node.results\n\n    def set(self, results, query):\n        \"\"\"Set the result for the given query key in the cache.\n\n        When updating an entry, updates its position to the front of the LRU list.\n        If the entry is new and the cache is at capacity, removes the oldest entry\n        before the new entry is added.\n        \"\"\"\n        node = self.map[query]\n        if node is not None:\n            node.results = results\n            self.linked_list.move_to_front(node)\n        else:\n            if self.size == self.MAX_SIZE:\n                self.lookup.pop(self.linked_list.tail.query, None)\n                self.linked_list.remove_from_tail()\n            else:\n                self.size += 1\n            new_node = Node(query, results)\n            self.linked_list.append_to_front(new_node)\n            self.lookup[query] = new_node",
        "def __init__(self, MAX_SIZE):\n    self.MAX_SIZE = MAX_SIZE\n    self.size = 0\n    self.lookup = {}\n    self.linked_list = LinkedList()",
        "self.MAX_SIZE = MAX_SIZE",
        "self.size = 0",
        "self.lookup = {}",
        "self.linked_list = LinkedList()",
        "def get(self, query):\n    \"\"\"Get the stored query result from the cache.\n\n        Accessing a node updates its position to the front of the LRU list.\n        \"\"\"\n    node = self.lookup[query]\n    if node is None:\n        return None\n    self.linked_list.move_to_front(node)\n    return node.results",
        "'Get the stored query result from the cache.\\n\\n        Accessing a node updates its position to the front of the LRU list.\\n        '",
        "node = self.lookup[query]",
        "node Is None"
      ],
      "code": "class Node(object):\n\n    def __init__(self, query, results):\n        self.query = query\n        self.results = results\ndef __init__(self, query, results):\n    self.query = query\n    self.results = results\nself.query = query\nself.results = results\nclass LinkedList(object):\n\n    def __init__(self):\n        self.head = None\n        self.tail = None\n\n    def move_to_front(self, node):\n        ...\n\n    def append_to_front(self, node):\n        ...\n\n    def remove_from_tail(self):\n        ...\ndef __init__(self):\n    self.head = None\n    self.tail = None\nself.head = None\nself.tail = None\ndef move_to_front(self, node):\n    ...\nEllipsis\ndef append_to_front(self, node):\n    ...\nEllipsis\ndef remove_from_tail(self):\n    ...\nEllipsis\nclass Cache(object):\n\n    def __init__(self, MAX_SIZE):\n        self.MAX_SIZE = MAX_SIZE\n        self.size = 0\n        self.lookup = {}\n        self.linked_list = LinkedList()\n\n    def get(self, query):\n        \"\"\"Get the stored query result from the cache.\n\n        Accessing a node updates its position to the front of the LRU list.\n        \"\"\"\n        node = self.lookup[query]\n        if node is None:\n            return None\n        self.linked_list.move_to_front(node)\n        return node.results\n\n    def set(self, results, query):\n        \"\"\"Set the result for the given query key in the cache.\n\n        When updating an entry, updates its position to the front of the LRU list.\n        If the entry is new and the cache is at capacity, removes the oldest entry\n        before the new entry is added.\n        \"\"\"\n        node = self.map[query]\n        if node is not None:\n            node.results = results\n            self.linked_list.move_to_front(node)\n        else:\n            if self.size == self.MAX_SIZE:\n                self.lookup.pop(self.linked_list.tail.query, None)\n                self.linked_list.remove_from_tail()\n            else:\n                self.size += 1\n            new_node = Node(query, results)\n            self.linked_list.append_to_front(new_node)\n            self.lookup[query] = new_node\ndef __init__(self, MAX_SIZE):\n    self.MAX_SIZE = MAX_SIZE\n    self.size = 0\n    self.lookup = {}\n    self.linked_list = LinkedList()\nself.MAX_SIZE = MAX_SIZE\nself.size = 0\nself.lookup = {}\nself.linked_list = LinkedList()\ndef get(self, query):\n    \"\"\"Get the stored query result from the cache.\n\n        Accessing a node updates its position to the front of the LRU list.\n        \"\"\"\n    node = self.lookup[query]\n    if node is None:\n        return None\n    self.linked_list.move_to_front(node)\n    return node.results\n'Get the stored query result from the cache.\\n\\n        Accessing a node updates its position to the front of the LRU list.\\n        '\nnode = self.lookup[query]\nnode Is None"
    },
    {
      "id": "n5",
      "type": "block",
      "statements": [
        "return None"
      ],
      "code": "return None"
    },
    {
      "id": "n6",
      "type": "block",
      "statements": [],
      "code": "\nself.linked_list.move_to_front(node)\nreturn node.results"
    },
    {
      "id": "n7",
      "type": "block",
      "statements": [
        "def set(self, results, query):\n    \"\"\"Set the result for the given query key in the cache.\n\n        When updating an entry, updates its position to the front of the LRU list.\n        If the entry is new and the cache is at capacity, removes the oldest entry\n        before the new entry is added.\n        \"\"\"\n    node = self.map[query]\n    if node is not None:\n        node.results = results\n        self.linked_list.move_to_front(node)\n    else:\n        if self.size == self.MAX_SIZE:\n            self.lookup.pop(self.linked_list.tail.query, None)\n            self.linked_list.remove_from_tail()\n        else:\n            self.size += 1\n        new_node = Node(query, results)\n        self.linked_list.append_to_front(new_node)\n        self.lookup[query] = new_node",
        "'Set the result for the given query key in the cache.\\n\\n        When updating an entry, updates its position to the front of the LRU list.\\n        If the entry is new and the cache is at capacity, removes the oldest entry\\n        before the new entry is added.\\n        '",
        "node = self.map[query]",
        "node IsNot None"
      ],
      "code": "def set(self, results, query):\n    \"\"\"Set the result for the given query key in the cache.\n\n        When updating an entry, updates its position to the front of the LRU list.\n        If the entry is new and the cache is at capacity, removes the oldest entry\n        before the new entry is added.\n        \"\"\"\n    node = self.map[query]\n    if node is not None:\n        node.results = results\n        self.linked_list.move_to_front(node)\n    else:\n        if self.size == self.MAX_SIZE:\n            self.lookup.pop(self.linked_list.tail.query, None)\n            self.linked_list.remove_from_tail()\n        else:\n            self.size += 1\n        new_node = Node(query, results)\n        self.linked_list.append_to_front(new_node)\n        self.lookup[query] = new_node\n'Set the result for the given query key in the cache.\\n\\n        When updating an entry, updates its position to the front of the LRU list.\\n        If the entry is new and the cache is at capacity, removes the oldest entry\\n        before the new entry is added.\\n        '\nnode = self.map[query]\nnode IsNot None"
    },
    {
      "id": "n8",
      "type": "block",
      "statements": [
        "node.results = results",
        "self.linked_list.move_to_front(node)"
      ],
      "code": "node.results = results\nself.linked_list.move_to_front(node)"
    },
    {
      "id": "n9",
      "type": "block",
      "statements": [
        "self.size Eq self.MAX_SIZE"
      ],
      "code": "self.size Eq self.MAX_SIZE"
    },
    {
      "id": "n10",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n11",
      "type": "block",
      "statements": [
        "self.lookup.pop(self.linked_list.tail.query, None)",
        "self.linked_list.remove_from_tail()"
      ],
      "code": "self.lookup.pop(self.linked_list.tail.query, None)\nself.linked_list.remove_from_tail()"
    },
    {
      "id": "n12",
      "type": "block",
      "statements": [
        "self.size += 1"
      ],
      "code": "self.size += 1"
    },
    {
      "id": "n13",
      "type": "block",
      "statements": [
        "new_node = Node(query, results)",
        "self.linked_list.append_to_front(new_node)",
        "self.lookup[query] = new_node"
      ],
      "code": "new_node = Node(query, results)\nself.linked_list.append_to_front(new_node)\nself.lookup[query] = new_node"
    }
  ],
  "edges": [
    {
      "source": "n9",
      "target": "n11"
    },
    {
      "source": "n1",
      "target": "n3"
    },
    {
      "source": "n13",
      "target": "n10"
    },
    {
      "source": "n8",
      "target": "n10"
    },
    {
      "source": "n0",
      "target": "n1"
    },
    {
      "source": "n0",
      "target": "n2"
    },
    {
      "source": "n4",
      "target": "n5"
    },
    {
      "source": "n9",
      "target": "n12"
    },
    {
      "source": "n4",
      "target": "n6"
    },
    {
      "source": "n12",
      "target": "n13"
    },
    {
      "source": "n11",
      "target": "n13"
    },
    {
      "source": "n7",
      "target": "n8"
    },
    {
      "source": "n2",
      "target": "n3"
    },
    {
      "source": "n7",
      "target": "n9"
    }
  ]
}