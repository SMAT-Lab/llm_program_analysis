{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "import logging",
        "class BelowLevelFilter(logging.Filter):\n    \"\"\"Filter for logging levels below a certain threshold.\"\"\"\n\n    def __init__(self, below_level: int):\n        super().__init__()\n        self.below_level = below_level\n\n    def filter(self, record: logging.LogRecord):\n        return record.levelno < self.below_level",
        "'Filter for logging levels below a certain threshold.'",
        "def __init__(self, below_level: int):\n    super().__init__()\n    self.below_level = below_level",
        "super().__init__()",
        "self.below_level = below_level",
        "def filter(self, record: logging.LogRecord):\n    return record.levelno < self.below_level",
        "return record.levelno < self.below_level"
      ],
      "code": "import logging\nclass BelowLevelFilter(logging.Filter):\n    \"\"\"Filter for logging levels below a certain threshold.\"\"\"\n\n    def __init__(self, below_level: int):\n        super().__init__()\n        self.below_level = below_level\n\n    def filter(self, record: logging.LogRecord):\n        return record.levelno < self.below_level\n'Filter for logging levels below a certain threshold.'\ndef __init__(self, below_level: int):\n    super().__init__()\n    self.below_level = below_level\nsuper().__init__()\nself.below_level = below_level\ndef filter(self, record: logging.LogRecord):\n    return record.levelno < self.below_level\nreturn record.levelno < self.below_level"
    }
  ],
  "edges": []
}