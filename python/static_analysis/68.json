{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "import asyncio",
        "import contextlib",
        "import logging",
        "from functools import wraps",
        "from typing import Any, Awaitable, Callable, Dict, Optional, TypeVar, Union, cast",
        "import ldclient",
        "from fastapi import HTTPException",
        "from ldclient import Context, LDClient",
        "from ldclient.config import Config",
        "from typing_extensions import ParamSpec",
        "from .config import SETTINGS",
        "logger = logging.getLogger(__name__)",
        "logging.basicConfig()",
        "P = ParamSpec('P')",
        "T = TypeVar('T')",
        "def get_client() -> LDClient:\n    \"\"\"Get the LaunchDarkly client singleton.\"\"\"\n    return ldclient.get()",
        "'Get the LaunchDarkly client singleton.'",
        "return ldclient.get()"
      ],
      "code": "import asyncio\nimport contextlib\nimport logging\nfrom functools import wraps\nfrom typing import Any, Awaitable, Callable, Dict, Optional, TypeVar, Union, cast\nimport ldclient\nfrom fastapi import HTTPException\nfrom ldclient import Context, LDClient\nfrom ldclient.config import Config\nfrom typing_extensions import ParamSpec\nfrom .config import SETTINGS\nlogger = logging.getLogger(__name__)\nlogging.basicConfig()\nP = ParamSpec('P')\nT = TypeVar('T')\ndef get_client() -> LDClient:\n    \"\"\"Get the LaunchDarkly client singleton.\"\"\"\n    return ldclient.get()\n'Get the LaunchDarkly client singleton.'\nreturn ldclient.get()"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "def initialize_launchdarkly() -> None:\n    sdk_key = SETTINGS.launch_darkly_sdk_key\n    logger.debug(f\"Initializing LaunchDarkly with SDK key: {('present' if sdk_key else 'missing')}\")\n    if not sdk_key:\n        logger.warning('LaunchDarkly SDK key not configured')\n        return\n    config = Config(sdk_key)\n    ldclient.set_config(config)\n    if ldclient.get().is_initialized():\n        logger.info('LaunchDarkly client initialized successfully')\n    else:\n        logger.error('LaunchDarkly client failed to initialize')",
        "sdk_key = SETTINGS.launch_darkly_sdk_key",
        "logger.debug(f\"Initializing LaunchDarkly with SDK key: {('present' if sdk_key else 'missing')}\")",
        "not sdk_key"
      ],
      "code": "def initialize_launchdarkly() -> None:\n    sdk_key = SETTINGS.launch_darkly_sdk_key\n    logger.debug(f\"Initializing LaunchDarkly with SDK key: {('present' if sdk_key else 'missing')}\")\n    if not sdk_key:\n        logger.warning('LaunchDarkly SDK key not configured')\n        return\n    config = Config(sdk_key)\n    ldclient.set_config(config)\n    if ldclient.get().is_initialized():\n        logger.info('LaunchDarkly client initialized successfully')\n    else:\n        logger.error('LaunchDarkly client failed to initialize')\nsdk_key = SETTINGS.launch_darkly_sdk_key\nlogger.debug(f\"Initializing LaunchDarkly with SDK key: {('present' if sdk_key else 'missing')}\")\nnot sdk_key"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [
        "logger.warning('LaunchDarkly SDK key not configured')",
        "return"
      ],
      "code": "logger.warning('LaunchDarkly SDK key not configured')\nreturn"
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [],
      "code": "\nconfig = Config(sdk_key)\nldclient.set_config(config)\nldclient.get().is_initialized()"
    },
    {
      "id": "n4",
      "type": "block",
      "statements": [
        "logger.info('LaunchDarkly client initialized successfully')"
      ],
      "code": "logger.info('LaunchDarkly client initialized successfully')"
    },
    {
      "id": "n5",
      "type": "block",
      "statements": [
        "logger.error('LaunchDarkly client failed to initialize')"
      ],
      "code": "logger.error('LaunchDarkly client failed to initialize')"
    },
    {
      "id": "n6",
      "type": "block",
      "statements": [
        "def shutdown_launchdarkly() -> None:\n    \"\"\"Shutdown the LaunchDarkly client.\"\"\"\n    if ldclient.get().is_initialized():\n        ldclient.get().close()\n        logger.info('LaunchDarkly client closed successfully')",
        "'Shutdown the LaunchDarkly client.'",
        "ldclient.get().is_initialized()"
      ],
      "code": "def shutdown_launchdarkly() -> None:\n    \"\"\"Shutdown the LaunchDarkly client.\"\"\"\n    if ldclient.get().is_initialized():\n        ldclient.get().close()\n        logger.info('LaunchDarkly client closed successfully')\n'Shutdown the LaunchDarkly client.'\nldclient.get().is_initialized()"
    },
    {
      "id": "n7",
      "type": "block",
      "statements": [
        "ldclient.get().close()",
        "logger.info('LaunchDarkly client closed successfully')"
      ],
      "code": "ldclient.get().close()\nlogger.info('LaunchDarkly client closed successfully')"
    },
    {
      "id": "n8",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n9",
      "type": "block",
      "statements": [
        "def create_context(user_id: str, additional_attributes: Optional[Dict[str, Any]]=None) -> Context:\n    \"\"\"Create LaunchDarkly context with optional additional attributes.\"\"\"\n    builder = Context.builder(str(user_id)).kind('user')\n    if additional_attributes:\n        for (key, value) in additional_attributes.items():\n            builder.set(key, value)\n    return builder.build()",
        "'Create LaunchDarkly context with optional additional attributes.'",
        "builder = Context.builder(str(user_id)).kind('user')",
        "additional_attributes"
      ],
      "code": "def create_context(user_id: str, additional_attributes: Optional[Dict[str, Any]]=None) -> Context:\n    \"\"\"Create LaunchDarkly context with optional additional attributes.\"\"\"\n    builder = Context.builder(str(user_id)).kind('user')\n    if additional_attributes:\n        for (key, value) in additional_attributes.items():\n            builder.set(key, value)\n    return builder.build()\n'Create LaunchDarkly context with optional additional attributes.'\nbuilder = Context.builder(str(user_id)).kind('user')\nadditional_attributes"
    },
    {
      "id": "n10",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n11",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n12",
      "type": "block",
      "statements": [
        "return builder.build()"
      ],
      "code": "return builder.build()"
    },
    {
      "id": "n13",
      "type": "block",
      "statements": [
        "(key, value)",
        "additional_attributes.items()"
      ],
      "code": "(key, value)\nadditional_attributes.items()"
    },
    {
      "id": "n14",
      "type": "block",
      "statements": [
        "builder.set(key, value)"
      ],
      "code": "builder.set(key, value)"
    },
    {
      "id": "n15",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n16",
      "type": "block",
      "statements": [
        "def feature_flag(flag_key: str, default: bool=False) -> Callable[[Callable[P, Union[T, Awaitable[T]]]], Callable[P, Union[T, Awaitable[T]]]]:\n    \"\"\"\n    Decorator for feature flag protected endpoints.\n    \"\"\"\n\n    def decorator(func: Callable[P, Union[T, Awaitable[T]]]) -> Callable[P, Union[T, Awaitable[T]]]:\n\n        @wraps(func)\n        async def async_wrapper(*args: P.args, **kwargs: P.kwargs) -> T:\n            try:\n                user_id = kwargs.get('user_id')\n                if not user_id:\n                    raise ValueError('user_id is required')\n                if not get_client().is_initialized():\n                    logger.warning(f'LaunchDarkly not initialized, using default={default}')\n                    is_enabled = default\n                else:\n                    context = create_context(str(user_id))\n                    is_enabled = get_client().variation(flag_key, context, default)\n                if not is_enabled:\n                    raise HTTPException(status_code=404, detail='Feature not available')\n                result = func(*args, **kwargs)\n                if asyncio.iscoroutine(result):\n                    return await result\n                return cast(T, result)\n            except Exception as e:\n                logger.error(f'Error evaluating feature flag {flag_key}: {e}')\n                raise\n\n        @wraps(func)\n        def sync_wrapper(*args: P.args, **kwargs: P.kwargs) -> T:\n            try:\n                user_id = kwargs.get('user_id')\n                if not user_id:\n                    raise ValueError('user_id is required')\n                if not get_client().is_initialized():\n                    logger.warning(f'LaunchDarkly not initialized, using default={default}')\n                    is_enabled = default\n                else:\n                    context = create_context(str(user_id))\n                    is_enabled = get_client().variation(flag_key, context, default)\n                if not is_enabled:\n                    raise HTTPException(status_code=404, detail='Feature not available')\n                return cast(T, func(*args, **kwargs))\n            except Exception as e:\n                logger.error(f'Error evaluating feature flag {flag_key}: {e}')\n                raise\n        return cast(Callable[P, Union[T, Awaitable[T]]], async_wrapper if asyncio.iscoroutinefunction(func) else sync_wrapper)\n    return decorator",
        "'\\n    Decorator for feature flag protected endpoints.\\n    '",
        "def decorator(func: Callable[P, Union[T, Awaitable[T]]]) -> Callable[P, Union[T, Awaitable[T]]]:\n\n    @wraps(func)\n    async def async_wrapper(*args: P.args, **kwargs: P.kwargs) -> T:\n        try:\n            user_id = kwargs.get('user_id')\n            if not user_id:\n                raise ValueError('user_id is required')\n            if not get_client().is_initialized():\n                logger.warning(f'LaunchDarkly not initialized, using default={default}')\n                is_enabled = default\n            else:\n                context = create_context(str(user_id))\n                is_enabled = get_client().variation(flag_key, context, default)\n            if not is_enabled:\n                raise HTTPException(status_code=404, detail='Feature not available')\n            result = func(*args, **kwargs)\n            if asyncio.iscoroutine(result):\n                return await result\n            return cast(T, result)\n        except Exception as e:\n            logger.error(f'Error evaluating feature flag {flag_key}: {e}')\n            raise\n\n    @wraps(func)\n    def sync_wrapper(*args: P.args, **kwargs: P.kwargs) -> T:\n        try:\n            user_id = kwargs.get('user_id')\n            if not user_id:\n                raise ValueError('user_id is required')\n            if not get_client().is_initialized():\n                logger.warning(f'LaunchDarkly not initialized, using default={default}')\n                is_enabled = default\n            else:\n                context = create_context(str(user_id))\n                is_enabled = get_client().variation(flag_key, context, default)\n            if not is_enabled:\n                raise HTTPException(status_code=404, detail='Feature not available')\n            return cast(T, func(*args, **kwargs))\n        except Exception as e:\n            logger.error(f'Error evaluating feature flag {flag_key}: {e}')\n            raise\n    return cast(Callable[P, Union[T, Awaitable[T]]], async_wrapper if asyncio.iscoroutinefunction(func) else sync_wrapper)",
        "@wraps(func)\nasync def async_wrapper(*args: P.args, **kwargs: P.kwargs) -> T:\n    try:\n        user_id = kwargs.get('user_id')\n        if not user_id:\n            raise ValueError('user_id is required')\n        if not get_client().is_initialized():\n            logger.warning(f'LaunchDarkly not initialized, using default={default}')\n            is_enabled = default\n        else:\n            context = create_context(str(user_id))\n            is_enabled = get_client().variation(flag_key, context, default)\n        if not is_enabled:\n            raise HTTPException(status_code=404, detail='Feature not available')\n        result = func(*args, **kwargs)\n        if asyncio.iscoroutine(result):\n            return await result\n        return cast(T, result)\n    except Exception as e:\n        logger.error(f'Error evaluating feature flag {flag_key}: {e}')\n        raise",
        "try:\n    user_id = kwargs.get('user_id')\n    if not user_id:\n        raise ValueError('user_id is required')\n    if not get_client().is_initialized():\n        logger.warning(f'LaunchDarkly not initialized, using default={default}')\n        is_enabled = default\n    else:\n        context = create_context(str(user_id))\n        is_enabled = get_client().variation(flag_key, context, default)\n    if not is_enabled:\n        raise HTTPException(status_code=404, detail='Feature not available')\n    result = func(*args, **kwargs)\n    if asyncio.iscoroutine(result):\n        return await result\n    return cast(T, result)\nexcept Exception as e:\n    logger.error(f'Error evaluating feature flag {flag_key}: {e}')\n    raise",
        "user_id = kwargs.get('user_id')",
        "not user_id"
      ],
      "code": "def feature_flag(flag_key: str, default: bool=False) -> Callable[[Callable[P, Union[T, Awaitable[T]]]], Callable[P, Union[T, Awaitable[T]]]]:\n    \"\"\"\n    Decorator for feature flag protected endpoints.\n    \"\"\"\n\n    def decorator(func: Callable[P, Union[T, Awaitable[T]]]) -> Callable[P, Union[T, Awaitable[T]]]:\n\n        @wraps(func)\n        async def async_wrapper(*args: P.args, **kwargs: P.kwargs) -> T:\n            try:\n                user_id = kwargs.get('user_id')\n                if not user_id:\n                    raise ValueError('user_id is required')\n                if not get_client().is_initialized():\n                    logger.warning(f'LaunchDarkly not initialized, using default={default}')\n                    is_enabled = default\n                else:\n                    context = create_context(str(user_id))\n                    is_enabled = get_client().variation(flag_key, context, default)\n                if not is_enabled:\n                    raise HTTPException(status_code=404, detail='Feature not available')\n                result = func(*args, **kwargs)\n                if asyncio.iscoroutine(result):\n                    return await result\n                return cast(T, result)\n            except Exception as e:\n                logger.error(f'Error evaluating feature flag {flag_key}: {e}')\n                raise\n\n        @wraps(func)\n        def sync_wrapper(*args: P.args, **kwargs: P.kwargs) -> T:\n            try:\n                user_id = kwargs.get('user_id')\n                if not user_id:\n                    raise ValueError('user_id is required')\n                if not get_client().is_initialized():\n                    logger.warning(f'LaunchDarkly not initialized, using default={default}')\n                    is_enabled = default\n                else:\n                    context = create_context(str(user_id))\n                    is_enabled = get_client().variation(flag_key, context, default)\n                if not is_enabled:\n                    raise HTTPException(status_code=404, detail='Feature not available')\n                return cast(T, func(*args, **kwargs))\n            except Exception as e:\n                logger.error(f'Error evaluating feature flag {flag_key}: {e}')\n                raise\n        return cast(Callable[P, Union[T, Awaitable[T]]], async_wrapper if asyncio.iscoroutinefunction(func) else sync_wrapper)\n    return decorator\n'\\n    Decorator for feature flag protected endpoints.\\n    '\ndef decorator(func: Callable[P, Union[T, Awaitable[T]]]) -> Callable[P, Union[T, Awaitable[T]]]:\n\n    @wraps(func)\n    async def async_wrapper(*args: P.args, **kwargs: P.kwargs) -> T:\n        try:\n            user_id = kwargs.get('user_id')\n            if not user_id:\n                raise ValueError('user_id is required')\n            if not get_client().is_initialized():\n                logger.warning(f'LaunchDarkly not initialized, using default={default}')\n                is_enabled = default\n            else:\n                context = create_context(str(user_id))\n                is_enabled = get_client().variation(flag_key, context, default)\n            if not is_enabled:\n                raise HTTPException(status_code=404, detail='Feature not available')\n            result = func(*args, **kwargs)\n            if asyncio.iscoroutine(result):\n                return await result\n            return cast(T, result)\n        except Exception as e:\n            logger.error(f'Error evaluating feature flag {flag_key}: {e}')\n            raise\n\n    @wraps(func)\n    def sync_wrapper(*args: P.args, **kwargs: P.kwargs) -> T:\n        try:\n            user_id = kwargs.get('user_id')\n            if not user_id:\n                raise ValueError('user_id is required')\n            if not get_client().is_initialized():\n                logger.warning(f'LaunchDarkly not initialized, using default={default}')\n                is_enabled = default\n            else:\n                context = create_context(str(user_id))\n                is_enabled = get_client().variation(flag_key, context, default)\n            if not is_enabled:\n                raise HTTPException(status_code=404, detail='Feature not available')\n            return cast(T, func(*args, **kwargs))\n        except Exception as e:\n            logger.error(f'Error evaluating feature flag {flag_key}: {e}')\n            raise\n    return cast(Callable[P, Union[T, Awaitable[T]]], async_wrapper if asyncio.iscoroutinefunction(func) else sync_wrapper)\n@wraps(func)\nasync def async_wrapper(*args: P.args, **kwargs: P.kwargs) -> T:\n    try:\n        user_id = kwargs.get('user_id')\n        if not user_id:\n            raise ValueError('user_id is required')\n        if not get_client().is_initialized():\n            logger.warning(f'LaunchDarkly not initialized, using default={default}')\n            is_enabled = default\n        else:\n            context = create_context(str(user_id))\n            is_enabled = get_client().variation(flag_key, context, default)\n        if not is_enabled:\n            raise HTTPException(status_code=404, detail='Feature not available')\n        result = func(*args, **kwargs)\n        if asyncio.iscoroutine(result):\n            return await result\n        return cast(T, result)\n    except Exception as e:\n        logger.error(f'Error evaluating feature flag {flag_key}: {e}')\n        raise\ntry:\n    user_id = kwargs.get('user_id')\n    if not user_id:\n        raise ValueError('user_id is required')\n    if not get_client().is_initialized():\n        logger.warning(f'LaunchDarkly not initialized, using default={default}')\n        is_enabled = default\n    else:\n        context = create_context(str(user_id))\n        is_enabled = get_client().variation(flag_key, context, default)\n    if not is_enabled:\n        raise HTTPException(status_code=404, detail='Feature not available')\n    result = func(*args, **kwargs)\n    if asyncio.iscoroutine(result):\n        return await result\n    return cast(T, result)\nexcept Exception as e:\n    logger.error(f'Error evaluating feature flag {flag_key}: {e}')\n    raise\nuser_id = kwargs.get('user_id')\nnot user_id"
    },
    {
      "id": "n17",
      "type": "block",
      "statements": [
        "raise ValueError('user_id is required')"
      ],
      "code": "raise ValueError('user_id is required')"
    },
    {
      "id": "n18",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n19",
      "type": "block",
      "statements": [
        "not get_client().is_initialized()"
      ],
      "code": "not get_client().is_initialized()"
    },
    {
      "id": "n20",
      "type": "block",
      "statements": [
        "logger.warning(f'LaunchDarkly not initialized, using default={default}')",
        "is_enabled = default"
      ],
      "code": "logger.warning(f'LaunchDarkly not initialized, using default={default}')\nis_enabled = default"
    },
    {
      "id": "n21",
      "type": "block",
      "statements": [
        "context = create_context(str(user_id))",
        "is_enabled = get_client().variation(flag_key, context, default)"
      ],
      "code": "context = create_context(str(user_id))\nis_enabled = get_client().variation(flag_key, context, default)"
    },
    {
      "id": "n22",
      "type": "block",
      "statements": [
        "not is_enabled"
      ],
      "code": "not is_enabled"
    },
    {
      "id": "n23",
      "type": "block",
      "statements": [
        "raise HTTPException(status_code=404, detail='Feature not available')"
      ],
      "code": "raise HTTPException(status_code=404, detail='Feature not available')"
    },
    {
      "id": "n24",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n25",
      "type": "block",
      "statements": [
        "result = func(*args, **kwargs)",
        "asyncio.iscoroutine(result)"
      ],
      "code": "result = func(*args, **kwargs)\nasyncio.iscoroutine(result)"
    },
    {
      "id": "n26",
      "type": "block",
      "statements": [
        "return await result"
      ],
      "code": "return await result"
    },
    {
      "id": "n27",
      "type": "block",
      "statements": [],
      "code": "\nreturn cast(T, result)"
    },
    {
      "id": "n28",
      "type": "block",
      "statements": [
        "logger.error(f'Error evaluating feature flag {flag_key}: {e}')",
        "raise",
        "@wraps(func)\ndef sync_wrapper(*args: P.args, **kwargs: P.kwargs) -> T:\n    try:\n        user_id = kwargs.get('user_id')\n        if not user_id:\n            raise ValueError('user_id is required')\n        if not get_client().is_initialized():\n            logger.warning(f'LaunchDarkly not initialized, using default={default}')\n            is_enabled = default\n        else:\n            context = create_context(str(user_id))\n            is_enabled = get_client().variation(flag_key, context, default)\n        if not is_enabled:\n            raise HTTPException(status_code=404, detail='Feature not available')\n        return cast(T, func(*args, **kwargs))\n    except Exception as e:\n        logger.error(f'Error evaluating feature flag {flag_key}: {e}')\n        raise",
        "try:\n    user_id = kwargs.get('user_id')\n    if not user_id:\n        raise ValueError('user_id is required')\n    if not get_client().is_initialized():\n        logger.warning(f'LaunchDarkly not initialized, using default={default}')\n        is_enabled = default\n    else:\n        context = create_context(str(user_id))\n        is_enabled = get_client().variation(flag_key, context, default)\n    if not is_enabled:\n        raise HTTPException(status_code=404, detail='Feature not available')\n    return cast(T, func(*args, **kwargs))\nexcept Exception as e:\n    logger.error(f'Error evaluating feature flag {flag_key}: {e}')\n    raise",
        "user_id = kwargs.get('user_id')",
        "not user_id"
      ],
      "code": "logger.error(f'Error evaluating feature flag {flag_key}: {e}')\nraise\n@wraps(func)\ndef sync_wrapper(*args: P.args, **kwargs: P.kwargs) -> T:\n    try:\n        user_id = kwargs.get('user_id')\n        if not user_id:\n            raise ValueError('user_id is required')\n        if not get_client().is_initialized():\n            logger.warning(f'LaunchDarkly not initialized, using default={default}')\n            is_enabled = default\n        else:\n            context = create_context(str(user_id))\n            is_enabled = get_client().variation(flag_key, context, default)\n        if not is_enabled:\n            raise HTTPException(status_code=404, detail='Feature not available')\n        return cast(T, func(*args, **kwargs))\n    except Exception as e:\n        logger.error(f'Error evaluating feature flag {flag_key}: {e}')\n        raise\ntry:\n    user_id = kwargs.get('user_id')\n    if not user_id:\n        raise ValueError('user_id is required')\n    if not get_client().is_initialized():\n        logger.warning(f'LaunchDarkly not initialized, using default={default}')\n        is_enabled = default\n    else:\n        context = create_context(str(user_id))\n        is_enabled = get_client().variation(flag_key, context, default)\n    if not is_enabled:\n        raise HTTPException(status_code=404, detail='Feature not available')\n    return cast(T, func(*args, **kwargs))\nexcept Exception as e:\n    logger.error(f'Error evaluating feature flag {flag_key}: {e}')\n    raise\nuser_id = kwargs.get('user_id')\nnot user_id"
    },
    {
      "id": "n29",
      "type": "block",
      "statements": [
        "raise ValueError('user_id is required')"
      ],
      "code": "raise ValueError('user_id is required')"
    },
    {
      "id": "n30",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n31",
      "type": "block",
      "statements": [
        "not get_client().is_initialized()"
      ],
      "code": "not get_client().is_initialized()"
    },
    {
      "id": "n32",
      "type": "block",
      "statements": [
        "logger.warning(f'LaunchDarkly not initialized, using default={default}')",
        "is_enabled = default"
      ],
      "code": "logger.warning(f'LaunchDarkly not initialized, using default={default}')\nis_enabled = default"
    },
    {
      "id": "n33",
      "type": "block",
      "statements": [
        "context = create_context(str(user_id))",
        "is_enabled = get_client().variation(flag_key, context, default)"
      ],
      "code": "context = create_context(str(user_id))\nis_enabled = get_client().variation(flag_key, context, default)"
    },
    {
      "id": "n34",
      "type": "block",
      "statements": [
        "not is_enabled"
      ],
      "code": "not is_enabled"
    },
    {
      "id": "n35",
      "type": "block",
      "statements": [
        "raise HTTPException(status_code=404, detail='Feature not available')"
      ],
      "code": "raise HTTPException(status_code=404, detail='Feature not available')"
    },
    {
      "id": "n36",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n37",
      "type": "block",
      "statements": [
        "return cast(T, func(*args, **kwargs))"
      ],
      "code": "return cast(T, func(*args, **kwargs))"
    },
    {
      "id": "n38",
      "type": "block",
      "statements": [
        "logger.error(f'Error evaluating feature flag {flag_key}: {e}')",
        "raise",
        "return cast(Callable[P, Union[T, Awaitable[T]]], async_wrapper if asyncio.iscoroutinefunction(func) else sync_wrapper)"
      ],
      "code": "logger.error(f'Error evaluating feature flag {flag_key}: {e}')\nraise\nreturn cast(Callable[P, Union[T, Awaitable[T]]], async_wrapper if asyncio.iscoroutinefunction(func) else sync_wrapper)"
    },
    {
      "id": "n39",
      "type": "block",
      "statements": [
        "return decorator"
      ],
      "code": "return decorator"
    },
    {
      "id": "n40",
      "type": "block",
      "statements": [
        "def percentage_rollout(flag_key: str, default: bool=False) -> Callable[[Callable[P, Union[T, Awaitable[T]]]], Callable[P, Union[T, Awaitable[T]]]]:\n    \"\"\"Decorator for percentage-based rollouts.\"\"\"\n    return feature_flag(flag_key, default)",
        "'Decorator for percentage-based rollouts.'",
        "return feature_flag(flag_key, default)"
      ],
      "code": "def percentage_rollout(flag_key: str, default: bool=False) -> Callable[[Callable[P, Union[T, Awaitable[T]]]], Callable[P, Union[T, Awaitable[T]]]]:\n    \"\"\"Decorator for percentage-based rollouts.\"\"\"\n    return feature_flag(flag_key, default)\n'Decorator for percentage-based rollouts.'\nreturn feature_flag(flag_key, default)"
    },
    {
      "id": "n41",
      "type": "block",
      "statements": [
        "def beta_feature(flag_key: Optional[str]=None, unauthorized_response: Any={'message': 'Not available in beta'}) -> Callable[[Callable[P, Union[T, Awaitable[T]]]], Callable[P, Union[T, Awaitable[T]]]]:\n    \"\"\"Decorator for beta features.\"\"\"\n    actual_key = f'beta-{flag_key}' if flag_key else 'beta'\n    return feature_flag(actual_key, False)",
        "'Decorator for beta features.'",
        "actual_key = f'beta-{flag_key}' if flag_key else 'beta'",
        "return feature_flag(actual_key, False)"
      ],
      "code": "def beta_feature(flag_key: Optional[str]=None, unauthorized_response: Any={'message': 'Not available in beta'}) -> Callable[[Callable[P, Union[T, Awaitable[T]]]], Callable[P, Union[T, Awaitable[T]]]]:\n    \"\"\"Decorator for beta features.\"\"\"\n    actual_key = f'beta-{flag_key}' if flag_key else 'beta'\n    return feature_flag(actual_key, False)\n'Decorator for beta features.'\nactual_key = f'beta-{flag_key}' if flag_key else 'beta'\nreturn feature_flag(actual_key, False)"
    },
    {
      "id": "n42",
      "type": "block",
      "statements": [
        "@contextlib.contextmanager\ndef mock_flag_variation(flag_key: str, return_value: Any):\n    \"\"\"Context manager for testing feature flags.\"\"\"\n    original_variation = get_client().variation\n    get_client().variation = lambda key, context, default: return_value if key == flag_key else original_variation(key, context, default)\n    try:\n        yield\n    finally:\n        get_client().variation = original_variation",
        "'Context manager for testing feature flags.'",
        "original_variation = get_client().variation",
        "get_client().variation = lambda key, context, default: return_value if key == flag_key else original_variation(key, context, default)",
        "try:\n    yield\nfinally:\n    get_client().variation = original_variation",
        "(yield)",
        "get_client().variation = original_variation"
      ],
      "code": "@contextlib.contextmanager\ndef mock_flag_variation(flag_key: str, return_value: Any):\n    \"\"\"Context manager for testing feature flags.\"\"\"\n    original_variation = get_client().variation\n    get_client().variation = lambda key, context, default: return_value if key == flag_key else original_variation(key, context, default)\n    try:\n        yield\n    finally:\n        get_client().variation = original_variation\n'Context manager for testing feature flags.'\noriginal_variation = get_client().variation\nget_client().variation = lambda key, context, default: return_value if key == flag_key else original_variation(key, context, default)\ntry:\n    yield\nfinally:\n    get_client().variation = original_variation\n(yield)\nget_client().variation = original_variation"
    }
  ],
  "edges": [
    {
      "source": "n6",
      "target": "n7"
    },
    {
      "source": "n23",
      "target": "n25"
    },
    {
      "source": "n21",
      "target": "n22"
    },
    {
      "source": "n35",
      "target": "n37"
    },
    {
      "source": "n34",
      "target": "n35"
    },
    {
      "source": "n22",
      "target": "n23"
    },
    {
      "source": "n17",
      "target": "n19"
    },
    {
      "source": "n19",
      "target": "n21"
    },
    {
      "source": "n13",
      "target": "n14"
    },
    {
      "source": "n16",
      "target": "n17"
    },
    {
      "source": "n3",
      "target": "n4"
    },
    {
      "source": "n16",
      "target": "n18"
    },
    {
      "source": "n8",
      "target": "n9"
    },
    {
      "source": "n13",
      "target": "n15"
    },
    {
      "source": "n1",
      "target": "n2"
    },
    {
      "source": "n19",
      "target": "n20"
    },
    {
      "source": "n4",
      "target": "n6"
    },
    {
      "source": "n30",
      "target": "n31"
    },
    {
      "source": "n24",
      "target": "n25"
    },
    {
      "source": "n34",
      "target": "n36"
    },
    {
      "source": "n31",
      "target": "n33"
    },
    {
      "source": "n15",
      "target": "n12"
    },
    {
      "source": "n9",
      "target": "n11"
    },
    {
      "source": "n9",
      "target": "n10"
    },
    {
      "source": "n28",
      "target": "n30"
    },
    {
      "source": "n31",
      "target": "n32"
    },
    {
      "source": "n11",
      "target": "n12"
    },
    {
      "source": "n18",
      "target": "n19"
    },
    {
      "source": "n28",
      "target": "n29"
    },
    {
      "source": "n7",
      "target": "n9"
    },
    {
      "source": "n29",
      "target": "n31"
    },
    {
      "source": "n5",
      "target": "n6"
    },
    {
      "source": "n25",
      "target": "n26"
    },
    {
      "source": "n1",
      "target": "n3"
    },
    {
      "source": "n36",
      "target": "n37"
    },
    {
      "source": "n33",
      "target": "n34"
    },
    {
      "source": "n25",
      "target": "n27"
    },
    {
      "source": "n3",
      "target": "n5"
    },
    {
      "source": "n14",
      "target": "n13"
    },
    {
      "source": "n22",
      "target": "n24"
    },
    {
      "source": "n20",
      "target": "n22"
    },
    {
      "source": "n32",
      "target": "n34"
    },
    {
      "source": "n10",
      "target": "n13"
    },
    {
      "source": "n6",
      "target": "n8"
    }
  ]
}