{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "class Item(object):\n\n    def __init__(self, key, value):\n        self.key = key\n        self.value = value",
        "def __init__(self, key, value):\n    self.key = key\n    self.value = value",
        "self.key = key",
        "self.value = value",
        "class HashTable(object):\n\n    def __init__(self, size):\n        self.size = size\n        self.table = [[] for _ in range(self.size)]\n\n    def _hash_function(self, key):\n        return key % self.size\n\n    def set(self, key, value):\n        hash_index = self._hash_function(key)\n        for item in self.table[hash_index]:\n            if item.key == key:\n                item.value = value\n                return\n        self.table[hash_index].append(Item(key, value))\n\n    def get(self, key):\n        hash_index = self._hash_function(key)\n        for item in self.table[hash_index]:\n            if item.key == key:\n                return item.value\n        raise KeyError('Key not found')\n\n    def remove(self, key):\n        hash_index = self._hash_function(key)\n        for (index, item) in enumerate(self.table[hash_index]):\n            if item.key == key:\n                del self.table[hash_index][index]\n                return\n        raise KeyError('Key not found')",
        "def __init__(self, size):\n    self.size = size\n    self.table = [[] for _ in range(self.size)]",
        "self.size = size",
        "self.table = [[] for _ in range(self.size)]",
        "def _hash_function(self, key):\n    return key % self.size",
        "return key % self.size"
      ],
      "code": "class Item(object):\n\n    def __init__(self, key, value):\n        self.key = key\n        self.value = value\ndef __init__(self, key, value):\n    self.key = key\n    self.value = value\nself.key = key\nself.value = value\nclass HashTable(object):\n\n    def __init__(self, size):\n        self.size = size\n        self.table = [[] for _ in range(self.size)]\n\n    def _hash_function(self, key):\n        return key % self.size\n\n    def set(self, key, value):\n        hash_index = self._hash_function(key)\n        for item in self.table[hash_index]:\n            if item.key == key:\n                item.value = value\n                return\n        self.table[hash_index].append(Item(key, value))\n\n    def get(self, key):\n        hash_index = self._hash_function(key)\n        for item in self.table[hash_index]:\n            if item.key == key:\n                return item.value\n        raise KeyError('Key not found')\n\n    def remove(self, key):\n        hash_index = self._hash_function(key)\n        for (index, item) in enumerate(self.table[hash_index]):\n            if item.key == key:\n                del self.table[hash_index][index]\n                return\n        raise KeyError('Key not found')\ndef __init__(self, size):\n    self.size = size\n    self.table = [[] for _ in range(self.size)]\nself.size = size\nself.table = [[] for _ in range(self.size)]\ndef _hash_function(self, key):\n    return key % self.size\nreturn key % self.size"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "def set(self, key, value):\n    hash_index = self._hash_function(key)\n    for item in self.table[hash_index]:\n        if item.key == key:\n            item.value = value\n            return\n    self.table[hash_index].append(Item(key, value))",
        "hash_index = self._hash_function(key)"
      ],
      "code": "def set(self, key, value):\n    hash_index = self._hash_function(key)\n    for item in self.table[hash_index]:\n        if item.key == key:\n            item.value = value\n            return\n    self.table[hash_index].append(Item(key, value))\nhash_index = self._hash_function(key)"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [
        "item",
        "self.table[hash_index]"
      ],
      "code": "item\nself.table[hash_index]"
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [
        "item.key Eq key"
      ],
      "code": "item.key Eq key"
    },
    {
      "id": "n4",
      "type": "block",
      "statements": [
        "self.table[hash_index].append(Item(key, value))",
        "def get(self, key):\n    hash_index = self._hash_function(key)\n    for item in self.table[hash_index]:\n        if item.key == key:\n            return item.value\n    raise KeyError('Key not found')",
        "hash_index = self._hash_function(key)"
      ],
      "code": "self.table[hash_index].append(Item(key, value))\ndef get(self, key):\n    hash_index = self._hash_function(key)\n    for item in self.table[hash_index]:\n        if item.key == key:\n            return item.value\n    raise KeyError('Key not found')\nhash_index = self._hash_function(key)"
    },
    {
      "id": "n5",
      "type": "block",
      "statements": [
        "item.value = value",
        "return"
      ],
      "code": "item.value = value\nreturn"
    },
    {
      "id": "n6",
      "type": "block",
      "statements": [],
      "code": "\n"
    },
    {
      "id": "n7",
      "type": "block",
      "statements": [
        "item",
        "self.table[hash_index]"
      ],
      "code": "item\nself.table[hash_index]"
    },
    {
      "id": "n8",
      "type": "block",
      "statements": [
        "item.key Eq key"
      ],
      "code": "item.key Eq key"
    },
    {
      "id": "n9",
      "type": "block",
      "statements": [
        "raise KeyError('Key not found')",
        "def remove(self, key):\n    hash_index = self._hash_function(key)\n    for (index, item) in enumerate(self.table[hash_index]):\n        if item.key == key:\n            del self.table[hash_index][index]\n            return\n    raise KeyError('Key not found')",
        "hash_index = self._hash_function(key)"
      ],
      "code": "raise KeyError('Key not found')\ndef remove(self, key):\n    hash_index = self._hash_function(key)\n    for (index, item) in enumerate(self.table[hash_index]):\n        if item.key == key:\n            del self.table[hash_index][index]\n            return\n    raise KeyError('Key not found')\nhash_index = self._hash_function(key)"
    },
    {
      "id": "n10",
      "type": "block",
      "statements": [
        "return item.value"
      ],
      "code": "return item.value"
    },
    {
      "id": "n11",
      "type": "block",
      "statements": [],
      "code": "\n"
    },
    {
      "id": "n12",
      "type": "block",
      "statements": [
        "(index, item)",
        "enumerate(self.table[hash_index])"
      ],
      "code": "(index, item)\nenumerate(self.table[hash_index])"
    },
    {
      "id": "n13",
      "type": "block",
      "statements": [
        "item.key Eq key"
      ],
      "code": "item.key Eq key"
    },
    {
      "id": "n14",
      "type": "block",
      "statements": [
        "raise KeyError('Key not found')"
      ],
      "code": "raise KeyError('Key not found')"
    },
    {
      "id": "n15",
      "type": "block",
      "statements": [
        "del self.table[hash_index][index]",
        "return"
      ],
      "code": "del self.table[hash_index][index]\nreturn"
    },
    {
      "id": "n16",
      "type": "block",
      "statements": [],
      "code": "\n"
    }
  ],
  "edges": [
    {
      "source": "n11",
      "target": "n7"
    },
    {
      "source": "n12",
      "target": "n14"
    },
    {
      "source": "n2",
      "target": "n4"
    },
    {
      "source": "n8",
      "target": "n10"
    },
    {
      "source": "n4",
      "target": "n7"
    },
    {
      "source": "n16",
      "target": "n12"
    },
    {
      "source": "n13",
      "target": "n15"
    },
    {
      "source": "n13",
      "target": "n16"
    },
    {
      "source": "n3",
      "target": "n5"
    },
    {
      "source": "n3",
      "target": "n6"
    },
    {
      "source": "n1",
      "target": "n2"
    },
    {
      "source": "n7",
      "target": "n8"
    },
    {
      "source": "n12",
      "target": "n13"
    },
    {
      "source": "n9",
      "target": "n12"
    },
    {
      "source": "n8",
      "target": "n11"
    },
    {
      "source": "n2",
      "target": "n3"
    },
    {
      "source": "n6",
      "target": "n2"
    },
    {
      "source": "n7",
      "target": "n9"
    }
  ]
}