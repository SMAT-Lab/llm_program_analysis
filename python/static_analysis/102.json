{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "from mrjob.job import MRJob",
        "class RemoveDuplicateUrls(MRJob):\n\n    def mapper(self, _, line):\n        yield (line, 1)\n\n    def reducer(self, key, values):\n        total = sum(values)\n        if total == 1:\n            yield (key, total)\n\n    def steps(self):\n        \"\"\"Run the map and reduce steps.\"\"\"\n        return [self.mr(mapper=self.mapper, reducer=self.reducer)]",
        "def mapper(self, _, line):\n    yield (line, 1)",
        "(yield (line, 1))",
        "def reducer(self, key, values):\n    total = sum(values)\n    if total == 1:\n        yield (key, total)",
        "total = sum(values)",
        "total Eq 1"
      ],
      "code": "from mrjob.job import MRJob\nclass RemoveDuplicateUrls(MRJob):\n\n    def mapper(self, _, line):\n        yield (line, 1)\n\n    def reducer(self, key, values):\n        total = sum(values)\n        if total == 1:\n            yield (key, total)\n\n    def steps(self):\n        \"\"\"Run the map and reduce steps.\"\"\"\n        return [self.mr(mapper=self.mapper, reducer=self.reducer)]\ndef mapper(self, _, line):\n    yield (line, 1)\n(yield (line, 1))\ndef reducer(self, key, values):\n    total = sum(values)\n    if total == 1:\n        yield (key, total)\ntotal = sum(values)\ntotal Eq 1"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "(yield (key, total))"
      ],
      "code": "(yield (key, total))"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [
        "def steps(self):\n    \"\"\"Run the map and reduce steps.\"\"\"\n    return [self.mr(mapper=self.mapper, reducer=self.reducer)]",
        "'Run the map and reduce steps.'",
        "return [self.mr(mapper=self.mapper, reducer=self.reducer)]"
      ],
      "code": "def steps(self):\n    \"\"\"Run the map and reduce steps.\"\"\"\n    return [self.mr(mapper=self.mapper, reducer=self.reducer)]\n'Run the map and reduce steps.'\nreturn [self.mr(mapper=self.mapper, reducer=self.reducer)]"
    },
    {
      "id": "n4",
      "type": "block",
      "statements": [
        "__name__ Eq '__main__'"
      ],
      "code": "__name__ Eq '__main__'"
    },
    {
      "id": "n5",
      "type": "block",
      "statements": [
        "RemoveDuplicateUrls.run()"
      ],
      "code": "RemoveDuplicateUrls.run()"
    },
    {
      "id": "n6",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n7",
      "type": "block",
      "statements": [],
      "code": ""
    }
  ],
  "edges": [
    {
      "source": "n1",
      "target": "n3"
    },
    {
      "source": "n6",
      "target": "n7"
    },
    {
      "source": "n0",
      "target": "n2"
    },
    {
      "source": "n0",
      "target": "n1"
    },
    {
      "source": "n4",
      "target": "n5"
    },
    {
      "source": "n5",
      "target": "n7"
    },
    {
      "source": "n4",
      "target": "n6"
    },
    {
      "source": "n2",
      "target": "n3"
    }
  ]
}