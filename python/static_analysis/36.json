{
  "nodes": [
    {
      "id": "n0",
      "type": "block",
      "statements": [
        "from math import log2",
        "def binary_count_trailing_zeros(a: int) -> int:\n    \"\"\"\n    Take in 1 integer, return a number that is\n    the number of trailing zeros in binary representation of that number.\n\n    >>> binary_count_trailing_zeros(25)\n    0\n    >>> binary_count_trailing_zeros(36)\n    2\n    >>> binary_count_trailing_zeros(16)\n    4\n    >>> binary_count_trailing_zeros(58)\n    1\n    >>> binary_count_trailing_zeros(4294967296)\n    32\n    >>> binary_count_trailing_zeros(0)\n    0\n    >>> binary_count_trailing_zeros(-10)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input value must be a positive integer\n    >>> binary_count_trailing_zeros(0.8)\n    Traceback (most recent call last):\n        ...\n    TypeError: Input value must be a 'int' type\n    >>> binary_count_trailing_zeros(\"0\")\n    Traceback (most recent call last):\n        ...\n    TypeError: '<' not supported between instances of 'str' and 'int'\n    \"\"\"\n    if a < 0:\n        raise ValueError('Input value must be a positive integer')\n    elif isinstance(a, float):\n        raise TypeError(\"Input value must be a 'int' type\")\n    return 0 if a == 0 else int(log2(a & -a))",
        "'\\n    Take in 1 integer, return a number that is\\n    the number of trailing zeros in binary representation of that number.\\n\\n    >>> binary_count_trailing_zeros(25)\\n    0\\n    >>> binary_count_trailing_zeros(36)\\n    2\\n    >>> binary_count_trailing_zeros(16)\\n    4\\n    >>> binary_count_trailing_zeros(58)\\n    1\\n    >>> binary_count_trailing_zeros(4294967296)\\n    32\\n    >>> binary_count_trailing_zeros(0)\\n    0\\n    >>> binary_count_trailing_zeros(-10)\\n    Traceback (most recent call last):\\n        ...\\n    ValueError: Input value must be a positive integer\\n    >>> binary_count_trailing_zeros(0.8)\\n    Traceback (most recent call last):\\n        ...\\n    TypeError: Input value must be a \\'int\\' type\\n    >>> binary_count_trailing_zeros(\"0\")\\n    Traceback (most recent call last):\\n        ...\\n    TypeError: \\'<\\' not supported between instances of \\'str\\' and \\'int\\'\\n    '",
        "a Lt 0"
      ],
      "code": "from math import log2\ndef binary_count_trailing_zeros(a: int) -> int:\n    \"\"\"\n    Take in 1 integer, return a number that is\n    the number of trailing zeros in binary representation of that number.\n\n    >>> binary_count_trailing_zeros(25)\n    0\n    >>> binary_count_trailing_zeros(36)\n    2\n    >>> binary_count_trailing_zeros(16)\n    4\n    >>> binary_count_trailing_zeros(58)\n    1\n    >>> binary_count_trailing_zeros(4294967296)\n    32\n    >>> binary_count_trailing_zeros(0)\n    0\n    >>> binary_count_trailing_zeros(-10)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input value must be a positive integer\n    >>> binary_count_trailing_zeros(0.8)\n    Traceback (most recent call last):\n        ...\n    TypeError: Input value must be a 'int' type\n    >>> binary_count_trailing_zeros(\"0\")\n    Traceback (most recent call last):\n        ...\n    TypeError: '<' not supported between instances of 'str' and 'int'\n    \"\"\"\n    if a < 0:\n        raise ValueError('Input value must be a positive integer')\n    elif isinstance(a, float):\n        raise TypeError(\"Input value must be a 'int' type\")\n    return 0 if a == 0 else int(log2(a & -a))\n'\\n    Take in 1 integer, return a number that is\\n    the number of trailing zeros in binary representation of that number.\\n\\n    >>> binary_count_trailing_zeros(25)\\n    0\\n    >>> binary_count_trailing_zeros(36)\\n    2\\n    >>> binary_count_trailing_zeros(16)\\n    4\\n    >>> binary_count_trailing_zeros(58)\\n    1\\n    >>> binary_count_trailing_zeros(4294967296)\\n    32\\n    >>> binary_count_trailing_zeros(0)\\n    0\\n    >>> binary_count_trailing_zeros(-10)\\n    Traceback (most recent call last):\\n        ...\\n    ValueError: Input value must be a positive integer\\n    >>> binary_count_trailing_zeros(0.8)\\n    Traceback (most recent call last):\\n        ...\\n    TypeError: Input value must be a \\'int\\' type\\n    >>> binary_count_trailing_zeros(\"0\")\\n    Traceback (most recent call last):\\n        ...\\n    TypeError: \\'<\\' not supported between instances of \\'str\\' and \\'int\\'\\n    '\na Lt 0"
    },
    {
      "id": "n1",
      "type": "block",
      "statements": [
        "raise ValueError('Input value must be a positive integer')"
      ],
      "code": "raise ValueError('Input value must be a positive integer')"
    },
    {
      "id": "n2",
      "type": "block",
      "statements": [
        "isinstance(a, float)"
      ],
      "code": "isinstance(a, float)"
    },
    {
      "id": "n3",
      "type": "block",
      "statements": [
        "return 0 if a == 0 else int(log2(a & -a))"
      ],
      "code": "return 0 if a == 0 else int(log2(a & -a))"
    },
    {
      "id": "n4",
      "type": "block",
      "statements": [
        "raise TypeError(\"Input value must be a 'int' type\")"
      ],
      "code": "raise TypeError(\"Input value must be a 'int' type\")"
    },
    {
      "id": "n5",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n6",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n7",
      "type": "block",
      "statements": [
        "__name__ Eq '__main__'"
      ],
      "code": "__name__ Eq '__main__'"
    },
    {
      "id": "n8",
      "type": "block",
      "statements": [
        "import doctest",
        "doctest.testmod()"
      ],
      "code": "import doctest\ndoctest.testmod()"
    },
    {
      "id": "n9",
      "type": "block",
      "statements": [],
      "code": ""
    },
    {
      "id": "n10",
      "type": "block",
      "statements": [],
      "code": ""
    }
  ],
  "edges": [
    {
      "source": "n5",
      "target": "n6"
    },
    {
      "source": "n1",
      "target": "n3"
    },
    {
      "source": "n6",
      "target": "n3"
    },
    {
      "source": "n0",
      "target": "n1"
    },
    {
      "source": "n8",
      "target": "n10"
    },
    {
      "source": "n2",
      "target": "n5"
    },
    {
      "source": "n2",
      "target": "n4"
    },
    {
      "source": "n9",
      "target": "n10"
    },
    {
      "source": "n4",
      "target": "n6"
    },
    {
      "source": "n7",
      "target": "n8"
    },
    {
      "source": "n0",
      "target": "n2"
    },
    {
      "source": "n7",
      "target": "n9"
    }
  ]
}