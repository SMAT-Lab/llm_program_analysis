{
  "value": "import logging\nfrom typing import TYPE_CHECKING, Annotated, Literal\n\nfrom fastapi import APIRouter, Body, Depends, HTTPException, Path, Query, Request\nfrom pydantic import BaseModel, Field, SecretStr\n\nfrom backend.data.graph import set_node_webhook\nfrom backend.data.integrations import (\n    WebhookEvent,\n    get_all_webhooks_by_creds,\n    get_webhook,\n    publish_webhook_event,\n    wait_for_webhook_event,\n)\nfrom backend.data.model import (\n    APIKeyCredentials,\n    Credentials,\n    CredentialsType,\n    OAuth2Credentials,\n)\nfrom backend.executor.manager import ExecutionManager\nfrom backend.integrations.creds_manager import IntegrationCredentialsManager\nfrom backend.integrations.oauth import HANDLERS_BY_NAME\nfrom backend.integrations.providers import ProviderName\nfrom backend.integrations.webhooks import WEBHOOK_MANAGERS_BY_NAME\nfrom backend.util.exceptions import NeedConfirmation\nfrom backend.util.service import get_service_client\nfrom backend.util.settings import Settings\n\nif TYPE_CHECKING:\n    from backend.integrations.oauth import BaseOAuthHandler\n\nfrom ..utils import get_user_id\n\nlogger = logging.getLogger(__name__)\nsettings = Settings()\nrouter = APIRouter()\n\ncreds_manager = IntegrationCredentialsManager()\n\n\nclass LoginResponse(BaseModel):\n    login_url: str\n    state_token: str\n\n\n@router.get(\"/{provider}/login\")\ndef login(\n    provider: Annotated[\n        ProviderName, Path(title=\"The provider to initiate an OAuth flow for\")\n    ],\n    user_id: Annotated[str, Depends(get_user_id)],\n    request: Request,\n    scopes: Annotated[\n        str, Query(title=\"Comma-separated list of authorization scopes\")\n    ] = \"\",\n) -> LoginResponse:\n    handler = _get_provider_oauth_handler(request, provider)\n\n    requested_scopes = scopes.split(\",\") if scopes else []\n\n    # Generate and store a secure random state token along with the scopes\n    state_token = creds_manager.store.store_state_token(\n        user_id, provider, requested_scopes\n    )\n\n    login_url = handler.get_login_url(requested_scopes, state_token)\n\n    return LoginResponse(login_url=login_url, state_token=state_token)\n\n\nclass CredentialsMetaResponse(BaseModel):\n    id: str\n    provider: str\n    type: CredentialsType\n    title: str | None\n    scopes: list[str] | None\n    username: str | None\n\n\n@router.post(\"/{provider}/callback\")\ndef callback(\n    provider: Annotated[\n        ProviderName, Path(title=\"The target provider for this OAuth exchange\")\n    ],\n    code: Annotated[str, Body(title=\"Authorization code acquired by user login\")],\n    state_token: Annotated[str, Body(title=\"Anti-CSRF nonce\")],\n    user_id: Annotated[str, Depends(get_user_id)],\n    request: Request,\n) -> CredentialsMetaResponse:\n    logger.debug(f\"Received OAuth callback for provider: {provider}\")\n    handler = _get_provider_oauth_handler(request, provider)\n\n    # Verify the state token\n    if not creds_manager.store.verify_state_token(user_id, state_token, provider):\n        logger.warning(f\"Invalid or expired state token for user {user_id}\")\n        raise HTTPException(status_code=400, detail=\"Invalid or expired state token\")\n\n    try:\n        scopes = creds_manager.store.get_any_valid_scopes_from_state_token(\n            user_id, state_token, provider\n        )\n        logger.debug(f\"Retrieved scopes from state token: {scopes}\")\n\n        scopes = handler.handle_default_scopes(scopes)\n\n        credentials = handler.exchange_code_for_tokens(code, scopes)\n        logger.debug(f\"Received credentials with final scopes: {credentials.scopes}\")\n\n        # Check if the granted scopes are sufficient for the requested scopes\n        if not set(scopes).issubset(set(credentials.scopes)):\n            # For now, we'll just log the warning and continue\n            logger.warning(\n                f\"Granted scopes {credentials.scopes} for provider {provider.value} \"\n                f\"do not include all requested scopes {scopes}\"\n            )\n\n    except Exception as e:\n        logger.error(f\"Code->Token exchange failed for provider {provider.value}: {e}\")\n        raise HTTPException(\n            status_code=400, detail=f\"Failed to exchange code for tokens: {str(e)}\"\n        )\n\n    # TODO: Allow specifying `title` to set on `credentials`\n    creds_manager.create(user_id, credentials)\n\n    logger.debug(\n        f\"Successfully processed OAuth callback for user {user_id} \"\n        f\"and provider {provider.value}\"\n    )\n    return CredentialsMetaResponse(\n        id=credentials.id,\n        provider=credentials.provider,\n        type=credentials.type,\n        title=credentials.title,\n        scopes=credentials.scopes,\n        username=credentials.username,\n    )\n\n\n@router.get(\"/credentials\")\ndef list_credentials(\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> list[CredentialsMetaResponse]:\n    credentials = creds_manager.store.get_all_creds(user_id)\n    return [\n        CredentialsMetaResponse(\n            id=cred.id,\n            provider=cred.provider,\n            type=cred.type,\n            title=cred.title,\n            scopes=cred.scopes if isinstance(cred, OAuth2Credentials) else None,\n            username=cred.username if isinstance(cred, OAuth2Credentials) else None,\n        )\n        for cred in credentials\n    ]\n\n\n@router.get(\"/{provider}/credentials\")\ndef list_credentials_by_provider(\n    provider: Annotated[\n        ProviderName, Path(title=\"The provider to list credentials for\")\n    ],\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> list[CredentialsMetaResponse]:\n    credentials = creds_manager.store.get_creds_by_provider(user_id, provider)\n    return [\n        CredentialsMetaResponse(\n            id=cred.id,\n            provider=cred.provider,\n            type=cred.type,\n            title=cred.title,\n            scopes=cred.scopes if isinstance(cred, OAuth2Credentials) else None,\n            username=cred.username if isinstance(cred, OAuth2Credentials) else None,\n        )\n        for cred in credentials\n    ]\n\n\n@router.get(\"/{provider}/credentials/{cred_id}\")\ndef get_credential(\n    provider: Annotated[\n        ProviderName, Path(title=\"The provider to retrieve credentials for\")\n    ],\n    cred_id: Annotated[str, Path(title=\"The ID of the credentials to retrieve\")],\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> Credentials:\n    credential = creds_manager.get(user_id, cred_id)\n    if not credential:\n        raise HTTPException(status_code=404, detail=\"Credentials not found\")\n    if credential.provider != provider:\n        raise HTTPException(\n            status_code=404, detail=\"Credentials do not match the specified provider\"\n        )\n    return credential\n\n\n@router.post(\"/{provider}/credentials\", status_code=201)\ndef create_api_key_credentials(\n    user_id: Annotated[str, Depends(get_user_id)],\n    provider: Annotated[\n        ProviderName, Path(title=\"The provider to create credentials for\")\n    ],\n    api_key: Annotated[str, Body(title=\"The API key to store\")],\n    title: Annotated[str, Body(title=\"Optional title for the credentials\")],\n    expires_at: Annotated[\n        int | None, Body(title=\"Unix timestamp when the key expires\")\n    ] = None,\n) -> APIKeyCredentials:\n    new_credentials = APIKeyCredentials(\n        provider=provider,\n        api_key=SecretStr(api_key),\n        title=title,\n        expires_at=expires_at,\n    )\n\n    try:\n        creds_manager.create(user_id, new_credentials)\n    except Exception as e:\n        raise HTTPException(\n            status_code=500, detail=f\"Failed to store credentials: {str(e)}\"\n        )\n    return new_credentials\n\n\nclass CredentialsDeletionResponse(BaseModel):\n    deleted: Literal[True] = True\n    revoked: bool | None = Field(\n        description=\"Indicates whether the credentials were also revoked by their \"\n        \"provider. `None`/`null` if not applicable, e.g. when deleting \"\n        \"non-revocable credentials such as API keys.\"\n    )\n\n\nclass CredentialsDeletionNeedsConfirmationResponse(BaseModel):\n    deleted: Literal[False] = False\n    need_confirmation: Literal[True] = True\n    message: str\n\n\n@router.delete(\"/{provider}/credentials/{cred_id}\")\nasync def delete_credentials(\n    request: Request,\n    provider: Annotated[\n        ProviderName, Path(title=\"The provider to delete credentials for\")\n    ],\n    cred_id: Annotated[str, Path(title=\"The ID of the credentials to delete\")],\n    user_id: Annotated[str, Depends(get_user_id)],\n    force: Annotated[\n        bool, Query(title=\"Whether to proceed if any linked webhooks are still in use\")\n    ] = False,\n) -> CredentialsDeletionResponse | CredentialsDeletionNeedsConfirmationResponse:\n    creds = creds_manager.store.get_creds_by_id(user_id, cred_id)\n    if not creds:\n        raise HTTPException(status_code=404, detail=\"Credentials not found\")\n    if creds.provider != provider:\n        raise HTTPException(\n            status_code=404, detail=\"Credentials do not match the specified provider\"\n        )\n\n    try:\n        await remove_all_webhooks_for_credentials(creds, force)\n    except NeedConfirmation as e:\n        return CredentialsDeletionNeedsConfirmationResponse(message=str(e))\n\n    creds_manager.delete(user_id, cred_id)\n\n    tokens_revoked = None\n    if isinstance(creds, OAuth2Credentials):\n        handler = _get_provider_oauth_handler(request, provider)\n        tokens_revoked = handler.revoke_tokens(creds)\n\n    return CredentialsDeletionResponse(revoked=tokens_revoked)\n\n\n# ------------------------- WEBHOOK STUFF -------------------------- #\n\n\n# \u26a0\ufe0f Note\n# No user auth check because this endpoint is for webhook ingress and relies on\n# validation by the provider-specific `WebhooksManager`.\n@router.post(\"/{provider}/webhooks/{webhook_id}/ingress\")\nasync def webhook_ingress_generic(\n    request: Request,\n    provider: Annotated[\n        ProviderName, Path(title=\"Provider where the webhook was registered\")\n    ],\n    webhook_id: Annotated[str, Path(title=\"Our ID for the webhook\")],\n):\n    logger.debug(f\"Received {provider.value} webhook ingress for ID {webhook_id}\")\n    webhook_manager = WEBHOOK_MANAGERS_BY_NAME[provider]()\n    webhook = await get_webhook(webhook_id)\n    logger.debug(f\"Webhook #{webhook_id}: {webhook}\")\n    payload, event_type = await webhook_manager.validate_payload(webhook, request)\n    logger.debug(\n        f\"Validated {provider.value} {webhook.webhook_type} {event_type} event \"\n        f\"with payload {payload}\"\n    )\n\n    webhook_event = WebhookEvent(\n        provider=provider,\n        webhook_id=webhook_id,\n        event_type=event_type,\n        payload=payload,\n    )\n    await publish_webhook_event(webhook_event)\n    logger.debug(f\"Webhook event published: {webhook_event}\")\n\n    if not webhook.attached_nodes:\n        return\n\n    executor = get_service_client(ExecutionManager)\n    for node in webhook.attached_nodes:\n        logger.debug(f\"Webhook-attached node: {node}\")\n        if not node.is_triggered_by_event_type(event_type):\n            logger.debug(f\"Node #{node.id} doesn't trigger on event {event_type}\")\n            continue\n        logger.debug(f\"Executing graph #{node.graph_id} node #{node.id}\")\n        executor.add_execution(\n            node.graph_id,\n            data={f\"webhook_{webhook_id}_payload\": payload},\n            user_id=webhook.user_id,\n        )\n\n\n@router.post(\"/webhooks/{webhook_id}/ping\")\nasync def webhook_ping(\n    webhook_id: Annotated[str, Path(title=\"Our ID for the webhook\")],\n    user_id: Annotated[str, Depends(get_user_id)],  # require auth\n):\n    webhook = await get_webhook(webhook_id)\n    webhook_manager = WEBHOOK_MANAGERS_BY_NAME[webhook.provider]()\n\n    credentials = (\n        creds_manager.get(user_id, webhook.credentials_id)\n        if webhook.credentials_id\n        else None\n    )\n    try:\n        await webhook_manager.trigger_ping(webhook, credentials)\n    except NotImplementedError:\n        return False\n\n    if not await wait_for_webhook_event(webhook_id, event_type=\"ping\", timeout=10):\n        raise HTTPException(status_code=504, detail=\"Webhook ping timed out\")\n\n    return True\n\n\n# --------------------------- UTILITIES ---------------------------- #\n\n\nasync def remove_all_webhooks_for_credentials(\n    credentials: Credentials, force: bool = False\n) -> None:\n    \"\"\"\n    Remove and deregister all webhooks that were registered using the given credentials.\n\n    Params:\n        credentials: The credentials for which to remove the associated webhooks.\n        force: Whether to proceed if any of the webhooks are still in use.\n\n    Raises:\n        NeedConfirmation: If any of the webhooks are still in use and `force` is `False`\n    \"\"\"\n    webhooks = await get_all_webhooks_by_creds(credentials.id)\n    if credentials.provider not in WEBHOOK_MANAGERS_BY_NAME:\n        if webhooks:\n            logger.error(\n                f\"Credentials #{credentials.id} for provider {credentials.provider} \"\n                f\"are attached to {len(webhooks)} webhooks, \"\n                f\"but there is no available WebhooksHandler for {credentials.provider}\"\n            )\n        return\n    if any(w.attached_nodes for w in webhooks) and not force:\n        raise NeedConfirmation(\n            \"Some webhooks linked to these credentials are still in use by an agent\"\n        )\n    for webhook in webhooks:\n        # Unlink all nodes\n        for node in webhook.attached_nodes or []:\n            await set_node_webhook(node.id, None)\n\n        # Prune the webhook\n        webhook_manager = WEBHOOK_MANAGERS_BY_NAME[credentials.provider]()\n        success = await webhook_manager.prune_webhook_if_dangling(\n            webhook.id, credentials\n        )\n        if not success:\n            logger.warning(f\"Webhook #{webhook.id} failed to prune\")\n\n\ndef _get_provider_oauth_handler(\n    req: Request, provider_name: ProviderName\n) -> \"BaseOAuthHandler\":\n    if provider_name not in HANDLERS_BY_NAME:\n        raise HTTPException(\n            status_code=404,\n            detail=f\"Provider '{provider_name.value}' does not support OAuth\",\n        )\n\n    client_id = getattr(settings.secrets, f\"{provider_name.value}_client_id\")\n    client_secret = getattr(settings.secrets, f\"{provider_name.value}_client_secret\")\n    if not (client_id and client_secret):\n        raise HTTPException(\n            status_code=501,\n            detail=(\n                f\"Integration with provider '{provider_name.value}' is not configured\"\n            ),\n        )\n\n    handler_class = HANDLERS_BY_NAME[provider_name]\n    frontend_base_url = (\n        settings.config.frontend_base_url\n        or settings.config.platform_base_url\n        or str(req.base_url)\n    )\n    return handler_class(\n        client_id=client_id,\n        client_secret=client_secret,\n        redirect_uri=f\"{frontend_base_url}/auth/integrations/oauth_callback\",\n    )",
  "children": [
    {
      "value": "import logging",
      "children": [
        {
          "value": "logging",
          "children": [
            {
              "value": "logging",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from typing import TYPE_CHECKING, Annotated, Literal",
      "children": [
        {
          "value": "typing",
          "children": [
            {
              "value": "typing",
              "children": []
            }
          ]
        },
        {
          "value": "TYPE_CHECKING",
          "children": [
            {
              "value": "TYPE_CHECKING",
              "children": []
            }
          ]
        },
        {
          "value": "Annotated",
          "children": [
            {
              "value": "Annotated",
              "children": []
            }
          ]
        },
        {
          "value": "Literal",
          "children": [
            {
              "value": "Literal",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from fastapi import APIRouter, Body, Depends, HTTPException, Path, Query, Request",
      "children": [
        {
          "value": "fastapi",
          "children": [
            {
              "value": "fastapi",
              "children": []
            }
          ]
        },
        {
          "value": "APIRouter",
          "children": [
            {
              "value": "APIRouter",
              "children": []
            }
          ]
        },
        {
          "value": "Body",
          "children": [
            {
              "value": "Body",
              "children": []
            }
          ]
        },
        {
          "value": "Depends",
          "children": [
            {
              "value": "Depends",
              "children": []
            }
          ]
        },
        {
          "value": "HTTPException",
          "children": [
            {
              "value": "HTTPException",
              "children": []
            }
          ]
        },
        {
          "value": "Path",
          "children": [
            {
              "value": "Path",
              "children": []
            }
          ]
        },
        {
          "value": "Query",
          "children": [
            {
              "value": "Query",
              "children": []
            }
          ]
        },
        {
          "value": "Request",
          "children": [
            {
              "value": "Request",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from pydantic import BaseModel, Field, SecretStr",
      "children": [
        {
          "value": "pydantic",
          "children": [
            {
              "value": "pydantic",
              "children": []
            }
          ]
        },
        {
          "value": "BaseModel",
          "children": [
            {
              "value": "BaseModel",
              "children": []
            }
          ]
        },
        {
          "value": "Field",
          "children": [
            {
              "value": "Field",
              "children": []
            }
          ]
        },
        {
          "value": "SecretStr",
          "children": [
            {
              "value": "SecretStr",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.data.graph import set_node_webhook",
      "children": [
        {
          "value": "backend.data.graph",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "data",
              "children": []
            },
            {
              "value": "graph",
              "children": []
            }
          ]
        },
        {
          "value": "set_node_webhook",
          "children": [
            {
              "value": "set_node_webhook",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.data.integrations import (\n    WebhookEvent,\n    get_all_webhooks_by_creds,\n    get_webhook,\n    publish_webhook_event,\n    wait_for_webhook_event,\n)",
      "children": [
        {
          "value": "backend.data.integrations",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "data",
              "children": []
            },
            {
              "value": "integrations",
              "children": []
            }
          ]
        },
        {
          "value": "WebhookEvent",
          "children": [
            {
              "value": "WebhookEvent",
              "children": []
            }
          ]
        },
        {
          "value": "get_all_webhooks_by_creds",
          "children": [
            {
              "value": "get_all_webhooks_by_creds",
              "children": []
            }
          ]
        },
        {
          "value": "get_webhook",
          "children": [
            {
              "value": "get_webhook",
              "children": []
            }
          ]
        },
        {
          "value": "publish_webhook_event",
          "children": [
            {
              "value": "publish_webhook_event",
              "children": []
            }
          ]
        },
        {
          "value": "wait_for_webhook_event",
          "children": [
            {
              "value": "wait_for_webhook_event",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.data.model import (\n    APIKeyCredentials,\n    Credentials,\n    CredentialsType,\n    OAuth2Credentials,\n)",
      "children": [
        {
          "value": "backend.data.model",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "data",
              "children": []
            },
            {
              "value": "model",
              "children": []
            }
          ]
        },
        {
          "value": "APIKeyCredentials",
          "children": [
            {
              "value": "APIKeyCredentials",
              "children": []
            }
          ]
        },
        {
          "value": "Credentials",
          "children": [
            {
              "value": "Credentials",
              "children": []
            }
          ]
        },
        {
          "value": "CredentialsType",
          "children": [
            {
              "value": "CredentialsType",
              "children": []
            }
          ]
        },
        {
          "value": "OAuth2Credentials",
          "children": [
            {
              "value": "OAuth2Credentials",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.executor.manager import ExecutionManager",
      "children": [
        {
          "value": "backend.executor.manager",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "executor",
              "children": []
            },
            {
              "value": "manager",
              "children": []
            }
          ]
        },
        {
          "value": "ExecutionManager",
          "children": [
            {
              "value": "ExecutionManager",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.integrations.creds_manager import IntegrationCredentialsManager",
      "children": [
        {
          "value": "backend.integrations.creds_manager",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "integrations",
              "children": []
            },
            {
              "value": "creds_manager",
              "children": []
            }
          ]
        },
        {
          "value": "IntegrationCredentialsManager",
          "children": [
            {
              "value": "IntegrationCredentialsManager",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.integrations.oauth import HANDLERS_BY_NAME",
      "children": [
        {
          "value": "backend.integrations.oauth",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "integrations",
              "children": []
            },
            {
              "value": "oauth",
              "children": []
            }
          ]
        },
        {
          "value": "HANDLERS_BY_NAME",
          "children": [
            {
              "value": "HANDLERS_BY_NAME",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.integrations.providers import ProviderName",
      "children": [
        {
          "value": "backend.integrations.providers",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "integrations",
              "children": []
            },
            {
              "value": "providers",
              "children": []
            }
          ]
        },
        {
          "value": "ProviderName",
          "children": [
            {
              "value": "ProviderName",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.integrations.webhooks import WEBHOOK_MANAGERS_BY_NAME",
      "children": [
        {
          "value": "backend.integrations.webhooks",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "integrations",
              "children": []
            },
            {
              "value": "webhooks",
              "children": []
            }
          ]
        },
        {
          "value": "WEBHOOK_MANAGERS_BY_NAME",
          "children": [
            {
              "value": "WEBHOOK_MANAGERS_BY_NAME",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.util.exceptions import NeedConfirmation",
      "children": [
        {
          "value": "backend.util.exceptions",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "util",
              "children": []
            },
            {
              "value": "exceptions",
              "children": []
            }
          ]
        },
        {
          "value": "NeedConfirmation",
          "children": [
            {
              "value": "NeedConfirmation",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.util.service import get_service_client",
      "children": [
        {
          "value": "backend.util.service",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "util",
              "children": []
            },
            {
              "value": "service",
              "children": []
            }
          ]
        },
        {
          "value": "get_service_client",
          "children": [
            {
              "value": "get_service_client",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.util.settings import Settings",
      "children": [
        {
          "value": "backend.util.settings",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "util",
              "children": []
            },
            {
              "value": "settings",
              "children": []
            }
          ]
        },
        {
          "value": "Settings",
          "children": [
            {
              "value": "Settings",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "if TYPE_CHECKING:\n    from backend.integrations.oauth import BaseOAuthHandler",
      "children": [
        {
          "value": "TYPE_CHECKING",
          "children": []
        },
        {
          "value": "from backend.integrations.oauth import BaseOAuthHandler",
          "children": [
            {
              "value": "from backend.integrations.oauth import BaseOAuthHandler",
              "children": [
                {
                  "value": "backend.integrations.oauth",
                  "children": [
                    {
                      "value": "backend",
                      "children": []
                    },
                    {
                      "value": "integrations",
                      "children": []
                    },
                    {
                      "value": "oauth",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "BaseOAuthHandler",
                  "children": [
                    {
                      "value": "BaseOAuthHandler",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "from ..utils import get_user_id",
      "children": [
        {
          "value": "..utils",
          "children": [
            {
              "value": "..",
              "children": []
            },
            {
              "value": "utils",
              "children": [
                {
                  "value": "utils",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "get_user_id",
          "children": [
            {
              "value": "get_user_id",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "logger = logging.getLogger(__name__)",
      "children": [
        {
          "value": "logger = logging.getLogger(__name__)",
          "children": [
            {
              "value": "logger",
              "children": []
            },
            {
              "value": "logging.getLogger(__name__)",
              "children": [
                {
                  "value": "logging.getLogger",
                  "children": [
                    {
                      "value": "logging",
                      "children": []
                    },
                    {
                      "value": "getLogger",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(__name__)",
                  "children": [
                    {
                      "value": "__name__",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "settings = Settings()",
      "children": [
        {
          "value": "settings = Settings()",
          "children": [
            {
              "value": "settings",
              "children": []
            },
            {
              "value": "Settings()",
              "children": [
                {
                  "value": "Settings",
                  "children": []
                },
                {
                  "value": "()",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "router = APIRouter()",
      "children": [
        {
          "value": "router = APIRouter()",
          "children": [
            {
              "value": "router",
              "children": []
            },
            {
              "value": "APIRouter()",
              "children": [
                {
                  "value": "APIRouter",
                  "children": []
                },
                {
                  "value": "()",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "creds_manager = IntegrationCredentialsManager()",
      "children": [
        {
          "value": "creds_manager = IntegrationCredentialsManager()",
          "children": [
            {
              "value": "creds_manager",
              "children": []
            },
            {
              "value": "IntegrationCredentialsManager()",
              "children": [
                {
                  "value": "IntegrationCredentialsManager",
                  "children": []
                },
                {
                  "value": "()",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class LoginResponse(BaseModel):\n    login_url: str\n    state_token: str",
      "children": [
        {
          "value": "LoginResponse",
          "children": []
        },
        {
          "value": "(BaseModel)",
          "children": [
            {
              "value": "BaseModel",
              "children": []
            }
          ]
        },
        {
          "value": "login_url: str\n    state_token: str",
          "children": [
            {
              "value": "login_url: str",
              "children": [
                {
                  "value": "login_url: str",
                  "children": [
                    {
                      "value": "login_url",
                      "children": []
                    },
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "state_token: str",
              "children": [
                {
                  "value": "state_token: str",
                  "children": [
                    {
                      "value": "state_token",
                      "children": []
                    },
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "@router.get(\"/{provider}/login\")\ndef login(\n    provider: Annotated[\n        ProviderName, Path(title=\"The provider to initiate an OAuth flow for\")\n    ],\n    user_id: Annotated[str, Depends(get_user_id)],\n    request: Request,\n    scopes: Annotated[\n        str, Query(title=\"Comma-separated list of authorization scopes\")\n    ] = \"\",\n) -> LoginResponse:\n    handler = _get_provider_oauth_handler(request, provider)\n\n    requested_scopes = scopes.split(\",\") if scopes else []\n\n    # Generate and store a secure random state token along with the scopes\n    state_token = creds_manager.store.store_state_token(\n        user_id, provider, requested_scopes\n    )\n\n    login_url = handler.get_login_url(requested_scopes, state_token)\n\n    return LoginResponse(login_url=login_url, state_token=state_token)",
      "children": [
        {
          "value": "@router.get(\"/{provider}/login\")",
          "children": [
            {
              "value": "router.get(\"/{provider}/login\")",
              "children": [
                {
                  "value": "router.get",
                  "children": [
                    {
                      "value": "router",
                      "children": []
                    },
                    {
                      "value": "get",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(\"/{provider}/login\")",
                  "children": [
                    {
                      "value": "\"/{provider}/login\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "/{provider}/login",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "def login(\n    provider: Annotated[\n        ProviderName, Path(title=\"The provider to initiate an OAuth flow for\")\n    ],\n    user_id: Annotated[str, Depends(get_user_id)],\n    request: Request,\n    scopes: Annotated[\n        str, Query(title=\"Comma-separated list of authorization scopes\")\n    ] = \"\",\n) -> LoginResponse:\n    handler = _get_provider_oauth_handler(request, provider)\n\n    requested_scopes = scopes.split(\",\") if scopes else []\n\n    # Generate and store a secure random state token along with the scopes\n    state_token = creds_manager.store.store_state_token(\n        user_id, provider, requested_scopes\n    )\n\n    login_url = handler.get_login_url(requested_scopes, state_token)\n\n    return LoginResponse(login_url=login_url, state_token=state_token)",
          "children": [
            {
              "value": "login",
              "children": []
            },
            {
              "value": "(\n    provider: Annotated[\n        ProviderName, Path(title=\"The provider to initiate an OAuth flow for\")\n    ],\n    user_id: Annotated[str, Depends(get_user_id)],\n    request: Request,\n    scopes: Annotated[\n        str, Query(title=\"Comma-separated list of authorization scopes\")\n    ] = \"\",\n)",
              "children": [
                {
                  "value": "provider: Annotated[\n        ProviderName, Path(title=\"The provider to initiate an OAuth flow for\")\n    ]",
                  "children": [
                    {
                      "value": "provider",
                      "children": []
                    },
                    {
                      "value": "Annotated[\n        ProviderName, Path(title=\"The provider to initiate an OAuth flow for\")\n    ]",
                      "children": [
                        {
                          "value": "Annotated[\n        ProviderName, Path(title=\"The provider to initiate an OAuth flow for\")\n    ]",
                          "children": [
                            {
                              "value": "Annotated",
                              "children": []
                            },
                            {
                              "value": "[\n        ProviderName, Path(title=\"The provider to initiate an OAuth flow for\")\n    ]",
                              "children": [
                                {
                                  "value": "ProviderName",
                                  "children": [
                                    {
                                      "value": "ProviderName",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "Path(title=\"The provider to initiate an OAuth flow for\")",
                                  "children": [
                                    {
                                      "value": "Path(title=\"The provider to initiate an OAuth flow for\")",
                                      "children": [
                                        {
                                          "value": "Path",
                                          "children": []
                                        },
                                        {
                                          "value": "(title=\"The provider to initiate an OAuth flow for\")",
                                          "children": [
                                            {
                                              "value": "title=\"The provider to initiate an OAuth flow for\"",
                                              "children": [
                                                {
                                                  "value": "title",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"The provider to initiate an OAuth flow for\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "The provider to initiate an OAuth flow for",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "user_id: Annotated[str, Depends(get_user_id)]",
                  "children": [
                    {
                      "value": "user_id",
                      "children": []
                    },
                    {
                      "value": "Annotated[str, Depends(get_user_id)]",
                      "children": [
                        {
                          "value": "Annotated[str, Depends(get_user_id)]",
                          "children": [
                            {
                              "value": "Annotated",
                              "children": []
                            },
                            {
                              "value": "[str, Depends(get_user_id)]",
                              "children": [
                                {
                                  "value": "str",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "Depends(get_user_id)",
                                  "children": [
                                    {
                                      "value": "Depends(get_user_id)",
                                      "children": [
                                        {
                                          "value": "Depends",
                                          "children": []
                                        },
                                        {
                                          "value": "(get_user_id)",
                                          "children": [
                                            {
                                              "value": "get_user_id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "request: Request",
                  "children": [
                    {
                      "value": "request",
                      "children": []
                    },
                    {
                      "value": "Request",
                      "children": [
                        {
                          "value": "Request",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "scopes: Annotated[\n        str, Query(title=\"Comma-separated list of authorization scopes\")\n    ] = \"\"",
                  "children": [
                    {
                      "value": "scopes",
                      "children": []
                    },
                    {
                      "value": "Annotated[\n        str, Query(title=\"Comma-separated list of authorization scopes\")\n    ]",
                      "children": [
                        {
                          "value": "Annotated[\n        str, Query(title=\"Comma-separated list of authorization scopes\")\n    ]",
                          "children": [
                            {
                              "value": "Annotated",
                              "children": []
                            },
                            {
                              "value": "[\n        str, Query(title=\"Comma-separated list of authorization scopes\")\n    ]",
                              "children": [
                                {
                                  "value": "str",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "Query(title=\"Comma-separated list of authorization scopes\")",
                                  "children": [
                                    {
                                      "value": "Query(title=\"Comma-separated list of authorization scopes\")",
                                      "children": [
                                        {
                                          "value": "Query",
                                          "children": []
                                        },
                                        {
                                          "value": "(title=\"Comma-separated list of authorization scopes\")",
                                          "children": [
                                            {
                                              "value": "title=\"Comma-separated list of authorization scopes\"",
                                              "children": [
                                                {
                                                  "value": "title",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"Comma-separated list of authorization scopes\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "Comma-separated list of authorization scopes",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "\"\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "LoginResponse",
              "children": [
                {
                  "value": "LoginResponse",
                  "children": []
                }
              ]
            },
            {
              "value": "handler = _get_provider_oauth_handler(request, provider)\n\n    requested_scopes = scopes.split(\",\") if scopes else []\n\n    # Generate and store a secure random state token along with the scopes\n    state_token = creds_manager.store.store_state_token(\n        user_id, provider, requested_scopes\n    )\n\n    login_url = handler.get_login_url(requested_scopes, state_token)\n\n    return LoginResponse(login_url=login_url, state_token=state_token)",
              "children": [
                {
                  "value": "handler = _get_provider_oauth_handler(request, provider)",
                  "children": [
                    {
                      "value": "handler = _get_provider_oauth_handler(request, provider)",
                      "children": [
                        {
                          "value": "handler",
                          "children": []
                        },
                        {
                          "value": "_get_provider_oauth_handler(request, provider)",
                          "children": [
                            {
                              "value": "_get_provider_oauth_handler",
                              "children": []
                            },
                            {
                              "value": "(request, provider)",
                              "children": [
                                {
                                  "value": "request",
                                  "children": []
                                },
                                {
                                  "value": "provider",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "requested_scopes = scopes.split(\",\") if scopes else []",
                  "children": [
                    {
                      "value": "requested_scopes = scopes.split(\",\") if scopes else []",
                      "children": [
                        {
                          "value": "requested_scopes",
                          "children": []
                        },
                        {
                          "value": "scopes.split(\",\") if scopes else []",
                          "children": [
                            {
                              "value": "scopes.split(\",\")",
                              "children": [
                                {
                                  "value": "scopes.split",
                                  "children": [
                                    {
                                      "value": "scopes",
                                      "children": []
                                    },
                                    {
                                      "value": "split",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(\",\")",
                                  "children": [
                                    {
                                      "value": "\",\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": ",",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "scopes",
                              "children": []
                            },
                            {
                              "value": "[]",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "# Generate and store a secure random state token along with the scopes",
                  "children": []
                },
                {
                  "value": "state_token = creds_manager.store.store_state_token(\n        user_id, provider, requested_scopes\n    )",
                  "children": [
                    {
                      "value": "state_token = creds_manager.store.store_state_token(\n        user_id, provider, requested_scopes\n    )",
                      "children": [
                        {
                          "value": "state_token",
                          "children": []
                        },
                        {
                          "value": "creds_manager.store.store_state_token(\n        user_id, provider, requested_scopes\n    )",
                          "children": [
                            {
                              "value": "creds_manager.store.store_state_token",
                              "children": [
                                {
                                  "value": "creds_manager.store",
                                  "children": [
                                    {
                                      "value": "creds_manager",
                                      "children": []
                                    },
                                    {
                                      "value": "store",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "store_state_token",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(\n        user_id, provider, requested_scopes\n    )",
                              "children": [
                                {
                                  "value": "user_id",
                                  "children": []
                                },
                                {
                                  "value": "provider",
                                  "children": []
                                },
                                {
                                  "value": "requested_scopes",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "login_url = handler.get_login_url(requested_scopes, state_token)",
                  "children": [
                    {
                      "value": "login_url = handler.get_login_url(requested_scopes, state_token)",
                      "children": [
                        {
                          "value": "login_url",
                          "children": []
                        },
                        {
                          "value": "handler.get_login_url(requested_scopes, state_token)",
                          "children": [
                            {
                              "value": "handler.get_login_url",
                              "children": [
                                {
                                  "value": "handler",
                                  "children": []
                                },
                                {
                                  "value": "get_login_url",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(requested_scopes, state_token)",
                              "children": [
                                {
                                  "value": "requested_scopes",
                                  "children": []
                                },
                                {
                                  "value": "state_token",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "return LoginResponse(login_url=login_url, state_token=state_token)",
                  "children": [
                    {
                      "value": "LoginResponse(login_url=login_url, state_token=state_token)",
                      "children": [
                        {
                          "value": "LoginResponse",
                          "children": []
                        },
                        {
                          "value": "(login_url=login_url, state_token=state_token)",
                          "children": [
                            {
                              "value": "login_url=login_url",
                              "children": [
                                {
                                  "value": "login_url",
                                  "children": []
                                },
                                {
                                  "value": "login_url",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "state_token=state_token",
                              "children": [
                                {
                                  "value": "state_token",
                                  "children": []
                                },
                                {
                                  "value": "state_token",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class CredentialsMetaResponse(BaseModel):\n    id: str\n    provider: str\n    type: CredentialsType\n    title: str | None\n    scopes: list[str] | None\n    username: str | None",
      "children": [
        {
          "value": "CredentialsMetaResponse",
          "children": []
        },
        {
          "value": "(BaseModel)",
          "children": [
            {
              "value": "BaseModel",
              "children": []
            }
          ]
        },
        {
          "value": "id: str\n    provider: str\n    type: CredentialsType\n    title: str | None\n    scopes: list[str] | None\n    username: str | None",
          "children": [
            {
              "value": "id: str",
              "children": [
                {
                  "value": "id: str",
                  "children": [
                    {
                      "value": "id",
                      "children": []
                    },
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "provider: str",
              "children": [
                {
                  "value": "provider: str",
                  "children": [
                    {
                      "value": "provider",
                      "children": []
                    },
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "type: CredentialsType",
              "children": [
                {
                  "value": "type: CredentialsType",
                  "children": [
                    {
                      "value": "type",
                      "children": []
                    },
                    {
                      "value": "CredentialsType",
                      "children": [
                        {
                          "value": "CredentialsType",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "title: str | None",
              "children": [
                {
                  "value": "title: str | None",
                  "children": [
                    {
                      "value": "title",
                      "children": []
                    },
                    {
                      "value": "str | None",
                      "children": [
                        {
                          "value": "str | None",
                          "children": [
                            {
                              "value": "str",
                              "children": []
                            },
                            {
                              "value": "None",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "scopes: list[str] | None",
              "children": [
                {
                  "value": "scopes: list[str] | None",
                  "children": [
                    {
                      "value": "scopes",
                      "children": []
                    },
                    {
                      "value": "list[str] | None",
                      "children": [
                        {
                          "value": "list[str] | None",
                          "children": [
                            {
                              "value": "list[str]",
                              "children": [
                                {
                                  "value": "list[str]",
                                  "children": [
                                    {
                                      "value": "list",
                                      "children": []
                                    },
                                    {
                                      "value": "[str]",
                                      "children": [
                                        {
                                          "value": "str",
                                          "children": [
                                            {
                                              "value": "str",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "None",
                              "children": [
                                {
                                  "value": "None",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "username: str | None",
              "children": [
                {
                  "value": "username: str | None",
                  "children": [
                    {
                      "value": "username",
                      "children": []
                    },
                    {
                      "value": "str | None",
                      "children": [
                        {
                          "value": "str | None",
                          "children": [
                            {
                              "value": "str",
                              "children": []
                            },
                            {
                              "value": "None",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "@router.post(\"/{provider}/callback\")\ndef callback(\n    provider: Annotated[\n        ProviderName, Path(title=\"The target provider for this OAuth exchange\")\n    ],\n    code: Annotated[str, Body(title=\"Authorization code acquired by user login\")],\n    state_token: Annotated[str, Body(title=\"Anti-CSRF nonce\")],\n    user_id: Annotated[str, Depends(get_user_id)],\n    request: Request,\n) -> CredentialsMetaResponse:\n    logger.debug(f\"Received OAuth callback for provider: {provider}\")\n    handler = _get_provider_oauth_handler(request, provider)\n\n    # Verify the state token\n    if not creds_manager.store.verify_state_token(user_id, state_token, provider):\n        logger.warning(f\"Invalid or expired state token for user {user_id}\")\n        raise HTTPException(status_code=400, detail=\"Invalid or expired state token\")\n\n    try:\n        scopes = creds_manager.store.get_any_valid_scopes_from_state_token(\n            user_id, state_token, provider\n        )\n        logger.debug(f\"Retrieved scopes from state token: {scopes}\")\n\n        scopes = handler.handle_default_scopes(scopes)\n\n        credentials = handler.exchange_code_for_tokens(code, scopes)\n        logger.debug(f\"Received credentials with final scopes: {credentials.scopes}\")\n\n        # Check if the granted scopes are sufficient for the requested scopes\n        if not set(scopes).issubset(set(credentials.scopes)):\n            # For now, we'll just log the warning and continue\n            logger.warning(\n                f\"Granted scopes {credentials.scopes} for provider {provider.value} \"\n                f\"do not include all requested scopes {scopes}\"\n            )\n\n    except Exception as e:\n        logger.error(f\"Code->Token exchange failed for provider {provider.value}: {e}\")\n        raise HTTPException(\n            status_code=400, detail=f\"Failed to exchange code for tokens: {str(e)}\"\n        )\n\n    # TODO: Allow specifying `title` to set on `credentials`\n    creds_manager.create(user_id, credentials)\n\n    logger.debug(\n        f\"Successfully processed OAuth callback for user {user_id} \"\n        f\"and provider {provider.value}\"\n    )\n    return CredentialsMetaResponse(\n        id=credentials.id,\n        provider=credentials.provider,\n        type=credentials.type,\n        title=credentials.title,\n        scopes=credentials.scopes,\n        username=credentials.username,\n    )",
      "children": [
        {
          "value": "@router.post(\"/{provider}/callback\")",
          "children": [
            {
              "value": "router.post(\"/{provider}/callback\")",
              "children": [
                {
                  "value": "router.post",
                  "children": [
                    {
                      "value": "router",
                      "children": []
                    },
                    {
                      "value": "post",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(\"/{provider}/callback\")",
                  "children": [
                    {
                      "value": "\"/{provider}/callback\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "/{provider}/callback",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "def callback(\n    provider: Annotated[\n        ProviderName, Path(title=\"The target provider for this OAuth exchange\")\n    ],\n    code: Annotated[str, Body(title=\"Authorization code acquired by user login\")],\n    state_token: Annotated[str, Body(title=\"Anti-CSRF nonce\")],\n    user_id: Annotated[str, Depends(get_user_id)],\n    request: Request,\n) -> CredentialsMetaResponse:\n    logger.debug(f\"Received OAuth callback for provider: {provider}\")\n    handler = _get_provider_oauth_handler(request, provider)\n\n    # Verify the state token\n    if not creds_manager.store.verify_state_token(user_id, state_token, provider):\n        logger.warning(f\"Invalid or expired state token for user {user_id}\")\n        raise HTTPException(status_code=400, detail=\"Invalid or expired state token\")\n\n    try:\n        scopes = creds_manager.store.get_any_valid_scopes_from_state_token(\n            user_id, state_token, provider\n        )\n        logger.debug(f\"Retrieved scopes from state token: {scopes}\")\n\n        scopes = handler.handle_default_scopes(scopes)\n\n        credentials = handler.exchange_code_for_tokens(code, scopes)\n        logger.debug(f\"Received credentials with final scopes: {credentials.scopes}\")\n\n        # Check if the granted scopes are sufficient for the requested scopes\n        if not set(scopes).issubset(set(credentials.scopes)):\n            # For now, we'll just log the warning and continue\n            logger.warning(\n                f\"Granted scopes {credentials.scopes} for provider {provider.value} \"\n                f\"do not include all requested scopes {scopes}\"\n            )\n\n    except Exception as e:\n        logger.error(f\"Code->Token exchange failed for provider {provider.value}: {e}\")\n        raise HTTPException(\n            status_code=400, detail=f\"Failed to exchange code for tokens: {str(e)}\"\n        )\n\n    # TODO: Allow specifying `title` to set on `credentials`\n    creds_manager.create(user_id, credentials)\n\n    logger.debug(\n        f\"Successfully processed OAuth callback for user {user_id} \"\n        f\"and provider {provider.value}\"\n    )\n    return CredentialsMetaResponse(\n        id=credentials.id,\n        provider=credentials.provider,\n        type=credentials.type,\n        title=credentials.title,\n        scopes=credentials.scopes,\n        username=credentials.username,\n    )",
          "children": [
            {
              "value": "callback",
              "children": []
            },
            {
              "value": "(\n    provider: Annotated[\n        ProviderName, Path(title=\"The target provider for this OAuth exchange\")\n    ],\n    code: Annotated[str, Body(title=\"Authorization code acquired by user login\")],\n    state_token: Annotated[str, Body(title=\"Anti-CSRF nonce\")],\n    user_id: Annotated[str, Depends(get_user_id)],\n    request: Request,\n)",
              "children": [
                {
                  "value": "provider: Annotated[\n        ProviderName, Path(title=\"The target provider for this OAuth exchange\")\n    ]",
                  "children": [
                    {
                      "value": "provider",
                      "children": []
                    },
                    {
                      "value": "Annotated[\n        ProviderName, Path(title=\"The target provider for this OAuth exchange\")\n    ]",
                      "children": [
                        {
                          "value": "Annotated[\n        ProviderName, Path(title=\"The target provider for this OAuth exchange\")\n    ]",
                          "children": [
                            {
                              "value": "Annotated",
                              "children": []
                            },
                            {
                              "value": "[\n        ProviderName, Path(title=\"The target provider for this OAuth exchange\")\n    ]",
                              "children": [
                                {
                                  "value": "ProviderName",
                                  "children": [
                                    {
                                      "value": "ProviderName",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "Path(title=\"The target provider for this OAuth exchange\")",
                                  "children": [
                                    {
                                      "value": "Path(title=\"The target provider for this OAuth exchange\")",
                                      "children": [
                                        {
                                          "value": "Path",
                                          "children": []
                                        },
                                        {
                                          "value": "(title=\"The target provider for this OAuth exchange\")",
                                          "children": [
                                            {
                                              "value": "title=\"The target provider for this OAuth exchange\"",
                                              "children": [
                                                {
                                                  "value": "title",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"The target provider for this OAuth exchange\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "The target provider for this OAuth exchange",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "code: Annotated[str, Body(title=\"Authorization code acquired by user login\")]",
                  "children": [
                    {
                      "value": "code",
                      "children": []
                    },
                    {
                      "value": "Annotated[str, Body(title=\"Authorization code acquired by user login\")]",
                      "children": [
                        {
                          "value": "Annotated[str, Body(title=\"Authorization code acquired by user login\")]",
                          "children": [
                            {
                              "value": "Annotated",
                              "children": []
                            },
                            {
                              "value": "[str, Body(title=\"Authorization code acquired by user login\")]",
                              "children": [
                                {
                                  "value": "str",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "Body(title=\"Authorization code acquired by user login\")",
                                  "children": [
                                    {
                                      "value": "Body(title=\"Authorization code acquired by user login\")",
                                      "children": [
                                        {
                                          "value": "Body",
                                          "children": []
                                        },
                                        {
                                          "value": "(title=\"Authorization code acquired by user login\")",
                                          "children": [
                                            {
                                              "value": "title=\"Authorization code acquired by user login\"",
                                              "children": [
                                                {
                                                  "value": "title",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"Authorization code acquired by user login\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "Authorization code acquired by user login",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "state_token: Annotated[str, Body(title=\"Anti-CSRF nonce\")]",
                  "children": [
                    {
                      "value": "state_token",
                      "children": []
                    },
                    {
                      "value": "Annotated[str, Body(title=\"Anti-CSRF nonce\")]",
                      "children": [
                        {
                          "value": "Annotated[str, Body(title=\"Anti-CSRF nonce\")]",
                          "children": [
                            {
                              "value": "Annotated",
                              "children": []
                            },
                            {
                              "value": "[str, Body(title=\"Anti-CSRF nonce\")]",
                              "children": [
                                {
                                  "value": "str",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "Body(title=\"Anti-CSRF nonce\")",
                                  "children": [
                                    {
                                      "value": "Body(title=\"Anti-CSRF nonce\")",
                                      "children": [
                                        {
                                          "value": "Body",
                                          "children": []
                                        },
                                        {
                                          "value": "(title=\"Anti-CSRF nonce\")",
                                          "children": [
                                            {
                                              "value": "title=\"Anti-CSRF nonce\"",
                                              "children": [
                                                {
                                                  "value": "title",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"Anti-CSRF nonce\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "Anti-CSRF nonce",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "user_id: Annotated[str, Depends(get_user_id)]",
                  "children": [
                    {
                      "value": "user_id",
                      "children": []
                    },
                    {
                      "value": "Annotated[str, Depends(get_user_id)]",
                      "children": [
                        {
                          "value": "Annotated[str, Depends(get_user_id)]",
                          "children": [
                            {
                              "value": "Annotated",
                              "children": []
                            },
                            {
                              "value": "[str, Depends(get_user_id)]",
                              "children": [
                                {
                                  "value": "str",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "Depends(get_user_id)",
                                  "children": [
                                    {
                                      "value": "Depends(get_user_id)",
                                      "children": [
                                        {
                                          "value": "Depends",
                                          "children": []
                                        },
                                        {
                                          "value": "(get_user_id)",
                                          "children": [
                                            {
                                              "value": "get_user_id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "request: Request",
                  "children": [
                    {
                      "value": "request",
                      "children": []
                    },
                    {
                      "value": "Request",
                      "children": [
                        {
                          "value": "Request",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "CredentialsMetaResponse",
              "children": [
                {
                  "value": "CredentialsMetaResponse",
                  "children": []
                }
              ]
            },
            {
              "value": "logger.debug(f\"Received OAuth callback for provider: {provider}\")\n    handler = _get_provider_oauth_handler(request, provider)\n\n    # Verify the state token\n    if not creds_manager.store.verify_state_token(user_id, state_token, provider):\n        logger.warning(f\"Invalid or expired state token for user {user_id}\")\n        raise HTTPException(status_code=400, detail=\"Invalid or expired state token\")\n\n    try:\n        scopes = creds_manager.store.get_any_valid_scopes_from_state_token(\n            user_id, state_token, provider\n        )\n        logger.debug(f\"Retrieved scopes from state token: {scopes}\")\n\n        scopes = handler.handle_default_scopes(scopes)\n\n        credentials = handler.exchange_code_for_tokens(code, scopes)\n        logger.debug(f\"Received credentials with final scopes: {credentials.scopes}\")\n\n        # Check if the granted scopes are sufficient for the requested scopes\n        if not set(scopes).issubset(set(credentials.scopes)):\n            # For now, we'll just log the warning and continue\n            logger.warning(\n                f\"Granted scopes {credentials.scopes} for provider {provider.value} \"\n                f\"do not include all requested scopes {scopes}\"\n            )\n\n    except Exception as e:\n        logger.error(f\"Code->Token exchange failed for provider {provider.value}: {e}\")\n        raise HTTPException(\n            status_code=400, detail=f\"Failed to exchange code for tokens: {str(e)}\"\n        )\n\n    # TODO: Allow specifying `title` to set on `credentials`\n    creds_manager.create(user_id, credentials)\n\n    logger.debug(\n        f\"Successfully processed OAuth callback for user {user_id} \"\n        f\"and provider {provider.value}\"\n    )\n    return CredentialsMetaResponse(\n        id=credentials.id,\n        provider=credentials.provider,\n        type=credentials.type,\n        title=credentials.title,\n        scopes=credentials.scopes,\n        username=credentials.username,\n    )",
              "children": [
                {
                  "value": "logger.debug(f\"Received OAuth callback for provider: {provider}\")",
                  "children": [
                    {
                      "value": "logger.debug(f\"Received OAuth callback for provider: {provider}\")",
                      "children": [
                        {
                          "value": "logger.debug",
                          "children": [
                            {
                              "value": "logger",
                              "children": []
                            },
                            {
                              "value": "debug",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "(f\"Received OAuth callback for provider: {provider}\")",
                          "children": [
                            {
                              "value": "f\"Received OAuth callback for provider: {provider}\"",
                              "children": [
                                {
                                  "value": "f\"",
                                  "children": []
                                },
                                {
                                  "value": "Received OAuth callback for provider:",
                                  "children": []
                                },
                                {
                                  "value": "{provider}",
                                  "children": [
                                    {
                                      "value": "provider",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "handler = _get_provider_oauth_handler(request, provider)",
                  "children": [
                    {
                      "value": "handler = _get_provider_oauth_handler(request, provider)",
                      "children": [
                        {
                          "value": "handler",
                          "children": []
                        },
                        {
                          "value": "_get_provider_oauth_handler(request, provider)",
                          "children": [
                            {
                              "value": "_get_provider_oauth_handler",
                              "children": []
                            },
                            {
                              "value": "(request, provider)",
                              "children": [
                                {
                                  "value": "request",
                                  "children": []
                                },
                                {
                                  "value": "provider",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "# Verify the state token",
                  "children": []
                },
                {
                  "value": "if not creds_manager.store.verify_state_token(user_id, state_token, provider):\n        logger.warning(f\"Invalid or expired state token for user {user_id}\")\n        raise HTTPException(status_code=400, detail=\"Invalid or expired state token\")",
                  "children": [
                    {
                      "value": "not creds_manager.store.verify_state_token(user_id, state_token, provider)",
                      "children": [
                        {
                          "value": "creds_manager.store.verify_state_token(user_id, state_token, provider)",
                          "children": [
                            {
                              "value": "creds_manager.store.verify_state_token",
                              "children": [
                                {
                                  "value": "creds_manager.store",
                                  "children": [
                                    {
                                      "value": "creds_manager",
                                      "children": []
                                    },
                                    {
                                      "value": "store",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "verify_state_token",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(user_id, state_token, provider)",
                              "children": [
                                {
                                  "value": "user_id",
                                  "children": []
                                },
                                {
                                  "value": "state_token",
                                  "children": []
                                },
                                {
                                  "value": "provider",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "logger.warning(f\"Invalid or expired state token for user {user_id}\")\n        raise HTTPException(status_code=400, detail=\"Invalid or expired state token\")",
                      "children": [
                        {
                          "value": "logger.warning(f\"Invalid or expired state token for user {user_id}\")",
                          "children": [
                            {
                              "value": "logger.warning(f\"Invalid or expired state token for user {user_id}\")",
                              "children": [
                                {
                                  "value": "logger.warning",
                                  "children": [
                                    {
                                      "value": "logger",
                                      "children": []
                                    },
                                    {
                                      "value": "warning",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(f\"Invalid or expired state token for user {user_id}\")",
                                  "children": [
                                    {
                                      "value": "f\"Invalid or expired state token for user {user_id}\"",
                                      "children": [
                                        {
                                          "value": "f\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Invalid or expired state token for user",
                                          "children": []
                                        },
                                        {
                                          "value": "{user_id}",
                                          "children": [
                                            {
                                              "value": "user_id",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "raise HTTPException(status_code=400, detail=\"Invalid or expired state token\")",
                          "children": [
                            {
                              "value": "HTTPException(status_code=400, detail=\"Invalid or expired state token\")",
                              "children": [
                                {
                                  "value": "HTTPException",
                                  "children": []
                                },
                                {
                                  "value": "(status_code=400, detail=\"Invalid or expired state token\")",
                                  "children": [
                                    {
                                      "value": "status_code=400",
                                      "children": [
                                        {
                                          "value": "status_code",
                                          "children": []
                                        },
                                        {
                                          "value": "400",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "detail=\"Invalid or expired state token\"",
                                      "children": [
                                        {
                                          "value": "detail",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Invalid or expired state token\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Invalid or expired state token",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "try:\n        scopes = creds_manager.store.get_any_valid_scopes_from_state_token(\n            user_id, state_token, provider\n        )\n        logger.debug(f\"Retrieved scopes from state token: {scopes}\")\n\n        scopes = handler.handle_default_scopes(scopes)\n\n        credentials = handler.exchange_code_for_tokens(code, scopes)\n        logger.debug(f\"Received credentials with final scopes: {credentials.scopes}\")\n\n        # Check if the granted scopes are sufficient for the requested scopes\n        if not set(scopes).issubset(set(credentials.scopes)):\n            # For now, we'll just log the warning and continue\n            logger.warning(\n                f\"Granted scopes {credentials.scopes} for provider {provider.value} \"\n                f\"do not include all requested scopes {scopes}\"\n            )\n\n    except Exception as e:\n        logger.error(f\"Code->Token exchange failed for provider {provider.value}: {e}\")\n        raise HTTPException(\n            status_code=400, detail=f\"Failed to exchange code for tokens: {str(e)}\"\n        )",
                  "children": [
                    {
                      "value": "scopes = creds_manager.store.get_any_valid_scopes_from_state_token(\n            user_id, state_token, provider\n        )\n        logger.debug(f\"Retrieved scopes from state token: {scopes}\")\n\n        scopes = handler.handle_default_scopes(scopes)\n\n        credentials = handler.exchange_code_for_tokens(code, scopes)\n        logger.debug(f\"Received credentials with final scopes: {credentials.scopes}\")\n\n        # Check if the granted scopes are sufficient for the requested scopes\n        if not set(scopes).issubset(set(credentials.scopes)):\n            # For now, we'll just log the warning and continue\n            logger.warning(\n                f\"Granted scopes {credentials.scopes} for provider {provider.value} \"\n                f\"do not include all requested scopes {scopes}\"\n            )",
                      "children": [
                        {
                          "value": "scopes = creds_manager.store.get_any_valid_scopes_from_state_token(\n            user_id, state_token, provider\n        )",
                          "children": [
                            {
                              "value": "scopes = creds_manager.store.get_any_valid_scopes_from_state_token(\n            user_id, state_token, provider\n        )",
                              "children": [
                                {
                                  "value": "scopes",
                                  "children": []
                                },
                                {
                                  "value": "creds_manager.store.get_any_valid_scopes_from_state_token(\n            user_id, state_token, provider\n        )",
                                  "children": [
                                    {
                                      "value": "creds_manager.store.get_any_valid_scopes_from_state_token",
                                      "children": [
                                        {
                                          "value": "creds_manager.store",
                                          "children": [
                                            {
                                              "value": "creds_manager",
                                              "children": []
                                            },
                                            {
                                              "value": "store",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "get_any_valid_scopes_from_state_token",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(\n            user_id, state_token, provider\n        )",
                                      "children": [
                                        {
                                          "value": "user_id",
                                          "children": []
                                        },
                                        {
                                          "value": "state_token",
                                          "children": []
                                        },
                                        {
                                          "value": "provider",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "logger.debug(f\"Retrieved scopes from state token: {scopes}\")",
                          "children": [
                            {
                              "value": "logger.debug(f\"Retrieved scopes from state token: {scopes}\")",
                              "children": [
                                {
                                  "value": "logger.debug",
                                  "children": [
                                    {
                                      "value": "logger",
                                      "children": []
                                    },
                                    {
                                      "value": "debug",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(f\"Retrieved scopes from state token: {scopes}\")",
                                  "children": [
                                    {
                                      "value": "f\"Retrieved scopes from state token: {scopes}\"",
                                      "children": [
                                        {
                                          "value": "f\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Retrieved scopes from state token:",
                                          "children": []
                                        },
                                        {
                                          "value": "{scopes}",
                                          "children": [
                                            {
                                              "value": "scopes",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "scopes = handler.handle_default_scopes(scopes)",
                          "children": [
                            {
                              "value": "scopes = handler.handle_default_scopes(scopes)",
                              "children": [
                                {
                                  "value": "scopes",
                                  "children": []
                                },
                                {
                                  "value": "handler.handle_default_scopes(scopes)",
                                  "children": [
                                    {
                                      "value": "handler.handle_default_scopes",
                                      "children": [
                                        {
                                          "value": "handler",
                                          "children": []
                                        },
                                        {
                                          "value": "handle_default_scopes",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(scopes)",
                                      "children": [
                                        {
                                          "value": "scopes",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "credentials = handler.exchange_code_for_tokens(code, scopes)",
                          "children": [
                            {
                              "value": "credentials = handler.exchange_code_for_tokens(code, scopes)",
                              "children": [
                                {
                                  "value": "credentials",
                                  "children": []
                                },
                                {
                                  "value": "handler.exchange_code_for_tokens(code, scopes)",
                                  "children": [
                                    {
                                      "value": "handler.exchange_code_for_tokens",
                                      "children": [
                                        {
                                          "value": "handler",
                                          "children": []
                                        },
                                        {
                                          "value": "exchange_code_for_tokens",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(code, scopes)",
                                      "children": [
                                        {
                                          "value": "code",
                                          "children": []
                                        },
                                        {
                                          "value": "scopes",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "logger.debug(f\"Received credentials with final scopes: {credentials.scopes}\")",
                          "children": [
                            {
                              "value": "logger.debug(f\"Received credentials with final scopes: {credentials.scopes}\")",
                              "children": [
                                {
                                  "value": "logger.debug",
                                  "children": [
                                    {
                                      "value": "logger",
                                      "children": []
                                    },
                                    {
                                      "value": "debug",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(f\"Received credentials with final scopes: {credentials.scopes}\")",
                                  "children": [
                                    {
                                      "value": "f\"Received credentials with final scopes: {credentials.scopes}\"",
                                      "children": [
                                        {
                                          "value": "f\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Received credentials with final scopes:",
                                          "children": []
                                        },
                                        {
                                          "value": "{credentials.scopes}",
                                          "children": [
                                            {
                                              "value": "credentials.scopes",
                                              "children": [
                                                {
                                                  "value": "credentials",
                                                  "children": []
                                                },
                                                {
                                                  "value": "scopes",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "# Check if the granted scopes are sufficient for the requested scopes",
                          "children": []
                        },
                        {
                          "value": "if not set(scopes).issubset(set(credentials.scopes)):\n            # For now, we'll just log the warning and continue\n            logger.warning(\n                f\"Granted scopes {credentials.scopes} for provider {provider.value} \"\n                f\"do not include all requested scopes {scopes}\"\n            )",
                          "children": [
                            {
                              "value": "not set(scopes).issubset(set(credentials.scopes))",
                              "children": [
                                {
                                  "value": "set(scopes).issubset(set(credentials.scopes))",
                                  "children": [
                                    {
                                      "value": "set(scopes).issubset",
                                      "children": [
                                        {
                                          "value": "set(scopes)",
                                          "children": [
                                            {
                                              "value": "set",
                                              "children": []
                                            },
                                            {
                                              "value": "(scopes)",
                                              "children": [
                                                {
                                                  "value": "scopes",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "issubset",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(set(credentials.scopes))",
                                      "children": [
                                        {
                                          "value": "set(credentials.scopes)",
                                          "children": [
                                            {
                                              "value": "set",
                                              "children": []
                                            },
                                            {
                                              "value": "(credentials.scopes)",
                                              "children": [
                                                {
                                                  "value": "credentials.scopes",
                                                  "children": [
                                                    {
                                                      "value": "credentials",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "scopes",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "# For now, we'll just log the warning and continue",
                              "children": []
                            },
                            {
                              "value": "logger.warning(\n                f\"Granted scopes {credentials.scopes} for provider {provider.value} \"\n                f\"do not include all requested scopes {scopes}\"\n            )",
                              "children": [
                                {
                                  "value": "logger.warning(\n                f\"Granted scopes {credentials.scopes} for provider {provider.value} \"\n                f\"do not include all requested scopes {scopes}\"\n            )",
                                  "children": [
                                    {
                                      "value": "logger.warning(\n                f\"Granted scopes {credentials.scopes} for provider {provider.value} \"\n                f\"do not include all requested scopes {scopes}\"\n            )",
                                      "children": [
                                        {
                                          "value": "logger.warning",
                                          "children": [
                                            {
                                              "value": "logger",
                                              "children": []
                                            },
                                            {
                                              "value": "warning",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(\n                f\"Granted scopes {credentials.scopes} for provider {provider.value} \"\n                f\"do not include all requested scopes {scopes}\"\n            )",
                                          "children": [
                                            {
                                              "value": "f\"Granted scopes {credentials.scopes} for provider {provider.value} \"\n                f\"do not include all requested scopes {scopes}\"",
                                              "children": [
                                                {
                                                  "value": "f\"Granted scopes {credentials.scopes} for provider {provider.value} \"",
                                                  "children": [
                                                    {
                                                      "value": "f\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "Granted scopes",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "{credentials.scopes}",
                                                      "children": [
                                                        {
                                                          "value": "credentials.scopes",
                                                          "children": [
                                                            {
                                                              "value": "credentials",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "scopes",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "for provider",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "{provider.value}",
                                                      "children": [
                                                        {
                                                          "value": "provider.value",
                                                          "children": [
                                                            {
                                                              "value": "provider",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "value",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "f\"do not include all requested scopes {scopes}\"",
                                                  "children": [
                                                    {
                                                      "value": "f\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "do not include all requested scopes",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "{scopes}",
                                                      "children": [
                                                        {
                                                          "value": "scopes",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "except Exception as e:\n        logger.error(f\"Code->Token exchange failed for provider {provider.value}: {e}\")\n        raise HTTPException(\n            status_code=400, detail=f\"Failed to exchange code for tokens: {str(e)}\"\n        )",
                      "children": [
                        {
                          "value": "Exception as e",
                          "children": [
                            {
                              "value": "Exception",
                              "children": []
                            },
                            {
                              "value": "e",
                              "children": [
                                {
                                  "value": "e",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "logger.error(f\"Code->Token exchange failed for provider {provider.value}: {e}\")\n        raise HTTPException(\n            status_code=400, detail=f\"Failed to exchange code for tokens: {str(e)}\"\n        )",
                          "children": [
                            {
                              "value": "logger.error(f\"Code->Token exchange failed for provider {provider.value}: {e}\")",
                              "children": [
                                {
                                  "value": "logger.error(f\"Code->Token exchange failed for provider {provider.value}: {e}\")",
                                  "children": [
                                    {
                                      "value": "logger.error",
                                      "children": [
                                        {
                                          "value": "logger",
                                          "children": []
                                        },
                                        {
                                          "value": "error",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(f\"Code->Token exchange failed for provider {provider.value}: {e}\")",
                                      "children": [
                                        {
                                          "value": "f\"Code->Token exchange failed for provider {provider.value}: {e}\"",
                                          "children": [
                                            {
                                              "value": "f\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Code->Token exchange failed for provider",
                                              "children": []
                                            },
                                            {
                                              "value": "{provider.value}",
                                              "children": [
                                                {
                                                  "value": "provider.value",
                                                  "children": [
                                                    {
                                                      "value": "provider",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "value",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": ":",
                                              "children": []
                                            },
                                            {
                                              "value": "{e}",
                                              "children": [
                                                {
                                                  "value": "e",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "raise HTTPException(\n            status_code=400, detail=f\"Failed to exchange code for tokens: {str(e)}\"\n        )",
                              "children": [
                                {
                                  "value": "HTTPException(\n            status_code=400, detail=f\"Failed to exchange code for tokens: {str(e)}\"\n        )",
                                  "children": [
                                    {
                                      "value": "HTTPException",
                                      "children": []
                                    },
                                    {
                                      "value": "(\n            status_code=400, detail=f\"Failed to exchange code for tokens: {str(e)}\"\n        )",
                                      "children": [
                                        {
                                          "value": "status_code=400",
                                          "children": [
                                            {
                                              "value": "status_code",
                                              "children": []
                                            },
                                            {
                                              "value": "400",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "detail=f\"Failed to exchange code for tokens: {str(e)}\"",
                                          "children": [
                                            {
                                              "value": "detail",
                                              "children": []
                                            },
                                            {
                                              "value": "f\"Failed to exchange code for tokens: {str(e)}\"",
                                              "children": [
                                                {
                                                  "value": "f\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "Failed to exchange code for tokens:",
                                                  "children": []
                                                },
                                                {
                                                  "value": "{str(e)}",
                                                  "children": [
                                                    {
                                                      "value": "str(e)",
                                                      "children": [
                                                        {
                                                          "value": "str",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "(e)",
                                                          "children": [
                                                            {
                                                              "value": "e",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "# TODO: Allow specifying `title` to set on `credentials`",
                  "children": []
                },
                {
                  "value": "creds_manager.create(user_id, credentials)",
                  "children": [
                    {
                      "value": "creds_manager.create(user_id, credentials)",
                      "children": [
                        {
                          "value": "creds_manager.create",
                          "children": [
                            {
                              "value": "creds_manager",
                              "children": []
                            },
                            {
                              "value": "create",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "(user_id, credentials)",
                          "children": [
                            {
                              "value": "user_id",
                              "children": []
                            },
                            {
                              "value": "credentials",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "logger.debug(\n        f\"Successfully processed OAuth callback for user {user_id} \"\n        f\"and provider {provider.value}\"\n    )",
                  "children": [
                    {
                      "value": "logger.debug(\n        f\"Successfully processed OAuth callback for user {user_id} \"\n        f\"and provider {provider.value}\"\n    )",
                      "children": [
                        {
                          "value": "logger.debug",
                          "children": [
                            {
                              "value": "logger",
                              "children": []
                            },
                            {
                              "value": "debug",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "(\n        f\"Successfully processed OAuth callback for user {user_id} \"\n        f\"and provider {provider.value}\"\n    )",
                          "children": [
                            {
                              "value": "f\"Successfully processed OAuth callback for user {user_id} \"\n        f\"and provider {provider.value}\"",
                              "children": [
                                {
                                  "value": "f\"Successfully processed OAuth callback for user {user_id} \"",
                                  "children": [
                                    {
                                      "value": "f\"",
                                      "children": []
                                    },
                                    {
                                      "value": "Successfully processed OAuth callback for user",
                                      "children": []
                                    },
                                    {
                                      "value": "{user_id}",
                                      "children": [
                                        {
                                          "value": "user_id",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "f\"and provider {provider.value}\"",
                                  "children": [
                                    {
                                      "value": "f\"",
                                      "children": []
                                    },
                                    {
                                      "value": "and provider",
                                      "children": []
                                    },
                                    {
                                      "value": "{provider.value}",
                                      "children": [
                                        {
                                          "value": "provider.value",
                                          "children": [
                                            {
                                              "value": "provider",
                                              "children": []
                                            },
                                            {
                                              "value": "value",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "return CredentialsMetaResponse(\n        id=credentials.id,\n        provider=credentials.provider,\n        type=credentials.type,\n        title=credentials.title,\n        scopes=credentials.scopes,\n        username=credentials.username,\n    )",
                  "children": [
                    {
                      "value": "CredentialsMetaResponse(\n        id=credentials.id,\n        provider=credentials.provider,\n        type=credentials.type,\n        title=credentials.title,\n        scopes=credentials.scopes,\n        username=credentials.username,\n    )",
                      "children": [
                        {
                          "value": "CredentialsMetaResponse",
                          "children": []
                        },
                        {
                          "value": "(\n        id=credentials.id,\n        provider=credentials.provider,\n        type=credentials.type,\n        title=credentials.title,\n        scopes=credentials.scopes,\n        username=credentials.username,\n    )",
                          "children": [
                            {
                              "value": "id=credentials.id",
                              "children": [
                                {
                                  "value": "id",
                                  "children": []
                                },
                                {
                                  "value": "credentials.id",
                                  "children": [
                                    {
                                      "value": "credentials",
                                      "children": []
                                    },
                                    {
                                      "value": "id",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "provider=credentials.provider",
                              "children": [
                                {
                                  "value": "provider",
                                  "children": []
                                },
                                {
                                  "value": "credentials.provider",
                                  "children": [
                                    {
                                      "value": "credentials",
                                      "children": []
                                    },
                                    {
                                      "value": "provider",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "type=credentials.type",
                              "children": [
                                {
                                  "value": "type",
                                  "children": []
                                },
                                {
                                  "value": "credentials.type",
                                  "children": [
                                    {
                                      "value": "credentials",
                                      "children": []
                                    },
                                    {
                                      "value": "type",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "title=credentials.title",
                              "children": [
                                {
                                  "value": "title",
                                  "children": []
                                },
                                {
                                  "value": "credentials.title",
                                  "children": [
                                    {
                                      "value": "credentials",
                                      "children": []
                                    },
                                    {
                                      "value": "title",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "scopes=credentials.scopes",
                              "children": [
                                {
                                  "value": "scopes",
                                  "children": []
                                },
                                {
                                  "value": "credentials.scopes",
                                  "children": [
                                    {
                                      "value": "credentials",
                                      "children": []
                                    },
                                    {
                                      "value": "scopes",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "username=credentials.username",
                              "children": [
                                {
                                  "value": "username",
                                  "children": []
                                },
                                {
                                  "value": "credentials.username",
                                  "children": [
                                    {
                                      "value": "credentials",
                                      "children": []
                                    },
                                    {
                                      "value": "username",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "@router.get(\"/credentials\")\ndef list_credentials(\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> list[CredentialsMetaResponse]:\n    credentials = creds_manager.store.get_all_creds(user_id)\n    return [\n        CredentialsMetaResponse(\n            id=cred.id,\n            provider=cred.provider,\n            type=cred.type,\n            title=cred.title,\n            scopes=cred.scopes if isinstance(cred, OAuth2Credentials) else None,\n            username=cred.username if isinstance(cred, OAuth2Credentials) else None,\n        )\n        for cred in credentials\n    ]",
      "children": [
        {
          "value": "@router.get(\"/credentials\")",
          "children": [
            {
              "value": "router.get(\"/credentials\")",
              "children": [
                {
                  "value": "router.get",
                  "children": [
                    {
                      "value": "router",
                      "children": []
                    },
                    {
                      "value": "get",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(\"/credentials\")",
                  "children": [
                    {
                      "value": "\"/credentials\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "/credentials",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "def list_credentials(\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> list[CredentialsMetaResponse]:\n    credentials = creds_manager.store.get_all_creds(user_id)\n    return [\n        CredentialsMetaResponse(\n            id=cred.id,\n            provider=cred.provider,\n            type=cred.type,\n            title=cred.title,\n            scopes=cred.scopes if isinstance(cred, OAuth2Credentials) else None,\n            username=cred.username if isinstance(cred, OAuth2Credentials) else None,\n        )\n        for cred in credentials\n    ]",
          "children": [
            {
              "value": "list_credentials",
              "children": []
            },
            {
              "value": "(\n    user_id: Annotated[str, Depends(get_user_id)],\n)",
              "children": [
                {
                  "value": "user_id: Annotated[str, Depends(get_user_id)]",
                  "children": [
                    {
                      "value": "user_id",
                      "children": []
                    },
                    {
                      "value": "Annotated[str, Depends(get_user_id)]",
                      "children": [
                        {
                          "value": "Annotated[str, Depends(get_user_id)]",
                          "children": [
                            {
                              "value": "Annotated",
                              "children": []
                            },
                            {
                              "value": "[str, Depends(get_user_id)]",
                              "children": [
                                {
                                  "value": "str",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "Depends(get_user_id)",
                                  "children": [
                                    {
                                      "value": "Depends(get_user_id)",
                                      "children": [
                                        {
                                          "value": "Depends",
                                          "children": []
                                        },
                                        {
                                          "value": "(get_user_id)",
                                          "children": [
                                            {
                                              "value": "get_user_id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "list[CredentialsMetaResponse]",
              "children": [
                {
                  "value": "list[CredentialsMetaResponse]",
                  "children": [
                    {
                      "value": "list",
                      "children": []
                    },
                    {
                      "value": "[CredentialsMetaResponse]",
                      "children": [
                        {
                          "value": "CredentialsMetaResponse",
                          "children": [
                            {
                              "value": "CredentialsMetaResponse",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "credentials = creds_manager.store.get_all_creds(user_id)\n    return [\n        CredentialsMetaResponse(\n            id=cred.id,\n            provider=cred.provider,\n            type=cred.type,\n            title=cred.title,\n            scopes=cred.scopes if isinstance(cred, OAuth2Credentials) else None,\n            username=cred.username if isinstance(cred, OAuth2Credentials) else None,\n        )\n        for cred in credentials\n    ]",
              "children": [
                {
                  "value": "credentials = creds_manager.store.get_all_creds(user_id)",
                  "children": [
                    {
                      "value": "credentials = creds_manager.store.get_all_creds(user_id)",
                      "children": [
                        {
                          "value": "credentials",
                          "children": []
                        },
                        {
                          "value": "creds_manager.store.get_all_creds(user_id)",
                          "children": [
                            {
                              "value": "creds_manager.store.get_all_creds",
                              "children": [
                                {
                                  "value": "creds_manager.store",
                                  "children": [
                                    {
                                      "value": "creds_manager",
                                      "children": []
                                    },
                                    {
                                      "value": "store",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "get_all_creds",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(user_id)",
                              "children": [
                                {
                                  "value": "user_id",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "return [\n        CredentialsMetaResponse(\n            id=cred.id,\n            provider=cred.provider,\n            type=cred.type,\n            title=cred.title,\n            scopes=cred.scopes if isinstance(cred, OAuth2Credentials) else None,\n            username=cred.username if isinstance(cred, OAuth2Credentials) else None,\n        )\n        for cred in credentials\n    ]",
                  "children": [
                    {
                      "value": "[\n        CredentialsMetaResponse(\n            id=cred.id,\n            provider=cred.provider,\n            type=cred.type,\n            title=cred.title,\n            scopes=cred.scopes if isinstance(cred, OAuth2Credentials) else None,\n            username=cred.username if isinstance(cred, OAuth2Credentials) else None,\n        )\n        for cred in credentials\n    ]",
                      "children": [
                        {
                          "value": "CredentialsMetaResponse(\n            id=cred.id,\n            provider=cred.provider,\n            type=cred.type,\n            title=cred.title,\n            scopes=cred.scopes if isinstance(cred, OAuth2Credentials) else None,\n            username=cred.username if isinstance(cred, OAuth2Credentials) else None,\n        )",
                          "children": [
                            {
                              "value": "CredentialsMetaResponse",
                              "children": []
                            },
                            {
                              "value": "(\n            id=cred.id,\n            provider=cred.provider,\n            type=cred.type,\n            title=cred.title,\n            scopes=cred.scopes if isinstance(cred, OAuth2Credentials) else None,\n            username=cred.username if isinstance(cred, OAuth2Credentials) else None,\n        )",
                              "children": [
                                {
                                  "value": "id=cred.id",
                                  "children": [
                                    {
                                      "value": "id",
                                      "children": []
                                    },
                                    {
                                      "value": "cred.id",
                                      "children": [
                                        {
                                          "value": "cred",
                                          "children": []
                                        },
                                        {
                                          "value": "id",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "provider=cred.provider",
                                  "children": [
                                    {
                                      "value": "provider",
                                      "children": []
                                    },
                                    {
                                      "value": "cred.provider",
                                      "children": [
                                        {
                                          "value": "cred",
                                          "children": []
                                        },
                                        {
                                          "value": "provider",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "type=cred.type",
                                  "children": [
                                    {
                                      "value": "type",
                                      "children": []
                                    },
                                    {
                                      "value": "cred.type",
                                      "children": [
                                        {
                                          "value": "cred",
                                          "children": []
                                        },
                                        {
                                          "value": "type",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "title=cred.title",
                                  "children": [
                                    {
                                      "value": "title",
                                      "children": []
                                    },
                                    {
                                      "value": "cred.title",
                                      "children": [
                                        {
                                          "value": "cred",
                                          "children": []
                                        },
                                        {
                                          "value": "title",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "scopes=cred.scopes if isinstance(cred, OAuth2Credentials) else None",
                                  "children": [
                                    {
                                      "value": "scopes",
                                      "children": []
                                    },
                                    {
                                      "value": "cred.scopes if isinstance(cred, OAuth2Credentials) else None",
                                      "children": [
                                        {
                                          "value": "cred.scopes",
                                          "children": [
                                            {
                                              "value": "cred",
                                              "children": []
                                            },
                                            {
                                              "value": "scopes",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "isinstance(cred, OAuth2Credentials)",
                                          "children": [
                                            {
                                              "value": "isinstance",
                                              "children": []
                                            },
                                            {
                                              "value": "(cred, OAuth2Credentials)",
                                              "children": [
                                                {
                                                  "value": "cred",
                                                  "children": []
                                                },
                                                {
                                                  "value": "OAuth2Credentials",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "None",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "username=cred.username if isinstance(cred, OAuth2Credentials) else None",
                                  "children": [
                                    {
                                      "value": "username",
                                      "children": []
                                    },
                                    {
                                      "value": "cred.username if isinstance(cred, OAuth2Credentials) else None",
                                      "children": [
                                        {
                                          "value": "cred.username",
                                          "children": [
                                            {
                                              "value": "cred",
                                              "children": []
                                            },
                                            {
                                              "value": "username",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "isinstance(cred, OAuth2Credentials)",
                                          "children": [
                                            {
                                              "value": "isinstance",
                                              "children": []
                                            },
                                            {
                                              "value": "(cred, OAuth2Credentials)",
                                              "children": [
                                                {
                                                  "value": "cred",
                                                  "children": []
                                                },
                                                {
                                                  "value": "OAuth2Credentials",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "None",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "for cred in credentials",
                          "children": [
                            {
                              "value": "cred",
                              "children": []
                            },
                            {
                              "value": "credentials",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "@router.get(\"/{provider}/credentials\")\ndef list_credentials_by_provider(\n    provider: Annotated[\n        ProviderName, Path(title=\"The provider to list credentials for\")\n    ],\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> list[CredentialsMetaResponse]:\n    credentials = creds_manager.store.get_creds_by_provider(user_id, provider)\n    return [\n        CredentialsMetaResponse(\n            id=cred.id,\n            provider=cred.provider,\n            type=cred.type,\n            title=cred.title,\n            scopes=cred.scopes if isinstance(cred, OAuth2Credentials) else None,\n            username=cred.username if isinstance(cred, OAuth2Credentials) else None,\n        )\n        for cred in credentials\n    ]",
      "children": [
        {
          "value": "@router.get(\"/{provider}/credentials\")",
          "children": [
            {
              "value": "router.get(\"/{provider}/credentials\")",
              "children": [
                {
                  "value": "router.get",
                  "children": [
                    {
                      "value": "router",
                      "children": []
                    },
                    {
                      "value": "get",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(\"/{provider}/credentials\")",
                  "children": [
                    {
                      "value": "\"/{provider}/credentials\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "/{provider}/credentials",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "def list_credentials_by_provider(\n    provider: Annotated[\n        ProviderName, Path(title=\"The provider to list credentials for\")\n    ],\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> list[CredentialsMetaResponse]:\n    credentials = creds_manager.store.get_creds_by_provider(user_id, provider)\n    return [\n        CredentialsMetaResponse(\n            id=cred.id,\n            provider=cred.provider,\n            type=cred.type,\n            title=cred.title,\n            scopes=cred.scopes if isinstance(cred, OAuth2Credentials) else None,\n            username=cred.username if isinstance(cred, OAuth2Credentials) else None,\n        )\n        for cred in credentials\n    ]",
          "children": [
            {
              "value": "list_credentials_by_provider",
              "children": []
            },
            {
              "value": "(\n    provider: Annotated[\n        ProviderName, Path(title=\"The provider to list credentials for\")\n    ],\n    user_id: Annotated[str, Depends(get_user_id)],\n)",
              "children": [
                {
                  "value": "provider: Annotated[\n        ProviderName, Path(title=\"The provider to list credentials for\")\n    ]",
                  "children": [
                    {
                      "value": "provider",
                      "children": []
                    },
                    {
                      "value": "Annotated[\n        ProviderName, Path(title=\"The provider to list credentials for\")\n    ]",
                      "children": [
                        {
                          "value": "Annotated[\n        ProviderName, Path(title=\"The provider to list credentials for\")\n    ]",
                          "children": [
                            {
                              "value": "Annotated",
                              "children": []
                            },
                            {
                              "value": "[\n        ProviderName, Path(title=\"The provider to list credentials for\")\n    ]",
                              "children": [
                                {
                                  "value": "ProviderName",
                                  "children": [
                                    {
                                      "value": "ProviderName",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "Path(title=\"The provider to list credentials for\")",
                                  "children": [
                                    {
                                      "value": "Path(title=\"The provider to list credentials for\")",
                                      "children": [
                                        {
                                          "value": "Path",
                                          "children": []
                                        },
                                        {
                                          "value": "(title=\"The provider to list credentials for\")",
                                          "children": [
                                            {
                                              "value": "title=\"The provider to list credentials for\"",
                                              "children": [
                                                {
                                                  "value": "title",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"The provider to list credentials for\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "The provider to list credentials for",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "user_id: Annotated[str, Depends(get_user_id)]",
                  "children": [
                    {
                      "value": "user_id",
                      "children": []
                    },
                    {
                      "value": "Annotated[str, Depends(get_user_id)]",
                      "children": [
                        {
                          "value": "Annotated[str, Depends(get_user_id)]",
                          "children": [
                            {
                              "value": "Annotated",
                              "children": []
                            },
                            {
                              "value": "[str, Depends(get_user_id)]",
                              "children": [
                                {
                                  "value": "str",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "Depends(get_user_id)",
                                  "children": [
                                    {
                                      "value": "Depends(get_user_id)",
                                      "children": [
                                        {
                                          "value": "Depends",
                                          "children": []
                                        },
                                        {
                                          "value": "(get_user_id)",
                                          "children": [
                                            {
                                              "value": "get_user_id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "list[CredentialsMetaResponse]",
              "children": [
                {
                  "value": "list[CredentialsMetaResponse]",
                  "children": [
                    {
                      "value": "list",
                      "children": []
                    },
                    {
                      "value": "[CredentialsMetaResponse]",
                      "children": [
                        {
                          "value": "CredentialsMetaResponse",
                          "children": [
                            {
                              "value": "CredentialsMetaResponse",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "credentials = creds_manager.store.get_creds_by_provider(user_id, provider)\n    return [\n        CredentialsMetaResponse(\n            id=cred.id,\n            provider=cred.provider,\n            type=cred.type,\n            title=cred.title,\n            scopes=cred.scopes if isinstance(cred, OAuth2Credentials) else None,\n            username=cred.username if isinstance(cred, OAuth2Credentials) else None,\n        )\n        for cred in credentials\n    ]",
              "children": [
                {
                  "value": "credentials = creds_manager.store.get_creds_by_provider(user_id, provider)",
                  "children": [
                    {
                      "value": "credentials = creds_manager.store.get_creds_by_provider(user_id, provider)",
                      "children": [
                        {
                          "value": "credentials",
                          "children": []
                        },
                        {
                          "value": "creds_manager.store.get_creds_by_provider(user_id, provider)",
                          "children": [
                            {
                              "value": "creds_manager.store.get_creds_by_provider",
                              "children": [
                                {
                                  "value": "creds_manager.store",
                                  "children": [
                                    {
                                      "value": "creds_manager",
                                      "children": []
                                    },
                                    {
                                      "value": "store",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "get_creds_by_provider",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(user_id, provider)",
                              "children": [
                                {
                                  "value": "user_id",
                                  "children": []
                                },
                                {
                                  "value": "provider",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "return [\n        CredentialsMetaResponse(\n            id=cred.id,\n            provider=cred.provider,\n            type=cred.type,\n            title=cred.title,\n            scopes=cred.scopes if isinstance(cred, OAuth2Credentials) else None,\n            username=cred.username if isinstance(cred, OAuth2Credentials) else None,\n        )\n        for cred in credentials\n    ]",
                  "children": [
                    {
                      "value": "[\n        CredentialsMetaResponse(\n            id=cred.id,\n            provider=cred.provider,\n            type=cred.type,\n            title=cred.title,\n            scopes=cred.scopes if isinstance(cred, OAuth2Credentials) else None,\n            username=cred.username if isinstance(cred, OAuth2Credentials) else None,\n        )\n        for cred in credentials\n    ]",
                      "children": [
                        {
                          "value": "CredentialsMetaResponse(\n            id=cred.id,\n            provider=cred.provider,\n            type=cred.type,\n            title=cred.title,\n            scopes=cred.scopes if isinstance(cred, OAuth2Credentials) else None,\n            username=cred.username if isinstance(cred, OAuth2Credentials) else None,\n        )",
                          "children": [
                            {
                              "value": "CredentialsMetaResponse",
                              "children": []
                            },
                            {
                              "value": "(\n            id=cred.id,\n            provider=cred.provider,\n            type=cred.type,\n            title=cred.title,\n            scopes=cred.scopes if isinstance(cred, OAuth2Credentials) else None,\n            username=cred.username if isinstance(cred, OAuth2Credentials) else None,\n        )",
                              "children": [
                                {
                                  "value": "id=cred.id",
                                  "children": [
                                    {
                                      "value": "id",
                                      "children": []
                                    },
                                    {
                                      "value": "cred.id",
                                      "children": [
                                        {
                                          "value": "cred",
                                          "children": []
                                        },
                                        {
                                          "value": "id",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "provider=cred.provider",
                                  "children": [
                                    {
                                      "value": "provider",
                                      "children": []
                                    },
                                    {
                                      "value": "cred.provider",
                                      "children": [
                                        {
                                          "value": "cred",
                                          "children": []
                                        },
                                        {
                                          "value": "provider",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "type=cred.type",
                                  "children": [
                                    {
                                      "value": "type",
                                      "children": []
                                    },
                                    {
                                      "value": "cred.type",
                                      "children": [
                                        {
                                          "value": "cred",
                                          "children": []
                                        },
                                        {
                                          "value": "type",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "title=cred.title",
                                  "children": [
                                    {
                                      "value": "title",
                                      "children": []
                                    },
                                    {
                                      "value": "cred.title",
                                      "children": [
                                        {
                                          "value": "cred",
                                          "children": []
                                        },
                                        {
                                          "value": "title",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "scopes=cred.scopes if isinstance(cred, OAuth2Credentials) else None",
                                  "children": [
                                    {
                                      "value": "scopes",
                                      "children": []
                                    },
                                    {
                                      "value": "cred.scopes if isinstance(cred, OAuth2Credentials) else None",
                                      "children": [
                                        {
                                          "value": "cred.scopes",
                                          "children": [
                                            {
                                              "value": "cred",
                                              "children": []
                                            },
                                            {
                                              "value": "scopes",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "isinstance(cred, OAuth2Credentials)",
                                          "children": [
                                            {
                                              "value": "isinstance",
                                              "children": []
                                            },
                                            {
                                              "value": "(cred, OAuth2Credentials)",
                                              "children": [
                                                {
                                                  "value": "cred",
                                                  "children": []
                                                },
                                                {
                                                  "value": "OAuth2Credentials",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "None",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "username=cred.username if isinstance(cred, OAuth2Credentials) else None",
                                  "children": [
                                    {
                                      "value": "username",
                                      "children": []
                                    },
                                    {
                                      "value": "cred.username if isinstance(cred, OAuth2Credentials) else None",
                                      "children": [
                                        {
                                          "value": "cred.username",
                                          "children": [
                                            {
                                              "value": "cred",
                                              "children": []
                                            },
                                            {
                                              "value": "username",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "isinstance(cred, OAuth2Credentials)",
                                          "children": [
                                            {
                                              "value": "isinstance",
                                              "children": []
                                            },
                                            {
                                              "value": "(cred, OAuth2Credentials)",
                                              "children": [
                                                {
                                                  "value": "cred",
                                                  "children": []
                                                },
                                                {
                                                  "value": "OAuth2Credentials",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "None",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "for cred in credentials",
                          "children": [
                            {
                              "value": "cred",
                              "children": []
                            },
                            {
                              "value": "credentials",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "@router.get(\"/{provider}/credentials/{cred_id}\")\ndef get_credential(\n    provider: Annotated[\n        ProviderName, Path(title=\"The provider to retrieve credentials for\")\n    ],\n    cred_id: Annotated[str, Path(title=\"The ID of the credentials to retrieve\")],\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> Credentials:\n    credential = creds_manager.get(user_id, cred_id)\n    if not credential:\n        raise HTTPException(status_code=404, detail=\"Credentials not found\")\n    if credential.provider != provider:\n        raise HTTPException(\n            status_code=404, detail=\"Credentials do not match the specified provider\"\n        )\n    return credential",
      "children": [
        {
          "value": "@router.get(\"/{provider}/credentials/{cred_id}\")",
          "children": [
            {
              "value": "router.get(\"/{provider}/credentials/{cred_id}\")",
              "children": [
                {
                  "value": "router.get",
                  "children": [
                    {
                      "value": "router",
                      "children": []
                    },
                    {
                      "value": "get",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(\"/{provider}/credentials/{cred_id}\")",
                  "children": [
                    {
                      "value": "\"/{provider}/credentials/{cred_id}\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "/{provider}/credentials/{cred_id}",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "def get_credential(\n    provider: Annotated[\n        ProviderName, Path(title=\"The provider to retrieve credentials for\")\n    ],\n    cred_id: Annotated[str, Path(title=\"The ID of the credentials to retrieve\")],\n    user_id: Annotated[str, Depends(get_user_id)],\n) -> Credentials:\n    credential = creds_manager.get(user_id, cred_id)\n    if not credential:\n        raise HTTPException(status_code=404, detail=\"Credentials not found\")\n    if credential.provider != provider:\n        raise HTTPException(\n            status_code=404, detail=\"Credentials do not match the specified provider\"\n        )\n    return credential",
          "children": [
            {
              "value": "get_credential",
              "children": []
            },
            {
              "value": "(\n    provider: Annotated[\n        ProviderName, Path(title=\"The provider to retrieve credentials for\")\n    ],\n    cred_id: Annotated[str, Path(title=\"The ID of the credentials to retrieve\")],\n    user_id: Annotated[str, Depends(get_user_id)],\n)",
              "children": [
                {
                  "value": "provider: Annotated[\n        ProviderName, Path(title=\"The provider to retrieve credentials for\")\n    ]",
                  "children": [
                    {
                      "value": "provider",
                      "children": []
                    },
                    {
                      "value": "Annotated[\n        ProviderName, Path(title=\"The provider to retrieve credentials for\")\n    ]",
                      "children": [
                        {
                          "value": "Annotated[\n        ProviderName, Path(title=\"The provider to retrieve credentials for\")\n    ]",
                          "children": [
                            {
                              "value": "Annotated",
                              "children": []
                            },
                            {
                              "value": "[\n        ProviderName, Path(title=\"The provider to retrieve credentials for\")\n    ]",
                              "children": [
                                {
                                  "value": "ProviderName",
                                  "children": [
                                    {
                                      "value": "ProviderName",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "Path(title=\"The provider to retrieve credentials for\")",
                                  "children": [
                                    {
                                      "value": "Path(title=\"The provider to retrieve credentials for\")",
                                      "children": [
                                        {
                                          "value": "Path",
                                          "children": []
                                        },
                                        {
                                          "value": "(title=\"The provider to retrieve credentials for\")",
                                          "children": [
                                            {
                                              "value": "title=\"The provider to retrieve credentials for\"",
                                              "children": [
                                                {
                                                  "value": "title",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"The provider to retrieve credentials for\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "The provider to retrieve credentials for",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "cred_id: Annotated[str, Path(title=\"The ID of the credentials to retrieve\")]",
                  "children": [
                    {
                      "value": "cred_id",
                      "children": []
                    },
                    {
                      "value": "Annotated[str, Path(title=\"The ID of the credentials to retrieve\")]",
                      "children": [
                        {
                          "value": "Annotated[str, Path(title=\"The ID of the credentials to retrieve\")]",
                          "children": [
                            {
                              "value": "Annotated",
                              "children": []
                            },
                            {
                              "value": "[str, Path(title=\"The ID of the credentials to retrieve\")]",
                              "children": [
                                {
                                  "value": "str",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "Path(title=\"The ID of the credentials to retrieve\")",
                                  "children": [
                                    {
                                      "value": "Path(title=\"The ID of the credentials to retrieve\")",
                                      "children": [
                                        {
                                          "value": "Path",
                                          "children": []
                                        },
                                        {
                                          "value": "(title=\"The ID of the credentials to retrieve\")",
                                          "children": [
                                            {
                                              "value": "title=\"The ID of the credentials to retrieve\"",
                                              "children": [
                                                {
                                                  "value": "title",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"The ID of the credentials to retrieve\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "The ID of the credentials to retrieve",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "user_id: Annotated[str, Depends(get_user_id)]",
                  "children": [
                    {
                      "value": "user_id",
                      "children": []
                    },
                    {
                      "value": "Annotated[str, Depends(get_user_id)]",
                      "children": [
                        {
                          "value": "Annotated[str, Depends(get_user_id)]",
                          "children": [
                            {
                              "value": "Annotated",
                              "children": []
                            },
                            {
                              "value": "[str, Depends(get_user_id)]",
                              "children": [
                                {
                                  "value": "str",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "Depends(get_user_id)",
                                  "children": [
                                    {
                                      "value": "Depends(get_user_id)",
                                      "children": [
                                        {
                                          "value": "Depends",
                                          "children": []
                                        },
                                        {
                                          "value": "(get_user_id)",
                                          "children": [
                                            {
                                              "value": "get_user_id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "Credentials",
              "children": [
                {
                  "value": "Credentials",
                  "children": []
                }
              ]
            },
            {
              "value": "credential = creds_manager.get(user_id, cred_id)\n    if not credential:\n        raise HTTPException(status_code=404, detail=\"Credentials not found\")\n    if credential.provider != provider:\n        raise HTTPException(\n            status_code=404, detail=\"Credentials do not match the specified provider\"\n        )\n    return credential",
              "children": [
                {
                  "value": "credential = creds_manager.get(user_id, cred_id)",
                  "children": [
                    {
                      "value": "credential = creds_manager.get(user_id, cred_id)",
                      "children": [
                        {
                          "value": "credential",
                          "children": []
                        },
                        {
                          "value": "creds_manager.get(user_id, cred_id)",
                          "children": [
                            {
                              "value": "creds_manager.get",
                              "children": [
                                {
                                  "value": "creds_manager",
                                  "children": []
                                },
                                {
                                  "value": "get",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(user_id, cred_id)",
                              "children": [
                                {
                                  "value": "user_id",
                                  "children": []
                                },
                                {
                                  "value": "cred_id",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "if not credential:\n        raise HTTPException(status_code=404, detail=\"Credentials not found\")",
                  "children": [
                    {
                      "value": "not credential",
                      "children": [
                        {
                          "value": "credential",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "raise HTTPException(status_code=404, detail=\"Credentials not found\")",
                      "children": [
                        {
                          "value": "raise HTTPException(status_code=404, detail=\"Credentials not found\")",
                          "children": [
                            {
                              "value": "HTTPException(status_code=404, detail=\"Credentials not found\")",
                              "children": [
                                {
                                  "value": "HTTPException",
                                  "children": []
                                },
                                {
                                  "value": "(status_code=404, detail=\"Credentials not found\")",
                                  "children": [
                                    {
                                      "value": "status_code=404",
                                      "children": [
                                        {
                                          "value": "status_code",
                                          "children": []
                                        },
                                        {
                                          "value": "404",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "detail=\"Credentials not found\"",
                                      "children": [
                                        {
                                          "value": "detail",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Credentials not found\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Credentials not found",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "if credential.provider != provider:\n        raise HTTPException(\n            status_code=404, detail=\"Credentials do not match the specified provider\"\n        )",
                  "children": [
                    {
                      "value": "credential.provider != provider",
                      "children": [
                        {
                          "value": "credential.provider",
                          "children": [
                            {
                              "value": "credential",
                              "children": []
                            },
                            {
                              "value": "provider",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "provider",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "raise HTTPException(\n            status_code=404, detail=\"Credentials do not match the specified provider\"\n        )",
                      "children": [
                        {
                          "value": "raise HTTPException(\n            status_code=404, detail=\"Credentials do not match the specified provider\"\n        )",
                          "children": [
                            {
                              "value": "HTTPException(\n            status_code=404, detail=\"Credentials do not match the specified provider\"\n        )",
                              "children": [
                                {
                                  "value": "HTTPException",
                                  "children": []
                                },
                                {
                                  "value": "(\n            status_code=404, detail=\"Credentials do not match the specified provider\"\n        )",
                                  "children": [
                                    {
                                      "value": "status_code=404",
                                      "children": [
                                        {
                                          "value": "status_code",
                                          "children": []
                                        },
                                        {
                                          "value": "404",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "detail=\"Credentials do not match the specified provider\"",
                                      "children": [
                                        {
                                          "value": "detail",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Credentials do not match the specified provider\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Credentials do not match the specified provider",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "return credential",
                  "children": [
                    {
                      "value": "credential",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "@router.post(\"/{provider}/credentials\", status_code=201)\ndef create_api_key_credentials(\n    user_id: Annotated[str, Depends(get_user_id)],\n    provider: Annotated[\n        ProviderName, Path(title=\"The provider to create credentials for\")\n    ],\n    api_key: Annotated[str, Body(title=\"The API key to store\")],\n    title: Annotated[str, Body(title=\"Optional title for the credentials\")],\n    expires_at: Annotated[\n        int | None, Body(title=\"Unix timestamp when the key expires\")\n    ] = None,\n) -> APIKeyCredentials:\n    new_credentials = APIKeyCredentials(\n        provider=provider,\n        api_key=SecretStr(api_key),\n        title=title,\n        expires_at=expires_at,\n    )\n\n    try:\n        creds_manager.create(user_id, new_credentials)\n    except Exception as e:\n        raise HTTPException(\n            status_code=500, detail=f\"Failed to store credentials: {str(e)}\"\n        )\n    return new_credentials",
      "children": [
        {
          "value": "@router.post(\"/{provider}/credentials\", status_code=201)",
          "children": [
            {
              "value": "router.post(\"/{provider}/credentials\", status_code=201)",
              "children": [
                {
                  "value": "router.post",
                  "children": [
                    {
                      "value": "router",
                      "children": []
                    },
                    {
                      "value": "post",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(\"/{provider}/credentials\", status_code=201)",
                  "children": [
                    {
                      "value": "\"/{provider}/credentials\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "/{provider}/credentials",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "status_code=201",
                      "children": [
                        {
                          "value": "status_code",
                          "children": []
                        },
                        {
                          "value": "201",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "def create_api_key_credentials(\n    user_id: Annotated[str, Depends(get_user_id)],\n    provider: Annotated[\n        ProviderName, Path(title=\"The provider to create credentials for\")\n    ],\n    api_key: Annotated[str, Body(title=\"The API key to store\")],\n    title: Annotated[str, Body(title=\"Optional title for the credentials\")],\n    expires_at: Annotated[\n        int | None, Body(title=\"Unix timestamp when the key expires\")\n    ] = None,\n) -> APIKeyCredentials:\n    new_credentials = APIKeyCredentials(\n        provider=provider,\n        api_key=SecretStr(api_key),\n        title=title,\n        expires_at=expires_at,\n    )\n\n    try:\n        creds_manager.create(user_id, new_credentials)\n    except Exception as e:\n        raise HTTPException(\n            status_code=500, detail=f\"Failed to store credentials: {str(e)}\"\n        )\n    return new_credentials",
          "children": [
            {
              "value": "create_api_key_credentials",
              "children": []
            },
            {
              "value": "(\n    user_id: Annotated[str, Depends(get_user_id)],\n    provider: Annotated[\n        ProviderName, Path(title=\"The provider to create credentials for\")\n    ],\n    api_key: Annotated[str, Body(title=\"The API key to store\")],\n    title: Annotated[str, Body(title=\"Optional title for the credentials\")],\n    expires_at: Annotated[\n        int | None, Body(title=\"Unix timestamp when the key expires\")\n    ] = None,\n)",
              "children": [
                {
                  "value": "user_id: Annotated[str, Depends(get_user_id)]",
                  "children": [
                    {
                      "value": "user_id",
                      "children": []
                    },
                    {
                      "value": "Annotated[str, Depends(get_user_id)]",
                      "children": [
                        {
                          "value": "Annotated[str, Depends(get_user_id)]",
                          "children": [
                            {
                              "value": "Annotated",
                              "children": []
                            },
                            {
                              "value": "[str, Depends(get_user_id)]",
                              "children": [
                                {
                                  "value": "str",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "Depends(get_user_id)",
                                  "children": [
                                    {
                                      "value": "Depends(get_user_id)",
                                      "children": [
                                        {
                                          "value": "Depends",
                                          "children": []
                                        },
                                        {
                                          "value": "(get_user_id)",
                                          "children": [
                                            {
                                              "value": "get_user_id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "provider: Annotated[\n        ProviderName, Path(title=\"The provider to create credentials for\")\n    ]",
                  "children": [
                    {
                      "value": "provider",
                      "children": []
                    },
                    {
                      "value": "Annotated[\n        ProviderName, Path(title=\"The provider to create credentials for\")\n    ]",
                      "children": [
                        {
                          "value": "Annotated[\n        ProviderName, Path(title=\"The provider to create credentials for\")\n    ]",
                          "children": [
                            {
                              "value": "Annotated",
                              "children": []
                            },
                            {
                              "value": "[\n        ProviderName, Path(title=\"The provider to create credentials for\")\n    ]",
                              "children": [
                                {
                                  "value": "ProviderName",
                                  "children": [
                                    {
                                      "value": "ProviderName",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "Path(title=\"The provider to create credentials for\")",
                                  "children": [
                                    {
                                      "value": "Path(title=\"The provider to create credentials for\")",
                                      "children": [
                                        {
                                          "value": "Path",
                                          "children": []
                                        },
                                        {
                                          "value": "(title=\"The provider to create credentials for\")",
                                          "children": [
                                            {
                                              "value": "title=\"The provider to create credentials for\"",
                                              "children": [
                                                {
                                                  "value": "title",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"The provider to create credentials for\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "The provider to create credentials for",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "api_key: Annotated[str, Body(title=\"The API key to store\")]",
                  "children": [
                    {
                      "value": "api_key",
                      "children": []
                    },
                    {
                      "value": "Annotated[str, Body(title=\"The API key to store\")]",
                      "children": [
                        {
                          "value": "Annotated[str, Body(title=\"The API key to store\")]",
                          "children": [
                            {
                              "value": "Annotated",
                              "children": []
                            },
                            {
                              "value": "[str, Body(title=\"The API key to store\")]",
                              "children": [
                                {
                                  "value": "str",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "Body(title=\"The API key to store\")",
                                  "children": [
                                    {
                                      "value": "Body(title=\"The API key to store\")",
                                      "children": [
                                        {
                                          "value": "Body",
                                          "children": []
                                        },
                                        {
                                          "value": "(title=\"The API key to store\")",
                                          "children": [
                                            {
                                              "value": "title=\"The API key to store\"",
                                              "children": [
                                                {
                                                  "value": "title",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"The API key to store\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "The API key to store",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "title: Annotated[str, Body(title=\"Optional title for the credentials\")]",
                  "children": [
                    {
                      "value": "title",
                      "children": []
                    },
                    {
                      "value": "Annotated[str, Body(title=\"Optional title for the credentials\")]",
                      "children": [
                        {
                          "value": "Annotated[str, Body(title=\"Optional title for the credentials\")]",
                          "children": [
                            {
                              "value": "Annotated",
                              "children": []
                            },
                            {
                              "value": "[str, Body(title=\"Optional title for the credentials\")]",
                              "children": [
                                {
                                  "value": "str",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "Body(title=\"Optional title for the credentials\")",
                                  "children": [
                                    {
                                      "value": "Body(title=\"Optional title for the credentials\")",
                                      "children": [
                                        {
                                          "value": "Body",
                                          "children": []
                                        },
                                        {
                                          "value": "(title=\"Optional title for the credentials\")",
                                          "children": [
                                            {
                                              "value": "title=\"Optional title for the credentials\"",
                                              "children": [
                                                {
                                                  "value": "title",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"Optional title for the credentials\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "Optional title for the credentials",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "expires_at: Annotated[\n        int | None, Body(title=\"Unix timestamp when the key expires\")\n    ] = None",
                  "children": [
                    {
                      "value": "expires_at",
                      "children": []
                    },
                    {
                      "value": "Annotated[\n        int | None, Body(title=\"Unix timestamp when the key expires\")\n    ]",
                      "children": [
                        {
                          "value": "Annotated[\n        int | None, Body(title=\"Unix timestamp when the key expires\")\n    ]",
                          "children": [
                            {
                              "value": "Annotated",
                              "children": []
                            },
                            {
                              "value": "[\n        int | None, Body(title=\"Unix timestamp when the key expires\")\n    ]",
                              "children": [
                                {
                                  "value": "int | None",
                                  "children": [
                                    {
                                      "value": "int | None",
                                      "children": [
                                        {
                                          "value": "int",
                                          "children": []
                                        },
                                        {
                                          "value": "None",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "Body(title=\"Unix timestamp when the key expires\")",
                                  "children": [
                                    {
                                      "value": "Body(title=\"Unix timestamp when the key expires\")",
                                      "children": [
                                        {
                                          "value": "Body",
                                          "children": []
                                        },
                                        {
                                          "value": "(title=\"Unix timestamp when the key expires\")",
                                          "children": [
                                            {
                                              "value": "title=\"Unix timestamp when the key expires\"",
                                              "children": [
                                                {
                                                  "value": "title",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"Unix timestamp when the key expires\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "Unix timestamp when the key expires",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "None",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "APIKeyCredentials",
              "children": [
                {
                  "value": "APIKeyCredentials",
                  "children": []
                }
              ]
            },
            {
              "value": "new_credentials = APIKeyCredentials(\n        provider=provider,\n        api_key=SecretStr(api_key),\n        title=title,\n        expires_at=expires_at,\n    )\n\n    try:\n        creds_manager.create(user_id, new_credentials)\n    except Exception as e:\n        raise HTTPException(\n            status_code=500, detail=f\"Failed to store credentials: {str(e)}\"\n        )\n    return new_credentials",
              "children": [
                {
                  "value": "new_credentials = APIKeyCredentials(\n        provider=provider,\n        api_key=SecretStr(api_key),\n        title=title,\n        expires_at=expires_at,\n    )",
                  "children": [
                    {
                      "value": "new_credentials = APIKeyCredentials(\n        provider=provider,\n        api_key=SecretStr(api_key),\n        title=title,\n        expires_at=expires_at,\n    )",
                      "children": [
                        {
                          "value": "new_credentials",
                          "children": []
                        },
                        {
                          "value": "APIKeyCredentials(\n        provider=provider,\n        api_key=SecretStr(api_key),\n        title=title,\n        expires_at=expires_at,\n    )",
                          "children": [
                            {
                              "value": "APIKeyCredentials",
                              "children": []
                            },
                            {
                              "value": "(\n        provider=provider,\n        api_key=SecretStr(api_key),\n        title=title,\n        expires_at=expires_at,\n    )",
                              "children": [
                                {
                                  "value": "provider=provider",
                                  "children": [
                                    {
                                      "value": "provider",
                                      "children": []
                                    },
                                    {
                                      "value": "provider",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "api_key=SecretStr(api_key)",
                                  "children": [
                                    {
                                      "value": "api_key",
                                      "children": []
                                    },
                                    {
                                      "value": "SecretStr(api_key)",
                                      "children": [
                                        {
                                          "value": "SecretStr",
                                          "children": []
                                        },
                                        {
                                          "value": "(api_key)",
                                          "children": [
                                            {
                                              "value": "api_key",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "title=title",
                                  "children": [
                                    {
                                      "value": "title",
                                      "children": []
                                    },
                                    {
                                      "value": "title",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "expires_at=expires_at",
                                  "children": [
                                    {
                                      "value": "expires_at",
                                      "children": []
                                    },
                                    {
                                      "value": "expires_at",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "try:\n        creds_manager.create(user_id, new_credentials)\n    except Exception as e:\n        raise HTTPException(\n            status_code=500, detail=f\"Failed to store credentials: {str(e)}\"\n        )",
                  "children": [
                    {
                      "value": "creds_manager.create(user_id, new_credentials)",
                      "children": [
                        {
                          "value": "creds_manager.create(user_id, new_credentials)",
                          "children": [
                            {
                              "value": "creds_manager.create(user_id, new_credentials)",
                              "children": [
                                {
                                  "value": "creds_manager.create",
                                  "children": [
                                    {
                                      "value": "creds_manager",
                                      "children": []
                                    },
                                    {
                                      "value": "create",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(user_id, new_credentials)",
                                  "children": [
                                    {
                                      "value": "user_id",
                                      "children": []
                                    },
                                    {
                                      "value": "new_credentials",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "except Exception as e:\n        raise HTTPException(\n            status_code=500, detail=f\"Failed to store credentials: {str(e)}\"\n        )",
                      "children": [
                        {
                          "value": "Exception as e",
                          "children": [
                            {
                              "value": "Exception",
                              "children": []
                            },
                            {
                              "value": "e",
                              "children": [
                                {
                                  "value": "e",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "raise HTTPException(\n            status_code=500, detail=f\"Failed to store credentials: {str(e)}\"\n        )",
                          "children": [
                            {
                              "value": "raise HTTPException(\n            status_code=500, detail=f\"Failed to store credentials: {str(e)}\"\n        )",
                              "children": [
                                {
                                  "value": "HTTPException(\n            status_code=500, detail=f\"Failed to store credentials: {str(e)}\"\n        )",
                                  "children": [
                                    {
                                      "value": "HTTPException",
                                      "children": []
                                    },
                                    {
                                      "value": "(\n            status_code=500, detail=f\"Failed to store credentials: {str(e)}\"\n        )",
                                      "children": [
                                        {
                                          "value": "status_code=500",
                                          "children": [
                                            {
                                              "value": "status_code",
                                              "children": []
                                            },
                                            {
                                              "value": "500",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "detail=f\"Failed to store credentials: {str(e)}\"",
                                          "children": [
                                            {
                                              "value": "detail",
                                              "children": []
                                            },
                                            {
                                              "value": "f\"Failed to store credentials: {str(e)}\"",
                                              "children": [
                                                {
                                                  "value": "f\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "Failed to store credentials:",
                                                  "children": []
                                                },
                                                {
                                                  "value": "{str(e)}",
                                                  "children": [
                                                    {
                                                      "value": "str(e)",
                                                      "children": [
                                                        {
                                                          "value": "str",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "(e)",
                                                          "children": [
                                                            {
                                                              "value": "e",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "return new_credentials",
                  "children": [
                    {
                      "value": "new_credentials",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class CredentialsDeletionResponse(BaseModel):\n    deleted: Literal[True] = True\n    revoked: bool | None = Field(\n        description=\"Indicates whether the credentials were also revoked by their \"\n        \"provider. `None`/`null` if not applicable, e.g. when deleting \"\n        \"non-revocable credentials such as API keys.\"\n    )",
      "children": [
        {
          "value": "CredentialsDeletionResponse",
          "children": []
        },
        {
          "value": "(BaseModel)",
          "children": [
            {
              "value": "BaseModel",
              "children": []
            }
          ]
        },
        {
          "value": "deleted: Literal[True] = True\n    revoked: bool | None = Field(\n        description=\"Indicates whether the credentials were also revoked by their \"\n        \"provider. `None`/`null` if not applicable, e.g. when deleting \"\n        \"non-revocable credentials such as API keys.\"\n    )",
          "children": [
            {
              "value": "deleted: Literal[True] = True",
              "children": [
                {
                  "value": "deleted: Literal[True] = True",
                  "children": [
                    {
                      "value": "deleted",
                      "children": []
                    },
                    {
                      "value": "Literal[True]",
                      "children": [
                        {
                          "value": "Literal[True]",
                          "children": [
                            {
                              "value": "Literal",
                              "children": []
                            },
                            {
                              "value": "[True]",
                              "children": [
                                {
                                  "value": "True",
                                  "children": [
                                    {
                                      "value": "True",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "True",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "revoked: bool | None = Field(\n        description=\"Indicates whether the credentials were also revoked by their \"\n        \"provider. `None`/`null` if not applicable, e.g. when deleting \"\n        \"non-revocable credentials such as API keys.\"\n    )",
              "children": [
                {
                  "value": "revoked: bool | None = Field(\n        description=\"Indicates whether the credentials were also revoked by their \"\n        \"provider. `None`/`null` if not applicable, e.g. when deleting \"\n        \"non-revocable credentials such as API keys.\"\n    )",
                  "children": [
                    {
                      "value": "revoked",
                      "children": []
                    },
                    {
                      "value": "bool | None",
                      "children": [
                        {
                          "value": "bool | None",
                          "children": [
                            {
                              "value": "bool",
                              "children": []
                            },
                            {
                              "value": "None",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "Field(\n        description=\"Indicates whether the credentials were also revoked by their \"\n        \"provider. `None`/`null` if not applicable, e.g. when deleting \"\n        \"non-revocable credentials such as API keys.\"\n    )",
                      "children": [
                        {
                          "value": "Field",
                          "children": []
                        },
                        {
                          "value": "(\n        description=\"Indicates whether the credentials were also revoked by their \"\n        \"provider. `None`/`null` if not applicable, e.g. when deleting \"\n        \"non-revocable credentials such as API keys.\"\n    )",
                          "children": [
                            {
                              "value": "description=\"Indicates whether the credentials were also revoked by their \"\n        \"provider. `None`/`null` if not applicable, e.g. when deleting \"\n        \"non-revocable credentials such as API keys.\"",
                              "children": [
                                {
                                  "value": "description",
                                  "children": []
                                },
                                {
                                  "value": "\"Indicates whether the credentials were also revoked by their \"\n        \"provider. `None`/`null` if not applicable, e.g. when deleting \"\n        \"non-revocable credentials such as API keys.\"",
                                  "children": [
                                    {
                                      "value": "\"Indicates whether the credentials were also revoked by their \"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Indicates whether the credentials were also revoked by their",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "\"provider. `None`/`null` if not applicable, e.g. when deleting \"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "provider. `None`/`null` if not applicable, e.g. when deleting",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "\"non-revocable credentials such as API keys.\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "non-revocable credentials such as API keys.",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class CredentialsDeletionNeedsConfirmationResponse(BaseModel):\n    deleted: Literal[False] = False\n    need_confirmation: Literal[True] = True\n    message: str",
      "children": [
        {
          "value": "CredentialsDeletionNeedsConfirmationResponse",
          "children": []
        },
        {
          "value": "(BaseModel)",
          "children": [
            {
              "value": "BaseModel",
              "children": []
            }
          ]
        },
        {
          "value": "deleted: Literal[False] = False\n    need_confirmation: Literal[True] = True\n    message: str",
          "children": [
            {
              "value": "deleted: Literal[False] = False",
              "children": [
                {
                  "value": "deleted: Literal[False] = False",
                  "children": [
                    {
                      "value": "deleted",
                      "children": []
                    },
                    {
                      "value": "Literal[False]",
                      "children": [
                        {
                          "value": "Literal[False]",
                          "children": [
                            {
                              "value": "Literal",
                              "children": []
                            },
                            {
                              "value": "[False]",
                              "children": [
                                {
                                  "value": "False",
                                  "children": [
                                    {
                                      "value": "False",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "False",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "need_confirmation: Literal[True] = True",
              "children": [
                {
                  "value": "need_confirmation: Literal[True] = True",
                  "children": [
                    {
                      "value": "need_confirmation",
                      "children": []
                    },
                    {
                      "value": "Literal[True]",
                      "children": [
                        {
                          "value": "Literal[True]",
                          "children": [
                            {
                              "value": "Literal",
                              "children": []
                            },
                            {
                              "value": "[True]",
                              "children": [
                                {
                                  "value": "True",
                                  "children": [
                                    {
                                      "value": "True",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "True",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "message: str",
              "children": [
                {
                  "value": "message: str",
                  "children": [
                    {
                      "value": "message",
                      "children": []
                    },
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "@router.delete(\"/{provider}/credentials/{cred_id}\")\nasync def delete_credentials(\n    request: Request,\n    provider: Annotated[\n        ProviderName, Path(title=\"The provider to delete credentials for\")\n    ],\n    cred_id: Annotated[str, Path(title=\"The ID of the credentials to delete\")],\n    user_id: Annotated[str, Depends(get_user_id)],\n    force: Annotated[\n        bool, Query(title=\"Whether to proceed if any linked webhooks are still in use\")\n    ] = False,\n) -> CredentialsDeletionResponse | CredentialsDeletionNeedsConfirmationResponse:\n    creds = creds_manager.store.get_creds_by_id(user_id, cred_id)\n    if not creds:\n        raise HTTPException(status_code=404, detail=\"Credentials not found\")\n    if creds.provider != provider:\n        raise HTTPException(\n            status_code=404, detail=\"Credentials do not match the specified provider\"\n        )\n\n    try:\n        await remove_all_webhooks_for_credentials(creds, force)\n    except NeedConfirmation as e:\n        return CredentialsDeletionNeedsConfirmationResponse(message=str(e))\n\n    creds_manager.delete(user_id, cred_id)\n\n    tokens_revoked = None\n    if isinstance(creds, OAuth2Credentials):\n        handler = _get_provider_oauth_handler(request, provider)\n        tokens_revoked = handler.revoke_tokens(creds)\n\n    return CredentialsDeletionResponse(revoked=tokens_revoked)",
      "children": [
        {
          "value": "@router.delete(\"/{provider}/credentials/{cred_id}\")",
          "children": [
            {
              "value": "router.delete(\"/{provider}/credentials/{cred_id}\")",
              "children": [
                {
                  "value": "router.delete",
                  "children": [
                    {
                      "value": "router",
                      "children": []
                    },
                    {
                      "value": "delete",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(\"/{provider}/credentials/{cred_id}\")",
                  "children": [
                    {
                      "value": "\"/{provider}/credentials/{cred_id}\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "/{provider}/credentials/{cred_id}",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "async def delete_credentials(\n    request: Request,\n    provider: Annotated[\n        ProviderName, Path(title=\"The provider to delete credentials for\")\n    ],\n    cred_id: Annotated[str, Path(title=\"The ID of the credentials to delete\")],\n    user_id: Annotated[str, Depends(get_user_id)],\n    force: Annotated[\n        bool, Query(title=\"Whether to proceed if any linked webhooks are still in use\")\n    ] = False,\n) -> CredentialsDeletionResponse | CredentialsDeletionNeedsConfirmationResponse:\n    creds = creds_manager.store.get_creds_by_id(user_id, cred_id)\n    if not creds:\n        raise HTTPException(status_code=404, detail=\"Credentials not found\")\n    if creds.provider != provider:\n        raise HTTPException(\n            status_code=404, detail=\"Credentials do not match the specified provider\"\n        )\n\n    try:\n        await remove_all_webhooks_for_credentials(creds, force)\n    except NeedConfirmation as e:\n        return CredentialsDeletionNeedsConfirmationResponse(message=str(e))\n\n    creds_manager.delete(user_id, cred_id)\n\n    tokens_revoked = None\n    if isinstance(creds, OAuth2Credentials):\n        handler = _get_provider_oauth_handler(request, provider)\n        tokens_revoked = handler.revoke_tokens(creds)\n\n    return CredentialsDeletionResponse(revoked=tokens_revoked)",
          "children": [
            {
              "value": "delete_credentials",
              "children": []
            },
            {
              "value": "(\n    request: Request,\n    provider: Annotated[\n        ProviderName, Path(title=\"The provider to delete credentials for\")\n    ],\n    cred_id: Annotated[str, Path(title=\"The ID of the credentials to delete\")],\n    user_id: Annotated[str, Depends(get_user_id)],\n    force: Annotated[\n        bool, Query(title=\"Whether to proceed if any linked webhooks are still in use\")\n    ] = False,\n)",
              "children": [
                {
                  "value": "request: Request",
                  "children": [
                    {
                      "value": "request",
                      "children": []
                    },
                    {
                      "value": "Request",
                      "children": [
                        {
                          "value": "Request",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "provider: Annotated[\n        ProviderName, Path(title=\"The provider to delete credentials for\")\n    ]",
                  "children": [
                    {
                      "value": "provider",
                      "children": []
                    },
                    {
                      "value": "Annotated[\n        ProviderName, Path(title=\"The provider to delete credentials for\")\n    ]",
                      "children": [
                        {
                          "value": "Annotated[\n        ProviderName, Path(title=\"The provider to delete credentials for\")\n    ]",
                          "children": [
                            {
                              "value": "Annotated",
                              "children": []
                            },
                            {
                              "value": "[\n        ProviderName, Path(title=\"The provider to delete credentials for\")\n    ]",
                              "children": [
                                {
                                  "value": "ProviderName",
                                  "children": [
                                    {
                                      "value": "ProviderName",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "Path(title=\"The provider to delete credentials for\")",
                                  "children": [
                                    {
                                      "value": "Path(title=\"The provider to delete credentials for\")",
                                      "children": [
                                        {
                                          "value": "Path",
                                          "children": []
                                        },
                                        {
                                          "value": "(title=\"The provider to delete credentials for\")",
                                          "children": [
                                            {
                                              "value": "title=\"The provider to delete credentials for\"",
                                              "children": [
                                                {
                                                  "value": "title",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"The provider to delete credentials for\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "The provider to delete credentials for",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "cred_id: Annotated[str, Path(title=\"The ID of the credentials to delete\")]",
                  "children": [
                    {
                      "value": "cred_id",
                      "children": []
                    },
                    {
                      "value": "Annotated[str, Path(title=\"The ID of the credentials to delete\")]",
                      "children": [
                        {
                          "value": "Annotated[str, Path(title=\"The ID of the credentials to delete\")]",
                          "children": [
                            {
                              "value": "Annotated",
                              "children": []
                            },
                            {
                              "value": "[str, Path(title=\"The ID of the credentials to delete\")]",
                              "children": [
                                {
                                  "value": "str",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "Path(title=\"The ID of the credentials to delete\")",
                                  "children": [
                                    {
                                      "value": "Path(title=\"The ID of the credentials to delete\")",
                                      "children": [
                                        {
                                          "value": "Path",
                                          "children": []
                                        },
                                        {
                                          "value": "(title=\"The ID of the credentials to delete\")",
                                          "children": [
                                            {
                                              "value": "title=\"The ID of the credentials to delete\"",
                                              "children": [
                                                {
                                                  "value": "title",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"The ID of the credentials to delete\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "The ID of the credentials to delete",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "user_id: Annotated[str, Depends(get_user_id)]",
                  "children": [
                    {
                      "value": "user_id",
                      "children": []
                    },
                    {
                      "value": "Annotated[str, Depends(get_user_id)]",
                      "children": [
                        {
                          "value": "Annotated[str, Depends(get_user_id)]",
                          "children": [
                            {
                              "value": "Annotated",
                              "children": []
                            },
                            {
                              "value": "[str, Depends(get_user_id)]",
                              "children": [
                                {
                                  "value": "str",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "Depends(get_user_id)",
                                  "children": [
                                    {
                                      "value": "Depends(get_user_id)",
                                      "children": [
                                        {
                                          "value": "Depends",
                                          "children": []
                                        },
                                        {
                                          "value": "(get_user_id)",
                                          "children": [
                                            {
                                              "value": "get_user_id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "force: Annotated[\n        bool, Query(title=\"Whether to proceed if any linked webhooks are still in use\")\n    ] = False",
                  "children": [
                    {
                      "value": "force",
                      "children": []
                    },
                    {
                      "value": "Annotated[\n        bool, Query(title=\"Whether to proceed if any linked webhooks are still in use\")\n    ]",
                      "children": [
                        {
                          "value": "Annotated[\n        bool, Query(title=\"Whether to proceed if any linked webhooks are still in use\")\n    ]",
                          "children": [
                            {
                              "value": "Annotated",
                              "children": []
                            },
                            {
                              "value": "[\n        bool, Query(title=\"Whether to proceed if any linked webhooks are still in use\")\n    ]",
                              "children": [
                                {
                                  "value": "bool",
                                  "children": [
                                    {
                                      "value": "bool",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "Query(title=\"Whether to proceed if any linked webhooks are still in use\")",
                                  "children": [
                                    {
                                      "value": "Query(title=\"Whether to proceed if any linked webhooks are still in use\")",
                                      "children": [
                                        {
                                          "value": "Query",
                                          "children": []
                                        },
                                        {
                                          "value": "(title=\"Whether to proceed if any linked webhooks are still in use\")",
                                          "children": [
                                            {
                                              "value": "title=\"Whether to proceed if any linked webhooks are still in use\"",
                                              "children": [
                                                {
                                                  "value": "title",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"Whether to proceed if any linked webhooks are still in use\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "Whether to proceed if any linked webhooks are still in use",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "False",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "CredentialsDeletionResponse | CredentialsDeletionNeedsConfirmationResponse",
              "children": [
                {
                  "value": "CredentialsDeletionResponse | CredentialsDeletionNeedsConfirmationResponse",
                  "children": [
                    {
                      "value": "CredentialsDeletionResponse",
                      "children": []
                    },
                    {
                      "value": "CredentialsDeletionNeedsConfirmationResponse",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "creds = creds_manager.store.get_creds_by_id(user_id, cred_id)\n    if not creds:\n        raise HTTPException(status_code=404, detail=\"Credentials not found\")\n    if creds.provider != provider:\n        raise HTTPException(\n            status_code=404, detail=\"Credentials do not match the specified provider\"\n        )\n\n    try:\n        await remove_all_webhooks_for_credentials(creds, force)\n    except NeedConfirmation as e:\n        return CredentialsDeletionNeedsConfirmationResponse(message=str(e))\n\n    creds_manager.delete(user_id, cred_id)\n\n    tokens_revoked = None\n    if isinstance(creds, OAuth2Credentials):\n        handler = _get_provider_oauth_handler(request, provider)\n        tokens_revoked = handler.revoke_tokens(creds)\n\n    return CredentialsDeletionResponse(revoked=tokens_revoked)",
              "children": [
                {
                  "value": "creds = creds_manager.store.get_creds_by_id(user_id, cred_id)",
                  "children": [
                    {
                      "value": "creds = creds_manager.store.get_creds_by_id(user_id, cred_id)",
                      "children": [
                        {
                          "value": "creds",
                          "children": []
                        },
                        {
                          "value": "creds_manager.store.get_creds_by_id(user_id, cred_id)",
                          "children": [
                            {
                              "value": "creds_manager.store.get_creds_by_id",
                              "children": [
                                {
                                  "value": "creds_manager.store",
                                  "children": [
                                    {
                                      "value": "creds_manager",
                                      "children": []
                                    },
                                    {
                                      "value": "store",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "get_creds_by_id",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(user_id, cred_id)",
                              "children": [
                                {
                                  "value": "user_id",
                                  "children": []
                                },
                                {
                                  "value": "cred_id",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "if not creds:\n        raise HTTPException(status_code=404, detail=\"Credentials not found\")",
                  "children": [
                    {
                      "value": "not creds",
                      "children": [
                        {
                          "value": "creds",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "raise HTTPException(status_code=404, detail=\"Credentials not found\")",
                      "children": [
                        {
                          "value": "raise HTTPException(status_code=404, detail=\"Credentials not found\")",
                          "children": [
                            {
                              "value": "HTTPException(status_code=404, detail=\"Credentials not found\")",
                              "children": [
                                {
                                  "value": "HTTPException",
                                  "children": []
                                },
                                {
                                  "value": "(status_code=404, detail=\"Credentials not found\")",
                                  "children": [
                                    {
                                      "value": "status_code=404",
                                      "children": [
                                        {
                                          "value": "status_code",
                                          "children": []
                                        },
                                        {
                                          "value": "404",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "detail=\"Credentials not found\"",
                                      "children": [
                                        {
                                          "value": "detail",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Credentials not found\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Credentials not found",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "if creds.provider != provider:\n        raise HTTPException(\n            status_code=404, detail=\"Credentials do not match the specified provider\"\n        )",
                  "children": [
                    {
                      "value": "creds.provider != provider",
                      "children": [
                        {
                          "value": "creds.provider",
                          "children": [
                            {
                              "value": "creds",
                              "children": []
                            },
                            {
                              "value": "provider",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "provider",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "raise HTTPException(\n            status_code=404, detail=\"Credentials do not match the specified provider\"\n        )",
                      "children": [
                        {
                          "value": "raise HTTPException(\n            status_code=404, detail=\"Credentials do not match the specified provider\"\n        )",
                          "children": [
                            {
                              "value": "HTTPException(\n            status_code=404, detail=\"Credentials do not match the specified provider\"\n        )",
                              "children": [
                                {
                                  "value": "HTTPException",
                                  "children": []
                                },
                                {
                                  "value": "(\n            status_code=404, detail=\"Credentials do not match the specified provider\"\n        )",
                                  "children": [
                                    {
                                      "value": "status_code=404",
                                      "children": [
                                        {
                                          "value": "status_code",
                                          "children": []
                                        },
                                        {
                                          "value": "404",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "detail=\"Credentials do not match the specified provider\"",
                                      "children": [
                                        {
                                          "value": "detail",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Credentials do not match the specified provider\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Credentials do not match the specified provider",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "try:\n        await remove_all_webhooks_for_credentials(creds, force)\n    except NeedConfirmation as e:\n        return CredentialsDeletionNeedsConfirmationResponse(message=str(e))",
                  "children": [
                    {
                      "value": "await remove_all_webhooks_for_credentials(creds, force)",
                      "children": [
                        {
                          "value": "await remove_all_webhooks_for_credentials(creds, force)",
                          "children": [
                            {
                              "value": "await remove_all_webhooks_for_credentials(creds, force)",
                              "children": [
                                {
                                  "value": "remove_all_webhooks_for_credentials(creds, force)",
                                  "children": [
                                    {
                                      "value": "remove_all_webhooks_for_credentials",
                                      "children": []
                                    },
                                    {
                                      "value": "(creds, force)",
                                      "children": [
                                        {
                                          "value": "creds",
                                          "children": []
                                        },
                                        {
                                          "value": "force",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "except NeedConfirmation as e:\n        return CredentialsDeletionNeedsConfirmationResponse(message=str(e))",
                      "children": [
                        {
                          "value": "NeedConfirmation as e",
                          "children": [
                            {
                              "value": "NeedConfirmation",
                              "children": []
                            },
                            {
                              "value": "e",
                              "children": [
                                {
                                  "value": "e",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "return CredentialsDeletionNeedsConfirmationResponse(message=str(e))",
                          "children": [
                            {
                              "value": "return CredentialsDeletionNeedsConfirmationResponse(message=str(e))",
                              "children": [
                                {
                                  "value": "CredentialsDeletionNeedsConfirmationResponse(message=str(e))",
                                  "children": [
                                    {
                                      "value": "CredentialsDeletionNeedsConfirmationResponse",
                                      "children": []
                                    },
                                    {
                                      "value": "(message=str(e))",
                                      "children": [
                                        {
                                          "value": "message=str(e)",
                                          "children": [
                                            {
                                              "value": "message",
                                              "children": []
                                            },
                                            {
                                              "value": "str(e)",
                                              "children": [
                                                {
                                                  "value": "str",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(e)",
                                                  "children": [
                                                    {
                                                      "value": "e",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "creds_manager.delete(user_id, cred_id)",
                  "children": [
                    {
                      "value": "creds_manager.delete(user_id, cred_id)",
                      "children": [
                        {
                          "value": "creds_manager.delete",
                          "children": [
                            {
                              "value": "creds_manager",
                              "children": []
                            },
                            {
                              "value": "delete",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "(user_id, cred_id)",
                          "children": [
                            {
                              "value": "user_id",
                              "children": []
                            },
                            {
                              "value": "cred_id",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "tokens_revoked = None",
                  "children": [
                    {
                      "value": "tokens_revoked = None",
                      "children": [
                        {
                          "value": "tokens_revoked",
                          "children": []
                        },
                        {
                          "value": "None",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "if isinstance(creds, OAuth2Credentials):\n        handler = _get_provider_oauth_handler(request, provider)\n        tokens_revoked = handler.revoke_tokens(creds)",
                  "children": [
                    {
                      "value": "isinstance(creds, OAuth2Credentials)",
                      "children": [
                        {
                          "value": "isinstance",
                          "children": []
                        },
                        {
                          "value": "(creds, OAuth2Credentials)",
                          "children": [
                            {
                              "value": "creds",
                              "children": []
                            },
                            {
                              "value": "OAuth2Credentials",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "handler = _get_provider_oauth_handler(request, provider)\n        tokens_revoked = handler.revoke_tokens(creds)",
                      "children": [
                        {
                          "value": "handler = _get_provider_oauth_handler(request, provider)",
                          "children": [
                            {
                              "value": "handler = _get_provider_oauth_handler(request, provider)",
                              "children": [
                                {
                                  "value": "handler",
                                  "children": []
                                },
                                {
                                  "value": "_get_provider_oauth_handler(request, provider)",
                                  "children": [
                                    {
                                      "value": "_get_provider_oauth_handler",
                                      "children": []
                                    },
                                    {
                                      "value": "(request, provider)",
                                      "children": [
                                        {
                                          "value": "request",
                                          "children": []
                                        },
                                        {
                                          "value": "provider",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "tokens_revoked = handler.revoke_tokens(creds)",
                          "children": [
                            {
                              "value": "tokens_revoked = handler.revoke_tokens(creds)",
                              "children": [
                                {
                                  "value": "tokens_revoked",
                                  "children": []
                                },
                                {
                                  "value": "handler.revoke_tokens(creds)",
                                  "children": [
                                    {
                                      "value": "handler.revoke_tokens",
                                      "children": [
                                        {
                                          "value": "handler",
                                          "children": []
                                        },
                                        {
                                          "value": "revoke_tokens",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(creds)",
                                      "children": [
                                        {
                                          "value": "creds",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "return CredentialsDeletionResponse(revoked=tokens_revoked)",
                  "children": [
                    {
                      "value": "CredentialsDeletionResponse(revoked=tokens_revoked)",
                      "children": [
                        {
                          "value": "CredentialsDeletionResponse",
                          "children": []
                        },
                        {
                          "value": "(revoked=tokens_revoked)",
                          "children": [
                            {
                              "value": "revoked=tokens_revoked",
                              "children": [
                                {
                                  "value": "revoked",
                                  "children": []
                                },
                                {
                                  "value": "tokens_revoked",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "# ------------------------- WEBHOOK STUFF -------------------------- #",
      "children": []
    },
    {
      "value": "# \u26a0\ufe0f Note\n# N",
      "children": []
    },
    {
      "value": "user auth check because this endpoint is for webhook ingress and relies on\n# v",
      "children": []
    },
    {
      "value": "lidation by the provider-specific `WebhooksManager`.\n@ro",
      "children": []
    },
    {
      "value": "ter.post(\"/{provider}/webhooks/{webhook_id}/ingress\")\nasync def webhook_ingress_generic(\n    request: Request,\n    provider: Annotated[\n        ProviderName, Path(title=\"Provider where the webhook was registered\")\n    ],\n    webhook_id: Annotated[str, Path(title=\"Our ID for the webhook\")],\n):\n    logger.debug(f\"Received {provider.value} webhook ingress for ID {webhook_id}\")\n    webhook_manager = WEBHOOK_MANAGERS_BY_NAME[provider]()\n    webhook = await get_webhook(webhook_id)\n    logger.debug(f\"Webhook #{webhook_id}: {webhook}\")\n    payload, event_type = await webhook_manager.validate_payload(webhook, request)\n    logger.debug(\n        f\"Validated {provider.value} {webhook.webhook_type} {event_type} event \"\n        f\"with payload {payload}\"\n    )\n\n    webhook_event = WebhookEvent(\n        provider=provider,\n        webhook_id=webhook_id,\n        event_type=event_type,\n        payload=payload,\n    )\n    await publish_webhook_event(webhook_event)\n    logger.debug(f\"Webhook event published: {webhook_event}\")\n\n    if not webhook.attached_nodes:\n        return\n\n    executor = get_service_client(ExecutionManager)\n    for node in webhook.attached_nodes:\n        logger.debug(f\"Webhook-attached node: {node}\")\n        if not node.is_triggered_by_event_type(event_type):\n            logger.debug(f\"Node #{node.id} doesn't trigger on event {event_type}\")\n            continue\n        logger.debug(f\"Executing graph #{node.graph_id} node #{node.id}\")\n        executor.add_execution(\n            node.graph_id,\n            data={f\"webhook_{webhook_id}_payload\": payload},\n            user_id=webhook.user_id,\n        )\n\n\n@",
      "children": [
        {
          "value": "ter.post(\"/{provider}/webhooks/{webhook_id}/ingress\")\nasy",
          "children": [
            {
              "value": "er.post(\"/{provider}/webhooks/{webhook_id}/ingress\")\nasy",
              "children": [
                {
                  "value": "er.post(\"/{",
                  "children": [
                    {
                      "value": "er.pos",
                      "children": []
                    },
                    {
                      "value": "(\"/{",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "provider}/webhooks/{webhook_id}/ingress\")\nasy",
                  "children": [
                    {
                      "value": "rovider}/webhooks/{webhook_id}/ingress\")\nas",
                      "children": [
                        {
                          "value": "r",
                          "children": []
                        },
                        {
                          "value": "ovider}/webhooks/{webhook_id}/ingress\")\na",
                          "children": []
                        },
                        {
                          "value": "s",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "c def webhook_ingress_generic(\n    request: Request,\n    provider: Annotated[\n        ProviderName, Path(title=\"Provider where the webhook was registered\")\n    ],\n    webhook_id: Annotated[str, Path(title=\"Our ID for the webhook\")],\n):\n    logger.debug(f\"Received {provider.value} webhook ingress for ID {webhook_id}\")\n    webhook_manager = WEBHOOK_MANAGERS_BY_NAME[provider]()\n    webhook = await get_webhook(webhook_id)\n    logger.debug(f\"Webhook #{webhook_id}: {webhook}\")\n    payload, event_type = await webhook_manager.validate_payload(webhook, request)\n    logger.debug(\n        f\"Validated {provider.value} {webhook.webhook_type} {event_type} event \"\n        f\"with payload {payload}\"\n    )\n\n    webhook_event = WebhookEvent(\n        provider=provider,\n        webhook_id=webhook_id,\n        event_type=event_type,\n        payload=payload,\n    )\n    await publish_webhook_event(webhook_event)\n    logger.debug(f\"Webhook event published: {webhook_event}\")\n\n    if not webhook.attached_nodes:\n        return\n\n    executor = get_service_client(ExecutionManager)\n    for node in webhook.attached_nodes:\n        logger.debug(f\"Webhook-attached node: {node}\")\n        if not node.is_triggered_by_event_type(event_type):\n            logger.debug(f\"Node #{node.id} doesn't trigger on event {event_type}\")\n            continue\n        logger.debug(f\"Executing graph #{node.graph_id} node #{node.id}\")\n        executor.add_execution(\n            node.graph_id,\n            data={f\"webhook_{webhook_id}_payload\": payload},\n            user_id=webhook.user_id,\n        )\n\n\n@",
          "children": [
            {
              "value": "ook_ingress_generic(",
              "children": []
            },
            {
              "value": "request: Request,\n    provider: Annotated[\n        ProviderName, Path(title=\"Provider where the webhook was registered\")\n    ],\n    webhook_id: Annotated[str, Path(title=\"Our ID for the webhook\")],\n):",
              "children": [
                {
                  "value": "est: Request,",
                  "children": [
                    {
                      "value": "est: Re",
                      "children": []
                    },
                    {
                      "value": "est,",
                      "children": [
                        {
                          "value": "est,",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "ider: Annotated[\n        ProviderName, Path(title=\"Provider where the webhook was registered\")\n    ],",
                  "children": [
                    {
                      "value": "ider: An",
                      "children": []
                    },
                    {
                      "value": "tated[\n        ProviderName, Path(title=\"Provider where the webhook was registered\")\n    ],",
                      "children": [
                        {
                          "value": "tated[\n        ProviderName, Path(title=\"Provider where the webhook was registered\")\n    ],",
                          "children": [
                            {
                              "value": "tated[",
                              "children": []
                            },
                            {
                              "value": "ProviderName, Path(title=\"Provider where the webhook was registered\")\n    ],",
                              "children": [
                                {
                                  "value": "iderName, Pa",
                                  "children": [
                                    {
                                      "value": "iderName, Pa",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(title=\"Provider where the webhook was registered\")",
                                  "children": [
                                    {
                                      "value": "(title=\"Provider where the webhook was registered\")",
                                      "children": [
                                        {
                                          "value": "(tit",
                                          "children": []
                                        },
                                        {
                                          "value": "le=\"Provider where the webhook was registered\")",
                                          "children": [
                                            {
                                              "value": "e=\"Provider where the webhook was registered\")",
                                              "children": [
                                                {
                                                  "value": "e=\"Pr",
                                                  "children": []
                                                },
                                                {
                                                  "value": "vider where the webhook was registered\")",
                                                  "children": [
                                                    {
                                                      "value": "v",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "ider where the webhook was registered\")",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "ook_id: Annotated[str, Path(title=\"Our ID for the webhook\")],\n):",
                  "children": [
                    {
                      "value": "ook_id: An",
                      "children": []
                    },
                    {
                      "value": "tated[str, Path(title=\"Our ID for the webhook\")],\n):",
                      "children": [
                        {
                          "value": "tated[str, Path(title=\"Our ID for the webhook\")],\n):",
                          "children": [
                            {
                              "value": "tated[str",
                              "children": []
                            },
                            {
                              "value": ", Path(title=\"Our ID for the webhook\")],\n):",
                              "children": [
                                {
                                  "value": "Pa",
                                  "children": [
                                    {
                                      "value": "Pa",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(title=\"Our ID for the webhook\")],\n)",
                                  "children": [
                                    {
                                      "value": "(title=\"Our ID for the webhook\")],\n)",
                                      "children": [
                                        {
                                          "value": "(tit",
                                          "children": []
                                        },
                                        {
                                          "value": "le=\"Our ID for the webhook\")],\n)",
                                          "children": [
                                            {
                                              "value": "e=\"Our ID for the webhook\")],",
                                              "children": [
                                                {
                                                  "value": "e=\"Ou",
                                                  "children": []
                                                },
                                                {
                                                  "value": "ID for the webhook\")],",
                                                  "children": [
                                                    {
                                                      "value": "",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "ID for the webhook\")],",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "er.debug(f\"Received {provider.value} webhook ingress for ID {webhook_id}\")\n    webhook_manager = WEBHOOK_MANAGERS_BY_NAME[provider]()\n    webhook = await get_webhook(webhook_id)\n    logger.debug(f\"Webhook #{webhook_id}: {webhook}\")\n    payload, event_type = await webhook_manager.validate_payload(webhook, request)\n    logger.debug(\n        f\"Validated {provider.value} {webhook.webhook_type} {event_type} event \"\n        f\"with payload {payload}\"\n    )\n\n    webhook_event = WebhookEvent(\n        provider=provider,\n        webhook_id=webhook_id,\n        event_type=event_type,\n        payload=payload,\n    )\n    await publish_webhook_event(webhook_event)\n    logger.debug(f\"Webhook event published: {webhook_event}\")\n\n    if not webhook.attached_nodes:\n        return\n\n    executor = get_service_client(ExecutionManager)\n    for node in webhook.attached_nodes:\n        logger.debug(f\"Webhook-attached node: {node}\")\n        if not node.is_triggered_by_event_type(event_type):\n            logger.debug(f\"Node #{node.id} doesn't trigger on event {event_type}\")\n            continue\n        logger.debug(f\"Executing graph #{node.graph_id} node #{node.id}\")\n        executor.add_execution(\n            node.graph_id,\n            data={f\"webhook_{webhook_id}_payload\": payload},\n            user_id=webhook.user_id,\n        )\n\n\n@",
              "children": [
                {
                  "value": "er.debug(f\"Received {provider.value} webhook ingress for ID {webhook_id}\")",
                  "children": [
                    {
                      "value": "er.debug(f\"Received {provider.value} webhook ingress for ID {webhook_id}\")",
                      "children": [
                        {
                          "value": "er.debug(f\"R",
                          "children": [
                            {
                              "value": "er.deb",
                              "children": []
                            },
                            {
                              "value": "g(f\"R",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "eceived {provider.value} webhook ingress for ID {webhook_id}\")",
                          "children": [
                            {
                              "value": "ceived {provider.value} webhook ingress for ID {webhook_id}\")",
                              "children": [
                                {
                                  "value": "ce",
                                  "children": []
                                },
                                {
                                  "value": "ived {pro",
                                  "children": []
                                },
                                {
                                  "value": "vider.value} web",
                                  "children": [
                                    {
                                      "value": "ider.value} we",
                                      "children": [
                                        {
                                          "value": "ider.val",
                                          "children": []
                                        },
                                        {
                                          "value": "e} we",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "hook ingress for ID {web",
                                  "children": []
                                },
                                {
                                  "value": "hook_id}\")",
                                  "children": [
                                    {
                                      "value": "ook_id}\")",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "ook_manager = WEBHOOK_MANAGERS_BY_NAME[provider]()",
                  "children": [
                    {
                      "value": "ook_manager = WEBHOOK_MANAGERS_BY_NAME[provider]()",
                      "children": [
                        {
                          "value": "ook_manager = W",
                          "children": []
                        },
                        {
                          "value": "OOK_MANAGERS_BY_NAME[provider]()",
                          "children": [
                            {
                              "value": "OOK_MANAGERS_BY_NAME[provider]()",
                              "children": [
                                {
                                  "value": "OOK_MANAGERS_BY_NAME[pro",
                                  "children": []
                                },
                                {
                                  "value": "ider]()",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "ook = await get_webhook(webhook_id)",
                  "children": [
                    {
                      "value": "ook = await get_webhook(webhook_id)",
                      "children": [
                        {
                          "value": "ook = a",
                          "children": []
                        },
                        {
                          "value": "t get_webhook(webhook_id)",
                          "children": [
                            {
                              "value": "webhook(webhook_id)",
                              "children": [
                                {
                                  "value": "webhook(web",
                                  "children": []
                                },
                                {
                                  "value": "hook_id)",
                                  "children": [
                                    {
                                      "value": "ook_id)",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "er.debug(f\"Webhook #{webhook_id}: {webhook}\")",
                  "children": [
                    {
                      "value": "er.debug(f\"Webhook #{webhook_id}: {webhook}\")",
                      "children": [
                        {
                          "value": "er.debug(f\"W",
                          "children": [
                            {
                              "value": "er.deb",
                              "children": []
                            },
                            {
                              "value": "g(f\"W",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "ebhook #{webhook_id}: {webhook}\")",
                          "children": [
                            {
                              "value": "bhook #{webhook_id}: {webhook}\")",
                              "children": [
                                {
                                  "value": "bh",
                                  "children": []
                                },
                                {
                                  "value": "ook #{web",
                                  "children": []
                                },
                                {
                                  "value": "hook_id}: {w",
                                  "children": [
                                    {
                                      "value": "ook_id}: {",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "eb",
                                  "children": []
                                },
                                {
                                  "value": "hook}\")",
                                  "children": [
                                    {
                                      "value": "ook}\")",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "oad, event_type = await webhook_manager.validate_payload(webhook, request)",
                  "children": [
                    {
                      "value": "oad, event_type = await webhook_manager.validate_payload(webhook, request)",
                      "children": [
                        {
                          "value": "oad, event_type = a",
                          "children": [
                            {
                              "value": "oad, ev",
                              "children": []
                            },
                            {
                              "value": "t_type = a",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "t webhook_manager.validate_payload(webhook, request)",
                          "children": [
                            {
                              "value": "ook_manager.validate_payload(webhook, request)",
                              "children": [
                                {
                                  "value": "ook_manager.validate_payload(web",
                                  "children": [
                                    {
                                      "value": "ook_manager.val",
                                      "children": []
                                    },
                                    {
                                      "value": "date_payload(web",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "hook, request)",
                                  "children": [
                                    {
                                      "value": "ook, re",
                                      "children": []
                                    },
                                    {
                                      "value": "est)",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "er.debug(\n        f\"Validated {provider.value} {webhook.webhook_type} {event_type} event \"\n        f\"with payload {payload}\"\n    )",
                  "children": [
                    {
                      "value": "er.debug(\n        f\"Validated {provider.value} {webhook.webhook_type} {event_type} event \"\n        f\"with payload {payload}\"\n    )",
                      "children": [
                        {
                          "value": "er.debug(",
                          "children": [
                            {
                              "value": "er.deb",
                              "children": []
                            },
                            {
                              "value": "g(",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "f\"Validated {provider.value} {webhook.webhook_type} {event_type} event \"\n        f\"with payload {payload}\"\n    )",
                          "children": [
                            {
                              "value": "lidated {provider.value} {webhook.webhook_type} {event_type} event \"\n        f\"with payload {payload}\"",
                              "children": [
                                {
                                  "value": "lidated {provider.value} {webhook.webhook_type} {event_type} event \"",
                                  "children": [
                                    {
                                      "value": "li",
                                      "children": []
                                    },
                                    {
                                      "value": "dated {pro",
                                      "children": []
                                    },
                                    {
                                      "value": "vider.value} {we",
                                      "children": [
                                        {
                                          "value": "ider.value} {w",
                                          "children": [
                                            {
                                              "value": "ider.val",
                                              "children": []
                                            },
                                            {
                                              "value": "e} {w",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "b",
                                      "children": []
                                    },
                                    {
                                      "value": "hook.webhook_type} {ev",
                                      "children": [
                                        {
                                          "value": "ook.webhook_type} {e",
                                          "children": [
                                            {
                                              "value": "ook.web",
                                              "children": []
                                            },
                                            {
                                              "value": "ook_type} {e",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "e",
                                      "children": []
                                    },
                                    {
                                      "value": "nt_type} eve",
                                      "children": [
                                        {
                                          "value": "t_type} ev",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "nt \"",
                                      "children": []
                                    },
                                    {
                                      "value": "",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "th payload {payload}\"",
                                  "children": [
                                    {
                                      "value": "th",
                                      "children": []
                                    },
                                    {
                                      "value": "payload {pay",
                                      "children": []
                                    },
                                    {
                                      "value": "load}\"",
                                      "children": [
                                        {
                                          "value": "oad}\"",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "ook_event = WebhookEvent(\n        provider=provider,\n        webhook_id=webhook_id,\n        event_type=event_type,\n        payload=payload,\n    )",
                  "children": [
                    {
                      "value": "ook_event = WebhookEvent(\n        provider=provider,\n        webhook_id=webhook_id,\n        event_type=event_type,\n        payload=payload,\n    )",
                      "children": [
                        {
                          "value": "ook_event = W",
                          "children": []
                        },
                        {
                          "value": "ookEvent(\n        provider=provider,\n        webhook_id=webhook_id,\n        event_type=event_type,\n        payload=payload,\n    )",
                          "children": [
                            {
                              "value": "ookEvent(",
                              "children": []
                            },
                            {
                              "value": "provider=provider,\n        webhook_id=webhook_id,\n        event_type=event_type,\n        payload=payload,\n    )",
                              "children": [
                                {
                                  "value": "ider=provider,",
                                  "children": [
                                    {
                                      "value": "ider=pro",
                                      "children": []
                                    },
                                    {
                                      "value": "ider,",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "ook_id=webhook_id,",
                                  "children": [
                                    {
                                      "value": "ook_id=web",
                                      "children": []
                                    },
                                    {
                                      "value": "ook_id,",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "t_type=event_type,",
                                  "children": [
                                    {
                                      "value": "t_type=eve",
                                      "children": []
                                    },
                                    {
                                      "value": "t_type,",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "oad=payload,",
                                  "children": [
                                    {
                                      "value": "oad=pay",
                                      "children": []
                                    },
                                    {
                                      "value": "oad,",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "t publish_webhook_event(webhook_event)",
                  "children": [
                    {
                      "value": "t publish_webhook_event(webhook_event)",
                      "children": [
                        {
                          "value": "ish_webhook_event(webhook_event)",
                          "children": [
                            {
                              "value": "ish_webhook_event(web",
                              "children": []
                            },
                            {
                              "value": "hook_event)",
                              "children": [
                                {
                                  "value": "ook_event)",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "er.debug(f\"Webhook event published: {webhook_event}\")",
                  "children": [
                    {
                      "value": "er.debug(f\"Webhook event published: {webhook_event}\")",
                      "children": [
                        {
                          "value": "er.debug(f\"W",
                          "children": [
                            {
                              "value": "er.deb",
                              "children": []
                            },
                            {
                              "value": "g(f\"W",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "ebhook event published: {webhook_event}\")",
                          "children": [
                            {
                              "value": "bhook event published: {webhook_event}\")",
                              "children": [
                                {
                                  "value": "bh",
                                  "children": []
                                },
                                {
                                  "value": "ook event published: {web",
                                  "children": []
                                },
                                {
                                  "value": "hook_event}\")",
                                  "children": [
                                    {
                                      "value": "ook_event}\")",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "ot webhook.attached_nodes:\n        return",
                  "children": [
                    {
                      "value": "webhook.attached_nodes:",
                      "children": [
                        {
                          "value": "ook.attached_nodes:",
                          "children": [
                            {
                              "value": "ook.att",
                              "children": []
                            },
                            {
                              "value": "ched_nodes:",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "rn",
                      "children": [
                        {
                          "value": "rn",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "utor = get_service_client(ExecutionManager)",
                  "children": [
                    {
                      "value": "utor = get_service_client(ExecutionManager)",
                      "children": [
                        {
                          "value": "utor = g",
                          "children": []
                        },
                        {
                          "value": "service_client(ExecutionManager)",
                          "children": [
                            {
                              "value": "service_client(Exe",
                              "children": []
                            },
                            {
                              "value": "cutionManager)",
                              "children": [
                                {
                                  "value": "utionManager)",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "node in webhook.attached_nodes:\n        logger.debug(f\"Webhook-attached node: {node}\")\n        if not node.is_triggered_by_event_type(event_type):\n            logger.debug(f\"Node #{node.id} doesn't trigger on event {event_type}\")\n            continue\n        logger.debug(f\"Executing graph #{node.graph_id} node #{node.id}\")\n        executor.add_execution(\n            node.graph_id,\n            data={f\"webhook_{webhook_id}_payload\": payload},\n            user_id=webhook.user_id,\n        )\n\n\n@",
                  "children": [
                    {
                      "value": "in",
                      "children": []
                    },
                    {
                      "value": "ook.attached_nodes:",
                      "children": [
                        {
                          "value": "ook.att",
                          "children": []
                        },
                        {
                          "value": "ched_nodes:",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "er.debug(f\"Webhook-attached node: {node}\")\n        if not node.is_triggered_by_event_type(event_type):\n            logger.debug(f\"Node #{node.id} doesn't trigger on event {event_type}\")\n            continue\n        logger.debug(f\"Executing graph #{node.graph_id} node #{node.id}\")\n        executor.add_execution(\n            node.graph_id,\n            data={f\"webhook_{webhook_id}_payload\": payload},\n            user_id=webhook.user_id,\n        )\n\n\n@",
                      "children": [
                        {
                          "value": "er.debug(f\"Webhook-attached node: {node}\")",
                          "children": [
                            {
                              "value": "er.debug(f\"Webhook-attached node: {node}\")",
                              "children": [
                                {
                                  "value": "er.debug(f\"W",
                                  "children": [
                                    {
                                      "value": "er.deb",
                                      "children": []
                                    },
                                    {
                                      "value": "g(f\"W",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "ebhook-attached node: {node}\")",
                                  "children": [
                                    {
                                      "value": "bhook-attached node: {node}\")",
                                      "children": [
                                        {
                                          "value": "bh",
                                          "children": []
                                        },
                                        {
                                          "value": "ook-attached node: {nod",
                                          "children": []
                                        },
                                        {
                                          "value": "e}\")",
                                          "children": [
                                            {
                                              "value": "}\")",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "ot node.is_triggered_by_event_type(event_type):\n            logger.debug(f\"Node #{node.id} doesn't trigger on event {event_type}\")\n            continue",
                          "children": [
                            {
                              "value": "node.is_triggered_by_event_type(event_type):",
                              "children": [
                                {
                                  "value": ".is_triggered_by_event_type(event_type):",
                                  "children": [
                                    {
                                      "value": ".is_triggered_by_event_type(eve",
                                      "children": [
                                        {
                                          "value": ".is_",
                                          "children": []
                                        },
                                        {
                                          "value": "riggered_by_event_type(eve",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "nt_type):",
                                      "children": [
                                        {
                                          "value": "t_type):",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "er.debug(f\"Node #{node.id} doesn't trigger on event {event_type}\")\n            continue",
                              "children": [
                                {
                                  "value": "er.debug(f\"Node #{node.id} doesn't trigger on event {event_type}\")",
                                  "children": [
                                    {
                                      "value": "er.debug(f\"Node #{node.id} doesn't trigger on event {event_type}\")",
                                      "children": [
                                        {
                                          "value": "er.debug(f\"N",
                                          "children": [
                                            {
                                              "value": "er.deb",
                                              "children": []
                                            },
                                            {
                                              "value": "g(f\"N",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "ode #{node.id} doesn't trigger on event {event_type}\")",
                                          "children": [
                                            {
                                              "value": "de #{node.id} doesn't trigger on event {event_type}\")",
                                              "children": [
                                                {
                                                  "value": "de",
                                                  "children": []
                                                },
                                                {
                                                  "value": "#{nod",
                                                  "children": []
                                                },
                                                {
                                                  "value": "e.id} doe",
                                                  "children": [
                                                    {
                                                      "value": ".id} do",
                                                      "children": [
                                                        {
                                                          "value": ".id}",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "do",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "sn't trigger on event {eve",
                                                  "children": []
                                                },
                                                {
                                                  "value": "nt_type}\")",
                                                  "children": [
                                                    {
                                                      "value": "t_type}\")",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "inue",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "er.debug(f\"Executing graph #{node.graph_id} node #{node.id}\")",
                          "children": [
                            {
                              "value": "er.debug(f\"Executing graph #{node.graph_id} node #{node.id}\")",
                              "children": [
                                {
                                  "value": "er.debug(f\"E",
                                  "children": [
                                    {
                                      "value": "er.deb",
                                      "children": []
                                    },
                                    {
                                      "value": "g(f\"E",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "xecuting graph #{node.graph_id} node #{node.id}\")",
                                  "children": [
                                    {
                                      "value": "ecuting graph #{node.graph_id} node #{node.id}\")",
                                      "children": [
                                        {
                                          "value": "ec",
                                          "children": []
                                        },
                                        {
                                          "value": "uting graph #{nod",
                                          "children": []
                                        },
                                        {
                                          "value": "e.graph_id} nod",
                                          "children": [
                                            {
                                              "value": ".graph_id} no",
                                              "children": [
                                                {
                                                  "value": ".gra",
                                                  "children": []
                                                },
                                                {
                                                  "value": "h_id} no",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "e #{nod",
                                          "children": []
                                        },
                                        {
                                          "value": "e.id}\")",
                                          "children": [
                                            {
                                              "value": ".id}\")",
                                              "children": [
                                                {
                                                  "value": ".id}",
                                                  "children": []
                                                },
                                                {
                                                  "value": ")",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "utor.add_execution(\n            node.graph_id,\n            data={f\"webhook_{webhook_id}_payload\": payload},\n            user_id=webhook.user_id,\n        )\n\n\n@",
                          "children": [
                            {
                              "value": "utor.add_execution(\n            node.graph_id,\n            data={f\"webhook_{webhook_id}_payload\": payload},\n            user_id=webhook.user_id,\n        )\n\n\n@",
                              "children": [
                                {
                                  "value": "utor.add_execution(",
                                  "children": [
                                    {
                                      "value": "utor.add",
                                      "children": []
                                    },
                                    {
                                      "value": "execution(",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "node.graph_id,\n            data={f\"webhook_{webhook_id}_payload\": payload},\n            user_id=webhook.user_id,\n        )\n\n\n@",
                                  "children": [
                                    {
                                      "value": ".graph_id,",
                                      "children": [
                                        {
                                          "value": ".gra",
                                          "children": []
                                        },
                                        {
                                          "value": "h_id,",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "={f\"webhook_{webhook_id}_payload\": payload},",
                                      "children": [
                                        {
                                          "value": "={f\"",
                                          "children": []
                                        },
                                        {
                                          "value": "ebhook_{webhook_id}_payload\": payload},",
                                          "children": [
                                            {
                                              "value": "bhook_{webhook_id}_payload\": payload},",
                                              "children": [
                                                {
                                                  "value": "bhook_{webhook_id}_payload\": pa",
                                                  "children": [
                                                    {
                                                      "value": "bh",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "ook_{web",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "hook_id}_pay",
                                                      "children": [
                                                        {
                                                          "value": "ook_id}_pa",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "load\": p",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "a",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "oad},",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "_id=webhook.user_id,",
                                      "children": [
                                        {
                                          "value": "_id=web",
                                          "children": []
                                        },
                                        {
                                          "value": "ook.user_id,",
                                          "children": [
                                            {
                                              "value": "ook.use",
                                              "children": []
                                            },
                                            {
                                              "value": "_id,",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "ter.post(\"/webhooks/{webhook_id}/ping\")\nasync def webhook_ping(\n    webhook_id: Annotated[str, Path(title=\"Our ID for the webhook\")],\n    user_id: Annotated[str, Depends(get_user_id)],  # require auth\n):\n    webhook = await get_webhook(webhook_id)\n    webhook_manager = WEBHOOK_MANAGERS_BY_NAME[webhook.provider]()\n\n    credentials = (\n        creds_manager.get(user_id, webhook.credentials_id)\n        if webhook.credentials_id\n        else None\n    )\n    try:\n        await webhook_manager.trigger_ping(webhook, credentials)\n    except NotImplementedError:\n        return False\n\n    if not await wait_for_webhook_event(webhook_id, event_type=\"ping\", timeout=10):\n        raise HTTPException(status_code=504, detail=\"Webhook ping timed out\")\n\n    return True\n\n\n#",
      "children": [
        {
          "value": "ter.post(\"/webhooks/{webhook_id}/ping\")\nasy",
          "children": [
            {
              "value": "er.post(\"/webhooks/{webhook_id}/ping\")\nasy",
              "children": [
                {
                  "value": "er.post(\"/w",
                  "children": [
                    {
                      "value": "er.pos",
                      "children": []
                    },
                    {
                      "value": "(\"/w",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "ebhooks/{webhook_id}/ping\")\nasy",
                  "children": [
                    {
                      "value": "bhooks/{webhook_id}/ping\")\nas",
                      "children": [
                        {
                          "value": "b",
                          "children": []
                        },
                        {
                          "value": "hooks/{webhook_id}/ping\")\na",
                          "children": []
                        },
                        {
                          "value": "s",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "c def webhook_ping(\n    webhook_id: Annotated[str, Path(title=\"Our ID for the webhook\")],\n    user_id: Annotated[str, Depends(get_user_id)],  # require auth\n):\n    webhook = await get_webhook(webhook_id)\n    webhook_manager = WEBHOOK_MANAGERS_BY_NAME[webhook.provider]()\n\n    credentials = (\n        creds_manager.get(user_id, webhook.credentials_id)\n        if webhook.credentials_id\n        else None\n    )\n    try:\n        await webhook_manager.trigger_ping(webhook, credentials)\n    except NotImplementedError:\n        return False\n\n    if not await wait_for_webhook_event(webhook_id, event_type=\"ping\", timeout=10):\n        raise HTTPException(status_code=504, detail=\"Webhook ping timed out\")\n\n    return True\n\n\n#",
          "children": [
            {
              "value": "ook_ping(",
              "children": []
            },
            {
              "value": "webhook_id: Annotated[str, Path(title=\"Our ID for the webhook\")],\n    user_id: Annotated[str, Depends(get_user_id)],  # require auth\n):",
              "children": [
                {
                  "value": "ook_id: Annotated[str, Path(title=\"Our ID for the webhook\")],",
                  "children": [
                    {
                      "value": "ook_id: An",
                      "children": []
                    },
                    {
                      "value": "tated[str, Path(title=\"Our ID for the webhook\")],",
                      "children": [
                        {
                          "value": "tated[str, Path(title=\"Our ID for the webhook\")],",
                          "children": [
                            {
                              "value": "tated[str",
                              "children": []
                            },
                            {
                              "value": ", Path(title=\"Our ID for the webhook\")],",
                              "children": [
                                {
                                  "value": "Pa",
                                  "children": [
                                    {
                                      "value": "Pa",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(title=\"Our ID for the webhook\")],",
                                  "children": [
                                    {
                                      "value": "(title=\"Our ID for the webhook\")],",
                                      "children": [
                                        {
                                          "value": "(tit",
                                          "children": []
                                        },
                                        {
                                          "value": "le=\"Our ID for the webhook\")],",
                                          "children": [
                                            {
                                              "value": "e=\"Our ID for the webhook\")],",
                                              "children": [
                                                {
                                                  "value": "e=\"Ou",
                                                  "children": []
                                                },
                                                {
                                                  "value": "ID for the webhook\")],",
                                                  "children": [
                                                    {
                                                      "value": "",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "ID for the webhook\")],",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "_id: Annotated[str, Depends(get_user_id)],  #",
                  "children": [
                    {
                      "value": "_id: An",
                      "children": []
                    },
                    {
                      "value": "tated[str, Depends(get_user_id)],  #",
                      "children": [
                        {
                          "value": "tated[str, Depends(get_user_id)],  #",
                          "children": [
                            {
                              "value": "tated[str",
                              "children": []
                            },
                            {
                              "value": ", Depends(get_user_id)],  #",
                              "children": [
                                {
                                  "value": "De",
                                  "children": [
                                    {
                                      "value": "De",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "nds(get_user_id)],",
                                  "children": [
                                    {
                                      "value": "nds(get_user_id)],",
                                      "children": [
                                        {
                                          "value": "nds(get",
                                          "children": []
                                        },
                                        {
                                          "value": "_user_id)],",
                                          "children": [
                                            {
                                              "value": "user_id)],",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "quire auth\n):",
                  "children": []
                }
              ]
            },
            {
              "value": "ook = await get_webhook(webhook_id)\n    webhook_manager = WEBHOOK_MANAGERS_BY_NAME[webhook.provider]()\n\n    credentials = (\n        creds_manager.get(user_id, webhook.credentials_id)\n        if webhook.credentials_id\n        else None\n    )\n    try:\n        await webhook_manager.trigger_ping(webhook, credentials)\n    except NotImplementedError:\n        return False\n\n    if not await wait_for_webhook_event(webhook_id, event_type=\"ping\", timeout=10):\n        raise HTTPException(status_code=504, detail=\"Webhook ping timed out\")\n\n    return True\n\n\n#",
              "children": [
                {
                  "value": "ook = await get_webhook(webhook_id)",
                  "children": [
                    {
                      "value": "ook = await get_webhook(webhook_id)",
                      "children": [
                        {
                          "value": "ook = a",
                          "children": []
                        },
                        {
                          "value": "t get_webhook(webhook_id)",
                          "children": [
                            {
                              "value": "webhook(webhook_id)",
                              "children": [
                                {
                                  "value": "webhook(web",
                                  "children": []
                                },
                                {
                                  "value": "hook_id)",
                                  "children": [
                                    {
                                      "value": "ook_id)",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "ook_manager = WEBHOOK_MANAGERS_BY_NAME[webhook.provider]()",
                  "children": [
                    {
                      "value": "ook_manager = WEBHOOK_MANAGERS_BY_NAME[webhook.provider]()",
                      "children": [
                        {
                          "value": "ook_manager = W",
                          "children": []
                        },
                        {
                          "value": "OOK_MANAGERS_BY_NAME[webhook.provider]()",
                          "children": [
                            {
                              "value": "OOK_MANAGERS_BY_NAME[webhook.provider]()",
                              "children": [
                                {
                                  "value": "OOK_MANAGERS_BY_NAME[web",
                                  "children": []
                                },
                                {
                                  "value": "ook.provider]()",
                                  "children": [
                                    {
                                      "value": "ook.pro",
                                      "children": []
                                    },
                                    {
                                      "value": "ider]()",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "entials = (\n        creds_manager.get(user_id, webhook.credentials_id)\n        if webhook.credentials_id\n        else None\n    )",
                  "children": [
                    {
                      "value": "entials = (\n        creds_manager.get(user_id, webhook.credentials_id)\n        if webhook.credentials_id\n        else None\n    )",
                      "children": [
                        {
                          "value": "entials = (",
                          "children": []
                        },
                        {
                          "value": "creds_manager.get(user_id, webhook.credentials_id)\n        if webhook.credentials_id\n        else None\n    )",
                          "children": [
                            {
                              "value": "s_manager.get(user_id, webhook.credentials_id)\n        if webhook.credentials_id\n        else None",
                              "children": [
                                {
                                  "value": "s_manager.get(user_id, webhook.credentials_id)",
                                  "children": [
                                    {
                                      "value": "s_manager.get(use",
                                      "children": [
                                        {
                                          "value": "s_manager.get",
                                          "children": []
                                        },
                                        {
                                          "value": "use",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "r_id, webhook.credentials_id)",
                                      "children": [
                                        {
                                          "value": "_id, we",
                                          "children": []
                                        },
                                        {
                                          "value": "ook.credentials_id)",
                                          "children": [
                                            {
                                              "value": "ook.cre",
                                              "children": []
                                            },
                                            {
                                              "value": "entials_id)",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "ook.credentials_id",
                                  "children": [
                                    {
                                      "value": "ook.cre",
                                      "children": []
                                    },
                                    {
                                      "value": "entials_id",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "await webhook_manager.trigger_ping(webhook, credentials)\n    except NotImplementedError:\n        return False",
                  "children": [
                    {
                      "value": "t webhook_manager.trigger_ping(webhook, credentials)",
                      "children": [
                        {
                          "value": "t webhook_manager.trigger_ping(webhook, credentials)",
                          "children": [
                            {
                              "value": "t webhook_manager.trigger_ping(webhook, credentials)",
                              "children": [
                                {
                                  "value": "ook_manager.trigger_ping(webhook, credentials)",
                                  "children": [
                                    {
                                      "value": "ook_manager.trigger_ping(web",
                                      "children": [
                                        {
                                          "value": "ook_manager.tri",
                                          "children": []
                                        },
                                        {
                                          "value": "ger_ping(web",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "hook, credentials)",
                                      "children": [
                                        {
                                          "value": "ook, cr",
                                          "children": []
                                        },
                                        {
                                          "value": "entials)",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "pt NotImplementedError:\n        return False",
                      "children": [
                        {
                          "value": "mplementedError:",
                          "children": []
                        },
                        {
                          "value": "rn False",
                          "children": [
                            {
                              "value": "rn False",
                              "children": [
                                {
                                  "value": "e",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "ot await wait_for_webhook_event(webhook_id, event_type=\"ping\", timeout=10):\n        raise HTTPException(status_code=504, detail=\"Webhook ping timed out\")",
                  "children": [
                    {
                      "value": "await wait_for_webhook_event(webhook_id, event_type=\"ping\", timeout=10):",
                      "children": [
                        {
                          "value": "t wait_for_webhook_event(webhook_id, event_type=\"ping\", timeout=10):",
                          "children": [
                            {
                              "value": "_for_webhook_event(webhook_id, event_type=\"ping\", timeout=10):",
                              "children": [
                                {
                                  "value": "_for_webhook_event(web",
                                  "children": []
                                },
                                {
                                  "value": "hook_id, event_type=\"ping\", timeout=10):",
                                  "children": [
                                    {
                                      "value": "ook_id, ev",
                                      "children": []
                                    },
                                    {
                                      "value": "t_type=\"ping\", ti",
                                      "children": [
                                        {
                                          "value": "t_type=\"pi",
                                          "children": []
                                        },
                                        {
                                          "value": "g\", ti",
                                          "children": [
                                            {
                                              "value": "g",
                                              "children": []
                                            },
                                            {
                                              "value": "\", t",
                                              "children": []
                                            },
                                            {
                                              "value": "i",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "out=10):",
                                      "children": [
                                        {
                                          "value": "out=10)",
                                          "children": []
                                        },
                                        {
                                          "value": "",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "e HTTPException(status_code=504, detail=\"Webhook ping timed out\")",
                      "children": [
                        {
                          "value": "e HTTPException(status_code=504, detail=\"Webhook ping timed out\")",
                          "children": [
                            {
                              "value": "Exception(status_code=504, detail=\"Webhook ping timed out\")",
                              "children": [
                                {
                                  "value": "Exception(sta",
                                  "children": []
                                },
                                {
                                  "value": "tus_code=504, detail=\"Webhook ping timed out\")",
                                  "children": [
                                    {
                                      "value": "us_code=504, de",
                                      "children": [
                                        {
                                          "value": "us_code=504",
                                          "children": []
                                        },
                                        {
                                          "value": "de",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "il=\"Webhook ping timed out\")",
                                      "children": [
                                        {
                                          "value": "il=\"We",
                                          "children": []
                                        },
                                        {
                                          "value": "hook ping timed out\")",
                                          "children": [
                                            {
                                              "value": "h",
                                              "children": []
                                            },
                                            {
                                              "value": "ook ping timed out\")",
                                              "children": []
                                            },
                                            {
                                              "value": "",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "rn True\n\n\n#",
                  "children": [
                    {
                      "value": "#",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "------------------------- UTILITIES ---------------------------- #\n\n\na",
      "children": []
    },
    {
      "value": "c def remove_all_webhooks_for_credentials(\n    credentials: Credentials, force: bool = False\n) -> None:\n    \"\"\"\n    Remove and deregister all webhooks that were registered using the given credentials.\n\n    Params:\n        credentials: The credentials for which to remove the associated webhooks.\n        force: Whether to proceed if any of the webhooks are still in use.\n\n    Raises:\n        NeedConfirmation: If any of the webhooks are still in use and `force` is `False`\n    \"\"\"\n    webhooks = await get_all_webhooks_by_creds(credentials.id)\n    if credentials.provider not in WEBHOOK_MANAGERS_BY_NAME:\n        if webhooks:\n            logger.error(\n                f\"Credentials #{credentials.id} for provider {credentials.provider} \"\n                f\"are attached to {len(webhooks)} webhooks, \"\n                f\"but there is no available WebhooksHandler for {credentials.provider}\"\n            )\n        return\n    if any(w.attached_nodes for w in webhooks) and not force:\n        raise NeedConfirmation(\n            \"Some webhooks linked to these credentials are still in use by an agent\"\n        )\n    for webhook in webhooks:\n        # Unlink all nodes\n        for node in webhook.attached_nodes or []:\n            await set_node_webhook(node.id, None)\n\n        # Prune the webhook\n        webhook_manager = WEBHOOK_MANAGERS_BY_NAME[credentials.provider]()\n        success = await webhook_manager.prune_webhook_if_dangling(\n            webhook.id, credentials\n        )\n        if not success:\n            logger.warning(f\"Webhook #{webhook.id} failed to prune\")\n\n\nd",
      "children": [
        {
          "value": "ve_all_webhooks_for_credentials(",
          "children": []
        },
        {
          "value": "credentials: Credentials, force: bool = False\n) ->",
          "children": [
            {
              "value": "entials: Credentials, fo",
              "children": [
                {
                  "value": "entials: Cr",
                  "children": []
                },
                {
                  "value": "entials, fo",
                  "children": [
                    {
                      "value": "entials, fo",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "e: bool = False\n) -",
              "children": [
                {
                  "value": "e: bo",
                  "children": []
                },
                {
                  "value": "= F",
                  "children": [
                    {
                      "value": "= F",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "e\n) -",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": ":",
          "children": [
            {
              "value": ":",
              "children": []
            }
          ]
        },
        {
          "value": "Remove and deregister all webhooks that were registered using the given credentials.\n\n    Params:\n        credentials: The credentials for which to remove the associated webhooks.\n        force: Whether to proceed if any of the webhooks are still in use.\n\n    Raises:\n        NeedConfirmation: If any of the webhooks are still in use and `force` is `False`\n    \"\"\"\n    webhooks = await get_all_webhooks_by_creds(credentials.id)\n    if credentials.provider not in WEBHOOK_MANAGERS_BY_NAME:\n        if webhooks:\n            logger.error(\n                f\"Credentials #{credentials.id} for provider {credentials.provider} \"\n                f\"are attached to {len(webhooks)} webhooks, \"\n                f\"but there is no available WebhooksHandler for {credentials.provider}\"\n            )\n        return\n    if any(w.attached_nodes for w in webhooks) and not force:\n        raise NeedConfirmation(\n            \"Some webhooks linked to these credentials are still in use by an agent\"\n        )\n    for webhook in webhooks:\n        # Unlink all nodes\n        for node in webhook.attached_nodes or []:\n            await set_node_webhook(node.id, None)\n\n        # Prune the webhook\n        webhook_manager = WEBHOOK_MANAGERS_BY_NAME[credentials.provider]()\n        success = await webhook_manager.prune_webhook_if_dangling(\n            webhook.id, credentials\n        )\n        if not success:\n            logger.warning(f\"Webhook #{webhook.id} failed to prune\")\n\n\nd",
          "children": [
            {
              "value": "Remove and deregister all webhooks that were registered using the given credentials.\n\n    Params:\n        credentials: The credentials for which to remove the associated webhooks.\n        force: Whether to proceed if any of the webhooks are still in use.\n\n    Raises:\n        NeedConfirmation: If any of the webhooks are still in use and `force` is `False`\n    \"\"\"",
              "children": [
                {
                  "value": "Remove and deregister all webhooks that were registered using the given credentials.\n\n    Params:\n        credentials: The credentials for which to remove the associated webhooks.\n        force: Whether to proceed if any of the webhooks are still in use.\n\n    Raises:\n        NeedConfirmation: If any of the webhooks are still in use and `force` is `False`\n    \"\"\"",
                  "children": [
                    {
                      "value": "",
                      "children": []
                    },
                    {
                      "value": "Remove and deregister all webhooks that were registered using the given credentials.\n\n    Params:\n        credentials: The credentials for which to remove the associated webhooks.\n        force: Whether to proceed if any of the webhooks are still in use.\n\n    Raises:\n        NeedConfirmation: If any of the webhooks are still in use and `force` is `False`\n    \"\"\"",
                      "children": []
                    },
                    {
                      "value": "",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "ooks = await get_all_webhooks_by_creds(credentials.id)",
              "children": [
                {
                  "value": "ooks = await get_all_webhooks_by_creds(credentials.id)",
                  "children": [
                    {
                      "value": "ooks = a",
                      "children": []
                    },
                    {
                      "value": "t get_all_webhooks_by_creds(credentials.id)",
                      "children": [
                        {
                          "value": "all_webhooks_by_creds(credentials.id)",
                          "children": [
                            {
                              "value": "all_webhooks_by_creds(cre",
                              "children": []
                            },
                            {
                              "value": "dentials.id)",
                              "children": [
                                {
                                  "value": "entials.id)",
                                  "children": [
                                    {
                                      "value": "entials.id)",
                                      "children": []
                                    },
                                    {
                                      "value": "",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "redentials.provider not in WEBHOOK_MANAGERS_BY_NAME:\n        if webhooks:\n            logger.error(\n                f\"Credentials #{credentials.id} for provider {credentials.provider} \"\n                f\"are attached to {len(webhooks)} webhooks, \"\n                f\"but there is no available WebhooksHandler for {credentials.provider}\"\n            )\n        return",
              "children": [
                {
                  "value": "entials.provider not in WEBHOOK_MANAGERS_BY_NAME:",
                  "children": [
                    {
                      "value": "entials.provider not",
                      "children": [
                        {
                          "value": "entials.pro",
                          "children": []
                        },
                        {
                          "value": "ider not",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "OOK_MANAGERS_BY_NAME:",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "ebhooks:\n            logger.error(\n                f\"Credentials #{credentials.id} for provider {credentials.provider} \"\n                f\"are attached to {len(webhooks)} webhooks, \"\n                f\"but there is no available WebhooksHandler for {credentials.provider}\"\n            )\n        return",
                  "children": [
                    {
                      "value": "ebhooks:\n            logger.error(\n                f\"Credentials #{credentials.id} for provider {credentials.provider} \"\n                f\"are attached to {len(webhooks)} webhooks, \"\n                f\"but there is no available WebhooksHandler for {credentials.provider}\"\n            )",
                      "children": [
                        {
                          "value": "ooks:",
                          "children": []
                        },
                        {
                          "value": "er.error(\n                f\"Credentials #{credentials.id} for provider {credentials.provider} \"\n                f\"are attached to {len(webhooks)} webhooks, \"\n                f\"but there is no available WebhooksHandler for {credentials.provider}\"\n            )",
                          "children": [
                            {
                              "value": "er.error(\n                f\"Credentials #{credentials.id} for provider {credentials.provider} \"\n                f\"are attached to {len(webhooks)} webhooks, \"\n                f\"but there is no available WebhooksHandler for {credentials.provider}\"\n            )",
                              "children": [
                                {
                                  "value": "er.error(\n                f\"Credentials #{credentials.id} for provider {credentials.provider} \"\n                f\"are attached to {len(webhooks)} webhooks, \"\n                f\"but there is no available WebhooksHandler for {credentials.provider}\"\n            )",
                                  "children": [
                                    {
                                      "value": "er.error(",
                                      "children": [
                                        {
                                          "value": "er.err",
                                          "children": []
                                        },
                                        {
                                          "value": "r(",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "f\"Credentials #{credentials.id} for provider {credentials.provider} \"\n                f\"are attached to {len(webhooks)} webhooks, \"\n                f\"but there is no available WebhooksHandler for {credentials.provider}\"\n            )",
                                      "children": [
                                        {
                                          "value": "edentials #{credentials.id} for provider {credentials.provider} \"\n                f\"are attached to {len(webhooks)} webhooks, \"\n                f\"but there is no available WebhooksHandler for {credentials.provider}\"",
                                          "children": [
                                            {
                                              "value": "edentials #{credentials.id} for provider {credentials.provider} \"",
                                              "children": [
                                                {
                                                  "value": "ed",
                                                  "children": []
                                                },
                                                {
                                                  "value": "entials #{cre",
                                                  "children": []
                                                },
                                                {
                                                  "value": "dentials.id} for",
                                                  "children": [
                                                    {
                                                      "value": "entials.id} fo",
                                                      "children": [
                                                        {
                                                          "value": "entials.id}",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "fo",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "provider {cre",
                                                  "children": []
                                                },
                                                {
                                                  "value": "dentials.provider} \"",
                                                  "children": [
                                                    {
                                                      "value": "entials.provider} \"",
                                                      "children": [
                                                        {
                                                          "value": "entials.pro",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "ider} \"",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "",
                                                  "children": []
                                                },
                                                {
                                                  "value": "",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "e attached to {len(webhooks)} webhooks, \"",
                                              "children": [
                                                {
                                                  "value": "e",
                                                  "children": []
                                                },
                                                {
                                                  "value": "attached to {len",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(webhooks)} web",
                                                  "children": [
                                                    {
                                                      "value": "webhooks)} we",
                                                      "children": [
                                                        {
                                                          "value": "web",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "hooks)} we",
                                                          "children": [
                                                            {
                                                              "value": "ooks)} w",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "hooks, \"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "t there is no available WebhooksHandler for {credentials.provider}\"",
                                              "children": [
                                                {
                                                  "value": "t",
                                                  "children": []
                                                },
                                                {
                                                  "value": "there is no available WebhooksHandler for {cre",
                                                  "children": []
                                                },
                                                {
                                                  "value": "dentials.provider}\"",
                                                  "children": [
                                                    {
                                                      "value": "entials.provider}\"",
                                                      "children": [
                                                        {
                                                          "value": "entials.pro",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "ider}\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "rn",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "ny(w.attached_nodes for w in webhooks) and not force:\n        raise NeedConfirmation(\n            \"Some webhooks linked to these credentials are still in use by an agent\"\n        )",
              "children": [
                {
                  "value": "w.attached_nodes for w in webhooks) and not force:",
                  "children": [
                    {
                      "value": "w.attached_nodes for w in webhooks) and",
                      "children": [
                        {
                          "value": "w.a",
                          "children": []
                        },
                        {
                          "value": "ttached_nodes for w in webhooks) and",
                          "children": [
                            {
                              "value": "tached_nodes for",
                              "children": [
                                {
                                  "value": "t",
                                  "children": []
                                },
                                {
                                  "value": "ched_nodes for",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "w in webhooks) an",
                              "children": [
                                {
                                  "value": "",
                                  "children": []
                                },
                                {
                                  "value": "ooks) an",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "force:",
                      "children": [
                        {
                          "value": "e:",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "e NeedConfirmation(\n            \"Some webhooks linked to these credentials are still in use by an agent\"\n        )",
                  "children": [
                    {
                      "value": "e NeedConfirmation(\n            \"Some webhooks linked to these credentials are still in use by an agent\"\n        )",
                      "children": [
                        {
                          "value": "Confirmation(\n            \"Some webhooks linked to these credentials are still in use by an agent\"\n        )",
                          "children": [
                            {
                              "value": "Confirmation(",
                              "children": []
                            },
                            {
                              "value": "\"Some webhooks linked to these credentials are still in use by an agent\"\n        )",
                              "children": [
                                {
                                  "value": "e webhooks linked to these credentials are still in use by an agent\"",
                                  "children": [
                                    {
                                      "value": "e",
                                      "children": []
                                    },
                                    {
                                      "value": "webhooks linked to these credentials are still in use by an agent\"",
                                      "children": []
                                    },
                                    {
                                      "value": "",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "webhook in webhooks:\n        # Unlink all nodes\n        for node in webhook.attached_nodes or []:\n            await set_node_webhook(node.id, None)\n\n        # Prune the webhook\n        webhook_manager = WEBHOOK_MANAGERS_BY_NAME[credentials.provider]()\n        success = await webhook_manager.prune_webhook_if_dangling(\n            webhook.id, credentials\n        )\n        if not success:\n            logger.warning(f\"Webhook #{webhook.id} failed to prune\")\n\n\nd",
              "children": [
                {
                  "value": "ook in",
                  "children": []
                },
                {
                  "value": "ooks:",
                  "children": []
                },
                {
                  "value": "link all nodes",
                  "children": []
                },
                {
                  "value": "node in webhook.attached_nodes or []:\n            await set_node_webhook(node.id, None)\n\n        # Prune the webhook\n        webhook_manager = WEBHOOK_MANAGERS_BY_NAME[credentials.provider]()\n        success = await webhook_manager.prune_webhook_if_dangling(\n            webhook.id, credentials\n        )\n        if not success:\n            logger.warning(f\"Webhook #{webhook.id} failed to prune\")\n\n\nd",
                  "children": [
                    {
                      "value": "node in webhook.attached_nodes or []:\n            await set_node_webhook(node.id, None)",
                      "children": [
                        {
                          "value": "in",
                          "children": []
                        },
                        {
                          "value": "ook.attached_nodes or []:",
                          "children": [
                            {
                              "value": "ook.attached_nodes or",
                              "children": [
                                {
                                  "value": "ook.att",
                                  "children": []
                                },
                                {
                                  "value": "ched_nodes or",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "t set_node_webhook(node.id, None)",
                          "children": [
                            {
                              "value": "t set_node_webhook(node.id, None)",
                              "children": [
                                {
                                  "value": "t set_node_webhook(node.id, None)",
                                  "children": [
                                    {
                                      "value": "node_webhook(node.id, None)",
                                      "children": [
                                        {
                                          "value": "node_webhook(nod",
                                          "children": []
                                        },
                                        {
                                          "value": "e.id, None)",
                                          "children": [
                                            {
                                              "value": ".id, No",
                                              "children": [
                                                {
                                                  "value": ".id,",
                                                  "children": []
                                                },
                                                {
                                                  "value": "No",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": ")",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "une the webhook",
                      "children": []
                    },
                    {
                      "value": "ook_manager = WEBHOOK_MANAGERS_BY_NAME[credentials.provider]()",
                      "children": [
                        {
                          "value": "ook_manager = WEBHOOK_MANAGERS_BY_NAME[credentials.provider]()",
                          "children": [
                            {
                              "value": "ook_manager = W",
                              "children": []
                            },
                            {
                              "value": "OOK_MANAGERS_BY_NAME[credentials.provider]()",
                              "children": [
                                {
                                  "value": "OOK_MANAGERS_BY_NAME[credentials.provider]()",
                                  "children": [
                                    {
                                      "value": "OOK_MANAGERS_BY_NAME[cre",
                                      "children": []
                                    },
                                    {
                                      "value": "entials.provider]()",
                                      "children": [
                                        {
                                          "value": "entials.pro",
                                          "children": []
                                        },
                                        {
                                          "value": "ider]()",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "ess = await webhook_manager.prune_webhook_if_dangling(\n            webhook.id, credentials\n        )",
                      "children": [
                        {
                          "value": "ess = await webhook_manager.prune_webhook_if_dangling(\n            webhook.id, credentials\n        )",
                          "children": [
                            {
                              "value": "ess = a",
                              "children": []
                            },
                            {
                              "value": "t webhook_manager.prune_webhook_if_dangling(\n            webhook.id, credentials\n        )",
                              "children": [
                                {
                                  "value": "ook_manager.prune_webhook_if_dangling(\n            webhook.id, credentials\n        )",
                                  "children": [
                                    {
                                      "value": "ook_manager.prune_webhook_if_dangling(",
                                      "children": [
                                        {
                                          "value": "ook_manager.pru",
                                          "children": []
                                        },
                                        {
                                          "value": "e_webhook_if_dangling(",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "webhook.id, credentials\n        )",
                                      "children": [
                                        {
                                          "value": "ook.id, cr",
                                          "children": [
                                            {
                                              "value": "ook.id,",
                                              "children": []
                                            },
                                            {
                                              "value": "cr",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "entials",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "ot success:\n            logger.warning(f\"Webhook #{webhook.id} failed to prune\")\n\n\nd",
                      "children": [
                        {
                          "value": "success:",
                          "children": [
                            {
                              "value": "ess:",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "er.warning(f\"Webhook #{webhook.id} failed to prune\")\n\n\nd",
                          "children": [
                            {
                              "value": "er.warning(f\"Webhook #{webhook.id} failed to prune\")\n\n\nd",
                              "children": [
                                {
                                  "value": "er.warning(f\"Webhook #{webhook.id} failed to prune\")\n\n\nd",
                                  "children": [
                                    {
                                      "value": "er.warning(f\"W",
                                      "children": [
                                        {
                                          "value": "er.war",
                                          "children": []
                                        },
                                        {
                                          "value": "ing(f\"W",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "ebhook #{webhook.id} failed to prune\")\n\n\nd",
                                      "children": [
                                        {
                                          "value": "bhook #{webhook.id} failed to prune\")",
                                          "children": [
                                            {
                                              "value": "bh",
                                              "children": []
                                            },
                                            {
                                              "value": "ook #{web",
                                              "children": []
                                            },
                                            {
                                              "value": "hook.id} fai",
                                              "children": [
                                                {
                                                  "value": "ook.id} fa",
                                                  "children": [
                                                    {
                                                      "value": "ook.id}",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "fa",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "led to prune\")",
                                              "children": []
                                            },
                                            {
                                              "value": "",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "_get_provider_oauth_handler(\n    req: Request, provider_name: ProviderName\n) -> \"BaseOAuthHandler\":\n    if provider_name not in HANDLERS_BY_NAME:\n        raise HTTPException(\n            status_code=404,\n            detail=f\"Provider '{provider_name.value}' does not support OAuth\",\n        )\n\n    client_id = getattr(settings.secrets, f\"{provider_name.value}_client_id\")\n    client_secret = getattr(settings.secrets, f\"{provider_name.value}_client_secret\")\n    if not (client_id and client_secret):\n        raise HTTPException(\n            status_code=501,\n            detail=(\n                f\"Integration with provider '{provider_name.value}' is not configured\"\n            ),\n        )\n\n    handler_class = HANDLERS_BY_NAME[provider_name]\n    frontend_base_url = (\n        settings.config.frontend_base_url\n        or settings.config.platform_base_url\n        or str(req.base_url)\n    )\n    return handler_class(\n        client_id=client_id,\n        client_secret=client_secret,\n        redirect_uri=f\"{frontend_base_url}/auth/integrations/oauth_callback\",\n    )",
      "children": [
        {
          "value": "_provider_oauth_handler(",
          "children": []
        },
        {
          "value": "req: Request, provider_name: ProviderName\n) ->",
          "children": [
            {
              "value": "Request, pr",
              "children": [
                {
                  "value": "Re",
                  "children": []
                },
                {
                  "value": "est, pr",
                  "children": [
                    {
                      "value": "est, pr",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "ider_name: ProviderName\n) -",
              "children": [
                {
                  "value": "ider_name: Pr",
                  "children": []
                },
                {
                  "value": "iderName\n) -",
                  "children": [
                    {
                      "value": "iderName\n) -",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "eOAuthHandler\":",
          "children": [
            {
              "value": "eOAuthHandler\":",
              "children": [
                {
                  "value": "e",
                  "children": []
                },
                {
                  "value": "OAuthHandler\":",
                  "children": []
                },
                {
                  "value": "",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "rovider_name not in HANDLERS_BY_NAME:\n        raise HTTPException(\n            status_code=404,\n            detail=f\"Provider '{provider_name.value}' does not support OAuth\",\n        )\n\n    client_id = getattr(settings.secrets, f\"{provider_name.value}_client_id\")\n    client_secret = getattr(settings.secrets, f\"{provider_name.value}_client_secret\")\n    if not (client_id and client_secret):\n        raise HTTPException(\n            status_code=501,\n            detail=(\n                f\"Integration with provider '{provider_name.value}' is not configured\"\n            ),\n        )\n\n    handler_class = HANDLERS_BY_NAME[provider_name]\n    frontend_base_url = (\n        settings.config.frontend_base_url\n        or settings.config.platform_base_url\n        or str(req.base_url)\n    )\n    return handler_class(\n        client_id=client_id,\n        client_secret=client_secret,\n        redirect_uri=f\"{frontend_base_url}/auth/integrations/oauth_callback\",\n    )",
          "children": [
            {
              "value": "rovider_name not in HANDLERS_BY_NAME:\n        raise HTTPException(\n            status_code=404,\n            detail=f\"Provider '{provider_name.value}' does not support OAuth\",\n        )",
              "children": [
                {
                  "value": "ider_name not in HANDLERS_BY_NAME:",
                  "children": [
                    {
                      "value": "ider_name not",
                      "children": []
                    },
                    {
                      "value": "LERS_BY_NAME:",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "e HTTPException(\n            status_code=404,\n            detail=f\"Provider '{provider_name.value}' does not support OAuth\",\n        )",
                  "children": [
                    {
                      "value": "e HTTPException(\n            status_code=404,\n            detail=f\"Provider '{provider_name.value}' does not support OAuth\",\n        )",
                      "children": [
                        {
                          "value": "Exception(\n            status_code=404,\n            detail=f\"Provider '{provider_name.value}' does not support OAuth\",\n        )",
                          "children": [
                            {
                              "value": "Exception(",
                              "children": []
                            },
                            {
                              "value": "status_code=404,\n            detail=f\"Provider '{provider_name.value}' does not support OAuth\",\n        )",
                              "children": [
                                {
                                  "value": "us_code=404,",
                                  "children": [
                                    {
                                      "value": "us_code=404",
                                      "children": []
                                    },
                                    {
                                      "value": "",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "il=f\"Provider '{provider_name.value}' does not support OAuth\",",
                                  "children": [
                                    {
                                      "value": "il=f\"P",
                                      "children": []
                                    },
                                    {
                                      "value": "ovider '{provider_name.value}' does not support OAuth\",",
                                      "children": [
                                        {
                                          "value": "ov",
                                          "children": []
                                        },
                                        {
                                          "value": "ider '{pro",
                                          "children": []
                                        },
                                        {
                                          "value": "vider_name.value}' do",
                                          "children": [
                                            {
                                              "value": "ider_name.value}' d",
                                              "children": [
                                                {
                                                  "value": "ider_name.val",
                                                  "children": []
                                                },
                                                {
                                                  "value": "e}' d",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "es not support OAuth\",",
                                          "children": []
                                        },
                                        {
                                          "value": "",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "nt_id = getattr(settings.secrets, f\"{provider_name.value}_client_id\")",
              "children": [
                {
                  "value": "nt_id = getattr(settings.secrets, f\"{provider_name.value}_client_id\")",
                  "children": [
                    {
                      "value": "nt_id = g",
                      "children": []
                    },
                    {
                      "value": "ttr(settings.secrets, f\"{provider_name.value}_client_id\")",
                      "children": [
                        {
                          "value": "ttr(set",
                          "children": []
                        },
                        {
                          "value": "tings.secrets, f\"{provider_name.value}_client_id\")",
                          "children": [
                            {
                              "value": "ings.secrets, f\"",
                              "children": [
                                {
                                  "value": "ings.sec",
                                  "children": []
                                },
                                {
                                  "value": "ets, f\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "rovider_name.value}_client_id\")",
                              "children": [
                                {
                                  "value": "ro",
                                  "children": []
                                },
                                {
                                  "value": "vider_name.value}_cli",
                                  "children": [
                                    {
                                      "value": "ider_name.value}_cl",
                                      "children": [
                                        {
                                          "value": "ider_name.val",
                                          "children": []
                                        },
                                        {
                                          "value": "e}_cl",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "ent_id\")",
                                  "children": []
                                },
                                {
                                  "value": "",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "nt_secret = getattr(settings.secrets, f\"{provider_name.value}_client_secret\")",
              "children": [
                {
                  "value": "nt_secret = getattr(settings.secrets, f\"{provider_name.value}_client_secret\")",
                  "children": [
                    {
                      "value": "nt_secret = g",
                      "children": []
                    },
                    {
                      "value": "ttr(settings.secrets, f\"{provider_name.value}_client_secret\")",
                      "children": [
                        {
                          "value": "ttr(set",
                          "children": []
                        },
                        {
                          "value": "tings.secrets, f\"{provider_name.value}_client_secret\")",
                          "children": [
                            {
                              "value": "ings.secrets, f\"",
                              "children": [
                                {
                                  "value": "ings.sec",
                                  "children": []
                                },
                                {
                                  "value": "ets, f\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "rovider_name.value}_client_secret\")",
                              "children": [
                                {
                                  "value": "ro",
                                  "children": []
                                },
                                {
                                  "value": "vider_name.value}_cli",
                                  "children": [
                                    {
                                      "value": "ider_name.value}_cl",
                                      "children": [
                                        {
                                          "value": "ider_name.val",
                                          "children": []
                                        },
                                        {
                                          "value": "e}_cl",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "ent_secret\")",
                                  "children": []
                                },
                                {
                                  "value": "",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "ot (client_id and client_secret):\n        raise HTTPException(\n            status_code=501,\n            detail=(\n                f\"Integration with provider '{provider_name.value}' is not configured\"\n            ),\n        )",
              "children": [
                {
                  "value": "(client_id and client_secret):",
                  "children": [
                    {
                      "value": "ent_id and client_secret):",
                      "children": [
                        {
                          "value": "nt_id and client_secret):",
                          "children": [
                            {
                              "value": "nt_id and",
                              "children": []
                            },
                            {
                              "value": "nt_secret):",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "e HTTPException(\n            status_code=501,\n            detail=(\n                f\"Integration with provider '{provider_name.value}' is not configured\"\n            ),\n        )",
                  "children": [
                    {
                      "value": "e HTTPException(\n            status_code=501,\n            detail=(\n                f\"Integration with provider '{provider_name.value}' is not configured\"\n            ),\n        )",
                      "children": [
                        {
                          "value": "Exception(\n            status_code=501,\n            detail=(\n                f\"Integration with provider '{provider_name.value}' is not configured\"\n            ),\n        )",
                          "children": [
                            {
                              "value": "Exception(",
                              "children": []
                            },
                            {
                              "value": "status_code=501,\n            detail=(\n                f\"Integration with provider '{provider_name.value}' is not configured\"\n            ),\n        )",
                              "children": [
                                {
                                  "value": "us_code=501,",
                                  "children": [
                                    {
                                      "value": "us_code=501",
                                      "children": []
                                    },
                                    {
                                      "value": "",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "il=(\n                f\"Integration with provider '{provider_name.value}' is not configured\"\n            ),",
                                  "children": [
                                    {
                                      "value": "il=(",
                                      "children": []
                                    },
                                    {
                                      "value": "f\"Integration with provider '{provider_name.value}' is not configured\"\n            ),",
                                      "children": [
                                        {
                                          "value": "tegration with provider '{provider_name.value}' is not configured\"",
                                          "children": [
                                            {
                                              "value": "te",
                                              "children": []
                                            },
                                            {
                                              "value": "gration with provider '{pro",
                                              "children": []
                                            },
                                            {
                                              "value": "vider_name.value}' is",
                                              "children": [
                                                {
                                                  "value": "ider_name.value}' i",
                                                  "children": [
                                                    {
                                                      "value": "ider_name.val",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "e}' i",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "not configured\"",
                                              "children": []
                                            },
                                            {
                                              "value": "",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "ler_class = HANDLERS_BY_NAME[provider_name]",
              "children": [
                {
                  "value": "ler_class = HANDLERS_BY_NAME[provider_name]",
                  "children": [
                    {
                      "value": "ler_class = H",
                      "children": []
                    },
                    {
                      "value": "LERS_BY_NAME[provider_name]",
                      "children": [
                        {
                          "value": "LERS_BY_NAME[pro",
                          "children": []
                        },
                        {
                          "value": "ider_name]",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "tend_base_url = (\n        settings.config.frontend_base_url\n        or settings.config.platform_base_url\n        or str(req.base_url)\n    )",
              "children": [
                {
                  "value": "tend_base_url = (\n        settings.config.frontend_base_url\n        or settings.config.platform_base_url\n        or str(req.base_url)\n    )",
                  "children": [
                    {
                      "value": "tend_base_url = (",
                      "children": []
                    },
                    {
                      "value": "settings.config.frontend_base_url\n        or settings.config.platform_base_url\n        or str(req.base_url)\n    )",
                      "children": [
                        {
                          "value": "ings.config.frontend_base_url\n        or settings.config.platform_base_url\n        or str(req.base_url)",
                          "children": [
                            {
                              "value": "ings.config.frontend_base_url\n        or settings.config.platform_base_url",
                              "children": [
                                {
                                  "value": "ings.config.frontend_base_url",
                                  "children": [
                                    {
                                      "value": "ings.config.fro",
                                      "children": [
                                        {
                                          "value": "ings.con",
                                          "children": []
                                        },
                                        {
                                          "value": "ig.fro",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "tend_base_url",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "ings.config.platform_base_url",
                                  "children": [
                                    {
                                      "value": "ings.config.pla",
                                      "children": [
                                        {
                                          "value": "ings.con",
                                          "children": []
                                        },
                                        {
                                          "value": "ig.pla",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "form_base_url",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "req.base_url)",
                              "children": [
                                {
                                  "value": "req",
                                  "children": []
                                },
                                {
                                  "value": ".base_url)",
                                  "children": [
                                    {
                                      "value": "base_url)",
                                      "children": [
                                        {
                                          "value": "bas",
                                          "children": []
                                        },
                                        {
                                          "value": "_url)",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "rn handler_class(\n        client_id=client_id,\n        client_secret=client_secret,\n        redirect_uri=f\"{frontend_base_url}/auth/integrations/oauth_callback\",\n    )",
              "children": [
                {
                  "value": "ler_class(\n        client_id=client_id,\n        client_secret=client_secret,\n        redirect_uri=f\"{frontend_base_url}/auth/integrations/oauth_callback\",\n    )",
                  "children": [
                    {
                      "value": "ler_class(",
                      "children": []
                    },
                    {
                      "value": "client_id=client_id,\n        client_secret=client_secret,\n        redirect_uri=f\"{frontend_base_url}/auth/integrations/oauth_callback\",\n    )",
                      "children": [
                        {
                          "value": "nt_id=client_id,",
                          "children": [
                            {
                              "value": "nt_id=cli",
                              "children": []
                            },
                            {
                              "value": "nt_id,",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "nt_secret=client_secret,",
                          "children": [
                            {
                              "value": "nt_secret=cli",
                              "children": []
                            },
                            {
                              "value": "nt_secret,",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "rect_uri=f\"{frontend_base_url}/auth/integrations/oauth_callback\",",
                          "children": [
                            {
                              "value": "rect_uri=f\"{",
                              "children": []
                            },
                            {
                              "value": "rontend_base_url}/auth/integrations/oauth_callback\",",
                              "children": [
                                {
                                  "value": "ro",
                                  "children": []
                                },
                                {
                                  "value": "ntend_base_url}/aut",
                                  "children": [
                                    {
                                      "value": "tend_base_url}/au",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "h/integrations/oauth_callback\",",
                                  "children": []
                                },
                                {
                                  "value": "",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}