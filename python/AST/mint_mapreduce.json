{
  "value": "# -*- coding: utf-8 -*-\n\nfrom mrjob.job import MRJob\n\n\nclass SpendingByCategory(MRJob):\n\n    def __init__(self, categorizer):\n        self.categorizer = categorizer\n        ...\n\n    def current_year_month(self):\n        \"\"\"Return the current year and month.\"\"\"\n        ...\n\n    def extract_year_month(self, timestamp):\n        \"\"\"Return the year and month portions of the timestamp.\"\"\"\n        ...\n\n    def handle_budget_notifications(self, key, total):\n        \"\"\"Call notification API if nearing or exceeded budget.\"\"\"\n        ...\n\n    def mapper(self, _, line):\n        \"\"\"Parse each log line, extract and transform relevant lines.\n\n        Emit key value pairs of the form:\n\n        (2016-01, shopping), 25\n        (2016-01, shopping), 100\n        (2016-01, gas), 50\n        \"\"\"\n        timestamp, category, amount = line.split('\\t')\n        period = self. extract_year_month(timestamp)\n        if period == self.current_year_month():\n            yield (period, category), amount\n\n    def reducer(self, key, values):\n        \"\"\"Sum values for each key.\n\n        (2016-01, shopping), 125\n        (2016-01, gas), 50\n        \"\"\"\n        total = sum(values)\n        self.handle_budget_notifications(key, total)\n        yield key, sum(values)\n\n    def steps(self):\n        \"\"\"Run the map and reduce steps.\"\"\"\n        return [\n            self.mr(mapper=self.mapper,\n                    reducer=self.reducer)\n        ]\n\n\nif __name__ == '__main__':\n    SpendingByCategory.run()",
  "children": [
    {
      "value": "# -*- coding: utf-8 -*-",
      "children": []
    },
    {
      "value": "from mrjob.job import MRJob",
      "children": [
        {
          "value": "mrjob.job",
          "children": [
            {
              "value": "mrjob",
              "children": []
            },
            {
              "value": "job",
              "children": []
            }
          ]
        },
        {
          "value": "MRJob",
          "children": [
            {
              "value": "MRJob",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "class SpendingByCategory(MRJob):\n\n    def __init__(self, categorizer):\n        self.categorizer = categorizer\n        ...\n\n    def current_year_month(self):\n        \"\"\"Return the current year and month.\"\"\"\n        ...\n\n    def extract_year_month(self, timestamp):\n        \"\"\"Return the year and month portions of the timestamp.\"\"\"\n        ...\n\n    def handle_budget_notifications(self, key, total):\n        \"\"\"Call notification API if nearing or exceeded budget.\"\"\"\n        ...\n\n    def mapper(self, _, line):\n        \"\"\"Parse each log line, extract and transform relevant lines.\n\n        Emit key value pairs of the form:\n\n        (2016-01, shopping), 25\n        (2016-01, shopping), 100\n        (2016-01, gas), 50\n        \"\"\"\n        timestamp, category, amount = line.split('\\t')\n        period = self. extract_year_month(timestamp)\n        if period == self.current_year_month():\n            yield (period, category), amount\n\n    def reducer(self, key, values):\n        \"\"\"Sum values for each key.\n\n        (2016-01, shopping), 125\n        (2016-01, gas), 50\n        \"\"\"\n        total = sum(values)\n        self.handle_budget_notifications(key, total)\n        yield key, sum(values)\n\n    def steps(self):\n        \"\"\"Run the map and reduce steps.\"\"\"\n        return [\n            self.mr(mapper=self.mapper,\n                    reducer=self.reducer)\n        ]",
      "children": [
        {
          "value": "SpendingByCategory",
          "children": []
        },
        {
          "value": "(MRJob)",
          "children": [
            {
              "value": "MRJob",
              "children": []
            }
          ]
        },
        {
          "value": "def __init__(self, categorizer):\n        self.categorizer = categorizer\n        ...\n\n    def current_year_month(self):\n        \"\"\"Return the current year and month.\"\"\"\n        ...\n\n    def extract_year_month(self, timestamp):\n        \"\"\"Return the year and month portions of the timestamp.\"\"\"\n        ...\n\n    def handle_budget_notifications(self, key, total):\n        \"\"\"Call notification API if nearing or exceeded budget.\"\"\"\n        ...\n\n    def mapper(self, _, line):\n        \"\"\"Parse each log line, extract and transform relevant lines.\n\n        Emit key value pairs of the form:\n\n        (2016-01, shopping), 25\n        (2016-01, shopping), 100\n        (2016-01, gas), 50\n        \"\"\"\n        timestamp, category, amount = line.split('\\t')\n        period = self. extract_year_month(timestamp)\n        if period == self.current_year_month():\n            yield (period, category), amount\n\n    def reducer(self, key, values):\n        \"\"\"Sum values for each key.\n\n        (2016-01, shopping), 125\n        (2016-01, gas), 50\n        \"\"\"\n        total = sum(values)\n        self.handle_budget_notifications(key, total)\n        yield key, sum(values)\n\n    def steps(self):\n        \"\"\"Run the map and reduce steps.\"\"\"\n        return [\n            self.mr(mapper=self.mapper,\n                    reducer=self.reducer)\n        ]",
          "children": [
            {
              "value": "def __init__(self, categorizer):\n        self.categorizer = categorizer\n        ...",
              "children": [
                {
                  "value": "__init__",
                  "children": []
                },
                {
                  "value": "(self, categorizer)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "categorizer",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "self.categorizer = categorizer\n        ...",
                  "children": [
                    {
                      "value": "self.categorizer = categorizer",
                      "children": [
                        {
                          "value": "self.categorizer = categorizer",
                          "children": [
                            {
                              "value": "self.categorizer",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "categorizer",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "categorizer",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "...",
                      "children": [
                        {
                          "value": "...",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def current_year_month(self):\n        \"\"\"Return the current year and month.\"\"\"\n        ...",
              "children": [
                {
                  "value": "current_year_month",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "\"\"\"Return the current year and month.\"\"\"\n        ...",
                  "children": [
                    {
                      "value": "\"\"\"Return the current year and month.\"\"\"",
                      "children": [
                        {
                          "value": "\"\"\"Return the current year and month.\"\"\"",
                          "children": [
                            {
                              "value": "\"\"\"",
                              "children": []
                            },
                            {
                              "value": "Return the current year and month.",
                              "children": []
                            },
                            {
                              "value": "\"\"\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "...",
                      "children": [
                        {
                          "value": "...",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def extract_year_month(self, timestamp):\n        \"\"\"Return the year and month portions of the timestamp.\"\"\"\n        ...",
              "children": [
                {
                  "value": "extract_year_month",
                  "children": []
                },
                {
                  "value": "(self, timestamp)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "timestamp",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "\"\"\"Return the year and month portions of the timestamp.\"\"\"\n        ...",
                  "children": [
                    {
                      "value": "\"\"\"Return the year and month portions of the timestamp.\"\"\"",
                      "children": [
                        {
                          "value": "\"\"\"Return the year and month portions of the timestamp.\"\"\"",
                          "children": [
                            {
                              "value": "\"\"\"",
                              "children": []
                            },
                            {
                              "value": "Return the year and month portions of the timestamp.",
                              "children": []
                            },
                            {
                              "value": "\"\"\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "...",
                      "children": [
                        {
                          "value": "...",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def handle_budget_notifications(self, key, total):\n        \"\"\"Call notification API if nearing or exceeded budget.\"\"\"\n        ...",
              "children": [
                {
                  "value": "handle_budget_notifications",
                  "children": []
                },
                {
                  "value": "(self, key, total)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "key",
                      "children": []
                    },
                    {
                      "value": "total",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "\"\"\"Call notification API if nearing or exceeded budget.\"\"\"\n        ...",
                  "children": [
                    {
                      "value": "\"\"\"Call notification API if nearing or exceeded budget.\"\"\"",
                      "children": [
                        {
                          "value": "\"\"\"Call notification API if nearing or exceeded budget.\"\"\"",
                          "children": [
                            {
                              "value": "\"\"\"",
                              "children": []
                            },
                            {
                              "value": "Call notification API if nearing or exceeded budget.",
                              "children": []
                            },
                            {
                              "value": "\"\"\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "...",
                      "children": [
                        {
                          "value": "...",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def mapper(self, _, line):\n        \"\"\"Parse each log line, extract and transform relevant lines.\n\n        Emit key value pairs of the form:\n\n        (2016-01, shopping), 25\n        (2016-01, shopping), 100\n        (2016-01, gas), 50\n        \"\"\"\n        timestamp, category, amount = line.split('\\t')\n        period = self. extract_year_month(timestamp)\n        if period == self.current_year_month():\n            yield (period, category), amount",
              "children": [
                {
                  "value": "mapper",
                  "children": []
                },
                {
                  "value": "(self, _, line)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "_",
                      "children": []
                    },
                    {
                      "value": "line",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "\"\"\"Parse each log line, extract and transform relevant lines.\n\n        Emit key value pairs of the form:\n\n        (2016-01, shopping), 25\n        (2016-01, shopping), 100\n        (2016-01, gas), 50\n        \"\"\"\n        timestamp, category, amount = line.split('\\t')\n        period = self. extract_year_month(timestamp)\n        if period == self.current_year_month():\n            yield (period, category), amount",
                  "children": [
                    {
                      "value": "\"\"\"Parse each log line, extract and transform relevant lines.\n\n        Emit key value pairs of the form:\n\n        (2016-01, shopping), 25\n        (2016-01, shopping), 100\n        (2016-01, gas), 50\n        \"\"\"",
                      "children": [
                        {
                          "value": "\"\"\"Parse each log line, extract and transform relevant lines.\n\n        Emit key value pairs of the form:\n\n        (2016-01, shopping), 25\n        (2016-01, shopping), 100\n        (2016-01, gas), 50\n        \"\"\"",
                          "children": [
                            {
                              "value": "\"\"\"",
                              "children": []
                            },
                            {
                              "value": "Parse each log line, extract and transform relevant lines.\n\n        Emit key value pairs of the form:\n\n        (2016-01, shopping), 25\n        (2016-01, shopping), 100\n        (2016-01, gas), 50",
                              "children": []
                            },
                            {
                              "value": "\"\"\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "timestamp, category, amount = line.split('\\t')",
                      "children": [
                        {
                          "value": "timestamp, category, amount = line.split('\\t')",
                          "children": [
                            {
                              "value": "timestamp, category, amount",
                              "children": [
                                {
                                  "value": "timestamp",
                                  "children": []
                                },
                                {
                                  "value": "category",
                                  "children": []
                                },
                                {
                                  "value": "amount",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "line.split('\\t')",
                              "children": [
                                {
                                  "value": "line.split",
                                  "children": [
                                    {
                                      "value": "line",
                                      "children": []
                                    },
                                    {
                                      "value": "split",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "('\\t')",
                                  "children": [
                                    {
                                      "value": "'\\t'",
                                      "children": [
                                        {
                                          "value": "'",
                                          "children": []
                                        },
                                        {
                                          "value": "\\t",
                                          "children": [
                                            {
                                              "value": "\\t",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "'",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "period = self. extract_year_month(timestamp)",
                      "children": [
                        {
                          "value": "period = self. extract_year_month(timestamp)",
                          "children": [
                            {
                              "value": "period",
                              "children": []
                            },
                            {
                              "value": "self. extract_year_month(timestamp)",
                              "children": [
                                {
                                  "value": "self. extract_year_month",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "extract_year_month",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(timestamp)",
                                  "children": [
                                    {
                                      "value": "timestamp",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if period == self.current_year_month():\n            yield (period, category), amount",
                      "children": [
                        {
                          "value": "period == self.current_year_month()",
                          "children": [
                            {
                              "value": "period",
                              "children": []
                            },
                            {
                              "value": "self.current_year_month()",
                              "children": [
                                {
                                  "value": "self.current_year_month",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "current_year_month",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "yield (period, category), amount",
                          "children": [
                            {
                              "value": "yield (period, category), amount",
                              "children": [
                                {
                                  "value": "yield (period, category), amount",
                                  "children": [
                                    {
                                      "value": "(period, category), amount",
                                      "children": [
                                        {
                                          "value": "(period, category)",
                                          "children": [
                                            {
                                              "value": "period",
                                              "children": []
                                            },
                                            {
                                              "value": "category",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "amount",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def reducer(self, key, values):\n        \"\"\"Sum values for each key.\n\n        (2016-01, shopping), 125\n        (2016-01, gas), 50\n        \"\"\"\n        total = sum(values)\n        self.handle_budget_notifications(key, total)\n        yield key, sum(values)",
              "children": [
                {
                  "value": "reducer",
                  "children": []
                },
                {
                  "value": "(self, key, values)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "key",
                      "children": []
                    },
                    {
                      "value": "values",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "\"\"\"Sum values for each key.\n\n        (2016-01, shopping), 125\n        (2016-01, gas), 50\n        \"\"\"\n        total = sum(values)\n        self.handle_budget_notifications(key, total)\n        yield key, sum(values)",
                  "children": [
                    {
                      "value": "\"\"\"Sum values for each key.\n\n        (2016-01, shopping), 125\n        (2016-01, gas), 50\n        \"\"\"",
                      "children": [
                        {
                          "value": "\"\"\"Sum values for each key.\n\n        (2016-01, shopping), 125\n        (2016-01, gas), 50\n        \"\"\"",
                          "children": [
                            {
                              "value": "\"\"\"",
                              "children": []
                            },
                            {
                              "value": "Sum values for each key.\n\n        (2016-01, shopping), 125\n        (2016-01, gas), 50",
                              "children": []
                            },
                            {
                              "value": "\"\"\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "total = sum(values)",
                      "children": [
                        {
                          "value": "total = sum(values)",
                          "children": [
                            {
                              "value": "total",
                              "children": []
                            },
                            {
                              "value": "sum(values)",
                              "children": [
                                {
                                  "value": "sum",
                                  "children": []
                                },
                                {
                                  "value": "(values)",
                                  "children": [
                                    {
                                      "value": "values",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.handle_budget_notifications(key, total)",
                      "children": [
                        {
                          "value": "self.handle_budget_notifications(key, total)",
                          "children": [
                            {
                              "value": "self.handle_budget_notifications",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "handle_budget_notifications",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(key, total)",
                              "children": [
                                {
                                  "value": "key",
                                  "children": []
                                },
                                {
                                  "value": "total",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "yield key, sum(values)",
                      "children": [
                        {
                          "value": "yield key, sum(values)",
                          "children": [
                            {
                              "value": "key, sum(values)",
                              "children": [
                                {
                                  "value": "key",
                                  "children": []
                                },
                                {
                                  "value": "sum(values)",
                                  "children": [
                                    {
                                      "value": "sum",
                                      "children": []
                                    },
                                    {
                                      "value": "(values)",
                                      "children": [
                                        {
                                          "value": "values",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def steps(self):\n        \"\"\"Run the map and reduce steps.\"\"\"\n        return [\n            self.mr(mapper=self.mapper,\n                    reducer=self.reducer)\n        ]",
              "children": [
                {
                  "value": "steps",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "\"\"\"Run the map and reduce steps.\"\"\"\n        return [\n            self.mr(mapper=self.mapper,\n                    reducer=self.reducer)\n        ]",
                  "children": [
                    {
                      "value": "\"\"\"Run the map and reduce steps.\"\"\"",
                      "children": [
                        {
                          "value": "\"\"\"Run the map and reduce steps.\"\"\"",
                          "children": [
                            {
                              "value": "\"\"\"",
                              "children": []
                            },
                            {
                              "value": "Run the map and reduce steps.",
                              "children": []
                            },
                            {
                              "value": "\"\"\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return [\n            self.mr(mapper=self.mapper,\n                    reducer=self.reducer)\n        ]",
                      "children": [
                        {
                          "value": "[\n            self.mr(mapper=self.mapper,\n                    reducer=self.reducer)\n        ]",
                          "children": [
                            {
                              "value": "self.mr(mapper=self.mapper,\n                    reducer=self.reducer)",
                              "children": [
                                {
                                  "value": "self.mr",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "mr",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(mapper=self.mapper,\n                    reducer=self.reducer)",
                                  "children": [
                                    {
                                      "value": "mapper=self.mapper",
                                      "children": [
                                        {
                                          "value": "mapper",
                                          "children": []
                                        },
                                        {
                                          "value": "self.mapper",
                                          "children": [
                                            {
                                              "value": "self",
                                              "children": []
                                            },
                                            {
                                              "value": "mapper",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "reducer=self.reducer",
                                      "children": [
                                        {
                                          "value": "reducer",
                                          "children": []
                                        },
                                        {
                                          "value": "self.reducer",
                                          "children": [
                                            {
                                              "value": "self",
                                              "children": []
                                            },
                                            {
                                              "value": "reducer",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "if __name__ == '__main__':\n    SpendingByCategory.run()",
      "children": [
        {
          "value": "__name__ == '__main__'",
          "children": [
            {
              "value": "__name__",
              "children": []
            },
            {
              "value": "'__main__'",
              "children": [
                {
                  "value": "'",
                  "children": []
                },
                {
                  "value": "__main__",
                  "children": []
                },
                {
                  "value": "'",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "SpendingByCategory.run()",
          "children": [
            {
              "value": "SpendingByCategory.run()",
              "children": [
                {
                  "value": "SpendingByCategory.run()",
                  "children": [
                    {
                      "value": "SpendingByCategory.run",
                      "children": [
                        {
                          "value": "SpendingByCategory",
                          "children": []
                        },
                        {
                          "value": "run",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "()",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}