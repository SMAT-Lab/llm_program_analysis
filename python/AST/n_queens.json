{
  "value": "\"\"\"\n\nThe nqueens problem is of placing N queens on a N * N\nchess board such that no queen can attack any other queens placed\non that chess board.\nThis means that one queen cannot have any other queen on its horizontal, vertical and\ndiagonal lines.\n\n\"\"\"\n\nfrom __future__ import annotations\n\nsolution = []\n\n\ndef is_safe(board: list[list[int]], row: int, column: int) -> bool:\n    \"\"\"\n    This function returns a boolean value True if it is safe to place a queen there\n    considering the current state of the board.\n\n    Parameters:\n    board (2D matrix): The chessboard\n    row, column: Coordinates of the cell on the board\n\n    Returns:\n    Boolean Value\n\n    >>> is_safe([[0, 0, 0], [0, 0, 0], [0, 0, 0]], 1, 1)\n    True\n    >>> is_safe([[1, 0, 0], [0, 0, 0], [0, 0, 0]], 1, 1)\n    False\n    \"\"\"\n\n    n = len(board)  # Size of the board\n\n    # Check if there is any queen in the same row, column,\n    # left upper diagonal, and right upper diagonal\n    return (\n        all(board[i][j] != 1 for i, j in zip(range(row, -1, -1), range(column, n)))\n        and all(\n            board[i][j] != 1 for i, j in zip(range(row, -1, -1), range(column, -1, -1))\n        )\n        and all(board[i][j] != 1 for i, j in zip(range(row, n), range(column, n)))\n        and all(board[i][j] != 1 for i, j in zip(range(row, n), range(column, -1, -1)))\n    )\n\n\ndef solve(board: list[list[int]], row: int) -> bool:\n    \"\"\"\n    This function creates a state space tree and calls the safe function until it\n    receives a False Boolean and terminates that branch and backtracks to the next\n    possible solution branch.\n    \"\"\"\n    if row >= len(board):\n        \"\"\"\n        If the row number exceeds N, we have a board with a successful combination\n        and that combination is appended to the solution list and the board is printed.\n        \"\"\"\n        solution.append(board)\n        printboard(board)\n        print()\n        return True\n    for i in range(len(board)):\n        \"\"\"\n        For every row, it iterates through each column to check if it is feasible to\n        place a queen there.\n        If all the combinations for that particular branch are successful, the board is\n        reinitialized for the next possible combination.\n        \"\"\"\n        if is_safe(board, row, i):\n            board[row][i] = 1\n            solve(board, row + 1)\n            board[row][i] = 0\n    return False\n\n\ndef printboard(board: list[list[int]]) -> None:\n    \"\"\"\n    Prints the boards that have a successful combination.\n    \"\"\"\n    for i in range(len(board)):\n        for j in range(len(board)):\n            if board[i][j] == 1:\n                print(\"Q\", end=\" \")  # Queen is present\n            else:\n                print(\".\", end=\" \")  # Empty cell\n        print()\n\n\n# Number of queens (e.g., n=8 for an 8x8 board)\nn = 8\nboard = [[0 for i in range(n)] for j in range(n)]\nsolve(board, 0)\nprint(\"The total number of solutions are:\", len(solution))",
  "children": [
    {
      "value": "\"\"\"\n\nThe nqueens problem is of placing N queens on a N * N\nchess board such that no queen can attack any other queens placed\non that chess board.\nThis means that one queen cannot have any other queen on its horizontal, vertical and\ndiagonal lines.\n\n\"\"\"",
      "children": [
        {
          "value": "\"\"\"\n\nThe nqueens problem is of placing N queens on a N * N\nchess board such that no queen can attack any other queens placed\non that chess board.\nThis means that one queen cannot have any other queen on its horizontal, vertical and\ndiagonal lines.\n\n\"\"\"",
          "children": [
            {
              "value": "\"\"\"",
              "children": []
            },
            {
              "value": "The nqueens problem is of placing N queens on a N * N\nchess board such that no queen can attack any other queens placed\non that chess board.\nThis means that one queen cannot have any other queen on its horizontal, vertical and\ndiagonal lines.",
              "children": []
            },
            {
              "value": "\"\"\"",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from __future__ import annotations",
      "children": [
        {
          "value": "annotations",
          "children": [
            {
              "value": "annotations",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "solution = []",
      "children": [
        {
          "value": "solution = []",
          "children": [
            {
              "value": "solution",
              "children": []
            },
            {
              "value": "[]",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "def is_safe(board: list[list[int]], row: int, column: int) -> bool:\n    \"\"\"\n    This function returns a boolean value True if it is safe to place a queen there\n    considering the current state of the board.\n\n    Parameters:\n    board (2D matrix): The chessboard\n    row, column: Coordinates of the cell on the board\n\n    Returns:\n    Boolean Value\n\n    >>> is_safe([[0, 0, 0], [0, 0, 0], [0, 0, 0]], 1, 1)\n    True\n    >>> is_safe([[1, 0, 0], [0, 0, 0], [0, 0, 0]], 1, 1)\n    False\n    \"\"\"\n\n    n = len(board)  # Size of the board\n\n    # Check if there is any queen in the same row, column,\n    # left upper diagonal, and right upper diagonal\n    return (\n        all(board[i][j] != 1 for i, j in zip(range(row, -1, -1), range(column, n)))\n        and all(\n            board[i][j] != 1 for i, j in zip(range(row, -1, -1), range(column, -1, -1))\n        )\n        and all(board[i][j] != 1 for i, j in zip(range(row, n), range(column, n)))\n        and all(board[i][j] != 1 for i, j in zip(range(row, n), range(column, -1, -1)))\n    )",
      "children": [
        {
          "value": "is_safe",
          "children": []
        },
        {
          "value": "(board: list[list[int]], row: int, column: int)",
          "children": [
            {
              "value": "board: list[list[int]]",
              "children": [
                {
                  "value": "board",
                  "children": []
                },
                {
                  "value": "list[list[int]]",
                  "children": [
                    {
                      "value": "list[list[int]]",
                      "children": [
                        {
                          "value": "list",
                          "children": []
                        },
                        {
                          "value": "[list[int]]",
                          "children": [
                            {
                              "value": "list[int]",
                              "children": [
                                {
                                  "value": "list[int]",
                                  "children": [
                                    {
                                      "value": "list",
                                      "children": []
                                    },
                                    {
                                      "value": "[int]",
                                      "children": [
                                        {
                                          "value": "int",
                                          "children": [
                                            {
                                              "value": "int",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "row: int",
              "children": [
                {
                  "value": "row",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "column: int",
              "children": [
                {
                  "value": "column",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "bool",
          "children": [
            {
              "value": "bool",
              "children": []
            }
          ]
        },
        {
          "value": "\"\"\"\n    This function returns a boolean value True if it is safe to place a queen there\n    considering the current state of the board.\n\n    Parameters:\n    board (2D matrix): The chessboard\n    row, column: Coordinates of the cell on the board\n\n    Returns:\n    Boolean Value\n\n    >>> is_safe([[0, 0, 0], [0, 0, 0], [0, 0, 0]], 1, 1)\n    True\n    >>> is_safe([[1, 0, 0], [0, 0, 0], [0, 0, 0]], 1, 1)\n    False\n    \"\"\"\n\n    n = len(board)  # Size of the board\n\n    # Check if there is any queen in the same row, column,\n    # left upper diagonal, and right upper diagonal\n    return (\n        all(board[i][j] != 1 for i, j in zip(range(row, -1, -1), range(column, n)))\n        and all(\n            board[i][j] != 1 for i, j in zip(range(row, -1, -1), range(column, -1, -1))\n        )\n        and all(board[i][j] != 1 for i, j in zip(range(row, n), range(column, n)))\n        and all(board[i][j] != 1 for i, j in zip(range(row, n), range(column, -1, -1)))\n    )",
          "children": [
            {
              "value": "\"\"\"\n    This function returns a boolean value True if it is safe to place a queen there\n    considering the current state of the board.\n\n    Parameters:\n    board (2D matrix): The chessboard\n    row, column: Coordinates of the cell on the board\n\n    Returns:\n    Boolean Value\n\n    >>> is_safe([[0, 0, 0], [0, 0, 0], [0, 0, 0]], 1, 1)\n    True\n    >>> is_safe([[1, 0, 0], [0, 0, 0], [0, 0, 0]], 1, 1)\n    False\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    This function returns a boolean value True if it is safe to place a queen there\n    considering the current state of the board.\n\n    Parameters:\n    board (2D matrix): The chessboard\n    row, column: Coordinates of the cell on the board\n\n    Returns:\n    Boolean Value\n\n    >>> is_safe([[0, 0, 0], [0, 0, 0], [0, 0, 0]], 1, 1)\n    True\n    >>> is_safe([[1, 0, 0], [0, 0, 0], [0, 0, 0]], 1, 1)\n    False\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "This function returns a boolean value True if it is safe to place a queen there\n    considering the current state of the board.\n\n    Parameters:\n    board (2D matrix): The chessboard\n    row, column: Coordinates of the cell on the board\n\n    Returns:\n    Boolean Value\n\n    >>> is_safe([[0, 0, 0], [0, 0, 0], [0, 0, 0]], 1, 1)\n    True\n    >>> is_safe([[1, 0, 0], [0, 0, 0], [0, 0, 0]], 1, 1)\n    False",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "n = len(board)",
              "children": [
                {
                  "value": "n = len(board)",
                  "children": [
                    {
                      "value": "n",
                      "children": []
                    },
                    {
                      "value": "len(board)",
                      "children": [
                        {
                          "value": "len",
                          "children": []
                        },
                        {
                          "value": "(board)",
                          "children": [
                            {
                              "value": "board",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "# Size of the board",
              "children": []
            },
            {
              "value": "# Check if there is any queen in the same row, column,",
              "children": []
            },
            {
              "value": "# left upper diagonal, and right upper diagonal",
              "children": []
            },
            {
              "value": "return (\n        all(board[i][j] != 1 for i, j in zip(range(row, -1, -1), range(column, n)))\n        and all(\n            board[i][j] != 1 for i, j in zip(range(row, -1, -1), range(column, -1, -1))\n        )\n        and all(board[i][j] != 1 for i, j in zip(range(row, n), range(column, n)))\n        and all(board[i][j] != 1 for i, j in zip(range(row, n), range(column, -1, -1)))\n    )",
              "children": [
                {
                  "value": "(\n        all(board[i][j] != 1 for i, j in zip(range(row, -1, -1), range(column, n)))\n        and all(\n            board[i][j] != 1 for i, j in zip(range(row, -1, -1), range(column, -1, -1))\n        )\n        and all(board[i][j] != 1 for i, j in zip(range(row, n), range(column, n)))\n        and all(board[i][j] != 1 for i, j in zip(range(row, n), range(column, -1, -1)))\n    )",
                  "children": [
                    {
                      "value": "all(board[i][j] != 1 for i, j in zip(range(row, -1, -1), range(column, n)))\n        and all(\n            board[i][j] != 1 for i, j in zip(range(row, -1, -1), range(column, -1, -1))\n        )\n        and all(board[i][j] != 1 for i, j in zip(range(row, n), range(column, n)))\n        and all(board[i][j] != 1 for i, j in zip(range(row, n), range(column, -1, -1)))",
                      "children": [
                        {
                          "value": "all(board[i][j] != 1 for i, j in zip(range(row, -1, -1), range(column, n)))\n        and all(\n            board[i][j] != 1 for i, j in zip(range(row, -1, -1), range(column, -1, -1))\n        )\n        and all(board[i][j] != 1 for i, j in zip(range(row, n), range(column, n)))",
                          "children": [
                            {
                              "value": "all(board[i][j] != 1 for i, j in zip(range(row, -1, -1), range(column, n)))\n        and all(\n            board[i][j] != 1 for i, j in zip(range(row, -1, -1), range(column, -1, -1))\n        )",
                              "children": [
                                {
                                  "value": "all(board[i][j] != 1 for i, j in zip(range(row, -1, -1), range(column, n)))",
                                  "children": [
                                    {
                                      "value": "all",
                                      "children": []
                                    },
                                    {
                                      "value": "(board[i][j] != 1 for i, j in zip(range(row, -1, -1), range(column, n)))",
                                      "children": [
                                        {
                                          "value": "board[i][j] != 1",
                                          "children": [
                                            {
                                              "value": "board[i][j]",
                                              "children": [
                                                {
                                                  "value": "board[i]",
                                                  "children": [
                                                    {
                                                      "value": "board",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "i",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "j",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "1",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "for i, j in zip(range(row, -1, -1), range(column, n))",
                                          "children": [
                                            {
                                              "value": "i, j",
                                              "children": [
                                                {
                                                  "value": "i",
                                                  "children": []
                                                },
                                                {
                                                  "value": "j",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "zip(range(row, -1, -1), range(column, n))",
                                              "children": [
                                                {
                                                  "value": "zip",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(range(row, -1, -1), range(column, n))",
                                                  "children": [
                                                    {
                                                      "value": "range(row, -1, -1)",
                                                      "children": [
                                                        {
                                                          "value": "range",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "(row, -1, -1)",
                                                          "children": [
                                                            {
                                                              "value": "row",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "-1",
                                                              "children": [
                                                                {
                                                                  "value": "1",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "-1",
                                                              "children": [
                                                                {
                                                                  "value": "1",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "range(column, n)",
                                                      "children": [
                                                        {
                                                          "value": "range",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "(column, n)",
                                                          "children": [
                                                            {
                                                              "value": "column",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "n",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "all(\n            board[i][j] != 1 for i, j in zip(range(row, -1, -1), range(column, -1, -1))\n        )",
                                  "children": [
                                    {
                                      "value": "all",
                                      "children": []
                                    },
                                    {
                                      "value": "(\n            board[i][j] != 1 for i, j in zip(range(row, -1, -1), range(column, -1, -1))\n        )",
                                      "children": [
                                        {
                                          "value": "board[i][j] != 1",
                                          "children": [
                                            {
                                              "value": "board[i][j]",
                                              "children": [
                                                {
                                                  "value": "board[i]",
                                                  "children": [
                                                    {
                                                      "value": "board",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "i",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "j",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "1",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "for i, j in zip(range(row, -1, -1), range(column, -1, -1))",
                                          "children": [
                                            {
                                              "value": "i, j",
                                              "children": [
                                                {
                                                  "value": "i",
                                                  "children": []
                                                },
                                                {
                                                  "value": "j",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "zip(range(row, -1, -1), range(column, -1, -1))",
                                              "children": [
                                                {
                                                  "value": "zip",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(range(row, -1, -1), range(column, -1, -1))",
                                                  "children": [
                                                    {
                                                      "value": "range(row, -1, -1)",
                                                      "children": [
                                                        {
                                                          "value": "range",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "(row, -1, -1)",
                                                          "children": [
                                                            {
                                                              "value": "row",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "-1",
                                                              "children": [
                                                                {
                                                                  "value": "1",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "-1",
                                                              "children": [
                                                                {
                                                                  "value": "1",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "range(column, -1, -1)",
                                                      "children": [
                                                        {
                                                          "value": "range",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "(column, -1, -1)",
                                                          "children": [
                                                            {
                                                              "value": "column",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "-1",
                                                              "children": [
                                                                {
                                                                  "value": "1",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "-1",
                                                              "children": [
                                                                {
                                                                  "value": "1",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "all(board[i][j] != 1 for i, j in zip(range(row, n), range(column, n)))",
                              "children": [
                                {
                                  "value": "all",
                                  "children": []
                                },
                                {
                                  "value": "(board[i][j] != 1 for i, j in zip(range(row, n), range(column, n)))",
                                  "children": [
                                    {
                                      "value": "board[i][j] != 1",
                                      "children": [
                                        {
                                          "value": "board[i][j]",
                                          "children": [
                                            {
                                              "value": "board[i]",
                                              "children": [
                                                {
                                                  "value": "board",
                                                  "children": []
                                                },
                                                {
                                                  "value": "i",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "j",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "1",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "for i, j in zip(range(row, n), range(column, n))",
                                      "children": [
                                        {
                                          "value": "i, j",
                                          "children": [
                                            {
                                              "value": "i",
                                              "children": []
                                            },
                                            {
                                              "value": "j",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "zip(range(row, n), range(column, n))",
                                          "children": [
                                            {
                                              "value": "zip",
                                              "children": []
                                            },
                                            {
                                              "value": "(range(row, n), range(column, n))",
                                              "children": [
                                                {
                                                  "value": "range(row, n)",
                                                  "children": [
                                                    {
                                                      "value": "range",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "(row, n)",
                                                      "children": [
                                                        {
                                                          "value": "row",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "n",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "range(column, n)",
                                                  "children": [
                                                    {
                                                      "value": "range",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "(column, n)",
                                                      "children": [
                                                        {
                                                          "value": "column",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "n",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "all(board[i][j] != 1 for i, j in zip(range(row, n), range(column, -1, -1)))",
                          "children": [
                            {
                              "value": "all",
                              "children": []
                            },
                            {
                              "value": "(board[i][j] != 1 for i, j in zip(range(row, n), range(column, -1, -1)))",
                              "children": [
                                {
                                  "value": "board[i][j] != 1",
                                  "children": [
                                    {
                                      "value": "board[i][j]",
                                      "children": [
                                        {
                                          "value": "board[i]",
                                          "children": [
                                            {
                                              "value": "board",
                                              "children": []
                                            },
                                            {
                                              "value": "i",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "j",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "1",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "for i, j in zip(range(row, n), range(column, -1, -1))",
                                  "children": [
                                    {
                                      "value": "i, j",
                                      "children": [
                                        {
                                          "value": "i",
                                          "children": []
                                        },
                                        {
                                          "value": "j",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "zip(range(row, n), range(column, -1, -1))",
                                      "children": [
                                        {
                                          "value": "zip",
                                          "children": []
                                        },
                                        {
                                          "value": "(range(row, n), range(column, -1, -1))",
                                          "children": [
                                            {
                                              "value": "range(row, n)",
                                              "children": [
                                                {
                                                  "value": "range",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(row, n)",
                                                  "children": [
                                                    {
                                                      "value": "row",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "n",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "range(column, -1, -1)",
                                              "children": [
                                                {
                                                  "value": "range",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(column, -1, -1)",
                                                  "children": [
                                                    {
                                                      "value": "column",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "-1",
                                                      "children": [
                                                        {
                                                          "value": "1",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "-1",
                                                      "children": [
                                                        {
                                                          "value": "1",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def solve(board: list[list[int]], row: int) -> bool:\n    \"\"\"\n    This function creates a state space tree and calls the safe function until it\n    receives a False Boolean and terminates that branch and backtracks to the next\n    possible solution branch.\n    \"\"\"\n    if row >= len(board):\n        \"\"\"\n        If the row number exceeds N, we have a board with a successful combination\n        and that combination is appended to the solution list and the board is printed.\n        \"\"\"\n        solution.append(board)\n        printboard(board)\n        print()\n        return True\n    for i in range(len(board)):\n        \"\"\"\n        For every row, it iterates through each column to check if it is feasible to\n        place a queen there.\n        If all the combinations for that particular branch are successful, the board is\n        reinitialized for the next possible combination.\n        \"\"\"\n        if is_safe(board, row, i):\n            board[row][i] = 1\n            solve(board, row + 1)\n            board[row][i] = 0\n    return False",
      "children": [
        {
          "value": "solve",
          "children": []
        },
        {
          "value": "(board: list[list[int]], row: int)",
          "children": [
            {
              "value": "board: list[list[int]]",
              "children": [
                {
                  "value": "board",
                  "children": []
                },
                {
                  "value": "list[list[int]]",
                  "children": [
                    {
                      "value": "list[list[int]]",
                      "children": [
                        {
                          "value": "list",
                          "children": []
                        },
                        {
                          "value": "[list[int]]",
                          "children": [
                            {
                              "value": "list[int]",
                              "children": [
                                {
                                  "value": "list[int]",
                                  "children": [
                                    {
                                      "value": "list",
                                      "children": []
                                    },
                                    {
                                      "value": "[int]",
                                      "children": [
                                        {
                                          "value": "int",
                                          "children": [
                                            {
                                              "value": "int",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "row: int",
              "children": [
                {
                  "value": "row",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "bool",
          "children": [
            {
              "value": "bool",
              "children": []
            }
          ]
        },
        {
          "value": "\"\"\"\n    This function creates a state space tree and calls the safe function until it\n    receives a False Boolean and terminates that branch and backtracks to the next\n    possible solution branch.\n    \"\"\"\n    if row >= len(board):\n        \"\"\"\n        If the row number exceeds N, we have a board with a successful combination\n        and that combination is appended to the solution list and the board is printed.\n        \"\"\"\n        solution.append(board)\n        printboard(board)\n        print()\n        return True\n    for i in range(len(board)):\n        \"\"\"\n        For every row, it iterates through each column to check if it is feasible to\n        place a queen there.\n        If all the combinations for that particular branch are successful, the board is\n        reinitialized for the next possible combination.\n        \"\"\"\n        if is_safe(board, row, i):\n            board[row][i] = 1\n            solve(board, row + 1)\n            board[row][i] = 0\n    return False",
          "children": [
            {
              "value": "\"\"\"\n    This function creates a state space tree and calls the safe function until it\n    receives a False Boolean and terminates that branch and backtracks to the next\n    possible solution branch.\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    This function creates a state space tree and calls the safe function until it\n    receives a False Boolean and terminates that branch and backtracks to the next\n    possible solution branch.\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "This function creates a state space tree and calls the safe function until it\n    receives a False Boolean and terminates that branch and backtracks to the next\n    possible solution branch.",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "if row >= len(board):\n        \"\"\"\n        If the row number exceeds N, we have a board with a successful combination\n        and that combination is appended to the solution list and the board is printed.\n        \"\"\"\n        solution.append(board)\n        printboard(board)\n        print()\n        return True",
              "children": [
                {
                  "value": "row >= len(board)",
                  "children": [
                    {
                      "value": "row",
                      "children": []
                    },
                    {
                      "value": "len(board)",
                      "children": [
                        {
                          "value": "len",
                          "children": []
                        },
                        {
                          "value": "(board)",
                          "children": [
                            {
                              "value": "board",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "\"\"\"\n        If the row number exceeds N, we have a board with a successful combination\n        and that combination is appended to the solution list and the board is printed.\n        \"\"\"\n        solution.append(board)\n        printboard(board)\n        print()\n        return True",
                  "children": [
                    {
                      "value": "\"\"\"\n        If the row number exceeds N, we have a board with a successful combination\n        and that combination is appended to the solution list and the board is printed.\n        \"\"\"",
                      "children": [
                        {
                          "value": "\"\"\"\n        If the row number exceeds N, we have a board with a successful combination\n        and that combination is appended to the solution list and the board is printed.\n        \"\"\"",
                          "children": [
                            {
                              "value": "\"\"\"",
                              "children": []
                            },
                            {
                              "value": "If the row number exceeds N, we have a board with a successful combination\n        and that combination is appended to the solution list and the board is printed.",
                              "children": []
                            },
                            {
                              "value": "\"\"\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "solution.append(board)",
                      "children": [
                        {
                          "value": "solution.append(board)",
                          "children": [
                            {
                              "value": "solution.append",
                              "children": [
                                {
                                  "value": "solution",
                                  "children": []
                                },
                                {
                                  "value": "append",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(board)",
                              "children": [
                                {
                                  "value": "board",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "printboard(board)",
                      "children": [
                        {
                          "value": "printboard(board)",
                          "children": [
                            {
                              "value": "printboard",
                              "children": []
                            },
                            {
                              "value": "(board)",
                              "children": [
                                {
                                  "value": "board",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "print()",
                      "children": [
                        {
                          "value": "print()",
                          "children": [
                            {
                              "value": "print",
                              "children": []
                            },
                            {
                              "value": "()",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return True",
                      "children": [
                        {
                          "value": "True",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "for i in range(len(board)):\n        \"\"\"\n        For every row, it iterates through each column to check if it is feasible to\n        place a queen there.\n        If all the combinations for that particular branch are successful, the board is\n        reinitialized for the next possible combination.\n        \"\"\"\n        if is_safe(board, row, i):\n            board[row][i] = 1\n            solve(board, row + 1)\n            board[row][i] = 0",
              "children": [
                {
                  "value": "i",
                  "children": []
                },
                {
                  "value": "range(len(board))",
                  "children": [
                    {
                      "value": "range",
                      "children": []
                    },
                    {
                      "value": "(len(board))",
                      "children": [
                        {
                          "value": "len(board)",
                          "children": [
                            {
                              "value": "len",
                              "children": []
                            },
                            {
                              "value": "(board)",
                              "children": [
                                {
                                  "value": "board",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "\"\"\"\n        For every row, it iterates through each column to check if it is feasible to\n        place a queen there.\n        If all the combinations for that particular branch are successful, the board is\n        reinitialized for the next possible combination.\n        \"\"\"\n        if is_safe(board, row, i):\n            board[row][i] = 1\n            solve(board, row + 1)\n            board[row][i] = 0",
                  "children": [
                    {
                      "value": "\"\"\"\n        For every row, it iterates through each column to check if it is feasible to\n        place a queen there.\n        If all the combinations for that particular branch are successful, the board is\n        reinitialized for the next possible combination.\n        \"\"\"",
                      "children": [
                        {
                          "value": "\"\"\"\n        For every row, it iterates through each column to check if it is feasible to\n        place a queen there.\n        If all the combinations for that particular branch are successful, the board is\n        reinitialized for the next possible combination.\n        \"\"\"",
                          "children": [
                            {
                              "value": "\"\"\"",
                              "children": []
                            },
                            {
                              "value": "For every row, it iterates through each column to check if it is feasible to\n        place a queen there.\n        If all the combinations for that particular branch are successful, the board is\n        reinitialized for the next possible combination.",
                              "children": []
                            },
                            {
                              "value": "\"\"\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if is_safe(board, row, i):\n            board[row][i] = 1\n            solve(board, row + 1)\n            board[row][i] = 0",
                      "children": [
                        {
                          "value": "is_safe(board, row, i)",
                          "children": [
                            {
                              "value": "is_safe",
                              "children": []
                            },
                            {
                              "value": "(board, row, i)",
                              "children": [
                                {
                                  "value": "board",
                                  "children": []
                                },
                                {
                                  "value": "row",
                                  "children": []
                                },
                                {
                                  "value": "i",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "board[row][i] = 1\n            solve(board, row + 1)\n            board[row][i] = 0",
                          "children": [
                            {
                              "value": "board[row][i] = 1",
                              "children": [
                                {
                                  "value": "board[row][i] = 1",
                                  "children": [
                                    {
                                      "value": "board[row][i]",
                                      "children": [
                                        {
                                          "value": "board[row]",
                                          "children": [
                                            {
                                              "value": "board",
                                              "children": []
                                            },
                                            {
                                              "value": "row",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "i",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "1",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "solve(board, row + 1)",
                              "children": [
                                {
                                  "value": "solve(board, row + 1)",
                                  "children": [
                                    {
                                      "value": "solve",
                                      "children": []
                                    },
                                    {
                                      "value": "(board, row + 1)",
                                      "children": [
                                        {
                                          "value": "board",
                                          "children": []
                                        },
                                        {
                                          "value": "row + 1",
                                          "children": [
                                            {
                                              "value": "row",
                                              "children": []
                                            },
                                            {
                                              "value": "1",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "board[row][i] = 0",
                              "children": [
                                {
                                  "value": "board[row][i] = 0",
                                  "children": [
                                    {
                                      "value": "board[row][i]",
                                      "children": [
                                        {
                                          "value": "board[row]",
                                          "children": [
                                            {
                                              "value": "board",
                                              "children": []
                                            },
                                            {
                                              "value": "row",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "i",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "0",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "return False",
              "children": [
                {
                  "value": "False",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def printboard(board: list[list[int]]) -> None:\n    \"\"\"\n    Prints the boards that have a successful combination.\n    \"\"\"\n    for i in range(len(board)):\n        for j in range(len(board)):\n            if board[i][j] == 1:\n                print(\"Q\", end=\" \")  # Queen is present\n            else:\n                print(\".\", end=\" \")  # Empty cell\n        print()",
      "children": [
        {
          "value": "printboard",
          "children": []
        },
        {
          "value": "(board: list[list[int]])",
          "children": [
            {
              "value": "board: list[list[int]]",
              "children": [
                {
                  "value": "board",
                  "children": []
                },
                {
                  "value": "list[list[int]]",
                  "children": [
                    {
                      "value": "list[list[int]]",
                      "children": [
                        {
                          "value": "list",
                          "children": []
                        },
                        {
                          "value": "[list[int]]",
                          "children": [
                            {
                              "value": "list[int]",
                              "children": [
                                {
                                  "value": "list[int]",
                                  "children": [
                                    {
                                      "value": "list",
                                      "children": []
                                    },
                                    {
                                      "value": "[int]",
                                      "children": [
                                        {
                                          "value": "int",
                                          "children": [
                                            {
                                              "value": "int",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "None",
          "children": [
            {
              "value": "None",
              "children": []
            }
          ]
        },
        {
          "value": "\"\"\"\n    Prints the boards that have a successful combination.\n    \"\"\"\n    for i in range(len(board)):\n        for j in range(len(board)):\n            if board[i][j] == 1:\n                print(\"Q\", end=\" \")  # Queen is present\n            else:\n                print(\".\", end=\" \")  # Empty cell\n        print()",
          "children": [
            {
              "value": "\"\"\"\n    Prints the boards that have a successful combination.\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    Prints the boards that have a successful combination.\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Prints the boards that have a successful combination.",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "for i in range(len(board)):\n        for j in range(len(board)):\n            if board[i][j] == 1:\n                print(\"Q\", end=\" \")  # Queen is present\n            else:\n                print(\".\", end=\" \")  # Empty cell\n        print()",
              "children": [
                {
                  "value": "i",
                  "children": []
                },
                {
                  "value": "range(len(board))",
                  "children": [
                    {
                      "value": "range",
                      "children": []
                    },
                    {
                      "value": "(len(board))",
                      "children": [
                        {
                          "value": "len(board)",
                          "children": [
                            {
                              "value": "len",
                              "children": []
                            },
                            {
                              "value": "(board)",
                              "children": [
                                {
                                  "value": "board",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "for j in range(len(board)):\n            if board[i][j] == 1:\n                print(\"Q\", end=\" \")  # Queen is present\n            else:\n                print(\".\", end=\" \")  # Empty cell\n        print()",
                  "children": [
                    {
                      "value": "for j in range(len(board)):\n            if board[i][j] == 1:\n                print(\"Q\", end=\" \")  # Queen is present\n            else:\n                print(\".\", end=\" \")  # Empty cell",
                      "children": [
                        {
                          "value": "j",
                          "children": []
                        },
                        {
                          "value": "range(len(board))",
                          "children": [
                            {
                              "value": "range",
                              "children": []
                            },
                            {
                              "value": "(len(board))",
                              "children": [
                                {
                                  "value": "len(board)",
                                  "children": [
                                    {
                                      "value": "len",
                                      "children": []
                                    },
                                    {
                                      "value": "(board)",
                                      "children": [
                                        {
                                          "value": "board",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "if board[i][j] == 1:\n                print(\"Q\", end=\" \")  # Queen is present\n            else:\n                print(\".\", end=\" \")  # Empty cell",
                          "children": [
                            {
                              "value": "if board[i][j] == 1:\n                print(\"Q\", end=\" \")  # Queen is present\n            else:\n                print(\".\", end=\" \")  # Empty cell",
                              "children": [
                                {
                                  "value": "board[i][j] == 1",
                                  "children": [
                                    {
                                      "value": "board[i][j]",
                                      "children": [
                                        {
                                          "value": "board[i]",
                                          "children": [
                                            {
                                              "value": "board",
                                              "children": []
                                            },
                                            {
                                              "value": "i",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "j",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "1",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "print(\"Q\", end=\" \")  # Queen is present",
                                  "children": [
                                    {
                                      "value": "print(\"Q\", end=\" \")",
                                      "children": [
                                        {
                                          "value": "print(\"Q\", end=\" \")",
                                          "children": [
                                            {
                                              "value": "print",
                                              "children": []
                                            },
                                            {
                                              "value": "(\"Q\", end=\" \")",
                                              "children": [
                                                {
                                                  "value": "\"Q\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "Q",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "end=\" \"",
                                                  "children": [
                                                    {
                                                      "value": "end",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\" \"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "# Queen is present",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "else:\n                print(\".\", end=\" \")  # Empty cell",
                                  "children": [
                                    {
                                      "value": "print(\".\", end=\" \")  # Empty cell",
                                      "children": [
                                        {
                                          "value": "print(\".\", end=\" \")",
                                          "children": [
                                            {
                                              "value": "print(\".\", end=\" \")",
                                              "children": [
                                                {
                                                  "value": "print",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(\".\", end=\" \")",
                                                  "children": [
                                                    {
                                                      "value": "\".\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": ".",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "end=\" \"",
                                                      "children": [
                                                        {
                                                          "value": "end",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\" \"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "# Empty cell",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "print()",
                      "children": [
                        {
                          "value": "print()",
                          "children": [
                            {
                              "value": "print",
                              "children": []
                            },
                            {
                              "value": "()",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "# Number of queens (e.g., n=8 for an 8x8 board)",
      "children": []
    },
    {
      "value": "n = 8",
      "children": [
        {
          "value": "n = 8",
          "children": [
            {
              "value": "n",
              "children": []
            },
            {
              "value": "8",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "board = [[0 for i in range(n)] for j in range(n)]",
      "children": [
        {
          "value": "board = [[0 for i in range(n)] for j in range(n)]",
          "children": [
            {
              "value": "board",
              "children": []
            },
            {
              "value": "[[0 for i in range(n)] for j in range(n)]",
              "children": [
                {
                  "value": "[0 for i in range(n)]",
                  "children": [
                    {
                      "value": "0",
                      "children": []
                    },
                    {
                      "value": "for i in range(n)",
                      "children": [
                        {
                          "value": "i",
                          "children": []
                        },
                        {
                          "value": "range(n)",
                          "children": [
                            {
                              "value": "range",
                              "children": []
                            },
                            {
                              "value": "(n)",
                              "children": [
                                {
                                  "value": "n",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "for j in range(n)",
                  "children": [
                    {
                      "value": "j",
                      "children": []
                    },
                    {
                      "value": "range(n)",
                      "children": [
                        {
                          "value": "range",
                          "children": []
                        },
                        {
                          "value": "(n)",
                          "children": [
                            {
                              "value": "n",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "solve(board, 0)",
      "children": [
        {
          "value": "solve(board, 0)",
          "children": [
            {
              "value": "solve",
              "children": []
            },
            {
              "value": "(board, 0)",
              "children": [
                {
                  "value": "board",
                  "children": []
                },
                {
                  "value": "0",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "print(\"The total number of solutions are:\", len(solution))",
      "children": [
        {
          "value": "print(\"The total number of solutions are:\", len(solution))",
          "children": [
            {
              "value": "print",
              "children": []
            },
            {
              "value": "(\"The total number of solutions are:\", len(solution))",
              "children": [
                {
                  "value": "\"The total number of solutions are:\"",
                  "children": [
                    {
                      "value": "\"",
                      "children": []
                    },
                    {
                      "value": "The total number of solutions are:",
                      "children": []
                    },
                    {
                      "value": "\"",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "len(solution)",
                  "children": [
                    {
                      "value": "len",
                      "children": []
                    },
                    {
                      "value": "(solution)",
                      "children": [
                        {
                          "value": "solution",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}