{
  "value": "# Information on binary shifts:\n# https://docs.python.org/3/library/stdtypes.html#bitwise-operations-on-integer-types\n# https://www.interviewcake.com/concept/java/bit-shift\n\n\ndef logical_left_shift(number: int, shift_amount: int) -> str:\n    \"\"\"\n    Take in 2 positive integers.\n    'number' is the integer to be logically left shifted 'shift_amount' times.\n    i.e. (number << shift_amount)\n    Return the shifted binary representation.\n\n    >>> logical_left_shift(0, 1)\n    '0b00'\n    >>> logical_left_shift(1, 1)\n    '0b10'\n    >>> logical_left_shift(1, 5)\n    '0b100000'\n    >>> logical_left_shift(17, 2)\n    '0b1000100'\n    >>> logical_left_shift(1983, 4)\n    '0b111101111110000'\n    >>> logical_left_shift(1, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: both inputs must be positive integers\n    \"\"\"\n    if number < 0 or shift_amount < 0:\n        raise ValueError(\"both inputs must be positive integers\")\n\n    binary_number = str(bin(number))\n    binary_number += \"0\" * shift_amount\n    return binary_number\n\n\ndef logical_right_shift(number: int, shift_amount: int) -> str:\n    \"\"\"\n    Take in positive 2 integers.\n    'number' is the integer to be logically right shifted 'shift_amount' times.\n    i.e. (number >>> shift_amount)\n    Return the shifted binary representation.\n\n    >>> logical_right_shift(0, 1)\n    '0b0'\n    >>> logical_right_shift(1, 1)\n    '0b0'\n    >>> logical_right_shift(1, 5)\n    '0b0'\n    >>> logical_right_shift(17, 2)\n    '0b100'\n    >>> logical_right_shift(1983, 4)\n    '0b1111011'\n    >>> logical_right_shift(1, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: both inputs must be positive integers\n    \"\"\"\n    if number < 0 or shift_amount < 0:\n        raise ValueError(\"both inputs must be positive integers\")\n\n    binary_number = str(bin(number))[2:]\n    if shift_amount >= len(binary_number):\n        return \"0b0\"\n    shifted_binary_number = binary_number[: len(binary_number) - shift_amount]\n    return \"0b\" + shifted_binary_number\n\n\ndef arithmetic_right_shift(number: int, shift_amount: int) -> str:\n    \"\"\"\n    Take in 2 integers.\n    'number' is the integer to be arithmetically right shifted 'shift_amount' times.\n    i.e. (number >> shift_amount)\n    Return the shifted binary representation.\n\n    >>> arithmetic_right_shift(0, 1)\n    '0b00'\n    >>> arithmetic_right_shift(1, 1)\n    '0b00'\n    >>> arithmetic_right_shift(-1, 1)\n    '0b11'\n    >>> arithmetic_right_shift(17, 2)\n    '0b000100'\n    >>> arithmetic_right_shift(-17, 2)\n    '0b111011'\n    >>> arithmetic_right_shift(-1983, 4)\n    '0b111110000100'\n    \"\"\"\n    if number >= 0:  # Get binary representation of positive number\n        binary_number = \"0\" + str(bin(number)).strip(\"-\")[2:]\n    else:  # Get binary (2's complement) representation of negative number\n        binary_number_length = len(bin(number)[3:])  # Find 2's complement of number\n        binary_number = bin(abs(number) - (1 << binary_number_length))[3:]\n        binary_number = (\n            \"1\" + \"0\" * (binary_number_length - len(binary_number)) + binary_number\n        )\n\n    if shift_amount >= len(binary_number):\n        return \"0b\" + binary_number[0] * len(binary_number)\n    return (\n        \"0b\"\n        + binary_number[0] * shift_amount\n        + binary_number[: len(binary_number) - shift_amount]\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
  "children": [
    {
      "value": "# Information on binary shifts:",
      "children": []
    },
    {
      "value": "# https://docs.python.org/3/library/stdtypes.html#bitwise-operations-on-integer-types",
      "children": []
    },
    {
      "value": "# https://www.interviewcake.com/concept/java/bit-shift",
      "children": []
    },
    {
      "value": "def logical_left_shift(number: int, shift_amount: int) -> str:\n    \"\"\"\n    Take in 2 positive integers.\n    'number' is the integer to be logically left shifted 'shift_amount' times.\n    i.e. (number << shift_amount)\n    Return the shifted binary representation.\n\n    >>> logical_left_shift(0, 1)\n    '0b00'\n    >>> logical_left_shift(1, 1)\n    '0b10'\n    >>> logical_left_shift(1, 5)\n    '0b100000'\n    >>> logical_left_shift(17, 2)\n    '0b1000100'\n    >>> logical_left_shift(1983, 4)\n    '0b111101111110000'\n    >>> logical_left_shift(1, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: both inputs must be positive integers\n    \"\"\"\n    if number < 0 or shift_amount < 0:\n        raise ValueError(\"both inputs must be positive integers\")\n\n    binary_number = str(bin(number))\n    binary_number += \"0\" * shift_amount\n    return binary_number",
      "children": [
        {
          "value": "logical_left_shift",
          "children": []
        },
        {
          "value": "(number: int, shift_amount: int)",
          "children": [
            {
              "value": "number: int",
              "children": [
                {
                  "value": "number",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "shift_amount: int",
              "children": [
                {
                  "value": "shift_amount",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "str",
          "children": [
            {
              "value": "str",
              "children": []
            }
          ]
        },
        {
          "value": "\"\"\"\n    Take in 2 positive integers.\n    'number' is the integer to be logically left shifted 'shift_amount' times.\n    i.e. (number << shift_amount)\n    Return the shifted binary representation.\n\n    >>> logical_left_shift(0, 1)\n    '0b00'\n    >>> logical_left_shift(1, 1)\n    '0b10'\n    >>> logical_left_shift(1, 5)\n    '0b100000'\n    >>> logical_left_shift(17, 2)\n    '0b1000100'\n    >>> logical_left_shift(1983, 4)\n    '0b111101111110000'\n    >>> logical_left_shift(1, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: both inputs must be positive integers\n    \"\"\"\n    if number < 0 or shift_amount < 0:\n        raise ValueError(\"both inputs must be positive integers\")\n\n    binary_number = str(bin(number))\n    binary_number += \"0\" * shift_amount\n    return binary_number",
          "children": [
            {
              "value": "\"\"\"\n    Take in 2 positive integers.\n    'number' is the integer to be logically left shifted 'shift_amount' times.\n    i.e. (number << shift_amount)\n    Return the shifted binary representation.\n\n    >>> logical_left_shift(0, 1)\n    '0b00'\n    >>> logical_left_shift(1, 1)\n    '0b10'\n    >>> logical_left_shift(1, 5)\n    '0b100000'\n    >>> logical_left_shift(17, 2)\n    '0b1000100'\n    >>> logical_left_shift(1983, 4)\n    '0b111101111110000'\n    >>> logical_left_shift(1, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: both inputs must be positive integers\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    Take in 2 positive integers.\n    'number' is the integer to be logically left shifted 'shift_amount' times.\n    i.e. (number << shift_amount)\n    Return the shifted binary representation.\n\n    >>> logical_left_shift(0, 1)\n    '0b00'\n    >>> logical_left_shift(1, 1)\n    '0b10'\n    >>> logical_left_shift(1, 5)\n    '0b100000'\n    >>> logical_left_shift(17, 2)\n    '0b1000100'\n    >>> logical_left_shift(1983, 4)\n    '0b111101111110000'\n    >>> logical_left_shift(1, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: both inputs must be positive integers\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Take in 2 positive integers.\n    'number' is the integer to be logically left shifted 'shift_amount' times.\n    i.e. (number << shift_amount)\n    Return the shifted binary representation.\n\n    >>> logical_left_shift(0, 1)\n    '0b00'\n    >>> logical_left_shift(1, 1)\n    '0b10'\n    >>> logical_left_shift(1, 5)\n    '0b100000'\n    >>> logical_left_shift(17, 2)\n    '0b1000100'\n    >>> logical_left_shift(1983, 4)\n    '0b111101111110000'\n    >>> logical_left_shift(1, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: both inputs must be positive integers",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "if number < 0 or shift_amount < 0:\n        raise ValueError(\"both inputs must be positive integers\")",
              "children": [
                {
                  "value": "number < 0 or shift_amount < 0",
                  "children": [
                    {
                      "value": "number < 0",
                      "children": [
                        {
                          "value": "number",
                          "children": []
                        },
                        {
                          "value": "0",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "shift_amount < 0",
                      "children": [
                        {
                          "value": "shift_amount",
                          "children": []
                        },
                        {
                          "value": "0",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "raise ValueError(\"both inputs must be positive integers\")",
                  "children": [
                    {
                      "value": "raise ValueError(\"both inputs must be positive integers\")",
                      "children": [
                        {
                          "value": "ValueError(\"both inputs must be positive integers\")",
                          "children": [
                            {
                              "value": "ValueError",
                              "children": []
                            },
                            {
                              "value": "(\"both inputs must be positive integers\")",
                              "children": [
                                {
                                  "value": "\"both inputs must be positive integers\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "both inputs must be positive integers",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "binary_number = str(bin(number))",
              "children": [
                {
                  "value": "binary_number = str(bin(number))",
                  "children": [
                    {
                      "value": "binary_number",
                      "children": []
                    },
                    {
                      "value": "str(bin(number))",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        },
                        {
                          "value": "(bin(number))",
                          "children": [
                            {
                              "value": "bin(number)",
                              "children": [
                                {
                                  "value": "bin",
                                  "children": []
                                },
                                {
                                  "value": "(number)",
                                  "children": [
                                    {
                                      "value": "number",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "binary_number += \"0\" * shift_amount",
              "children": [
                {
                  "value": "binary_number += \"0\" * shift_amount",
                  "children": [
                    {
                      "value": "binary_number",
                      "children": []
                    },
                    {
                      "value": "\"0\" * shift_amount",
                      "children": [
                        {
                          "value": "\"0\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "0",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "shift_amount",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "return binary_number",
              "children": [
                {
                  "value": "binary_number",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def logical_right_shift(number: int, shift_amount: int) -> str:\n    \"\"\"\n    Take in positive 2 integers.\n    'number' is the integer to be logically right shifted 'shift_amount' times.\n    i.e. (number >>> shift_amount)\n    Return the shifted binary representation.\n\n    >>> logical_right_shift(0, 1)\n    '0b0'\n    >>> logical_right_shift(1, 1)\n    '0b0'\n    >>> logical_right_shift(1, 5)\n    '0b0'\n    >>> logical_right_shift(17, 2)\n    '0b100'\n    >>> logical_right_shift(1983, 4)\n    '0b1111011'\n    >>> logical_right_shift(1, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: both inputs must be positive integers\n    \"\"\"\n    if number < 0 or shift_amount < 0:\n        raise ValueError(\"both inputs must be positive integers\")\n\n    binary_number = str(bin(number))[2:]\n    if shift_amount >= len(binary_number):\n        return \"0b0\"\n    shifted_binary_number = binary_number[: len(binary_number) - shift_amount]\n    return \"0b\" + shifted_binary_number",
      "children": [
        {
          "value": "logical_right_shift",
          "children": []
        },
        {
          "value": "(number: int, shift_amount: int)",
          "children": [
            {
              "value": "number: int",
              "children": [
                {
                  "value": "number",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "shift_amount: int",
              "children": [
                {
                  "value": "shift_amount",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "str",
          "children": [
            {
              "value": "str",
              "children": []
            }
          ]
        },
        {
          "value": "\"\"\"\n    Take in positive 2 integers.\n    'number' is the integer to be logically right shifted 'shift_amount' times.\n    i.e. (number >>> shift_amount)\n    Return the shifted binary representation.\n\n    >>> logical_right_shift(0, 1)\n    '0b0'\n    >>> logical_right_shift(1, 1)\n    '0b0'\n    >>> logical_right_shift(1, 5)\n    '0b0'\n    >>> logical_right_shift(17, 2)\n    '0b100'\n    >>> logical_right_shift(1983, 4)\n    '0b1111011'\n    >>> logical_right_shift(1, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: both inputs must be positive integers\n    \"\"\"\n    if number < 0 or shift_amount < 0:\n        raise ValueError(\"both inputs must be positive integers\")\n\n    binary_number = str(bin(number))[2:]\n    if shift_amount >= len(binary_number):\n        return \"0b0\"\n    shifted_binary_number = binary_number[: len(binary_number) - shift_amount]\n    return \"0b\" + shifted_binary_number",
          "children": [
            {
              "value": "\"\"\"\n    Take in positive 2 integers.\n    'number' is the integer to be logically right shifted 'shift_amount' times.\n    i.e. (number >>> shift_amount)\n    Return the shifted binary representation.\n\n    >>> logical_right_shift(0, 1)\n    '0b0'\n    >>> logical_right_shift(1, 1)\n    '0b0'\n    >>> logical_right_shift(1, 5)\n    '0b0'\n    >>> logical_right_shift(17, 2)\n    '0b100'\n    >>> logical_right_shift(1983, 4)\n    '0b1111011'\n    >>> logical_right_shift(1, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: both inputs must be positive integers\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    Take in positive 2 integers.\n    'number' is the integer to be logically right shifted 'shift_amount' times.\n    i.e. (number >>> shift_amount)\n    Return the shifted binary representation.\n\n    >>> logical_right_shift(0, 1)\n    '0b0'\n    >>> logical_right_shift(1, 1)\n    '0b0'\n    >>> logical_right_shift(1, 5)\n    '0b0'\n    >>> logical_right_shift(17, 2)\n    '0b100'\n    >>> logical_right_shift(1983, 4)\n    '0b1111011'\n    >>> logical_right_shift(1, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: both inputs must be positive integers\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Take in positive 2 integers.\n    'number' is the integer to be logically right shifted 'shift_amount' times.\n    i.e. (number >>> shift_amount)\n    Return the shifted binary representation.\n\n    >>> logical_right_shift(0, 1)\n    '0b0'\n    >>> logical_right_shift(1, 1)\n    '0b0'\n    >>> logical_right_shift(1, 5)\n    '0b0'\n    >>> logical_right_shift(17, 2)\n    '0b100'\n    >>> logical_right_shift(1983, 4)\n    '0b1111011'\n    >>> logical_right_shift(1, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: both inputs must be positive integers",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "if number < 0 or shift_amount < 0:\n        raise ValueError(\"both inputs must be positive integers\")",
              "children": [
                {
                  "value": "number < 0 or shift_amount < 0",
                  "children": [
                    {
                      "value": "number < 0",
                      "children": [
                        {
                          "value": "number",
                          "children": []
                        },
                        {
                          "value": "0",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "shift_amount < 0",
                      "children": [
                        {
                          "value": "shift_amount",
                          "children": []
                        },
                        {
                          "value": "0",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "raise ValueError(\"both inputs must be positive integers\")",
                  "children": [
                    {
                      "value": "raise ValueError(\"both inputs must be positive integers\")",
                      "children": [
                        {
                          "value": "ValueError(\"both inputs must be positive integers\")",
                          "children": [
                            {
                              "value": "ValueError",
                              "children": []
                            },
                            {
                              "value": "(\"both inputs must be positive integers\")",
                              "children": [
                                {
                                  "value": "\"both inputs must be positive integers\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "both inputs must be positive integers",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "binary_number = str(bin(number))[2:]",
              "children": [
                {
                  "value": "binary_number = str(bin(number))[2:]",
                  "children": [
                    {
                      "value": "binary_number",
                      "children": []
                    },
                    {
                      "value": "str(bin(number))[2:]",
                      "children": [
                        {
                          "value": "str(bin(number))",
                          "children": [
                            {
                              "value": "str",
                              "children": []
                            },
                            {
                              "value": "(bin(number))",
                              "children": [
                                {
                                  "value": "bin(number)",
                                  "children": [
                                    {
                                      "value": "bin",
                                      "children": []
                                    },
                                    {
                                      "value": "(number)",
                                      "children": [
                                        {
                                          "value": "number",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "2:",
                          "children": [
                            {
                              "value": "2",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "if shift_amount >= len(binary_number):\n        return \"0b0\"",
              "children": [
                {
                  "value": "shift_amount >= len(binary_number)",
                  "children": [
                    {
                      "value": "shift_amount",
                      "children": []
                    },
                    {
                      "value": "len(binary_number)",
                      "children": [
                        {
                          "value": "len",
                          "children": []
                        },
                        {
                          "value": "(binary_number)",
                          "children": [
                            {
                              "value": "binary_number",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "return \"0b0\"",
                  "children": [
                    {
                      "value": "return \"0b0\"",
                      "children": [
                        {
                          "value": "\"0b0\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "0b0",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "shifted_binary_number = binary_number[: len(binary_number) - shift_amount]",
              "children": [
                {
                  "value": "shifted_binary_number = binary_number[: len(binary_number) - shift_amount]",
                  "children": [
                    {
                      "value": "shifted_binary_number",
                      "children": []
                    },
                    {
                      "value": "binary_number[: len(binary_number) - shift_amount]",
                      "children": [
                        {
                          "value": "binary_number",
                          "children": []
                        },
                        {
                          "value": ": len(binary_number) - shift_amount",
                          "children": [
                            {
                              "value": "len(binary_number) - shift_amount",
                              "children": [
                                {
                                  "value": "len(binary_number)",
                                  "children": [
                                    {
                                      "value": "len",
                                      "children": []
                                    },
                                    {
                                      "value": "(binary_number)",
                                      "children": [
                                        {
                                          "value": "binary_number",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "shift_amount",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "return \"0b\" + shifted_binary_number",
              "children": [
                {
                  "value": "\"0b\" + shifted_binary_number",
                  "children": [
                    {
                      "value": "\"0b\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "0b",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "shifted_binary_number",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def arithmetic_right_shift(number: int, shift_amount: int) -> str:\n    \"\"\"\n    Take in 2 integers.\n    'number' is the integer to be arithmetically right shifted 'shift_amount' times.\n    i.e. (number >> shift_amount)\n    Return the shifted binary representation.\n\n    >>> arithmetic_right_shift(0, 1)\n    '0b00'\n    >>> arithmetic_right_shift(1, 1)\n    '0b00'\n    >>> arithmetic_right_shift(-1, 1)\n    '0b11'\n    >>> arithmetic_right_shift(17, 2)\n    '0b000100'\n    >>> arithmetic_right_shift(-17, 2)\n    '0b111011'\n    >>> arithmetic_right_shift(-1983, 4)\n    '0b111110000100'\n    \"\"\"\n    if number >= 0:  # Get binary representation of positive number\n        binary_number = \"0\" + str(bin(number)).strip(\"-\")[2:]\n    else:  # Get binary (2's complement) representation of negative number\n        binary_number_length = len(bin(number)[3:])  # Find 2's complement of number\n        binary_number = bin(abs(number) - (1 << binary_number_length))[3:]\n        binary_number = (\n            \"1\" + \"0\" * (binary_number_length - len(binary_number)) + binary_number\n        )\n\n    if shift_amount >= len(binary_number):\n        return \"0b\" + binary_number[0] * len(binary_number)\n    return (\n        \"0b\"\n        + binary_number[0] * shift_amount\n        + binary_number[: len(binary_number) - shift_amount]\n    )",
      "children": [
        {
          "value": "arithmetic_right_shift",
          "children": []
        },
        {
          "value": "(number: int, shift_amount: int)",
          "children": [
            {
              "value": "number: int",
              "children": [
                {
                  "value": "number",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "shift_amount: int",
              "children": [
                {
                  "value": "shift_amount",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "str",
          "children": [
            {
              "value": "str",
              "children": []
            }
          ]
        },
        {
          "value": "\"\"\"\n    Take in 2 integers.\n    'number' is the integer to be arithmetically right shifted 'shift_amount' times.\n    i.e. (number >> shift_amount)\n    Return the shifted binary representation.\n\n    >>> arithmetic_right_shift(0, 1)\n    '0b00'\n    >>> arithmetic_right_shift(1, 1)\n    '0b00'\n    >>> arithmetic_right_shift(-1, 1)\n    '0b11'\n    >>> arithmetic_right_shift(17, 2)\n    '0b000100'\n    >>> arithmetic_right_shift(-17, 2)\n    '0b111011'\n    >>> arithmetic_right_shift(-1983, 4)\n    '0b111110000100'\n    \"\"\"\n    if number >= 0:  # Get binary representation of positive number\n        binary_number = \"0\" + str(bin(number)).strip(\"-\")[2:]\n    else:  # Get binary (2's complement) representation of negative number\n        binary_number_length = len(bin(number)[3:])  # Find 2's complement of number\n        binary_number = bin(abs(number) - (1 << binary_number_length))[3:]\n        binary_number = (\n            \"1\" + \"0\" * (binary_number_length - len(binary_number)) + binary_number\n        )\n\n    if shift_amount >= len(binary_number):\n        return \"0b\" + binary_number[0] * len(binary_number)\n    return (\n        \"0b\"\n        + binary_number[0] * shift_amount\n        + binary_number[: len(binary_number) - shift_amount]\n    )",
          "children": [
            {
              "value": "\"\"\"\n    Take in 2 integers.\n    'number' is the integer to be arithmetically right shifted 'shift_amount' times.\n    i.e. (number >> shift_amount)\n    Return the shifted binary representation.\n\n    >>> arithmetic_right_shift(0, 1)\n    '0b00'\n    >>> arithmetic_right_shift(1, 1)\n    '0b00'\n    >>> arithmetic_right_shift(-1, 1)\n    '0b11'\n    >>> arithmetic_right_shift(17, 2)\n    '0b000100'\n    >>> arithmetic_right_shift(-17, 2)\n    '0b111011'\n    >>> arithmetic_right_shift(-1983, 4)\n    '0b111110000100'\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    Take in 2 integers.\n    'number' is the integer to be arithmetically right shifted 'shift_amount' times.\n    i.e. (number >> shift_amount)\n    Return the shifted binary representation.\n\n    >>> arithmetic_right_shift(0, 1)\n    '0b00'\n    >>> arithmetic_right_shift(1, 1)\n    '0b00'\n    >>> arithmetic_right_shift(-1, 1)\n    '0b11'\n    >>> arithmetic_right_shift(17, 2)\n    '0b000100'\n    >>> arithmetic_right_shift(-17, 2)\n    '0b111011'\n    >>> arithmetic_right_shift(-1983, 4)\n    '0b111110000100'\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Take in 2 integers.\n    'number' is the integer to be arithmetically right shifted 'shift_amount' times.\n    i.e. (number >> shift_amount)\n    Return the shifted binary representation.\n\n    >>> arithmetic_right_shift(0, 1)\n    '0b00'\n    >>> arithmetic_right_shift(1, 1)\n    '0b00'\n    >>> arithmetic_right_shift(-1, 1)\n    '0b11'\n    >>> arithmetic_right_shift(17, 2)\n    '0b000100'\n    >>> arithmetic_right_shift(-17, 2)\n    '0b111011'\n    >>> arithmetic_right_shift(-1983, 4)\n    '0b111110000100'",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "if number >= 0:  # Get binary representation of positive number\n        binary_number = \"0\" + str(bin(number)).strip(\"-\")[2:]\n    else:  # Get binary (2's complement) representation of negative number\n        binary_number_length = len(bin(number)[3:])  # Find 2's complement of number\n        binary_number = bin(abs(number) - (1 << binary_number_length))[3:]\n        binary_number = (\n            \"1\" + \"0\" * (binary_number_length - len(binary_number)) + binary_number\n        )",
              "children": [
                {
                  "value": "number >= 0",
                  "children": [
                    {
                      "value": "number",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "# Get binary representation of positive number",
                  "children": []
                },
                {
                  "value": "binary_number = \"0\" + str(bin(number)).strip(\"-\")[2:]",
                  "children": [
                    {
                      "value": "binary_number = \"0\" + str(bin(number)).strip(\"-\")[2:]",
                      "children": [
                        {
                          "value": "binary_number = \"0\" + str(bin(number)).strip(\"-\")[2:]",
                          "children": [
                            {
                              "value": "binary_number",
                              "children": []
                            },
                            {
                              "value": "\"0\" + str(bin(number)).strip(\"-\")[2:]",
                              "children": [
                                {
                                  "value": "\"0\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "0",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "str(bin(number)).strip(\"-\")[2:]",
                                  "children": [
                                    {
                                      "value": "str(bin(number)).strip(\"-\")",
                                      "children": [
                                        {
                                          "value": "str(bin(number)).strip",
                                          "children": [
                                            {
                                              "value": "str(bin(number))",
                                              "children": [
                                                {
                                                  "value": "str",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(bin(number))",
                                                  "children": [
                                                    {
                                                      "value": "bin(number)",
                                                      "children": [
                                                        {
                                                          "value": "bin",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "(number)",
                                                          "children": [
                                                            {
                                                              "value": "number",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "strip",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(\"-\")",
                                          "children": [
                                            {
                                              "value": "\"-\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "-",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "2:",
                                      "children": [
                                        {
                                          "value": "2",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "else:  # Get binary (2's complement) representation of negative number\n        binary_number_length = len(bin(number)[3:])  # Find 2's complement of number\n        binary_number = bin(abs(number) - (1 << binary_number_length))[3:]\n        binary_number = (\n            \"1\" + \"0\" * (binary_number_length - len(binary_number)) + binary_number\n        )",
                  "children": [
                    {
                      "value": "# Get binary (2's complement) representation of negative number",
                      "children": []
                    },
                    {
                      "value": "binary_number_length = len(bin(number)[3:])  # Find 2's complement of number\n        binary_number = bin(abs(number) - (1 << binary_number_length))[3:]\n        binary_number = (\n            \"1\" + \"0\" * (binary_number_length - len(binary_number)) + binary_number\n        )",
                      "children": [
                        {
                          "value": "binary_number_length = len(bin(number)[3:])",
                          "children": [
                            {
                              "value": "binary_number_length = len(bin(number)[3:])",
                              "children": [
                                {
                                  "value": "binary_number_length",
                                  "children": []
                                },
                                {
                                  "value": "len(bin(number)[3:])",
                                  "children": [
                                    {
                                      "value": "len",
                                      "children": []
                                    },
                                    {
                                      "value": "(bin(number)[3:])",
                                      "children": [
                                        {
                                          "value": "bin(number)[3:]",
                                          "children": [
                                            {
                                              "value": "bin(number)",
                                              "children": [
                                                {
                                                  "value": "bin",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(number)",
                                                  "children": [
                                                    {
                                                      "value": "number",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "3:",
                                              "children": [
                                                {
                                                  "value": "3",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "# Find 2's complement of number",
                          "children": []
                        },
                        {
                          "value": "binary_number = bin(abs(number) - (1 << binary_number_length))[3:]",
                          "children": [
                            {
                              "value": "binary_number = bin(abs(number) - (1 << binary_number_length))[3:]",
                              "children": [
                                {
                                  "value": "binary_number",
                                  "children": []
                                },
                                {
                                  "value": "bin(abs(number) - (1 << binary_number_length))[3:]",
                                  "children": [
                                    {
                                      "value": "bin(abs(number) - (1 << binary_number_length))",
                                      "children": [
                                        {
                                          "value": "bin",
                                          "children": []
                                        },
                                        {
                                          "value": "(abs(number) - (1 << binary_number_length))",
                                          "children": [
                                            {
                                              "value": "abs(number) - (1 << binary_number_length)",
                                              "children": [
                                                {
                                                  "value": "abs(number)",
                                                  "children": [
                                                    {
                                                      "value": "abs",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "(number)",
                                                      "children": [
                                                        {
                                                          "value": "number",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(1 << binary_number_length)",
                                                  "children": [
                                                    {
                                                      "value": "1 << binary_number_length",
                                                      "children": [
                                                        {
                                                          "value": "1",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "binary_number_length",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "3:",
                                      "children": [
                                        {
                                          "value": "3",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "binary_number = (\n            \"1\" + \"0\" * (binary_number_length - len(binary_number)) + binary_number\n        )",
                          "children": [
                            {
                              "value": "binary_number = (\n            \"1\" + \"0\" * (binary_number_length - len(binary_number)) + binary_number\n        )",
                              "children": [
                                {
                                  "value": "binary_number",
                                  "children": []
                                },
                                {
                                  "value": "(\n            \"1\" + \"0\" * (binary_number_length - len(binary_number)) + binary_number\n        )",
                                  "children": [
                                    {
                                      "value": "\"1\" + \"0\" * (binary_number_length - len(binary_number)) + binary_number",
                                      "children": [
                                        {
                                          "value": "\"1\" + \"0\" * (binary_number_length - len(binary_number))",
                                          "children": [
                                            {
                                              "value": "\"1\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "1",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"0\" * (binary_number_length - len(binary_number))",
                                              "children": [
                                                {
                                                  "value": "\"0\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "0",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(binary_number_length - len(binary_number))",
                                                  "children": [
                                                    {
                                                      "value": "binary_number_length - len(binary_number)",
                                                      "children": [
                                                        {
                                                          "value": "binary_number_length",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "len(binary_number)",
                                                          "children": [
                                                            {
                                                              "value": "len",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "(binary_number)",
                                                              "children": [
                                                                {
                                                                  "value": "binary_number",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "binary_number",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "if shift_amount >= len(binary_number):\n        return \"0b\" + binary_number[0] * len(binary_number)",
              "children": [
                {
                  "value": "shift_amount >= len(binary_number)",
                  "children": [
                    {
                      "value": "shift_amount",
                      "children": []
                    },
                    {
                      "value": "len(binary_number)",
                      "children": [
                        {
                          "value": "len",
                          "children": []
                        },
                        {
                          "value": "(binary_number)",
                          "children": [
                            {
                              "value": "binary_number",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "return \"0b\" + binary_number[0] * len(binary_number)",
                  "children": [
                    {
                      "value": "return \"0b\" + binary_number[0] * len(binary_number)",
                      "children": [
                        {
                          "value": "\"0b\" + binary_number[0] * len(binary_number)",
                          "children": [
                            {
                              "value": "\"0b\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "0b",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "binary_number[0] * len(binary_number)",
                              "children": [
                                {
                                  "value": "binary_number[0]",
                                  "children": [
                                    {
                                      "value": "binary_number",
                                      "children": []
                                    },
                                    {
                                      "value": "0",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "len(binary_number)",
                                  "children": [
                                    {
                                      "value": "len",
                                      "children": []
                                    },
                                    {
                                      "value": "(binary_number)",
                                      "children": [
                                        {
                                          "value": "binary_number",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "return (\n        \"0b\"\n        + binary_number[0] * shift_amount\n        + binary_number[: len(binary_number) - shift_amount]\n    )",
              "children": [
                {
                  "value": "(\n        \"0b\"\n        + binary_number[0] * shift_amount\n        + binary_number[: len(binary_number) - shift_amount]\n    )",
                  "children": [
                    {
                      "value": "\"0b\"\n        + binary_number[0] * shift_amount\n        + binary_number[: len(binary_number) - shift_amount]",
                      "children": [
                        {
                          "value": "\"0b\"\n        + binary_number[0] * shift_amount",
                          "children": [
                            {
                              "value": "\"0b\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "0b",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "binary_number[0] * shift_amount",
                              "children": [
                                {
                                  "value": "binary_number[0]",
                                  "children": [
                                    {
                                      "value": "binary_number",
                                      "children": []
                                    },
                                    {
                                      "value": "0",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "shift_amount",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "binary_number[: len(binary_number) - shift_amount]",
                          "children": [
                            {
                              "value": "binary_number",
                              "children": []
                            },
                            {
                              "value": ": len(binary_number) - shift_amount",
                              "children": [
                                {
                                  "value": "len(binary_number) - shift_amount",
                                  "children": [
                                    {
                                      "value": "len(binary_number)",
                                      "children": [
                                        {
                                          "value": "len",
                                          "children": []
                                        },
                                        {
                                          "value": "(binary_number)",
                                          "children": [
                                            {
                                              "value": "binary_number",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "shift_amount",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "if __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      "children": [
        {
          "value": "__name__ == \"__main__\"",
          "children": [
            {
              "value": "__name__",
              "children": []
            },
            {
              "value": "\"__main__\"",
              "children": [
                {
                  "value": "\"",
                  "children": []
                },
                {
                  "value": "__main__",
                  "children": []
                },
                {
                  "value": "\"",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "import doctest\n\n    doctest.testmod()",
          "children": [
            {
              "value": "import doctest",
              "children": [
                {
                  "value": "doctest",
                  "children": [
                    {
                      "value": "doctest",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "doctest.testmod()",
              "children": [
                {
                  "value": "doctest.testmod()",
                  "children": [
                    {
                      "value": "doctest.testmod",
                      "children": [
                        {
                          "value": "doctest",
                          "children": []
                        },
                        {
                          "value": "testmod",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "()",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}