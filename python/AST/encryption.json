{
  "value": "import json\nfrom typing import Optional\n\nfrom cryptography.fernet import Fernet\n\nfrom backend.util.settings import Settings\n\nENCRYPTION_KEY = Settings().secrets.encryption_key\n\n\nclass JSONCryptor:\n    def __init__(self, key: Optional[str] = None):\n        # Use provided key or get from environment\n        self.key = key or ENCRYPTION_KEY\n        if not self.key:\n            raise ValueError(\n                \"Encryption key must be provided or set in ENCRYPTION_KEY environment variable\"\n            )\n        self.fernet = Fernet(\n            self.key.encode() if isinstance(self.key, str) else self.key\n        )\n\n    def encrypt(self, data: dict) -> str:\n        \"\"\"Encrypt dictionary data to string\"\"\"\n        json_str = json.dumps(data)\n        encrypted = self.fernet.encrypt(json_str.encode())\n        return encrypted.decode()\n\n    def decrypt(self, encrypted_str: str) -> dict:\n        \"\"\"Decrypt string to dictionary\"\"\"\n        if not encrypted_str:\n            return {}\n        decrypted = self.fernet.decrypt(encrypted_str.encode())\n        return json.loads(decrypted.decode())",
  "children": [
    {
      "value": "import json",
      "children": [
        {
          "value": "json",
          "children": [
            {
              "value": "json",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from typing import Optional",
      "children": [
        {
          "value": "typing",
          "children": [
            {
              "value": "typing",
              "children": []
            }
          ]
        },
        {
          "value": "Optional",
          "children": [
            {
              "value": "Optional",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from cryptography.fernet import Fernet",
      "children": [
        {
          "value": "cryptography.fernet",
          "children": [
            {
              "value": "cryptography",
              "children": []
            },
            {
              "value": "fernet",
              "children": []
            }
          ]
        },
        {
          "value": "Fernet",
          "children": [
            {
              "value": "Fernet",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.util.settings import Settings",
      "children": [
        {
          "value": "backend.util.settings",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "util",
              "children": []
            },
            {
              "value": "settings",
              "children": []
            }
          ]
        },
        {
          "value": "Settings",
          "children": [
            {
              "value": "Settings",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "ENCRYPTION_KEY = Settings().secrets.encryption_key",
      "children": [
        {
          "value": "ENCRYPTION_KEY = Settings().secrets.encryption_key",
          "children": [
            {
              "value": "ENCRYPTION_KEY",
              "children": []
            },
            {
              "value": "Settings().secrets.encryption_key",
              "children": [
                {
                  "value": "Settings().secrets",
                  "children": [
                    {
                      "value": "Settings()",
                      "children": [
                        {
                          "value": "Settings",
                          "children": []
                        },
                        {
                          "value": "()",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "secrets",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "encryption_key",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class JSONCryptor:\n    def __init__(self, key: Optional[str] = None):\n        # Use provided key or get from environment\n        self.key = key or ENCRYPTION_KEY\n        if not self.key:\n            raise ValueError(\n                \"Encryption key must be provided or set in ENCRYPTION_KEY environment variable\"\n            )\n        self.fernet = Fernet(\n            self.key.encode() if isinstance(self.key, str) else self.key\n        )\n\n    def encrypt(self, data: dict) -> str:\n        \"\"\"Encrypt dictionary data to string\"\"\"\n        json_str = json.dumps(data)\n        encrypted = self.fernet.encrypt(json_str.encode())\n        return encrypted.decode()\n\n    def decrypt(self, encrypted_str: str) -> dict:\n        \"\"\"Decrypt string to dictionary\"\"\"\n        if not encrypted_str:\n            return {}\n        decrypted = self.fernet.decrypt(encrypted_str.encode())\n        return json.loads(decrypted.decode())",
      "children": [
        {
          "value": "JSONCryptor",
          "children": []
        },
        {
          "value": "def __init__(self, key: Optional[str] = None):\n        # Use provided key or get from environment\n        self.key = key or ENCRYPTION_KEY\n        if not self.key:\n            raise ValueError(\n                \"Encryption key must be provided or set in ENCRYPTION_KEY environment variable\"\n            )\n        self.fernet = Fernet(\n            self.key.encode() if isinstance(self.key, str) else self.key\n        )\n\n    def encrypt(self, data: dict) -> str:\n        \"\"\"Encrypt dictionary data to string\"\"\"\n        json_str = json.dumps(data)\n        encrypted = self.fernet.encrypt(json_str.encode())\n        return encrypted.decode()\n\n    def decrypt(self, encrypted_str: str) -> dict:\n        \"\"\"Decrypt string to dictionary\"\"\"\n        if not encrypted_str:\n            return {}\n        decrypted = self.fernet.decrypt(encrypted_str.encode())\n        return json.loads(decrypted.decode())",
          "children": [
            {
              "value": "def __init__(self, key: Optional[str] = None):\n        # Use provided key or get from environment\n        self.key = key or ENCRYPTION_KEY\n        if not self.key:\n            raise ValueError(\n                \"Encryption key must be provided or set in ENCRYPTION_KEY environment variable\"\n            )\n        self.fernet = Fernet(\n            self.key.encode() if isinstance(self.key, str) else self.key\n        )",
              "children": [
                {
                  "value": "__init__",
                  "children": []
                },
                {
                  "value": "(self, key: Optional[str] = None)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "key: Optional[str] = None",
                      "children": [
                        {
                          "value": "key",
                          "children": []
                        },
                        {
                          "value": "Optional[str]",
                          "children": [
                            {
                              "value": "Optional[str]",
                              "children": [
                                {
                                  "value": "Optional",
                                  "children": []
                                },
                                {
                                  "value": "[str]",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": [
                                        {
                                          "value": "str",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "None",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "# Use provided key or get from environment",
                  "children": []
                },
                {
                  "value": "self.key = key or ENCRYPTION_KEY\n        if not self.key:\n            raise ValueError(\n                \"Encryption key must be provided or set in ENCRYPTION_KEY environment variable\"\n            )\n        self.fernet = Fernet(\n            self.key.encode() if isinstance(self.key, str) else self.key\n        )",
                  "children": [
                    {
                      "value": "self.key = key or ENCRYPTION_KEY",
                      "children": [
                        {
                          "value": "self.key = key or ENCRYPTION_KEY",
                          "children": [
                            {
                              "value": "self.key",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "key",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "key or ENCRYPTION_KEY",
                              "children": [
                                {
                                  "value": "key",
                                  "children": []
                                },
                                {
                                  "value": "ENCRYPTION_KEY",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if not self.key:\n            raise ValueError(\n                \"Encryption key must be provided or set in ENCRYPTION_KEY environment variable\"\n            )",
                      "children": [
                        {
                          "value": "not self.key",
                          "children": [
                            {
                              "value": "self.key",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "key",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "raise ValueError(\n                \"Encryption key must be provided or set in ENCRYPTION_KEY environment variable\"\n            )",
                          "children": [
                            {
                              "value": "raise ValueError(\n                \"Encryption key must be provided or set in ENCRYPTION_KEY environment variable\"\n            )",
                              "children": [
                                {
                                  "value": "ValueError(\n                \"Encryption key must be provided or set in ENCRYPTION_KEY environment variable\"\n            )",
                                  "children": [
                                    {
                                      "value": "ValueError",
                                      "children": []
                                    },
                                    {
                                      "value": "(\n                \"Encryption key must be provided or set in ENCRYPTION_KEY environment variable\"\n            )",
                                      "children": [
                                        {
                                          "value": "\"Encryption key must be provided or set in ENCRYPTION_KEY environment variable\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Encryption key must be provided or set in ENCRYPTION_KEY environment variable",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.fernet = Fernet(\n            self.key.encode() if isinstance(self.key, str) else self.key\n        )",
                      "children": [
                        {
                          "value": "self.fernet = Fernet(\n            self.key.encode() if isinstance(self.key, str) else self.key\n        )",
                          "children": [
                            {
                              "value": "self.fernet",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "fernet",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "Fernet(\n            self.key.encode() if isinstance(self.key, str) else self.key\n        )",
                              "children": [
                                {
                                  "value": "Fernet",
                                  "children": []
                                },
                                {
                                  "value": "(\n            self.key.encode() if isinstance(self.key, str) else self.key\n        )",
                                  "children": [
                                    {
                                      "value": "self.key.encode() if isinstance(self.key, str) else self.key",
                                      "children": [
                                        {
                                          "value": "self.key.encode()",
                                          "children": [
                                            {
                                              "value": "self.key.encode",
                                              "children": [
                                                {
                                                  "value": "self.key",
                                                  "children": [
                                                    {
                                                      "value": "self",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "key",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "encode",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "()",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "isinstance(self.key, str)",
                                          "children": [
                                            {
                                              "value": "isinstance",
                                              "children": []
                                            },
                                            {
                                              "value": "(self.key, str)",
                                              "children": [
                                                {
                                                  "value": "self.key",
                                                  "children": [
                                                    {
                                                      "value": "self",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "key",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "str",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "self.key",
                                          "children": [
                                            {
                                              "value": "self",
                                              "children": []
                                            },
                                            {
                                              "value": "key",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def encrypt(self, data: dict) -> str:\n        \"\"\"Encrypt dictionary data to string\"\"\"\n        json_str = json.dumps(data)\n        encrypted = self.fernet.encrypt(json_str.encode())\n        return encrypted.decode()",
              "children": [
                {
                  "value": "encrypt",
                  "children": []
                },
                {
                  "value": "(self, data: dict)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "data: dict",
                      "children": [
                        {
                          "value": "data",
                          "children": []
                        },
                        {
                          "value": "dict",
                          "children": [
                            {
                              "value": "dict",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "\"\"\"Encrypt dictionary data to string\"\"\"\n        json_str = json.dumps(data)\n        encrypted = self.fernet.encrypt(json_str.encode())\n        return encrypted.decode()",
                  "children": [
                    {
                      "value": "\"\"\"Encrypt dictionary data to string\"\"\"",
                      "children": [
                        {
                          "value": "\"\"\"Encrypt dictionary data to string\"\"\"",
                          "children": [
                            {
                              "value": "\"\"\"",
                              "children": []
                            },
                            {
                              "value": "Encrypt dictionary data to string",
                              "children": []
                            },
                            {
                              "value": "\"\"\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "json_str = json.dumps(data)",
                      "children": [
                        {
                          "value": "json_str = json.dumps(data)",
                          "children": [
                            {
                              "value": "json_str",
                              "children": []
                            },
                            {
                              "value": "json.dumps(data)",
                              "children": [
                                {
                                  "value": "json.dumps",
                                  "children": [
                                    {
                                      "value": "json",
                                      "children": []
                                    },
                                    {
                                      "value": "dumps",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(data)",
                                  "children": [
                                    {
                                      "value": "data",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "encrypted = self.fernet.encrypt(json_str.encode())",
                      "children": [
                        {
                          "value": "encrypted = self.fernet.encrypt(json_str.encode())",
                          "children": [
                            {
                              "value": "encrypted",
                              "children": []
                            },
                            {
                              "value": "self.fernet.encrypt(json_str.encode())",
                              "children": [
                                {
                                  "value": "self.fernet.encrypt",
                                  "children": [
                                    {
                                      "value": "self.fernet",
                                      "children": [
                                        {
                                          "value": "self",
                                          "children": []
                                        },
                                        {
                                          "value": "fernet",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "encrypt",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(json_str.encode())",
                                  "children": [
                                    {
                                      "value": "json_str.encode()",
                                      "children": [
                                        {
                                          "value": "json_str.encode",
                                          "children": [
                                            {
                                              "value": "json_str",
                                              "children": []
                                            },
                                            {
                                              "value": "encode",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "()",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return encrypted.decode()",
                      "children": [
                        {
                          "value": "encrypted.decode()",
                          "children": [
                            {
                              "value": "encrypted.decode",
                              "children": [
                                {
                                  "value": "encrypted",
                                  "children": []
                                },
                                {
                                  "value": "decode",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "()",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def decrypt(self, encrypted_str: str) -> dict:\n        \"\"\"Decrypt string to dictionary\"\"\"\n        if not encrypted_str:\n            return {}\n        decrypted = self.fernet.decrypt(encrypted_str.encode())\n        return json.loads(decrypted.decode())",
              "children": [
                {
                  "value": "decrypt",
                  "children": []
                },
                {
                  "value": "(self, encrypted_str: str)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "encrypted_str: str",
                      "children": [
                        {
                          "value": "encrypted_str",
                          "children": []
                        },
                        {
                          "value": "str",
                          "children": [
                            {
                              "value": "str",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "dict",
                  "children": [
                    {
                      "value": "dict",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "\"\"\"Decrypt string to dictionary\"\"\"\n        if not encrypted_str:\n            return {}\n        decrypted = self.fernet.decrypt(encrypted_str.encode())\n        return json.loads(decrypted.decode())",
                  "children": [
                    {
                      "value": "\"\"\"Decrypt string to dictionary\"\"\"",
                      "children": [
                        {
                          "value": "\"\"\"Decrypt string to dictionary\"\"\"",
                          "children": [
                            {
                              "value": "\"\"\"",
                              "children": []
                            },
                            {
                              "value": "Decrypt string to dictionary",
                              "children": []
                            },
                            {
                              "value": "\"\"\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if not encrypted_str:\n            return {}",
                      "children": [
                        {
                          "value": "not encrypted_str",
                          "children": [
                            {
                              "value": "encrypted_str",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "return {}",
                          "children": [
                            {
                              "value": "return {}",
                              "children": [
                                {
                                  "value": "{}",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "decrypted = self.fernet.decrypt(encrypted_str.encode())",
                      "children": [
                        {
                          "value": "decrypted = self.fernet.decrypt(encrypted_str.encode())",
                          "children": [
                            {
                              "value": "decrypted",
                              "children": []
                            },
                            {
                              "value": "self.fernet.decrypt(encrypted_str.encode())",
                              "children": [
                                {
                                  "value": "self.fernet.decrypt",
                                  "children": [
                                    {
                                      "value": "self.fernet",
                                      "children": [
                                        {
                                          "value": "self",
                                          "children": []
                                        },
                                        {
                                          "value": "fernet",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "decrypt",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(encrypted_str.encode())",
                                  "children": [
                                    {
                                      "value": "encrypted_str.encode()",
                                      "children": [
                                        {
                                          "value": "encrypted_str.encode",
                                          "children": [
                                            {
                                              "value": "encrypted_str",
                                              "children": []
                                            },
                                            {
                                              "value": "encode",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "()",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return json.loads(decrypted.decode())",
                      "children": [
                        {
                          "value": "json.loads(decrypted.decode())",
                          "children": [
                            {
                              "value": "json.loads",
                              "children": [
                                {
                                  "value": "json",
                                  "children": []
                                },
                                {
                                  "value": "loads",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(decrypted.decode())",
                              "children": [
                                {
                                  "value": "decrypted.decode()",
                                  "children": [
                                    {
                                      "value": "decrypted.decode",
                                      "children": [
                                        {
                                          "value": "decrypted",
                                          "children": []
                                        },
                                        {
                                          "value": "decode",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}