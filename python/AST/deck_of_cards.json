{
  "value": "from abc import ABCMeta, abstractmethod\nfrom enum import Enum\nimport sys\n\n\nclass Suit(Enum):\n\n    HEART = 0\n    DIAMOND = 1\n    CLUBS = 2\n    SPADE = 3\n\n\nclass Card(metaclass=ABCMeta):\n\n    def __init__(self, value, suit):\n        self.value = value\n        self.suit = suit\n        self.is_available = True\n\n    @property\n    @abstractmethod\n    def value(self):\n        pass\n\n    @value.setter\n    @abstractmethod\n    def value(self, other):\n        pass\n\n\nclass BlackJackCard(Card):\n\n    def __init__(self, value, suit):\n        super(BlackJackCard, self).__init__(value, suit)\n\n    def is_ace(self):\n        return True if self._value == 1 else False\n\n    def is_face_card(self):\n        \"\"\"Jack = 11, Queen = 12, King = 13\"\"\"\n        return True if 10 < self._value <= 13 else False\n\n    @property\n    def value(self):\n        if self.is_ace() == 1:\n            return 1\n        elif self.is_face_card():\n            return 10\n        else:\n            return self._value\n\n    @value.setter\n    def value(self, new_value):\n        if 1 <= new_value <= 13:\n            self._value = new_value\n        else:\n            raise ValueError('Invalid card value: {}'.format(new_value))\n\n\nclass Hand(object):\n\n    def __init__(self, cards):\n        self.cards = cards\n\n    def add_card(self, card):\n        self.cards.append(card)\n\n    def score(self):\n        total_value = 0\n        for card in self.cards:\n            total_value += card.value\n        return total_value\n\n\nclass BlackJackHand(Hand):\n\n    BLACKJACK = 21\n\n    def __init__(self, cards):\n        super(BlackJackHand, self).__init__(cards)\n\n    def score(self):\n        min_over = sys.MAXSIZE\n        max_under = -sys.MAXSIZE\n        for score in self.possible_scores():\n            if self.BLACKJACK < score < min_over:\n                min_over = score\n            elif max_under < score <= self.BLACKJACK:\n                max_under = score\n        return max_under if max_under != -sys.MAXSIZE else min_over\n\n    def possible_scores(self):\n        \"\"\"Return a list of possible scores, taking Aces into account.\"\"\"\n        pass\n\n\nclass Deck(object):\n\n    def __init__(self, cards):\n        self.cards = cards\n        self.deal_index = 0\n\n    def remaining_cards(self):\n        return len(self.cards) - self.deal_index\n\n    def deal_card(self):\n        try:\n            card = self.cards[self.deal_index]\n            card.is_available = False\n            self.deal_index += 1\n        except IndexError:\n            return None\n        return card\n\n    def shuffle(self):\n        pass",
  "children": [
    {
      "value": "from abc import ABCMeta, abstractmethod",
      "children": [
        {
          "value": "abc",
          "children": [
            {
              "value": "abc",
              "children": []
            }
          ]
        },
        {
          "value": "ABCMeta",
          "children": [
            {
              "value": "ABCMeta",
              "children": []
            }
          ]
        },
        {
          "value": "abstractmethod",
          "children": [
            {
              "value": "abstractmethod",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from enum import Enum",
      "children": [
        {
          "value": "enum",
          "children": [
            {
              "value": "enum",
              "children": []
            }
          ]
        },
        {
          "value": "Enum",
          "children": [
            {
              "value": "Enum",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import sys",
      "children": [
        {
          "value": "sys",
          "children": [
            {
              "value": "sys",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "class Suit(Enum):\n\n    HEART = 0\n    DIAMOND = 1\n    CLUBS = 2\n    SPADE = 3",
      "children": [
        {
          "value": "Suit",
          "children": []
        },
        {
          "value": "(Enum)",
          "children": [
            {
              "value": "Enum",
              "children": []
            }
          ]
        },
        {
          "value": "HEART = 0\n    DIAMOND = 1\n    CLUBS = 2\n    SPADE = 3",
          "children": [
            {
              "value": "HEART = 0",
              "children": [
                {
                  "value": "HEART = 0",
                  "children": [
                    {
                      "value": "HEART",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "DIAMOND = 1",
              "children": [
                {
                  "value": "DIAMOND = 1",
                  "children": [
                    {
                      "value": "DIAMOND",
                      "children": []
                    },
                    {
                      "value": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "CLUBS = 2",
              "children": [
                {
                  "value": "CLUBS = 2",
                  "children": [
                    {
                      "value": "CLUBS",
                      "children": []
                    },
                    {
                      "value": "2",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "SPADE = 3",
              "children": [
                {
                  "value": "SPADE = 3",
                  "children": [
                    {
                      "value": "SPADE",
                      "children": []
                    },
                    {
                      "value": "3",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class Card(metaclass=ABCMeta):\n\n    def __init__(self, value, suit):\n        self.value = value\n        self.suit = suit\n        self.is_available = True\n\n    @property\n    @abstractmethod\n    def value(self):\n        pass\n\n    @value.setter\n    @abstractmethod\n    def value(self, other):\n        pass",
      "children": [
        {
          "value": "Card",
          "children": []
        },
        {
          "value": "(metaclass=ABCMeta)",
          "children": [
            {
              "value": "metaclass=ABCMeta",
              "children": [
                {
                  "value": "metaclass",
                  "children": []
                },
                {
                  "value": "ABCMeta",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "def __init__(self, value, suit):\n        self.value = value\n        self.suit = suit\n        self.is_available = True\n\n    @property\n    @abstractmethod\n    def value(self):\n        pass\n\n    @value.setter\n    @abstractmethod\n    def value(self, other):\n        pass",
          "children": [
            {
              "value": "def __init__(self, value, suit):\n        self.value = value\n        self.suit = suit\n        self.is_available = True",
              "children": [
                {
                  "value": "__init__",
                  "children": []
                },
                {
                  "value": "(self, value, suit)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "value",
                      "children": []
                    },
                    {
                      "value": "suit",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "self.value = value\n        self.suit = suit\n        self.is_available = True",
                  "children": [
                    {
                      "value": "self.value = value",
                      "children": [
                        {
                          "value": "self.value = value",
                          "children": [
                            {
                              "value": "self.value",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "value",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "value",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.suit = suit",
                      "children": [
                        {
                          "value": "self.suit = suit",
                          "children": [
                            {
                              "value": "self.suit",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "suit",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "suit",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.is_available = True",
                      "children": [
                        {
                          "value": "self.is_available = True",
                          "children": [
                            {
                              "value": "self.is_available",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "is_available",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "True",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "@property\n    @abstractmethod\n    def value(self):\n        pass",
              "children": [
                {
                  "value": "@property",
                  "children": [
                    {
                      "value": "property",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "@abstractmethod",
                  "children": [
                    {
                      "value": "abstractmethod",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "def value(self):\n        pass",
                  "children": [
                    {
                      "value": "value",
                      "children": []
                    },
                    {
                      "value": "(self)",
                      "children": [
                        {
                          "value": "self",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "pass",
                      "children": [
                        {
                          "value": "pass",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "@value.setter\n    @abstractmethod\n    def value(self, other):\n        pass",
              "children": [
                {
                  "value": "@value.setter",
                  "children": [
                    {
                      "value": "value.setter",
                      "children": [
                        {
                          "value": "value",
                          "children": []
                        },
                        {
                          "value": "setter",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "@abstractmethod",
                  "children": [
                    {
                      "value": "abstractmethod",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "def value(self, other):\n        pass",
                  "children": [
                    {
                      "value": "value",
                      "children": []
                    },
                    {
                      "value": "(self, other)",
                      "children": [
                        {
                          "value": "self",
                          "children": []
                        },
                        {
                          "value": "other",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "pass",
                      "children": [
                        {
                          "value": "pass",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class BlackJackCard(Card):\n\n    def __init__(self, value, suit):\n        super(BlackJackCard, self).__init__(value, suit)\n\n    def is_ace(self):\n        return True if self._value == 1 else False\n\n    def is_face_card(self):\n        \"\"\"Jack = 11, Queen = 12, King = 13\"\"\"\n        return True if 10 < self._value <= 13 else False\n\n    @property\n    def value(self):\n        if self.is_ace() == 1:\n            return 1\n        elif self.is_face_card():\n            return 10\n        else:\n            return self._value\n\n    @value.setter\n    def value(self, new_value):\n        if 1 <= new_value <= 13:\n            self._value = new_value\n        else:\n            raise ValueError('Invalid card value: {}'.format(new_value))",
      "children": [
        {
          "value": "BlackJackCard",
          "children": []
        },
        {
          "value": "(Card)",
          "children": [
            {
              "value": "Card",
              "children": []
            }
          ]
        },
        {
          "value": "def __init__(self, value, suit):\n        super(BlackJackCard, self).__init__(value, suit)\n\n    def is_ace(self):\n        return True if self._value == 1 else False\n\n    def is_face_card(self):\n        \"\"\"Jack = 11, Queen = 12, King = 13\"\"\"\n        return True if 10 < self._value <= 13 else False\n\n    @property\n    def value(self):\n        if self.is_ace() == 1:\n            return 1\n        elif self.is_face_card():\n            return 10\n        else:\n            return self._value\n\n    @value.setter\n    def value(self, new_value):\n        if 1 <= new_value <= 13:\n            self._value = new_value\n        else:\n            raise ValueError('Invalid card value: {}'.format(new_value))",
          "children": [
            {
              "value": "def __init__(self, value, suit):\n        super(BlackJackCard, self).__init__(value, suit)",
              "children": [
                {
                  "value": "__init__",
                  "children": []
                },
                {
                  "value": "(self, value, suit)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "value",
                      "children": []
                    },
                    {
                      "value": "suit",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "super(BlackJackCard, self).__init__(value, suit)",
                  "children": [
                    {
                      "value": "super(BlackJackCard, self).__init__(value, suit)",
                      "children": [
                        {
                          "value": "super(BlackJackCard, self).__init__(value, suit)",
                          "children": [
                            {
                              "value": "super(BlackJackCard, self).__init__",
                              "children": [
                                {
                                  "value": "super(BlackJackCard, self)",
                                  "children": [
                                    {
                                      "value": "super",
                                      "children": []
                                    },
                                    {
                                      "value": "(BlackJackCard, self)",
                                      "children": [
                                        {
                                          "value": "BlackJackCard",
                                          "children": []
                                        },
                                        {
                                          "value": "self",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "__init__",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(value, suit)",
                              "children": [
                                {
                                  "value": "value",
                                  "children": []
                                },
                                {
                                  "value": "suit",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def is_ace(self):\n        return True if self._value == 1 else False",
              "children": [
                {
                  "value": "is_ace",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "return True if self._value == 1 else False",
                  "children": [
                    {
                      "value": "return True if self._value == 1 else False",
                      "children": [
                        {
                          "value": "True if self._value == 1 else False",
                          "children": [
                            {
                              "value": "True",
                              "children": []
                            },
                            {
                              "value": "self._value == 1",
                              "children": [
                                {
                                  "value": "self._value",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "_value",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "1",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "False",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def is_face_card(self):\n        \"\"\"Jack = 11, Queen = 12, King = 13\"\"\"\n        return True if 10 < self._value <= 13 else False",
              "children": [
                {
                  "value": "is_face_card",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "\"\"\"Jack = 11, Queen = 12, King = 13\"\"\"\n        return True if 10 < self._value <= 13 else False",
                  "children": [
                    {
                      "value": "\"\"\"Jack = 11, Queen = 12, King = 13\"\"\"",
                      "children": [
                        {
                          "value": "\"\"\"Jack = 11, Queen = 12, King = 13\"\"\"",
                          "children": [
                            {
                              "value": "\"\"\"",
                              "children": []
                            },
                            {
                              "value": "Jack = 11, Queen = 12, King = 13",
                              "children": []
                            },
                            {
                              "value": "\"\"\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return True if 10 < self._value <= 13 else False",
                      "children": [
                        {
                          "value": "True if 10 < self._value <= 13 else False",
                          "children": [
                            {
                              "value": "True",
                              "children": []
                            },
                            {
                              "value": "10 < self._value <= 13",
                              "children": [
                                {
                                  "value": "10",
                                  "children": []
                                },
                                {
                                  "value": "self._value",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "_value",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "13",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "False",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "@property\n    def value(self):\n        if self.is_ace() == 1:\n            return 1\n        elif self.is_face_card():\n            return 10\n        else:\n            return self._value",
              "children": [
                {
                  "value": "@property",
                  "children": [
                    {
                      "value": "property",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "def value(self):\n        if self.is_ace() == 1:\n            return 1\n        elif self.is_face_card():\n            return 10\n        else:\n            return self._value",
                  "children": [
                    {
                      "value": "value",
                      "children": []
                    },
                    {
                      "value": "(self)",
                      "children": [
                        {
                          "value": "self",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "if self.is_ace() == 1:\n            return 1\n        elif self.is_face_card():\n            return 10\n        else:\n            return self._value",
                      "children": [
                        {
                          "value": "if self.is_ace() == 1:\n            return 1\n        elif self.is_face_card():\n            return 10\n        else:\n            return self._value",
                          "children": [
                            {
                              "value": "self.is_ace() == 1",
                              "children": [
                                {
                                  "value": "self.is_ace()",
                                  "children": [
                                    {
                                      "value": "self.is_ace",
                                      "children": [
                                        {
                                          "value": "self",
                                          "children": []
                                        },
                                        {
                                          "value": "is_ace",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "1",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "return 1",
                              "children": [
                                {
                                  "value": "return 1",
                                  "children": [
                                    {
                                      "value": "1",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "elif self.is_face_card():\n            return 10",
                              "children": [
                                {
                                  "value": "self.is_face_card()",
                                  "children": [
                                    {
                                      "value": "self.is_face_card",
                                      "children": [
                                        {
                                          "value": "self",
                                          "children": []
                                        },
                                        {
                                          "value": "is_face_card",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "return 10",
                                  "children": [
                                    {
                                      "value": "return 10",
                                      "children": [
                                        {
                                          "value": "10",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "else:\n            return self._value",
                              "children": [
                                {
                                  "value": "return self._value",
                                  "children": [
                                    {
                                      "value": "return self._value",
                                      "children": [
                                        {
                                          "value": "self._value",
                                          "children": [
                                            {
                                              "value": "self",
                                              "children": []
                                            },
                                            {
                                              "value": "_value",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "@value.setter\n    def value(self, new_value):\n        if 1 <= new_value <= 13:\n            self._value = new_value\n        else:\n            raise ValueError('Invalid card value: {}'.format(new_value))",
              "children": [
                {
                  "value": "@value.setter",
                  "children": [
                    {
                      "value": "value.setter",
                      "children": [
                        {
                          "value": "value",
                          "children": []
                        },
                        {
                          "value": "setter",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "def value(self, new_value):\n        if 1 <= new_value <= 13:\n            self._value = new_value\n        else:\n            raise ValueError('Invalid card value: {}'.format(new_value))",
                  "children": [
                    {
                      "value": "value",
                      "children": []
                    },
                    {
                      "value": "(self, new_value)",
                      "children": [
                        {
                          "value": "self",
                          "children": []
                        },
                        {
                          "value": "new_value",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "if 1 <= new_value <= 13:\n            self._value = new_value\n        else:\n            raise ValueError('Invalid card value: {}'.format(new_value))",
                      "children": [
                        {
                          "value": "if 1 <= new_value <= 13:\n            self._value = new_value\n        else:\n            raise ValueError('Invalid card value: {}'.format(new_value))",
                          "children": [
                            {
                              "value": "1 <= new_value <= 13",
                              "children": [
                                {
                                  "value": "1",
                                  "children": []
                                },
                                {
                                  "value": "new_value",
                                  "children": []
                                },
                                {
                                  "value": "13",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "self._value = new_value",
                              "children": [
                                {
                                  "value": "self._value = new_value",
                                  "children": [
                                    {
                                      "value": "self._value = new_value",
                                      "children": [
                                        {
                                          "value": "self._value",
                                          "children": [
                                            {
                                              "value": "self",
                                              "children": []
                                            },
                                            {
                                              "value": "_value",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "new_value",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "else:\n            raise ValueError('Invalid card value: {}'.format(new_value))",
                              "children": [
                                {
                                  "value": "raise ValueError('Invalid card value: {}'.format(new_value))",
                                  "children": [
                                    {
                                      "value": "raise ValueError('Invalid card value: {}'.format(new_value))",
                                      "children": [
                                        {
                                          "value": "ValueError('Invalid card value: {}'.format(new_value))",
                                          "children": [
                                            {
                                              "value": "ValueError",
                                              "children": []
                                            },
                                            {
                                              "value": "('Invalid card value: {}'.format(new_value))",
                                              "children": [
                                                {
                                                  "value": "'Invalid card value: {}'.format(new_value)",
                                                  "children": [
                                                    {
                                                      "value": "'Invalid card value: {}'.format",
                                                      "children": [
                                                        {
                                                          "value": "'Invalid card value: {}'",
                                                          "children": [
                                                            {
                                                              "value": "'",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "Invalid card value: {}",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "'",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "format",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "(new_value)",
                                                      "children": [
                                                        {
                                                          "value": "new_value",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class Hand(object):\n\n    def __init__(self, cards):\n        self.cards = cards\n\n    def add_card(self, card):\n        self.cards.append(card)\n\n    def score(self):\n        total_value = 0\n        for card in self.cards:\n            total_value += card.value\n        return total_value",
      "children": [
        {
          "value": "Hand",
          "children": []
        },
        {
          "value": "(object)",
          "children": [
            {
              "value": "object",
              "children": []
            }
          ]
        },
        {
          "value": "def __init__(self, cards):\n        self.cards = cards\n\n    def add_card(self, card):\n        self.cards.append(card)\n\n    def score(self):\n        total_value = 0\n        for card in self.cards:\n            total_value += card.value\n        return total_value",
          "children": [
            {
              "value": "def __init__(self, cards):\n        self.cards = cards",
              "children": [
                {
                  "value": "__init__",
                  "children": []
                },
                {
                  "value": "(self, cards)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "cards",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "self.cards = cards",
                  "children": [
                    {
                      "value": "self.cards = cards",
                      "children": [
                        {
                          "value": "self.cards = cards",
                          "children": [
                            {
                              "value": "self.cards",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "cards",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "cards",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def add_card(self, card):\n        self.cards.append(card)",
              "children": [
                {
                  "value": "add_card",
                  "children": []
                },
                {
                  "value": "(self, card)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "card",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "self.cards.append(card)",
                  "children": [
                    {
                      "value": "self.cards.append(card)",
                      "children": [
                        {
                          "value": "self.cards.append(card)",
                          "children": [
                            {
                              "value": "self.cards.append",
                              "children": [
                                {
                                  "value": "self.cards",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "cards",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "append",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(card)",
                              "children": [
                                {
                                  "value": "card",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def score(self):\n        total_value = 0\n        for card in self.cards:\n            total_value += card.value\n        return total_value",
              "children": [
                {
                  "value": "score",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "total_value = 0\n        for card in self.cards:\n            total_value += card.value\n        return total_value",
                  "children": [
                    {
                      "value": "total_value = 0",
                      "children": [
                        {
                          "value": "total_value = 0",
                          "children": [
                            {
                              "value": "total_value",
                              "children": []
                            },
                            {
                              "value": "0",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "for card in self.cards:\n            total_value += card.value",
                      "children": [
                        {
                          "value": "card",
                          "children": []
                        },
                        {
                          "value": "self.cards",
                          "children": [
                            {
                              "value": "self",
                              "children": []
                            },
                            {
                              "value": "cards",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "total_value += card.value",
                          "children": [
                            {
                              "value": "total_value += card.value",
                              "children": [
                                {
                                  "value": "total_value += card.value",
                                  "children": [
                                    {
                                      "value": "total_value",
                                      "children": []
                                    },
                                    {
                                      "value": "card.value",
                                      "children": [
                                        {
                                          "value": "card",
                                          "children": []
                                        },
                                        {
                                          "value": "value",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return total_value",
                      "children": [
                        {
                          "value": "total_value",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class BlackJackHand(Hand):\n\n    BLACKJACK = 21\n\n    def __init__(self, cards):\n        super(BlackJackHand, self).__init__(cards)\n\n    def score(self):\n        min_over = sys.MAXSIZE\n        max_under = -sys.MAXSIZE\n        for score in self.possible_scores():\n            if self.BLACKJACK < score < min_over:\n                min_over = score\n            elif max_under < score <= self.BLACKJACK:\n                max_under = score\n        return max_under if max_under != -sys.MAXSIZE else min_over\n\n    def possible_scores(self):\n        \"\"\"Return a list of possible scores, taking Aces into account.\"\"\"\n        pass",
      "children": [
        {
          "value": "BlackJackHand",
          "children": []
        },
        {
          "value": "(Hand)",
          "children": [
            {
              "value": "Hand",
              "children": []
            }
          ]
        },
        {
          "value": "BLACKJACK = 21\n\n    def __init__(self, cards):\n        super(BlackJackHand, self).__init__(cards)\n\n    def score(self):\n        min_over = sys.MAXSIZE\n        max_under = -sys.MAXSIZE\n        for score in self.possible_scores():\n            if self.BLACKJACK < score < min_over:\n                min_over = score\n            elif max_under < score <= self.BLACKJACK:\n                max_under = score\n        return max_under if max_under != -sys.MAXSIZE else min_over\n\n    def possible_scores(self):\n        \"\"\"Return a list of possible scores, taking Aces into account.\"\"\"\n        pass",
          "children": [
            {
              "value": "BLACKJACK = 21",
              "children": [
                {
                  "value": "BLACKJACK = 21",
                  "children": [
                    {
                      "value": "BLACKJACK",
                      "children": []
                    },
                    {
                      "value": "21",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "def __init__(self, cards):\n        super(BlackJackHand, self).__init__(cards)",
              "children": [
                {
                  "value": "__init__",
                  "children": []
                },
                {
                  "value": "(self, cards)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "cards",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "super(BlackJackHand, self).__init__(cards)",
                  "children": [
                    {
                      "value": "super(BlackJackHand, self).__init__(cards)",
                      "children": [
                        {
                          "value": "super(BlackJackHand, self).__init__(cards)",
                          "children": [
                            {
                              "value": "super(BlackJackHand, self).__init__",
                              "children": [
                                {
                                  "value": "super(BlackJackHand, self)",
                                  "children": [
                                    {
                                      "value": "super",
                                      "children": []
                                    },
                                    {
                                      "value": "(BlackJackHand, self)",
                                      "children": [
                                        {
                                          "value": "BlackJackHand",
                                          "children": []
                                        },
                                        {
                                          "value": "self",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "__init__",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(cards)",
                              "children": [
                                {
                                  "value": "cards",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def score(self):\n        min_over = sys.MAXSIZE\n        max_under = -sys.MAXSIZE\n        for score in self.possible_scores():\n            if self.BLACKJACK < score < min_over:\n                min_over = score\n            elif max_under < score <= self.BLACKJACK:\n                max_under = score\n        return max_under if max_under != -sys.MAXSIZE else min_over",
              "children": [
                {
                  "value": "score",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "min_over = sys.MAXSIZE\n        max_under = -sys.MAXSIZE\n        for score in self.possible_scores():\n            if self.BLACKJACK < score < min_over:\n                min_over = score\n            elif max_under < score <= self.BLACKJACK:\n                max_under = score\n        return max_under if max_under != -sys.MAXSIZE else min_over",
                  "children": [
                    {
                      "value": "min_over = sys.MAXSIZE",
                      "children": [
                        {
                          "value": "min_over = sys.MAXSIZE",
                          "children": [
                            {
                              "value": "min_over",
                              "children": []
                            },
                            {
                              "value": "sys.MAXSIZE",
                              "children": [
                                {
                                  "value": "sys",
                                  "children": []
                                },
                                {
                                  "value": "MAXSIZE",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "max_under = -sys.MAXSIZE",
                      "children": [
                        {
                          "value": "max_under = -sys.MAXSIZE",
                          "children": [
                            {
                              "value": "max_under",
                              "children": []
                            },
                            {
                              "value": "-sys.MAXSIZE",
                              "children": [
                                {
                                  "value": "sys.MAXSIZE",
                                  "children": [
                                    {
                                      "value": "sys",
                                      "children": []
                                    },
                                    {
                                      "value": "MAXSIZE",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "for score in self.possible_scores():\n            if self.BLACKJACK < score < min_over:\n                min_over = score\n            elif max_under < score <= self.BLACKJACK:\n                max_under = score",
                      "children": [
                        {
                          "value": "score",
                          "children": []
                        },
                        {
                          "value": "self.possible_scores()",
                          "children": [
                            {
                              "value": "self.possible_scores",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "possible_scores",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "()",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "if self.BLACKJACK < score < min_over:\n                min_over = score\n            elif max_under < score <= self.BLACKJACK:\n                max_under = score",
                          "children": [
                            {
                              "value": "if self.BLACKJACK < score < min_over:\n                min_over = score\n            elif max_under < score <= self.BLACKJACK:\n                max_under = score",
                              "children": [
                                {
                                  "value": "self.BLACKJACK < score < min_over",
                                  "children": [
                                    {
                                      "value": "self.BLACKJACK",
                                      "children": [
                                        {
                                          "value": "self",
                                          "children": []
                                        },
                                        {
                                          "value": "BLACKJACK",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "score",
                                      "children": []
                                    },
                                    {
                                      "value": "min_over",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "min_over = score",
                                  "children": [
                                    {
                                      "value": "min_over = score",
                                      "children": [
                                        {
                                          "value": "min_over = score",
                                          "children": [
                                            {
                                              "value": "min_over",
                                              "children": []
                                            },
                                            {
                                              "value": "score",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "elif max_under < score <= self.BLACKJACK:\n                max_under = score",
                                  "children": [
                                    {
                                      "value": "max_under < score <= self.BLACKJACK",
                                      "children": [
                                        {
                                          "value": "max_under",
                                          "children": []
                                        },
                                        {
                                          "value": "score",
                                          "children": []
                                        },
                                        {
                                          "value": "self.BLACKJACK",
                                          "children": [
                                            {
                                              "value": "self",
                                              "children": []
                                            },
                                            {
                                              "value": "BLACKJACK",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "max_under = score",
                                      "children": [
                                        {
                                          "value": "max_under = score",
                                          "children": [
                                            {
                                              "value": "max_under = score",
                                              "children": [
                                                {
                                                  "value": "max_under",
                                                  "children": []
                                                },
                                                {
                                                  "value": "score",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return max_under if max_under != -sys.MAXSIZE else min_over",
                      "children": [
                        {
                          "value": "max_under if max_under != -sys.MAXSIZE else min_over",
                          "children": [
                            {
                              "value": "max_under",
                              "children": []
                            },
                            {
                              "value": "max_under != -sys.MAXSIZE",
                              "children": [
                                {
                                  "value": "max_under",
                                  "children": []
                                },
                                {
                                  "value": "-sys.MAXSIZE",
                                  "children": [
                                    {
                                      "value": "sys.MAXSIZE",
                                      "children": [
                                        {
                                          "value": "sys",
                                          "children": []
                                        },
                                        {
                                          "value": "MAXSIZE",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "min_over",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def possible_scores(self):\n        \"\"\"Return a list of possible scores, taking Aces into account.\"\"\"\n        pass",
              "children": [
                {
                  "value": "possible_scores",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "\"\"\"Return a list of possible scores, taking Aces into account.\"\"\"\n        pass",
                  "children": [
                    {
                      "value": "\"\"\"Return a list of possible scores, taking Aces into account.\"\"\"",
                      "children": [
                        {
                          "value": "\"\"\"Return a list of possible scores, taking Aces into account.\"\"\"",
                          "children": [
                            {
                              "value": "\"\"\"",
                              "children": []
                            },
                            {
                              "value": "Return a list of possible scores, taking Aces into account.",
                              "children": []
                            },
                            {
                              "value": "\"\"\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "pass",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class Deck(object):\n\n    def __init__(self, cards):\n        self.cards = cards\n        self.deal_index = 0\n\n    def remaining_cards(self):\n        return len(self.cards) - self.deal_index\n\n    def deal_card(self):\n        try:\n            card = self.cards[self.deal_index]\n            card.is_available = False\n            self.deal_index += 1\n        except IndexError:\n            return None\n        return card\n\n    def shuffle(self):\n        pass",
      "children": [
        {
          "value": "Deck",
          "children": []
        },
        {
          "value": "(object)",
          "children": [
            {
              "value": "object",
              "children": []
            }
          ]
        },
        {
          "value": "def __init__(self, cards):\n        self.cards = cards\n        self.deal_index = 0\n\n    def remaining_cards(self):\n        return len(self.cards) - self.deal_index\n\n    def deal_card(self):\n        try:\n            card = self.cards[self.deal_index]\n            card.is_available = False\n            self.deal_index += 1\n        except IndexError:\n            return None\n        return card\n\n    def shuffle(self):\n        pass",
          "children": [
            {
              "value": "def __init__(self, cards):\n        self.cards = cards\n        self.deal_index = 0",
              "children": [
                {
                  "value": "__init__",
                  "children": []
                },
                {
                  "value": "(self, cards)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "cards",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "self.cards = cards\n        self.deal_index = 0",
                  "children": [
                    {
                      "value": "self.cards = cards",
                      "children": [
                        {
                          "value": "self.cards = cards",
                          "children": [
                            {
                              "value": "self.cards",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "cards",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "cards",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.deal_index = 0",
                      "children": [
                        {
                          "value": "self.deal_index = 0",
                          "children": [
                            {
                              "value": "self.deal_index",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "deal_index",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "0",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def remaining_cards(self):\n        return len(self.cards) - self.deal_index",
              "children": [
                {
                  "value": "remaining_cards",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "return len(self.cards) - self.deal_index",
                  "children": [
                    {
                      "value": "return len(self.cards) - self.deal_index",
                      "children": [
                        {
                          "value": "len(self.cards) - self.deal_index",
                          "children": [
                            {
                              "value": "len(self.cards)",
                              "children": [
                                {
                                  "value": "len",
                                  "children": []
                                },
                                {
                                  "value": "(self.cards)",
                                  "children": [
                                    {
                                      "value": "self.cards",
                                      "children": [
                                        {
                                          "value": "self",
                                          "children": []
                                        },
                                        {
                                          "value": "cards",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "self.deal_index",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "deal_index",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def deal_card(self):\n        try:\n            card = self.cards[self.deal_index]\n            card.is_available = False\n            self.deal_index += 1\n        except IndexError:\n            return None\n        return card",
              "children": [
                {
                  "value": "deal_card",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "try:\n            card = self.cards[self.deal_index]\n            card.is_available = False\n            self.deal_index += 1\n        except IndexError:\n            return None\n        return card",
                  "children": [
                    {
                      "value": "try:\n            card = self.cards[self.deal_index]\n            card.is_available = False\n            self.deal_index += 1\n        except IndexError:\n            return None",
                      "children": [
                        {
                          "value": "card = self.cards[self.deal_index]\n            card.is_available = False\n            self.deal_index += 1",
                          "children": [
                            {
                              "value": "card = self.cards[self.deal_index]",
                              "children": [
                                {
                                  "value": "card = self.cards[self.deal_index]",
                                  "children": [
                                    {
                                      "value": "card",
                                      "children": []
                                    },
                                    {
                                      "value": "self.cards[self.deal_index]",
                                      "children": [
                                        {
                                          "value": "self.cards",
                                          "children": [
                                            {
                                              "value": "self",
                                              "children": []
                                            },
                                            {
                                              "value": "cards",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "self.deal_index",
                                          "children": [
                                            {
                                              "value": "self",
                                              "children": []
                                            },
                                            {
                                              "value": "deal_index",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "card.is_available = False",
                              "children": [
                                {
                                  "value": "card.is_available = False",
                                  "children": [
                                    {
                                      "value": "card.is_available",
                                      "children": [
                                        {
                                          "value": "card",
                                          "children": []
                                        },
                                        {
                                          "value": "is_available",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "False",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "self.deal_index += 1",
                              "children": [
                                {
                                  "value": "self.deal_index += 1",
                                  "children": [
                                    {
                                      "value": "self.deal_index",
                                      "children": [
                                        {
                                          "value": "self",
                                          "children": []
                                        },
                                        {
                                          "value": "deal_index",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "1",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "except IndexError:\n            return None",
                          "children": [
                            {
                              "value": "IndexError",
                              "children": []
                            },
                            {
                              "value": "return None",
                              "children": [
                                {
                                  "value": "return None",
                                  "children": [
                                    {
                                      "value": "None",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return card",
                      "children": [
                        {
                          "value": "card",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def shuffle(self):\n        pass",
              "children": [
                {
                  "value": "shuffle",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "pass",
                  "children": [
                    {
                      "value": "pass",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}