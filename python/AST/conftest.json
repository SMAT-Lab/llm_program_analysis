{
  "value": "import logging\n\nimport pytest\n\nfrom backend.util.test import SpinTestServer\n\n#  NOTE: You can run tests like with the --log-cli-level=INFO to see the logs\n# Set up logging\nlogger = logging.getLogger(__name__)\n\n# Create console handler with formatting\nch = logging.StreamHandler()\nch.setLevel(logging.INFO)\nformatter = logging.Formatter(\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\nch.setFormatter(formatter)\nlogger.addHandler(ch)\n\n\n@pytest.fixture(scope=\"session\")\nasync def server():\n    async with SpinTestServer() as server:\n        yield server\n\n\n@pytest.fixture(scope=\"session\", autouse=True)\nasync def graph_cleanup(server):\n    created_graph_ids = []\n    original_create_graph = server.agent_server.test_create_graph\n\n    async def create_graph_wrapper(*args, **kwargs):\n        created_graph = await original_create_graph(*args, **kwargs)\n        # Extract user_id correctly\n        user_id = kwargs.get(\"user_id\", args[2] if len(args) > 2 else None)\n        created_graph_ids.append((created_graph.id, user_id))\n        return created_graph\n\n    try:\n        server.agent_server.test_create_graph = create_graph_wrapper\n        yield  # This runs the test function\n    finally:\n        server.agent_server.test_create_graph = original_create_graph\n\n        # Delete the created graphs and assert they were deleted\n        for graph_id, user_id in created_graph_ids:\n            if user_id:\n                resp = await server.agent_server.test_delete_graph(graph_id, user_id)\n                num_deleted = resp[\"version_counts\"]\n                assert num_deleted > 0, f\"Graph {graph_id} was not deleted.\"",
  "children": [
    {
      "value": "import logging",
      "children": [
        {
          "value": "logging",
          "children": [
            {
              "value": "logging",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import pytest",
      "children": [
        {
          "value": "pytest",
          "children": [
            {
              "value": "pytest",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.util.test import SpinTestServer",
      "children": [
        {
          "value": "backend.util.test",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "util",
              "children": []
            },
            {
              "value": "test",
              "children": []
            }
          ]
        },
        {
          "value": "SpinTestServer",
          "children": [
            {
              "value": "SpinTestServer",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "#  NOTE: You can run tests like with the --log-cli-level=INFO to see the logs",
      "children": []
    },
    {
      "value": "# Set up logging",
      "children": []
    },
    {
      "value": "logger = logging.getLogger(__name__)",
      "children": [
        {
          "value": "logger = logging.getLogger(__name__)",
          "children": [
            {
              "value": "logger",
              "children": []
            },
            {
              "value": "logging.getLogger(__name__)",
              "children": [
                {
                  "value": "logging.getLogger",
                  "children": [
                    {
                      "value": "logging",
                      "children": []
                    },
                    {
                      "value": "getLogger",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(__name__)",
                  "children": [
                    {
                      "value": "__name__",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "# Create console handler with formatting",
      "children": []
    },
    {
      "value": "ch = logging.StreamHandler()",
      "children": [
        {
          "value": "ch = logging.StreamHandler()",
          "children": [
            {
              "value": "ch",
              "children": []
            },
            {
              "value": "logging.StreamHandler()",
              "children": [
                {
                  "value": "logging.StreamHandler",
                  "children": [
                    {
                      "value": "logging",
                      "children": []
                    },
                    {
                      "value": "StreamHandler",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "()",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "ch.setLevel(logging.INFO)",
      "children": [
        {
          "value": "ch.setLevel(logging.INFO)",
          "children": [
            {
              "value": "ch.setLevel",
              "children": [
                {
                  "value": "ch",
                  "children": []
                },
                {
                  "value": "setLevel",
                  "children": []
                }
              ]
            },
            {
              "value": "(logging.INFO)",
              "children": [
                {
                  "value": "logging.INFO",
                  "children": [
                    {
                      "value": "logging",
                      "children": []
                    },
                    {
                      "value": "INFO",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "formatter = logging.Formatter(\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")",
      "children": [
        {
          "value": "formatter = logging.Formatter(\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")",
          "children": [
            {
              "value": "formatter",
              "children": []
            },
            {
              "value": "logging.Formatter(\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")",
              "children": [
                {
                  "value": "logging.Formatter",
                  "children": [
                    {
                      "value": "logging",
                      "children": []
                    },
                    {
                      "value": "Formatter",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")",
                  "children": [
                    {
                      "value": "\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "%(asctime)s - %(name)s - %(levelname)s - %(message)s",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "ch.setFormatter(formatter)",
      "children": [
        {
          "value": "ch.setFormatter(formatter)",
          "children": [
            {
              "value": "ch.setFormatter",
              "children": [
                {
                  "value": "ch",
                  "children": []
                },
                {
                  "value": "setFormatter",
                  "children": []
                }
              ]
            },
            {
              "value": "(formatter)",
              "children": [
                {
                  "value": "formatter",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "logger.addHandler(ch)",
      "children": [
        {
          "value": "logger.addHandler(ch)",
          "children": [
            {
              "value": "logger.addHandler",
              "children": [
                {
                  "value": "logger",
                  "children": []
                },
                {
                  "value": "addHandler",
                  "children": []
                }
              ]
            },
            {
              "value": "(ch)",
              "children": [
                {
                  "value": "ch",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "@pytest.fixture(scope=\"session\")\nasync def server():\n    async with SpinTestServer() as server:\n        yield server",
      "children": [
        {
          "value": "@pytest.fixture(scope=\"session\")",
          "children": [
            {
              "value": "pytest.fixture(scope=\"session\")",
              "children": [
                {
                  "value": "pytest.fixture",
                  "children": [
                    {
                      "value": "pytest",
                      "children": []
                    },
                    {
                      "value": "fixture",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(scope=\"session\")",
                  "children": [
                    {
                      "value": "scope=\"session\"",
                      "children": [
                        {
                          "value": "scope",
                          "children": []
                        },
                        {
                          "value": "\"session\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "session",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "async def server():\n    async with SpinTestServer() as server:\n        yield server",
          "children": [
            {
              "value": "server",
              "children": []
            },
            {
              "value": "()",
              "children": []
            },
            {
              "value": "async with SpinTestServer() as server:\n        yield server",
              "children": [
                {
                  "value": "async with SpinTestServer() as server:\n        yield server",
                  "children": [
                    {
                      "value": "SpinTestServer() as server",
                      "children": [
                        {
                          "value": "SpinTestServer() as server",
                          "children": [
                            {
                              "value": "SpinTestServer() as server",
                              "children": [
                                {
                                  "value": "SpinTestServer()",
                                  "children": [
                                    {
                                      "value": "SpinTestServer",
                                      "children": []
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "server",
                                  "children": [
                                    {
                                      "value": "server",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "yield server",
                      "children": [
                        {
                          "value": "yield server",
                          "children": [
                            {
                              "value": "yield server",
                              "children": [
                                {
                                  "value": "server",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "@pytest.fixture(scope=\"session\", autouse=True)\nasync def graph_cleanup(server):\n    created_graph_ids = []\n    original_create_graph = server.agent_server.test_create_graph\n\n    async def create_graph_wrapper(*args, **kwargs):\n        created_graph = await original_create_graph(*args, **kwargs)\n        # Extract user_id correctly\n        user_id = kwargs.get(\"user_id\", args[2] if len(args) > 2 else None)\n        created_graph_ids.append((created_graph.id, user_id))\n        return created_graph\n\n    try:\n        server.agent_server.test_create_graph = create_graph_wrapper\n        yield  # This runs the test function\n    finally:\n        server.agent_server.test_create_graph = original_create_graph\n\n        # Delete the created graphs and assert they were deleted\n        for graph_id, user_id in created_graph_ids:\n            if user_id:\n                resp = await server.agent_server.test_delete_graph(graph_id, user_id)\n                num_deleted = resp[\"version_counts\"]\n                assert num_deleted > 0, f\"Graph {graph_id} was not deleted.\"",
      "children": [
        {
          "value": "@pytest.fixture(scope=\"session\", autouse=True)",
          "children": [
            {
              "value": "pytest.fixture(scope=\"session\", autouse=True)",
              "children": [
                {
                  "value": "pytest.fixture",
                  "children": [
                    {
                      "value": "pytest",
                      "children": []
                    },
                    {
                      "value": "fixture",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(scope=\"session\", autouse=True)",
                  "children": [
                    {
                      "value": "scope=\"session\"",
                      "children": [
                        {
                          "value": "scope",
                          "children": []
                        },
                        {
                          "value": "\"session\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "session",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "autouse=True",
                      "children": [
                        {
                          "value": "autouse",
                          "children": []
                        },
                        {
                          "value": "True",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "async def graph_cleanup(server):\n    created_graph_ids = []\n    original_create_graph = server.agent_server.test_create_graph\n\n    async def create_graph_wrapper(*args, **kwargs):\n        created_graph = await original_create_graph(*args, **kwargs)\n        # Extract user_id correctly\n        user_id = kwargs.get(\"user_id\", args[2] if len(args) > 2 else None)\n        created_graph_ids.append((created_graph.id, user_id))\n        return created_graph\n\n    try:\n        server.agent_server.test_create_graph = create_graph_wrapper\n        yield  # This runs the test function\n    finally:\n        server.agent_server.test_create_graph = original_create_graph\n\n        # Delete the created graphs and assert they were deleted\n        for graph_id, user_id in created_graph_ids:\n            if user_id:\n                resp = await server.agent_server.test_delete_graph(graph_id, user_id)\n                num_deleted = resp[\"version_counts\"]\n                assert num_deleted > 0, f\"Graph {graph_id} was not deleted.\"",
          "children": [
            {
              "value": "graph_cleanup",
              "children": []
            },
            {
              "value": "(server)",
              "children": [
                {
                  "value": "server",
                  "children": []
                }
              ]
            },
            {
              "value": "created_graph_ids = []\n    original_create_graph = server.agent_server.test_create_graph\n\n    async def create_graph_wrapper(*args, **kwargs):\n        created_graph = await original_create_graph(*args, **kwargs)\n        # Extract user_id correctly\n        user_id = kwargs.get(\"user_id\", args[2] if len(args) > 2 else None)\n        created_graph_ids.append((created_graph.id, user_id))\n        return created_graph\n\n    try:\n        server.agent_server.test_create_graph = create_graph_wrapper\n        yield  # This runs the test function\n    finally:\n        server.agent_server.test_create_graph = original_create_graph\n\n        # Delete the created graphs and assert they were deleted\n        for graph_id, user_id in created_graph_ids:\n            if user_id:\n                resp = await server.agent_server.test_delete_graph(graph_id, user_id)\n                num_deleted = resp[\"version_counts\"]\n                assert num_deleted > 0, f\"Graph {graph_id} was not deleted.\"",
              "children": [
                {
                  "value": "created_graph_ids = []",
                  "children": [
                    {
                      "value": "created_graph_ids = []",
                      "children": [
                        {
                          "value": "created_graph_ids",
                          "children": []
                        },
                        {
                          "value": "[]",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "original_create_graph = server.agent_server.test_create_graph",
                  "children": [
                    {
                      "value": "original_create_graph = server.agent_server.test_create_graph",
                      "children": [
                        {
                          "value": "original_create_graph",
                          "children": []
                        },
                        {
                          "value": "server.agent_server.test_create_graph",
                          "children": [
                            {
                              "value": "server.agent_server",
                              "children": [
                                {
                                  "value": "server",
                                  "children": []
                                },
                                {
                                  "value": "agent_server",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "test_create_graph",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "async def create_graph_wrapper(*args, **kwargs):\n        created_graph = await original_create_graph(*args, **kwargs)\n        # Extract user_id correctly\n        user_id = kwargs.get(\"user_id\", args[2] if len(args) > 2 else None)\n        created_graph_ids.append((created_graph.id, user_id))\n        return created_graph",
                  "children": [
                    {
                      "value": "create_graph_wrapper",
                      "children": []
                    },
                    {
                      "value": "(*args, **kwargs)",
                      "children": [
                        {
                          "value": "*args",
                          "children": [
                            {
                              "value": "args",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "**kwargs",
                          "children": [
                            {
                              "value": "kwargs",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "created_graph = await original_create_graph(*args, **kwargs)\n        # Extract user_id correctly\n        user_id = kwargs.get(\"user_id\", args[2] if len(args) > 2 else None)\n        created_graph_ids.append((created_graph.id, user_id))\n        return created_graph",
                      "children": [
                        {
                          "value": "created_graph = await original_create_graph(*args, **kwargs)",
                          "children": [
                            {
                              "value": "created_graph = await original_create_graph(*args, **kwargs)",
                              "children": [
                                {
                                  "value": "created_graph",
                                  "children": []
                                },
                                {
                                  "value": "await original_create_graph(*args, **kwargs)",
                                  "children": [
                                    {
                                      "value": "original_create_graph(*args, **kwargs)",
                                      "children": [
                                        {
                                          "value": "original_create_graph",
                                          "children": []
                                        },
                                        {
                                          "value": "(*args, **kwargs)",
                                          "children": [
                                            {
                                              "value": "*args",
                                              "children": [
                                                {
                                                  "value": "args",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "**kwargs",
                                              "children": [
                                                {
                                                  "value": "kwargs",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "# Extract user_id correctly",
                          "children": []
                        },
                        {
                          "value": "user_id = kwargs.get(\"user_id\", args[2] if len(args) > 2 else None)",
                          "children": [
                            {
                              "value": "user_id = kwargs.get(\"user_id\", args[2] if len(args) > 2 else None)",
                              "children": [
                                {
                                  "value": "user_id",
                                  "children": []
                                },
                                {
                                  "value": "kwargs.get(\"user_id\", args[2] if len(args) > 2 else None)",
                                  "children": [
                                    {
                                      "value": "kwargs.get",
                                      "children": [
                                        {
                                          "value": "kwargs",
                                          "children": []
                                        },
                                        {
                                          "value": "get",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(\"user_id\", args[2] if len(args) > 2 else None)",
                                      "children": [
                                        {
                                          "value": "\"user_id\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "user_id",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "args[2] if len(args) > 2 else None",
                                          "children": [
                                            {
                                              "value": "args[2]",
                                              "children": [
                                                {
                                                  "value": "args",
                                                  "children": []
                                                },
                                                {
                                                  "value": "2",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "len(args) > 2",
                                              "children": [
                                                {
                                                  "value": "len(args)",
                                                  "children": [
                                                    {
                                                      "value": "len",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "(args)",
                                                      "children": [
                                                        {
                                                          "value": "args",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "2",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "None",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "created_graph_ids.append((created_graph.id, user_id))",
                          "children": [
                            {
                              "value": "created_graph_ids.append((created_graph.id, user_id))",
                              "children": [
                                {
                                  "value": "created_graph_ids.append",
                                  "children": [
                                    {
                                      "value": "created_graph_ids",
                                      "children": []
                                    },
                                    {
                                      "value": "append",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "((created_graph.id, user_id))",
                                  "children": [
                                    {
                                      "value": "(created_graph.id, user_id)",
                                      "children": [
                                        {
                                          "value": "created_graph.id",
                                          "children": [
                                            {
                                              "value": "created_graph",
                                              "children": []
                                            },
                                            {
                                              "value": "id",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "user_id",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "return created_graph",
                          "children": [
                            {
                              "value": "created_graph",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "try:\n        server.agent_server.test_create_graph = create_graph_wrapper\n        yield  # This runs the test function\n    finally:\n        server.agent_server.test_create_graph = original_create_graph\n\n        # Delete the created graphs and assert they were deleted\n        for graph_id, user_id in created_graph_ids:\n            if user_id:\n                resp = await server.agent_server.test_delete_graph(graph_id, user_id)\n                num_deleted = resp[\"version_counts\"]\n                assert num_deleted > 0, f\"Graph {graph_id} was not deleted.\"",
                  "children": [
                    {
                      "value": "server.agent_server.test_create_graph = create_graph_wrapper\n        yield  # This runs the test function",
                      "children": [
                        {
                          "value": "server.agent_server.test_create_graph = create_graph_wrapper",
                          "children": [
                            {
                              "value": "server.agent_server.test_create_graph = create_graph_wrapper",
                              "children": [
                                {
                                  "value": "server.agent_server.test_create_graph",
                                  "children": [
                                    {
                                      "value": "server.agent_server",
                                      "children": [
                                        {
                                          "value": "server",
                                          "children": []
                                        },
                                        {
                                          "value": "agent_server",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "test_create_graph",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "create_graph_wrapper",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "yield",
                          "children": [
                            {
                              "value": "yield",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "# This runs the test function",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "finally:\n        server.agent_server.test_create_graph = original_create_graph\n\n        # Delete the created graphs and assert they were deleted\n        for graph_id, user_id in created_graph_ids:\n            if user_id:\n                resp = await server.agent_server.test_delete_graph(graph_id, user_id)\n                num_deleted = resp[\"version_counts\"]\n                assert num_deleted > 0, f\"Graph {graph_id} was not deleted.\"",
                      "children": [
                        {
                          "value": "server.agent_server.test_create_graph = original_create_graph\n\n        # Delete the created graphs and assert they were deleted\n        for graph_id, user_id in created_graph_ids:\n            if user_id:\n                resp = await server.agent_server.test_delete_graph(graph_id, user_id)\n                num_deleted = resp[\"version_counts\"]\n                assert num_deleted > 0, f\"Graph {graph_id} was not deleted.\"",
                          "children": [
                            {
                              "value": "server.agent_server.test_create_graph = original_create_graph",
                              "children": [
                                {
                                  "value": "server.agent_server.test_create_graph = original_create_graph",
                                  "children": [
                                    {
                                      "value": "server.agent_server.test_create_graph",
                                      "children": [
                                        {
                                          "value": "server.agent_server",
                                          "children": [
                                            {
                                              "value": "server",
                                              "children": []
                                            },
                                            {
                                              "value": "agent_server",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "test_create_graph",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "original_create_graph",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "# Delete the created graphs and assert they were deleted",
                              "children": []
                            },
                            {
                              "value": "for graph_id, user_id in created_graph_ids:\n            if user_id:\n                resp = await server.agent_server.test_delete_graph(graph_id, user_id)\n                num_deleted = resp[\"version_counts\"]\n                assert num_deleted > 0, f\"Graph {graph_id} was not deleted.\"",
                              "children": [
                                {
                                  "value": "graph_id, user_id",
                                  "children": [
                                    {
                                      "value": "graph_id",
                                      "children": []
                                    },
                                    {
                                      "value": "user_id",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "created_graph_ids",
                                  "children": []
                                },
                                {
                                  "value": "if user_id:\n                resp = await server.agent_server.test_delete_graph(graph_id, user_id)\n                num_deleted = resp[\"version_counts\"]\n                assert num_deleted > 0, f\"Graph {graph_id} was not deleted.\"",
                                  "children": [
                                    {
                                      "value": "if user_id:\n                resp = await server.agent_server.test_delete_graph(graph_id, user_id)\n                num_deleted = resp[\"version_counts\"]\n                assert num_deleted > 0, f\"Graph {graph_id} was not deleted.\"",
                                      "children": [
                                        {
                                          "value": "user_id",
                                          "children": []
                                        },
                                        {
                                          "value": "resp = await server.agent_server.test_delete_graph(graph_id, user_id)\n                num_deleted = resp[\"version_counts\"]\n                assert num_deleted > 0, f\"Graph {graph_id} was not deleted.\"",
                                          "children": [
                                            {
                                              "value": "resp = await server.agent_server.test_delete_graph(graph_id, user_id)",
                                              "children": [
                                                {
                                                  "value": "resp = await server.agent_server.test_delete_graph(graph_id, user_id)",
                                                  "children": [
                                                    {
                                                      "value": "resp",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "await server.agent_server.test_delete_graph(graph_id, user_id)",
                                                      "children": [
                                                        {
                                                          "value": "server.agent_server.test_delete_graph(graph_id, user_id)",
                                                          "children": [
                                                            {
                                                              "value": "server.agent_server.test_delete_graph",
                                                              "children": [
                                                                {
                                                                  "value": "server.agent_server",
                                                                  "children": [
                                                                    {
                                                                      "value": "server",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "agent_server",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "test_delete_graph",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "(graph_id, user_id)",
                                                              "children": [
                                                                {
                                                                  "value": "graph_id",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "user_id",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "num_deleted = resp[\"version_counts\"]",
                                              "children": [
                                                {
                                                  "value": "num_deleted = resp[\"version_counts\"]",
                                                  "children": [
                                                    {
                                                      "value": "num_deleted",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "resp[\"version_counts\"]",
                                                      "children": [
                                                        {
                                                          "value": "resp",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"version_counts\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "version_counts",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "assert num_deleted > 0, f\"Graph {graph_id} was not deleted.\"",
                                              "children": [
                                                {
                                                  "value": "num_deleted > 0",
                                                  "children": [
                                                    {
                                                      "value": "num_deleted",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "0",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "f\"Graph {graph_id} was not deleted.\"",
                                                  "children": [
                                                    {
                                                      "value": "f\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "Graph",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "{graph_id}",
                                                      "children": [
                                                        {
                                                          "value": "graph_id",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "was not deleted.",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}