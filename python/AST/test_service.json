{
  "value": "import pytest\n\nfrom backend.util.service import AppService, expose, get_service_client\n\nTEST_SERVICE_PORT = 8765\n\n\nclass ServiceTest(AppService):\n    def __init__(self):\n        super().__init__()\n\n    @classmethod\n    def get_port(cls) -> int:\n        return TEST_SERVICE_PORT\n\n    @expose\n    def add(self, a: int, b: int) -> int:\n        return a + b\n\n    @expose\n    def subtract(self, a: int, b: int) -> int:\n        return a - b\n\n    @expose\n    def fun_with_async(self, a: int, b: int) -> int:\n        async def add_async(a: int, b: int) -> int:\n            return a + b\n\n        return self.run_and_wait(add_async(a, b))\n\n\n@pytest.mark.asyncio(scope=\"session\")\nasync def test_service_creation(server):\n    with ServiceTest():\n        client = get_service_client(ServiceTest)\n        assert client.add(5, 3) == 8\n        assert client.subtract(10, 4) == 6\n        assert client.fun_with_async(5, 3) == 8",
  "children": [
    {
      "value": "import pytest",
      "children": [
        {
          "value": "pytest",
          "children": [
            {
              "value": "pytest",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.util.service import AppService, expose, get_service_client",
      "children": [
        {
          "value": "backend.util.service",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "util",
              "children": []
            },
            {
              "value": "service",
              "children": []
            }
          ]
        },
        {
          "value": "AppService",
          "children": [
            {
              "value": "AppService",
              "children": []
            }
          ]
        },
        {
          "value": "expose",
          "children": [
            {
              "value": "expose",
              "children": []
            }
          ]
        },
        {
          "value": "get_service_client",
          "children": [
            {
              "value": "get_service_client",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "TEST_SERVICE_PORT = 8765",
      "children": [
        {
          "value": "TEST_SERVICE_PORT = 8765",
          "children": [
            {
              "value": "TEST_SERVICE_PORT",
              "children": []
            },
            {
              "value": "8765",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "class ServiceTest(AppService):\n    def __init__(self):\n        super().__init__()\n\n    @classmethod\n    def get_port(cls) -> int:\n        return TEST_SERVICE_PORT\n\n    @expose\n    def add(self, a: int, b: int) -> int:\n        return a + b\n\n    @expose\n    def subtract(self, a: int, b: int) -> int:\n        return a - b\n\n    @expose\n    def fun_with_async(self, a: int, b: int) -> int:\n        async def add_async(a: int, b: int) -> int:\n            return a + b\n\n        return self.run_and_wait(add_async(a, b))",
      "children": [
        {
          "value": "ServiceTest",
          "children": []
        },
        {
          "value": "(AppService)",
          "children": [
            {
              "value": "AppService",
              "children": []
            }
          ]
        },
        {
          "value": "def __init__(self):\n        super().__init__()\n\n    @classmethod\n    def get_port(cls) -> int:\n        return TEST_SERVICE_PORT\n\n    @expose\n    def add(self, a: int, b: int) -> int:\n        return a + b\n\n    @expose\n    def subtract(self, a: int, b: int) -> int:\n        return a - b\n\n    @expose\n    def fun_with_async(self, a: int, b: int) -> int:\n        async def add_async(a: int, b: int) -> int:\n            return a + b\n\n        return self.run_and_wait(add_async(a, b))",
          "children": [
            {
              "value": "def __init__(self):\n        super().__init__()",
              "children": [
                {
                  "value": "__init__",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "super().__init__()",
                  "children": [
                    {
                      "value": "super().__init__()",
                      "children": [
                        {
                          "value": "super().__init__()",
                          "children": [
                            {
                              "value": "super().__init__",
                              "children": [
                                {
                                  "value": "super()",
                                  "children": [
                                    {
                                      "value": "super",
                                      "children": []
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "__init__",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "()",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "@classmethod\n    def get_port(cls) -> int:\n        return TEST_SERVICE_PORT",
              "children": [
                {
                  "value": "@classmethod",
                  "children": [
                    {
                      "value": "classmethod",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "def get_port(cls) -> int:\n        return TEST_SERVICE_PORT",
                  "children": [
                    {
                      "value": "get_port",
                      "children": []
                    },
                    {
                      "value": "(cls)",
                      "children": [
                        {
                          "value": "cls",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "int",
                      "children": [
                        {
                          "value": "int",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "return TEST_SERVICE_PORT",
                      "children": [
                        {
                          "value": "return TEST_SERVICE_PORT",
                          "children": [
                            {
                              "value": "TEST_SERVICE_PORT",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "@expose\n    def add(self, a: int, b: int) -> int:\n        return a + b",
              "children": [
                {
                  "value": "@expose",
                  "children": [
                    {
                      "value": "expose",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "def add(self, a: int, b: int) -> int:\n        return a + b",
                  "children": [
                    {
                      "value": "add",
                      "children": []
                    },
                    {
                      "value": "(self, a: int, b: int)",
                      "children": [
                        {
                          "value": "self",
                          "children": []
                        },
                        {
                          "value": "a: int",
                          "children": [
                            {
                              "value": "a",
                              "children": []
                            },
                            {
                              "value": "int",
                              "children": [
                                {
                                  "value": "int",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "b: int",
                          "children": [
                            {
                              "value": "b",
                              "children": []
                            },
                            {
                              "value": "int",
                              "children": [
                                {
                                  "value": "int",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "int",
                      "children": [
                        {
                          "value": "int",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "return a + b",
                      "children": [
                        {
                          "value": "return a + b",
                          "children": [
                            {
                              "value": "a + b",
                              "children": [
                                {
                                  "value": "a",
                                  "children": []
                                },
                                {
                                  "value": "b",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "@expose\n    def subtract(self, a: int, b: int) -> int:\n        return a - b",
              "children": [
                {
                  "value": "@expose",
                  "children": [
                    {
                      "value": "expose",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "def subtract(self, a: int, b: int) -> int:\n        return a - b",
                  "children": [
                    {
                      "value": "subtract",
                      "children": []
                    },
                    {
                      "value": "(self, a: int, b: int)",
                      "children": [
                        {
                          "value": "self",
                          "children": []
                        },
                        {
                          "value": "a: int",
                          "children": [
                            {
                              "value": "a",
                              "children": []
                            },
                            {
                              "value": "int",
                              "children": [
                                {
                                  "value": "int",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "b: int",
                          "children": [
                            {
                              "value": "b",
                              "children": []
                            },
                            {
                              "value": "int",
                              "children": [
                                {
                                  "value": "int",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "int",
                      "children": [
                        {
                          "value": "int",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "return a - b",
                      "children": [
                        {
                          "value": "return a - b",
                          "children": [
                            {
                              "value": "a - b",
                              "children": [
                                {
                                  "value": "a",
                                  "children": []
                                },
                                {
                                  "value": "b",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "@expose\n    def fun_with_async(self, a: int, b: int) -> int:\n        async def add_async(a: int, b: int) -> int:\n            return a + b\n\n        return self.run_and_wait(add_async(a, b))",
              "children": [
                {
                  "value": "@expose",
                  "children": [
                    {
                      "value": "expose",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "def fun_with_async(self, a: int, b: int) -> int:\n        async def add_async(a: int, b: int) -> int:\n            return a + b\n\n        return self.run_and_wait(add_async(a, b))",
                  "children": [
                    {
                      "value": "fun_with_async",
                      "children": []
                    },
                    {
                      "value": "(self, a: int, b: int)",
                      "children": [
                        {
                          "value": "self",
                          "children": []
                        },
                        {
                          "value": "a: int",
                          "children": [
                            {
                              "value": "a",
                              "children": []
                            },
                            {
                              "value": "int",
                              "children": [
                                {
                                  "value": "int",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "b: int",
                          "children": [
                            {
                              "value": "b",
                              "children": []
                            },
                            {
                              "value": "int",
                              "children": [
                                {
                                  "value": "int",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "int",
                      "children": [
                        {
                          "value": "int",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "async def add_async(a: int, b: int) -> int:\n            return a + b\n\n        return self.run_and_wait(add_async(a, b))",
                      "children": [
                        {
                          "value": "async def add_async(a: int, b: int) -> int:\n            return a + b",
                          "children": [
                            {
                              "value": "add_async",
                              "children": []
                            },
                            {
                              "value": "(a: int, b: int)",
                              "children": [
                                {
                                  "value": "a: int",
                                  "children": [
                                    {
                                      "value": "a",
                                      "children": []
                                    },
                                    {
                                      "value": "int",
                                      "children": [
                                        {
                                          "value": "int",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "b: int",
                                  "children": [
                                    {
                                      "value": "b",
                                      "children": []
                                    },
                                    {
                                      "value": "int",
                                      "children": [
                                        {
                                          "value": "int",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "int",
                              "children": [
                                {
                                  "value": "int",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "return a + b",
                              "children": [
                                {
                                  "value": "return a + b",
                                  "children": [
                                    {
                                      "value": "a + b",
                                      "children": [
                                        {
                                          "value": "a",
                                          "children": []
                                        },
                                        {
                                          "value": "b",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "return self.run_and_wait(add_async(a, b))",
                          "children": [
                            {
                              "value": "self.run_and_wait(add_async(a, b))",
                              "children": [
                                {
                                  "value": "self.run_and_wait",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "run_and_wait",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(add_async(a, b))",
                                  "children": [
                                    {
                                      "value": "add_async(a, b)",
                                      "children": [
                                        {
                                          "value": "add_async",
                                          "children": []
                                        },
                                        {
                                          "value": "(a, b)",
                                          "children": [
                                            {
                                              "value": "a",
                                              "children": []
                                            },
                                            {
                                              "value": "b",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "@pytest.mark.asyncio(scope=\"session\")\nasync def test_service_creation(server):\n    with ServiceTest():\n        client = get_service_client(ServiceTest)\n        assert client.add(5, 3) == 8\n        assert client.subtract(10, 4) == 6\n        assert client.fun_with_async(5, 3) == 8",
      "children": [
        {
          "value": "@pytest.mark.asyncio(scope=\"session\")",
          "children": [
            {
              "value": "pytest.mark.asyncio(scope=\"session\")",
              "children": [
                {
                  "value": "pytest.mark.asyncio",
                  "children": [
                    {
                      "value": "pytest.mark",
                      "children": [
                        {
                          "value": "pytest",
                          "children": []
                        },
                        {
                          "value": "mark",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "asyncio",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(scope=\"session\")",
                  "children": [
                    {
                      "value": "scope=\"session\"",
                      "children": [
                        {
                          "value": "scope",
                          "children": []
                        },
                        {
                          "value": "\"session\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "session",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "async def test_service_creation(server):\n    with ServiceTest():\n        client = get_service_client(ServiceTest)\n        assert client.add(5, 3) == 8\n        assert client.subtract(10, 4) == 6\n        assert client.fun_with_async(5, 3) == 8",
          "children": [
            {
              "value": "test_service_creation",
              "children": []
            },
            {
              "value": "(server)",
              "children": [
                {
                  "value": "server",
                  "children": []
                }
              ]
            },
            {
              "value": "with ServiceTest():\n        client = get_service_client(ServiceTest)\n        assert client.add(5, 3) == 8\n        assert client.subtract(10, 4) == 6\n        assert client.fun_with_async(5, 3) == 8",
              "children": [
                {
                  "value": "with ServiceTest():\n        client = get_service_client(ServiceTest)\n        assert client.add(5, 3) == 8\n        assert client.subtract(10, 4) == 6\n        assert client.fun_with_async(5, 3) == 8",
                  "children": [
                    {
                      "value": "ServiceTest()",
                      "children": [
                        {
                          "value": "ServiceTest()",
                          "children": [
                            {
                              "value": "ServiceTest()",
                              "children": [
                                {
                                  "value": "ServiceTest",
                                  "children": []
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "client = get_service_client(ServiceTest)\n        assert client.add(5, 3) == 8\n        assert client.subtract(10, 4) == 6\n        assert client.fun_with_async(5, 3) == 8",
                      "children": [
                        {
                          "value": "client = get_service_client(ServiceTest)",
                          "children": [
                            {
                              "value": "client = get_service_client(ServiceTest)",
                              "children": [
                                {
                                  "value": "client",
                                  "children": []
                                },
                                {
                                  "value": "get_service_client(ServiceTest)",
                                  "children": [
                                    {
                                      "value": "get_service_client",
                                      "children": []
                                    },
                                    {
                                      "value": "(ServiceTest)",
                                      "children": [
                                        {
                                          "value": "ServiceTest",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "assert client.add(5, 3) == 8",
                          "children": [
                            {
                              "value": "client.add(5, 3) == 8",
                              "children": [
                                {
                                  "value": "client.add(5, 3)",
                                  "children": [
                                    {
                                      "value": "client.add",
                                      "children": [
                                        {
                                          "value": "client",
                                          "children": []
                                        },
                                        {
                                          "value": "add",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(5, 3)",
                                      "children": [
                                        {
                                          "value": "5",
                                          "children": []
                                        },
                                        {
                                          "value": "3",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "8",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "assert client.subtract(10, 4) == 6",
                          "children": [
                            {
                              "value": "client.subtract(10, 4) == 6",
                              "children": [
                                {
                                  "value": "client.subtract(10, 4)",
                                  "children": [
                                    {
                                      "value": "client.subtract",
                                      "children": [
                                        {
                                          "value": "client",
                                          "children": []
                                        },
                                        {
                                          "value": "subtract",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(10, 4)",
                                      "children": [
                                        {
                                          "value": "10",
                                          "children": []
                                        },
                                        {
                                          "value": "4",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "6",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "assert client.fun_with_async(5, 3) == 8",
                          "children": [
                            {
                              "value": "client.fun_with_async(5, 3) == 8",
                              "children": [
                                {
                                  "value": "client.fun_with_async(5, 3)",
                                  "children": [
                                    {
                                      "value": "client.fun_with_async",
                                      "children": [
                                        {
                                          "value": "client",
                                          "children": []
                                        },
                                        {
                                          "value": "fun_with_async",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(5, 3)",
                                      "children": [
                                        {
                                          "value": "5",
                                          "children": []
                                        },
                                        {
                                          "value": "3",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "8",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}