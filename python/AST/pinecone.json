{
  "value": "import uuid\nfrom typing import Any, Literal\n\nfrom pinecone import Pinecone, ServerlessSpec\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import (\n    APIKeyCredentials,\n    CredentialsField,\n    CredentialsMetaInput,\n    SchemaField,\n)\nfrom backend.integrations.providers import ProviderName\n\nPineconeCredentials = APIKeyCredentials\nPineconeCredentialsInput = CredentialsMetaInput[\n    Literal[ProviderName.PINECONE],\n    Literal[\"api_key\"],\n]\n\n\ndef PineconeCredentialsField() -> PineconeCredentialsInput:\n    \"\"\"Creates a Pinecone credentials input on a block.\"\"\"\n    return CredentialsField(\n        description=\"The Pinecone integration can be used with an API Key.\",\n    )\n\n\nclass PineconeInitBlock(Block):\n    class Input(BlockSchema):\n        credentials: PineconeCredentialsInput = PineconeCredentialsField()\n        index_name: str = SchemaField(description=\"Name of the Pinecone index\")\n        dimension: int = SchemaField(\n            description=\"Dimension of the vectors\", default=768\n        )\n        metric: str = SchemaField(\n            description=\"Distance metric for the index\", default=\"cosine\"\n        )\n        cloud: str = SchemaField(\n            description=\"Cloud provider for serverless\", default=\"aws\"\n        )\n        region: str = SchemaField(\n            description=\"Region for serverless\", default=\"us-east-1\"\n        )\n\n    class Output(BlockSchema):\n        index: str = SchemaField(description=\"Name of the initialized Pinecone index\")\n        message: str = SchemaField(description=\"Status message\")\n\n    def __init__(self):\n        super().__init__(\n            id=\"48d8fdab-8f03-41f3-8407-8107ba11ec9b\",\n            description=\"Initializes a Pinecone index\",\n            categories={BlockCategory.LOGIC},\n            input_schema=PineconeInitBlock.Input,\n            output_schema=PineconeInitBlock.Output,\n        )\n\n    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        pc = Pinecone(api_key=credentials.api_key.get_secret_value())\n\n        try:\n            existing_indexes = pc.list_indexes()\n            if input_data.index_name not in [index.name for index in existing_indexes]:\n                pc.create_index(\n                    name=input_data.index_name,\n                    dimension=input_data.dimension,\n                    metric=input_data.metric,\n                    spec=ServerlessSpec(\n                        cloud=input_data.cloud, region=input_data.region\n                    ),\n                )\n                message = f\"Created new index: {input_data.index_name}\"\n            else:\n                message = f\"Using existing index: {input_data.index_name}\"\n\n            yield \"index\", input_data.index_name\n            yield \"message\", message\n        except Exception as e:\n            yield \"message\", f\"Error initializing Pinecone index: {str(e)}\"\n\n\nclass PineconeQueryBlock(Block):\n    class Input(BlockSchema):\n        credentials: PineconeCredentialsInput = PineconeCredentialsField()\n        query_vector: list = SchemaField(description=\"Query vector\")\n        namespace: str = SchemaField(\n            description=\"Namespace to query in Pinecone\", default=\"\"\n        )\n        top_k: int = SchemaField(\n            description=\"Number of top results to return\", default=3\n        )\n        include_values: bool = SchemaField(\n            description=\"Whether to include vector values in the response\",\n            default=False,\n        )\n        include_metadata: bool = SchemaField(\n            description=\"Whether to include metadata in the response\", default=True\n        )\n        host: str = SchemaField(description=\"Host for pinecone\", default=\"\")\n        idx_name: str = SchemaField(description=\"Index name for pinecone\")\n\n    class Output(BlockSchema):\n        results: Any = SchemaField(description=\"Query results from Pinecone\")\n        combined_results: Any = SchemaField(\n            description=\"Combined results from Pinecone\"\n        )\n\n    def __init__(self):\n        super().__init__(\n            id=\"9ad93d0f-91b4-4c9c-8eb1-82e26b4a01c5\",\n            description=\"Queries a Pinecone index\",\n            categories={BlockCategory.LOGIC},\n            input_schema=PineconeQueryBlock.Input,\n            output_schema=PineconeQueryBlock.Output,\n        )\n\n    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: APIKeyCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        try:\n            # Create a new client instance\n            pc = Pinecone(api_key=credentials.api_key.get_secret_value())\n\n            # Get the index\n            idx = pc.Index(input_data.idx_name)\n\n            # Ensure query_vector is in correct format\n            query_vector = input_data.query_vector\n            if isinstance(query_vector, list) and len(query_vector) > 0:\n                if isinstance(query_vector[0], list):\n                    query_vector = query_vector[0]\n\n            results = idx.query(\n                namespace=input_data.namespace,\n                vector=query_vector,\n                top_k=input_data.top_k,\n                include_values=input_data.include_values,\n                include_metadata=input_data.include_metadata,\n            ).to_dict()  # type: ignore\n            combined_text = \"\"\n            if results[\"matches\"]:\n                texts = [\n                    match[\"metadata\"][\"text\"]\n                    for match in results[\"matches\"]\n                    if match.get(\"metadata\", {}).get(\"text\")\n                ]\n                combined_text = \"\\n\\n\".join(texts)\n\n            # Return both the raw matches and combined text\n            yield \"results\", {\n                \"matches\": results[\"matches\"],\n                \"combined_text\": combined_text,\n            }\n            yield \"combined_results\", combined_text\n\n        except Exception as e:\n            error_msg = f\"Error querying Pinecone: {str(e)}\"\n            raise RuntimeError(error_msg) from e\n\n\nclass PineconeInsertBlock(Block):\n    class Input(BlockSchema):\n        credentials: PineconeCredentialsInput = PineconeCredentialsField()\n        index: str = SchemaField(description=\"Initialized Pinecone index\")\n        chunks: list = SchemaField(description=\"List of text chunks to ingest\")\n        embeddings: list = SchemaField(\n            description=\"List of embeddings corresponding to the chunks\"\n        )\n        namespace: str = SchemaField(\n            description=\"Namespace to use in Pinecone\", default=\"\"\n        )\n        metadata: dict = SchemaField(\n            description=\"Additional metadata to store with each vector\", default={}\n        )\n\n    class Output(BlockSchema):\n        upsert_response: str = SchemaField(\n            description=\"Response from Pinecone upsert operation\"\n        )\n\n    def __init__(self):\n        super().__init__(\n            id=\"477f2168-cd91-475a-8146-9499a5982434\",\n            description=\"Upload data to a Pinecone index\",\n            categories={BlockCategory.LOGIC},\n            input_schema=PineconeInsertBlock.Input,\n            output_schema=PineconeInsertBlock.Output,\n        )\n\n    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: APIKeyCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        try:\n            # Create a new client instance\n            pc = Pinecone(api_key=credentials.api_key.get_secret_value())\n\n            # Get the index\n            idx = pc.Index(input_data.index)\n\n            vectors = []\n            for chunk, embedding in zip(input_data.chunks, input_data.embeddings):\n                vector_metadata = input_data.metadata.copy()\n                vector_metadata[\"text\"] = chunk\n                vectors.append(\n                    {\n                        \"id\": str(uuid.uuid4()),\n                        \"values\": embedding,\n                        \"metadata\": vector_metadata,\n                    }\n                )\n            idx.upsert(vectors=vectors, namespace=input_data.namespace)\n\n            yield \"upsert_response\", \"successfully upserted\"\n\n        except Exception as e:\n            error_msg = f\"Error uploading to Pinecone: {str(e)}\"\n            raise RuntimeError(error_msg) from e",
  "children": [
    {
      "value": "import uuid",
      "children": [
        {
          "value": "uuid",
          "children": [
            {
              "value": "uuid",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from typing import Any, Literal",
      "children": [
        {
          "value": "typing",
          "children": [
            {
              "value": "typing",
              "children": []
            }
          ]
        },
        {
          "value": "Any",
          "children": [
            {
              "value": "Any",
              "children": []
            }
          ]
        },
        {
          "value": "Literal",
          "children": [
            {
              "value": "Literal",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from pinecone import Pinecone, ServerlessSpec",
      "children": [
        {
          "value": "pinecone",
          "children": [
            {
              "value": "pinecone",
              "children": []
            }
          ]
        },
        {
          "value": "Pinecone",
          "children": [
            {
              "value": "Pinecone",
              "children": []
            }
          ]
        },
        {
          "value": "ServerlessSpec",
          "children": [
            {
              "value": "ServerlessSpec",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema",
      "children": [
        {
          "value": "backend.data.block",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "data",
              "children": []
            },
            {
              "value": "block",
              "children": []
            }
          ]
        },
        {
          "value": "Block",
          "children": [
            {
              "value": "Block",
              "children": []
            }
          ]
        },
        {
          "value": "BlockCategory",
          "children": [
            {
              "value": "BlockCategory",
              "children": []
            }
          ]
        },
        {
          "value": "BlockOutput",
          "children": [
            {
              "value": "BlockOutput",
              "children": []
            }
          ]
        },
        {
          "value": "BlockSchema",
          "children": [
            {
              "value": "BlockSchema",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.data.model import (\n    APIKeyCredentials,\n    CredentialsField,\n    CredentialsMetaInput,\n    SchemaField,\n)",
      "children": [
        {
          "value": "backend.data.model",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "data",
              "children": []
            },
            {
              "value": "model",
              "children": []
            }
          ]
        },
        {
          "value": "APIKeyCredentials",
          "children": [
            {
              "value": "APIKeyCredentials",
              "children": []
            }
          ]
        },
        {
          "value": "CredentialsField",
          "children": [
            {
              "value": "CredentialsField",
              "children": []
            }
          ]
        },
        {
          "value": "CredentialsMetaInput",
          "children": [
            {
              "value": "CredentialsMetaInput",
              "children": []
            }
          ]
        },
        {
          "value": "SchemaField",
          "children": [
            {
              "value": "SchemaField",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.integrations.providers import ProviderName",
      "children": [
        {
          "value": "backend.integrations.providers",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "integrations",
              "children": []
            },
            {
              "value": "providers",
              "children": []
            }
          ]
        },
        {
          "value": "ProviderName",
          "children": [
            {
              "value": "ProviderName",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "PineconeCredentials = APIKeyCredentials",
      "children": [
        {
          "value": "PineconeCredentials = APIKeyCredentials",
          "children": [
            {
              "value": "PineconeCredentials",
              "children": []
            },
            {
              "value": "APIKeyCredentials",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "PineconeCredentialsInput = CredentialsMetaInput[\n    Literal[ProviderName.PINECONE],\n    Literal[\"api_key\"],\n]",
      "children": [
        {
          "value": "PineconeCredentialsInput = CredentialsMetaInput[\n    Literal[ProviderName.PINECONE],\n    Literal[\"api_key\"],\n]",
          "children": [
            {
              "value": "PineconeCredentialsInput",
              "children": []
            },
            {
              "value": "CredentialsMetaInput[\n    Literal[ProviderName.PINECONE],\n    Literal[\"api_key\"],\n]",
              "children": [
                {
                  "value": "CredentialsMetaInput",
                  "children": []
                },
                {
                  "value": "Literal[ProviderName.PINECONE]",
                  "children": [
                    {
                      "value": "Literal",
                      "children": []
                    },
                    {
                      "value": "ProviderName.PINECONE",
                      "children": [
                        {
                          "value": "ProviderName",
                          "children": []
                        },
                        {
                          "value": "PINECONE",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "Literal[\"api_key\"]",
                  "children": [
                    {
                      "value": "Literal",
                      "children": []
                    },
                    {
                      "value": "\"api_key\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "api_key",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def PineconeCredentialsField() -> PineconeCredentialsInput:\n    \"\"\"Creates a Pinecone credentials input on a block.\"\"\"\n    return CredentialsField(\n        description=\"The Pinecone integration can be used with an API Key.\",\n    )",
      "children": [
        {
          "value": "PineconeCredentialsField",
          "children": []
        },
        {
          "value": "()",
          "children": []
        },
        {
          "value": "PineconeCredentialsInput",
          "children": [
            {
              "value": "PineconeCredentialsInput",
              "children": []
            }
          ]
        },
        {
          "value": "\"\"\"Creates a Pinecone credentials input on a block.\"\"\"\n    return CredentialsField(\n        description=\"The Pinecone integration can be used with an API Key.\",\n    )",
          "children": [
            {
              "value": "\"\"\"Creates a Pinecone credentials input on a block.\"\"\"",
              "children": [
                {
                  "value": "\"\"\"Creates a Pinecone credentials input on a block.\"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Creates a Pinecone credentials input on a block.",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "return CredentialsField(\n        description=\"The Pinecone integration can be used with an API Key.\",\n    )",
              "children": [
                {
                  "value": "CredentialsField(\n        description=\"The Pinecone integration can be used with an API Key.\",\n    )",
                  "children": [
                    {
                      "value": "CredentialsField",
                      "children": []
                    },
                    {
                      "value": "(\n        description=\"The Pinecone integration can be used with an API Key.\",\n    )",
                      "children": [
                        {
                          "value": "description=\"The Pinecone integration can be used with an API Key.\"",
                          "children": [
                            {
                              "value": "description",
                              "children": []
                            },
                            {
                              "value": "\"The Pinecone integration can be used with an API Key.\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "The Pinecone integration can be used with an API Key.",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class PineconeInitBlock(Block):\n    class Input(BlockSchema):\n        credentials: PineconeCredentialsInput = PineconeCredentialsField()\n        index_name: str = SchemaField(description=\"Name of the Pinecone index\")\n        dimension: int = SchemaField(\n            description=\"Dimension of the vectors\", default=768\n        )\n        metric: str = SchemaField(\n            description=\"Distance metric for the index\", default=\"cosine\"\n        )\n        cloud: str = SchemaField(\n            description=\"Cloud provider for serverless\", default=\"aws\"\n        )\n        region: str = SchemaField(\n            description=\"Region for serverless\", default=\"us-east-1\"\n        )\n\n    class Output(BlockSchema):\n        index: str = SchemaField(description=\"Name of the initialized Pinecone index\")\n        message: str = SchemaField(description=\"Status message\")\n\n    def __init__(self):\n        super().__init__(\n            id=\"48d8fdab-8f03-41f3-8407-8107ba11ec9b\",\n            description=\"Initializes a Pinecone index\",\n            categories={BlockCategory.LOGIC},\n            input_schema=PineconeInitBlock.Input,\n            output_schema=PineconeInitBlock.Output,\n        )\n\n    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        pc = Pinecone(api_key=credentials.api_key.get_secret_value())\n\n        try:\n            existing_indexes = pc.list_indexes()\n            if input_data.index_name not in [index.name for index in existing_indexes]:\n                pc.create_index(\n                    name=input_data.index_name,\n                    dimension=input_data.dimension,\n                    metric=input_data.metric,\n                    spec=ServerlessSpec(\n                        cloud=input_data.cloud, region=input_data.region\n                    ),\n                )\n                message = f\"Created new index: {input_data.index_name}\"\n            else:\n                message = f\"Using existing index: {input_data.index_name}\"\n\n            yield \"index\", input_data.index_name\n            yield \"message\", message\n        except Exception as e:\n            yield \"message\", f\"Error initializing Pinecone index: {str(e)}\"",
      "children": [
        {
          "value": "PineconeInitBlock",
          "children": []
        },
        {
          "value": "(Block)",
          "children": [
            {
              "value": "Block",
              "children": []
            }
          ]
        },
        {
          "value": "class Input(BlockSchema):\n        credentials: PineconeCredentialsInput = PineconeCredentialsField()\n        index_name: str = SchemaField(description=\"Name of the Pinecone index\")\n        dimension: int = SchemaField(\n            description=\"Dimension of the vectors\", default=768\n        )\n        metric: str = SchemaField(\n            description=\"Distance metric for the index\", default=\"cosine\"\n        )\n        cloud: str = SchemaField(\n            description=\"Cloud provider for serverless\", default=\"aws\"\n        )\n        region: str = SchemaField(\n            description=\"Region for serverless\", default=\"us-east-1\"\n        )\n\n    class Output(BlockSchema):\n        index: str = SchemaField(description=\"Name of the initialized Pinecone index\")\n        message: str = SchemaField(description=\"Status message\")\n\n    def __init__(self):\n        super().__init__(\n            id=\"48d8fdab-8f03-41f3-8407-8107ba11ec9b\",\n            description=\"Initializes a Pinecone index\",\n            categories={BlockCategory.LOGIC},\n            input_schema=PineconeInitBlock.Input,\n            output_schema=PineconeInitBlock.Output,\n        )\n\n    def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        pc = Pinecone(api_key=credentials.api_key.get_secret_value())\n\n        try:\n            existing_indexes = pc.list_indexes()\n            if input_data.index_name not in [index.name for index in existing_indexes]:\n                pc.create_index(\n                    name=input_data.index_name,\n                    dimension=input_data.dimension,\n                    metric=input_data.metric,\n                    spec=ServerlessSpec(\n                        cloud=input_data.cloud, region=input_data.region\n                    ),\n                )\n                message = f\"Created new index: {input_data.index_name}\"\n            else:\n                message = f\"Using existing index: {input_data.index_name}\"\n\n            yield \"index\", input_data.index_name\n            yield \"message\", message\n        except Exception as e:\n            yield \"message\", f\"Error initializing Pinecone index: {str(e)}\"",
          "children": [
            {
              "value": "class Input(BlockSchema):\n        credentials: PineconeCredentialsInput = PineconeCredentialsField()\n        index_name: str = SchemaField(description=\"Name of the Pinecone index\")\n        dimension: int = SchemaField(\n            description=\"Dimension of the vectors\", default=768\n        )\n        metric: str = SchemaField(\n            description=\"Distance metric for the index\", default=\"cosine\"\n        )\n        cloud: str = SchemaField(\n            description=\"Cloud provider for serverless\", default=\"aws\"\n        )\n        region: str = SchemaField(\n            description=\"Region for serverless\", default=\"us-east-1\"\n        )",
              "children": [
                {
                  "value": "Input",
                  "children": []
                },
                {
                  "value": "(BlockSchema)",
                  "children": [
                    {
                      "value": "BlockSchema",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "credentials: PineconeCredentialsInput = PineconeCredentialsField()\n        index_name: str = SchemaField(description=\"Name of the Pinecone index\")\n        dimension: int = SchemaField(\n            description=\"Dimension of the vectors\", default=768\n        )\n        metric: str = SchemaField(\n            description=\"Distance metric for the index\", default=\"cosine\"\n        )\n        cloud: str = SchemaField(\n            description=\"Cloud provider for serverless\", default=\"aws\"\n        )\n        region: str = SchemaField(\n            description=\"Region for serverless\", default=\"us-east-1\"\n        )",
                  "children": [
                    {
                      "value": "credentials: PineconeCredentialsInput = PineconeCredentialsField()",
                      "children": [
                        {
                          "value": "credentials: PineconeCredentialsInput = PineconeCredentialsField()",
                          "children": [
                            {
                              "value": "credentials",
                              "children": []
                            },
                            {
                              "value": "PineconeCredentialsInput",
                              "children": [
                                {
                                  "value": "PineconeCredentialsInput",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "PineconeCredentialsField()",
                              "children": [
                                {
                                  "value": "PineconeCredentialsField",
                                  "children": []
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "index_name: str = SchemaField(description=\"Name of the Pinecone index\")",
                      "children": [
                        {
                          "value": "index_name: str = SchemaField(description=\"Name of the Pinecone index\")",
                          "children": [
                            {
                              "value": "index_name",
                              "children": []
                            },
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(description=\"Name of the Pinecone index\")",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(description=\"Name of the Pinecone index\")",
                                  "children": [
                                    {
                                      "value": "description=\"Name of the Pinecone index\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Name of the Pinecone index\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Name of the Pinecone index",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "dimension: int = SchemaField(\n            description=\"Dimension of the vectors\", default=768\n        )",
                      "children": [
                        {
                          "value": "dimension: int = SchemaField(\n            description=\"Dimension of the vectors\", default=768\n        )",
                          "children": [
                            {
                              "value": "dimension",
                              "children": []
                            },
                            {
                              "value": "int",
                              "children": [
                                {
                                  "value": "int",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            description=\"Dimension of the vectors\", default=768\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            description=\"Dimension of the vectors\", default=768\n        )",
                                  "children": [
                                    {
                                      "value": "description=\"Dimension of the vectors\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Dimension of the vectors\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Dimension of the vectors",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "default=768",
                                      "children": [
                                        {
                                          "value": "default",
                                          "children": []
                                        },
                                        {
                                          "value": "768",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "metric: str = SchemaField(\n            description=\"Distance metric for the index\", default=\"cosine\"\n        )",
                      "children": [
                        {
                          "value": "metric: str = SchemaField(\n            description=\"Distance metric for the index\", default=\"cosine\"\n        )",
                          "children": [
                            {
                              "value": "metric",
                              "children": []
                            },
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            description=\"Distance metric for the index\", default=\"cosine\"\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            description=\"Distance metric for the index\", default=\"cosine\"\n        )",
                                  "children": [
                                    {
                                      "value": "description=\"Distance metric for the index\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Distance metric for the index\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Distance metric for the index",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "default=\"cosine\"",
                                      "children": [
                                        {
                                          "value": "default",
                                          "children": []
                                        },
                                        {
                                          "value": "\"cosine\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "cosine",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "cloud: str = SchemaField(\n            description=\"Cloud provider for serverless\", default=\"aws\"\n        )",
                      "children": [
                        {
                          "value": "cloud: str = SchemaField(\n            description=\"Cloud provider for serverless\", default=\"aws\"\n        )",
                          "children": [
                            {
                              "value": "cloud",
                              "children": []
                            },
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            description=\"Cloud provider for serverless\", default=\"aws\"\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            description=\"Cloud provider for serverless\", default=\"aws\"\n        )",
                                  "children": [
                                    {
                                      "value": "description=\"Cloud provider for serverless\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Cloud provider for serverless\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Cloud provider for serverless",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "default=\"aws\"",
                                      "children": [
                                        {
                                          "value": "default",
                                          "children": []
                                        },
                                        {
                                          "value": "\"aws\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "aws",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "region: str = SchemaField(\n            description=\"Region for serverless\", default=\"us-east-1\"\n        )",
                      "children": [
                        {
                          "value": "region: str = SchemaField(\n            description=\"Region for serverless\", default=\"us-east-1\"\n        )",
                          "children": [
                            {
                              "value": "region",
                              "children": []
                            },
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            description=\"Region for serverless\", default=\"us-east-1\"\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            description=\"Region for serverless\", default=\"us-east-1\"\n        )",
                                  "children": [
                                    {
                                      "value": "description=\"Region for serverless\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Region for serverless\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Region for serverless",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "default=\"us-east-1\"",
                                      "children": [
                                        {
                                          "value": "default",
                                          "children": []
                                        },
                                        {
                                          "value": "\"us-east-1\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "us-east-1",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "class Output(BlockSchema):\n        index: str = SchemaField(description=\"Name of the initialized Pinecone index\")\n        message: str = SchemaField(description=\"Status message\")",
              "children": [
                {
                  "value": "Output",
                  "children": []
                },
                {
                  "value": "(BlockSchema)",
                  "children": [
                    {
                      "value": "BlockSchema",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "index: str = SchemaField(description=\"Name of the initialized Pinecone index\")\n        message: str = SchemaField(description=\"Status message\")",
                  "children": [
                    {
                      "value": "index: str = SchemaField(description=\"Name of the initialized Pinecone index\")",
                      "children": [
                        {
                          "value": "index: str = SchemaField(description=\"Name of the initialized Pinecone index\")",
                          "children": [
                            {
                              "value": "index",
                              "children": []
                            },
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(description=\"Name of the initialized Pinecone index\")",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(description=\"Name of the initialized Pinecone index\")",
                                  "children": [
                                    {
                                      "value": "description=\"Name of the initialized Pinecone index\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Name of the initialized Pinecone index\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Name of the initialized Pinecone index",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "message: str = SchemaField(description=\"Status message\")",
                      "children": [
                        {
                          "value": "message: str = SchemaField(description=\"Status message\")",
                          "children": [
                            {
                              "value": "message",
                              "children": []
                            },
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(description=\"Status message\")",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(description=\"Status message\")",
                                  "children": [
                                    {
                                      "value": "description=\"Status message\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Status message\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Status message",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def __init__(self):\n        super().__init__(\n            id=\"48d8fdab-8f03-41f3-8407-8107ba11ec9b\",\n            description=\"Initializes a Pinecone index\",\n            categories={BlockCategory.LOGIC},\n            input_schema=PineconeInitBlock.Input,\n            output_schema=PineconeInitBlock.Output,\n        )",
              "children": [
                {
                  "value": "__init__",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "super().__init__(\n            id=\"48d8fdab-8f03-41f3-8407-8107ba11ec9b\",\n            description=\"Initializes a Pinecone index\",\n            categories={BlockCategory.LOGIC},\n            input_schema=PineconeInitBlock.Input,\n            output_schema=PineconeInitBlock.Output,\n        )",
                  "children": [
                    {
                      "value": "super().__init__(\n            id=\"48d8fdab-8f03-41f3-8407-8107ba11ec9b\",\n            description=\"Initializes a Pinecone index\",\n            categories={BlockCategory.LOGIC},\n            input_schema=PineconeInitBlock.Input,\n            output_schema=PineconeInitBlock.Output,\n        )",
                      "children": [
                        {
                          "value": "super().__init__(\n            id=\"48d8fdab-8f03-41f3-8407-8107ba11ec9b\",\n            description=\"Initializes a Pinecone index\",\n            categories={BlockCategory.LOGIC},\n            input_schema=PineconeInitBlock.Input,\n            output_schema=PineconeInitBlock.Output,\n        )",
                          "children": [
                            {
                              "value": "super().__init__",
                              "children": [
                                {
                                  "value": "super()",
                                  "children": [
                                    {
                                      "value": "super",
                                      "children": []
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "__init__",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(\n            id=\"48d8fdab-8f03-41f3-8407-8107ba11ec9b\",\n            description=\"Initializes a Pinecone index\",\n            categories={BlockCategory.LOGIC},\n            input_schema=PineconeInitBlock.Input,\n            output_schema=PineconeInitBlock.Output,\n        )",
                              "children": [
                                {
                                  "value": "id=\"48d8fdab-8f03-41f3-8407-8107ba11ec9b\"",
                                  "children": [
                                    {
                                      "value": "id",
                                      "children": []
                                    },
                                    {
                                      "value": "\"48d8fdab-8f03-41f3-8407-8107ba11ec9b\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "48d8fdab-8f03-41f3-8407-8107ba11ec9b",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "description=\"Initializes a Pinecone index\"",
                                  "children": [
                                    {
                                      "value": "description",
                                      "children": []
                                    },
                                    {
                                      "value": "\"Initializes a Pinecone index\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Initializes a Pinecone index",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "categories={BlockCategory.LOGIC}",
                                  "children": [
                                    {
                                      "value": "categories",
                                      "children": []
                                    },
                                    {
                                      "value": "{BlockCategory.LOGIC}",
                                      "children": [
                                        {
                                          "value": "BlockCategory.LOGIC",
                                          "children": [
                                            {
                                              "value": "BlockCategory",
                                              "children": []
                                            },
                                            {
                                              "value": "LOGIC",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "input_schema=PineconeInitBlock.Input",
                                  "children": [
                                    {
                                      "value": "input_schema",
                                      "children": []
                                    },
                                    {
                                      "value": "PineconeInitBlock.Input",
                                      "children": [
                                        {
                                          "value": "PineconeInitBlock",
                                          "children": []
                                        },
                                        {
                                          "value": "Input",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "output_schema=PineconeInitBlock.Output",
                                  "children": [
                                    {
                                      "value": "output_schema",
                                      "children": []
                                    },
                                    {
                                      "value": "PineconeInitBlock.Output",
                                      "children": [
                                        {
                                          "value": "PineconeInitBlock",
                                          "children": []
                                        },
                                        {
                                          "value": "Output",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def run(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    ) -> BlockOutput:\n        pc = Pinecone(api_key=credentials.api_key.get_secret_value())\n\n        try:\n            existing_indexes = pc.list_indexes()\n            if input_data.index_name not in [index.name for index in existing_indexes]:\n                pc.create_index(\n                    name=input_data.index_name,\n                    dimension=input_data.dimension,\n                    metric=input_data.metric,\n                    spec=ServerlessSpec(\n                        cloud=input_data.cloud, region=input_data.region\n                    ),\n                )\n                message = f\"Created new index: {input_data.index_name}\"\n            else:\n                message = f\"Using existing index: {input_data.index_name}\"\n\n            yield \"index\", input_data.index_name\n            yield \"message\", message\n        except Exception as e:\n            yield \"message\", f\"Error initializing Pinecone index: {str(e)}\"",
              "children": [
                {
                  "value": "run",
                  "children": []
                },
                {
                  "value": "(\n        self, input_data: Input, *, credentials: APIKeyCredentials, **kwargs\n    )",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "input_data: Input",
                      "children": [
                        {
                          "value": "input_data",
                          "children": []
                        },
                        {
                          "value": "Input",
                          "children": [
                            {
                              "value": "Input",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "*",
                      "children": []
                    },
                    {
                      "value": "credentials: APIKeyCredentials",
                      "children": [
                        {
                          "value": "credentials",
                          "children": []
                        },
                        {
                          "value": "APIKeyCredentials",
                          "children": [
                            {
                              "value": "APIKeyCredentials",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "**kwargs",
                      "children": [
                        {
                          "value": "kwargs",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "BlockOutput",
                  "children": [
                    {
                      "value": "BlockOutput",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "pc = Pinecone(api_key=credentials.api_key.get_secret_value())\n\n        try:\n            existing_indexes = pc.list_indexes()\n            if input_data.index_name not in [index.name for index in existing_indexes]:\n                pc.create_index(\n                    name=input_data.index_name,\n                    dimension=input_data.dimension,\n                    metric=input_data.metric,\n                    spec=ServerlessSpec(\n                        cloud=input_data.cloud, region=input_data.region\n                    ),\n                )\n                message = f\"Created new index: {input_data.index_name}\"\n            else:\n                message = f\"Using existing index: {input_data.index_name}\"\n\n            yield \"index\", input_data.index_name\n            yield \"message\", message\n        except Exception as e:\n            yield \"message\", f\"Error initializing Pinecone index: {str(e)}\"",
                  "children": [
                    {
                      "value": "pc = Pinecone(api_key=credentials.api_key.get_secret_value())",
                      "children": [
                        {
                          "value": "pc = Pinecone(api_key=credentials.api_key.get_secret_value())",
                          "children": [
                            {
                              "value": "pc",
                              "children": []
                            },
                            {
                              "value": "Pinecone(api_key=credentials.api_key.get_secret_value())",
                              "children": [
                                {
                                  "value": "Pinecone",
                                  "children": []
                                },
                                {
                                  "value": "(api_key=credentials.api_key.get_secret_value())",
                                  "children": [
                                    {
                                      "value": "api_key=credentials.api_key.get_secret_value()",
                                      "children": [
                                        {
                                          "value": "api_key",
                                          "children": []
                                        },
                                        {
                                          "value": "credentials.api_key.get_secret_value()",
                                          "children": [
                                            {
                                              "value": "credentials.api_key.get_secret_value",
                                              "children": [
                                                {
                                                  "value": "credentials.api_key",
                                                  "children": [
                                                    {
                                                      "value": "credentials",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "api_key",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "get_secret_value",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "()",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "try:\n            existing_indexes = pc.list_indexes()\n            if input_data.index_name not in [index.name for index in existing_indexes]:\n                pc.create_index(\n                    name=input_data.index_name,\n                    dimension=input_data.dimension,\n                    metric=input_data.metric,\n                    spec=ServerlessSpec(\n                        cloud=input_data.cloud, region=input_data.region\n                    ),\n                )\n                message = f\"Created new index: {input_data.index_name}\"\n            else:\n                message = f\"Using existing index: {input_data.index_name}\"\n\n            yield \"index\", input_data.index_name\n            yield \"message\", message\n        except Exception as e:\n            yield \"message\", f\"Error initializing Pinecone index: {str(e)}\"",
                      "children": [
                        {
                          "value": "existing_indexes = pc.list_indexes()\n            if input_data.index_name not in [index.name for index in existing_indexes]:\n                pc.create_index(\n                    name=input_data.index_name,\n                    dimension=input_data.dimension,\n                    metric=input_data.metric,\n                    spec=ServerlessSpec(\n                        cloud=input_data.cloud, region=input_data.region\n                    ),\n                )\n                message = f\"Created new index: {input_data.index_name}\"\n            else:\n                message = f\"Using existing index: {input_data.index_name}\"\n\n            yield \"index\", input_data.index_name\n            yield \"message\", message",
                          "children": [
                            {
                              "value": "existing_indexes = pc.list_indexes()",
                              "children": [
                                {
                                  "value": "existing_indexes = pc.list_indexes()",
                                  "children": [
                                    {
                                      "value": "existing_indexes",
                                      "children": []
                                    },
                                    {
                                      "value": "pc.list_indexes()",
                                      "children": [
                                        {
                                          "value": "pc.list_indexes",
                                          "children": [
                                            {
                                              "value": "pc",
                                              "children": []
                                            },
                                            {
                                              "value": "list_indexes",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "()",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "if input_data.index_name not in [index.name for index in existing_indexes]:\n                pc.create_index(\n                    name=input_data.index_name,\n                    dimension=input_data.dimension,\n                    metric=input_data.metric,\n                    spec=ServerlessSpec(\n                        cloud=input_data.cloud, region=input_data.region\n                    ),\n                )\n                message = f\"Created new index: {input_data.index_name}\"\n            else:\n                message = f\"Using existing index: {input_data.index_name}\"",
                              "children": [
                                {
                                  "value": "input_data.index_name not in [index.name for index in existing_indexes]",
                                  "children": [
                                    {
                                      "value": "input_data.index_name",
                                      "children": [
                                        {
                                          "value": "input_data",
                                          "children": []
                                        },
                                        {
                                          "value": "index_name",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "[index.name for index in existing_indexes]",
                                      "children": [
                                        {
                                          "value": "index.name",
                                          "children": [
                                            {
                                              "value": "index",
                                              "children": []
                                            },
                                            {
                                              "value": "name",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "for index in existing_indexes",
                                          "children": [
                                            {
                                              "value": "index",
                                              "children": []
                                            },
                                            {
                                              "value": "existing_indexes",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "pc.create_index(\n                    name=input_data.index_name,\n                    dimension=input_data.dimension,\n                    metric=input_data.metric,\n                    spec=ServerlessSpec(\n                        cloud=input_data.cloud, region=input_data.region\n                    ),\n                )\n                message = f\"Created new index: {input_data.index_name}\"",
                                  "children": [
                                    {
                                      "value": "pc.create_index(\n                    name=input_data.index_name,\n                    dimension=input_data.dimension,\n                    metric=input_data.metric,\n                    spec=ServerlessSpec(\n                        cloud=input_data.cloud, region=input_data.region\n                    ),\n                )",
                                      "children": [
                                        {
                                          "value": "pc.create_index(\n                    name=input_data.index_name,\n                    dimension=input_data.dimension,\n                    metric=input_data.metric,\n                    spec=ServerlessSpec(\n                        cloud=input_data.cloud, region=input_data.region\n                    ),\n                )",
                                          "children": [
                                            {
                                              "value": "pc.create_index",
                                              "children": [
                                                {
                                                  "value": "pc",
                                                  "children": []
                                                },
                                                {
                                                  "value": "create_index",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(\n                    name=input_data.index_name,\n                    dimension=input_data.dimension,\n                    metric=input_data.metric,\n                    spec=ServerlessSpec(\n                        cloud=input_data.cloud, region=input_data.region\n                    ),\n                )",
                                              "children": [
                                                {
                                                  "value": "name=input_data.index_name",
                                                  "children": [
                                                    {
                                                      "value": "name",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "input_data.index_name",
                                                      "children": [
                                                        {
                                                          "value": "input_data",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "index_name",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "dimension=input_data.dimension",
                                                  "children": [
                                                    {
                                                      "value": "dimension",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "input_data.dimension",
                                                      "children": [
                                                        {
                                                          "value": "input_data",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "dimension",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "metric=input_data.metric",
                                                  "children": [
                                                    {
                                                      "value": "metric",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "input_data.metric",
                                                      "children": [
                                                        {
                                                          "value": "input_data",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "metric",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "spec=ServerlessSpec(\n                        cloud=input_data.cloud, region=input_data.region\n                    )",
                                                  "children": [
                                                    {
                                                      "value": "spec",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "ServerlessSpec(\n                        cloud=input_data.cloud, region=input_data.region\n                    )",
                                                      "children": [
                                                        {
                                                          "value": "ServerlessSpec",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "(\n                        cloud=input_data.cloud, region=input_data.region\n                    )",
                                                          "children": [
                                                            {
                                                              "value": "cloud=input_data.cloud",
                                                              "children": [
                                                                {
                                                                  "value": "cloud",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "input_data.cloud",
                                                                  "children": [
                                                                    {
                                                                      "value": "input_data",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "cloud",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "region=input_data.region",
                                                              "children": [
                                                                {
                                                                  "value": "region",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "input_data.region",
                                                                  "children": [
                                                                    {
                                                                      "value": "input_data",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "region",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "message = f\"Created new index: {input_data.index_name}\"",
                                      "children": [
                                        {
                                          "value": "message = f\"Created new index: {input_data.index_name}\"",
                                          "children": [
                                            {
                                              "value": "message",
                                              "children": []
                                            },
                                            {
                                              "value": "f\"Created new index: {input_data.index_name}\"",
                                              "children": [
                                                {
                                                  "value": "f\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "Created new index:",
                                                  "children": []
                                                },
                                                {
                                                  "value": "{input_data.index_name}",
                                                  "children": [
                                                    {
                                                      "value": "input_data.index_name",
                                                      "children": [
                                                        {
                                                          "value": "input_data",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "index_name",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "else:\n                message = f\"Using existing index: {input_data.index_name}\"",
                                  "children": [
                                    {
                                      "value": "message = f\"Using existing index: {input_data.index_name}\"",
                                      "children": [
                                        {
                                          "value": "message = f\"Using existing index: {input_data.index_name}\"",
                                          "children": [
                                            {
                                              "value": "message = f\"Using existing index: {input_data.index_name}\"",
                                              "children": [
                                                {
                                                  "value": "message",
                                                  "children": []
                                                },
                                                {
                                                  "value": "f\"Using existing index: {input_data.index_name}\"",
                                                  "children": [
                                                    {
                                                      "value": "f\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "Using existing index:",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "{input_data.index_name}",
                                                      "children": [
                                                        {
                                                          "value": "input_data.index_name",
                                                          "children": [
                                                            {
                                                              "value": "input_data",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "index_name",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "yield \"index\", input_data.index_name",
                              "children": [
                                {
                                  "value": "yield \"index\", input_data.index_name",
                                  "children": [
                                    {
                                      "value": "\"index\", input_data.index_name",
                                      "children": [
                                        {
                                          "value": "\"index\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "index",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "input_data.index_name",
                                          "children": [
                                            {
                                              "value": "input_data",
                                              "children": []
                                            },
                                            {
                                              "value": "index_name",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "yield \"message\", message",
                              "children": [
                                {
                                  "value": "yield \"message\", message",
                                  "children": [
                                    {
                                      "value": "\"message\", message",
                                      "children": [
                                        {
                                          "value": "\"message\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "message",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "message",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "except Exception as e:\n            yield \"message\", f\"Error initializing Pinecone index: {str(e)}\"",
                          "children": [
                            {
                              "value": "Exception as e",
                              "children": [
                                {
                                  "value": "Exception",
                                  "children": []
                                },
                                {
                                  "value": "e",
                                  "children": [
                                    {
                                      "value": "e",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "yield \"message\", f\"Error initializing Pinecone index: {str(e)}\"",
                              "children": [
                                {
                                  "value": "yield \"message\", f\"Error initializing Pinecone index: {str(e)}\"",
                                  "children": [
                                    {
                                      "value": "yield \"message\", f\"Error initializing Pinecone index: {str(e)}\"",
                                      "children": [
                                        {
                                          "value": "\"message\", f\"Error initializing Pinecone index: {str(e)}\"",
                                          "children": [
                                            {
                                              "value": "\"message\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "message",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "f\"Error initializing Pinecone index: {str(e)}\"",
                                              "children": [
                                                {
                                                  "value": "f\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "Error initializing Pinecone index:",
                                                  "children": []
                                                },
                                                {
                                                  "value": "{str(e)}",
                                                  "children": [
                                                    {
                                                      "value": "str(e)",
                                                      "children": [
                                                        {
                                                          "value": "str",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "(e)",
                                                          "children": [
                                                            {
                                                              "value": "e",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class PineconeQueryBlock(Block):\n    class Input(BlockSchema):\n        credentials: PineconeCredentialsInput = PineconeCredentialsField()\n        query_vector: list = SchemaField(description=\"Query vector\")\n        namespace: str = SchemaField(\n            description=\"Namespace to query in Pinecone\", default=\"\"\n        )\n        top_k: int = SchemaField(\n            description=\"Number of top results to return\", default=3\n        )\n        include_values: bool = SchemaField(\n            description=\"Whether to include vector values in the response\",\n            default=False,\n        )\n        include_metadata: bool = SchemaField(\n            description=\"Whether to include metadata in the response\", default=True\n        )\n        host: str = SchemaField(description=\"Host for pinecone\", default=\"\")\n        idx_name: str = SchemaField(description=\"Index name for pinecone\")\n\n    class Output(BlockSchema):\n        results: Any = SchemaField(description=\"Query results from Pinecone\")\n        combined_results: Any = SchemaField(\n            description=\"Combined results from Pinecone\"\n        )\n\n    def __init__(self):\n        super().__init__(\n            id=\"9ad93d0f-91b4-4c9c-8eb1-82e26b4a01c5\",\n            description=\"Queries a Pinecone index\",\n            categories={BlockCategory.LOGIC},\n            input_schema=PineconeQueryBlock.Input,\n            output_schema=PineconeQueryBlock.Output,\n        )\n\n    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: APIKeyCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        try:\n            # Create a new client instance\n            pc = Pinecone(api_key=credentials.api_key.get_secret_value())\n\n            # Get the index\n            idx = pc.Index(input_data.idx_name)\n\n            # Ensure query_vector is in correct format\n            query_vector = input_data.query_vector\n            if isinstance(query_vector, list) and len(query_vector) > 0:\n                if isinstance(query_vector[0], list):\n                    query_vector = query_vector[0]\n\n            results = idx.query(\n                namespace=input_data.namespace,\n                vector=query_vector,\n                top_k=input_data.top_k,\n                include_values=input_data.include_values,\n                include_metadata=input_data.include_metadata,\n            ).to_dict()  # type: ignore\n            combined_text = \"\"\n            if results[\"matches\"]:\n                texts = [\n                    match[\"metadata\"][\"text\"]\n                    for match in results[\"matches\"]\n                    if match.get(\"metadata\", {}).get(\"text\")\n                ]\n                combined_text = \"\\n\\n\".join(texts)\n\n            # Return both the raw matches and combined text\n            yield \"results\", {\n                \"matches\": results[\"matches\"],\n                \"combined_text\": combined_text,\n            }\n            yield \"combined_results\", combined_text\n\n        except Exception as e:\n            error_msg = f\"Error querying Pinecone: {str(e)}\"\n            raise RuntimeError(error_msg) from e",
      "children": [
        {
          "value": "PineconeQueryBlock",
          "children": []
        },
        {
          "value": "(Block)",
          "children": [
            {
              "value": "Block",
              "children": []
            }
          ]
        },
        {
          "value": "class Input(BlockSchema):\n        credentials: PineconeCredentialsInput = PineconeCredentialsField()\n        query_vector: list = SchemaField(description=\"Query vector\")\n        namespace: str = SchemaField(\n            description=\"Namespace to query in Pinecone\", default=\"\"\n        )\n        top_k: int = SchemaField(\n            description=\"Number of top results to return\", default=3\n        )\n        include_values: bool = SchemaField(\n            description=\"Whether to include vector values in the response\",\n            default=False,\n        )\n        include_metadata: bool = SchemaField(\n            description=\"Whether to include metadata in the response\", default=True\n        )\n        host: str = SchemaField(description=\"Host for pinecone\", default=\"\")\n        idx_name: str = SchemaField(description=\"Index name for pinecone\")\n\n    class Output(BlockSchema):\n        results: Any = SchemaField(description=\"Query results from Pinecone\")\n        combined_results: Any = SchemaField(\n            description=\"Combined results from Pinecone\"\n        )\n\n    def __init__(self):\n        super().__init__(\n            id=\"9ad93d0f-91b4-4c9c-8eb1-82e26b4a01c5\",\n            description=\"Queries a Pinecone index\",\n            categories={BlockCategory.LOGIC},\n            input_schema=PineconeQueryBlock.Input,\n            output_schema=PineconeQueryBlock.Output,\n        )\n\n    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: APIKeyCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        try:\n            # Create a new client instance\n            pc = Pinecone(api_key=credentials.api_key.get_secret_value())\n\n            # Get the index\n            idx = pc.Index(input_data.idx_name)\n\n            # Ensure query_vector is in correct format\n            query_vector = input_data.query_vector\n            if isinstance(query_vector, list) and len(query_vector) > 0:\n                if isinstance(query_vector[0], list):\n                    query_vector = query_vector[0]\n\n            results = idx.query(\n                namespace=input_data.namespace,\n                vector=query_vector,\n                top_k=input_data.top_k,\n                include_values=input_data.include_values,\n                include_metadata=input_data.include_metadata,\n            ).to_dict()  # type: ignore\n            combined_text = \"\"\n            if results[\"matches\"]:\n                texts = [\n                    match[\"metadata\"][\"text\"]\n                    for match in results[\"matches\"]\n                    if match.get(\"metadata\", {}).get(\"text\")\n                ]\n                combined_text = \"\\n\\n\".join(texts)\n\n            # Return both the raw matches and combined text\n            yield \"results\", {\n                \"matches\": results[\"matches\"],\n                \"combined_text\": combined_text,\n            }\n            yield \"combined_results\", combined_text\n\n        except Exception as e:\n            error_msg = f\"Error querying Pinecone: {str(e)}\"\n            raise RuntimeError(error_msg) from e",
          "children": [
            {
              "value": "class Input(BlockSchema):\n        credentials: PineconeCredentialsInput = PineconeCredentialsField()\n        query_vector: list = SchemaField(description=\"Query vector\")\n        namespace: str = SchemaField(\n            description=\"Namespace to query in Pinecone\", default=\"\"\n        )\n        top_k: int = SchemaField(\n            description=\"Number of top results to return\", default=3\n        )\n        include_values: bool = SchemaField(\n            description=\"Whether to include vector values in the response\",\n            default=False,\n        )\n        include_metadata: bool = SchemaField(\n            description=\"Whether to include metadata in the response\", default=True\n        )\n        host: str = SchemaField(description=\"Host for pinecone\", default=\"\")\n        idx_name: str = SchemaField(description=\"Index name for pinecone\")",
              "children": [
                {
                  "value": "Input",
                  "children": []
                },
                {
                  "value": "(BlockSchema)",
                  "children": [
                    {
                      "value": "BlockSchema",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "credentials: PineconeCredentialsInput = PineconeCredentialsField()\n        query_vector: list = SchemaField(description=\"Query vector\")\n        namespace: str = SchemaField(\n            description=\"Namespace to query in Pinecone\", default=\"\"\n        )\n        top_k: int = SchemaField(\n            description=\"Number of top results to return\", default=3\n        )\n        include_values: bool = SchemaField(\n            description=\"Whether to include vector values in the response\",\n            default=False,\n        )\n        include_metadata: bool = SchemaField(\n            description=\"Whether to include metadata in the response\", default=True\n        )\n        host: str = SchemaField(description=\"Host for pinecone\", default=\"\")\n        idx_name: str = SchemaField(description=\"Index name for pinecone\")",
                  "children": [
                    {
                      "value": "credentials: PineconeCredentialsInput = PineconeCredentialsField()",
                      "children": [
                        {
                          "value": "credentials: PineconeCredentialsInput = PineconeCredentialsField()",
                          "children": [
                            {
                              "value": "credentials",
                              "children": []
                            },
                            {
                              "value": "PineconeCredentialsInput",
                              "children": [
                                {
                                  "value": "PineconeCredentialsInput",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "PineconeCredentialsField()",
                              "children": [
                                {
                                  "value": "PineconeCredentialsField",
                                  "children": []
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "query_vector: list = SchemaField(description=\"Query vector\")",
                      "children": [
                        {
                          "value": "query_vector: list = SchemaField(description=\"Query vector\")",
                          "children": [
                            {
                              "value": "query_vector",
                              "children": []
                            },
                            {
                              "value": "list",
                              "children": [
                                {
                                  "value": "list",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(description=\"Query vector\")",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(description=\"Query vector\")",
                                  "children": [
                                    {
                                      "value": "description=\"Query vector\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Query vector\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Query vector",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "namespace: str = SchemaField(\n            description=\"Namespace to query in Pinecone\", default=\"\"\n        )",
                      "children": [
                        {
                          "value": "namespace: str = SchemaField(\n            description=\"Namespace to query in Pinecone\", default=\"\"\n        )",
                          "children": [
                            {
                              "value": "namespace",
                              "children": []
                            },
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            description=\"Namespace to query in Pinecone\", default=\"\"\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            description=\"Namespace to query in Pinecone\", default=\"\"\n        )",
                                  "children": [
                                    {
                                      "value": "description=\"Namespace to query in Pinecone\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Namespace to query in Pinecone\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Namespace to query in Pinecone",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "default=\"\"",
                                      "children": [
                                        {
                                          "value": "default",
                                          "children": []
                                        },
                                        {
                                          "value": "\"\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "top_k: int = SchemaField(\n            description=\"Number of top results to return\", default=3\n        )",
                      "children": [
                        {
                          "value": "top_k: int = SchemaField(\n            description=\"Number of top results to return\", default=3\n        )",
                          "children": [
                            {
                              "value": "top_k",
                              "children": []
                            },
                            {
                              "value": "int",
                              "children": [
                                {
                                  "value": "int",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            description=\"Number of top results to return\", default=3\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            description=\"Number of top results to return\", default=3\n        )",
                                  "children": [
                                    {
                                      "value": "description=\"Number of top results to return\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Number of top results to return\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Number of top results to return",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "default=3",
                                      "children": [
                                        {
                                          "value": "default",
                                          "children": []
                                        },
                                        {
                                          "value": "3",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "include_values: bool = SchemaField(\n            description=\"Whether to include vector values in the response\",\n            default=False,\n        )",
                      "children": [
                        {
                          "value": "include_values: bool = SchemaField(\n            description=\"Whether to include vector values in the response\",\n            default=False,\n        )",
                          "children": [
                            {
                              "value": "include_values",
                              "children": []
                            },
                            {
                              "value": "bool",
                              "children": [
                                {
                                  "value": "bool",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            description=\"Whether to include vector values in the response\",\n            default=False,\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            description=\"Whether to include vector values in the response\",\n            default=False,\n        )",
                                  "children": [
                                    {
                                      "value": "description=\"Whether to include vector values in the response\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Whether to include vector values in the response\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Whether to include vector values in the response",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "default=False",
                                      "children": [
                                        {
                                          "value": "default",
                                          "children": []
                                        },
                                        {
                                          "value": "False",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "include_metadata: bool = SchemaField(\n            description=\"Whether to include metadata in the response\", default=True\n        )",
                      "children": [
                        {
                          "value": "include_metadata: bool = SchemaField(\n            description=\"Whether to include metadata in the response\", default=True\n        )",
                          "children": [
                            {
                              "value": "include_metadata",
                              "children": []
                            },
                            {
                              "value": "bool",
                              "children": [
                                {
                                  "value": "bool",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            description=\"Whether to include metadata in the response\", default=True\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            description=\"Whether to include metadata in the response\", default=True\n        )",
                                  "children": [
                                    {
                                      "value": "description=\"Whether to include metadata in the response\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Whether to include metadata in the response\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Whether to include metadata in the response",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "default=True",
                                      "children": [
                                        {
                                          "value": "default",
                                          "children": []
                                        },
                                        {
                                          "value": "True",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "host: str = SchemaField(description=\"Host for pinecone\", default=\"\")",
                      "children": [
                        {
                          "value": "host: str = SchemaField(description=\"Host for pinecone\", default=\"\")",
                          "children": [
                            {
                              "value": "host",
                              "children": []
                            },
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(description=\"Host for pinecone\", default=\"\")",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(description=\"Host for pinecone\", default=\"\")",
                                  "children": [
                                    {
                                      "value": "description=\"Host for pinecone\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Host for pinecone\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Host for pinecone",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "default=\"\"",
                                      "children": [
                                        {
                                          "value": "default",
                                          "children": []
                                        },
                                        {
                                          "value": "\"\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "idx_name: str = SchemaField(description=\"Index name for pinecone\")",
                      "children": [
                        {
                          "value": "idx_name: str = SchemaField(description=\"Index name for pinecone\")",
                          "children": [
                            {
                              "value": "idx_name",
                              "children": []
                            },
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(description=\"Index name for pinecone\")",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(description=\"Index name for pinecone\")",
                                  "children": [
                                    {
                                      "value": "description=\"Index name for pinecone\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Index name for pinecone\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Index name for pinecone",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "class Output(BlockSchema):\n        results: Any = SchemaField(description=\"Query results from Pinecone\")\n        combined_results: Any = SchemaField(\n            description=\"Combined results from Pinecone\"\n        )",
              "children": [
                {
                  "value": "Output",
                  "children": []
                },
                {
                  "value": "(BlockSchema)",
                  "children": [
                    {
                      "value": "BlockSchema",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "results: Any = SchemaField(description=\"Query results from Pinecone\")\n        combined_results: Any = SchemaField(\n            description=\"Combined results from Pinecone\"\n        )",
                  "children": [
                    {
                      "value": "results: Any = SchemaField(description=\"Query results from Pinecone\")",
                      "children": [
                        {
                          "value": "results: Any = SchemaField(description=\"Query results from Pinecone\")",
                          "children": [
                            {
                              "value": "results",
                              "children": []
                            },
                            {
                              "value": "Any",
                              "children": [
                                {
                                  "value": "Any",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(description=\"Query results from Pinecone\")",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(description=\"Query results from Pinecone\")",
                                  "children": [
                                    {
                                      "value": "description=\"Query results from Pinecone\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Query results from Pinecone\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Query results from Pinecone",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "combined_results: Any = SchemaField(\n            description=\"Combined results from Pinecone\"\n        )",
                      "children": [
                        {
                          "value": "combined_results: Any = SchemaField(\n            description=\"Combined results from Pinecone\"\n        )",
                          "children": [
                            {
                              "value": "combined_results",
                              "children": []
                            },
                            {
                              "value": "Any",
                              "children": [
                                {
                                  "value": "Any",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            description=\"Combined results from Pinecone\"\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            description=\"Combined results from Pinecone\"\n        )",
                                  "children": [
                                    {
                                      "value": "description=\"Combined results from Pinecone\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Combined results from Pinecone\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Combined results from Pinecone",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def __init__(self):\n        super().__init__(\n            id=\"9ad93d0f-91b4-4c9c-8eb1-82e26b4a01c5\",\n            description=\"Queries a Pinecone index\",\n            categories={BlockCategory.LOGIC},\n            input_schema=PineconeQueryBlock.Input,\n            output_schema=PineconeQueryBlock.Output,\n        )",
              "children": [
                {
                  "value": "__init__",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "super().__init__(\n            id=\"9ad93d0f-91b4-4c9c-8eb1-82e26b4a01c5\",\n            description=\"Queries a Pinecone index\",\n            categories={BlockCategory.LOGIC},\n            input_schema=PineconeQueryBlock.Input,\n            output_schema=PineconeQueryBlock.Output,\n        )",
                  "children": [
                    {
                      "value": "super().__init__(\n            id=\"9ad93d0f-91b4-4c9c-8eb1-82e26b4a01c5\",\n            description=\"Queries a Pinecone index\",\n            categories={BlockCategory.LOGIC},\n            input_schema=PineconeQueryBlock.Input,\n            output_schema=PineconeQueryBlock.Output,\n        )",
                      "children": [
                        {
                          "value": "super().__init__(\n            id=\"9ad93d0f-91b4-4c9c-8eb1-82e26b4a01c5\",\n            description=\"Queries a Pinecone index\",\n            categories={BlockCategory.LOGIC},\n            input_schema=PineconeQueryBlock.Input,\n            output_schema=PineconeQueryBlock.Output,\n        )",
                          "children": [
                            {
                              "value": "super().__init__",
                              "children": [
                                {
                                  "value": "super()",
                                  "children": [
                                    {
                                      "value": "super",
                                      "children": []
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "__init__",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(\n            id=\"9ad93d0f-91b4-4c9c-8eb1-82e26b4a01c5\",\n            description=\"Queries a Pinecone index\",\n            categories={BlockCategory.LOGIC},\n            input_schema=PineconeQueryBlock.Input,\n            output_schema=PineconeQueryBlock.Output,\n        )",
                              "children": [
                                {
                                  "value": "id=\"9ad93d0f-91b4-4c9c-8eb1-82e26b4a01c5\"",
                                  "children": [
                                    {
                                      "value": "id",
                                      "children": []
                                    },
                                    {
                                      "value": "\"9ad93d0f-91b4-4c9c-8eb1-82e26b4a01c5\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "9ad93d0f-91b4-4c9c-8eb1-82e26b4a01c5",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "description=\"Queries a Pinecone index\"",
                                  "children": [
                                    {
                                      "value": "description",
                                      "children": []
                                    },
                                    {
                                      "value": "\"Queries a Pinecone index\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Queries a Pinecone index",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "categories={BlockCategory.LOGIC}",
                                  "children": [
                                    {
                                      "value": "categories",
                                      "children": []
                                    },
                                    {
                                      "value": "{BlockCategory.LOGIC}",
                                      "children": [
                                        {
                                          "value": "BlockCategory.LOGIC",
                                          "children": [
                                            {
                                              "value": "BlockCategory",
                                              "children": []
                                            },
                                            {
                                              "value": "LOGIC",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "input_schema=PineconeQueryBlock.Input",
                                  "children": [
                                    {
                                      "value": "input_schema",
                                      "children": []
                                    },
                                    {
                                      "value": "PineconeQueryBlock.Input",
                                      "children": [
                                        {
                                          "value": "PineconeQueryBlock",
                                          "children": []
                                        },
                                        {
                                          "value": "Input",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "output_schema=PineconeQueryBlock.Output",
                                  "children": [
                                    {
                                      "value": "output_schema",
                                      "children": []
                                    },
                                    {
                                      "value": "PineconeQueryBlock.Output",
                                      "children": [
                                        {
                                          "value": "PineconeQueryBlock",
                                          "children": []
                                        },
                                        {
                                          "value": "Output",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: APIKeyCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        try:\n            # Create a new client instance\n            pc = Pinecone(api_key=credentials.api_key.get_secret_value())\n\n            # Get the index\n            idx = pc.Index(input_data.idx_name)\n\n            # Ensure query_vector is in correct format\n            query_vector = input_data.query_vector\n            if isinstance(query_vector, list) and len(query_vector) > 0:\n                if isinstance(query_vector[0], list):\n                    query_vector = query_vector[0]\n\n            results = idx.query(\n                namespace=input_data.namespace,\n                vector=query_vector,\n                top_k=input_data.top_k,\n                include_values=input_data.include_values,\n                include_metadata=input_data.include_metadata,\n            ).to_dict()  # type: ignore\n            combined_text = \"\"\n            if results[\"matches\"]:\n                texts = [\n                    match[\"metadata\"][\"text\"]\n                    for match in results[\"matches\"]\n                    if match.get(\"metadata\", {}).get(\"text\")\n                ]\n                combined_text = \"\\n\\n\".join(texts)\n\n            # Return both the raw matches and combined text\n            yield \"results\", {\n                \"matches\": results[\"matches\"],\n                \"combined_text\": combined_text,\n            }\n            yield \"combined_results\", combined_text\n\n        except Exception as e:\n            error_msg = f\"Error querying Pinecone: {str(e)}\"\n            raise RuntimeError(error_msg) from e",
              "children": [
                {
                  "value": "run",
                  "children": []
                },
                {
                  "value": "(\n        self,\n        input_data: Input,\n        *,\n        credentials: APIKeyCredentials,\n        **kwargs,\n    )",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "input_data: Input",
                      "children": [
                        {
                          "value": "input_data",
                          "children": []
                        },
                        {
                          "value": "Input",
                          "children": [
                            {
                              "value": "Input",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "*",
                      "children": []
                    },
                    {
                      "value": "credentials: APIKeyCredentials",
                      "children": [
                        {
                          "value": "credentials",
                          "children": []
                        },
                        {
                          "value": "APIKeyCredentials",
                          "children": [
                            {
                              "value": "APIKeyCredentials",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "**kwargs",
                      "children": [
                        {
                          "value": "kwargs",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "BlockOutput",
                  "children": [
                    {
                      "value": "BlockOutput",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "try:\n            # Create a new client instance\n            pc = Pinecone(api_key=credentials.api_key.get_secret_value())\n\n            # Get the index\n            idx = pc.Index(input_data.idx_name)\n\n            # Ensure query_vector is in correct format\n            query_vector = input_data.query_vector\n            if isinstance(query_vector, list) and len(query_vector) > 0:\n                if isinstance(query_vector[0], list):\n                    query_vector = query_vector[0]\n\n            results = idx.query(\n                namespace=input_data.namespace,\n                vector=query_vector,\n                top_k=input_data.top_k,\n                include_values=input_data.include_values,\n                include_metadata=input_data.include_metadata,\n            ).to_dict()  # type: ignore\n            combined_text = \"\"\n            if results[\"matches\"]:\n                texts = [\n                    match[\"metadata\"][\"text\"]\n                    for match in results[\"matches\"]\n                    if match.get(\"metadata\", {}).get(\"text\")\n                ]\n                combined_text = \"\\n\\n\".join(texts)\n\n            # Return both the raw matches and combined text\n            yield \"results\", {\n                \"matches\": results[\"matches\"],\n                \"combined_text\": combined_text,\n            }\n            yield \"combined_results\", combined_text\n\n        except Exception as e:\n            error_msg = f\"Error querying Pinecone: {str(e)}\"\n            raise RuntimeError(error_msg) from e",
                  "children": [
                    {
                      "value": "try:\n            # Create a new client instance\n            pc = Pinecone(api_key=credentials.api_key.get_secret_value())\n\n            # Get the index\n            idx = pc.Index(input_data.idx_name)\n\n            # Ensure query_vector is in correct format\n            query_vector = input_data.query_vector\n            if isinstance(query_vector, list) and len(query_vector) > 0:\n                if isinstance(query_vector[0], list):\n                    query_vector = query_vector[0]\n\n            results = idx.query(\n                namespace=input_data.namespace,\n                vector=query_vector,\n                top_k=input_data.top_k,\n                include_values=input_data.include_values,\n                include_metadata=input_data.include_metadata,\n            ).to_dict()  # type: ignore\n            combined_text = \"\"\n            if results[\"matches\"]:\n                texts = [\n                    match[\"metadata\"][\"text\"]\n                    for match in results[\"matches\"]\n                    if match.get(\"metadata\", {}).get(\"text\")\n                ]\n                combined_text = \"\\n\\n\".join(texts)\n\n            # Return both the raw matches and combined text\n            yield \"results\", {\n                \"matches\": results[\"matches\"],\n                \"combined_text\": combined_text,\n            }\n            yield \"combined_results\", combined_text\n\n        except Exception as e:\n            error_msg = f\"Error querying Pinecone: {str(e)}\"\n            raise RuntimeError(error_msg) from e",
                      "children": [
                        {
                          "value": "# Create a new client instance",
                          "children": []
                        },
                        {
                          "value": "pc = Pinecone(api_key=credentials.api_key.get_secret_value())\n\n            # Get the index\n            idx = pc.Index(input_data.idx_name)\n\n            # Ensure query_vector is in correct format\n            query_vector = input_data.query_vector\n            if isinstance(query_vector, list) and len(query_vector) > 0:\n                if isinstance(query_vector[0], list):\n                    query_vector = query_vector[0]\n\n            results = idx.query(\n                namespace=input_data.namespace,\n                vector=query_vector,\n                top_k=input_data.top_k,\n                include_values=input_data.include_values,\n                include_metadata=input_data.include_metadata,\n            ).to_dict()  # type: ignore\n            combined_text = \"\"\n            if results[\"matches\"]:\n                texts = [\n                    match[\"metadata\"][\"text\"]\n                    for match in results[\"matches\"]\n                    if match.get(\"metadata\", {}).get(\"text\")\n                ]\n                combined_text = \"\\n\\n\".join(texts)\n\n            # Return both the raw matches and combined text\n            yield \"results\", {\n                \"matches\": results[\"matches\"],\n                \"combined_text\": combined_text,\n            }\n            yield \"combined_results\", combined_text",
                          "children": [
                            {
                              "value": "pc = Pinecone(api_key=credentials.api_key.get_secret_value())",
                              "children": [
                                {
                                  "value": "pc = Pinecone(api_key=credentials.api_key.get_secret_value())",
                                  "children": [
                                    {
                                      "value": "pc",
                                      "children": []
                                    },
                                    {
                                      "value": "Pinecone(api_key=credentials.api_key.get_secret_value())",
                                      "children": [
                                        {
                                          "value": "Pinecone",
                                          "children": []
                                        },
                                        {
                                          "value": "(api_key=credentials.api_key.get_secret_value())",
                                          "children": [
                                            {
                                              "value": "api_key=credentials.api_key.get_secret_value()",
                                              "children": [
                                                {
                                                  "value": "api_key",
                                                  "children": []
                                                },
                                                {
                                                  "value": "credentials.api_key.get_secret_value()",
                                                  "children": [
                                                    {
                                                      "value": "credentials.api_key.get_secret_value",
                                                      "children": [
                                                        {
                                                          "value": "credentials.api_key",
                                                          "children": [
                                                            {
                                                              "value": "credentials",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "api_key",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "get_secret_value",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "()",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "# Get the index",
                              "children": []
                            },
                            {
                              "value": "idx = pc.Index(input_data.idx_name)",
                              "children": [
                                {
                                  "value": "idx = pc.Index(input_data.idx_name)",
                                  "children": [
                                    {
                                      "value": "idx",
                                      "children": []
                                    },
                                    {
                                      "value": "pc.Index(input_data.idx_name)",
                                      "children": [
                                        {
                                          "value": "pc.Index",
                                          "children": [
                                            {
                                              "value": "pc",
                                              "children": []
                                            },
                                            {
                                              "value": "Index",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(input_data.idx_name)",
                                          "children": [
                                            {
                                              "value": "input_data.idx_name",
                                              "children": [
                                                {
                                                  "value": "input_data",
                                                  "children": []
                                                },
                                                {
                                                  "value": "idx_name",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "# Ensure query_vector is in correct format",
                              "children": []
                            },
                            {
                              "value": "query_vector = input_data.query_vector",
                              "children": [
                                {
                                  "value": "query_vector = input_data.query_vector",
                                  "children": [
                                    {
                                      "value": "query_vector",
                                      "children": []
                                    },
                                    {
                                      "value": "input_data.query_vector",
                                      "children": [
                                        {
                                          "value": "input_data",
                                          "children": []
                                        },
                                        {
                                          "value": "query_vector",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "if isinstance(query_vector, list) and len(query_vector) > 0:\n                if isinstance(query_vector[0], list):\n                    query_vector = query_vector[0]",
                              "children": [
                                {
                                  "value": "isinstance(query_vector, list) and len(query_vector) > 0",
                                  "children": [
                                    {
                                      "value": "isinstance(query_vector, list)",
                                      "children": [
                                        {
                                          "value": "isinstance",
                                          "children": []
                                        },
                                        {
                                          "value": "(query_vector, list)",
                                          "children": [
                                            {
                                              "value": "query_vector",
                                              "children": []
                                            },
                                            {
                                              "value": "list",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "len(query_vector) > 0",
                                      "children": [
                                        {
                                          "value": "len(query_vector)",
                                          "children": [
                                            {
                                              "value": "len",
                                              "children": []
                                            },
                                            {
                                              "value": "(query_vector)",
                                              "children": [
                                                {
                                                  "value": "query_vector",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "0",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "if isinstance(query_vector[0], list):\n                    query_vector = query_vector[0]",
                                  "children": [
                                    {
                                      "value": "if isinstance(query_vector[0], list):\n                    query_vector = query_vector[0]",
                                      "children": [
                                        {
                                          "value": "isinstance(query_vector[0], list)",
                                          "children": [
                                            {
                                              "value": "isinstance",
                                              "children": []
                                            },
                                            {
                                              "value": "(query_vector[0], list)",
                                              "children": [
                                                {
                                                  "value": "query_vector[0]",
                                                  "children": [
                                                    {
                                                      "value": "query_vector",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "0",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "list",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "query_vector = query_vector[0]",
                                          "children": [
                                            {
                                              "value": "query_vector = query_vector[0]",
                                              "children": [
                                                {
                                                  "value": "query_vector = query_vector[0]",
                                                  "children": [
                                                    {
                                                      "value": "query_vector",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "query_vector[0]",
                                                      "children": [
                                                        {
                                                          "value": "query_vector",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "0",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "results = idx.query(\n                namespace=input_data.namespace,\n                vector=query_vector,\n                top_k=input_data.top_k,\n                include_values=input_data.include_values,\n                include_metadata=input_data.include_metadata,\n            ).to_dict()",
                              "children": [
                                {
                                  "value": "results = idx.query(\n                namespace=input_data.namespace,\n                vector=query_vector,\n                top_k=input_data.top_k,\n                include_values=input_data.include_values,\n                include_metadata=input_data.include_metadata,\n            ).to_dict()",
                                  "children": [
                                    {
                                      "value": "results",
                                      "children": []
                                    },
                                    {
                                      "value": "idx.query(\n                namespace=input_data.namespace,\n                vector=query_vector,\n                top_k=input_data.top_k,\n                include_values=input_data.include_values,\n                include_metadata=input_data.include_metadata,\n            ).to_dict()",
                                      "children": [
                                        {
                                          "value": "idx.query(\n                namespace=input_data.namespace,\n                vector=query_vector,\n                top_k=input_data.top_k,\n                include_values=input_data.include_values,\n                include_metadata=input_data.include_metadata,\n            ).to_dict",
                                          "children": [
                                            {
                                              "value": "idx.query(\n                namespace=input_data.namespace,\n                vector=query_vector,\n                top_k=input_data.top_k,\n                include_values=input_data.include_values,\n                include_metadata=input_data.include_metadata,\n            )",
                                              "children": [
                                                {
                                                  "value": "idx.query",
                                                  "children": [
                                                    {
                                                      "value": "idx",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "query",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(\n                namespace=input_data.namespace,\n                vector=query_vector,\n                top_k=input_data.top_k,\n                include_values=input_data.include_values,\n                include_metadata=input_data.include_metadata,\n            )",
                                                  "children": [
                                                    {
                                                      "value": "namespace=input_data.namespace",
                                                      "children": [
                                                        {
                                                          "value": "namespace",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "input_data.namespace",
                                                          "children": [
                                                            {
                                                              "value": "input_data",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "namespace",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "vector=query_vector",
                                                      "children": [
                                                        {
                                                          "value": "vector",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "query_vector",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "top_k=input_data.top_k",
                                                      "children": [
                                                        {
                                                          "value": "top_k",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "input_data.top_k",
                                                          "children": [
                                                            {
                                                              "value": "input_data",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "top_k",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "include_values=input_data.include_values",
                                                      "children": [
                                                        {
                                                          "value": "include_values",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "input_data.include_values",
                                                          "children": [
                                                            {
                                                              "value": "input_data",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "include_values",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "include_metadata=input_data.include_metadata",
                                                      "children": [
                                                        {
                                                          "value": "include_metadata",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "input_data.include_metadata",
                                                          "children": [
                                                            {
                                                              "value": "input_data",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "include_metadata",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "to_dict",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "()",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "# type: ignore",
                              "children": []
                            },
                            {
                              "value": "combined_text = \"\"",
                              "children": [
                                {
                                  "value": "combined_text = \"\"",
                                  "children": [
                                    {
                                      "value": "combined_text",
                                      "children": []
                                    },
                                    {
                                      "value": "\"\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "if results[\"matches\"]:\n                texts = [\n                    match[\"metadata\"][\"text\"]\n                    for match in results[\"matches\"]\n                    if match.get(\"metadata\", {}).get(\"text\")\n                ]\n                combined_text = \"\\n\\n\".join(texts)",
                              "children": [
                                {
                                  "value": "results[\"matches\"]",
                                  "children": [
                                    {
                                      "value": "results",
                                      "children": []
                                    },
                                    {
                                      "value": "\"matches\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "matches",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "texts = [\n                    match[\"metadata\"][\"text\"]\n                    for match in results[\"matches\"]\n                    if match.get(\"metadata\", {}).get(\"text\")\n                ]\n                combined_text = \"\\n\\n\".join(texts)",
                                  "children": [
                                    {
                                      "value": "texts = [\n                    match[\"metadata\"][\"text\"]\n                    for match in results[\"matches\"]\n                    if match.get(\"metadata\", {}).get(\"text\")\n                ]",
                                      "children": [
                                        {
                                          "value": "texts = [\n                    match[\"metadata\"][\"text\"]\n                    for match in results[\"matches\"]\n                    if match.get(\"metadata\", {}).get(\"text\")\n                ]",
                                          "children": [
                                            {
                                              "value": "texts",
                                              "children": []
                                            },
                                            {
                                              "value": "[\n                    match[\"metadata\"][\"text\"]\n                    for match in results[\"matches\"]\n                    if match.get(\"metadata\", {}).get(\"text\")\n                ]",
                                              "children": [
                                                {
                                                  "value": "match[\"metadata\"][\"text\"]",
                                                  "children": [
                                                    {
                                                      "value": "match[\"metadata\"]",
                                                      "children": [
                                                        {
                                                          "value": "match",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"metadata\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "metadata",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"text\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "text",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "for match in results[\"matches\"]",
                                                  "children": [
                                                    {
                                                      "value": "match",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "results[\"matches\"]",
                                                      "children": [
                                                        {
                                                          "value": "results",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"matches\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "matches",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "if match.get(\"metadata\", {}).get(\"text\")",
                                                  "children": [
                                                    {
                                                      "value": "match.get(\"metadata\", {}).get(\"text\")",
                                                      "children": [
                                                        {
                                                          "value": "match.get(\"metadata\", {}).get",
                                                          "children": [
                                                            {
                                                              "value": "match.get(\"metadata\", {})",
                                                              "children": [
                                                                {
                                                                  "value": "match.get",
                                                                  "children": [
                                                                    {
                                                                      "value": "match",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "get",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "(\"metadata\", {})",
                                                                  "children": [
                                                                    {
                                                                      "value": "\"metadata\"",
                                                                      "children": [
                                                                        {
                                                                          "value": "\"",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "metadata",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "\"",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "{}",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "get",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "(\"text\")",
                                                          "children": [
                                                            {
                                                              "value": "\"text\"",
                                                              "children": [
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "text",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "combined_text = \"\\n\\n\".join(texts)",
                                      "children": [
                                        {
                                          "value": "combined_text = \"\\n\\n\".join(texts)",
                                          "children": [
                                            {
                                              "value": "combined_text",
                                              "children": []
                                            },
                                            {
                                              "value": "\"\\n\\n\".join(texts)",
                                              "children": [
                                                {
                                                  "value": "\"\\n\\n\".join",
                                                  "children": [
                                                    {
                                                      "value": "\"\\n\\n\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\\n\\n",
                                                          "children": [
                                                            {
                                                              "value": "\\n",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\\n",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "join",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(texts)",
                                                  "children": [
                                                    {
                                                      "value": "texts",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "# Return both the raw matches and combined text",
                              "children": []
                            },
                            {
                              "value": "yield \"results\", {\n                \"matches\": results[\"matches\"],\n                \"combined_text\": combined_text,\n            }",
                              "children": [
                                {
                                  "value": "yield \"results\", {\n                \"matches\": results[\"matches\"],\n                \"combined_text\": combined_text,\n            }",
                                  "children": [
                                    {
                                      "value": "\"results\", {\n                \"matches\": results[\"matches\"],\n                \"combined_text\": combined_text,\n            }",
                                      "children": [
                                        {
                                          "value": "\"results\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "results",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "{\n                \"matches\": results[\"matches\"],\n                \"combined_text\": combined_text,\n            }",
                                          "children": [
                                            {
                                              "value": "\"matches\": results[\"matches\"]",
                                              "children": [
                                                {
                                                  "value": "\"matches\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "matches",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "results[\"matches\"]",
                                                  "children": [
                                                    {
                                                      "value": "results",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"matches\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "matches",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"combined_text\": combined_text",
                                              "children": [
                                                {
                                                  "value": "\"combined_text\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "combined_text",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "combined_text",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "yield \"combined_results\", combined_text",
                              "children": [
                                {
                                  "value": "yield \"combined_results\", combined_text",
                                  "children": [
                                    {
                                      "value": "\"combined_results\", combined_text",
                                      "children": [
                                        {
                                          "value": "\"combined_results\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "combined_results",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "combined_text",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "except Exception as e:\n            error_msg = f\"Error querying Pinecone: {str(e)}\"\n            raise RuntimeError(error_msg) from e",
                          "children": [
                            {
                              "value": "Exception as e",
                              "children": [
                                {
                                  "value": "Exception",
                                  "children": []
                                },
                                {
                                  "value": "e",
                                  "children": [
                                    {
                                      "value": "e",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "error_msg = f\"Error querying Pinecone: {str(e)}\"\n            raise RuntimeError(error_msg) from e",
                              "children": [
                                {
                                  "value": "error_msg = f\"Error querying Pinecone: {str(e)}\"",
                                  "children": [
                                    {
                                      "value": "error_msg = f\"Error querying Pinecone: {str(e)}\"",
                                      "children": [
                                        {
                                          "value": "error_msg",
                                          "children": []
                                        },
                                        {
                                          "value": "f\"Error querying Pinecone: {str(e)}\"",
                                          "children": [
                                            {
                                              "value": "f\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Error querying Pinecone:",
                                              "children": []
                                            },
                                            {
                                              "value": "{str(e)}",
                                              "children": [
                                                {
                                                  "value": "str(e)",
                                                  "children": [
                                                    {
                                                      "value": "str",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "(e)",
                                                      "children": [
                                                        {
                                                          "value": "e",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "raise RuntimeError(error_msg) from e",
                                  "children": [
                                    {
                                      "value": "RuntimeError(error_msg)",
                                      "children": [
                                        {
                                          "value": "RuntimeError",
                                          "children": []
                                        },
                                        {
                                          "value": "(error_msg)",
                                          "children": [
                                            {
                                              "value": "error_msg",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "e",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class PineconeInsertBlock(Block):\n    class Input(BlockSchema):\n        credentials: PineconeCredentialsInput = PineconeCredentialsField()\n        index: str = SchemaField(description=\"Initialized Pinecone index\")\n        chunks: list = SchemaField(description=\"List of text chunks to ingest\")\n        embeddings: list = SchemaField(\n            description=\"List of embeddings corresponding to the chunks\"\n        )\n        namespace: str = SchemaField(\n            description=\"Namespace to use in Pinecone\", default=\"\"\n        )\n        metadata: dict = SchemaField(\n            description=\"Additional metadata to store with each vector\", default={}\n        )\n\n    class Output(BlockSchema):\n        upsert_response: str = SchemaField(\n            description=\"Response from Pinecone upsert operation\"\n        )\n\n    def __init__(self):\n        super().__init__(\n            id=\"477f2168-cd91-475a-8146-9499a5982434\",\n            description=\"Upload data to a Pinecone index\",\n            categories={BlockCategory.LOGIC},\n            input_schema=PineconeInsertBlock.Input,\n            output_schema=PineconeInsertBlock.Output,\n        )\n\n    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: APIKeyCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        try:\n            # Create a new client instance\n            pc = Pinecone(api_key=credentials.api_key.get_secret_value())\n\n            # Get the index\n            idx = pc.Index(input_data.index)\n\n            vectors = []\n            for chunk, embedding in zip(input_data.chunks, input_data.embeddings):\n                vector_metadata = input_data.metadata.copy()\n                vector_metadata[\"text\"] = chunk\n                vectors.append(\n                    {\n                        \"id\": str(uuid.uuid4()),\n                        \"values\": embedding,\n                        \"metadata\": vector_metadata,\n                    }\n                )\n            idx.upsert(vectors=vectors, namespace=input_data.namespace)\n\n            yield \"upsert_response\", \"successfully upserted\"\n\n        except Exception as e:\n            error_msg = f\"Error uploading to Pinecone: {str(e)}\"\n            raise RuntimeError(error_msg) from e",
      "children": [
        {
          "value": "PineconeInsertBlock",
          "children": []
        },
        {
          "value": "(Block)",
          "children": [
            {
              "value": "Block",
              "children": []
            }
          ]
        },
        {
          "value": "class Input(BlockSchema):\n        credentials: PineconeCredentialsInput = PineconeCredentialsField()\n        index: str = SchemaField(description=\"Initialized Pinecone index\")\n        chunks: list = SchemaField(description=\"List of text chunks to ingest\")\n        embeddings: list = SchemaField(\n            description=\"List of embeddings corresponding to the chunks\"\n        )\n        namespace: str = SchemaField(\n            description=\"Namespace to use in Pinecone\", default=\"\"\n        )\n        metadata: dict = SchemaField(\n            description=\"Additional metadata to store with each vector\", default={}\n        )\n\n    class Output(BlockSchema):\n        upsert_response: str = SchemaField(\n            description=\"Response from Pinecone upsert operation\"\n        )\n\n    def __init__(self):\n        super().__init__(\n            id=\"477f2168-cd91-475a-8146-9499a5982434\",\n            description=\"Upload data to a Pinecone index\",\n            categories={BlockCategory.LOGIC},\n            input_schema=PineconeInsertBlock.Input,\n            output_schema=PineconeInsertBlock.Output,\n        )\n\n    def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: APIKeyCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        try:\n            # Create a new client instance\n            pc = Pinecone(api_key=credentials.api_key.get_secret_value())\n\n            # Get the index\n            idx = pc.Index(input_data.index)\n\n            vectors = []\n            for chunk, embedding in zip(input_data.chunks, input_data.embeddings):\n                vector_metadata = input_data.metadata.copy()\n                vector_metadata[\"text\"] = chunk\n                vectors.append(\n                    {\n                        \"id\": str(uuid.uuid4()),\n                        \"values\": embedding,\n                        \"metadata\": vector_metadata,\n                    }\n                )\n            idx.upsert(vectors=vectors, namespace=input_data.namespace)\n\n            yield \"upsert_response\", \"successfully upserted\"\n\n        except Exception as e:\n            error_msg = f\"Error uploading to Pinecone: {str(e)}\"\n            raise RuntimeError(error_msg) from e",
          "children": [
            {
              "value": "class Input(BlockSchema):\n        credentials: PineconeCredentialsInput = PineconeCredentialsField()\n        index: str = SchemaField(description=\"Initialized Pinecone index\")\n        chunks: list = SchemaField(description=\"List of text chunks to ingest\")\n        embeddings: list = SchemaField(\n            description=\"List of embeddings corresponding to the chunks\"\n        )\n        namespace: str = SchemaField(\n            description=\"Namespace to use in Pinecone\", default=\"\"\n        )\n        metadata: dict = SchemaField(\n            description=\"Additional metadata to store with each vector\", default={}\n        )",
              "children": [
                {
                  "value": "Input",
                  "children": []
                },
                {
                  "value": "(BlockSchema)",
                  "children": [
                    {
                      "value": "BlockSchema",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "credentials: PineconeCredentialsInput = PineconeCredentialsField()\n        index: str = SchemaField(description=\"Initialized Pinecone index\")\n        chunks: list = SchemaField(description=\"List of text chunks to ingest\")\n        embeddings: list = SchemaField(\n            description=\"List of embeddings corresponding to the chunks\"\n        )\n        namespace: str = SchemaField(\n            description=\"Namespace to use in Pinecone\", default=\"\"\n        )\n        metadata: dict = SchemaField(\n            description=\"Additional metadata to store with each vector\", default={}\n        )",
                  "children": [
                    {
                      "value": "credentials: PineconeCredentialsInput = PineconeCredentialsField()",
                      "children": [
                        {
                          "value": "credentials: PineconeCredentialsInput = PineconeCredentialsField()",
                          "children": [
                            {
                              "value": "credentials",
                              "children": []
                            },
                            {
                              "value": "PineconeCredentialsInput",
                              "children": [
                                {
                                  "value": "PineconeCredentialsInput",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "PineconeCredentialsField()",
                              "children": [
                                {
                                  "value": "PineconeCredentialsField",
                                  "children": []
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "index: str = SchemaField(description=\"Initialized Pinecone index\")",
                      "children": [
                        {
                          "value": "index: str = SchemaField(description=\"Initialized Pinecone index\")",
                          "children": [
                            {
                              "value": "index",
                              "children": []
                            },
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(description=\"Initialized Pinecone index\")",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(description=\"Initialized Pinecone index\")",
                                  "children": [
                                    {
                                      "value": "description=\"Initialized Pinecone index\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Initialized Pinecone index\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Initialized Pinecone index",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "chunks: list = SchemaField(description=\"List of text chunks to ingest\")",
                      "children": [
                        {
                          "value": "chunks: list = SchemaField(description=\"List of text chunks to ingest\")",
                          "children": [
                            {
                              "value": "chunks",
                              "children": []
                            },
                            {
                              "value": "list",
                              "children": [
                                {
                                  "value": "list",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(description=\"List of text chunks to ingest\")",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(description=\"List of text chunks to ingest\")",
                                  "children": [
                                    {
                                      "value": "description=\"List of text chunks to ingest\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"List of text chunks to ingest\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "List of text chunks to ingest",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "embeddings: list = SchemaField(\n            description=\"List of embeddings corresponding to the chunks\"\n        )",
                      "children": [
                        {
                          "value": "embeddings: list = SchemaField(\n            description=\"List of embeddings corresponding to the chunks\"\n        )",
                          "children": [
                            {
                              "value": "embeddings",
                              "children": []
                            },
                            {
                              "value": "list",
                              "children": [
                                {
                                  "value": "list",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            description=\"List of embeddings corresponding to the chunks\"\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            description=\"List of embeddings corresponding to the chunks\"\n        )",
                                  "children": [
                                    {
                                      "value": "description=\"List of embeddings corresponding to the chunks\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"List of embeddings corresponding to the chunks\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "List of embeddings corresponding to the chunks",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "namespace: str = SchemaField(\n            description=\"Namespace to use in Pinecone\", default=\"\"\n        )",
                      "children": [
                        {
                          "value": "namespace: str = SchemaField(\n            description=\"Namespace to use in Pinecone\", default=\"\"\n        )",
                          "children": [
                            {
                              "value": "namespace",
                              "children": []
                            },
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            description=\"Namespace to use in Pinecone\", default=\"\"\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            description=\"Namespace to use in Pinecone\", default=\"\"\n        )",
                                  "children": [
                                    {
                                      "value": "description=\"Namespace to use in Pinecone\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Namespace to use in Pinecone\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Namespace to use in Pinecone",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "default=\"\"",
                                      "children": [
                                        {
                                          "value": "default",
                                          "children": []
                                        },
                                        {
                                          "value": "\"\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "metadata: dict = SchemaField(\n            description=\"Additional metadata to store with each vector\", default={}\n        )",
                      "children": [
                        {
                          "value": "metadata: dict = SchemaField(\n            description=\"Additional metadata to store with each vector\", default={}\n        )",
                          "children": [
                            {
                              "value": "metadata",
                              "children": []
                            },
                            {
                              "value": "dict",
                              "children": [
                                {
                                  "value": "dict",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            description=\"Additional metadata to store with each vector\", default={}\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            description=\"Additional metadata to store with each vector\", default={}\n        )",
                                  "children": [
                                    {
                                      "value": "description=\"Additional metadata to store with each vector\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Additional metadata to store with each vector\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Additional metadata to store with each vector",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "default={}",
                                      "children": [
                                        {
                                          "value": "default",
                                          "children": []
                                        },
                                        {
                                          "value": "{}",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "class Output(BlockSchema):\n        upsert_response: str = SchemaField(\n            description=\"Response from Pinecone upsert operation\"\n        )",
              "children": [
                {
                  "value": "Output",
                  "children": []
                },
                {
                  "value": "(BlockSchema)",
                  "children": [
                    {
                      "value": "BlockSchema",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "upsert_response: str = SchemaField(\n            description=\"Response from Pinecone upsert operation\"\n        )",
                  "children": [
                    {
                      "value": "upsert_response: str = SchemaField(\n            description=\"Response from Pinecone upsert operation\"\n        )",
                      "children": [
                        {
                          "value": "upsert_response: str = SchemaField(\n            description=\"Response from Pinecone upsert operation\"\n        )",
                          "children": [
                            {
                              "value": "upsert_response",
                              "children": []
                            },
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            description=\"Response from Pinecone upsert operation\"\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            description=\"Response from Pinecone upsert operation\"\n        )",
                                  "children": [
                                    {
                                      "value": "description=\"Response from Pinecone upsert operation\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Response from Pinecone upsert operation\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Response from Pinecone upsert operation",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def __init__(self):\n        super().__init__(\n            id=\"477f2168-cd91-475a-8146-9499a5982434\",\n            description=\"Upload data to a Pinecone index\",\n            categories={BlockCategory.LOGIC},\n            input_schema=PineconeInsertBlock.Input,\n            output_schema=PineconeInsertBlock.Output,\n        )",
              "children": [
                {
                  "value": "__init__",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "super().__init__(\n            id=\"477f2168-cd91-475a-8146-9499a5982434\",\n            description=\"Upload data to a Pinecone index\",\n            categories={BlockCategory.LOGIC},\n            input_schema=PineconeInsertBlock.Input,\n            output_schema=PineconeInsertBlock.Output,\n        )",
                  "children": [
                    {
                      "value": "super().__init__(\n            id=\"477f2168-cd91-475a-8146-9499a5982434\",\n            description=\"Upload data to a Pinecone index\",\n            categories={BlockCategory.LOGIC},\n            input_schema=PineconeInsertBlock.Input,\n            output_schema=PineconeInsertBlock.Output,\n        )",
                      "children": [
                        {
                          "value": "super().__init__(\n            id=\"477f2168-cd91-475a-8146-9499a5982434\",\n            description=\"Upload data to a Pinecone index\",\n            categories={BlockCategory.LOGIC},\n            input_schema=PineconeInsertBlock.Input,\n            output_schema=PineconeInsertBlock.Output,\n        )",
                          "children": [
                            {
                              "value": "super().__init__",
                              "children": [
                                {
                                  "value": "super()",
                                  "children": [
                                    {
                                      "value": "super",
                                      "children": []
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "__init__",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(\n            id=\"477f2168-cd91-475a-8146-9499a5982434\",\n            description=\"Upload data to a Pinecone index\",\n            categories={BlockCategory.LOGIC},\n            input_schema=PineconeInsertBlock.Input,\n            output_schema=PineconeInsertBlock.Output,\n        )",
                              "children": [
                                {
                                  "value": "id=\"477f2168-cd91-475a-8146-9499a5982434\"",
                                  "children": [
                                    {
                                      "value": "id",
                                      "children": []
                                    },
                                    {
                                      "value": "\"477f2168-cd91-475a-8146-9499a5982434\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "477f2168-cd91-475a-8146-9499a5982434",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "description=\"Upload data to a Pinecone index\"",
                                  "children": [
                                    {
                                      "value": "description",
                                      "children": []
                                    },
                                    {
                                      "value": "\"Upload data to a Pinecone index\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Upload data to a Pinecone index",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "categories={BlockCategory.LOGIC}",
                                  "children": [
                                    {
                                      "value": "categories",
                                      "children": []
                                    },
                                    {
                                      "value": "{BlockCategory.LOGIC}",
                                      "children": [
                                        {
                                          "value": "BlockCategory.LOGIC",
                                          "children": [
                                            {
                                              "value": "BlockCategory",
                                              "children": []
                                            },
                                            {
                                              "value": "LOGIC",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "input_schema=PineconeInsertBlock.Input",
                                  "children": [
                                    {
                                      "value": "input_schema",
                                      "children": []
                                    },
                                    {
                                      "value": "PineconeInsertBlock.Input",
                                      "children": [
                                        {
                                          "value": "PineconeInsertBlock",
                                          "children": []
                                        },
                                        {
                                          "value": "Input",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "output_schema=PineconeInsertBlock.Output",
                                  "children": [
                                    {
                                      "value": "output_schema",
                                      "children": []
                                    },
                                    {
                                      "value": "PineconeInsertBlock.Output",
                                      "children": [
                                        {
                                          "value": "PineconeInsertBlock",
                                          "children": []
                                        },
                                        {
                                          "value": "Output",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def run(\n        self,\n        input_data: Input,\n        *,\n        credentials: APIKeyCredentials,\n        **kwargs,\n    ) -> BlockOutput:\n        try:\n            # Create a new client instance\n            pc = Pinecone(api_key=credentials.api_key.get_secret_value())\n\n            # Get the index\n            idx = pc.Index(input_data.index)\n\n            vectors = []\n            for chunk, embedding in zip(input_data.chunks, input_data.embeddings):\n                vector_metadata = input_data.metadata.copy()\n                vector_metadata[\"text\"] = chunk\n                vectors.append(\n                    {\n                        \"id\": str(uuid.uuid4()),\n                        \"values\": embedding,\n                        \"metadata\": vector_metadata,\n                    }\n                )\n            idx.upsert(vectors=vectors, namespace=input_data.namespace)\n\n            yield \"upsert_response\", \"successfully upserted\"\n\n        except Exception as e:\n            error_msg = f\"Error uploading to Pinecone: {str(e)}\"\n            raise RuntimeError(error_msg) from e",
              "children": [
                {
                  "value": "run",
                  "children": []
                },
                {
                  "value": "(\n        self,\n        input_data: Input,\n        *,\n        credentials: APIKeyCredentials,\n        **kwargs,\n    )",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "input_data: Input",
                      "children": [
                        {
                          "value": "input_data",
                          "children": []
                        },
                        {
                          "value": "Input",
                          "children": [
                            {
                              "value": "Input",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "*",
                      "children": []
                    },
                    {
                      "value": "credentials: APIKeyCredentials",
                      "children": [
                        {
                          "value": "credentials",
                          "children": []
                        },
                        {
                          "value": "APIKeyCredentials",
                          "children": [
                            {
                              "value": "APIKeyCredentials",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "**kwargs",
                      "children": [
                        {
                          "value": "kwargs",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "BlockOutput",
                  "children": [
                    {
                      "value": "BlockOutput",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "try:\n            # Create a new client instance\n            pc = Pinecone(api_key=credentials.api_key.get_secret_value())\n\n            # Get the index\n            idx = pc.Index(input_data.index)\n\n            vectors = []\n            for chunk, embedding in zip(input_data.chunks, input_data.embeddings):\n                vector_metadata = input_data.metadata.copy()\n                vector_metadata[\"text\"] = chunk\n                vectors.append(\n                    {\n                        \"id\": str(uuid.uuid4()),\n                        \"values\": embedding,\n                        \"metadata\": vector_metadata,\n                    }\n                )\n            idx.upsert(vectors=vectors, namespace=input_data.namespace)\n\n            yield \"upsert_response\", \"successfully upserted\"\n\n        except Exception as e:\n            error_msg = f\"Error uploading to Pinecone: {str(e)}\"\n            raise RuntimeError(error_msg) from e",
                  "children": [
                    {
                      "value": "try:\n            # Create a new client instance\n            pc = Pinecone(api_key=credentials.api_key.get_secret_value())\n\n            # Get the index\n            idx = pc.Index(input_data.index)\n\n            vectors = []\n            for chunk, embedding in zip(input_data.chunks, input_data.embeddings):\n                vector_metadata = input_data.metadata.copy()\n                vector_metadata[\"text\"] = chunk\n                vectors.append(\n                    {\n                        \"id\": str(uuid.uuid4()),\n                        \"values\": embedding,\n                        \"metadata\": vector_metadata,\n                    }\n                )\n            idx.upsert(vectors=vectors, namespace=input_data.namespace)\n\n            yield \"upsert_response\", \"successfully upserted\"\n\n        except Exception as e:\n            error_msg = f\"Error uploading to Pinecone: {str(e)}\"\n            raise RuntimeError(error_msg) from e",
                      "children": [
                        {
                          "value": "# Create a new client instance",
                          "children": []
                        },
                        {
                          "value": "pc = Pinecone(api_key=credentials.api_key.get_secret_value())\n\n            # Get the index\n            idx = pc.Index(input_data.index)\n\n            vectors = []\n            for chunk, embedding in zip(input_data.chunks, input_data.embeddings):\n                vector_metadata = input_data.metadata.copy()\n                vector_metadata[\"text\"] = chunk\n                vectors.append(\n                    {\n                        \"id\": str(uuid.uuid4()),\n                        \"values\": embedding,\n                        \"metadata\": vector_metadata,\n                    }\n                )\n            idx.upsert(vectors=vectors, namespace=input_data.namespace)\n\n            yield \"upsert_response\", \"successfully upserted\"",
                          "children": [
                            {
                              "value": "pc = Pinecone(api_key=credentials.api_key.get_secret_value())",
                              "children": [
                                {
                                  "value": "pc = Pinecone(api_key=credentials.api_key.get_secret_value())",
                                  "children": [
                                    {
                                      "value": "pc",
                                      "children": []
                                    },
                                    {
                                      "value": "Pinecone(api_key=credentials.api_key.get_secret_value())",
                                      "children": [
                                        {
                                          "value": "Pinecone",
                                          "children": []
                                        },
                                        {
                                          "value": "(api_key=credentials.api_key.get_secret_value())",
                                          "children": [
                                            {
                                              "value": "api_key=credentials.api_key.get_secret_value()",
                                              "children": [
                                                {
                                                  "value": "api_key",
                                                  "children": []
                                                },
                                                {
                                                  "value": "credentials.api_key.get_secret_value()",
                                                  "children": [
                                                    {
                                                      "value": "credentials.api_key.get_secret_value",
                                                      "children": [
                                                        {
                                                          "value": "credentials.api_key",
                                                          "children": [
                                                            {
                                                              "value": "credentials",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "api_key",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "get_secret_value",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "()",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "# Get the index",
                              "children": []
                            },
                            {
                              "value": "idx = pc.Index(input_data.index)",
                              "children": [
                                {
                                  "value": "idx = pc.Index(input_data.index)",
                                  "children": [
                                    {
                                      "value": "idx",
                                      "children": []
                                    },
                                    {
                                      "value": "pc.Index(input_data.index)",
                                      "children": [
                                        {
                                          "value": "pc.Index",
                                          "children": [
                                            {
                                              "value": "pc",
                                              "children": []
                                            },
                                            {
                                              "value": "Index",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(input_data.index)",
                                          "children": [
                                            {
                                              "value": "input_data.index",
                                              "children": [
                                                {
                                                  "value": "input_data",
                                                  "children": []
                                                },
                                                {
                                                  "value": "index",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "vectors = []",
                              "children": [
                                {
                                  "value": "vectors = []",
                                  "children": [
                                    {
                                      "value": "vectors",
                                      "children": []
                                    },
                                    {
                                      "value": "[]",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "for chunk, embedding in zip(input_data.chunks, input_data.embeddings):\n                vector_metadata = input_data.metadata.copy()\n                vector_metadata[\"text\"] = chunk\n                vectors.append(\n                    {\n                        \"id\": str(uuid.uuid4()),\n                        \"values\": embedding,\n                        \"metadata\": vector_metadata,\n                    }\n                )",
                              "children": [
                                {
                                  "value": "chunk, embedding",
                                  "children": [
                                    {
                                      "value": "chunk",
                                      "children": []
                                    },
                                    {
                                      "value": "embedding",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "zip(input_data.chunks, input_data.embeddings)",
                                  "children": [
                                    {
                                      "value": "zip",
                                      "children": []
                                    },
                                    {
                                      "value": "(input_data.chunks, input_data.embeddings)",
                                      "children": [
                                        {
                                          "value": "input_data.chunks",
                                          "children": [
                                            {
                                              "value": "input_data",
                                              "children": []
                                            },
                                            {
                                              "value": "chunks",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "input_data.embeddings",
                                          "children": [
                                            {
                                              "value": "input_data",
                                              "children": []
                                            },
                                            {
                                              "value": "embeddings",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "vector_metadata = input_data.metadata.copy()\n                vector_metadata[\"text\"] = chunk\n                vectors.append(\n                    {\n                        \"id\": str(uuid.uuid4()),\n                        \"values\": embedding,\n                        \"metadata\": vector_metadata,\n                    }\n                )",
                                  "children": [
                                    {
                                      "value": "vector_metadata = input_data.metadata.copy()",
                                      "children": [
                                        {
                                          "value": "vector_metadata = input_data.metadata.copy()",
                                          "children": [
                                            {
                                              "value": "vector_metadata",
                                              "children": []
                                            },
                                            {
                                              "value": "input_data.metadata.copy()",
                                              "children": [
                                                {
                                                  "value": "input_data.metadata.copy",
                                                  "children": [
                                                    {
                                                      "value": "input_data.metadata",
                                                      "children": [
                                                        {
                                                          "value": "input_data",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "metadata",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "copy",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "()",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "vector_metadata[\"text\"] = chunk",
                                      "children": [
                                        {
                                          "value": "vector_metadata[\"text\"] = chunk",
                                          "children": [
                                            {
                                              "value": "vector_metadata[\"text\"]",
                                              "children": [
                                                {
                                                  "value": "vector_metadata",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"text\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "text",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "chunk",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "vectors.append(\n                    {\n                        \"id\": str(uuid.uuid4()),\n                        \"values\": embedding,\n                        \"metadata\": vector_metadata,\n                    }\n                )",
                                      "children": [
                                        {
                                          "value": "vectors.append(\n                    {\n                        \"id\": str(uuid.uuid4()),\n                        \"values\": embedding,\n                        \"metadata\": vector_metadata,\n                    }\n                )",
                                          "children": [
                                            {
                                              "value": "vectors.append",
                                              "children": [
                                                {
                                                  "value": "vectors",
                                                  "children": []
                                                },
                                                {
                                                  "value": "append",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(\n                    {\n                        \"id\": str(uuid.uuid4()),\n                        \"values\": embedding,\n                        \"metadata\": vector_metadata,\n                    }\n                )",
                                              "children": [
                                                {
                                                  "value": "{\n                        \"id\": str(uuid.uuid4()),\n                        \"values\": embedding,\n                        \"metadata\": vector_metadata,\n                    }",
                                                  "children": [
                                                    {
                                                      "value": "\"id\": str(uuid.uuid4())",
                                                      "children": [
                                                        {
                                                          "value": "\"id\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "id",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "str(uuid.uuid4())",
                                                          "children": [
                                                            {
                                                              "value": "str",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "(uuid.uuid4())",
                                                              "children": [
                                                                {
                                                                  "value": "uuid.uuid4()",
                                                                  "children": [
                                                                    {
                                                                      "value": "uuid.uuid4",
                                                                      "children": [
                                                                        {
                                                                          "value": "uuid",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "uuid4",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "()",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"values\": embedding",
                                                      "children": [
                                                        {
                                                          "value": "\"values\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "values",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "embedding",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"metadata\": vector_metadata",
                                                      "children": [
                                                        {
                                                          "value": "\"metadata\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "metadata",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "vector_metadata",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "idx.upsert(vectors=vectors, namespace=input_data.namespace)",
                              "children": [
                                {
                                  "value": "idx.upsert(vectors=vectors, namespace=input_data.namespace)",
                                  "children": [
                                    {
                                      "value": "idx.upsert",
                                      "children": [
                                        {
                                          "value": "idx",
                                          "children": []
                                        },
                                        {
                                          "value": "upsert",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(vectors=vectors, namespace=input_data.namespace)",
                                      "children": [
                                        {
                                          "value": "vectors=vectors",
                                          "children": [
                                            {
                                              "value": "vectors",
                                              "children": []
                                            },
                                            {
                                              "value": "vectors",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "namespace=input_data.namespace",
                                          "children": [
                                            {
                                              "value": "namespace",
                                              "children": []
                                            },
                                            {
                                              "value": "input_data.namespace",
                                              "children": [
                                                {
                                                  "value": "input_data",
                                                  "children": []
                                                },
                                                {
                                                  "value": "namespace",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "yield \"upsert_response\", \"successfully upserted\"",
                              "children": [
                                {
                                  "value": "yield \"upsert_response\", \"successfully upserted\"",
                                  "children": [
                                    {
                                      "value": "\"upsert_response\", \"successfully upserted\"",
                                      "children": [
                                        {
                                          "value": "\"upsert_response\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "upsert_response",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"successfully upserted\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "successfully upserted",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "except Exception as e:\n            error_msg = f\"Error uploading to Pinecone: {str(e)}\"\n            raise RuntimeError(error_msg) from e",
                          "children": [
                            {
                              "value": "Exception as e",
                              "children": [
                                {
                                  "value": "Exception",
                                  "children": []
                                },
                                {
                                  "value": "e",
                                  "children": [
                                    {
                                      "value": "e",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "error_msg = f\"Error uploading to Pinecone: {str(e)}\"\n            raise RuntimeError(error_msg) from e",
                              "children": [
                                {
                                  "value": "error_msg = f\"Error uploading to Pinecone: {str(e)}\"",
                                  "children": [
                                    {
                                      "value": "error_msg = f\"Error uploading to Pinecone: {str(e)}\"",
                                      "children": [
                                        {
                                          "value": "error_msg",
                                          "children": []
                                        },
                                        {
                                          "value": "f\"Error uploading to Pinecone: {str(e)}\"",
                                          "children": [
                                            {
                                              "value": "f\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Error uploading to Pinecone:",
                                              "children": []
                                            },
                                            {
                                              "value": "{str(e)}",
                                              "children": [
                                                {
                                                  "value": "str(e)",
                                                  "children": [
                                                    {
                                                      "value": "str",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "(e)",
                                                      "children": [
                                                        {
                                                          "value": "e",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "raise RuntimeError(error_msg) from e",
                                  "children": [
                                    {
                                      "value": "RuntimeError(error_msg)",
                                      "children": [
                                        {
                                          "value": "RuntimeError",
                                          "children": []
                                        },
                                        {
                                          "value": "(error_msg)",
                                          "children": [
                                            {
                                              "value": "error_msg",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "e",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}