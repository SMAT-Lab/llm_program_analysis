{
  "value": "import atexit\nimport logging\nimport multiprocessing\nimport os\nimport signal\nimport sys\nimport threading\nfrom concurrent.futures import Future, ProcessPoolExecutor\nfrom contextlib import contextmanager\nfrom multiprocessing.pool import AsyncResult, Pool\nfrom typing import TYPE_CHECKING, Any, Generator, TypeVar, cast\n\nfrom pydantic import BaseModel\nfrom redis.lock import Lock as RedisLock\n\nif TYPE_CHECKING:\n    from backend.executor import DatabaseManager\n\nfrom autogpt_libs.utils.cache import thread_cached\n\nfrom backend.blocks.agent import AgentExecutorBlock\nfrom backend.data import redis\nfrom backend.data.block import Block, BlockData, BlockInput, BlockType, get_block\nfrom backend.data.execution import (\n    ExecutionQueue,\n    ExecutionResult,\n    ExecutionStatus,\n    GraphExecutionEntry,\n    NodeExecutionEntry,\n    merge_execution_input,\n    parse_execution_output,\n)\nfrom backend.data.graph import GraphModel, Link, Node\nfrom backend.data.model import CREDENTIALS_FIELD_NAME, CredentialsMetaInput\nfrom backend.integrations.creds_manager import IntegrationCredentialsManager\nfrom backend.util import json\nfrom backend.util.decorator import error_logged, time_measured\nfrom backend.util.logging import configure_logging\nfrom backend.util.process import set_service_name\nfrom backend.util.service import (\n    AppService,\n    close_service_client,\n    expose,\n    get_service_client,\n)\nfrom backend.util.settings import Settings\nfrom backend.util.type import convert\n\nlogger = logging.getLogger(__name__)\nsettings = Settings()\n\n\nclass LogMetadata:\n    def __init__(\n        self,\n        user_id: str,\n        graph_eid: str,\n        graph_id: str,\n        node_eid: str,\n        node_id: str,\n        block_name: str,\n    ):\n        self.metadata = {\n            \"component\": \"ExecutionManager\",\n            \"user_id\": user_id,\n            \"graph_eid\": graph_eid,\n            \"graph_id\": graph_id,\n            \"node_eid\": node_eid,\n            \"node_id\": node_id,\n            \"block_name\": block_name,\n        }\n        self.prefix = f\"[ExecutionManager|uid:{user_id}|gid:{graph_id}|nid:{node_id}]|geid:{graph_eid}|nid:{node_eid}|{block_name}]\"\n\n    def info(self, msg: str, **extra):\n        msg = self._wrap(msg, **extra)\n        logger.info(msg, extra={\"json_fields\": {**self.metadata, **extra}})\n\n    def warning(self, msg: str, **extra):\n        msg = self._wrap(msg, **extra)\n        logger.warning(msg, extra={\"json_fields\": {**self.metadata, **extra}})\n\n    def error(self, msg: str, **extra):\n        msg = self._wrap(msg, **extra)\n        logger.error(msg, extra={\"json_fields\": {**self.metadata, **extra}})\n\n    def debug(self, msg: str, **extra):\n        msg = self._wrap(msg, **extra)\n        logger.debug(msg, extra={\"json_fields\": {**self.metadata, **extra}})\n\n    def exception(self, msg: str, **extra):\n        msg = self._wrap(msg, **extra)\n        logger.exception(msg, extra={\"json_fields\": {**self.metadata, **extra}})\n\n    def _wrap(self, msg: str, **extra):\n        return f\"{self.prefix} {msg} {extra}\"\n\n\nT = TypeVar(\"T\")\nExecutionStream = Generator[NodeExecutionEntry, None, None]\n\n\ndef execute_node(\n    db_client: \"DatabaseManager\",\n    creds_manager: IntegrationCredentialsManager,\n    data: NodeExecutionEntry,\n    execution_stats: dict[str, Any] | None = None,\n) -> ExecutionStream:\n    \"\"\"\n    Execute a node in the graph. This will trigger a block execution on a node,\n    persist the execution result, and return the subsequent node to be executed.\n\n    Args:\n        db_client: The client to send execution updates to the server.\n        creds_manager: The manager to acquire and release credentials.\n        data: The execution data for executing the current node.\n        execution_stats: The execution statistics to be updated.\n\n    Returns:\n        The subsequent node to be enqueued, or None if there is no subsequent node.\n    \"\"\"\n    user_id = data.user_id\n    graph_exec_id = data.graph_exec_id\n    graph_id = data.graph_id\n    node_exec_id = data.node_exec_id\n    node_id = data.node_id\n\n    def update_execution(status: ExecutionStatus) -> ExecutionResult:\n        exec_update = db_client.update_execution_status(node_exec_id, status)\n        db_client.send_execution_update(exec_update)\n        return exec_update\n\n    node = db_client.get_node(node_id)\n\n    node_block = get_block(node.block_id)\n    if not node_block:\n        logger.error(f\"Block {node.block_id} not found.\")\n        return\n\n    log_metadata = LogMetadata(\n        user_id=user_id,\n        graph_eid=graph_exec_id,\n        graph_id=graph_id,\n        node_eid=node_exec_id,\n        node_id=node_id,\n        block_name=node_block.name,\n    )\n\n    # Sanity check: validate the execution input.\n    input_data, error = validate_exec(node, data.data, resolve_input=False)\n    if input_data is None:\n        log_metadata.error(f\"Skip execution, input validation error: {error}\")\n        db_client.upsert_execution_output(node_exec_id, \"error\", error)\n        update_execution(ExecutionStatus.FAILED)\n        return\n\n    # Re-shape the input data for agent block.\n    # AgentExecutorBlock specially separate the node input_data & its input_default.\n    if isinstance(node_block, AgentExecutorBlock):\n        input_data = {**node.input_default, \"data\": input_data}\n\n    # Execute the node\n    input_data_str = json.dumps(input_data)\n    input_size = len(input_data_str)\n    log_metadata.info(\"Executed node with input\", input=input_data_str)\n    update_execution(ExecutionStatus.RUNNING)\n\n    extra_exec_kwargs = {}\n    # Last-minute fetch credentials + acquire a system-wide read-write lock to prevent\n    # changes during execution. \u26a0\ufe0f This means a set of credentials can only be used by\n    # one (running) block at a time; simultaneous execution of blocks using same\n    # credentials is not supported.\n    creds_lock = None\n    if CREDENTIALS_FIELD_NAME in input_data:\n        credentials_meta = CredentialsMetaInput(**input_data[CREDENTIALS_FIELD_NAME])\n        credentials, creds_lock = creds_manager.acquire(user_id, credentials_meta.id)\n        extra_exec_kwargs[\"credentials\"] = credentials\n\n    output_size = 0\n    end_status = ExecutionStatus.COMPLETED\n    credit = db_client.get_or_refill_credit(user_id)\n    if credit < 0:\n        raise ValueError(f\"Insufficient credit: {credit}\")\n\n    try:\n        for output_name, output_data in node_block.execute(\n            input_data, **extra_exec_kwargs\n        ):\n            output_size += len(json.dumps(output_data))\n            log_metadata.info(\"Node produced output\", **{output_name: output_data})\n            db_client.upsert_execution_output(node_exec_id, output_name, output_data)\n\n            for execution in _enqueue_next_nodes(\n                db_client=db_client,\n                node=node,\n                output=(output_name, output_data),\n                user_id=user_id,\n                graph_exec_id=graph_exec_id,\n                graph_id=graph_id,\n                log_metadata=log_metadata,\n            ):\n                yield execution\n\n    except Exception as e:\n        end_status = ExecutionStatus.FAILED\n        error_msg = str(e)\n        log_metadata.exception(f\"Node execution failed with error {error_msg}\")\n        db_client.upsert_execution_output(node_exec_id, \"error\", error_msg)\n\n        for execution in _enqueue_next_nodes(\n            db_client=db_client,\n            node=node,\n            output=(\"error\", error_msg),\n            user_id=user_id,\n            graph_exec_id=graph_exec_id,\n            graph_id=graph_id,\n            log_metadata=log_metadata,\n        ):\n            yield execution\n\n        raise e\n    finally:\n        # Ensure credentials are released even if execution fails\n        if creds_lock:\n            try:\n                creds_lock.release()\n            except Exception as e:\n                log_metadata.error(f\"Failed to release credentials lock: {e}\")\n\n        # Update execution status and spend credits\n        res = update_execution(end_status)\n        if end_status == ExecutionStatus.COMPLETED:\n            s = input_size + output_size\n            t = (\n                (res.end_time - res.start_time).total_seconds()\n                if res.end_time and res.start_time\n                else 0\n            )\n            db_client.spend_credits(user_id, credit, node_block.id, input_data, s, t)\n\n        # Update execution stats\n        if execution_stats is not None:\n            execution_stats.update(node_block.execution_stats)\n            execution_stats[\"input_size\"] = input_size\n            execution_stats[\"output_size\"] = output_size\n\n\ndef _enqueue_next_nodes(\n    db_client: \"DatabaseManager\",\n    node: Node,\n    output: BlockData,\n    user_id: str,\n    graph_exec_id: str,\n    graph_id: str,\n    log_metadata: LogMetadata,\n) -> list[NodeExecutionEntry]:\n    def add_enqueued_execution(\n        node_exec_id: str, node_id: str, data: BlockInput\n    ) -> NodeExecutionEntry:\n        exec_update = db_client.update_execution_status(\n            node_exec_id, ExecutionStatus.QUEUED, data\n        )\n        db_client.send_execution_update(exec_update)\n        return NodeExecutionEntry(\n            user_id=user_id,\n            graph_exec_id=graph_exec_id,\n            graph_id=graph_id,\n            node_exec_id=node_exec_id,\n            node_id=node_id,\n            data=data,\n        )\n\n    def register_next_executions(node_link: Link) -> list[NodeExecutionEntry]:\n        enqueued_executions = []\n        next_output_name = node_link.source_name\n        next_input_name = node_link.sink_name\n        next_node_id = node_link.sink_id\n\n        next_data = parse_execution_output(output, next_output_name)\n        if next_data is None:\n            return enqueued_executions\n\n        next_node = db_client.get_node(next_node_id)\n\n        # Multiple node can register the same next node, we need this to be atomic\n        # To avoid same execution to be enqueued multiple times,\n        # Or the same input to be consumed multiple times.\n        with synchronized(f\"upsert_input-{next_node_id}-{graph_exec_id}\"):\n            # Add output data to the earliest incomplete execution, or create a new one.\n            next_node_exec_id, next_node_input = db_client.upsert_execution_input(\n                node_id=next_node_id,\n                graph_exec_id=graph_exec_id,\n                input_name=next_input_name,\n                input_data=next_data,\n            )\n\n            # Complete missing static input pins data using the last execution input.\n            static_link_names = {\n                link.sink_name\n                for link in next_node.input_links\n                if link.is_static and link.sink_name not in next_node_input\n            }\n            if static_link_names and (\n                latest_execution := db_client.get_latest_execution(\n                    next_node_id, graph_exec_id\n                )\n            ):\n                for name in static_link_names:\n                    next_node_input[name] = latest_execution.input_data.get(name)\n\n            # Validate the input data for the next node.\n            next_node_input, validation_msg = validate_exec(next_node, next_node_input)\n            suffix = f\"{next_output_name}>{next_input_name}~{next_node_exec_id}:{validation_msg}\"\n\n            # Incomplete input data, skip queueing the execution.\n            if not next_node_input:\n                log_metadata.warning(f\"Skipped queueing {suffix}\")\n                return enqueued_executions\n\n            # Input is complete, enqueue the execution.\n            log_metadata.info(f\"Enqueued {suffix}\")\n            enqueued_executions.append(\n                add_enqueued_execution(next_node_exec_id, next_node_id, next_node_input)\n            )\n\n            # Next execution stops here if the link is not static.\n            if not node_link.is_static:\n                return enqueued_executions\n\n            # If link is static, there could be some incomplete executions waiting for it.\n            # Load and complete the input missing input data, and try to re-enqueue them.\n            for iexec in db_client.get_incomplete_executions(\n                next_node_id, graph_exec_id\n            ):\n                idata = iexec.input_data\n                ineid = iexec.node_exec_id\n\n                static_link_names = {\n                    link.sink_name\n                    for link in next_node.input_links\n                    if link.is_static and link.sink_name not in idata\n                }\n                for input_name in static_link_names:\n                    idata[input_name] = next_node_input[input_name]\n\n                idata, msg = validate_exec(next_node, idata)\n                suffix = f\"{next_output_name}>{next_input_name}~{ineid}:{msg}\"\n                if not idata:\n                    log_metadata.info(f\"Enqueueing static-link skipped: {suffix}\")\n                    continue\n                log_metadata.info(f\"Enqueueing static-link execution {suffix}\")\n                enqueued_executions.append(\n                    add_enqueued_execution(iexec.node_exec_id, next_node_id, idata)\n                )\n            return enqueued_executions\n\n    return [\n        execution\n        for link in node.output_links\n        for execution in register_next_executions(link)\n    ]\n\n\ndef validate_exec(\n    node: Node,\n    data: BlockInput,\n    resolve_input: bool = True,\n) -> tuple[BlockInput | None, str]:\n    \"\"\"\n    Validate the input data for a node execution.\n\n    Args:\n        node: The node to execute.\n        data: The input data for the node execution.\n        resolve_input: Whether to resolve dynamic pins into dict/list/object.\n\n    Returns:\n        A tuple of the validated data and the block name.\n        If the data is invalid, the first element will be None, and the second element\n        will be an error message.\n        If the data is valid, the first element will be the resolved input data, and\n        the second element will be the block name.\n    \"\"\"\n    node_block: Block | None = get_block(node.block_id)\n    if not node_block:\n        return None, f\"Block for {node.block_id} not found.\"\n\n    if isinstance(node_block, AgentExecutorBlock):\n        # Validate the execution metadata for the agent executor block.\n        try:\n            exec_data = AgentExecutorBlock.Input(**node.input_default)\n        except Exception as e:\n            return None, f\"Input data doesn't match {node_block.name}: {str(e)}\"\n\n        # Validation input\n        input_schema = exec_data.input_schema\n        required_fields = set(input_schema[\"required\"])\n        input_default = exec_data.data\n    else:\n        # Convert non-matching data types to the expected input schema.\n        for name, data_type in node_block.input_schema.__annotations__.items():\n            if (value := data.get(name)) and (type(value) is not data_type):\n                data[name] = convert(value, data_type)\n\n        # Validation input\n        input_schema = node_block.input_schema.jsonschema()\n        required_fields = node_block.input_schema.get_required_fields()\n        input_default = node.input_default\n\n    # Input data (without default values) should contain all required fields.\n    error_prefix = f\"Input data missing or mismatch for `{node_block.name}`:\"\n    input_fields_from_nodes = {link.sink_name for link in node.input_links}\n    if not input_fields_from_nodes.issubset(data):\n        return None, f\"{error_prefix} {input_fields_from_nodes - set(data)}\"\n\n    # Merge input data with default values and resolve dynamic dict/list/object pins.\n    data = {**input_default, **data}\n    if resolve_input:\n        data = merge_execution_input(data)\n\n    # Input data post-merge should contain all required fields from the schema.\n    if not required_fields.issubset(data):\n        return None, f\"{error_prefix} {required_fields - set(data)}\"\n\n    # Last validation: Validate the input values against the schema.\n    if error := json.validate_with_jsonschema(schema=input_schema, data=data):\n        error_message = f\"{error_prefix} {error}\"\n        logger.error(error_message)\n        return None, error_message\n\n    return data, node_block.name\n\n\nclass Executor:\n    \"\"\"\n    This class contains event handlers for the process pool executor events.\n\n    The main events are:\n        on_node_executor_start: Initialize the process that executes the node.\n        on_node_execution: Execution logic for a node.\n\n        on_graph_executor_start: Initialize the process that executes the graph.\n        on_graph_execution: Execution logic for a graph.\n\n    The execution flow:\n        1. Graph execution request is added to the queue.\n        2. Graph executor loop picks the request from the queue.\n        3. Graph executor loop submits the graph execution request to the executor pool.\n      [on_graph_execution]\n        4. Graph executor initialize the node execution queue.\n        5. Graph executor adds the starting nodes to the node execution queue.\n        6. Graph executor waits for all nodes to be executed.\n      [on_node_execution]\n        7. Node executor picks the node execution request from the queue.\n        8. Node executor executes the node.\n        9. Node executor enqueues the next executed nodes to the node execution queue.\n    \"\"\"\n\n    @classmethod\n    def on_node_executor_start(cls):\n        configure_logging()\n        set_service_name(\"NodeExecutor\")\n        redis.connect()\n        cls.pid = os.getpid()\n        cls.db_client = get_db_client()\n        cls.creds_manager = IntegrationCredentialsManager()\n\n        # Set up shutdown handlers\n        cls.shutdown_lock = threading.Lock()\n        atexit.register(cls.on_node_executor_stop)  # handle regular shutdown\n        signal.signal(  # handle termination\n            signal.SIGTERM, lambda _, __: cls.on_node_executor_sigterm()\n        )\n\n    @classmethod\n    def on_node_executor_stop(cls):\n        if not cls.shutdown_lock.acquire(blocking=False):\n            return  # already shutting down\n\n        logger.info(f\"[on_node_executor_stop {cls.pid}] \u23f3 Releasing locks...\")\n        cls.creds_manager.release_all_locks()\n        logger.info(f\"[on_node_executor_stop {cls.pid}] \u23f3 Disconnecting Redis...\")\n        redis.disconnect()\n        logger.info(f\"[on_node_executor_stop {cls.pid}] \u23f3 Disconnecting DB manager...\")\n        close_service_client(cls.db_client)\n        logger.info(f\"[on_node_executor_stop {cls.pid}] \u2705 Finished cleanup\")\n\n    @classmethod\n    def on_node_executor_sigterm(cls):\n        llprint(f\"[on_node_executor_sigterm {cls.pid}] \u26a0\ufe0f SIGTERM received\")\n        if not cls.shutdown_lock.acquire(blocking=False):\n            return  # already shutting down\n\n        llprint(f\"[on_node_executor_stop {cls.pid}] \u23f3 Releasing locks...\")\n        cls.creds_manager.release_all_locks()\n        llprint(f\"[on_node_executor_stop {cls.pid}] \u23f3 Disconnecting Redis...\")\n        redis.disconnect()\n        llprint(f\"[on_node_executor_stop {cls.pid}] \u2705 Finished cleanup\")\n        sys.exit(0)\n\n    @classmethod\n    @error_logged\n    def on_node_execution(\n        cls,\n        q: ExecutionQueue[NodeExecutionEntry],\n        node_exec: NodeExecutionEntry,\n    ) -> dict[str, Any]:\n        log_metadata = LogMetadata(\n            user_id=node_exec.user_id,\n            graph_eid=node_exec.graph_exec_id,\n            graph_id=node_exec.graph_id,\n            node_eid=node_exec.node_exec_id,\n            node_id=node_exec.node_id,\n            block_name=\"-\",\n        )\n\n        execution_stats = {}\n        timing_info, _ = cls._on_node_execution(\n            q, node_exec, log_metadata, execution_stats\n        )\n        execution_stats[\"walltime\"] = timing_info.wall_time\n        execution_stats[\"cputime\"] = timing_info.cpu_time\n\n        cls.db_client.update_node_execution_stats(\n            node_exec.node_exec_id, execution_stats\n        )\n        return execution_stats\n\n    @classmethod\n    @time_measured\n    def _on_node_execution(\n        cls,\n        q: ExecutionQueue[NodeExecutionEntry],\n        node_exec: NodeExecutionEntry,\n        log_metadata: LogMetadata,\n        stats: dict[str, Any] | None = None,\n    ):\n        try:\n            log_metadata.info(f\"Start node execution {node_exec.node_exec_id}\")\n            for execution in execute_node(\n                cls.db_client, cls.creds_manager, node_exec, stats\n            ):\n                q.add(execution)\n            log_metadata.info(f\"Finished node execution {node_exec.node_exec_id}\")\n        except Exception as e:\n            log_metadata.exception(\n                f\"Failed node execution {node_exec.node_exec_id}: {e}\"\n            )\n\n    @classmethod\n    def on_graph_executor_start(cls):\n        configure_logging()\n        set_service_name(\"GraphExecutor\")\n\n        cls.db_client = get_db_client()\n        cls.pool_size = settings.config.num_node_workers\n        cls.pid = os.getpid()\n        cls._init_node_executor_pool()\n        logger.info(\n            f\"Graph executor {cls.pid} started with {cls.pool_size} node workers\"\n        )\n\n        # Set up shutdown handler\n        atexit.register(cls.on_graph_executor_stop)\n\n    @classmethod\n    def on_graph_executor_stop(cls):\n        prefix = f\"[on_graph_executor_stop {cls.pid}]\"\n        logger.info(f\"{prefix} \u23f3 Terminating node executor pool...\")\n        cls.executor.terminate()\n        logger.info(f\"{prefix} \u23f3 Disconnecting DB manager...\")\n        close_service_client(cls.db_client)\n        logger.info(f\"{prefix} \u2705 Finished cleanup\")\n\n    @classmethod\n    def _init_node_executor_pool(cls):\n        cls.executor = Pool(\n            processes=cls.pool_size,\n            initializer=cls.on_node_executor_start,\n        )\n\n    @classmethod\n    @error_logged\n    def on_graph_execution(\n        cls, graph_exec: GraphExecutionEntry, cancel: threading.Event\n    ):\n        log_metadata = LogMetadata(\n            user_id=graph_exec.user_id,\n            graph_eid=graph_exec.graph_exec_id,\n            graph_id=graph_exec.graph_id,\n            node_id=\"*\",\n            node_eid=\"*\",\n            block_name=\"-\",\n        )\n        timing_info, (exec_stats, error) = cls._on_graph_execution(\n            graph_exec, cancel, log_metadata\n        )\n        exec_stats[\"walltime\"] = timing_info.wall_time\n        exec_stats[\"cputime\"] = timing_info.cpu_time\n        exec_stats[\"error\"] = str(error) if error else None\n        result = cls.db_client.update_graph_execution_stats(\n            graph_exec_id=graph_exec.graph_exec_id,\n            stats=exec_stats,\n        )\n        cls.db_client.send_execution_update(result)\n\n    @classmethod\n    @time_measured\n    def _on_graph_execution(\n        cls,\n        graph_exec: GraphExecutionEntry,\n        cancel: threading.Event,\n        log_metadata: LogMetadata,\n    ) -> tuple[dict[str, Any], Exception | None]:\n        \"\"\"\n        Returns:\n            The execution statistics of the graph execution.\n            The error that occurred during the execution.\n        \"\"\"\n        log_metadata.info(f\"Start graph execution {graph_exec.graph_exec_id}\")\n        exec_stats = {\n            \"nodes_walltime\": 0,\n            \"nodes_cputime\": 0,\n            \"node_count\": 0,\n        }\n        error = None\n        finished = False\n\n        def cancel_handler():\n            while not cancel.is_set():\n                cancel.wait(1)\n            if finished:\n                return\n            cls.executor.terminate()\n            log_metadata.info(f\"Terminated graph execution {graph_exec.graph_exec_id}\")\n            cls._init_node_executor_pool()\n\n        cancel_thread = threading.Thread(target=cancel_handler)\n        cancel_thread.start()\n\n        try:\n            queue = ExecutionQueue[NodeExecutionEntry]()\n            for node_exec in graph_exec.start_node_execs:\n                queue.add(node_exec)\n\n            running_executions: dict[str, AsyncResult] = {}\n\n            def make_exec_callback(exec_data: NodeExecutionEntry):\n                node_id = exec_data.node_id\n\n                def callback(result: object):\n                    running_executions.pop(node_id)\n                    nonlocal exec_stats\n                    if isinstance(result, dict):\n                        exec_stats[\"node_count\"] += 1\n                        exec_stats[\"nodes_cputime\"] += result.get(\"cputime\", 0)\n                        exec_stats[\"nodes_walltime\"] += result.get(\"walltime\", 0)\n\n                return callback\n\n            while not queue.empty():\n                if cancel.is_set():\n                    error = RuntimeError(\"Execution is cancelled\")\n                    return exec_stats, error\n\n                exec_data = queue.get()\n\n                # Avoid parallel execution of the same node.\n                execution = running_executions.get(exec_data.node_id)\n                if execution and not execution.ready():\n                    # TODO (performance improvement):\n                    #   Wait for the completion of the same node execution is blocking.\n                    #   To improve this we need a separate queue for each node.\n                    #   Re-enqueueing the data back to the queue will disrupt the order.\n                    execution.wait()\n\n                log_metadata.debug(\n                    f\"Dispatching node execution {exec_data.node_exec_id} \"\n                    f\"for node {exec_data.node_id}\",\n                )\n                running_executions[exec_data.node_id] = cls.executor.apply_async(\n                    cls.on_node_execution,\n                    (queue, exec_data),\n                    callback=make_exec_callback(exec_data),\n                )\n\n                # Avoid terminating graph execution when some nodes are still running.\n                while queue.empty() and running_executions:\n                    log_metadata.debug(\n                        f\"Queue empty; running nodes: {list(running_executions.keys())}\"\n                    )\n                    for node_id, execution in list(running_executions.items()):\n                        if cancel.is_set():\n                            error = RuntimeError(\"Execution is cancelled\")\n                            return exec_stats, error\n\n                        if not queue.empty():\n                            break  # yield to parent loop to execute new queue items\n\n                        log_metadata.debug(f\"Waiting on execution of node {node_id}\")\n                        execution.wait(3)\n\n            log_metadata.info(f\"Finished graph execution {graph_exec.graph_exec_id}\")\n        except Exception as e:\n            log_metadata.exception(\n                f\"Failed graph execution {graph_exec.graph_exec_id}: {e}\"\n            )\n            error = e\n        finally:\n            if not cancel.is_set():\n                finished = True\n                cancel.set()\n            cancel_thread.join()\n            return exec_stats, error\n\n\nclass ExecutionManager(AppService):\n    def __init__(self):\n        super().__init__()\n        self.use_redis = True\n        self.use_supabase = True\n        self.pool_size = settings.config.num_graph_workers\n        self.queue = ExecutionQueue[GraphExecutionEntry]()\n        self.active_graph_runs: dict[str, tuple[Future, threading.Event]] = {}\n\n    @classmethod\n    def get_port(cls) -> int:\n        return settings.config.execution_manager_port\n\n    def run_service(self):\n        from backend.integrations.credentials_store import IntegrationCredentialsStore\n\n        self.credentials_store = IntegrationCredentialsStore()\n        self.executor = ProcessPoolExecutor(\n            max_workers=self.pool_size,\n            initializer=Executor.on_graph_executor_start,\n        )\n        sync_manager = multiprocessing.Manager()\n        logger.info(\n            f\"[{self.service_name}] Started with max-{self.pool_size} graph workers\"\n        )\n        while True:\n            graph_exec_data = self.queue.get()\n            graph_exec_id = graph_exec_data.graph_exec_id\n            logger.debug(\n                f\"[ExecutionManager] Dispatching graph execution {graph_exec_id}\"\n            )\n            cancel_event = sync_manager.Event()\n            future = self.executor.submit(\n                Executor.on_graph_execution, graph_exec_data, cancel_event\n            )\n            self.active_graph_runs[graph_exec_id] = (future, cancel_event)\n            future.add_done_callback(\n                lambda _: self.active_graph_runs.pop(graph_exec_id, None)\n            )\n\n    def cleanup(self):\n        logger.info(f\"[{__class__.__name__}] \u23f3 Shutting down graph executor pool...\")\n        self.executor.shutdown(cancel_futures=True)\n\n        super().cleanup()\n\n    @property\n    def db_client(self) -> \"DatabaseManager\":\n        return get_db_client()\n\n    @expose\n    def add_execution(\n        self,\n        graph_id: str,\n        data: BlockInput,\n        user_id: str,\n        graph_version: int | None = None,\n    ) -> GraphExecutionEntry:\n        graph: GraphModel | None = self.db_client.get_graph(\n            graph_id=graph_id, user_id=user_id, version=graph_version\n        )\n        if not graph:\n            raise ValueError(f\"Graph #{graph_id} not found.\")\n\n        graph.validate_graph(for_run=True)\n        self._validate_node_input_credentials(graph, user_id)\n\n        nodes_input = []\n        for node in graph.starting_nodes:\n            input_data = {}\n            block = get_block(node.block_id)\n\n            # Invalid block & Note block should never be executed.\n            if not block or block.block_type == BlockType.NOTE:\n                continue\n\n            # Extract request input data, and assign it to the input pin.\n            if block.block_type == BlockType.INPUT:\n                name = node.input_default.get(\"name\")\n                if name and name in data:\n                    input_data = {\"value\": data[name]}\n\n            # Extract webhook payload, and assign it to the input pin\n            webhook_payload_key = f\"webhook_{node.webhook_id}_payload\"\n            if (\n                block.block_type in (BlockType.WEBHOOK, BlockType.WEBHOOK_MANUAL)\n                and node.webhook_id\n            ):\n                if webhook_payload_key not in data:\n                    raise ValueError(\n                        f\"Node {block.name} #{node.id} webhook payload is missing\"\n                    )\n                input_data = {\"payload\": data[webhook_payload_key]}\n\n            input_data, error = validate_exec(node, input_data)\n            if input_data is None:\n                raise ValueError(error)\n            else:\n                nodes_input.append((node.id, input_data))\n\n        graph_exec_id, node_execs = self.db_client.create_graph_execution(\n            graph_id=graph_id,\n            graph_version=graph.version,\n            nodes_input=nodes_input,\n            user_id=user_id,\n        )\n\n        starting_node_execs = []\n        for node_exec in node_execs:\n            starting_node_execs.append(\n                NodeExecutionEntry(\n                    user_id=user_id,\n                    graph_exec_id=node_exec.graph_exec_id,\n                    graph_id=node_exec.graph_id,\n                    node_exec_id=node_exec.node_exec_id,\n                    node_id=node_exec.node_id,\n                    data=node_exec.input_data,\n                )\n            )\n            exec_update = self.db_client.update_execution_status(\n                node_exec.node_exec_id, ExecutionStatus.QUEUED, node_exec.input_data\n            )\n            self.db_client.send_execution_update(exec_update)\n\n        graph_exec = GraphExecutionEntry(\n            user_id=user_id,\n            graph_id=graph_id,\n            graph_exec_id=graph_exec_id,\n            start_node_execs=starting_node_execs,\n        )\n        self.queue.add(graph_exec)\n\n        return graph_exec\n\n    @expose\n    def cancel_execution(self, graph_exec_id: str) -> None:\n        \"\"\"\n        Mechanism:\n        1. Set the cancel event\n        2. Graph executor's cancel handler thread detects the event, terminates workers,\n           reinitializes worker pool, and returns.\n        3. Update execution statuses in DB and set `error` outputs to `\"TERMINATED\"`.\n        \"\"\"\n        if graph_exec_id not in self.active_graph_runs:\n            raise Exception(\n                f\"Graph execution #{graph_exec_id} not active/running: \"\n                \"possibly already completed/cancelled.\"\n            )\n\n        future, cancel_event = self.active_graph_runs[graph_exec_id]\n        if cancel_event.is_set():\n            return\n\n        cancel_event.set()\n        future.result()\n\n        # Update the status of the unfinished node executions\n        node_execs = self.db_client.get_execution_results(graph_exec_id)\n        for node_exec in node_execs:\n            if node_exec.status not in (\n                ExecutionStatus.COMPLETED,\n                ExecutionStatus.FAILED,\n            ):\n                self.db_client.upsert_execution_output(\n                    node_exec.node_exec_id, \"error\", \"TERMINATED\"\n                )\n                exec_update = self.db_client.update_execution_status(\n                    node_exec.node_exec_id, ExecutionStatus.FAILED\n                )\n                self.db_client.send_execution_update(exec_update)\n\n    def _validate_node_input_credentials(self, graph: GraphModel, user_id: str):\n        \"\"\"Checks all credentials for all nodes of the graph\"\"\"\n\n        for node in graph.nodes:\n            block = get_block(node.block_id)\n            if not block:\n                raise ValueError(f\"Unknown block {node.block_id} for node #{node.id}\")\n\n            # Find any fields of type CredentialsMetaInput\n            model_fields = cast(type[BaseModel], block.input_schema).model_fields\n            if CREDENTIALS_FIELD_NAME not in model_fields:\n                continue\n\n            field = model_fields[CREDENTIALS_FIELD_NAME]\n\n            # The BlockSchema class enforces that a `credentials` field is always a\n            # `CredentialsMetaInput`, so we can safely assume this here.\n            credentials_meta_type = cast(CredentialsMetaInput, field.annotation)\n            credentials_meta = credentials_meta_type.model_validate(\n                node.input_default[CREDENTIALS_FIELD_NAME]\n            )\n            # Fetch the corresponding Credentials and perform sanity checks\n            credentials = self.credentials_store.get_creds_by_id(\n                user_id, credentials_meta.id\n            )\n            if not credentials:\n                raise ValueError(\n                    f\"Unknown credentials #{credentials_meta.id} \"\n                    f\"for node #{node.id}\"\n                )\n            if (\n                credentials.provider != credentials_meta.provider\n                or credentials.type != credentials_meta.type\n            ):\n                logger.warning(\n                    f\"Invalid credentials #{credentials.id} for node #{node.id}: \"\n                    \"type/provider mismatch: \"\n                    f\"{credentials_meta.type}<>{credentials.type};\"\n                    f\"{credentials_meta.provider}<>{credentials.provider}\"\n                )\n                raise ValueError(\n                    f\"Invalid credentials #{credentials.id} for node #{node.id}: \"\n                    \"type/provider mismatch\"\n                )\n\n\n# ------- UTILITIES ------- #\n\n\n@thread_cached\ndef get_db_client() -> \"DatabaseManager\":\n    from backend.executor import DatabaseManager\n\n    return get_service_client(DatabaseManager)\n\n\n@contextmanager\ndef synchronized(key: str, timeout: int = 60):\n    lock: RedisLock = redis.get_redis().lock(f\"lock:{key}\", timeout=timeout)\n    try:\n        lock.acquire()\n        yield\n    finally:\n        if lock.locked():\n            lock.release()\n\n\ndef llprint(message: str):\n    \"\"\"\n    Low-level print/log helper function for use in signal handlers.\n    Regular log/print statements are not allowed in signal handlers.\n    \"\"\"\n    if logger.getEffectiveLevel() == logging.DEBUG:\n        os.write(sys.stdout.fileno(), (message + \"\\n\").encode())",
  "children": [
    {
      "value": "import atexit",
      "children": [
        {
          "value": "atexit",
          "children": [
            {
              "value": "atexit",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import logging",
      "children": [
        {
          "value": "logging",
          "children": [
            {
              "value": "logging",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import multiprocessing",
      "children": [
        {
          "value": "multiprocessing",
          "children": [
            {
              "value": "multiprocessing",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import os",
      "children": [
        {
          "value": "os",
          "children": [
            {
              "value": "os",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import signal",
      "children": [
        {
          "value": "signal",
          "children": [
            {
              "value": "signal",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import sys",
      "children": [
        {
          "value": "sys",
          "children": [
            {
              "value": "sys",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import threading",
      "children": [
        {
          "value": "threading",
          "children": [
            {
              "value": "threading",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from concurrent.futures import Future, ProcessPoolExecutor",
      "children": [
        {
          "value": "concurrent.futures",
          "children": [
            {
              "value": "concurrent",
              "children": []
            },
            {
              "value": "futures",
              "children": []
            }
          ]
        },
        {
          "value": "Future",
          "children": [
            {
              "value": "Future",
              "children": []
            }
          ]
        },
        {
          "value": "ProcessPoolExecutor",
          "children": [
            {
              "value": "ProcessPoolExecutor",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from contextlib import contextmanager",
      "children": [
        {
          "value": "contextlib",
          "children": [
            {
              "value": "contextlib",
              "children": []
            }
          ]
        },
        {
          "value": "contextmanager",
          "children": [
            {
              "value": "contextmanager",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from multiprocessing.pool import AsyncResult, Pool",
      "children": [
        {
          "value": "multiprocessing.pool",
          "children": [
            {
              "value": "multiprocessing",
              "children": []
            },
            {
              "value": "pool",
              "children": []
            }
          ]
        },
        {
          "value": "AsyncResult",
          "children": [
            {
              "value": "AsyncResult",
              "children": []
            }
          ]
        },
        {
          "value": "Pool",
          "children": [
            {
              "value": "Pool",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from typing import TYPE_CHECKING, Any, Generator, TypeVar, cast",
      "children": [
        {
          "value": "typing",
          "children": [
            {
              "value": "typing",
              "children": []
            }
          ]
        },
        {
          "value": "TYPE_CHECKING",
          "children": [
            {
              "value": "TYPE_CHECKING",
              "children": []
            }
          ]
        },
        {
          "value": "Any",
          "children": [
            {
              "value": "Any",
              "children": []
            }
          ]
        },
        {
          "value": "Generator",
          "children": [
            {
              "value": "Generator",
              "children": []
            }
          ]
        },
        {
          "value": "TypeVar",
          "children": [
            {
              "value": "TypeVar",
              "children": []
            }
          ]
        },
        {
          "value": "cast",
          "children": [
            {
              "value": "cast",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from pydantic import BaseModel",
      "children": [
        {
          "value": "pydantic",
          "children": [
            {
              "value": "pydantic",
              "children": []
            }
          ]
        },
        {
          "value": "BaseModel",
          "children": [
            {
              "value": "BaseModel",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from redis.lock import Lock as RedisLock",
      "children": [
        {
          "value": "redis.lock",
          "children": [
            {
              "value": "redis",
              "children": []
            },
            {
              "value": "lock",
              "children": []
            }
          ]
        },
        {
          "value": "Lock as RedisLock",
          "children": [
            {
              "value": "Lock",
              "children": [
                {
                  "value": "Lock",
                  "children": []
                }
              ]
            },
            {
              "value": "RedisLock",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "if TYPE_CHECKING:\n    from backend.executor import DatabaseManager",
      "children": [
        {
          "value": "TYPE_CHECKING",
          "children": []
        },
        {
          "value": "from backend.executor import DatabaseManager",
          "children": [
            {
              "value": "from backend.executor import DatabaseManager",
              "children": [
                {
                  "value": "backend.executor",
                  "children": [
                    {
                      "value": "backend",
                      "children": []
                    },
                    {
                      "value": "executor",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "DatabaseManager",
                  "children": [
                    {
                      "value": "DatabaseManager",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "from autogpt_libs.utils.cache import thread_cached",
      "children": [
        {
          "value": "autogpt_libs.utils.cache",
          "children": [
            {
              "value": "autogpt_libs",
              "children": []
            },
            {
              "value": "utils",
              "children": []
            },
            {
              "value": "cache",
              "children": []
            }
          ]
        },
        {
          "value": "thread_cached",
          "children": [
            {
              "value": "thread_cached",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.blocks.agent import AgentExecutorBlock",
      "children": [
        {
          "value": "backend.blocks.agent",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "blocks",
              "children": []
            },
            {
              "value": "agent",
              "children": []
            }
          ]
        },
        {
          "value": "AgentExecutorBlock",
          "children": [
            {
              "value": "AgentExecutorBlock",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.data import redis",
      "children": [
        {
          "value": "backend.data",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "data",
              "children": []
            }
          ]
        },
        {
          "value": "redis",
          "children": [
            {
              "value": "redis",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.data.block import Block, BlockData, BlockInput, BlockType, get_block",
      "children": [
        {
          "value": "backend.data.block",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "data",
              "children": []
            },
            {
              "value": "block",
              "children": []
            }
          ]
        },
        {
          "value": "Block",
          "children": [
            {
              "value": "Block",
              "children": []
            }
          ]
        },
        {
          "value": "BlockData",
          "children": [
            {
              "value": "BlockData",
              "children": []
            }
          ]
        },
        {
          "value": "BlockInput",
          "children": [
            {
              "value": "BlockInput",
              "children": []
            }
          ]
        },
        {
          "value": "BlockType",
          "children": [
            {
              "value": "BlockType",
              "children": []
            }
          ]
        },
        {
          "value": "get_block",
          "children": [
            {
              "value": "get_block",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.data.execution import (\n    ExecutionQueue,\n    ExecutionResult,\n    ExecutionStatus,\n    GraphExecutionEntry,\n    NodeExecutionEntry,\n    merge_execution_input,\n    parse_execution_output,\n)",
      "children": [
        {
          "value": "backend.data.execution",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "data",
              "children": []
            },
            {
              "value": "execution",
              "children": []
            }
          ]
        },
        {
          "value": "ExecutionQueue",
          "children": [
            {
              "value": "ExecutionQueue",
              "children": []
            }
          ]
        },
        {
          "value": "ExecutionResult",
          "children": [
            {
              "value": "ExecutionResult",
              "children": []
            }
          ]
        },
        {
          "value": "ExecutionStatus",
          "children": [
            {
              "value": "ExecutionStatus",
              "children": []
            }
          ]
        },
        {
          "value": "GraphExecutionEntry",
          "children": [
            {
              "value": "GraphExecutionEntry",
              "children": []
            }
          ]
        },
        {
          "value": "NodeExecutionEntry",
          "children": [
            {
              "value": "NodeExecutionEntry",
              "children": []
            }
          ]
        },
        {
          "value": "merge_execution_input",
          "children": [
            {
              "value": "merge_execution_input",
              "children": []
            }
          ]
        },
        {
          "value": "parse_execution_output",
          "children": [
            {
              "value": "parse_execution_output",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.data.graph import GraphModel, Link, Node",
      "children": [
        {
          "value": "backend.data.graph",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "data",
              "children": []
            },
            {
              "value": "graph",
              "children": []
            }
          ]
        },
        {
          "value": "GraphModel",
          "children": [
            {
              "value": "GraphModel",
              "children": []
            }
          ]
        },
        {
          "value": "Link",
          "children": [
            {
              "value": "Link",
              "children": []
            }
          ]
        },
        {
          "value": "Node",
          "children": [
            {
              "value": "Node",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.data.model import CREDENTIALS_FIELD_NAME, CredentialsMetaInput",
      "children": [
        {
          "value": "backend.data.model",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "data",
              "children": []
            },
            {
              "value": "model",
              "children": []
            }
          ]
        },
        {
          "value": "CREDENTIALS_FIELD_NAME",
          "children": [
            {
              "value": "CREDENTIALS_FIELD_NAME",
              "children": []
            }
          ]
        },
        {
          "value": "CredentialsMetaInput",
          "children": [
            {
              "value": "CredentialsMetaInput",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.integrations.creds_manager import IntegrationCredentialsManager",
      "children": [
        {
          "value": "backend.integrations.creds_manager",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "integrations",
              "children": []
            },
            {
              "value": "creds_manager",
              "children": []
            }
          ]
        },
        {
          "value": "IntegrationCredentialsManager",
          "children": [
            {
              "value": "IntegrationCredentialsManager",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.util import json",
      "children": [
        {
          "value": "backend.util",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "util",
              "children": []
            }
          ]
        },
        {
          "value": "json",
          "children": [
            {
              "value": "json",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.util.decorator import error_logged, time_measured",
      "children": [
        {
          "value": "backend.util.decorator",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "util",
              "children": []
            },
            {
              "value": "decorator",
              "children": []
            }
          ]
        },
        {
          "value": "error_logged",
          "children": [
            {
              "value": "error_logged",
              "children": []
            }
          ]
        },
        {
          "value": "time_measured",
          "children": [
            {
              "value": "time_measured",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.util.logging import configure_logging",
      "children": [
        {
          "value": "backend.util.logging",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "util",
              "children": []
            },
            {
              "value": "logging",
              "children": []
            }
          ]
        },
        {
          "value": "configure_logging",
          "children": [
            {
              "value": "configure_logging",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.util.process import set_service_name",
      "children": [
        {
          "value": "backend.util.process",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "util",
              "children": []
            },
            {
              "value": "process",
              "children": []
            }
          ]
        },
        {
          "value": "set_service_name",
          "children": [
            {
              "value": "set_service_name",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.util.service import (\n    AppService,\n    close_service_client,\n    expose,\n    get_service_client,\n)",
      "children": [
        {
          "value": "backend.util.service",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "util",
              "children": []
            },
            {
              "value": "service",
              "children": []
            }
          ]
        },
        {
          "value": "AppService",
          "children": [
            {
              "value": "AppService",
              "children": []
            }
          ]
        },
        {
          "value": "close_service_client",
          "children": [
            {
              "value": "close_service_client",
              "children": []
            }
          ]
        },
        {
          "value": "expose",
          "children": [
            {
              "value": "expose",
              "children": []
            }
          ]
        },
        {
          "value": "get_service_client",
          "children": [
            {
              "value": "get_service_client",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.util.settings import Settings",
      "children": [
        {
          "value": "backend.util.settings",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "util",
              "children": []
            },
            {
              "value": "settings",
              "children": []
            }
          ]
        },
        {
          "value": "Settings",
          "children": [
            {
              "value": "Settings",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.util.type import convert",
      "children": [
        {
          "value": "backend.util.type",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "util",
              "children": []
            },
            {
              "value": "type",
              "children": []
            }
          ]
        },
        {
          "value": "convert",
          "children": [
            {
              "value": "convert",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "logger = logging.getLogger(__name__)",
      "children": [
        {
          "value": "logger = logging.getLogger(__name__)",
          "children": [
            {
              "value": "logger",
              "children": []
            },
            {
              "value": "logging.getLogger(__name__)",
              "children": [
                {
                  "value": "logging.getLogger",
                  "children": [
                    {
                      "value": "logging",
                      "children": []
                    },
                    {
                      "value": "getLogger",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(__name__)",
                  "children": [
                    {
                      "value": "__name__",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "settings = Settings()",
      "children": [
        {
          "value": "settings = Settings()",
          "children": [
            {
              "value": "settings",
              "children": []
            },
            {
              "value": "Settings()",
              "children": [
                {
                  "value": "Settings",
                  "children": []
                },
                {
                  "value": "()",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class LogMetadata:\n    def __init__(\n        self,\n        user_id: str,\n        graph_eid: str,\n        graph_id: str,\n        node_eid: str,\n        node_id: str,\n        block_name: str,\n    ):\n        self.metadata = {\n            \"component\": \"ExecutionManager\",\n            \"user_id\": user_id,\n            \"graph_eid\": graph_eid,\n            \"graph_id\": graph_id,\n            \"node_eid\": node_eid,\n            \"node_id\": node_id,\n            \"block_name\": block_name,\n        }\n        self.prefix = f\"[ExecutionManager|uid:{user_id}|gid:{graph_id}|nid:{node_id}]|geid:{graph_eid}|nid:{node_eid}|{block_name}]\"\n\n    def info(self, msg: str, **extra):\n        msg = self._wrap(msg, **extra)\n        logger.info(msg, extra={\"json_fields\": {**self.metadata, **extra}})\n\n    def warning(self, msg: str, **extra):\n        msg = self._wrap(msg, **extra)\n        logger.warning(msg, extra={\"json_fields\": {**self.metadata, **extra}})\n\n    def error(self, msg: str, **extra):\n        msg = self._wrap(msg, **extra)\n        logger.error(msg, extra={\"json_fields\": {**self.metadata, **extra}})\n\n    def debug(self, msg: str, **extra):\n        msg = self._wrap(msg, **extra)\n        logger.debug(msg, extra={\"json_fields\": {**self.metadata, **extra}})\n\n    def exception(self, msg: str, **extra):\n        msg = self._wrap(msg, **extra)\n        logger.exception(msg, extra={\"json_fields\": {**self.metadata, **extra}})\n\n    def _wrap(self, msg: str, **extra):\n        return f\"{self.prefix} {msg} {extra}\"",
      "children": [
        {
          "value": "LogMetadata",
          "children": []
        },
        {
          "value": "def __init__(\n        self,\n        user_id: str,\n        graph_eid: str,\n        graph_id: str,\n        node_eid: str,\n        node_id: str,\n        block_name: str,\n    ):\n        self.metadata = {\n            \"component\": \"ExecutionManager\",\n            \"user_id\": user_id,\n            \"graph_eid\": graph_eid,\n            \"graph_id\": graph_id,\n            \"node_eid\": node_eid,\n            \"node_id\": node_id,\n            \"block_name\": block_name,\n        }\n        self.prefix = f\"[ExecutionManager|uid:{user_id}|gid:{graph_id}|nid:{node_id}]|geid:{graph_eid}|nid:{node_eid}|{block_name}]\"\n\n    def info(self, msg: str, **extra):\n        msg = self._wrap(msg, **extra)\n        logger.info(msg, extra={\"json_fields\": {**self.metadata, **extra}})\n\n    def warning(self, msg: str, **extra):\n        msg = self._wrap(msg, **extra)\n        logger.warning(msg, extra={\"json_fields\": {**self.metadata, **extra}})\n\n    def error(self, msg: str, **extra):\n        msg = self._wrap(msg, **extra)\n        logger.error(msg, extra={\"json_fields\": {**self.metadata, **extra}})\n\n    def debug(self, msg: str, **extra):\n        msg = self._wrap(msg, **extra)\n        logger.debug(msg, extra={\"json_fields\": {**self.metadata, **extra}})\n\n    def exception(self, msg: str, **extra):\n        msg = self._wrap(msg, **extra)\n        logger.exception(msg, extra={\"json_fields\": {**self.metadata, **extra}})\n\n    def _wrap(self, msg: str, **extra):\n        return f\"{self.prefix} {msg} {extra}\"",
          "children": [
            {
              "value": "def __init__(\n        self,\n        user_id: str,\n        graph_eid: str,\n        graph_id: str,\n        node_eid: str,\n        node_id: str,\n        block_name: str,\n    ):\n        self.metadata = {\n            \"component\": \"ExecutionManager\",\n            \"user_id\": user_id,\n            \"graph_eid\": graph_eid,\n            \"graph_id\": graph_id,\n            \"node_eid\": node_eid,\n            \"node_id\": node_id,\n            \"block_name\": block_name,\n        }\n        self.prefix = f\"[ExecutionManager|uid:{user_id}|gid:{graph_id}|nid:{node_id}]|geid:{graph_eid}|nid:{node_eid}|{block_name}]\"",
              "children": [
                {
                  "value": "__init__",
                  "children": []
                },
                {
                  "value": "(\n        self,\n        user_id: str,\n        graph_eid: str,\n        graph_id: str,\n        node_eid: str,\n        node_id: str,\n        block_name: str,\n    )",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "user_id: str",
                      "children": [
                        {
                          "value": "user_id",
                          "children": []
                        },
                        {
                          "value": "str",
                          "children": [
                            {
                              "value": "str",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "graph_eid: str",
                      "children": [
                        {
                          "value": "graph_eid",
                          "children": []
                        },
                        {
                          "value": "str",
                          "children": [
                            {
                              "value": "str",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "graph_id: str",
                      "children": [
                        {
                          "value": "graph_id",
                          "children": []
                        },
                        {
                          "value": "str",
                          "children": [
                            {
                              "value": "str",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "node_eid: str",
                      "children": [
                        {
                          "value": "node_eid",
                          "children": []
                        },
                        {
                          "value": "str",
                          "children": [
                            {
                              "value": "str",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "node_id: str",
                      "children": [
                        {
                          "value": "node_id",
                          "children": []
                        },
                        {
                          "value": "str",
                          "children": [
                            {
                              "value": "str",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "block_name: str",
                      "children": [
                        {
                          "value": "block_name",
                          "children": []
                        },
                        {
                          "value": "str",
                          "children": [
                            {
                              "value": "str",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "self.metadata = {\n            \"component\": \"ExecutionManager\",\n            \"user_id\": user_id,\n            \"graph_eid\": graph_eid,\n            \"graph_id\": graph_id,\n            \"node_eid\": node_eid,\n            \"node_id\": node_id,\n            \"block_name\": block_name,\n        }\n        self.prefix = f\"[ExecutionManager|uid:{user_id}|gid:{graph_id}|nid:{node_id}]|geid:{graph_eid}|nid:{node_eid}|{block_name}]\"",
                  "children": [
                    {
                      "value": "self.metadata = {\n            \"component\": \"ExecutionManager\",\n            \"user_id\": user_id,\n            \"graph_eid\": graph_eid,\n            \"graph_id\": graph_id,\n            \"node_eid\": node_eid,\n            \"node_id\": node_id,\n            \"block_name\": block_name,\n        }",
                      "children": [
                        {
                          "value": "self.metadata = {\n            \"component\": \"ExecutionManager\",\n            \"user_id\": user_id,\n            \"graph_eid\": graph_eid,\n            \"graph_id\": graph_id,\n            \"node_eid\": node_eid,\n            \"node_id\": node_id,\n            \"block_name\": block_name,\n        }",
                          "children": [
                            {
                              "value": "self.metadata",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "metadata",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "{\n            \"component\": \"ExecutionManager\",\n            \"user_id\": user_id,\n            \"graph_eid\": graph_eid,\n            \"graph_id\": graph_id,\n            \"node_eid\": node_eid,\n            \"node_id\": node_id,\n            \"block_name\": block_name,\n        }",
                              "children": [
                                {
                                  "value": "\"component\": \"ExecutionManager\"",
                                  "children": [
                                    {
                                      "value": "\"component\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "component",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "\"ExecutionManager\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "ExecutionManager",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "\"user_id\": user_id",
                                  "children": [
                                    {
                                      "value": "\"user_id\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "user_id",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "user_id",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "\"graph_eid\": graph_eid",
                                  "children": [
                                    {
                                      "value": "\"graph_eid\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "graph_eid",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "graph_eid",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "\"graph_id\": graph_id",
                                  "children": [
                                    {
                                      "value": "\"graph_id\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "graph_id",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "graph_id",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "\"node_eid\": node_eid",
                                  "children": [
                                    {
                                      "value": "\"node_eid\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "node_eid",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "node_eid",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "\"node_id\": node_id",
                                  "children": [
                                    {
                                      "value": "\"node_id\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "node_id",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "node_id",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "\"block_name\": block_name",
                                  "children": [
                                    {
                                      "value": "\"block_name\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "block_name",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "block_name",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.prefix = f\"[ExecutionManager|uid:{user_id}|gid:{graph_id}|nid:{node_id}]|geid:{graph_eid}|nid:{node_eid}|{block_name}]\"",
                      "children": [
                        {
                          "value": "self.prefix = f\"[ExecutionManager|uid:{user_id}|gid:{graph_id}|nid:{node_id}]|geid:{graph_eid}|nid:{node_eid}|{block_name}]\"",
                          "children": [
                            {
                              "value": "self.prefix",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "prefix",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "f\"[ExecutionManager|uid:{user_id}|gid:{graph_id}|nid:{node_id}]|geid:{graph_eid}|nid:{node_eid}|{block_name}]\"",
                              "children": [
                                {
                                  "value": "f\"",
                                  "children": []
                                },
                                {
                                  "value": "[ExecutionManager|uid:",
                                  "children": []
                                },
                                {
                                  "value": "{user_id}",
                                  "children": [
                                    {
                                      "value": "user_id",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "|gid:",
                                  "children": []
                                },
                                {
                                  "value": "{graph_id}",
                                  "children": [
                                    {
                                      "value": "graph_id",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "|nid:",
                                  "children": []
                                },
                                {
                                  "value": "{node_id}",
                                  "children": [
                                    {
                                      "value": "node_id",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "]|geid:",
                                  "children": []
                                },
                                {
                                  "value": "{graph_eid}",
                                  "children": [
                                    {
                                      "value": "graph_eid",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "|nid:",
                                  "children": []
                                },
                                {
                                  "value": "{node_eid}",
                                  "children": [
                                    {
                                      "value": "node_eid",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "|",
                                  "children": []
                                },
                                {
                                  "value": "{block_name}",
                                  "children": [
                                    {
                                      "value": "block_name",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "]",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def info(self, msg: str, **extra):\n        msg = self._wrap(msg, **extra)\n        logger.info(msg, extra={\"json_fields\": {**self.metadata, **extra}})",
              "children": [
                {
                  "value": "info",
                  "children": []
                },
                {
                  "value": "(self, msg: str, **extra)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "msg: str",
                      "children": [
                        {
                          "value": "msg",
                          "children": []
                        },
                        {
                          "value": "str",
                          "children": [
                            {
                              "value": "str",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "**extra",
                      "children": [
                        {
                          "value": "extra",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "msg = self._wrap(msg, **extra)\n        logger.info(msg, extra={\"json_fields\": {**self.metadata, **extra}})",
                  "children": [
                    {
                      "value": "msg = self._wrap(msg, **extra)",
                      "children": [
                        {
                          "value": "msg = self._wrap(msg, **extra)",
                          "children": [
                            {
                              "value": "msg",
                              "children": []
                            },
                            {
                              "value": "self._wrap(msg, **extra)",
                              "children": [
                                {
                                  "value": "self._wrap",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "_wrap",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(msg, **extra)",
                                  "children": [
                                    {
                                      "value": "msg",
                                      "children": []
                                    },
                                    {
                                      "value": "**extra",
                                      "children": [
                                        {
                                          "value": "extra",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "logger.info(msg, extra={\"json_fields\": {**self.metadata, **extra}})",
                      "children": [
                        {
                          "value": "logger.info(msg, extra={\"json_fields\": {**self.metadata, **extra}})",
                          "children": [
                            {
                              "value": "logger.info",
                              "children": [
                                {
                                  "value": "logger",
                                  "children": []
                                },
                                {
                                  "value": "info",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(msg, extra={\"json_fields\": {**self.metadata, **extra}})",
                              "children": [
                                {
                                  "value": "msg",
                                  "children": []
                                },
                                {
                                  "value": "extra={\"json_fields\": {**self.metadata, **extra}}",
                                  "children": [
                                    {
                                      "value": "extra",
                                      "children": []
                                    },
                                    {
                                      "value": "{\"json_fields\": {**self.metadata, **extra}}",
                                      "children": [
                                        {
                                          "value": "\"json_fields\": {**self.metadata, **extra}",
                                          "children": [
                                            {
                                              "value": "\"json_fields\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "json_fields",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "{**self.metadata, **extra}",
                                              "children": [
                                                {
                                                  "value": "**self.metadata",
                                                  "children": [
                                                    {
                                                      "value": "self.metadata",
                                                      "children": [
                                                        {
                                                          "value": "self",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "metadata",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "**extra",
                                                  "children": [
                                                    {
                                                      "value": "extra",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def warning(self, msg: str, **extra):\n        msg = self._wrap(msg, **extra)\n        logger.warning(msg, extra={\"json_fields\": {**self.metadata, **extra}})",
              "children": [
                {
                  "value": "warning",
                  "children": []
                },
                {
                  "value": "(self, msg: str, **extra)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "msg: str",
                      "children": [
                        {
                          "value": "msg",
                          "children": []
                        },
                        {
                          "value": "str",
                          "children": [
                            {
                              "value": "str",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "**extra",
                      "children": [
                        {
                          "value": "extra",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "msg = self._wrap(msg, **extra)\n        logger.warning(msg, extra={\"json_fields\": {**self.metadata, **extra}})",
                  "children": [
                    {
                      "value": "msg = self._wrap(msg, **extra)",
                      "children": [
                        {
                          "value": "msg = self._wrap(msg, **extra)",
                          "children": [
                            {
                              "value": "msg",
                              "children": []
                            },
                            {
                              "value": "self._wrap(msg, **extra)",
                              "children": [
                                {
                                  "value": "self._wrap",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "_wrap",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(msg, **extra)",
                                  "children": [
                                    {
                                      "value": "msg",
                                      "children": []
                                    },
                                    {
                                      "value": "**extra",
                                      "children": [
                                        {
                                          "value": "extra",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "logger.warning(msg, extra={\"json_fields\": {**self.metadata, **extra}})",
                      "children": [
                        {
                          "value": "logger.warning(msg, extra={\"json_fields\": {**self.metadata, **extra}})",
                          "children": [
                            {
                              "value": "logger.warning",
                              "children": [
                                {
                                  "value": "logger",
                                  "children": []
                                },
                                {
                                  "value": "warning",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(msg, extra={\"json_fields\": {**self.metadata, **extra}})",
                              "children": [
                                {
                                  "value": "msg",
                                  "children": []
                                },
                                {
                                  "value": "extra={\"json_fields\": {**self.metadata, **extra}}",
                                  "children": [
                                    {
                                      "value": "extra",
                                      "children": []
                                    },
                                    {
                                      "value": "{\"json_fields\": {**self.metadata, **extra}}",
                                      "children": [
                                        {
                                          "value": "\"json_fields\": {**self.metadata, **extra}",
                                          "children": [
                                            {
                                              "value": "\"json_fields\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "json_fields",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "{**self.metadata, **extra}",
                                              "children": [
                                                {
                                                  "value": "**self.metadata",
                                                  "children": [
                                                    {
                                                      "value": "self.metadata",
                                                      "children": [
                                                        {
                                                          "value": "self",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "metadata",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "**extra",
                                                  "children": [
                                                    {
                                                      "value": "extra",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def error(self, msg: str, **extra):\n        msg = self._wrap(msg, **extra)\n        logger.error(msg, extra={\"json_fields\": {**self.metadata, **extra}})",
              "children": [
                {
                  "value": "error",
                  "children": []
                },
                {
                  "value": "(self, msg: str, **extra)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "msg: str",
                      "children": [
                        {
                          "value": "msg",
                          "children": []
                        },
                        {
                          "value": "str",
                          "children": [
                            {
                              "value": "str",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "**extra",
                      "children": [
                        {
                          "value": "extra",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "msg = self._wrap(msg, **extra)\n        logger.error(msg, extra={\"json_fields\": {**self.metadata, **extra}})",
                  "children": [
                    {
                      "value": "msg = self._wrap(msg, **extra)",
                      "children": [
                        {
                          "value": "msg = self._wrap(msg, **extra)",
                          "children": [
                            {
                              "value": "msg",
                              "children": []
                            },
                            {
                              "value": "self._wrap(msg, **extra)",
                              "children": [
                                {
                                  "value": "self._wrap",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "_wrap",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(msg, **extra)",
                                  "children": [
                                    {
                                      "value": "msg",
                                      "children": []
                                    },
                                    {
                                      "value": "**extra",
                                      "children": [
                                        {
                                          "value": "extra",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "logger.error(msg, extra={\"json_fields\": {**self.metadata, **extra}})",
                      "children": [
                        {
                          "value": "logger.error(msg, extra={\"json_fields\": {**self.metadata, **extra}})",
                          "children": [
                            {
                              "value": "logger.error",
                              "children": [
                                {
                                  "value": "logger",
                                  "children": []
                                },
                                {
                                  "value": "error",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(msg, extra={\"json_fields\": {**self.metadata, **extra}})",
                              "children": [
                                {
                                  "value": "msg",
                                  "children": []
                                },
                                {
                                  "value": "extra={\"json_fields\": {**self.metadata, **extra}}",
                                  "children": [
                                    {
                                      "value": "extra",
                                      "children": []
                                    },
                                    {
                                      "value": "{\"json_fields\": {**self.metadata, **extra}}",
                                      "children": [
                                        {
                                          "value": "\"json_fields\": {**self.metadata, **extra}",
                                          "children": [
                                            {
                                              "value": "\"json_fields\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "json_fields",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "{**self.metadata, **extra}",
                                              "children": [
                                                {
                                                  "value": "**self.metadata",
                                                  "children": [
                                                    {
                                                      "value": "self.metadata",
                                                      "children": [
                                                        {
                                                          "value": "self",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "metadata",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "**extra",
                                                  "children": [
                                                    {
                                                      "value": "extra",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def debug(self, msg: str, **extra):\n        msg = self._wrap(msg, **extra)\n        logger.debug(msg, extra={\"json_fields\": {**self.metadata, **extra}})",
              "children": [
                {
                  "value": "debug",
                  "children": []
                },
                {
                  "value": "(self, msg: str, **extra)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "msg: str",
                      "children": [
                        {
                          "value": "msg",
                          "children": []
                        },
                        {
                          "value": "str",
                          "children": [
                            {
                              "value": "str",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "**extra",
                      "children": [
                        {
                          "value": "extra",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "msg = self._wrap(msg, **extra)\n        logger.debug(msg, extra={\"json_fields\": {**self.metadata, **extra}})",
                  "children": [
                    {
                      "value": "msg = self._wrap(msg, **extra)",
                      "children": [
                        {
                          "value": "msg = self._wrap(msg, **extra)",
                          "children": [
                            {
                              "value": "msg",
                              "children": []
                            },
                            {
                              "value": "self._wrap(msg, **extra)",
                              "children": [
                                {
                                  "value": "self._wrap",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "_wrap",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(msg, **extra)",
                                  "children": [
                                    {
                                      "value": "msg",
                                      "children": []
                                    },
                                    {
                                      "value": "**extra",
                                      "children": [
                                        {
                                          "value": "extra",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "logger.debug(msg, extra={\"json_fields\": {**self.metadata, **extra}})",
                      "children": [
                        {
                          "value": "logger.debug(msg, extra={\"json_fields\": {**self.metadata, **extra}})",
                          "children": [
                            {
                              "value": "logger.debug",
                              "children": [
                                {
                                  "value": "logger",
                                  "children": []
                                },
                                {
                                  "value": "debug",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(msg, extra={\"json_fields\": {**self.metadata, **extra}})",
                              "children": [
                                {
                                  "value": "msg",
                                  "children": []
                                },
                                {
                                  "value": "extra={\"json_fields\": {**self.metadata, **extra}}",
                                  "children": [
                                    {
                                      "value": "extra",
                                      "children": []
                                    },
                                    {
                                      "value": "{\"json_fields\": {**self.metadata, **extra}}",
                                      "children": [
                                        {
                                          "value": "\"json_fields\": {**self.metadata, **extra}",
                                          "children": [
                                            {
                                              "value": "\"json_fields\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "json_fields",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "{**self.metadata, **extra}",
                                              "children": [
                                                {
                                                  "value": "**self.metadata",
                                                  "children": [
                                                    {
                                                      "value": "self.metadata",
                                                      "children": [
                                                        {
                                                          "value": "self",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "metadata",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "**extra",
                                                  "children": [
                                                    {
                                                      "value": "extra",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def exception(self, msg: str, **extra):\n        msg = self._wrap(msg, **extra)\n        logger.exception(msg, extra={\"json_fields\": {**self.metadata, **extra}})",
              "children": [
                {
                  "value": "exception",
                  "children": []
                },
                {
                  "value": "(self, msg: str, **extra)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "msg: str",
                      "children": [
                        {
                          "value": "msg",
                          "children": []
                        },
                        {
                          "value": "str",
                          "children": [
                            {
                              "value": "str",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "**extra",
                      "children": [
                        {
                          "value": "extra",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "msg = self._wrap(msg, **extra)\n        logger.exception(msg, extra={\"json_fields\": {**self.metadata, **extra}})",
                  "children": [
                    {
                      "value": "msg = self._wrap(msg, **extra)",
                      "children": [
                        {
                          "value": "msg = self._wrap(msg, **extra)",
                          "children": [
                            {
                              "value": "msg",
                              "children": []
                            },
                            {
                              "value": "self._wrap(msg, **extra)",
                              "children": [
                                {
                                  "value": "self._wrap",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "_wrap",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(msg, **extra)",
                                  "children": [
                                    {
                                      "value": "msg",
                                      "children": []
                                    },
                                    {
                                      "value": "**extra",
                                      "children": [
                                        {
                                          "value": "extra",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "logger.exception(msg, extra={\"json_fields\": {**self.metadata, **extra}})",
                      "children": [
                        {
                          "value": "logger.exception(msg, extra={\"json_fields\": {**self.metadata, **extra}})",
                          "children": [
                            {
                              "value": "logger.exception",
                              "children": [
                                {
                                  "value": "logger",
                                  "children": []
                                },
                                {
                                  "value": "exception",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(msg, extra={\"json_fields\": {**self.metadata, **extra}})",
                              "children": [
                                {
                                  "value": "msg",
                                  "children": []
                                },
                                {
                                  "value": "extra={\"json_fields\": {**self.metadata, **extra}}",
                                  "children": [
                                    {
                                      "value": "extra",
                                      "children": []
                                    },
                                    {
                                      "value": "{\"json_fields\": {**self.metadata, **extra}}",
                                      "children": [
                                        {
                                          "value": "\"json_fields\": {**self.metadata, **extra}",
                                          "children": [
                                            {
                                              "value": "\"json_fields\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "json_fields",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "{**self.metadata, **extra}",
                                              "children": [
                                                {
                                                  "value": "**self.metadata",
                                                  "children": [
                                                    {
                                                      "value": "self.metadata",
                                                      "children": [
                                                        {
                                                          "value": "self",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "metadata",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "**extra",
                                                  "children": [
                                                    {
                                                      "value": "extra",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def _wrap(self, msg: str, **extra):\n        return f\"{self.prefix} {msg} {extra}\"",
              "children": [
                {
                  "value": "_wrap",
                  "children": []
                },
                {
                  "value": "(self, msg: str, **extra)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "msg: str",
                      "children": [
                        {
                          "value": "msg",
                          "children": []
                        },
                        {
                          "value": "str",
                          "children": [
                            {
                              "value": "str",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "**extra",
                      "children": [
                        {
                          "value": "extra",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "return f\"{self.prefix} {msg} {extra}\"",
                  "children": [
                    {
                      "value": "return f\"{self.prefix} {msg} {extra}\"",
                      "children": [
                        {
                          "value": "f\"{self.prefix} {msg} {extra}\"",
                          "children": [
                            {
                              "value": "f\"",
                              "children": []
                            },
                            {
                              "value": "{self.prefix}",
                              "children": [
                                {
                                  "value": "self.prefix",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "prefix",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "",
                              "children": []
                            },
                            {
                              "value": "{msg}",
                              "children": [
                                {
                                  "value": "msg",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "",
                              "children": []
                            },
                            {
                              "value": "{extra}",
                              "children": [
                                {
                                  "value": "extra",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "T = TypeVar(\"T\")",
      "children": [
        {
          "value": "T = TypeVar(\"T\")",
          "children": [
            {
              "value": "T",
              "children": []
            },
            {
              "value": "TypeVar(\"T\")",
              "children": [
                {
                  "value": "TypeVar",
                  "children": []
                },
                {
                  "value": "(\"T\")",
                  "children": [
                    {
                      "value": "\"T\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "T",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "ExecutionStream = Generator[NodeExecutionEntry, None, None]",
      "children": [
        {
          "value": "ExecutionStream = Generator[NodeExecutionEntry, None, None]",
          "children": [
            {
              "value": "ExecutionStream",
              "children": []
            },
            {
              "value": "Generator[NodeExecutionEntry, None, None]",
              "children": [
                {
                  "value": "Generator",
                  "children": []
                },
                {
                  "value": "NodeExecutionEntry",
                  "children": []
                },
                {
                  "value": "None",
                  "children": []
                },
                {
                  "value": "None",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def execute_node(\n    db_client: \"DatabaseManager\",\n    creds_manager: IntegrationCredentialsManager,\n    data: NodeExecutionEntry,\n    execution_stats: dict[str, Any] | None = None,\n) -> ExecutionStream:\n    \"\"\"\n    Execute a node in the graph. This will trigger a block execution on a node,\n    persist the execution result, and return the subsequent node to be executed.\n\n    Args:\n        db_client: The client to send execution updates to the server.\n        creds_manager: The manager to acquire and release credentials.\n        data: The execution data for executing the current node.\n        execution_stats: The execution statistics to be updated.\n\n    Returns:\n        The subsequent node to be enqueued, or None if there is no subsequent node.\n    \"\"\"\n    user_id = data.user_id\n    graph_exec_id = data.graph_exec_id\n    graph_id = data.graph_id\n    node_exec_id = data.node_exec_id\n    node_id = data.node_id\n\n    def update_execution(status: ExecutionStatus) -> ExecutionResult:\n        exec_update = db_client.update_execution_status(node_exec_id, status)\n        db_client.send_execution_update(exec_update)\n        return exec_update\n\n    node = db_client.get_node(node_id)\n\n    node_block = get_block(node.block_id)\n    if not node_block:\n        logger.error(f\"Block {node.block_id} not found.\")\n        return\n\n    log_metadata = LogMetadata(\n        user_id=user_id,\n        graph_eid=graph_exec_id,\n        graph_id=graph_id,\n        node_eid=node_exec_id,\n        node_id=node_id,\n        block_name=node_block.name,\n    )\n\n    # Sanity check: validate the execution input.\n    input_data, error = validate_exec(node, data.data, resolve_input=False)\n    if input_data is None:\n        log_metadata.error(f\"Skip execution, input validation error: {error}\")\n        db_client.upsert_execution_output(node_exec_id, \"error\", error)\n        update_execution(ExecutionStatus.FAILED)\n        return\n\n    # Re-shape the input data for agent block.\n    # AgentExecutorBlock specially separate the node input_data & its input_default.\n    if isinstance(node_block, AgentExecutorBlock):\n        input_data = {**node.input_default, \"data\": input_data}\n\n    # Execute the node\n    input_data_str = json.dumps(input_data)\n    input_size = len(input_data_str)\n    log_metadata.info(\"Executed node with input\", input=input_data_str)\n    update_execution(ExecutionStatus.RUNNING)\n\n    extra_exec_kwargs = {}\n    # Last-minute fetch credentials + acquire a system-wide read-write lock to prevent\n    # changes during execution. \u26a0\ufe0f This means a set of credentials can only be used by\n    # one (running) block at a time; simultaneous execution of blocks using same\n    # credentials is not supported.\n    creds_lock = None\n    if CREDENTIALS_FIELD_NAME in input_data:\n        credentials_meta = CredentialsMetaInput(**input_data[CREDENTIALS_FIELD_NAME])\n        credentials, creds_lock = creds_manager.acquire(user_id, credentials_meta.id)\n        extra_exec_kwargs[\"credentials\"] = credentials\n\n    output_size = 0\n    end_status = ExecutionStatus.COMPLETED\n    credit = db_client.get_or_refill_credit(user_id)\n    if credit < 0:\n        raise ValueError(f\"Insufficient credit: {credit}\")\n\n    try:\n        for output_name, output_data in node_block.execute(\n            input_data, **extra_exec_kwargs\n        ):\n            output_size += len(json.dumps(output_data))\n            log_metadata.info(\"Node produced output\", **{output_name: output_data})\n            db_client.upsert_execution_output(node_exec_id, output_name, output_data)\n\n            for execution in _enqueue_next_nodes(\n                db_client=db_client,\n                node=node,\n                output=(output_name, output_data),\n                user_id=user_id,\n                graph_exec_id=graph_exec_id,\n                graph_id=graph_id,\n                log_metadata=log_metadata,\n            ):\n                yield execution\n\n    except Exception as e:\n        end_status = ExecutionStatus.FAILED\n        error_msg = str(e)\n        log_metadata.exception(f\"Node execution failed with error {error_msg}\")\n        db_client.upsert_execution_output(node_exec_id, \"error\", error_msg)\n\n        for execution in _enqueue_next_nodes(\n            db_client=db_client,\n            node=node,\n            output=(\"error\", error_msg),\n            user_id=user_id,\n            graph_exec_id=graph_exec_id,\n            graph_id=graph_id,\n            log_metadata=log_metadata,\n        ):\n            yield execution\n\n        raise e\n    finally:\n        # Ensure credentials are released even if execution fails\n        if creds_lock:\n            try:\n                creds_lock.release()\n            except Exception as e:\n                log_metadata.error(f\"Failed to release credentials lock: {e}\")\n\n        # Update execution status and spend credits\n        res = update_execution(end_status)\n        if end_status == ExecutionStatus.COMPLETED:\n            s = input_size + output_size\n            t = (\n                (res.end_time - res.start_time).total_seconds()\n                if res.end_time and res.start_time\n                else 0\n            )\n            db_client.spend_credits(user_id, credit, node_block.id, input_data, s, t)\n\n        # Update execution stats\n        if execution_stats is not None:\n            execution_stats.update(node_block.execution_stats)\n            execution_stats[\"input_size\"] = input_size\n            execution_stats[\"output_size\"] = output_size\n\n\nd",
      "children": [
        {
          "value": "execute_node",
          "children": []
        },
        {
          "value": "(\n    db_client: \"DatabaseManager\",\n    creds_manager: IntegrationCredentialsManager,\n    data: NodeExecutionEntry,\n    execution_stats: dict[str, Any] | None = None,\n)",
          "children": [
            {
              "value": "db_client: \"DatabaseManager\"",
              "children": [
                {
                  "value": "db_client",
                  "children": []
                },
                {
                  "value": "\"DatabaseManager\"",
                  "children": [
                    {
                      "value": "\"DatabaseManager\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "DatabaseManager",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "creds_manager: IntegrationCredentialsManager",
              "children": [
                {
                  "value": "creds_manager",
                  "children": []
                },
                {
                  "value": "IntegrationCredentialsManager",
                  "children": [
                    {
                      "value": "IntegrationCredentialsManager",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "data: NodeExecutionEntry",
              "children": [
                {
                  "value": "data",
                  "children": []
                },
                {
                  "value": "NodeExecutionEntry",
                  "children": [
                    {
                      "value": "NodeExecutionEntry",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "execution_stats: dict[str, Any] | None = None",
              "children": [
                {
                  "value": "execution_stats",
                  "children": []
                },
                {
                  "value": "dict[str, Any] | None",
                  "children": [
                    {
                      "value": "dict[str, Any] | None",
                      "children": [
                        {
                          "value": "dict[str, Any]",
                          "children": [
                            {
                              "value": "dict[str, Any]",
                              "children": [
                                {
                                  "value": "dict",
                                  "children": []
                                },
                                {
                                  "value": "[str, Any]",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": [
                                        {
                                          "value": "str",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "Any",
                                      "children": [
                                        {
                                          "value": "Any",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "None",
                          "children": [
                            {
                              "value": "None",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "None",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "ExecutionStream",
          "children": [
            {
              "value": "ExecutionStream",
              "children": []
            }
          ]
        },
        {
          "value": "\"\"\"\n    Execute a node in the graph. This will trigger a block execution on a node,\n    persist the execution result, and return the subsequent node to be executed.\n\n    Args:\n        db_client: The client to send execution updates to the server.\n        creds_manager: The manager to acquire and release credentials.\n        data: The execution data for executing the current node.\n        execution_stats: The execution statistics to be updated.\n\n    Returns:\n        The subsequent node to be enqueued, or None if there is no subsequent node.\n    \"\"\"\n    user_id = data.user_id\n    graph_exec_id = data.graph_exec_id\n    graph_id = data.graph_id\n    node_exec_id = data.node_exec_id\n    node_id = data.node_id\n\n    def update_execution(status: ExecutionStatus) -> ExecutionResult:\n        exec_update = db_client.update_execution_status(node_exec_id, status)\n        db_client.send_execution_update(exec_update)\n        return exec_update\n\n    node = db_client.get_node(node_id)\n\n    node_block = get_block(node.block_id)\n    if not node_block:\n        logger.error(f\"Block {node.block_id} not found.\")\n        return\n\n    log_metadata = LogMetadata(\n        user_id=user_id,\n        graph_eid=graph_exec_id,\n        graph_id=graph_id,\n        node_eid=node_exec_id,\n        node_id=node_id,\n        block_name=node_block.name,\n    )\n\n    # Sanity check: validate the execution input.\n    input_data, error = validate_exec(node, data.data, resolve_input=False)\n    if input_data is None:\n        log_metadata.error(f\"Skip execution, input validation error: {error}\")\n        db_client.upsert_execution_output(node_exec_id, \"error\", error)\n        update_execution(ExecutionStatus.FAILED)\n        return\n\n    # Re-shape the input data for agent block.\n    # AgentExecutorBlock specially separate the node input_data & its input_default.\n    if isinstance(node_block, AgentExecutorBlock):\n        input_data = {**node.input_default, \"data\": input_data}\n\n    # Execute the node\n    input_data_str = json.dumps(input_data)\n    input_size = len(input_data_str)\n    log_metadata.info(\"Executed node with input\", input=input_data_str)\n    update_execution(ExecutionStatus.RUNNING)\n\n    extra_exec_kwargs = {}\n    # Last-minute fetch credentials + acquire a system-wide read-write lock to prevent\n    # changes during execution. \u26a0\ufe0f This means a set of credentials can only be used by\n    # one (running) block at a time; simultaneous execution of blocks using same\n    # credentials is not supported.\n    creds_lock = None\n    if CREDENTIALS_FIELD_NAME in input_data:\n        credentials_meta = CredentialsMetaInput(**input_data[CREDENTIALS_FIELD_NAME])\n        credentials, creds_lock = creds_manager.acquire(user_id, credentials_meta.id)\n        extra_exec_kwargs[\"credentials\"] = credentials\n\n    output_size = 0\n    end_status = ExecutionStatus.COMPLETED\n    credit = db_client.get_or_refill_credit(user_id)\n    if credit < 0:\n        raise ValueError(f\"Insufficient credit: {credit}\")\n\n    try:\n        for output_name, output_data in node_block.execute(\n            input_data, **extra_exec_kwargs\n        ):\n            output_size += len(json.dumps(output_data))\n            log_metadata.info(\"Node produced output\", **{output_name: output_data})\n            db_client.upsert_execution_output(node_exec_id, output_name, output_data)\n\n            for execution in _enqueue_next_nodes(\n                db_client=db_client,\n                node=node,\n                output=(output_name, output_data),\n                user_id=user_id,\n                graph_exec_id=graph_exec_id,\n                graph_id=graph_id,\n                log_metadata=log_metadata,\n            ):\n                yield execution\n\n    except Exception as e:\n        end_status = ExecutionStatus.FAILED\n        error_msg = str(e)\n        log_metadata.exception(f\"Node execution failed with error {error_msg}\")\n        db_client.upsert_execution_output(node_exec_id, \"error\", error_msg)\n\n        for execution in _enqueue_next_nodes(\n            db_client=db_client,\n            node=node,\n            output=(\"error\", error_msg),\n            user_id=user_id,\n            graph_exec_id=graph_exec_id,\n            graph_id=graph_id,\n            log_metadata=log_metadata,\n        ):\n            yield execution\n\n        raise e\n    finally:\n        # Ensure credentials are released even if execution fails\n        if creds_lock:\n            try:\n                creds_lock.release()\n            except Exception as e:\n                log_metadata.error(f\"Failed to release credentials lock: {e}\")\n\n        # Update execution status and spend credits\n        res = update_execution(end_status)\n        if end_status == ExecutionStatus.COMPLETED:\n            s = input_size + output_size\n            t = (\n                (res.end_time - res.start_time).total_seconds()\n                if res.end_time and res.start_time\n                else 0\n            )\n            db_client.spend_credits(user_id, credit, node_block.id, input_data, s, t)\n\n        # Update execution stats\n        if execution_stats is not None:\n            execution_stats.update(node_block.execution_stats)\n            execution_stats[\"input_size\"] = input_size\n            execution_stats[\"output_size\"] = output_size\n\n\nd",
          "children": [
            {
              "value": "\"\"\"\n    Execute a node in the graph. This will trigger a block execution on a node,\n    persist the execution result, and return the subsequent node to be executed.\n\n    Args:\n        db_client: The client to send execution updates to the server.\n        creds_manager: The manager to acquire and release credentials.\n        data: The execution data for executing the current node.\n        execution_stats: The execution statistics to be updated.\n\n    Returns:\n        The subsequent node to be enqueued, or None if there is no subsequent node.\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    Execute a node in the graph. This will trigger a block execution on a node,\n    persist the execution result, and return the subsequent node to be executed.\n\n    Args:\n        db_client: The client to send execution updates to the server.\n        creds_manager: The manager to acquire and release credentials.\n        data: The execution data for executing the current node.\n        execution_stats: The execution statistics to be updated.\n\n    Returns:\n        The subsequent node to be enqueued, or None if there is no subsequent node.\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Execute a node in the graph. This will trigger a block execution on a node,\n    persist the execution result, and return the subsequent node to be executed.\n\n    Args:\n        db_client: The client to send execution updates to the server.\n        creds_manager: The manager to acquire and release credentials.\n        data: The execution data for executing the current node.\n        execution_stats: The execution statistics to be updated.\n\n    Returns:\n        The subsequent node to be enqueued, or None if there is no subsequent node.",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "user_id = data.user_id",
              "children": [
                {
                  "value": "user_id = data.user_id",
                  "children": [
                    {
                      "value": "user_id",
                      "children": []
                    },
                    {
                      "value": "data.user_id",
                      "children": [
                        {
                          "value": "data",
                          "children": []
                        },
                        {
                          "value": "user_id",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "graph_exec_id = data.graph_exec_id",
              "children": [
                {
                  "value": "graph_exec_id = data.graph_exec_id",
                  "children": [
                    {
                      "value": "graph_exec_id",
                      "children": []
                    },
                    {
                      "value": "data.graph_exec_id",
                      "children": [
                        {
                          "value": "data",
                          "children": []
                        },
                        {
                          "value": "graph_exec_id",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "graph_id = data.graph_id",
              "children": [
                {
                  "value": "graph_id = data.graph_id",
                  "children": [
                    {
                      "value": "graph_id",
                      "children": []
                    },
                    {
                      "value": "data.graph_id",
                      "children": [
                        {
                          "value": "data",
                          "children": []
                        },
                        {
                          "value": "graph_id",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "node_exec_id = data.node_exec_id",
              "children": [
                {
                  "value": "node_exec_id = data.node_exec_id",
                  "children": [
                    {
                      "value": "node_exec_id",
                      "children": []
                    },
                    {
                      "value": "data.node_exec_id",
                      "children": [
                        {
                          "value": "data",
                          "children": []
                        },
                        {
                          "value": "node_exec_id",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "node_id = data.node_id",
              "children": [
                {
                  "value": "node_id = data.node_id",
                  "children": [
                    {
                      "value": "node_id",
                      "children": []
                    },
                    {
                      "value": "data.node_id",
                      "children": [
                        {
                          "value": "data",
                          "children": []
                        },
                        {
                          "value": "node_id",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def update_execution(status: ExecutionStatus) -> ExecutionResult:\n        exec_update = db_client.update_execution_status(node_exec_id, status)\n        db_client.send_execution_update(exec_update)\n        return exec_update",
              "children": [
                {
                  "value": "update_execution",
                  "children": []
                },
                {
                  "value": "(status: ExecutionStatus)",
                  "children": [
                    {
                      "value": "status: ExecutionStatus",
                      "children": [
                        {
                          "value": "status",
                          "children": []
                        },
                        {
                          "value": "ExecutionStatus",
                          "children": [
                            {
                              "value": "ExecutionStatus",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "ExecutionResult",
                  "children": [
                    {
                      "value": "ExecutionResult",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "exec_update = db_client.update_execution_status(node_exec_id, status)\n        db_client.send_execution_update(exec_update)\n        return exec_update",
                  "children": [
                    {
                      "value": "exec_update = db_client.update_execution_status(node_exec_id, status)",
                      "children": [
                        {
                          "value": "exec_update = db_client.update_execution_status(node_exec_id, status)",
                          "children": [
                            {
                              "value": "exec_update",
                              "children": []
                            },
                            {
                              "value": "db_client.update_execution_status(node_exec_id, status)",
                              "children": [
                                {
                                  "value": "db_client.update_execution_status",
                                  "children": [
                                    {
                                      "value": "db_client",
                                      "children": []
                                    },
                                    {
                                      "value": "update_execution_status",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(node_exec_id, status)",
                                  "children": [
                                    {
                                      "value": "node_exec_id",
                                      "children": []
                                    },
                                    {
                                      "value": "status",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "db_client.send_execution_update(exec_update)",
                      "children": [
                        {
                          "value": "db_client.send_execution_update(exec_update)",
                          "children": [
                            {
                              "value": "db_client.send_execution_update",
                              "children": [
                                {
                                  "value": "db_client",
                                  "children": []
                                },
                                {
                                  "value": "send_execution_update",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(exec_update)",
                              "children": [
                                {
                                  "value": "exec_update",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return exec_update",
                      "children": [
                        {
                          "value": "exec_update",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "node = db_client.get_node(node_id)",
              "children": [
                {
                  "value": "node = db_client.get_node(node_id)",
                  "children": [
                    {
                      "value": "node",
                      "children": []
                    },
                    {
                      "value": "db_client.get_node(node_id)",
                      "children": [
                        {
                          "value": "db_client.get_node",
                          "children": [
                            {
                              "value": "db_client",
                              "children": []
                            },
                            {
                              "value": "get_node",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "(node_id)",
                          "children": [
                            {
                              "value": "node_id",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "node_block = get_block(node.block_id)",
              "children": [
                {
                  "value": "node_block = get_block(node.block_id)",
                  "children": [
                    {
                      "value": "node_block",
                      "children": []
                    },
                    {
                      "value": "get_block(node.block_id)",
                      "children": [
                        {
                          "value": "get_block",
                          "children": []
                        },
                        {
                          "value": "(node.block_id)",
                          "children": [
                            {
                              "value": "node.block_id",
                              "children": [
                                {
                                  "value": "node",
                                  "children": []
                                },
                                {
                                  "value": "block_id",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "if not node_block:\n        logger.error(f\"Block {node.block_id} not found.\")\n        return",
              "children": [
                {
                  "value": "not node_block",
                  "children": [
                    {
                      "value": "node_block",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "logger.error(f\"Block {node.block_id} not found.\")\n        return",
                  "children": [
                    {
                      "value": "logger.error(f\"Block {node.block_id} not found.\")",
                      "children": [
                        {
                          "value": "logger.error(f\"Block {node.block_id} not found.\")",
                          "children": [
                            {
                              "value": "logger.error",
                              "children": [
                                {
                                  "value": "logger",
                                  "children": []
                                },
                                {
                                  "value": "error",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(f\"Block {node.block_id} not found.\")",
                              "children": [
                                {
                                  "value": "f\"Block {node.block_id} not found.\"",
                                  "children": [
                                    {
                                      "value": "f\"",
                                      "children": []
                                    },
                                    {
                                      "value": "Block",
                                      "children": []
                                    },
                                    {
                                      "value": "{node.block_id}",
                                      "children": [
                                        {
                                          "value": "node.block_id",
                                          "children": [
                                            {
                                              "value": "node",
                                              "children": []
                                            },
                                            {
                                              "value": "block_id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "not found.",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "log_metadata = LogMetadata(\n        user_id=user_id,\n        graph_eid=graph_exec_id,\n        graph_id=graph_id,\n        node_eid=node_exec_id,\n        node_id=node_id,\n        block_name=node_block.name,\n    )",
              "children": [
                {
                  "value": "log_metadata = LogMetadata(\n        user_id=user_id,\n        graph_eid=graph_exec_id,\n        graph_id=graph_id,\n        node_eid=node_exec_id,\n        node_id=node_id,\n        block_name=node_block.name,\n    )",
                  "children": [
                    {
                      "value": "log_metadata",
                      "children": []
                    },
                    {
                      "value": "LogMetadata(\n        user_id=user_id,\n        graph_eid=graph_exec_id,\n        graph_id=graph_id,\n        node_eid=node_exec_id,\n        node_id=node_id,\n        block_name=node_block.name,\n    )",
                      "children": [
                        {
                          "value": "LogMetadata",
                          "children": []
                        },
                        {
                          "value": "(\n        user_id=user_id,\n        graph_eid=graph_exec_id,\n        graph_id=graph_id,\n        node_eid=node_exec_id,\n        node_id=node_id,\n        block_name=node_block.name,\n    )",
                          "children": [
                            {
                              "value": "user_id=user_id",
                              "children": [
                                {
                                  "value": "user_id",
                                  "children": []
                                },
                                {
                                  "value": "user_id",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "graph_eid=graph_exec_id",
                              "children": [
                                {
                                  "value": "graph_eid",
                                  "children": []
                                },
                                {
                                  "value": "graph_exec_id",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "graph_id=graph_id",
                              "children": [
                                {
                                  "value": "graph_id",
                                  "children": []
                                },
                                {
                                  "value": "graph_id",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "node_eid=node_exec_id",
                              "children": [
                                {
                                  "value": "node_eid",
                                  "children": []
                                },
                                {
                                  "value": "node_exec_id",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "node_id=node_id",
                              "children": [
                                {
                                  "value": "node_id",
                                  "children": []
                                },
                                {
                                  "value": "node_id",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "block_name=node_block.name",
                              "children": [
                                {
                                  "value": "block_name",
                                  "children": []
                                },
                                {
                                  "value": "node_block.name",
                                  "children": [
                                    {
                                      "value": "node_block",
                                      "children": []
                                    },
                                    {
                                      "value": "name",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "# Sanity check: validate the execution input.",
              "children": []
            },
            {
              "value": "input_data, error = validate_exec(node, data.data, resolve_input=False)",
              "children": [
                {
                  "value": "input_data, error = validate_exec(node, data.data, resolve_input=False)",
                  "children": [
                    {
                      "value": "input_data, error",
                      "children": [
                        {
                          "value": "input_data",
                          "children": []
                        },
                        {
                          "value": "error",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "validate_exec(node, data.data, resolve_input=False)",
                      "children": [
                        {
                          "value": "validate_exec",
                          "children": []
                        },
                        {
                          "value": "(node, data.data, resolve_input=False)",
                          "children": [
                            {
                              "value": "node",
                              "children": []
                            },
                            {
                              "value": "data.data",
                              "children": [
                                {
                                  "value": "data",
                                  "children": []
                                },
                                {
                                  "value": "data",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "resolve_input=False",
                              "children": [
                                {
                                  "value": "resolve_input",
                                  "children": []
                                },
                                {
                                  "value": "False",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "if input_data is None:\n        log_metadata.error(f\"Skip execution, input validation error: {error}\")\n        db_client.upsert_execution_output(node_exec_id, \"error\", error)\n        update_execution(ExecutionStatus.FAILED)\n        return",
              "children": [
                {
                  "value": "input_data is None",
                  "children": [
                    {
                      "value": "input_data",
                      "children": []
                    },
                    {
                      "value": "None",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "log_metadata.error(f\"Skip execution, input validation error: {error}\")\n        db_client.upsert_execution_output(node_exec_id, \"error\", error)\n        update_execution(ExecutionStatus.FAILED)\n        return",
                  "children": [
                    {
                      "value": "log_metadata.error(f\"Skip execution, input validation error: {error}\")",
                      "children": [
                        {
                          "value": "log_metadata.error(f\"Skip execution, input validation error: {error}\")",
                          "children": [
                            {
                              "value": "log_metadata.error",
                              "children": [
                                {
                                  "value": "log_metadata",
                                  "children": []
                                },
                                {
                                  "value": "error",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(f\"Skip execution, input validation error: {error}\")",
                              "children": [
                                {
                                  "value": "f\"Skip execution, input validation error: {error}\"",
                                  "children": [
                                    {
                                      "value": "f\"",
                                      "children": []
                                    },
                                    {
                                      "value": "Skip execution, input validation error:",
                                      "children": []
                                    },
                                    {
                                      "value": "{error}",
                                      "children": [
                                        {
                                          "value": "error",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "db_client.upsert_execution_output(node_exec_id, \"error\", error)",
                      "children": [
                        {
                          "value": "db_client.upsert_execution_output(node_exec_id, \"error\", error)",
                          "children": [
                            {
                              "value": "db_client.upsert_execution_output",
                              "children": [
                                {
                                  "value": "db_client",
                                  "children": []
                                },
                                {
                                  "value": "upsert_execution_output",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(node_exec_id, \"error\", error)",
                              "children": [
                                {
                                  "value": "node_exec_id",
                                  "children": []
                                },
                                {
                                  "value": "\"error\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "error",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "error",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "update_execution(ExecutionStatus.FAILED)",
                      "children": [
                        {
                          "value": "update_execution(ExecutionStatus.FAILED)",
                          "children": [
                            {
                              "value": "update_execution",
                              "children": []
                            },
                            {
                              "value": "(ExecutionStatus.FAILED)",
                              "children": [
                                {
                                  "value": "ExecutionStatus.FAILED",
                                  "children": [
                                    {
                                      "value": "ExecutionStatus",
                                      "children": []
                                    },
                                    {
                                      "value": "FAILED",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "# Re-shape the input data for agent block.",
              "children": []
            },
            {
              "value": "# AgentExecutorBlock specially separate the node input_data & its input_default.",
              "children": []
            },
            {
              "value": "if isinstance(node_block, AgentExecutorBlock):\n        input_data = {**node.input_default, \"data\": input_data}",
              "children": [
                {
                  "value": "isinstance(node_block, AgentExecutorBlock)",
                  "children": [
                    {
                      "value": "isinstance",
                      "children": []
                    },
                    {
                      "value": "(node_block, AgentExecutorBlock)",
                      "children": [
                        {
                          "value": "node_block",
                          "children": []
                        },
                        {
                          "value": "AgentExecutorBlock",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "input_data = {**node.input_default, \"data\": input_data}",
                  "children": [
                    {
                      "value": "input_data = {**node.input_default, \"data\": input_data}",
                      "children": [
                        {
                          "value": "input_data = {**node.input_default, \"data\": input_data}",
                          "children": [
                            {
                              "value": "input_data",
                              "children": []
                            },
                            {
                              "value": "{**node.input_default, \"data\": input_data}",
                              "children": [
                                {
                                  "value": "**node.input_default",
                                  "children": [
                                    {
                                      "value": "node.input_default",
                                      "children": [
                                        {
                                          "value": "node",
                                          "children": []
                                        },
                                        {
                                          "value": "input_default",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "\"data\": input_data",
                                  "children": [
                                    {
                                      "value": "\"data\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "data",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "input_data",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "# Execute the node",
              "children": []
            },
            {
              "value": "input_data_str = json.dumps(input_data)",
              "children": [
                {
                  "value": "input_data_str = json.dumps(input_data)",
                  "children": [
                    {
                      "value": "input_data_str",
                      "children": []
                    },
                    {
                      "value": "json.dumps(input_data)",
                      "children": [
                        {
                          "value": "json.dumps",
                          "children": [
                            {
                              "value": "json",
                              "children": []
                            },
                            {
                              "value": "dumps",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "(input_data)",
                          "children": [
                            {
                              "value": "input_data",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "input_size = len(input_data_str)",
              "children": [
                {
                  "value": "input_size = len(input_data_str)",
                  "children": [
                    {
                      "value": "input_size",
                      "children": []
                    },
                    {
                      "value": "len(input_data_str)",
                      "children": [
                        {
                          "value": "len",
                          "children": []
                        },
                        {
                          "value": "(input_data_str)",
                          "children": [
                            {
                              "value": "input_data_str",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "log_metadata.info(\"Executed node with input\", input=input_data_str)",
              "children": [
                {
                  "value": "log_metadata.info(\"Executed node with input\", input=input_data_str)",
                  "children": [
                    {
                      "value": "log_metadata.info",
                      "children": [
                        {
                          "value": "log_metadata",
                          "children": []
                        },
                        {
                          "value": "info",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "(\"Executed node with input\", input=input_data_str)",
                      "children": [
                        {
                          "value": "\"Executed node with input\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "Executed node with input",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "input=input_data_str",
                          "children": [
                            {
                              "value": "input",
                              "children": []
                            },
                            {
                              "value": "input_data_str",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "update_execution(ExecutionStatus.RUNNING)",
              "children": [
                {
                  "value": "update_execution(ExecutionStatus.RUNNING)",
                  "children": [
                    {
                      "value": "update_execution",
                      "children": []
                    },
                    {
                      "value": "(ExecutionStatus.RUNNING)",
                      "children": [
                        {
                          "value": "ExecutionStatus.RUNNING",
                          "children": [
                            {
                              "value": "ExecutionStatus",
                              "children": []
                            },
                            {
                              "value": "RUNNING",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "extra_exec_kwargs = {}",
              "children": [
                {
                  "value": "extra_exec_kwargs = {}",
                  "children": [
                    {
                      "value": "extra_exec_kwargs",
                      "children": []
                    },
                    {
                      "value": "{}",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "# Last-minute fetch credentials + acquire a system-wide read-write lock to prevent",
              "children": []
            },
            {
              "value": "# changes during execution. \u26a0\ufe0f This means a set of credentials can only be used by",
              "children": []
            },
            {
              "value": "e (running) block at a time; simultaneous execution of blocks using same",
              "children": []
            },
            {
              "value": "edentials is not supported.",
              "children": []
            },
            {
              "value": "s_lock = None",
              "children": [
                {
                  "value": "s_lock = None",
                  "children": [
                    {
                      "value": "s_lock = N",
                      "children": []
                    },
                    {
                      "value": "",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "REDENTIALS_FIELD_NAME in input_data:\n        credentials_meta = CredentialsMetaInput(**input_data[CREDENTIALS_FIELD_NAME])\n        credentials, creds_lock = creds_manager.acquire(user_id, credentials_meta.id)\n        extra_exec_kwargs[\"credentials\"] = credentials",
              "children": [
                {
                  "value": "ENTIALS_FIELD_NAME in input_data:",
                  "children": [
                    {
                      "value": "ENTIALS_FIELD_NAME in",
                      "children": []
                    },
                    {
                      "value": "t_data:",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "entials_meta = CredentialsMetaInput(**input_data[CREDENTIALS_FIELD_NAME])\n        credentials, creds_lock = creds_manager.acquire(user_id, credentials_meta.id)\n        extra_exec_kwargs[\"credentials\"] = credentials",
                  "children": [
                    {
                      "value": "entials_meta = CredentialsMetaInput(**input_data[CREDENTIALS_FIELD_NAME])",
                      "children": [
                        {
                          "value": "entials_meta = CredentialsMetaInput(**input_data[CREDENTIALS_FIELD_NAME])",
                          "children": [
                            {
                              "value": "entials_meta = C",
                              "children": []
                            },
                            {
                              "value": "entialsMetaInput(**input_data[CREDENTIALS_FIELD_NAME])",
                              "children": [
                                {
                                  "value": "entialsMetaInput(**i",
                                  "children": []
                                },
                                {
                                  "value": "nput_data[CREDENTIALS_FIELD_NAME])",
                                  "children": [
                                    {
                                      "value": "put_data[CREDENTIALS_FIELD_NAME])",
                                      "children": [
                                        {
                                          "value": "t_data[CREDENTIALS_FIELD_NAME])",
                                          "children": [
                                            {
                                              "value": "t_data[CRE",
                                              "children": []
                                            },
                                            {
                                              "value": "ENTIALS_FIELD_NAME])",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "entials, creds_lock = creds_manager.acquire(user_id, credentials_meta.id)",
                      "children": [
                        {
                          "value": "entials, creds_lock = creds_manager.acquire(user_id, credentials_meta.id)",
                          "children": [
                            {
                              "value": "entials, creds_lock = c",
                              "children": [
                                {
                                  "value": "entials, cr",
                                  "children": []
                                },
                                {
                                  "value": "s_lock = c",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "s_manager.acquire(user_id, credentials_meta.id)",
                              "children": [
                                {
                                  "value": "s_manager.acquire(use",
                                  "children": [
                                    {
                                      "value": "s_manager.acq",
                                      "children": []
                                    },
                                    {
                                      "value": "ire(use",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "r_id, credentials_meta.id)",
                                  "children": [
                                    {
                                      "value": "_id, cr",
                                      "children": []
                                    },
                                    {
                                      "value": "entials_meta.id)",
                                      "children": [
                                        {
                                          "value": "entials_meta.id)",
                                          "children": []
                                        },
                                        {
                                          "value": "",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "a_exec_kwargs[\"credentials\"] = credentials",
                      "children": [
                        {
                          "value": "a_exec_kwargs[\"credentials\"] = credentials",
                          "children": [
                            {
                              "value": "a_exec_kwargs[\"credentials\"] = c",
                              "children": [
                                {
                                  "value": "a_exec_kwargs[\"cr",
                                  "children": []
                                },
                                {
                                  "value": "dentials\"] =",
                                  "children": [
                                    {
                                      "value": "d",
                                      "children": []
                                    },
                                    {
                                      "value": "entials\"] =",
                                      "children": []
                                    },
                                    {
                                      "value": "",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "entials",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "ut_size = 0",
              "children": [
                {
                  "value": "ut_size = 0",
                  "children": [
                    {
                      "value": "ut_size = 0",
                      "children": []
                    },
                    {
                      "value": "",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "status = ExecutionStatus.COMPLETED",
              "children": [
                {
                  "value": "status = ExecutionStatus.COMPLETED",
                  "children": [
                    {
                      "value": "status = E",
                      "children": []
                    },
                    {
                      "value": "utionStatus.COMPLETED",
                      "children": [
                        {
                          "value": "utionStatus.COM",
                          "children": []
                        },
                        {
                          "value": "LETED",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "it = db_client.get_or_refill_credit(user_id)",
              "children": [
                {
                  "value": "it = db_client.get_or_refill_credit(user_id)",
                  "children": [
                    {
                      "value": "it = d",
                      "children": []
                    },
                    {
                      "value": "lient.get_or_refill_credit(user_id)",
                      "children": [
                        {
                          "value": "lient.get_or_refill_credit(use",
                          "children": [
                            {
                              "value": "lient.get",
                              "children": []
                            },
                            {
                              "value": "or_refill_credit(use",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "r_id)",
                          "children": [
                            {
                              "value": "_id)",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "redit < 0:\n        raise ValueError(f\"Insufficient credit: {credit}\")",
              "children": [
                {
                  "value": "it < 0:",
                  "children": [
                    {
                      "value": "it < 0",
                      "children": []
                    },
                    {
                      "value": "",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "e ValueError(f\"Insufficient credit: {credit}\")",
                  "children": [
                    {
                      "value": "e ValueError(f\"Insufficient credit: {credit}\")",
                      "children": [
                        {
                          "value": "eError(f\"Insufficient credit: {credit}\")",
                          "children": [
                            {
                              "value": "eError(f\"I",
                              "children": []
                            },
                            {
                              "value": "nsufficient credit: {credit}\")",
                              "children": [
                                {
                                  "value": "sufficient credit: {credit}\")",
                                  "children": [
                                    {
                                      "value": "su",
                                      "children": []
                                    },
                                    {
                                      "value": "fficient credit: {cre",
                                      "children": []
                                    },
                                    {
                                      "value": "dit}\")",
                                      "children": [
                                        {
                                          "value": "it}\")",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "for output_name, output_data in node_block.execute(\n            input_data, **extra_exec_kwargs\n        ):\n            output_size += len(json.dumps(output_data))\n            log_metadata.info(\"Node produced output\", **{output_name: output_data})\n            db_client.upsert_execution_output(node_exec_id, output_name, output_data)\n\n            for execution in _enqueue_next_nodes(\n                db_client=db_client,\n                node=node,\n                output=(output_name, output_data),\n                user_id=user_id,\n                graph_exec_id=graph_exec_id,\n                graph_id=graph_id,\n                log_metadata=log_metadata,\n            ):\n                yield execution\n\n    except Exception as e:\n        end_status = ExecutionStatus.FAILED\n        error_msg = str(e)\n        log_metadata.exception(f\"Node execution failed with error {error_msg}\")\n        db_client.upsert_execution_output(node_exec_id, \"error\", error_msg)\n\n        for execution in _enqueue_next_nodes(\n            db_client=db_client,\n            node=node,\n            output=(\"error\", error_msg),\n            user_id=user_id,\n            graph_exec_id=graph_exec_id,\n            graph_id=graph_id,\n            log_metadata=log_metadata,\n        ):\n            yield execution\n\n        raise e\n    finally:\n        # Ensure credentials are released even if execution fails\n        if creds_lock:\n            try:\n                creds_lock.release()\n            except Exception as e:\n                log_metadata.error(f\"Failed to release credentials lock: {e}\")\n\n        # Update execution status and spend credits\n        res = update_execution(end_status)\n        if end_status == ExecutionStatus.COMPLETED:\n            s = input_size + output_size\n            t = (\n                (res.end_time - res.start_time).total_seconds()\n                if res.end_time and res.start_time\n                else 0\n            )\n            db_client.spend_credits(user_id, credit, node_block.id, input_data, s, t)\n\n        # Update execution stats\n        if execution_stats is not None:\n            execution_stats.update(node_block.execution_stats)\n            execution_stats[\"input_size\"] = input_size\n            execution_stats[\"output_size\"] = output_size\n\n\nd",
              "children": [
                {
                  "value": "output_name, output_data in node_block.execute(\n            input_data, **extra_exec_kwargs\n        ):\n            output_size += len(json.dumps(output_data))\n            log_metadata.info(\"Node produced output\", **{output_name: output_data})\n            db_client.upsert_execution_output(node_exec_id, output_name, output_data)\n\n            for execution in _enqueue_next_nodes(\n                db_client=db_client,\n                node=node,\n                output=(output_name, output_data),\n                user_id=user_id,\n                graph_exec_id=graph_exec_id,\n                graph_id=graph_id,\n                log_metadata=log_metadata,\n            ):\n                yield execution",
                  "children": [
                    {
                      "value": "output_name, output_data in node_block.execute(\n            input_data, **extra_exec_kwargs\n        ):\n            output_size += len(json.dumps(output_data))\n            log_metadata.info(\"Node produced output\", **{output_name: output_data})\n            db_client.upsert_execution_output(node_exec_id, output_name, output_data)\n\n            for execution in _enqueue_next_nodes(\n                db_client=db_client,\n                node=node,\n                output=(output_name, output_data),\n                user_id=user_id,\n                graph_exec_id=graph_exec_id,\n                graph_id=graph_id,\n                log_metadata=log_metadata,\n            ):\n                yield execution",
                      "children": [
                        {
                          "value": "ut_name, output_data in",
                          "children": [
                            {
                              "value": "ut_name, ou",
                              "children": []
                            },
                            {
                              "value": "ut_data in",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "_block.execute(\n            input_data, **extra_exec_kwargs\n        ):",
                          "children": [
                            {
                              "value": "_block.execute(",
                              "children": [
                                {
                                  "value": "_block.exe",
                                  "children": []
                                },
                                {
                                  "value": "ute(",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "input_data, **extra_exec_kwargs\n        ):",
                              "children": [
                                {
                                  "value": "t_data, **",
                                  "children": []
                                },
                                {
                                  "value": "tra_exec_kwargs",
                                  "children": [
                                    {
                                      "value": "a_exec_kwargs",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "ut_size += len(json.dumps(output_data))\n            log_metadata.info(\"Node produced output\", **{output_name: output_data})\n            db_client.upsert_execution_output(node_exec_id, output_name, output_data)\n\n            for execution in _enqueue_next_nodes(\n                db_client=db_client,\n                node=node,\n                output=(output_name, output_data),\n                user_id=user_id,\n                graph_exec_id=graph_exec_id,\n                graph_id=graph_id,\n                log_metadata=log_metadata,\n            ):\n                yield execution",
                          "children": [
                            {
                              "value": "ut_size += len(json.dumps(output_data))",
                              "children": [
                                {
                                  "value": "ut_size += len(json.dumps(output_data))",
                                  "children": [
                                    {
                                      "value": "ut_size +=",
                                      "children": []
                                    },
                                    {
                                      "value": "json.dumps(output_data))",
                                      "children": [
                                        {
                                          "value": "jso",
                                          "children": []
                                        },
                                        {
                                          "value": "n.dumps(output_data))",
                                          "children": [
                                            {
                                              "value": ".dumps(output_data))",
                                              "children": [
                                                {
                                                  "value": ".dumps(out",
                                                  "children": [
                                                    {
                                                      "value": ".dum",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "s(out",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "put_data))",
                                                  "children": [
                                                    {
                                                      "value": "ut_data))",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "metadata.info(\"Node produced output\", **{output_name: output_data})",
                              "children": [
                                {
                                  "value": "metadata.info(\"Node produced output\", **{output_name: output_data})",
                                  "children": [
                                    {
                                      "value": "metadata.info(\"No",
                                      "children": [
                                        {
                                          "value": "metadata.inf",
                                          "children": []
                                        },
                                        {
                                          "value": "(\"No",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "de produced output\", **{output_name: output_data})",
                                      "children": [
                                        {
                                          "value": "e produced output\", **",
                                          "children": [
                                            {
                                              "value": "e",
                                              "children": []
                                            },
                                            {
                                              "value": "produced output\", *",
                                              "children": []
                                            },
                                            {
                                              "value": "*",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "utput_name: output_data})",
                                          "children": [
                                            {
                                              "value": "put_name: output_data})",
                                              "children": [
                                                {
                                                  "value": "ut_name: output_data})",
                                                  "children": [
                                                    {
                                                      "value": "ut_name: ou",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "ut_data})",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "lient.upsert_execution_output(node_exec_id, output_name, output_data)",
                              "children": [
                                {
                                  "value": "lient.upsert_execution_output(node_exec_id, output_name, output_data)",
                                  "children": [
                                    {
                                      "value": "lient.upsert_execution_output(nod",
                                      "children": [
                                        {
                                          "value": "lient.ups",
                                          "children": []
                                        },
                                        {
                                          "value": "rt_execution_output(nod",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "e_exec_id, output_name, output_data)",
                                      "children": [
                                        {
                                          "value": "_exec_id, ou",
                                          "children": []
                                        },
                                        {
                                          "value": "ut_name, ou",
                                          "children": []
                                        },
                                        {
                                          "value": "ut_data)",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "execution in _enqueue_next_nodes(\n                db_client=db_client,\n                node=node,\n                output=(output_name, output_data),\n                user_id=user_id,\n                graph_exec_id=graph_exec_id,\n                graph_id=graph_id,\n                log_metadata=log_metadata,\n            ):\n                yield execution",
                              "children": [
                                {
                                  "value": "ution in",
                                  "children": []
                                },
                                {
                                  "value": "ueue_next_nodes(\n                db_client=db_client,\n                node=node,\n                output=(output_name, output_data),\n                user_id=user_id,\n                graph_exec_id=graph_exec_id,\n                graph_id=graph_id,\n                log_metadata=log_metadata,\n            ):",
                                  "children": [
                                    {
                                      "value": "ueue_next_nodes(",
                                      "children": []
                                    },
                                    {
                                      "value": "db_client=db_client,\n                node=node,\n                output=(output_name, output_data),\n                user_id=user_id,\n                graph_exec_id=graph_exec_id,\n                graph_id=graph_id,\n                log_metadata=log_metadata,\n            ):",
                                      "children": [
                                        {
                                          "value": "lient=db_client,",
                                          "children": [
                                            {
                                              "value": "lient=db_",
                                              "children": []
                                            },
                                            {
                                              "value": "lient,",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "=node,",
                                          "children": [
                                            {
                                              "value": "=nod",
                                              "children": []
                                            },
                                            {
                                              "value": ",",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "ut=(output_name, output_data),",
                                          "children": [
                                            {
                                              "value": "ut=(ou",
                                              "children": []
                                            },
                                            {
                                              "value": "put_name, output_data),",
                                              "children": [
                                                {
                                                  "value": "ut_name, ou",
                                                  "children": []
                                                },
                                                {
                                                  "value": "ut_data),",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "_id=user_id,",
                                          "children": [
                                            {
                                              "value": "_id=use",
                                              "children": []
                                            },
                                            {
                                              "value": "_id,",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "h_exec_id=graph_exec_id,",
                                          "children": [
                                            {
                                              "value": "h_exec_id=gra",
                                              "children": []
                                            },
                                            {
                                              "value": "h_exec_id,",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "h_id=graph_id,",
                                          "children": [
                                            {
                                              "value": "h_id=gra",
                                              "children": []
                                            },
                                            {
                                              "value": "h_id,",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "metadata=log_metadata,",
                                          "children": [
                                            {
                                              "value": "metadata=log",
                                              "children": []
                                            },
                                            {
                                              "value": "metadata,",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "d execution",
                                  "children": [
                                    {
                                      "value": "d execution",
                                      "children": [
                                        {
                                          "value": "d execution",
                                          "children": [
                                            {
                                              "value": "ution",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "pt Exception as e:\n        end_status = ExecutionStatus.FAILED\n        error_msg = str(e)\n        log_metadata.exception(f\"Node execution failed with error {error_msg}\")\n        db_client.upsert_execution_output(node_exec_id, \"error\", error_msg)\n\n        for execution in _enqueue_next_nodes(\n            db_client=db_client,\n            node=node,\n            output=(\"error\", error_msg),\n            user_id=user_id,\n            graph_exec_id=graph_exec_id,\n            graph_id=graph_id,\n            log_metadata=log_metadata,\n        ):\n            yield execution\n\n        raise e",
                  "children": [
                    {
                      "value": "ption as e:",
                      "children": [
                        {
                          "value": "ption as",
                          "children": []
                        },
                        {
                          "value": "",
                          "children": [
                            {
                              "value": "",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "status = ExecutionStatus.FAILED\n        error_msg = str(e)\n        log_metadata.exception(f\"Node execution failed with error {error_msg}\")\n        db_client.upsert_execution_output(node_exec_id, \"error\", error_msg)\n\n        for execution in _enqueue_next_nodes(\n            db_client=db_client,\n            node=node,\n            output=(\"error\", error_msg),\n            user_id=user_id,\n            graph_exec_id=graph_exec_id,\n            graph_id=graph_id,\n            log_metadata=log_metadata,\n        ):\n            yield execution\n\n        raise e",
                      "children": [
                        {
                          "value": "status = ExecutionStatus.FAILED",
                          "children": [
                            {
                              "value": "status = ExecutionStatus.FAILED",
                              "children": [
                                {
                                  "value": "status = E",
                                  "children": []
                                },
                                {
                                  "value": "utionStatus.FAILED",
                                  "children": [
                                    {
                                      "value": "utionStatus.FAI",
                                      "children": []
                                    },
                                    {
                                      "value": "ED",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "r_msg = str(e)",
                          "children": [
                            {
                              "value": "r_msg = str(e)",
                              "children": [
                                {
                                  "value": "r_msg = s",
                                  "children": []
                                },
                                {
                                  "value": "e)",
                                  "children": [
                                    {
                                      "value": "e)",
                                      "children": []
                                    },
                                    {
                                      "value": "",
                                      "children": [
                                        {
                                          "value": "",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "metadata.exception(f\"Node execution failed with error {error_msg}\")",
                          "children": [
                            {
                              "value": "metadata.exception(f\"Node execution failed with error {error_msg}\")",
                              "children": [
                                {
                                  "value": "metadata.exception(f\"N",
                                  "children": [
                                    {
                                      "value": "metadata.exc",
                                      "children": []
                                    },
                                    {
                                      "value": "ption(f\"N",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "ode execution failed with error {error_msg}\")",
                                  "children": [
                                    {
                                      "value": "de execution failed with error {error_msg}\")",
                                      "children": [
                                        {
                                          "value": "de",
                                          "children": []
                                        },
                                        {
                                          "value": "execution failed with error {err",
                                          "children": []
                                        },
                                        {
                                          "value": "or_msg}\")",
                                          "children": [
                                            {
                                              "value": "r_msg}\")",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "lient.upsert_execution_output(node_exec_id, \"error\", error_msg)",
                          "children": [
                            {
                              "value": "lient.upsert_execution_output(node_exec_id, \"error\", error_msg)",
                              "children": [
                                {
                                  "value": "lient.upsert_execution_output(nod",
                                  "children": [
                                    {
                                      "value": "lient.ups",
                                      "children": []
                                    },
                                    {
                                      "value": "rt_execution_output(nod",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "e_exec_id, \"error\", error_msg)",
                                  "children": [
                                    {
                                      "value": "_exec_id, \"e",
                                      "children": []
                                    },
                                    {
                                      "value": "or\", er",
                                      "children": [
                                        {
                                          "value": "o",
                                          "children": []
                                        },
                                        {
                                          "value": "r\", e",
                                          "children": []
                                        },
                                        {
                                          "value": "r",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "r_msg)",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "execution in _enqueue_next_nodes(\n            db_client=db_client,\n            node=node,\n            output=(\"error\", error_msg),\n            user_id=user_id,\n            graph_exec_id=graph_exec_id,\n            graph_id=graph_id,\n            log_metadata=log_metadata,\n        ):\n            yield execution",
                          "children": [
                            {
                              "value": "ution in",
                              "children": []
                            },
                            {
                              "value": "ueue_next_nodes(\n            db_client=db_client,\n            node=node,\n            output=(\"error\", error_msg),\n            user_id=user_id,\n            graph_exec_id=graph_exec_id,\n            graph_id=graph_id,\n            log_metadata=log_metadata,\n        ):",
                              "children": [
                                {
                                  "value": "ueue_next_nodes(",
                                  "children": []
                                },
                                {
                                  "value": "db_client=db_client,\n            node=node,\n            output=(\"error\", error_msg),\n            user_id=user_id,\n            graph_exec_id=graph_exec_id,\n            graph_id=graph_id,\n            log_metadata=log_metadata,\n        ):",
                                  "children": [
                                    {
                                      "value": "lient=db_client,",
                                      "children": [
                                        {
                                          "value": "lient=db_",
                                          "children": []
                                        },
                                        {
                                          "value": "lient,",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "=node,",
                                      "children": [
                                        {
                                          "value": "=nod",
                                          "children": []
                                        },
                                        {
                                          "value": ",",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "ut=(\"error\", error_msg),",
                                      "children": [
                                        {
                                          "value": "ut=(\"e",
                                          "children": []
                                        },
                                        {
                                          "value": "ror\", error_msg),",
                                          "children": [
                                            {
                                              "value": "or\", er",
                                              "children": [
                                                {
                                                  "value": "o",
                                                  "children": []
                                                },
                                                {
                                                  "value": "r\", e",
                                                  "children": []
                                                },
                                                {
                                                  "value": "r",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "r_msg),",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "_id=user_id,",
                                      "children": [
                                        {
                                          "value": "_id=use",
                                          "children": []
                                        },
                                        {
                                          "value": "_id,",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "h_exec_id=graph_exec_id,",
                                      "children": [
                                        {
                                          "value": "h_exec_id=gra",
                                          "children": []
                                        },
                                        {
                                          "value": "h_exec_id,",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "h_id=graph_id,",
                                      "children": [
                                        {
                                          "value": "h_id=gra",
                                          "children": []
                                        },
                                        {
                                          "value": "h_id,",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "metadata=log_metadata,",
                                      "children": [
                                        {
                                          "value": "metadata=log",
                                          "children": []
                                        },
                                        {
                                          "value": "metadata,",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "d execution",
                              "children": [
                                {
                                  "value": "d execution",
                                  "children": [
                                    {
                                      "value": "d execution",
                                      "children": [
                                        {
                                          "value": "ution",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "e e",
                          "children": [
                            {
                              "value": "",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "lly:\n        # Ensure credentials are released even if execution fails\n        if creds_lock:\n            try:\n                creds_lock.release()\n            except Exception as e:\n                log_metadata.error(f\"Failed to release credentials lock: {e}\")\n\n        # Update execution status and spend credits\n        res = update_execution(end_status)\n        if end_status == ExecutionStatus.COMPLETED:\n            s = input_size + output_size\n            t = (\n                (res.end_time - res.start_time).total_seconds()\n                if res.end_time and res.start_time\n                else 0\n            )\n            db_client.spend_credits(user_id, credit, node_block.id, input_data, s, t)\n\n        # Update execution stats\n        if execution_stats is not None:\n            execution_stats.update(node_block.execution_stats)\n            execution_stats[\"input_size\"] = input_size\n            execution_stats[\"output_size\"] = output_size\n\n\nd",
                  "children": [
                    {
                      "value": "sure credentials are released even if execution fails",
                      "children": []
                    },
                    {
                      "value": "reds_lock:\n            try:\n                creds_lock.release()\n            except Exception as e:\n                log_metadata.error(f\"Failed to release credentials lock: {e}\")\n\n        # Update execution status and spend credits\n        res = update_execution(end_status)\n        if end_status == ExecutionStatus.COMPLETED:\n            s = input_size + output_size\n            t = (\n                (res.end_time - res.start_time).total_seconds()\n                if res.end_time and res.start_time\n                else 0\n            )\n            db_client.spend_credits(user_id, credit, node_block.id, input_data, s, t)\n\n        # Update execution stats\n        if execution_stats is not None:\n            execution_stats.update(node_block.execution_stats)\n            execution_stats[\"input_size\"] = input_size\n            execution_stats[\"output_size\"] = output_size\n\n\nd",
                      "children": [
                        {
                          "value": "reds_lock:\n            try:\n                creds_lock.release()\n            except Exception as e:\n                log_metadata.error(f\"Failed to release credentials lock: {e}\")",
                          "children": [
                            {
                              "value": "s_lock:",
                              "children": []
                            },
                            {
                              "value": "creds_lock.release()\n            except Exception as e:\n                log_metadata.error(f\"Failed to release credentials lock: {e}\")",
                              "children": [
                                {
                                  "value": "creds_lock.release()\n            except Exception as e:\n                log_metadata.error(f\"Failed to release credentials lock: {e}\")",
                                  "children": [
                                    {
                                      "value": "s_lock.release()",
                                      "children": [
                                        {
                                          "value": "s_lock.release()",
                                          "children": [
                                            {
                                              "value": "s_lock.release()",
                                              "children": [
                                                {
                                                  "value": "s_lock.release()",
                                                  "children": [
                                                    {
                                                      "value": "s_lock.rel",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "ase()",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "pt Exception as e:\n                log_metadata.error(f\"Failed to release credentials lock: {e}\")",
                                      "children": [
                                        {
                                          "value": "ption as e:",
                                          "children": [
                                            {
                                              "value": "ption as",
                                              "children": []
                                            },
                                            {
                                              "value": "",
                                              "children": [
                                                {
                                                  "value": "",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "metadata.error(f\"Failed to release credentials lock: {e}\")",
                                          "children": [
                                            {
                                              "value": "metadata.error(f\"Failed to release credentials lock: {e}\")",
                                              "children": [
                                                {
                                                  "value": "metadata.error(f\"Failed to release credentials lock: {e}\")",
                                                  "children": [
                                                    {
                                                      "value": "metadata.error(f\"F",
                                                      "children": [
                                                        {
                                                          "value": "metadata.err",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "r(f\"F",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "ailed to release credentials lock: {e}\")",
                                                      "children": [
                                                        {
                                                          "value": "iled to release credentials lock: {e}\")",
                                                          "children": [
                                                            {
                                                              "value": "il",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "ed to release credentials lock: {e}\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": ")",
                                                              "children": [
                                                                {
                                                                  "value": "",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "date execution status and spend credits",
                          "children": []
                        },
                        {
                          "value": "= update_execution(end_status)",
                          "children": [
                            {
                              "value": "= update_execution(end_status)",
                              "children": [
                                {
                                  "value": "= u",
                                  "children": []
                                },
                                {
                                  "value": "te_execution(end_status)",
                                  "children": [
                                    {
                                      "value": "te_execution(end",
                                      "children": []
                                    },
                                    {
                                      "value": "_status)",
                                      "children": [
                                        {
                                          "value": "status)",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "nd_status == ExecutionStatus.COMPLETED:\n            s = input_size + output_size\n            t = (\n                (res.end_time - res.start_time).total_seconds()\n                if res.end_time and res.start_time\n                else 0\n            )\n            db_client.spend_credits(user_id, credit, node_block.id, input_data, s, t)",
                          "children": [
                            {
                              "value": "status == ExecutionStatus.COMPLETED:",
                              "children": [
                                {
                                  "value": "status ==",
                                  "children": []
                                },
                                {
                                  "value": "utionStatus.COMPLETED:",
                                  "children": [
                                    {
                                      "value": "utionStatus.COM",
                                      "children": []
                                    },
                                    {
                                      "value": "LETED:",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "input_size + output_size\n            t = (\n                (res.end_time - res.start_time).total_seconds()\n                if res.end_time and res.start_time\n                else 0\n            )\n            db_client.spend_credits(user_id, credit, node_block.id, input_data, s, t)",
                              "children": [
                                {
                                  "value": "input_size + output_size",
                                  "children": [
                                    {
                                      "value": "input_size + output_size",
                                      "children": [
                                        {
                                          "value": "i",
                                          "children": []
                                        },
                                        {
                                          "value": "t_size + output_size",
                                          "children": [
                                            {
                                              "value": "t_size + o",
                                              "children": []
                                            },
                                            {
                                              "value": "ut_size",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "(\n                (res.end_time - res.start_time).total_seconds()\n                if res.end_time and res.start_time\n                else 0\n            )",
                                  "children": [
                                    {
                                      "value": "(\n                (res.end_time - res.start_time).total_seconds()\n                if res.end_time and res.start_time\n                else 0\n            )",
                                      "children": [
                                        {
                                          "value": "(",
                                          "children": []
                                        },
                                        {
                                          "value": "(res.end_time - res.start_time).total_seconds()\n                if res.end_time and res.start_time\n                else 0\n            )",
                                          "children": [
                                            {
                                              "value": ".end_time - res.start_time).total_seconds()\n                if res.end_time and res.start_time\n                else 0",
                                              "children": [
                                                {
                                                  "value": ".end_time - res.start_time).total_seconds()",
                                                  "children": [
                                                    {
                                                      "value": ".end_time - res.start_time).total_seconds()",
                                                      "children": [
                                                        {
                                                          "value": ".end_time - res.start_time).tot",
                                                          "children": [
                                                            {
                                                              "value": "end_time - res.start_time).to",
                                                              "children": [
                                                                {
                                                                  "value": "end_time - r",
                                                                  "children": [
                                                                    {
                                                                      "value": "end",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "time - r",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "start_time).to",
                                                                  "children": [
                                                                    {
                                                                      "value": "sta",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "t_time).to",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "l_seconds()",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "end_time and res.start_time",
                                                  "children": [
                                                    {
                                                      "value": "end_time and",
                                                      "children": [
                                                        {
                                                          "value": "end",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "time and",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "start_time",
                                                      "children": [
                                                        {
                                                          "value": "sta",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "t_time",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "lient.spend_credits(user_id, credit, node_block.id, input_data, s, t)",
                                  "children": [
                                    {
                                      "value": "lient.spend_credits(user_id, credit, node_block.id, input_data, s, t)",
                                      "children": [
                                        {
                                          "value": "lient.spend_credits(use",
                                          "children": [
                                            {
                                              "value": "lient.spe",
                                              "children": []
                                            },
                                            {
                                              "value": "d_credits(use",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "r_id, credit, node_block.id, input_data, s, t)",
                                          "children": [
                                            {
                                              "value": "_id, cr",
                                              "children": []
                                            },
                                            {
                                              "value": "it, no",
                                              "children": []
                                            },
                                            {
                                              "value": "_block.id, in",
                                              "children": [
                                                {
                                                  "value": "_block.id,",
                                                  "children": []
                                                },
                                                {
                                                  "value": "in",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "t_data, s,",
                                              "children": []
                                            },
                                            {
                                              "value": ")",
                                              "children": []
                                            },
                                            {
                                              "value": "",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "date execution stats",
                          "children": []
                        },
                        {
                          "value": "xecution_stats is not None:\n            execution_stats.update(node_block.execution_stats)\n            execution_stats[\"input_size\"] = input_size\n            execution_stats[\"output_size\"] = output_size\n\n\nd",
                          "children": [
                            {
                              "value": "ution_stats is not None:",
                              "children": [
                                {
                                  "value": "ution_stats is",
                                  "children": []
                                },
                                {
                                  "value": ":",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "ution_stats.update(node_block.execution_stats)\n            execution_stats[\"input_size\"] = input_size\n            execution_stats[\"output_size\"] = output_size\n\n\nd",
                              "children": [
                                {
                                  "value": "ution_stats.update(node_block.execution_stats)",
                                  "children": [
                                    {
                                      "value": "ution_stats.update(node_block.execution_stats)",
                                      "children": [
                                        {
                                          "value": "ution_stats.update(nod",
                                          "children": [
                                            {
                                              "value": "ution_stats.upd",
                                              "children": []
                                            },
                                            {
                                              "value": "te(nod",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "e_block.execution_stats)",
                                          "children": [
                                            {
                                              "value": "_block.execution_stats)",
                                              "children": [
                                                {
                                                  "value": "_block.exe",
                                                  "children": []
                                                },
                                                {
                                                  "value": "ution_stats)",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "ution_stats[\"input_size\"] = input_size",
                                  "children": [
                                    {
                                      "value": "ution_stats[\"input_size\"] = input_size",
                                      "children": [
                                        {
                                          "value": "ution_stats[\"input_size\"] = i",
                                          "children": [
                                            {
                                              "value": "ution_stats[\"in",
                                              "children": []
                                            },
                                            {
                                              "value": "ut_size\"] =",
                                              "children": [
                                                {
                                                  "value": "u",
                                                  "children": []
                                                },
                                                {
                                                  "value": "t_size\"] =",
                                                  "children": []
                                                },
                                                {
                                                  "value": "",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "t_size",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "ution_stats[\"output_size\"] = output_size\n\n\nd",
                                  "children": [
                                    {
                                      "value": "ution_stats[\"output_size\"] = output_size\n\n\nd",
                                      "children": [
                                        {
                                          "value": "ution_stats[\"output_size\"] = o",
                                          "children": [
                                            {
                                              "value": "ution_stats[\"ou",
                                              "children": []
                                            },
                                            {
                                              "value": "put_size\"] =",
                                              "children": [
                                                {
                                                  "value": "p",
                                                  "children": []
                                                },
                                                {
                                                  "value": "ut_size\"] =",
                                                  "children": []
                                                },
                                                {
                                                  "value": "",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "ut_size\n\n\nd",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "_enqueue_next_nodes(\n    db_client: \"DatabaseManager\",\n    node: Node,\n    output: BlockData,\n    user_id: str,\n    graph_exec_id: str,\n    graph_id: str,\n    log_metadata: LogMetadata,\n) -> list[NodeExecutionEntry]:\n    def add_enqueued_execution(\n        node_exec_id: str, node_id: str, data: BlockInput\n    ) -> NodeExecutionEntry:\n        exec_update = db_client.update_execution_status(\n            node_exec_id, ExecutionStatus.QUEUED, data\n        )\n        db_client.send_execution_update(exec_update)\n        return NodeExecutionEntry(\n            user_id=user_id,\n            graph_exec_id=graph_exec_id,\n            graph_id=graph_id,\n            node_exec_id=node_exec_id,\n            node_id=node_id,\n            data=data,\n        )\n\n    def register_next_executions(node_link: Link) -> list[NodeExecutionEntry]:\n        enqueued_executions = []\n        next_output_name = node_link.source_name\n        next_input_name = node_link.sink_name\n        next_node_id = node_link.sink_id\n\n        next_data = parse_execution_output(output, next_output_name)\n        if next_data is None:\n            return enqueued_executions\n\n        next_node = db_client.get_node(next_node_id)\n\n        # Multiple node can register the same next node, we need this to be atomic\n        # To avoid same execution to be enqueued multiple times,\n        # Or the same input to be consumed multiple times.\n        with synchronized(f\"upsert_input-{next_node_id}-{graph_exec_id}\"):\n            # Add output data to the earliest incomplete execution, or create a new one.\n            next_node_exec_id, next_node_input = db_client.upsert_execution_input(\n                node_id=next_node_id,\n                graph_exec_id=graph_exec_id,\n                input_name=next_input_name,\n                input_data=next_data,\n            )\n\n            # Complete missing static input pins data using the last execution input.\n            static_link_names = {\n                link.sink_name\n                for link in next_node.input_links\n                if link.is_static and link.sink_name not in next_node_input\n            }\n            if static_link_names and (\n                latest_execution := db_client.get_latest_execution(\n                    next_node_id, graph_exec_id\n                )\n            ):\n                for name in static_link_names:\n                    next_node_input[name] = latest_execution.input_data.get(name)\n\n            # Validate the input data for the next node.\n            next_node_input, validation_msg = validate_exec(next_node, next_node_input)\n            suffix = f\"{next_output_name}>{next_input_name}~{next_node_exec_id}:{validation_msg}\"\n\n            # Incomplete input data, skip queueing the execution.\n            if not next_node_input:\n                log_metadata.warning(f\"Skipped queueing {suffix}\")\n                return enqueued_executions\n\n            # Input is complete, enqueue the execution.\n            log_metadata.info(f\"Enqueued {suffix}\")\n            enqueued_executions.append(\n                add_enqueued_execution(next_node_exec_id, next_node_id, next_node_input)\n            )\n\n            # Next execution stops here if the link is not static.\n            if not node_link.is_static:\n                return enqueued_executions\n\n            # If link is static, there could be some incomplete executions waiting for it.\n            # Load and complete the input missing input data, and try to re-enqueue them.\n            for iexec in db_client.get_incomplete_executions(\n                next_node_id, graph_exec_id\n            ):\n                idata = iexec.input_data\n                ineid = iexec.node_exec_id\n\n                static_link_names = {\n                    link.sink_name\n                    for link in next_node.input_links\n                    if link.is_static and link.sink_name not in idata\n                }\n                for input_name in static_link_names:\n                    idata[input_name] = next_node_input[input_name]\n\n                idata, msg = validate_exec(next_node, idata)\n                suffix = f\"{next_output_name}>{next_input_name}~{ineid}:{msg}\"\n                if not idata:\n                    log_metadata.info(f\"Enqueueing static-link skipped: {suffix}\")\n                    continue\n                log_metadata.info(f\"Enqueueing static-link execution {suffix}\")\n                enqueued_executions.append(\n                    add_enqueued_execution(iexec.node_exec_id, next_node_id, idata)\n                )\n            return enqueued_executions\n\n    return [\n        execution\n        for link in node.output_links\n        for execution in register_next_executions(link)\n    ]\n\n\nd",
      "children": [
        {
          "value": "ueue_next_nodes(",
          "children": []
        },
        {
          "value": "db_client: \"DatabaseManager\",\n    node: Node,\n    output: BlockData,\n    user_id: str,\n    graph_exec_id: str,\n    graph_id: str,\n    log_metadata: LogMetadata,\n) ->",
          "children": [
            {
              "value": "lient: \"DatabaseManager\",",
              "children": [
                {
                  "value": "lient: \"D",
                  "children": []
                },
                {
                  "value": "abaseManager\",",
                  "children": [
                    {
                      "value": "abaseManager\",",
                      "children": [
                        {
                          "value": "a",
                          "children": []
                        },
                        {
                          "value": "baseManager\",",
                          "children": []
                        },
                        {
                          "value": "",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": ": Node,",
              "children": [
                {
                  "value": ": No",
                  "children": []
                },
                {
                  "value": ",",
                  "children": [
                    {
                      "value": ",",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "ut: BlockData,",
              "children": [
                {
                  "value": "ut: Bl",
                  "children": []
                },
                {
                  "value": "kData,",
                  "children": [
                    {
                      "value": "kData,",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "_id: str,",
              "children": [
                {
                  "value": "_id: st",
                  "children": []
                },
                {
                  "value": "",
                  "children": [
                    {
                      "value": "",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "h_exec_id: str,",
              "children": [
                {
                  "value": "h_exec_id: st",
                  "children": []
                },
                {
                  "value": "",
                  "children": [
                    {
                      "value": "",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "h_id: str,",
              "children": [
                {
                  "value": "h_id: st",
                  "children": []
                },
                {
                  "value": "",
                  "children": [
                    {
                      "value": "",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "metadata: LogMetadata,\n)",
              "children": [
                {
                  "value": "metadata: Lo",
                  "children": []
                },
                {
                  "value": "etadata,\n)",
                  "children": [
                    {
                      "value": "etadata,\n)",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "[NodeExecutionEntry]:",
          "children": [
            {
              "value": "[NodeExecutionEntry]:",
              "children": [
                {
                  "value": "[Nod",
                  "children": []
                },
                {
                  "value": "eExecutionEntry]:",
                  "children": [
                    {
                      "value": "ExecutionEntry]:",
                      "children": [
                        {
                          "value": "ExecutionEntry]:",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "add_enqueued_execution(\n        node_exec_id: str, node_id: str, data: BlockInput\n    ) -> NodeExecutionEntry:\n        exec_update = db_client.update_execution_status(\n            node_exec_id, ExecutionStatus.QUEUED, data\n        )\n        db_client.send_execution_update(exec_update)\n        return NodeExecutionEntry(\n            user_id=user_id,\n            graph_exec_id=graph_exec_id,\n            graph_id=graph_id,\n            node_exec_id=node_exec_id,\n            node_id=node_id,\n            data=data,\n        )\n\n    def register_next_executions(node_link: Link) -> list[NodeExecutionEntry]:\n        enqueued_executions = []\n        next_output_name = node_link.source_name\n        next_input_name = node_link.sink_name\n        next_node_id = node_link.sink_id\n\n        next_data = parse_execution_output(output, next_output_name)\n        if next_data is None:\n            return enqueued_executions\n\n        next_node = db_client.get_node(next_node_id)\n\n        # Multiple node can register the same next node, we need this to be atomic\n        # To avoid same execution to be enqueued multiple times,\n        # Or the same input to be consumed multiple times.\n        with synchronized(f\"upsert_input-{next_node_id}-{graph_exec_id}\"):\n            # Add output data to the earliest incomplete execution, or create a new one.\n            next_node_exec_id, next_node_input = db_client.upsert_execution_input(\n                node_id=next_node_id,\n                graph_exec_id=graph_exec_id,\n                input_name=next_input_name,\n                input_data=next_data,\n            )\n\n            # Complete missing static input pins data using the last execution input.\n            static_link_names = {\n                link.sink_name\n                for link in next_node.input_links\n                if link.is_static and link.sink_name not in next_node_input\n            }\n            if static_link_names and (\n                latest_execution := db_client.get_latest_execution(\n                    next_node_id, graph_exec_id\n                )\n            ):\n                for name in static_link_names:\n                    next_node_input[name] = latest_execution.input_data.get(name)\n\n            # Validate the input data for the next node.\n            next_node_input, validation_msg = validate_exec(next_node, next_node_input)\n            suffix = f\"{next_output_name}>{next_input_name}~{next_node_exec_id}:{validation_msg}\"\n\n            # Incomplete input data, skip queueing the execution.\n            if not next_node_input:\n                log_metadata.warning(f\"Skipped queueing {suffix}\")\n                return enqueued_executions\n\n            # Input is complete, enqueue the execution.\n            log_metadata.info(f\"Enqueued {suffix}\")\n            enqueued_executions.append(\n                add_enqueued_execution(next_node_exec_id, next_node_id, next_node_input)\n            )\n\n            # Next execution stops here if the link is not static.\n            if not node_link.is_static:\n                return enqueued_executions\n\n            # If link is static, there could be some incomplete executions waiting for it.\n            # Load and complete the input missing input data, and try to re-enqueue them.\n            for iexec in db_client.get_incomplete_executions(\n                next_node_id, graph_exec_id\n            ):\n                idata = iexec.input_data\n                ineid = iexec.node_exec_id\n\n                static_link_names = {\n                    link.sink_name\n                    for link in next_node.input_links\n                    if link.is_static and link.sink_name not in idata\n                }\n                for input_name in static_link_names:\n                    idata[input_name] = next_node_input[input_name]\n\n                idata, msg = validate_exec(next_node, idata)\n                suffix = f\"{next_output_name}>{next_input_name}~{ineid}:{msg}\"\n                if not idata:\n                    log_metadata.info(f\"Enqueueing static-link skipped: {suffix}\")\n                    continue\n                log_metadata.info(f\"Enqueueing static-link execution {suffix}\")\n                enqueued_executions.append(\n                    add_enqueued_execution(iexec.node_exec_id, next_node_id, idata)\n                )\n            return enqueued_executions\n\n    return [\n        execution\n        for link in node.output_links\n        for execution in register_next_executions(link)\n    ]\n\n\nd",
          "children": [
            {
              "value": "add_enqueued_execution(\n        node_exec_id: str, node_id: str, data: BlockInput\n    ) -> NodeExecutionEntry:\n        exec_update = db_client.update_execution_status(\n            node_exec_id, ExecutionStatus.QUEUED, data\n        )\n        db_client.send_execution_update(exec_update)\n        return NodeExecutionEntry(\n            user_id=user_id,\n            graph_exec_id=graph_exec_id,\n            graph_id=graph_id,\n            node_exec_id=node_exec_id,\n            node_id=node_id,\n            data=data,\n        )",
              "children": [
                {
                  "value": "enqueued_execution(",
                  "children": []
                },
                {
                  "value": "node_exec_id: str, node_id: str, data: BlockInput\n    ) ->",
                  "children": [
                    {
                      "value": "_exec_id: str, no",
                      "children": [
                        {
                          "value": "_exec_id: st",
                          "children": []
                        },
                        {
                          "value": "no",
                          "children": [
                            {
                              "value": "no",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "_id: str, da",
                      "children": [
                        {
                          "value": "_id: st",
                          "children": []
                        },
                        {
                          "value": "da",
                          "children": [
                            {
                              "value": "da",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": ": BlockInput",
                      "children": [
                        {
                          "value": ": Bl",
                          "children": []
                        },
                        {
                          "value": "kInput",
                          "children": [
                            {
                              "value": "kInput",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "ExecutionEntry:",
                  "children": [
                    {
                      "value": "ExecutionEntry:",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "_update = db_client.update_execution_status(\n            node_exec_id, ExecutionStatus.QUEUED, data\n        )\n        db_client.send_execution_update(exec_update)\n        return NodeExecutionEntry(\n            user_id=user_id,\n            graph_exec_id=graph_exec_id,\n            graph_id=graph_id,\n            node_exec_id=node_exec_id,\n            node_id=node_id,\n            data=data,\n        )",
                  "children": [
                    {
                      "value": "_update = db_client.update_execution_status(\n            node_exec_id, ExecutionStatus.QUEUED, data\n        )",
                      "children": [
                        {
                          "value": "_update = db_client.update_execution_status(\n            node_exec_id, ExecutionStatus.QUEUED, data\n        )",
                          "children": [
                            {
                              "value": "_update = d",
                              "children": []
                            },
                            {
                              "value": "lient.update_execution_status(\n            node_exec_id, ExecutionStatus.QUEUED, data\n        )",
                              "children": [
                                {
                                  "value": "lient.update_execution_status(",
                                  "children": [
                                    {
                                      "value": "lient.upd",
                                      "children": []
                                    },
                                    {
                                      "value": "te_execution_status(",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "node_exec_id, ExecutionStatus.QUEUED, data\n        )",
                                  "children": [
                                    {
                                      "value": "_exec_id, Ex",
                                      "children": []
                                    },
                                    {
                                      "value": "utionStatus.QUEUED, da",
                                      "children": [
                                        {
                                          "value": "utionStatus.QUE",
                                          "children": []
                                        },
                                        {
                                          "value": "ED, da",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "lient.send_execution_update(exec_update)",
                      "children": [
                        {
                          "value": "lient.send_execution_update(exec_update)",
                          "children": [
                            {
                              "value": "lient.send_execution_update(exe",
                              "children": [
                                {
                                  "value": "lient.sen",
                                  "children": []
                                },
                                {
                                  "value": "_execution_update(exe",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "c_update)",
                              "children": [
                                {
                                  "value": "_update)",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "rn NodeExecutionEntry(\n            user_id=user_id,\n            graph_exec_id=graph_exec_id,\n            graph_id=graph_id,\n            node_exec_id=node_exec_id,\n            node_id=node_id,\n            data=data,\n        )",
                      "children": [
                        {
                          "value": "ExecutionEntry(\n            user_id=user_id,\n            graph_exec_id=graph_exec_id,\n            graph_id=graph_id,\n            node_exec_id=node_exec_id,\n            node_id=node_id,\n            data=data,\n        )",
                          "children": [
                            {
                              "value": "ExecutionEntry(",
                              "children": []
                            },
                            {
                              "value": "user_id=user_id,\n            graph_exec_id=graph_exec_id,\n            graph_id=graph_id,\n            node_exec_id=node_exec_id,\n            node_id=node_id,\n            data=data,\n        )",
                              "children": [
                                {
                                  "value": "_id=user_id,",
                                  "children": [
                                    {
                                      "value": "_id=use",
                                      "children": []
                                    },
                                    {
                                      "value": "_id,",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "h_exec_id=graph_exec_id,",
                                  "children": [
                                    {
                                      "value": "h_exec_id=gra",
                                      "children": []
                                    },
                                    {
                                      "value": "h_exec_id,",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "h_id=graph_id,",
                                  "children": [
                                    {
                                      "value": "h_id=gra",
                                      "children": []
                                    },
                                    {
                                      "value": "h_id,",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "_exec_id=node_exec_id,",
                                  "children": [
                                    {
                                      "value": "_exec_id=nod",
                                      "children": []
                                    },
                                    {
                                      "value": "_exec_id,",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "_id=node_id,",
                                  "children": [
                                    {
                                      "value": "_id=nod",
                                      "children": []
                                    },
                                    {
                                      "value": "_id,",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "=data,",
                                  "children": [
                                    {
                                      "value": "=dat",
                                      "children": []
                                    },
                                    {
                                      "value": ",",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "register_next_executions(node_link: Link) -> list[NodeExecutionEntry]:\n        enqueued_executions = []\n        next_output_name = node_link.source_name\n        next_input_name = node_link.sink_name\n        next_node_id = node_link.sink_id\n\n        next_data = parse_execution_output(output, next_output_name)\n        if next_data is None:\n            return enqueued_executions\n\n        next_node = db_client.get_node(next_node_id)\n\n        # Multiple node can register the same next node, we need this to be atomic\n        # To avoid same execution to be enqueued multiple times,\n        # Or the same input to be consumed multiple times.\n        with synchronized(f\"upsert_input-{next_node_id}-{graph_exec_id}\"):\n            # Add output data to the earliest incomplete execution, or create a new one.\n            next_node_exec_id, next_node_input = db_client.upsert_execution_input(\n                node_id=next_node_id,\n                graph_exec_id=graph_exec_id,\n                input_name=next_input_name,\n                input_data=next_data,\n            )\n\n            # Complete missing static input pins data using the last execution input.\n            static_link_names = {\n                link.sink_name\n                for link in next_node.input_links\n                if link.is_static and link.sink_name not in next_node_input\n            }\n            if static_link_names and (\n                latest_execution := db_client.get_latest_execution(\n                    next_node_id, graph_exec_id\n                )\n            ):\n                for name in static_link_names:\n                    next_node_input[name] = latest_execution.input_data.get(name)\n\n            # Validate the input data for the next node.\n            next_node_input, validation_msg = validate_exec(next_node, next_node_input)\n            suffix = f\"{next_output_name}>{next_input_name}~{next_node_exec_id}:{validation_msg}\"\n\n            # Incomplete input data, skip queueing the execution.\n            if not next_node_input:\n                log_metadata.warning(f\"Skipped queueing {suffix}\")\n                return enqueued_executions\n\n            # Input is complete, enqueue the execution.\n            log_metadata.info(f\"Enqueued {suffix}\")\n            enqueued_executions.append(\n                add_enqueued_execution(next_node_exec_id, next_node_id, next_node_input)\n            )\n\n            # Next execution stops here if the link is not static.\n            if not node_link.is_static:\n                return enqueued_executions\n\n            # If link is static, there could be some incomplete executions waiting for it.\n            # Load and complete the input missing input data, and try to re-enqueue them.\n            for iexec in db_client.get_incomplete_executions(\n                next_node_id, graph_exec_id\n            ):\n                idata = iexec.input_data\n                ineid = iexec.node_exec_id\n\n                static_link_names = {\n                    link.sink_name\n                    for link in next_node.input_links\n                    if link.is_static and link.sink_name not in idata\n                }\n                for input_name in static_link_names:\n                    idata[input_name] = next_node_input[input_name]\n\n                idata, msg = validate_exec(next_node, idata)\n                suffix = f\"{next_output_name}>{next_input_name}~{ineid}:{msg}\"\n                if not idata:\n                    log_metadata.info(f\"Enqueueing static-link skipped: {suffix}\")\n                    continue\n                log_metadata.info(f\"Enqueueing static-link execution {suffix}\")\n                enqueued_executions.append(\n                    add_enqueued_execution(iexec.node_exec_id, next_node_id, idata)\n                )\n            return enqueued_executions",
              "children": [
                {
                  "value": "ster_next_executions(nod",
                  "children": []
                },
                {
                  "value": "e_link: Link) ->",
                  "children": [
                    {
                      "value": "_link: Link) ->",
                      "children": [
                        {
                          "value": "_link: Li",
                          "children": []
                        },
                        {
                          "value": ") ->",
                          "children": [
                            {
                              "value": ") ->",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "[NodeExecutionEntry]:",
                  "children": [
                    {
                      "value": "[NodeExecutionEntry]:",
                      "children": [
                        {
                          "value": "[Nod",
                          "children": []
                        },
                        {
                          "value": "eExecutionEntry]:",
                          "children": [
                            {
                              "value": "ExecutionEntry]:",
                              "children": [
                                {
                                  "value": "ExecutionEntry]:",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "eued_executions = []\n        next_output_name = node_link.source_name\n        next_input_name = node_link.sink_name\n        next_node_id = node_link.sink_id\n\n        next_data = parse_execution_output(output, next_output_name)\n        if next_data is None:\n            return enqueued_executions\n\n        next_node = db_client.get_node(next_node_id)\n\n        # Multiple node can register the same next node, we need this to be atomic\n        # To avoid same execution to be enqueued multiple times,\n        # Or the same input to be consumed multiple times.\n        with synchronized(f\"upsert_input-{next_node_id}-{graph_exec_id}\"):\n            # Add output data to the earliest incomplete execution, or create a new one.\n            next_node_exec_id, next_node_input = db_client.upsert_execution_input(\n                node_id=next_node_id,\n                graph_exec_id=graph_exec_id,\n                input_name=next_input_name,\n                input_data=next_data,\n            )\n\n            # Complete missing static input pins data using the last execution input.\n            static_link_names = {\n                link.sink_name\n                for link in next_node.input_links\n                if link.is_static and link.sink_name not in next_node_input\n            }\n            if static_link_names and (\n                latest_execution := db_client.get_latest_execution(\n                    next_node_id, graph_exec_id\n                )\n            ):\n                for name in static_link_names:\n                    next_node_input[name] = latest_execution.input_data.get(name)\n\n            # Validate the input data for the next node.\n            next_node_input, validation_msg = validate_exec(next_node, next_node_input)\n            suffix = f\"{next_output_name}>{next_input_name}~{next_node_exec_id}:{validation_msg}\"\n\n            # Incomplete input data, skip queueing the execution.\n            if not next_node_input:\n                log_metadata.warning(f\"Skipped queueing {suffix}\")\n                return enqueued_executions\n\n            # Input is complete, enqueue the execution.\n            log_metadata.info(f\"Enqueued {suffix}\")\n            enqueued_executions.append(\n                add_enqueued_execution(next_node_exec_id, next_node_id, next_node_input)\n            )\n\n            # Next execution stops here if the link is not static.\n            if not node_link.is_static:\n                return enqueued_executions\n\n            # If link is static, there could be some incomplete executions waiting for it.\n            # Load and complete the input missing input data, and try to re-enqueue them.\n            for iexec in db_client.get_incomplete_executions(\n                next_node_id, graph_exec_id\n            ):\n                idata = iexec.input_data\n                ineid = iexec.node_exec_id\n\n                static_link_names = {\n                    link.sink_name\n                    for link in next_node.input_links\n                    if link.is_static and link.sink_name not in idata\n                }\n                for input_name in static_link_names:\n                    idata[input_name] = next_node_input[input_name]\n\n                idata, msg = validate_exec(next_node, idata)\n                suffix = f\"{next_output_name}>{next_input_name}~{ineid}:{msg}\"\n                if not idata:\n                    log_metadata.info(f\"Enqueueing static-link skipped: {suffix}\")\n                    continue\n                log_metadata.info(f\"Enqueueing static-link execution {suffix}\")\n                enqueued_executions.append(\n                    add_enqueued_execution(iexec.node_exec_id, next_node_id, idata)\n                )\n            return enqueued_executions",
                  "children": [
                    {
                      "value": "eued_executions = []",
                      "children": [
                        {
                          "value": "eued_executions = []",
                          "children": [
                            {
                              "value": "eued_executions = [",
                              "children": []
                            },
                            {
                              "value": "",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "_output_name = node_link.source_name",
                      "children": [
                        {
                          "value": "_output_name = node_link.source_name",
                          "children": [
                            {
                              "value": "_output_name = n",
                              "children": []
                            },
                            {
                              "value": "_link.source_name",
                              "children": [
                                {
                                  "value": "_link.sou",
                                  "children": []
                                },
                                {
                                  "value": "ce_name",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "_input_name = node_link.sink_name",
                      "children": [
                        {
                          "value": "_input_name = node_link.sink_name",
                          "children": [
                            {
                              "value": "_input_name = n",
                              "children": []
                            },
                            {
                              "value": "_link.sink_name",
                              "children": [
                                {
                                  "value": "_link.sin",
                                  "children": []
                                },
                                {
                                  "value": "_name",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "_node_id = node_link.sink_id",
                      "children": [
                        {
                          "value": "_node_id = node_link.sink_id",
                          "children": [
                            {
                              "value": "_node_id = n",
                              "children": []
                            },
                            {
                              "value": "_link.sink_id",
                              "children": [
                                {
                                  "value": "_link.sin",
                                  "children": []
                                },
                                {
                                  "value": "_id",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "_data = parse_execution_output(output, next_output_name)",
                      "children": [
                        {
                          "value": "_data = parse_execution_output(output, next_output_name)",
                          "children": [
                            {
                              "value": "_data = p",
                              "children": []
                            },
                            {
                              "value": "e_execution_output(output, next_output_name)",
                              "children": [
                                {
                                  "value": "e_execution_output(out",
                                  "children": []
                                },
                                {
                                  "value": "put, next_output_name)",
                                  "children": [
                                    {
                                      "value": "ut, ne",
                                      "children": []
                                    },
                                    {
                                      "value": "_output_name)",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "ext_data is None:\n            return enqueued_executions",
                      "children": [
                        {
                          "value": "_data is None:",
                          "children": [
                            {
                              "value": "_data is",
                              "children": []
                            },
                            {
                              "value": ":",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "rn enqueued_executions",
                          "children": [
                            {
                              "value": "rn enqueued_executions",
                              "children": [
                                {
                                  "value": "eued_executions",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "_node = db_client.get_node(next_node_id)",
                      "children": [
                        {
                          "value": "_node = db_client.get_node(next_node_id)",
                          "children": [
                            {
                              "value": "_node = d",
                              "children": []
                            },
                            {
                              "value": "lient.get_node(next_node_id)",
                              "children": [
                                {
                                  "value": "lient.get_node(nex",
                                  "children": [
                                    {
                                      "value": "lient.get",
                                      "children": []
                                    },
                                    {
                                      "value": "node(nex",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "t_node_id)",
                                  "children": [
                                    {
                                      "value": "_node_id)",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "ltiple node can register the same next node, we need this to be atomic",
                      "children": []
                    },
                    {
                      "value": "avoid same execution to be enqueued multiple times,",
                      "children": []
                    },
                    {
                      "value": "the same input to be consumed multiple times.",
                      "children": []
                    },
                    {
                      "value": "synchronized(f\"upsert_input-{next_node_id}-{graph_exec_id}\"):\n            # Add output data to the earliest incomplete execution, or create a new one.\n            next_node_exec_id, next_node_input = db_client.upsert_execution_input(\n                node_id=next_node_id,\n                graph_exec_id=graph_exec_id,\n                input_name=next_input_name,\n                input_data=next_data,\n            )\n\n            # Complete missing static input pins data using the last execution input.\n            static_link_names = {\n                link.sink_name\n                for link in next_node.input_links\n                if link.is_static and link.sink_name not in next_node_input\n            }\n            if static_link_names and (\n                latest_execution := db_client.get_latest_execution(\n                    next_node_id, graph_exec_id\n                )\n            ):\n                for name in static_link_names:\n                    next_node_input[name] = latest_execution.input_data.get(name)\n\n            # Validate the input data for the next node.\n            next_node_input, validation_msg = validate_exec(next_node, next_node_input)\n            suffix = f\"{next_output_name}>{next_input_name}~{next_node_exec_id}:{validation_msg}\"\n\n            # Incomplete input data, skip queueing the execution.\n            if not next_node_input:\n                log_metadata.warning(f\"Skipped queueing {suffix}\")\n                return enqueued_executions\n\n            # Input is complete, enqueue the execution.\n            log_metadata.info(f\"Enqueued {suffix}\")\n            enqueued_executions.append(\n                add_enqueued_execution(next_node_exec_id, next_node_id, next_node_input)\n            )\n\n            # Next execution stops here if the link is not static.\n            if not node_link.is_static:\n                return enqueued_executions\n\n            # If link is static, there could be some incomplete executions waiting for it.\n            # Load and complete the input missing input data, and try to re-enqueue them.\n            for iexec in db_client.get_incomplete_executions(\n                next_node_id, graph_exec_id\n            ):\n                idata = iexec.input_data\n                ineid = iexec.node_exec_id\n\n                static_link_names = {\n                    link.sink_name\n                    for link in next_node.input_links\n                    if link.is_static and link.sink_name not in idata\n                }\n                for input_name in static_link_names:\n                    idata[input_name] = next_node_input[input_name]\n\n                idata, msg = validate_exec(next_node, idata)\n                suffix = f\"{next_output_name}>{next_input_name}~{ineid}:{msg}\"\n                if not idata:\n                    log_metadata.info(f\"Enqueueing static-link skipped: {suffix}\")\n                    continue\n                log_metadata.info(f\"Enqueueing static-link execution {suffix}\")\n                enqueued_executions.append(\n                    add_enqueued_execution(iexec.node_exec_id, next_node_id, idata)\n                )\n            return enqueued_executions",
                      "children": [
                        {
                          "value": "hronized(f\"upsert_input-{next_node_id}-{graph_exec_id}\"):",
                          "children": [
                            {
                              "value": "hronized(f\"upsert_input-{next_node_id}-{graph_exec_id}\"):",
                              "children": [
                                {
                                  "value": "hronized(f\"upsert_input-{next_node_id}-{graph_exec_id}\"):",
                                  "children": [
                                    {
                                      "value": "hronized(f\"u",
                                      "children": []
                                    },
                                    {
                                      "value": "psert_input-{next_node_id}-{graph_exec_id}\"):",
                                      "children": [
                                        {
                                          "value": "sert_input-{next_node_id}-{graph_exec_id}\"):",
                                          "children": [
                                            {
                                              "value": "se",
                                              "children": []
                                            },
                                            {
                                              "value": "rt_input-{nex",
                                              "children": []
                                            },
                                            {
                                              "value": "t_node_id}-{gr",
                                              "children": [
                                                {
                                                  "value": "_node_id}-{g",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "a",
                                              "children": []
                                            },
                                            {
                                              "value": "ph_exec_id}\"):",
                                              "children": [
                                                {
                                                  "value": "h_exec_id}\"):",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "d output data to the earliest incomplete execution, or create a new one.",
                          "children": []
                        },
                        {
                          "value": "_node_exec_id, next_node_input = db_client.upsert_execution_input(\n                node_id=next_node_id,\n                graph_exec_id=graph_exec_id,\n                input_name=next_input_name,\n                input_data=next_data,\n            )\n\n            # Complete missing static input pins data using the last execution input.\n            static_link_names = {\n                link.sink_name\n                for link in next_node.input_links\n                if link.is_static and link.sink_name not in next_node_input\n            }\n            if static_link_names and (\n                latest_execution := db_client.get_latest_execution(\n                    next_node_id, graph_exec_id\n                )\n            ):\n                for name in static_link_names:\n                    next_node_input[name] = latest_execution.input_data.get(name)\n\n            # Validate the input data for the next node.\n            next_node_input, validation_msg = validate_exec(next_node, next_node_input)\n            suffix = f\"{next_output_name}>{next_input_name}~{next_node_exec_id}:{validation_msg}\"\n\n            # Incomplete input data, skip queueing the execution.\n            if not next_node_input:\n                log_metadata.warning(f\"Skipped queueing {suffix}\")\n                return enqueued_executions\n\n            # Input is complete, enqueue the execution.\n            log_metadata.info(f\"Enqueued {suffix}\")\n            enqueued_executions.append(\n                add_enqueued_execution(next_node_exec_id, next_node_id, next_node_input)\n            )\n\n            # Next execution stops here if the link is not static.\n            if not node_link.is_static:\n                return enqueued_executions\n\n            # If link is static, there could be some incomplete executions waiting for it.\n            # Load and complete the input missing input data, and try to re-enqueue them.\n            for iexec in db_client.get_incomplete_executions(\n                next_node_id, graph_exec_id\n            ):\n                idata = iexec.input_data\n                ineid = iexec.node_exec_id\n\n                static_link_names = {\n                    link.sink_name\n                    for link in next_node.input_links\n                    if link.is_static and link.sink_name not in idata\n                }\n                for input_name in static_link_names:\n                    idata[input_name] = next_node_input[input_name]\n\n                idata, msg = validate_exec(next_node, idata)\n                suffix = f\"{next_output_name}>{next_input_name}~{ineid}:{msg}\"\n                if not idata:\n                    log_metadata.info(f\"Enqueueing static-link skipped: {suffix}\")\n                    continue\n                log_metadata.info(f\"Enqueueing static-link execution {suffix}\")\n                enqueued_executions.append(\n                    add_enqueued_execution(iexec.node_exec_id, next_node_id, idata)\n                )\n            return enqueued_executions",
                          "children": [
                            {
                              "value": "_node_exec_id, next_node_input = db_client.upsert_execution_input(\n                node_id=next_node_id,\n                graph_exec_id=graph_exec_id,\n                input_name=next_input_name,\n                input_data=next_data,\n            )",
                              "children": [
                                {
                                  "value": "_node_exec_id, next_node_input = db_client.upsert_execution_input(\n                node_id=next_node_id,\n                graph_exec_id=graph_exec_id,\n                input_name=next_input_name,\n                input_data=next_data,\n            )",
                                  "children": [
                                    {
                                      "value": "_node_exec_id, next_node_input = d",
                                      "children": [
                                        {
                                          "value": "_node_exec_id, ne",
                                          "children": []
                                        },
                                        {
                                          "value": "_node_input = d",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "lient.upsert_execution_input(\n                node_id=next_node_id,\n                graph_exec_id=graph_exec_id,\n                input_name=next_input_name,\n                input_data=next_data,\n            )",
                                      "children": [
                                        {
                                          "value": "lient.upsert_execution_input(",
                                          "children": [
                                            {
                                              "value": "lient.ups",
                                              "children": []
                                            },
                                            {
                                              "value": "rt_execution_input(",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "node_id=next_node_id,\n                graph_exec_id=graph_exec_id,\n                input_name=next_input_name,\n                input_data=next_data,\n            )",
                                          "children": [
                                            {
                                              "value": "_id=next_node_id,",
                                              "children": [
                                                {
                                                  "value": "_id=nex",
                                                  "children": []
                                                },
                                                {
                                                  "value": "_node_id,",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "h_exec_id=graph_exec_id,",
                                              "children": [
                                                {
                                                  "value": "h_exec_id=gra",
                                                  "children": []
                                                },
                                                {
                                                  "value": "h_exec_id,",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "t_name=next_input_name,",
                                              "children": [
                                                {
                                                  "value": "t_name=nex",
                                                  "children": []
                                                },
                                                {
                                                  "value": "_input_name,",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "t_data=next_data,",
                                              "children": [
                                                {
                                                  "value": "t_data=nex",
                                                  "children": []
                                                },
                                                {
                                                  "value": "_data,",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "mplete missing static input pins data using the last execution input.",
                              "children": []
                            },
                            {
                              "value": "ic_link_names = {\n                link.sink_name\n                for link in next_node.input_links\n                if link.is_static and link.sink_name not in next_node_input\n            }",
                              "children": [
                                {
                                  "value": "ic_link_names = {\n                link.sink_name\n                for link in next_node.input_links\n                if link.is_static and link.sink_name not in next_node_input\n            }",
                                  "children": [
                                    {
                                      "value": "ic_link_names = {",
                                      "children": []
                                    },
                                    {
                                      "value": "link.sink_name\n                for link in next_node.input_links\n                if link.is_static and link.sink_name not in next_node_input\n            }",
                                      "children": [
                                        {
                                          "value": ".sink_name",
                                          "children": [
                                            {
                                              "value": ".sin",
                                              "children": []
                                            },
                                            {
                                              "value": "_name",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "link in next_node.input_links",
                                          "children": [
                                            {
                                              "value": "in",
                                              "children": []
                                            },
                                            {
                                              "value": "_node.input_links",
                                              "children": [
                                                {
                                                  "value": "_node.inp",
                                                  "children": []
                                                },
                                                {
                                                  "value": "t_links",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "ink.is_static and link.sink_name not in next_node_input",
                                          "children": [
                                            {
                                              "value": ".is_static and link.sink_name not in next_node_input",
                                              "children": [
                                                {
                                                  "value": ".is_static and",
                                                  "children": [
                                                    {
                                                      "value": ".is_",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "tatic and",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": ".sink_name not in next_node_input",
                                                  "children": [
                                                    {
                                                      "value": ".sink_name not",
                                                      "children": [
                                                        {
                                                          "value": ".sin",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "_name not",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "_node_input",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "tatic_link_names and (\n                latest_execution := db_client.get_latest_execution(\n                    next_node_id, graph_exec_id\n                )\n            ):\n                for name in static_link_names:\n                    next_node_input[name] = latest_execution.input_data.get(name)",
                              "children": [
                                {
                                  "value": "ic_link_names and (\n                latest_execution := db_client.get_latest_execution(\n                    next_node_id, graph_exec_id\n                )\n            ):",
                                  "children": [
                                    {
                                      "value": "ic_link_names and",
                                      "children": []
                                    },
                                    {
                                      "value": "latest_execution := db_client.get_latest_execution(\n                    next_node_id, graph_exec_id\n                )\n            ):",
                                      "children": [
                                        {
                                          "value": "st_execution := db_client.get_latest_execution(\n                    next_node_id, graph_exec_id\n                )",
                                          "children": [
                                            {
                                              "value": "st_execution :=",
                                              "children": []
                                            },
                                            {
                                              "value": "lient.get_latest_execution(\n                    next_node_id, graph_exec_id\n                )",
                                              "children": [
                                                {
                                                  "value": "lient.get_latest_execution(",
                                                  "children": [
                                                    {
                                                      "value": "lient.get",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "latest_execution(",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "next_node_id, graph_exec_id\n                )",
                                                  "children": [
                                                    {
                                                      "value": "_node_id, gr",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "h_exec_id",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "name in static_link_names:\n                    next_node_input[name] = latest_execution.input_data.get(name)",
                                  "children": [
                                    {
                                      "value": "name in static_link_names:\n                    next_node_input[name] = latest_execution.input_data.get(name)",
                                      "children": [
                                        {
                                          "value": "in",
                                          "children": []
                                        },
                                        {
                                          "value": "ic_link_names:",
                                          "children": []
                                        },
                                        {
                                          "value": "_node_input[name] = latest_execution.input_data.get(name)",
                                          "children": [
                                            {
                                              "value": "_node_input[name] = latest_execution.input_data.get(name)",
                                              "children": [
                                                {
                                                  "value": "_node_input[name] = latest_execution.input_data.get(name)",
                                                  "children": [
                                                    {
                                                      "value": "_node_input[name] = l",
                                                      "children": [
                                                        {
                                                          "value": "_node_input[nam",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "] =",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "st_execution.input_data.get(name)",
                                                      "children": [
                                                        {
                                                          "value": "st_execution.input_data.get(nam",
                                                          "children": [
                                                            {
                                                              "value": "st_execution.input_data.get",
                                                              "children": [
                                                                {
                                                                  "value": "st_execution.inp",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "t_data.get",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "nam",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "e)",
                                                          "children": [
                                                            {
                                                              "value": ")",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "lidate the input data for the next node.",
                              "children": []
                            },
                            {
                              "value": "_node_input, validation_msg = validate_exec(next_node, next_node_input)",
                              "children": [
                                {
                                  "value": "_node_input, validation_msg = validate_exec(next_node, next_node_input)",
                                  "children": [
                                    {
                                      "value": "_node_input, validation_msg = v",
                                      "children": [
                                        {
                                          "value": "_node_input, va",
                                          "children": []
                                        },
                                        {
                                          "value": "dation_msg = v",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "date_exec(next_node, next_node_input)",
                                      "children": [
                                        {
                                          "value": "date_exec(nex",
                                          "children": []
                                        },
                                        {
                                          "value": "t_node, next_node_input)",
                                          "children": [
                                            {
                                              "value": "_node, ne",
                                              "children": []
                                            },
                                            {
                                              "value": "_node_input)",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "ix = f\"{next_output_name}>{next_input_name}~{next_node_exec_id}:{validation_msg}\"",
                              "children": [
                                {
                                  "value": "ix = f\"{next_output_name}>{next_input_name}~{next_node_exec_id}:{validation_msg}\"",
                                  "children": [
                                    {
                                      "value": "ix = f",
                                      "children": []
                                    },
                                    {
                                      "value": "ext_output_name}>{next_input_name}~{next_node_exec_id}:{validation_msg}\"",
                                      "children": [
                                        {
                                          "value": "ex",
                                          "children": []
                                        },
                                        {
                                          "value": "t_output_name}>{ne",
                                          "children": [
                                            {
                                              "value": "_output_name}>{n",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "x",
                                          "children": []
                                        },
                                        {
                                          "value": "t_input_name}~{ne",
                                          "children": [
                                            {
                                              "value": "_input_name}~{n",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "x",
                                          "children": []
                                        },
                                        {
                                          "value": "t_node_exec_id}:{va",
                                          "children": [
                                            {
                                              "value": "_node_exec_id}:{v",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "l",
                                          "children": []
                                        },
                                        {
                                          "value": "idation_msg}\"",
                                          "children": [
                                            {
                                              "value": "dation_msg}\"",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "complete input data, skip queueing the execution.",
                              "children": []
                            },
                            {
                              "value": "ot next_node_input:\n                log_metadata.warning(f\"Skipped queueing {suffix}\")\n                return enqueued_executions",
                              "children": [
                                {
                                  "value": "next_node_input:",
                                  "children": [
                                    {
                                      "value": "_node_input:",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "metadata.warning(f\"Skipped queueing {suffix}\")\n                return enqueued_executions",
                                  "children": [
                                    {
                                      "value": "metadata.warning(f\"Skipped queueing {suffix}\")",
                                      "children": [
                                        {
                                          "value": "metadata.warning(f\"Skipped queueing {suffix}\")",
                                          "children": [
                                            {
                                              "value": "metadata.warning(f\"S",
                                              "children": [
                                                {
                                                  "value": "metadata.war",
                                                  "children": []
                                                },
                                                {
                                                  "value": "ing(f\"S",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "kipped queueing {suffix}\")",
                                              "children": [
                                                {
                                                  "value": "ipped queueing {suffix}\")",
                                                  "children": [
                                                    {
                                                      "value": "ip",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "ped queueing {suf",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "fix}\")",
                                                      "children": [
                                                        {
                                                          "value": "ix}\")",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "rn enqueued_executions",
                                      "children": [
                                        {
                                          "value": "eued_executions",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "put is complete, enqueue the execution.",
                              "children": []
                            },
                            {
                              "value": "metadata.info(f\"Enqueued {suffix}\")",
                              "children": [
                                {
                                  "value": "metadata.info(f\"Enqueued {suffix}\")",
                                  "children": [
                                    {
                                      "value": "metadata.info(f\"E",
                                      "children": [
                                        {
                                          "value": "metadata.inf",
                                          "children": []
                                        },
                                        {
                                          "value": "(f\"E",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "nqueued {suffix}\")",
                                      "children": [
                                        {
                                          "value": "queued {suffix}\")",
                                          "children": [
                                            {
                                              "value": "qu",
                                              "children": []
                                            },
                                            {
                                              "value": "eued {suf",
                                              "children": []
                                            },
                                            {
                                              "value": "fix}\")",
                                              "children": [
                                                {
                                                  "value": "ix}\")",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "eued_executions.append(\n                add_enqueued_execution(next_node_exec_id, next_node_id, next_node_input)\n            )",
                              "children": [
                                {
                                  "value": "eued_executions.append(\n                add_enqueued_execution(next_node_exec_id, next_node_id, next_node_input)\n            )",
                                  "children": [
                                    {
                                      "value": "eued_executions.append(",
                                      "children": [
                                        {
                                          "value": "eued_executions.app",
                                          "children": []
                                        },
                                        {
                                          "value": "nd(",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "add_enqueued_execution(next_node_exec_id, next_node_id, next_node_input)\n            )",
                                      "children": [
                                        {
                                          "value": "enqueued_execution(next_node_exec_id, next_node_id, next_node_input)",
                                          "children": [
                                            {
                                              "value": "enqueued_execution(nex",
                                              "children": []
                                            },
                                            {
                                              "value": "t_node_exec_id, next_node_id, next_node_input)",
                                              "children": [
                                                {
                                                  "value": "_node_exec_id, ne",
                                                  "children": []
                                                },
                                                {
                                                  "value": "_node_id, ne",
                                                  "children": []
                                                },
                                                {
                                                  "value": "_node_input)",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "xt execution stops here if the link is not static.",
                              "children": []
                            },
                            {
                              "value": "ot node_link.is_static:\n                return enqueued_executions",
                              "children": [
                                {
                                  "value": "node_link.is_static:",
                                  "children": [
                                    {
                                      "value": "_link.is_static:",
                                      "children": [
                                        {
                                          "value": "_link.is_",
                                          "children": []
                                        },
                                        {
                                          "value": "tatic:",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "rn enqueued_executions",
                                  "children": [
                                    {
                                      "value": "rn enqueued_executions",
                                      "children": [
                                        {
                                          "value": "eued_executions",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "link is static, there could be some incomplete executions waiting for it.",
                              "children": []
                            },
                            {
                              "value": "ad and complete the input missing input data, and try to re-enqueue them.",
                              "children": []
                            },
                            {
                              "value": "iexec in db_client.get_incomplete_executions(\n                next_node_id, graph_exec_id\n            ):\n                idata = iexec.input_data\n                ineid = iexec.node_exec_id\n\n                static_link_names = {\n                    link.sink_name\n                    for link in next_node.input_links\n                    if link.is_static and link.sink_name not in idata\n                }\n                for input_name in static_link_names:\n                    idata[input_name] = next_node_input[input_name]\n\n                idata, msg = validate_exec(next_node, idata)\n                suffix = f\"{next_output_name}>{next_input_name}~{ineid}:{msg}\"\n                if not idata:\n                    log_metadata.info(f\"Enqueueing static-link skipped: {suffix}\")\n                    continue\n                log_metadata.info(f\"Enqueueing static-link execution {suffix}\")\n                enqueued_executions.append(\n                    add_enqueued_execution(iexec.node_exec_id, next_node_id, idata)\n                )",
                              "children": [
                                {
                                  "value": "c in",
                                  "children": []
                                },
                                {
                                  "value": "lient.get_incomplete_executions(\n                next_node_id, graph_exec_id\n            ):",
                                  "children": [
                                    {
                                      "value": "lient.get_incomplete_executions(",
                                      "children": [
                                        {
                                          "value": "lient.get",
                                          "children": []
                                        },
                                        {
                                          "value": "incomplete_executions(",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "next_node_id, graph_exec_id\n            ):",
                                      "children": [
                                        {
                                          "value": "_node_id, gr",
                                          "children": []
                                        },
                                        {
                                          "value": "h_exec_id",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "a = iexec.input_data\n                ineid = iexec.node_exec_id\n\n                static_link_names = {\n                    link.sink_name\n                    for link in next_node.input_links\n                    if link.is_static and link.sink_name not in idata\n                }\n                for input_name in static_link_names:\n                    idata[input_name] = next_node_input[input_name]\n\n                idata, msg = validate_exec(next_node, idata)\n                suffix = f\"{next_output_name}>{next_input_name}~{ineid}:{msg}\"\n                if not idata:\n                    log_metadata.info(f\"Enqueueing static-link skipped: {suffix}\")\n                    continue\n                log_metadata.info(f\"Enqueueing static-link execution {suffix}\")\n                enqueued_executions.append(\n                    add_enqueued_execution(iexec.node_exec_id, next_node_id, idata)\n                )",
                                  "children": [
                                    {
                                      "value": "a = iexec.input_data",
                                      "children": [
                                        {
                                          "value": "a = iexec.input_data",
                                          "children": [
                                            {
                                              "value": "a = i",
                                              "children": []
                                            },
                                            {
                                              "value": "c.input_data",
                                              "children": [
                                                {
                                                  "value": "c.inp",
                                                  "children": []
                                                },
                                                {
                                                  "value": "t_data",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "d = iexec.node_exec_id",
                                      "children": [
                                        {
                                          "value": "d = iexec.node_exec_id",
                                          "children": [
                                            {
                                              "value": "d = i",
                                              "children": []
                                            },
                                            {
                                              "value": "c.node_exec_id",
                                              "children": [
                                                {
                                                  "value": "c.nod",
                                                  "children": []
                                                },
                                                {
                                                  "value": "_exec_id",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "ic_link_names = {\n                    link.sink_name\n                    for link in next_node.input_links\n                    if link.is_static and link.sink_name not in idata\n                }",
                                      "children": [
                                        {
                                          "value": "ic_link_names = {\n                    link.sink_name\n                    for link in next_node.input_links\n                    if link.is_static and link.sink_name not in idata\n                }",
                                          "children": [
                                            {
                                              "value": "ic_link_names = {",
                                              "children": []
                                            },
                                            {
                                              "value": "link.sink_name\n                    for link in next_node.input_links\n                    if link.is_static and link.sink_name not in idata\n                }",
                                              "children": [
                                                {
                                                  "value": ".sink_name",
                                                  "children": [
                                                    {
                                                      "value": ".sin",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "_name",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "link in next_node.input_links",
                                                  "children": [
                                                    {
                                                      "value": "in",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "_node.input_links",
                                                      "children": [
                                                        {
                                                          "value": "_node.inp",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "t_links",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "ink.is_static and link.sink_name not in idata",
                                                  "children": [
                                                    {
                                                      "value": ".is_static and link.sink_name not in idata",
                                                      "children": [
                                                        {
                                                          "value": ".is_static and",
                                                          "children": [
                                                            {
                                                              "value": ".is_",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "tatic and",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": ".sink_name not in idata",
                                                          "children": [
                                                            {
                                                              "value": ".sink_name not",
                                                              "children": [
                                                                {
                                                                  "value": ".sin",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "_name not",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "a",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "input_name in static_link_names:\n                    idata[input_name] = next_node_input[input_name]",
                                      "children": [
                                        {
                                          "value": "t_name in",
                                          "children": []
                                        },
                                        {
                                          "value": "ic_link_names:",
                                          "children": []
                                        },
                                        {
                                          "value": "a[input_name] = next_node_input[input_name]",
                                          "children": [
                                            {
                                              "value": "a[input_name] = next_node_input[input_name]",
                                              "children": [
                                                {
                                                  "value": "a[input_name] = next_node_input[input_name]",
                                                  "children": [
                                                    {
                                                      "value": "a[input_name] = n",
                                                      "children": [
                                                        {
                                                          "value": "a[inp",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "t_name] =",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "_node_input[input_name]",
                                                      "children": [
                                                        {
                                                          "value": "_node_input[inp",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "t_name]",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "a, msg = validate_exec(next_node, idata)",
                                      "children": [
                                        {
                                          "value": "a, msg = validate_exec(next_node, idata)",
                                          "children": [
                                            {
                                              "value": "a, msg = v",
                                              "children": [
                                                {
                                                  "value": "a, ms",
                                                  "children": []
                                                },
                                                {
                                                  "value": "= v",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "date_exec(next_node, idata)",
                                              "children": [
                                                {
                                                  "value": "date_exec(nex",
                                                  "children": []
                                                },
                                                {
                                                  "value": "t_node, idata)",
                                                  "children": [
                                                    {
                                                      "value": "_node, id",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "a)",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "ix = f\"{next_output_name}>{next_input_name}~{ineid}:{msg}\"",
                                      "children": [
                                        {
                                          "value": "ix = f\"{next_output_name}>{next_input_name}~{ineid}:{msg}\"",
                                          "children": [
                                            {
                                              "value": "ix = f",
                                              "children": []
                                            },
                                            {
                                              "value": "ext_output_name}>{next_input_name}~{ineid}:{msg}\"",
                                              "children": [
                                                {
                                                  "value": "ex",
                                                  "children": []
                                                },
                                                {
                                                  "value": "t_output_name}>{ne",
                                                  "children": [
                                                    {
                                                      "value": "_output_name}>{n",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "x",
                                                  "children": []
                                                },
                                                {
                                                  "value": "t_input_name}~{in",
                                                  "children": [
                                                    {
                                                      "value": "_input_name}~{i",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "e",
                                                  "children": []
                                                },
                                                {
                                                  "value": "id}:{ms",
                                                  "children": [
                                                    {
                                                      "value": "d}:{m",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "g",
                                                  "children": []
                                                },
                                                {
                                                  "value": "}\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "ot idata:\n                    log_metadata.info(f\"Enqueueing static-link skipped: {suffix}\")\n                    continue",
                                      "children": [
                                        {
                                          "value": "idata:",
                                          "children": [
                                            {
                                              "value": "a:",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "metadata.info(f\"Enqueueing static-link skipped: {suffix}\")\n                    continue",
                                          "children": [
                                            {
                                              "value": "metadata.info(f\"Enqueueing static-link skipped: {suffix}\")",
                                              "children": [
                                                {
                                                  "value": "metadata.info(f\"Enqueueing static-link skipped: {suffix}\")",
                                                  "children": [
                                                    {
                                                      "value": "metadata.info(f\"E",
                                                      "children": [
                                                        {
                                                          "value": "metadata.inf",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "(f\"E",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "nqueueing static-link skipped: {suffix}\")",
                                                      "children": [
                                                        {
                                                          "value": "queueing static-link skipped: {suffix}\")",
                                                          "children": [
                                                            {
                                                              "value": "qu",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "eueing static-link skipped: {suf",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "fix}\")",
                                                              "children": [
                                                                {
                                                                  "value": "ix}\")",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "inue",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "metadata.info(f\"Enqueueing static-link execution {suffix}\")",
                                      "children": [
                                        {
                                          "value": "metadata.info(f\"Enqueueing static-link execution {suffix}\")",
                                          "children": [
                                            {
                                              "value": "metadata.info(f\"E",
                                              "children": [
                                                {
                                                  "value": "metadata.inf",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(f\"E",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "nqueueing static-link execution {suffix}\")",
                                              "children": [
                                                {
                                                  "value": "queueing static-link execution {suffix}\")",
                                                  "children": [
                                                    {
                                                      "value": "qu",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "eueing static-link execution {suf",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "fix}\")",
                                                      "children": [
                                                        {
                                                          "value": "ix}\")",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "eued_executions.append(\n                    add_enqueued_execution(iexec.node_exec_id, next_node_id, idata)\n                )",
                                      "children": [
                                        {
                                          "value": "eued_executions.append(\n                    add_enqueued_execution(iexec.node_exec_id, next_node_id, idata)\n                )",
                                          "children": [
                                            {
                                              "value": "eued_executions.append(",
                                              "children": [
                                                {
                                                  "value": "eued_executions.app",
                                                  "children": []
                                                },
                                                {
                                                  "value": "nd(",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "add_enqueued_execution(iexec.node_exec_id, next_node_id, idata)\n                )",
                                              "children": [
                                                {
                                                  "value": "enqueued_execution(iexec.node_exec_id, next_node_id, idata)",
                                                  "children": [
                                                    {
                                                      "value": "enqueued_execution(iex",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "ec.node_exec_id, next_node_id, idata)",
                                                      "children": [
                                                        {
                                                          "value": "c.node_exec_id, ne",
                                                          "children": [
                                                            {
                                                              "value": "c.nod",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "_exec_id, ne",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "_node_id, id",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "a)",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "rn enqueued_executions",
                              "children": [
                                {
                                  "value": "eued_executions",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "rn [\n        execution\n        for link in node.output_links\n        for execution in register_next_executions(link)\n    ]\n\n\nd",
              "children": [
                {
                  "value": "execution\n        for link in node.output_links\n        for execution in register_next_executions(link)\n    ]\n\n\nd",
                  "children": [
                    {
                      "value": "ution",
                      "children": []
                    },
                    {
                      "value": "link in node.output_links",
                      "children": [
                        {
                          "value": "in",
                          "children": []
                        },
                        {
                          "value": ".output_links",
                          "children": [
                            {
                              "value": ".out",
                              "children": []
                            },
                            {
                              "value": "ut_links",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "execution in register_next_executions(link)",
                      "children": [
                        {
                          "value": "ution in",
                          "children": []
                        },
                        {
                          "value": "ster_next_executions(link)",
                          "children": [
                            {
                              "value": "ster_next_executions(lin",
                              "children": []
                            },
                            {
                              "value": "k)",
                              "children": [
                                {
                                  "value": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "validate_exec(\n    node: Node,\n    data: BlockInput,\n    resolve_input: bool = True,\n) -> tuple[BlockInput | None, str]:\n    \"\"\"\n    Validate the input data for a node execution.\n\n    Args:\n        node: The node to execute.\n        data: The input data for the node execution.\n        resolve_input: Whether to resolve dynamic pins into dict/list/object.\n\n    Returns:\n        A tuple of the validated data and the block name.\n        If the data is invalid, the first element will be None, and the second element\n        will be an error message.\n        If the data is valid, the first element will be the resolved input data, and\n        the second element will be the block name.\n    \"\"\"\n    node_block: Block | None = get_block(node.block_id)\n    if not node_block:\n        return None, f\"Block for {node.block_id} not found.\"\n\n    if isinstance(node_block, AgentExecutorBlock):\n        # Validate the execution metadata for the agent executor block.\n        try:\n            exec_data = AgentExecutorBlock.Input(**node.input_default)\n        except Exception as e:\n            return None, f\"Input data doesn't match {node_block.name}: {str(e)}\"\n\n        # Validation input\n        input_schema = exec_data.input_schema\n        required_fields = set(input_schema[\"required\"])\n        input_default = exec_data.data\n    else:\n        # Convert non-matching data types to the expected input schema.\n        for name, data_type in node_block.input_schema.__annotations__.items():\n            if (value := data.get(name)) and (type(value) is not data_type):\n                data[name] = convert(value, data_type)\n\n        # Validation input\n        input_schema = node_block.input_schema.jsonschema()\n        required_fields = node_block.input_schema.get_required_fields()\n        input_default = node.input_default\n\n    # Input data (without default values) should contain all required fields.\n    error_prefix = f\"Input data missing or mismatch for `{node_block.name}`:\"\n    input_fields_from_nodes = {link.sink_name for link in node.input_links}\n    if not input_fields_from_nodes.issubset(data):\n        return None, f\"{error_prefix} {input_fields_from_nodes - set(data)}\"\n\n    # Merge input data with default values and resolve dynamic dict/list/object pins.\n    data = {**input_default, **data}\n    if resolve_input:\n        data = merge_execution_input(data)\n\n    # Input data post-merge should contain all required fields from the schema.\n    if not required_fields.issubset(data):\n        return None, f\"{error_prefix} {required_fields - set(data)}\"\n\n    # Last validation: Validate the input values against the schema.\n    if error := json.validate_with_jsonschema(schema=input_schema, data=data):\n        error_message = f\"{error_prefix} {error}\"\n        logger.error(error_message)\n        return None, error_message\n\n    return data, node_block.name\n\n\nc",
      "children": [
        {
          "value": "date_exec(",
          "children": []
        },
        {
          "value": "node: Node,\n    data: BlockInput,\n    resolve_input: bool = True,\n) ->",
          "children": [
            {
              "value": ": Node,",
              "children": [
                {
                  "value": ": No",
                  "children": []
                },
                {
                  "value": ",",
                  "children": [
                    {
                      "value": ",",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": ": BlockInput,",
              "children": [
                {
                  "value": ": Bl",
                  "children": []
                },
                {
                  "value": "kInput,",
                  "children": [
                    {
                      "value": "kInput,",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "lve_input: bool = True,\n)",
              "children": [
                {
                  "value": "lve_input: bo",
                  "children": []
                },
                {
                  "value": "= T",
                  "children": [
                    {
                      "value": "= T",
                      "children": []
                    }
                  ]
                },
                {
                  "value": ",\n)",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "e[BlockInput | None, str]:",
          "children": [
            {
              "value": "e[BlockInput | None, str]:",
              "children": [
                {
                  "value": "e[Blo",
                  "children": []
                },
                {
                  "value": "ckInput | None, str]:",
                  "children": [
                    {
                      "value": "kInput | None, st",
                      "children": [
                        {
                          "value": "kInput | None, st",
                          "children": [
                            {
                              "value": "kInput | N",
                              "children": []
                            },
                            {
                              "value": ", st",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": ":",
                      "children": [
                        {
                          "value": ":",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "Validate the input data for a node execution.\n\n    Args:\n        node: The node to execute.\n        data: The input data for the node execution.\n        resolve_input: Whether to resolve dynamic pins into dict/list/object.\n\n    Returns:\n        A tuple of the validated data and the block name.\n        If the data is invalid, the first element will be None, and the second element\n        will be an error message.\n        If the data is valid, the first element will be the resolved input data, and\n        the second element will be the block name.\n    \"\"\"\n    node_block: Block | None = get_block(node.block_id)\n    if not node_block:\n        return None, f\"Block for {node.block_id} not found.\"\n\n    if isinstance(node_block, AgentExecutorBlock):\n        # Validate the execution metadata for the agent executor block.\n        try:\n            exec_data = AgentExecutorBlock.Input(**node.input_default)\n        except Exception as e:\n            return None, f\"Input data doesn't match {node_block.name}: {str(e)}\"\n\n        # Validation input\n        input_schema = exec_data.input_schema\n        required_fields = set(input_schema[\"required\"])\n        input_default = exec_data.data\n    else:\n        # Convert non-matching data types to the expected input schema.\n        for name, data_type in node_block.input_schema.__annotations__.items():\n            if (value := data.get(name)) and (type(value) is not data_type):\n                data[name] = convert(value, data_type)\n\n        # Validation input\n        input_schema = node_block.input_schema.jsonschema()\n        required_fields = node_block.input_schema.get_required_fields()\n        input_default = node.input_default\n\n    # Input data (without default values) should contain all required fields.\n    error_prefix = f\"Input data missing or mismatch for `{node_block.name}`:\"\n    input_fields_from_nodes = {link.sink_name for link in node.input_links}\n    if not input_fields_from_nodes.issubset(data):\n        return None, f\"{error_prefix} {input_fields_from_nodes - set(data)}\"\n\n    # Merge input data with default values and resolve dynamic dict/list/object pins.\n    data = {**input_default, **data}\n    if resolve_input:\n        data = merge_execution_input(data)\n\n    # Input data post-merge should contain all required fields from the schema.\n    if not required_fields.issubset(data):\n        return None, f\"{error_prefix} {required_fields - set(data)}\"\n\n    # Last validation: Validate the input values against the schema.\n    if error := json.validate_with_jsonschema(schema=input_schema, data=data):\n        error_message = f\"{error_prefix} {error}\"\n        logger.error(error_message)\n        return None, error_message\n\n    return data, node_block.name\n\n\nc",
          "children": [
            {
              "value": "Validate the input data for a node execution.\n\n    Args:\n        node: The node to execute.\n        data: The input data for the node execution.\n        resolve_input: Whether to resolve dynamic pins into dict/list/object.\n\n    Returns:\n        A tuple of the validated data and the block name.\n        If the data is invalid, the first element will be None, and the second element\n        will be an error message.\n        If the data is valid, the first element will be the resolved input data, and\n        the second element will be the block name.\n    \"\"\"",
              "children": [
                {
                  "value": "Validate the input data for a node execution.\n\n    Args:\n        node: The node to execute.\n        data: The input data for the node execution.\n        resolve_input: Whether to resolve dynamic pins into dict/list/object.\n\n    Returns:\n        A tuple of the validated data and the block name.\n        If the data is invalid, the first element will be None, and the second element\n        will be an error message.\n        If the data is valid, the first element will be the resolved input data, and\n        the second element will be the block name.\n    \"\"\"",
                  "children": [
                    {
                      "value": "",
                      "children": []
                    },
                    {
                      "value": "Validate the input data for a node execution.\n\n    Args:\n        node: The node to execute.\n        data: The input data for the node execution.\n        resolve_input: Whether to resolve dynamic pins into dict/list/object.\n\n    Returns:\n        A tuple of the validated data and the block name.\n        If the data is invalid, the first element will be None, and the second element\n        will be an error message.\n        If the data is valid, the first element will be the resolved input data, and\n        the second element will be the block name.\n    \"\"\"",
                      "children": []
                    },
                    {
                      "value": "",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "_block: Block | None = get_block(node.block_id)",
              "children": [
                {
                  "value": "_block: Block | None = get_block(node.block_id)",
                  "children": [
                    {
                      "value": "_block: Bl",
                      "children": []
                    },
                    {
                      "value": "k | None = g",
                      "children": [
                        {
                          "value": "k | None = g",
                          "children": [
                            {
                              "value": "k | N",
                              "children": []
                            },
                            {
                              "value": "= g",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "block(node.block_id)",
                      "children": [
                        {
                          "value": "block(nod",
                          "children": []
                        },
                        {
                          "value": "e.block_id)",
                          "children": [
                            {
                              "value": ".block_id)",
                              "children": [
                                {
                                  "value": ".blo",
                                  "children": []
                                },
                                {
                                  "value": "k_id)",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "ot node_block:\n        return None, f\"Block for {node.block_id} not found.\"",
              "children": [
                {
                  "value": "node_block:",
                  "children": [
                    {
                      "value": "_block:",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "rn None, f\"Block for {node.block_id} not found.\"",
                  "children": [
                    {
                      "value": "rn None, f\"Block for {node.block_id} not found.\"",
                      "children": [
                        {
                          "value": ", f\"Block for {node.block_id} not found.\"",
                          "children": [
                            {
                              "value": ", f\"",
                              "children": []
                            },
                            {
                              "value": "ock for {node.block_id} not found.\"",
                              "children": [
                                {
                                  "value": "oc",
                                  "children": []
                                },
                                {
                                  "value": "k for {nod",
                                  "children": []
                                },
                                {
                                  "value": "e.block_id} not",
                                  "children": [
                                    {
                                      "value": ".block_id} no",
                                      "children": [
                                        {
                                          "value": ".blo",
                                          "children": []
                                        },
                                        {
                                          "value": "k_id} no",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "found.\"",
                                  "children": []
                                },
                                {
                                  "value": "",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "sinstance(node_block, AgentExecutorBlock):\n        # Validate the execution metadata for the agent executor block.\n        try:\n            exec_data = AgentExecutorBlock.Input(**node.input_default)\n        except Exception as e:\n            return None, f\"Input data doesn't match {node_block.name}: {str(e)}\"\n\n        # Validation input\n        input_schema = exec_data.input_schema\n        required_fields = set(input_schema[\"required\"])\n        input_default = exec_data.data\n    else:\n        # Convert non-matching data types to the expected input schema.\n        for name, data_type in node_block.input_schema.__annotations__.items():\n            if (value := data.get(name)) and (type(value) is not data_type):\n                data[name] = convert(value, data_type)\n\n        # Validation input\n        input_schema = node_block.input_schema.jsonschema()\n        required_fields = node_block.input_schema.get_required_fields()\n        input_default = node.input_default",
              "children": [
                {
                  "value": "stance(node_block, AgentExecutorBlock):",
                  "children": [
                    {
                      "value": "stance(nod",
                      "children": []
                    },
                    {
                      "value": "e_block, AgentExecutorBlock):",
                      "children": [
                        {
                          "value": "_block, Ag",
                          "children": []
                        },
                        {
                          "value": "tExecutorBlock):",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "lidate the execution metadata for the agent executor block.",
                  "children": []
                },
                {
                  "value": "exec_data = AgentExecutorBlock.Input(**node.input_default)\n        except Exception as e:\n            return None, f\"Input data doesn't match {node_block.name}: {str(e)}\"\n\n        # Validation input\n        input_schema = exec_data.input_schema\n        required_fields = set(input_schema[\"required\"])\n        input_default = exec_data.data",
                  "children": [
                    {
                      "value": "exec_data = AgentExecutorBlock.Input(**node.input_default)\n        except Exception as e:\n            return None, f\"Input data doesn't match {node_block.name}: {str(e)}\"",
                      "children": [
                        {
                          "value": "_data = AgentExecutorBlock.Input(**node.input_default)",
                          "children": [
                            {
                              "value": "_data = AgentExecutorBlock.Input(**node.input_default)",
                              "children": [
                                {
                                  "value": "_data = AgentExecutorBlock.Input(**node.input_default)",
                                  "children": [
                                    {
                                      "value": "_data = A",
                                      "children": []
                                    },
                                    {
                                      "value": "tExecutorBlock.Input(**node.input_default)",
                                      "children": [
                                        {
                                          "value": "tExecutorBlock.Input(**n",
                                          "children": [
                                            {
                                              "value": "tExecutorBlock.Inp",
                                              "children": []
                                            },
                                            {
                                              "value": "t(**n",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "ode.input_default)",
                                          "children": [
                                            {
                                              "value": "de.input_default)",
                                              "children": [
                                                {
                                                  "value": ".input_default)",
                                                  "children": [
                                                    {
                                                      "value": ".inp",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "t_default)",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "pt Exception as e:\n            return None, f\"Input data doesn't match {node_block.name}: {str(e)}\"",
                          "children": [
                            {
                              "value": "ption as e:",
                              "children": [
                                {
                                  "value": "ption as",
                                  "children": []
                                },
                                {
                                  "value": "",
                                  "children": [
                                    {
                                      "value": "",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "rn None, f\"Input data doesn't match {node_block.name}: {str(e)}\"",
                              "children": [
                                {
                                  "value": "rn None, f\"Input data doesn't match {node_block.name}: {str(e)}\"",
                                  "children": [
                                    {
                                      "value": ", f\"Input data doesn't match {node_block.name}: {str(e)}\"",
                                      "children": [
                                        {
                                          "value": ", f\"",
                                          "children": []
                                        },
                                        {
                                          "value": "put data doesn't match {node_block.name}: {str(e)}\"",
                                          "children": [
                                            {
                                              "value": "pu",
                                              "children": []
                                            },
                                            {
                                              "value": "t data doesn't match {nod",
                                              "children": []
                                            },
                                            {
                                              "value": "e_block.name}: {s",
                                              "children": [
                                                {
                                                  "value": "_block.name}: {",
                                                  "children": [
                                                    {
                                                      "value": "_block.nam",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "}: {",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "tr",
                                              "children": []
                                            },
                                            {
                                              "value": "(e)}\"",
                                              "children": [
                                                {
                                                  "value": "e)}\"",
                                                  "children": [
                                                    {
                                                      "value": "e)}",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": [
                                                        {
                                                          "value": "",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "lidation input",
                      "children": []
                    },
                    {
                      "value": "t_schema = exec_data.input_schema",
                      "children": [
                        {
                          "value": "t_schema = exec_data.input_schema",
                          "children": [
                            {
                              "value": "t_schema = e",
                              "children": []
                            },
                            {
                              "value": "_data.input_schema",
                              "children": [
                                {
                                  "value": "_data.inp",
                                  "children": []
                                },
                                {
                                  "value": "t_schema",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "ired_fields = set(input_schema[\"required\"])",
                      "children": [
                        {
                          "value": "ired_fields = set(input_schema[\"required\"])",
                          "children": [
                            {
                              "value": "ired_fields = s",
                              "children": []
                            },
                            {
                              "value": "input_schema[\"required\"])",
                              "children": [
                                {
                                  "value": "inp",
                                  "children": []
                                },
                                {
                                  "value": "ut_schema[\"required\"])",
                                  "children": [
                                    {
                                      "value": "t_schema[\"required\"])",
                                      "children": [
                                        {
                                          "value": "t_schema[\"re",
                                          "children": []
                                        },
                                        {
                                          "value": "uired\"])",
                                          "children": [
                                            {
                                              "value": "u",
                                              "children": []
                                            },
                                            {
                                              "value": "ired\"])",
                                              "children": []
                                            },
                                            {
                                              "value": "",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "t_default = exec_data.data",
                      "children": [
                        {
                          "value": "t_default = exec_data.data",
                          "children": [
                            {
                              "value": "t_default = e",
                              "children": []
                            },
                            {
                              "value": "_data.data",
                              "children": [
                                {
                                  "value": "_data.dat",
                                  "children": []
                                },
                                {
                                  "value": "",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": ":\n        # Convert non-matching data types to the expected input schema.\n        for name, data_type in node_block.input_schema.__annotations__.items():\n            if (value := data.get(name)) and (type(value) is not data_type):\n                data[name] = convert(value, data_type)\n\n        # Validation input\n        input_schema = node_block.input_schema.jsonschema()\n        required_fields = node_block.input_schema.get_required_fields()\n        input_default = node.input_default",
                  "children": [
                    {
                      "value": "nvert non-matching data types to the expected input schema.",
                      "children": []
                    },
                    {
                      "value": "name, data_type in node_block.input_schema.__annotations__.items():\n            if (value := data.get(name)) and (type(value) is not data_type):\n                data[name] = convert(value, data_type)\n\n        # Validation input\n        input_schema = node_block.input_schema.jsonschema()\n        required_fields = node_block.input_schema.get_required_fields()\n        input_default = node.input_default",
                      "children": [
                        {
                          "value": "name, data_type in node_block.input_schema.__annotations__.items():\n            if (value := data.get(name)) and (type(value) is not data_type):\n                data[name] = convert(value, data_type)",
                          "children": [
                            {
                              "value": ", data_type in",
                              "children": [
                                {
                                  "value": ", da",
                                  "children": []
                                },
                                {
                                  "value": "_type in",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "_block.input_schema.__annotations__.items():",
                              "children": [
                                {
                                  "value": "_block.input_schema.__annotations__.items():",
                                  "children": [
                                    {
                                      "value": "_block.input_schema.__annotations__.ite",
                                      "children": [
                                        {
                                          "value": "_block.input_schema.__a",
                                          "children": [
                                            {
                                              "value": "_block.inp",
                                              "children": []
                                            },
                                            {
                                              "value": "t_schema.__a",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "notations__.ite",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "s():",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "value := data.get(name)) and (type(value) is not data_type):\n                data[name] = convert(value, data_type)",
                              "children": [
                                {
                                  "value": "value := data.get(name)) and (type(value) is not data_type):\n                data[name] = convert(value, data_type)",
                                  "children": [
                                    {
                                      "value": "ue := data.get(name)) and (type(value) is not data_type):",
                                      "children": [
                                        {
                                          "value": "ue := data.get(name)) and",
                                          "children": [
                                            {
                                              "value": "e := data.get(name)) an",
                                              "children": [
                                                {
                                                  "value": "e :=",
                                                  "children": []
                                                },
                                                {
                                                  "value": ".get(name)) an",
                                                  "children": [
                                                    {
                                                      "value": ".get(nam",
                                                      "children": [
                                                        {
                                                          "value": ".get",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "nam",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "e)) an",
                                                      "children": [
                                                        {
                                                          "value": ")) a",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "e(value) is not data_type):",
                                          "children": [
                                            {
                                              "value": "(value) is not data_type):",
                                              "children": [
                                                {
                                                  "value": "(value) is",
                                                  "children": [
                                                    {
                                                      "value": "(val",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "ue) is",
                                                      "children": [
                                                        {
                                                          "value": "e) is",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "_type):",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "[name] = convert(value, data_type)",
                                      "children": [
                                        {
                                          "value": "[name] = convert(value, data_type)",
                                          "children": [
                                            {
                                              "value": "[name] = convert(value, data_type)",
                                              "children": [
                                                {
                                                  "value": "[name] = c",
                                                  "children": [
                                                    {
                                                      "value": "[nam",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "] =",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "ert(value, data_type)",
                                                  "children": [
                                                    {
                                                      "value": "ert(val",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "ue, data_type)",
                                                      "children": [
                                                        {
                                                          "value": "e, da",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "_type)",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "lidation input",
                          "children": []
                        },
                        {
                          "value": "t_schema = node_block.input_schema.jsonschema()",
                          "children": [
                            {
                              "value": "t_schema = node_block.input_schema.jsonschema()",
                              "children": [
                                {
                                  "value": "t_schema = n",
                                  "children": []
                                },
                                {
                                  "value": "_block.input_schema.jsonschema()",
                                  "children": [
                                    {
                                      "value": "_block.input_schema.jsonschema()",
                                      "children": [
                                        {
                                          "value": "_block.input_schema.jso",
                                          "children": [
                                            {
                                              "value": "_block.inp",
                                              "children": []
                                            },
                                            {
                                              "value": "t_schema.jso",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "schema()",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "ired_fields = node_block.input_schema.get_required_fields()",
                          "children": [
                            {
                              "value": "ired_fields = node_block.input_schema.get_required_fields()",
                              "children": [
                                {
                                  "value": "ired_fields = n",
                                  "children": []
                                },
                                {
                                  "value": "_block.input_schema.get_required_fields()",
                                  "children": [
                                    {
                                      "value": "_block.input_schema.get_required_fields()",
                                      "children": [
                                        {
                                          "value": "_block.input_schema.get",
                                          "children": [
                                            {
                                              "value": "_block.inp",
                                              "children": []
                                            },
                                            {
                                              "value": "t_schema.get",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "required_fields()",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "t_default = node.input_default",
                          "children": [
                            {
                              "value": "t_default = node.input_default",
                              "children": [
                                {
                                  "value": "t_default = n",
                                  "children": []
                                },
                                {
                                  "value": ".input_default",
                                  "children": [
                                    {
                                      "value": ".inp",
                                      "children": []
                                    },
                                    {
                                      "value": "t_default",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "put data (without default values) should contain all required fields.",
              "children": []
            },
            {
              "value": "r_prefix = f\"Input data missing or mismatch for `{node_block.name}`:\"",
              "children": [
                {
                  "value": "r_prefix = f\"Input data missing or mismatch for `{node_block.name}`:\"",
                  "children": [
                    {
                      "value": "r_prefix = f",
                      "children": []
                    },
                    {
                      "value": "put data missing or mismatch for `{node_block.name}`:\"",
                      "children": [
                        {
                          "value": "pu",
                          "children": []
                        },
                        {
                          "value": "t data missing or mismatch for `{nod",
                          "children": []
                        },
                        {
                          "value": "e_block.name}`:\"",
                          "children": [
                            {
                              "value": "_block.name}`:\"",
                              "children": [
                                {
                                  "value": "_block.nam",
                                  "children": []
                                },
                                {
                                  "value": "}`:\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "",
                          "children": []
                        },
                        {
                          "value": "",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "t_fields_from_nodes = {link.sink_name for link in node.input_links}",
              "children": [
                {
                  "value": "t_fields_from_nodes = {link.sink_name for link in node.input_links}",
                  "children": [
                    {
                      "value": "t_fields_from_nodes = {",
                      "children": []
                    },
                    {
                      "value": "k.sink_name for link in node.input_links}",
                      "children": [
                        {
                          "value": ".sink_name for",
                          "children": [
                            {
                              "value": ".sin",
                              "children": []
                            },
                            {
                              "value": "_name for",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "link in node.input_links}",
                          "children": [
                            {
                              "value": "in",
                              "children": []
                            },
                            {
                              "value": ".input_links}",
                              "children": [
                                {
                                  "value": ".inp",
                                  "children": []
                                },
                                {
                                  "value": "t_links}",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "ot input_fields_from_nodes.issubset(data):\n        return None, f\"{error_prefix} {input_fields_from_nodes - set(data)}\"",
              "children": [
                {
                  "value": "input_fields_from_nodes.issubset(data):",
                  "children": [
                    {
                      "value": "t_fields_from_nodes.issubset(data):",
                      "children": [
                        {
                          "value": "t_fields_from_nodes.issubset(dat",
                          "children": [
                            {
                              "value": "t_fields_from_nodes.iss",
                              "children": []
                            },
                            {
                              "value": "bset(dat",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "a):",
                          "children": [
                            {
                              "value": "):",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "rn None, f\"{error_prefix} {input_fields_from_nodes - set(data)}\"",
                  "children": [
                    {
                      "value": "rn None, f\"{error_prefix} {input_fields_from_nodes - set(data)}\"",
                      "children": [
                        {
                          "value": ", f\"{error_prefix} {input_fields_from_nodes - set(data)}\"",
                          "children": [
                            {
                              "value": ", f\"",
                              "children": []
                            },
                            {
                              "value": "rror_prefix} {input_fields_from_nodes - set(data)}\"",
                              "children": [
                                {
                                  "value": "rr",
                                  "children": []
                                },
                                {
                                  "value": "or_prefix} {in",
                                  "children": [
                                    {
                                      "value": "r_prefix} {i",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "p",
                                  "children": []
                                },
                                {
                                  "value": "ut_fields_from_nodes - set(data)}\"",
                                  "children": [
                                    {
                                      "value": "t_fields_from_nodes - set(data)}\"",
                                      "children": [
                                        {
                                          "value": "t_fields_from_nodes - s",
                                          "children": []
                                        },
                                        {
                                          "value": "data)}\"",
                                          "children": [
                                            {
                                              "value": "dat",
                                              "children": []
                                            },
                                            {
                                              "value": "a)}\"",
                                              "children": [
                                                {
                                                  "value": ")}\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "rge input data with default values and resolve dynamic dict/list/object pins.",
              "children": []
            },
            {
              "value": "= {**input_default, **data}",
              "children": [
                {
                  "value": "= {**input_default, **data}",
                  "children": [
                    {
                      "value": "= {",
                      "children": []
                    },
                    {
                      "value": "nput_default, **data}",
                      "children": [
                        {
                          "value": "put_default, **",
                          "children": [
                            {
                              "value": "t_default, **",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "ta}",
                          "children": [
                            {
                              "value": "}",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "esolve_input:\n        data = merge_execution_input(data)",
              "children": [
                {
                  "value": "lve_input:",
                  "children": []
                },
                {
                  "value": "= merge_execution_input(data)",
                  "children": [
                    {
                      "value": "= merge_execution_input(data)",
                      "children": [
                        {
                          "value": "= merge_execution_input(data)",
                          "children": [
                            {
                              "value": "= m",
                              "children": []
                            },
                            {
                              "value": "e_execution_input(data)",
                              "children": [
                                {
                                  "value": "e_execution_input(dat",
                                  "children": []
                                },
                                {
                                  "value": "a)",
                                  "children": [
                                    {
                                      "value": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "put data post-merge should contain all required fields from the schema.",
              "children": []
            },
            {
              "value": "ot required_fields.issubset(data):\n        return None, f\"{error_prefix} {required_fields - set(data)}\"",
              "children": [
                {
                  "value": "required_fields.issubset(data):",
                  "children": [
                    {
                      "value": "ired_fields.issubset(data):",
                      "children": [
                        {
                          "value": "ired_fields.issubset(dat",
                          "children": [
                            {
                              "value": "ired_fields.iss",
                              "children": []
                            },
                            {
                              "value": "bset(dat",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "a):",
                          "children": [
                            {
                              "value": "):",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "rn None, f\"{error_prefix} {required_fields - set(data)}\"",
                  "children": [
                    {
                      "value": "rn None, f\"{error_prefix} {required_fields - set(data)}\"",
                      "children": [
                        {
                          "value": ", f\"{error_prefix} {required_fields - set(data)}\"",
                          "children": [
                            {
                              "value": ", f\"",
                              "children": []
                            },
                            {
                              "value": "rror_prefix} {required_fields - set(data)}\"",
                              "children": [
                                {
                                  "value": "rr",
                                  "children": []
                                },
                                {
                                  "value": "or_prefix} {re",
                                  "children": [
                                    {
                                      "value": "r_prefix} {r",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "q",
                                  "children": []
                                },
                                {
                                  "value": "uired_fields - set(data)}\"",
                                  "children": [
                                    {
                                      "value": "ired_fields - set(data)}\"",
                                      "children": [
                                        {
                                          "value": "ired_fields - s",
                                          "children": []
                                        },
                                        {
                                          "value": "data)}\"",
                                          "children": [
                                            {
                                              "value": "dat",
                                              "children": []
                                            },
                                            {
                                              "value": "a)}\"",
                                              "children": [
                                                {
                                                  "value": ")}\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "st validation: Validate the input values against the schema.",
              "children": []
            },
            {
              "value": "rror := json.validate_with_jsonschema(schema=input_schema, data=data):\n        error_message = f\"{error_prefix} {error}\"\n        logger.error(error_message)\n        return None, error_message",
              "children": [
                {
                  "value": "r := json.validate_with_jsonschema(schema=input_schema, data=data):",
                  "children": [
                    {
                      "value": "r :=",
                      "children": []
                    },
                    {
                      "value": ".validate_with_jsonschema(schema=input_schema, data=data):",
                      "children": [
                        {
                          "value": ".validate_with_jsonschema(sch",
                          "children": [
                            {
                              "value": ".val",
                              "children": []
                            },
                            {
                              "value": "date_with_jsonschema(sch",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "ema=input_schema, data=data):",
                          "children": [
                            {
                              "value": "ma=input_schema, da",
                              "children": [
                                {
                                  "value": "ma=inp",
                                  "children": []
                                },
                                {
                                  "value": "t_schema, da",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "=data):",
                              "children": [
                                {
                                  "value": "=dat",
                                  "children": []
                                },
                                {
                                  "value": "):",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "r_message = f\"{error_prefix} {error}\"\n        logger.error(error_message)\n        return None, error_message",
                  "children": [
                    {
                      "value": "r_message = f\"{error_prefix} {error}\"",
                      "children": [
                        {
                          "value": "r_message = f\"{error_prefix} {error}\"",
                          "children": [
                            {
                              "value": "r_message = f",
                              "children": []
                            },
                            {
                              "value": "rror_prefix} {error}\"",
                              "children": [
                                {
                                  "value": "rr",
                                  "children": []
                                },
                                {
                                  "value": "or_prefix} {er",
                                  "children": [
                                    {
                                      "value": "r_prefix} {e",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "r",
                                  "children": []
                                },
                                {
                                  "value": "or}\"",
                                  "children": [
                                    {
                                      "value": "r}\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "er.error(error_message)",
                      "children": [
                        {
                          "value": "er.error(error_message)",
                          "children": [
                            {
                              "value": "er.error(err",
                              "children": [
                                {
                                  "value": "er.err",
                                  "children": []
                                },
                                {
                                  "value": "r(err",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "or_message)",
                              "children": [
                                {
                                  "value": "r_message)",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "rn None, error_message",
                      "children": [
                        {
                          "value": ", error_message",
                          "children": [
                            {
                              "value": ", er",
                              "children": []
                            },
                            {
                              "value": "r_message",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "rn data, node_block.name\n\n\nc",
              "children": [
                {
                  "value": ", node_block.name\n\n\nc",
                  "children": [
                    {
                      "value": ", no",
                      "children": []
                    },
                    {
                      "value": "_block.name\n\n\nc",
                      "children": [
                        {
                          "value": "_block.nam",
                          "children": []
                        },
                        {
                          "value": "c",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "s Executor:\n    \"\"\"\n    This class contains event handlers for the process pool executor events.\n\n    The main events are:\n        on_node_executor_start: Initialize the process that executes the node.\n        on_node_execution: Execution logic for a node.\n\n        on_graph_executor_start: Initialize the process that executes the graph.\n        on_graph_execution: Execution logic for a graph.\n\n    The execution flow:\n        1. Graph execution request is added to the queue.\n        2. Graph executor loop picks the request from the queue.\n        3. Graph executor loop submits the graph execution request to the executor pool.\n      [on_graph_execution]\n        4. Graph executor initialize the node execution queue.\n        5. Graph executor adds the starting nodes to the node execution queue.\n        6. Graph executor waits for all nodes to be executed.\n      [on_node_execution]\n        7. Node executor picks the node execution request from the queue.\n        8. Node executor executes the node.\n        9. Node executor enqueues the next executed nodes to the node execution queue.\n    \"\"\"\n\n    @classmethod\n    def on_node_executor_start(cls):\n        configure_logging()\n        set_service_name(\"NodeExecutor\")\n        redis.connect()\n        cls.pid = os.getpid()\n        cls.db_client = get_db_client()\n        cls.creds_manager = IntegrationCredentialsManager()\n\n        # Set up shutdown handlers\n        cls.shutdown_lock = threading.Lock()\n        atexit.register(cls.on_node_executor_stop)  # handle regular shutdown\n        signal.signal(  # handle termination\n            signal.SIGTERM, lambda _, __: cls.on_node_executor_sigterm()\n        )\n\n    @classmethod\n    def on_node_executor_stop(cls):\n        if not cls.shutdown_lock.acquire(blocking=False):\n            return  # already shutting down\n\n        logger.info(f\"[on_node_executor_stop {cls.pid}] \u23f3 Releasing locks...\")\n        cls.creds_manager.release_all_locks()\n        logger.info(f\"[on_node_executor_stop {cls.pid}] \u23f3 Disconnecting Redis...\")\n        redis.disconnect()\n        logger.info(f\"[on_node_executor_stop {cls.pid}] \u23f3 Disconnecting DB manager...\")\n        close_service_client(cls.db_client)\n        logger.info(f\"[on_node_executor_stop {cls.pid}] \u2705 Finished cleanup\")\n\n    @classmethod\n    def on_node_executor_sigterm(cls):\n        llprint(f\"[on_node_executor_sigterm {cls.pid}] \u26a0\ufe0f SIGTERM received\")\n        if not cls.shutdown_lock.acquire(blocking=False):\n            return  # already shutting down\n\n        llprint(f\"[on_node_executor_stop {cls.pid}] \u23f3 Releasing locks...\")\n        cls.creds_manager.release_all_locks()\n        llprint(f\"[on_node_executor_stop {cls.pid}] \u23f3 Disconnecting Redis...\")\n        redis.disconnect()\n        llprint(f\"[on_node_executor_stop {cls.pid}] \u2705 Finished cleanup\")\n        sys.exit(0)\n\n    @classmethod\n    @error_logged\n    def on_node_execution(\n        cls,\n        q: ExecutionQueue[NodeExecutionEntry],\n        node_exec: NodeExecutionEntry,\n    ) -> dict[str, Any]:\n        log_metadata = LogMetadata(\n            user_id=node_exec.user_id,\n            graph_eid=node_exec.graph_exec_id,\n            graph_id=node_exec.graph_id,\n            node_eid=node_exec.node_exec_id,\n            node_id=node_exec.node_id,\n            block_name=\"-\",\n        )\n\n        execution_stats = {}\n        timing_info, _ = cls._on_node_execution(\n            q, node_exec, log_metadata, execution_stats\n        )\n        execution_stats[\"walltime\"] = timing_info.wall_time\n        execution_stats[\"cputime\"] = timing_info.cpu_time\n\n        cls.db_client.update_node_execution_stats(\n            node_exec.node_exec_id, execution_stats\n        )\n        return execution_stats\n\n    @classmethod\n    @time_measured\n    def _on_node_execution(\n        cls,\n        q: ExecutionQueue[NodeExecutionEntry],\n        node_exec: NodeExecutionEntry,\n        log_metadata: LogMetadata,\n        stats: dict[str, Any] | None = None,\n    ):\n        try:\n            log_metadata.info(f\"Start node execution {node_exec.node_exec_id}\")\n            for execution in execute_node(\n                cls.db_client, cls.creds_manager, node_exec, stats\n            ):\n                q.add(execution)\n            log_metadata.info(f\"Finished node execution {node_exec.node_exec_id}\")\n        except Exception as e:\n            log_metadata.exception(\n                f\"Failed node execution {node_exec.node_exec_id}: {e}\"\n            )\n\n    @classmethod\n    def on_graph_executor_start(cls):\n        configure_logging()\n        set_service_name(\"GraphExecutor\")\n\n        cls.db_client = get_db_client()\n        cls.pool_size = settings.config.num_node_workers\n        cls.pid = os.getpid()\n        cls._init_node_executor_pool()\n        logger.info(\n            f\"Graph executor {cls.pid} started with {cls.pool_size} node workers\"\n        )\n\n        # Set up shutdown handler\n        atexit.register(cls.on_graph_executor_stop)\n\n    @classmethod\n    def on_graph_executor_stop(cls):\n        prefix = f\"[on_graph_executor_stop {cls.pid}]\"\n        logger.info(f\"{prefix} \u23f3 Terminating node executor pool...\")\n        cls.executor.terminate()\n        logger.info(f\"{prefix} \u23f3 Disconnecting DB manager...\")\n        close_service_client(cls.db_client)\n        logger.info(f\"{prefix} \u2705 Finished cleanup\")\n\n    @classmethod\n    def _init_node_executor_pool(cls):\n        cls.executor = Pool(\n            processes=cls.pool_size,\n            initializer=cls.on_node_executor_start,\n        )\n\n    @classmethod\n    @error_logged\n    def on_graph_execution(\n        cls, graph_exec: GraphExecutionEntry, cancel: threading.Event\n    ):\n        log_metadata = LogMetadata(\n            user_id=graph_exec.user_id,\n            graph_eid=graph_exec.graph_exec_id,\n            graph_id=graph_exec.graph_id,\n            node_id=\"*\",\n            node_eid=\"*\",\n            block_name=\"-\",\n        )\n        timing_info, (exec_stats, error) = cls._on_graph_execution(\n            graph_exec, cancel, log_metadata\n        )\n        exec_stats[\"walltime\"] = timing_info.wall_time\n        exec_stats[\"cputime\"] = timing_info.cpu_time\n        exec_stats[\"error\"] = str(error) if error else None\n        result = cls.db_client.update_graph_execution_stats(\n            graph_exec_id=graph_exec.graph_exec_id,\n            stats=exec_stats,\n        )\n        cls.db_client.send_execution_update(result)\n\n    @classmethod\n    @time_measured\n    def _on_graph_execution(\n        cls,\n        graph_exec: GraphExecutionEntry,\n        cancel: threading.Event,\n        log_metadata: LogMetadata,\n    ) -> tuple[dict[str, Any], Exception | None]:\n        \"\"\"\n        Returns:\n            The execution statistics of the graph execution.\n            The error that occurred during the execution.\n        \"\"\"\n        log_metadata.info(f\"Start graph execution {graph_exec.graph_exec_id}\")\n        exec_stats = {\n            \"nodes_walltime\": 0,\n            \"nodes_cputime\": 0,\n            \"node_count\": 0,\n        }\n        error = None\n        finished = False\n\n        def cancel_handler():\n            while not cancel.is_set():\n                cancel.wait(1)\n            if finished:\n                return\n            cls.executor.terminate()\n            log_metadata.info(f\"Terminated graph execution {graph_exec.graph_exec_id}\")\n            cls._init_node_executor_pool()\n\n        cancel_thread = threading.Thread(target=cancel_handler)\n        cancel_thread.start()\n\n        try:\n            queue = ExecutionQueue[NodeExecutionEntry]()\n            for node_exec in graph_exec.start_node_execs:\n                queue.add(node_exec)\n\n            running_executions: dict[str, AsyncResult] = {}\n\n            def make_exec_callback(exec_data: NodeExecutionEntry):\n                node_id = exec_data.node_id\n\n                def callback(result: object):\n                    running_executions.pop(node_id)\n                    nonlocal exec_stats\n                    if isinstance(result, dict):\n                        exec_stats[\"node_count\"] += 1\n                        exec_stats[\"nodes_cputime\"] += result.get(\"cputime\", 0)\n                        exec_stats[\"nodes_walltime\"] += result.get(\"walltime\", 0)\n\n                return callback\n\n            while not queue.empty():\n                if cancel.is_set():\n                    error = RuntimeError(\"Execution is cancelled\")\n                    return exec_stats, error\n\n                exec_data = queue.get()\n\n                # Avoid parallel execution of the same node.\n                execution = running_executions.get(exec_data.node_id)\n                if execution and not execution.ready():\n                    # TODO (performance improvement):\n                    #   Wait for the completion of the same node execution is blocking.\n                    #   To improve this we need a separate queue for each node.\n                    #   Re-enqueueing the data back to the queue will disrupt the order.\n                    execution.wait()\n\n                log_metadata.debug(\n                    f\"Dispatching node execution {exec_data.node_exec_id} \"\n                    f\"for node {exec_data.node_id}\",\n                )\n                running_executions[exec_data.node_id] = cls.executor.apply_async(\n                    cls.on_node_execution,\n                    (queue, exec_data),\n                    callback=make_exec_callback(exec_data),\n                )\n\n                # Avoid terminating graph execution when some nodes are still running.\n                while queue.empty() and running_executions:\n                    log_metadata.debug(\n                        f\"Queue empty; running nodes: {list(running_executions.keys())}\"\n                    )\n                    for node_id, execution in list(running_executions.items()):\n                        if cancel.is_set():\n                            error = RuntimeError(\"Execution is cancelled\")\n                            return exec_stats, error\n\n                        if not queue.empty():\n                            break  # yield to parent loop to execute new queue items\n\n                        log_metadata.debug(f\"Waiting on execution of node {node_id}\")\n                        execution.wait(3)\n\n            log_metadata.info(f\"Finished graph execution {graph_exec.graph_exec_id}\")\n        except Exception as e:\n            log_metadata.exception(\n                f\"Failed graph execution {graph_exec.graph_exec_id}: {e}\"\n            )\n            error = e\n        finally:\n            if not cancel.is_set():\n                finished = True\n                cancel.set()\n            cancel_thread.join()\n            return exec_stats, error\n\n\nclass ExecutionManager(Ap",
      "children": [
        {
          "value": "utor:",
          "children": []
        },
        {
          "value": "This class contains event handlers for the process pool executor events.\n\n    The main events are:\n        on_node_executor_start: Initialize the process that executes the node.\n        on_node_execution: Execution logic for a node.\n\n        on_graph_executor_start: Initialize the process that executes the graph.\n        on_graph_execution: Execution logic for a graph.\n\n    The execution flow:\n        1. Graph execution request is added to the queue.\n        2. Graph executor loop picks the request from the queue.\n        3. Graph executor loop submits the graph execution request to the executor pool.\n      [on_graph_execution]\n        4. Graph executor initialize the node execution queue.\n        5. Graph executor adds the starting nodes to the node execution queue.\n        6. Graph executor waits for all nodes to be executed.\n      [on_node_execution]\n        7. Node executor picks the node execution request from the queue.\n        8. Node executor executes the node.\n        9. Node executor enqueues the next executed nodes to the node execution queue.\n    \"\"\"\n\n    @classmethod\n    def on_node_executor_start(cls):\n        configure_logging()\n        set_service_name(\"NodeExecutor\")\n        redis.connect()\n        cls.pid = os.getpid()\n        cls.db_client = get_db_client()\n        cls.creds_manager = IntegrationCredentialsManager()\n\n        # Set up shutdown handlers\n        cls.shutdown_lock = threading.Lock()\n        atexit.register(cls.on_node_executor_stop)  # handle regular shutdown\n        signal.signal(  # handle termination\n            signal.SIGTERM, lambda _, __: cls.on_node_executor_sigterm()\n        )\n\n    @classmethod\n    def on_node_executor_stop(cls):\n        if not cls.shutdown_lock.acquire(blocking=False):\n            return  # already shutting down\n\n        logger.info(f\"[on_node_executor_stop {cls.pid}] \u23f3 Releasing locks...\")\n        cls.creds_manager.release_all_locks()\n        logger.info(f\"[on_node_executor_stop {cls.pid}] \u23f3 Disconnecting Redis...\")\n        redis.disconnect()\n        logger.info(f\"[on_node_executor_stop {cls.pid}] \u23f3 Disconnecting DB manager...\")\n        close_service_client(cls.db_client)\n        logger.info(f\"[on_node_executor_stop {cls.pid}] \u2705 Finished cleanup\")\n\n    @classmethod\n    def on_node_executor_sigterm(cls):\n        llprint(f\"[on_node_executor_sigterm {cls.pid}] \u26a0\ufe0f SIGTERM received\")\n        if not cls.shutdown_lock.acquire(blocking=False):\n            return  # already shutting down\n\n        llprint(f\"[on_node_executor_stop {cls.pid}] \u23f3 Releasing locks...\")\n        cls.creds_manager.release_all_locks()\n        llprint(f\"[on_node_executor_stop {cls.pid}] \u23f3 Disconnecting Redis...\")\n        redis.disconnect()\n        llprint(f\"[on_node_executor_stop {cls.pid}] \u2705 Finished cleanup\")\n        sys.exit(0)\n\n    @classmethod\n    @error_logged\n    def on_node_execution(\n        cls,\n        q: ExecutionQueue[NodeExecutionEntry],\n        node_exec: NodeExecutionEntry,\n    ) -> dict[str, Any]:\n        log_metadata = LogMetadata(\n            user_id=node_exec.user_id,\n            graph_eid=node_exec.graph_exec_id,\n            graph_id=node_exec.graph_id,\n            node_eid=node_exec.node_exec_id,\n            node_id=node_exec.node_id,\n            block_name=\"-\",\n        )\n\n        execution_stats = {}\n        timing_info, _ = cls._on_node_execution(\n            q, node_exec, log_metadata, execution_stats\n        )\n        execution_stats[\"walltime\"] = timing_info.wall_time\n        execution_stats[\"cputime\"] = timing_info.cpu_time\n\n        cls.db_client.update_node_execution_stats(\n            node_exec.node_exec_id, execution_stats\n        )\n        return execution_stats\n\n    @classmethod\n    @time_measured\n    def _on_node_execution(\n        cls,\n        q: ExecutionQueue[NodeExecutionEntry],\n        node_exec: NodeExecutionEntry,\n        log_metadata: LogMetadata,\n        stats: dict[str, Any] | None = None,\n    ):\n        try:\n            log_metadata.info(f\"Start node execution {node_exec.node_exec_id}\")\n            for execution in execute_node(\n                cls.db_client, cls.creds_manager, node_exec, stats\n            ):\n                q.add(execution)\n            log_metadata.info(f\"Finished node execution {node_exec.node_exec_id}\")\n        except Exception as e:\n            log_metadata.exception(\n                f\"Failed node execution {node_exec.node_exec_id}: {e}\"\n            )\n\n    @classmethod\n    def on_graph_executor_start(cls):\n        configure_logging()\n        set_service_name(\"GraphExecutor\")\n\n        cls.db_client = get_db_client()\n        cls.pool_size = settings.config.num_node_workers\n        cls.pid = os.getpid()\n        cls._init_node_executor_pool()\n        logger.info(\n            f\"Graph executor {cls.pid} started with {cls.pool_size} node workers\"\n        )\n\n        # Set up shutdown handler\n        atexit.register(cls.on_graph_executor_stop)\n\n    @classmethod\n    def on_graph_executor_stop(cls):\n        prefix = f\"[on_graph_executor_stop {cls.pid}]\"\n        logger.info(f\"{prefix} \u23f3 Terminating node executor pool...\")\n        cls.executor.terminate()\n        logger.info(f\"{prefix} \u23f3 Disconnecting DB manager...\")\n        close_service_client(cls.db_client)\n        logger.info(f\"{prefix} \u2705 Finished cleanup\")\n\n    @classmethod\n    def _init_node_executor_pool(cls):\n        cls.executor = Pool(\n            processes=cls.pool_size,\n            initializer=cls.on_node_executor_start,\n        )\n\n    @classmethod\n    @error_logged\n    def on_graph_execution(\n        cls, graph_exec: GraphExecutionEntry, cancel: threading.Event\n    ):\n        log_metadata = LogMetadata(\n            user_id=graph_exec.user_id,\n            graph_eid=graph_exec.graph_exec_id,\n            graph_id=graph_exec.graph_id,\n            node_id=\"*\",\n            node_eid=\"*\",\n            block_name=\"-\",\n        )\n        timing_info, (exec_stats, error) = cls._on_graph_execution(\n            graph_exec, cancel, log_metadata\n        )\n        exec_stats[\"walltime\"] = timing_info.wall_time\n        exec_stats[\"cputime\"] = timing_info.cpu_time\n        exec_stats[\"error\"] = str(error) if error else None\n        result = cls.db_client.update_graph_execution_stats(\n            graph_exec_id=graph_exec.graph_exec_id,\n            stats=exec_stats,\n        )\n        cls.db_client.send_execution_update(result)\n\n    @classmethod\n    @time_measured\n    def _on_graph_execution(\n        cls,\n        graph_exec: GraphExecutionEntry,\n        cancel: threading.Event,\n        log_metadata: LogMetadata,\n    ) -> tuple[dict[str, Any], Exception | None]:\n        \"\"\"\n        Returns:\n            The execution statistics of the graph execution.\n            The error that occurred during the execution.\n        \"\"\"\n        log_metadata.info(f\"Start graph execution {graph_exec.graph_exec_id}\")\n        exec_stats = {\n            \"nodes_walltime\": 0,\n            \"nodes_cputime\": 0,\n            \"node_count\": 0,\n        }\n        error = None\n        finished = False\n\n        def cancel_handler():\n            while not cancel.is_set():\n                cancel.wait(1)\n            if finished:\n                return\n            cls.executor.terminate()\n            log_metadata.info(f\"Terminated graph execution {graph_exec.graph_exec_id}\")\n            cls._init_node_executor_pool()\n\n        cancel_thread = threading.Thread(target=cancel_handler)\n        cancel_thread.start()\n\n        try:\n            queue = ExecutionQueue[NodeExecutionEntry]()\n            for node_exec in graph_exec.start_node_execs:\n                queue.add(node_exec)\n\n            running_executions: dict[str, AsyncResult] = {}\n\n            def make_exec_callback(exec_data: NodeExecutionEntry):\n                node_id = exec_data.node_id\n\n                def callback(result: object):\n                    running_executions.pop(node_id)\n                    nonlocal exec_stats\n                    if isinstance(result, dict):\n                        exec_stats[\"node_count\"] += 1\n                        exec_stats[\"nodes_cputime\"] += result.get(\"cputime\", 0)\n                        exec_stats[\"nodes_walltime\"] += result.get(\"walltime\", 0)\n\n                return callback\n\n            while not queue.empty():\n                if cancel.is_set():\n                    error = RuntimeError(\"Execution is cancelled\")\n                    return exec_stats, error\n\n                exec_data = queue.get()\n\n                # Avoid parallel execution of the same node.\n                execution = running_executions.get(exec_data.node_id)\n                if execution and not execution.ready():\n                    # TODO (performance improvement):\n                    #   Wait for the completion of the same node execution is blocking.\n                    #   To improve this we need a separate queue for each node.\n                    #   Re-enqueueing the data back to the queue will disrupt the order.\n                    execution.wait()\n\n                log_metadata.debug(\n                    f\"Dispatching node execution {exec_data.node_exec_id} \"\n                    f\"for node {exec_data.node_id}\",\n                )\n                running_executions[exec_data.node_id] = cls.executor.apply_async(\n                    cls.on_node_execution,\n                    (queue, exec_data),\n                    callback=make_exec_callback(exec_data),\n                )\n\n                # Avoid terminating graph execution when some nodes are still running.\n                while queue.empty() and running_executions:\n                    log_metadata.debug(\n                        f\"Queue empty; running nodes: {list(running_executions.keys())}\"\n                    )\n                    for node_id, execution in list(running_executions.items()):\n                        if cancel.is_set():\n                            error = RuntimeError(\"Execution is cancelled\")\n                            return exec_stats, error\n\n                        if not queue.empty():\n                            break  # yield to parent loop to execute new queue items\n\n                        log_metadata.debug(f\"Waiting on execution of node {node_id}\")\n                        execution.wait(3)\n\n            log_metadata.info(f\"Finished graph execution {graph_exec.graph_exec_id}\")\n        except Exception as e:\n            log_metadata.exception(\n                f\"Failed graph execution {graph_exec.graph_exec_id}: {e}\"\n            )\n            error = e\n        finally:\n            if not cancel.is_set():\n                finished = True\n                cancel.set()\n            cancel_thread.join()\n            return exec_stats, error\n\n\nclass ExecutionManager(Ap",
          "children": [
            {
              "value": "This class contains event handlers for the process pool executor events.\n\n    The main events are:\n        on_node_executor_start: Initialize the process that executes the node.\n        on_node_execution: Execution logic for a node.\n\n        on_graph_executor_start: Initialize the process that executes the graph.\n        on_graph_execution: Execution logic for a graph.\n\n    The execution flow:\n        1. Graph execution request is added to the queue.\n        2. Graph executor loop picks the request from the queue.\n        3. Graph executor loop submits the graph execution request to the executor pool.\n      [on_graph_execution]\n        4. Graph executor initialize the node execution queue.\n        5. Graph executor adds the starting nodes to the node execution queue.\n        6. Graph executor waits for all nodes to be executed.\n      [on_node_execution]\n        7. Node executor picks the node execution request from the queue.\n        8. Node executor executes the node.\n        9. Node executor enqueues the next executed nodes to the node execution queue.\n    \"\"\"",
              "children": [
                {
                  "value": "This class contains event handlers for the process pool executor events.\n\n    The main events are:\n        on_node_executor_start: Initialize the process that executes the node.\n        on_node_execution: Execution logic for a node.\n\n        on_graph_executor_start: Initialize the process that executes the graph.\n        on_graph_execution: Execution logic for a graph.\n\n    The execution flow:\n        1. Graph execution request is added to the queue.\n        2. Graph executor loop picks the request from the queue.\n        3. Graph executor loop submits the graph execution request to the executor pool.\n      [on_graph_execution]\n        4. Graph executor initialize the node execution queue.\n        5. Graph executor adds the starting nodes to the node execution queue.\n        6. Graph executor waits for all nodes to be executed.\n      [on_node_execution]\n        7. Node executor picks the node execution request from the queue.\n        8. Node executor executes the node.\n        9. Node executor enqueues the next executed nodes to the node execution queue.\n    \"\"\"",
                  "children": [
                    {
                      "value": "",
                      "children": []
                    },
                    {
                      "value": "This class contains event handlers for the process pool executor events.\n\n    The main events are:\n        on_node_executor_start: Initialize the process that executes the node.\n        on_node_execution: Execution logic for a node.\n\n        on_graph_executor_start: Initialize the process that executes the graph.\n        on_graph_execution: Execution logic for a graph.\n\n    The execution flow:\n        1. Graph execution request is added to the queue.\n        2. Graph executor loop picks the request from the queue.\n        3. Graph executor loop submits the graph execution request to the executor pool.\n      [on_graph_execution]\n        4. Graph executor initialize the node execution queue.\n        5. Graph executor adds the starting nodes to the node execution queue.\n        6. Graph executor waits for all nodes to be executed.\n      [on_node_execution]\n        7. Node executor picks the node execution request from the queue.\n        8. Node executor executes the node.\n        9. Node executor enqueues the next executed nodes to the node execution queue.\n    \"\"\"",
                      "children": []
                    },
                    {
                      "value": "",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "ssmethod\n    def on_node_executor_start(cls):\n        configure_logging()\n        set_service_name(\"NodeExecutor\")\n        redis.connect()\n        cls.pid = os.getpid()\n        cls.db_client = get_db_client()\n        cls.creds_manager = IntegrationCredentialsManager()\n\n        # Set up shutdown handlers\n        cls.shutdown_lock = threading.Lock()\n        atexit.register(cls.on_node_executor_stop)  # handle regular shutdown\n        signal.signal(  # handle termination\n            signal.SIGTERM, lambda _, __: cls.on_node_executor_sigterm()\n        )",
              "children": [
                {
                  "value": "ssmethod",
                  "children": [
                    {
                      "value": "smethod",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "on_node_executor_start(cls):\n        configure_logging()\n        set_service_name(\"NodeExecutor\")\n        redis.connect()\n        cls.pid = os.getpid()\n        cls.db_client = get_db_client()\n        cls.creds_manager = IntegrationCredentialsManager()\n\n        # Set up shutdown handlers\n        cls.shutdown_lock = threading.Lock()\n        atexit.register(cls.on_node_executor_stop)  # handle regular shutdown\n        signal.signal(  # handle termination\n            signal.SIGTERM, lambda _, __: cls.on_node_executor_sigterm()\n        )",
                  "children": [
                    {
                      "value": "ode_executor_start(cls",
                      "children": []
                    },
                    {
                      "value": "):",
                      "children": [
                        {
                          "value": ":",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "igure_logging()\n        set_service_name(\"NodeExecutor\")\n        redis.connect()\n        cls.pid = os.getpid()\n        cls.db_client = get_db_client()\n        cls.creds_manager = IntegrationCredentialsManager()\n\n        # Set up shutdown handlers\n        cls.shutdown_lock = threading.Lock()\n        atexit.register(cls.on_node_executor_stop)  # handle regular shutdown\n        signal.signal(  # handle termination\n            signal.SIGTERM, lambda _, __: cls.on_node_executor_sigterm()\n        )",
                      "children": [
                        {
                          "value": "igure_logging()",
                          "children": [
                            {
                              "value": "igure_logging()",
                              "children": [
                                {
                                  "value": "igure_logging()",
                                  "children": []
                                },
                                {
                                  "value": "",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "service_name(\"NodeExecutor\")",
                          "children": [
                            {
                              "value": "service_name(\"NodeExecutor\")",
                              "children": [
                                {
                                  "value": "service_name(\"No",
                                  "children": []
                                },
                                {
                                  "value": "deExecutor\")",
                                  "children": [
                                    {
                                      "value": "eExecutor\")",
                                      "children": [
                                        {
                                          "value": "e",
                                          "children": []
                                        },
                                        {
                                          "value": "Executor\")",
                                          "children": []
                                        },
                                        {
                                          "value": "",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "s.connect()",
                          "children": [
                            {
                              "value": "s.connect()",
                              "children": [
                                {
                                  "value": "s.connect()",
                                  "children": [
                                    {
                                      "value": "s.con",
                                      "children": []
                                    },
                                    {
                                      "value": "ect()",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "pid = os.getpid()",
                          "children": [
                            {
                              "value": "pid = os.getpid()",
                              "children": [
                                {
                                  "value": "pid = o",
                                  "children": [
                                    {
                                      "value": "pid",
                                      "children": []
                                    },
                                    {
                                      "value": "= o",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "etpid()",
                                  "children": [
                                    {
                                      "value": "etpid()",
                                      "children": [
                                        {
                                          "value": "et",
                                          "children": []
                                        },
                                        {
                                          "value": "id()",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "db_client = get_db_client()",
                          "children": [
                            {
                              "value": "db_client = get_db_client()",
                              "children": [
                                {
                                  "value": "db_client = g",
                                  "children": [
                                    {
                                      "value": "db_",
                                      "children": []
                                    },
                                    {
                                      "value": "lient = g",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "db_client()",
                                  "children": [
                                    {
                                      "value": "db_client()",
                                      "children": []
                                    },
                                    {
                                      "value": "",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "creds_manager = IntegrationCredentialsManager()",
                          "children": [
                            {
                              "value": "creds_manager = IntegrationCredentialsManager()",
                              "children": [
                                {
                                  "value": "creds_manager = I",
                                  "children": [
                                    {
                                      "value": "cre",
                                      "children": []
                                    },
                                    {
                                      "value": "s_manager = I",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "grationCredentialsManager()",
                                  "children": [
                                    {
                                      "value": "grationCredentialsManager()",
                                      "children": []
                                    },
                                    {
                                      "value": "",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "t up shutdown handlers",
                          "children": []
                        },
                        {
                          "value": "shutdown_lock = threading.Lock()",
                          "children": [
                            {
                              "value": "shutdown_lock = threading.Lock()",
                              "children": [
                                {
                                  "value": "shutdown_lock = t",
                                  "children": [
                                    {
                                      "value": "shu",
                                      "children": []
                                    },
                                    {
                                      "value": "down_lock = t",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "ading.Lock()",
                                  "children": [
                                    {
                                      "value": "ading.Lock()",
                                      "children": [
                                        {
                                          "value": "ading.Loc",
                                          "children": []
                                        },
                                        {
                                          "value": "()",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "it.register(cls.on_node_executor_stop)  #",
                          "children": [
                            {
                              "value": "it.register(cls.on_node_executor_stop)  #",
                              "children": [
                                {
                                  "value": "it.register(cls",
                                  "children": [
                                    {
                                      "value": "it.reg",
                                      "children": []
                                    },
                                    {
                                      "value": "ster(cls",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": ".on_node_executor_stop)  #",
                                  "children": [
                                    {
                                      "value": "on_node_executor_stop)  #",
                                      "children": [
                                        {
                                          "value": "on_",
                                          "children": []
                                        },
                                        {
                                          "value": "ode_executor_stop)  #",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "ndle regular shutdown",
                          "children": []
                        },
                        {
                          "value": "al.signal(  # handle termination\n            signal.SIGTERM, lambda _, __: cls.on_node_executor_sigterm()\n        )",
                          "children": [
                            {
                              "value": "al.signal(  # handle termination\n            signal.SIGTERM, lambda _, __: cls.on_node_executor_sigterm()\n        )",
                              "children": [
                                {
                                  "value": "al.signal(  #",
                                  "children": [
                                    {
                                      "value": "al.sig",
                                      "children": []
                                    },
                                    {
                                      "value": "al(  #",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "handle termination\n            signal.SIGTERM, lambda _, __: cls.on_node_executor_sigterm()\n        )",
                                  "children": [
                                    {
                                      "value": "ndle termination",
                                      "children": []
                                    },
                                    {
                                      "value": "al.SIGTERM, la",
                                      "children": [
                                        {
                                          "value": "al.SIG",
                                          "children": []
                                        },
                                        {
                                          "value": "ERM, la",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "da _, __: cls.on_node_executor_sigterm()",
                                      "children": [
                                        {
                                          "value": "_: cl",
                                          "children": [
                                            {
                                              "value": "_",
                                              "children": []
                                            },
                                            {
                                              "value": "cl",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "on_node_executor_sigterm()",
                                          "children": [
                                            {
                                              "value": "on_node_executor_sigterm()",
                                              "children": [
                                                {
                                                  "value": "on_",
                                                  "children": []
                                                },
                                                {
                                                  "value": "ode_executor_sigterm()",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "ssmethod\n    def on_node_executor_stop(cls):\n        if not cls.shutdown_lock.acquire(blocking=False):\n            return  # already shutting down\n\n        logger.info(f\"[on_node_executor_stop {cls.pid}] \u23f3 Releasing locks...\")\n        cls.creds_manager.release_all_locks()\n        logger.info(f\"[on_node_executor_stop {cls.pid}] \u23f3 Disconnecting Redis...\")\n        redis.disconnect()\n        logger.info(f\"[on_node_executor_stop {cls.pid}] \u23f3 Disconnecting DB manager...\")\n        close_service_client(cls.db_client)\n        logger.info(f\"[on_node_executor_stop {cls.pid}] \u2705 Finished cleanup\")\n\n    @class",
              "children": [
                {
                  "value": "ssmethod",
                  "children": [
                    {
                      "value": "smethod",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "on_node_executor_stop(cls):\n        if not cls.shutdown_lock.acquire(blocking=False):\n            return  # already shutting down\n\n        logger.info(f\"[on_node_executor_stop {cls.pid}] \u23f3 Releasing locks...\")\n        cls.creds_manager.release_all_locks()\n        logger.info(f\"[on_node_executor_stop {cls.pid}] \u23f3 Disconnecting Redis...\")\n        redis.disconnect()\n        logger.info(f\"[on_node_executor_stop {cls.pid}] \u23f3 Disconnecting DB manager...\")\n        close_service_client(cls.db_client)\n        logger.info(f\"[on_node_executor_stop {cls.pid}] \u2705 Finished cleanup\")\n\n    @class",
                  "children": [
                    {
                      "value": "ode_executor_stop(cls",
                      "children": []
                    },
                    {
                      "value": "):",
                      "children": [
                        {
                          "value": ":",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "ot cls.shutdown_lock.acquire(blocking=False):\n            return  # already shutting down\n\n        logger.info(f\"[on_node_executor_stop {cls.pid}] \u23f3 Releasing locks...\")\n        cls.creds_manager.release_all_locks()\n        logger.info(f\"[on_node_executor_stop {cls.pid}] \u23f3 Disconnecting Redis...\")\n        redis.disconnect()\n        logger.info(f\"[on_node_executor_stop {cls.pid}] \u23f3 Disconnecting DB manager...\")\n        close_service_client(cls.db_client)\n        logger.info(f\"[on_node_executor_stop {cls.pid}] \u2705 Finished cleanup\")\n\n    @class",
                      "children": [
                        {
                          "value": "ot cls.shutdown_lock.acquire(blocking=False):\n            return  # already shutting down",
                          "children": [
                            {
                              "value": "cls.shutdown_lock.acquire(blocking=False):",
                              "children": [
                                {
                                  "value": "shutdown_lock.acquire(blocking=False):",
                                  "children": [
                                    {
                                      "value": "shutdown_lock.acquire(blo",
                                      "children": [
                                        {
                                          "value": "shutdown_lock.acq",
                                          "children": [
                                            {
                                              "value": "shu",
                                              "children": []
                                            },
                                            {
                                              "value": "down_lock.acq",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "ire(blo",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "cking=False):",
                                      "children": [
                                        {
                                          "value": "king=False):",
                                          "children": [
                                            {
                                              "value": "king=Fal",
                                              "children": []
                                            },
                                            {
                                              "value": "e):",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "rn  # already shutting down",
                              "children": [
                                {
                                  "value": "rn  #",
                                  "children": []
                                },
                                {
                                  "value": "ready shutting down",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "er.info(f\"[on_node_executor_stop {cls.pid}] \u23f3 Releasing locks...\")",
                          "children": [
                            {
                              "value": "er.info(f\"[on_node_executor_stop {cls.pid}] \u23f3 Releasing locks...\")",
                              "children": [
                                {
                                  "value": "er.info(f\"[",
                                  "children": [
                                    {
                                      "value": "er.inf",
                                      "children": []
                                    },
                                    {
                                      "value": "(f\"[",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "on_node_executor_stop {cls.pid}] \u23f3 Releasing locks...\")",
                                  "children": [
                                    {
                                      "value": "n_node_executor_stop {cls.pid}] \u23f3 Releasing locks...\")",
                                      "children": [
                                        {
                                          "value": "n_",
                                          "children": []
                                        },
                                        {
                                          "value": "node_executor_stop {cls",
                                          "children": []
                                        },
                                        {
                                          "value": ".pid}] \u23f3",
                                          "children": [
                                            {
                                              "value": "pid}] \u23f3",
                                              "children": [
                                                {
                                                  "value": "pid",
                                                  "children": []
                                                },
                                                {
                                                  "value": "] \u23f3",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "Releasing locks...\")",
                                          "children": []
                                        },
                                        {
                                          "value": "",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "eds_manager.release_all_locks()",
                          "children": [
                            {
                              "value": "eds_manager.release_all_locks()",
                              "children": [
                                {
                                  "value": "eds_manager.release_all_locks()",
                                  "children": [
                                    {
                                      "value": "eds_manager.relea",
                                      "children": [
                                        {
                                          "value": "eds",
                                          "children": []
                                        },
                                        {
                                          "value": "manager.relea",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "e_all_locks()",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": ".info(f\"[on_node_executor_stop {cls.pid}] \u23f3 Disconnecting Redis...\")",
                          "children": [
                            {
                              "value": ".info(f\"[on_node_executor_stop {cls.pid}] \u23f3 Disconnecting Redis...\")",
                              "children": [
                                {
                                  "value": ".info(f\"[on",
                                  "children": [
                                    {
                                      "value": ".info(",
                                      "children": []
                                    },
                                    {
                                      "value": "\"[on",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "_node_executor_stop {cls.pid}] \u23f3 Disconnecting Redis...\")",
                                  "children": [
                                    {
                                      "value": "node_executor_stop {cls.pid}] \u23f3 Disconnecting Redis...\")",
                                      "children": [
                                        {
                                          "value": "no",
                                          "children": []
                                        },
                                        {
                                          "value": "de_executor_stop {cls.p",
                                          "children": []
                                        },
                                        {
                                          "value": "id}] \u23f3 Di",
                                          "children": [
                                            {
                                              "value": "d}] \u23f3 D",
                                              "children": [
                                                {
                                                  "value": "d}]",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\u23f3 D",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "sconnecting Redis...\")",
                                          "children": []
                                        },
                                        {
                                          "value": "",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "sconnect()",
                          "children": [
                            {
                              "value": "sconnect()",
                              "children": [
                                {
                                  "value": "sconnect()",
                                  "children": [
                                    {
                                      "value": "sconn",
                                      "children": []
                                    },
                                    {
                                      "value": "ct()",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "nfo(f\"[on_node_executor_stop {cls.pid}] \u23f3 Disconnecting DB manager...\")\n        c",
                          "children": [
                            {
                              "value": "nfo(f\"[on_node_executor_stop {cls.pid}] \u23f3 Disconnecting DB manager...\")\n        c",
                              "children": [
                                {
                                  "value": "nfo(f\"[on_n",
                                  "children": [
                                    {
                                      "value": "nfo(f\"",
                                      "children": []
                                    },
                                    {
                                      "value": "on_n",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "ode_executor_stop {cls.pid}] \u23f3 Disconnecting DB manager...\")\n        c",
                                  "children": [
                                    {
                                      "value": "de_executor_stop {cls.pid}] \u23f3 Disconnecting DB manager...\")",
                                      "children": [
                                        {
                                          "value": "de",
                                          "children": []
                                        },
                                        {
                                          "value": "_executor_stop {cls.pid",
                                          "children": []
                                        },
                                        {
                                          "value": "}] \u23f3 Disc",
                                          "children": [
                                            {
                                              "value": "] \u23f3 Dis",
                                              "children": [
                                                {
                                                  "value": "] \u23f3",
                                                  "children": []
                                                },
                                                {
                                                  "value": "Dis",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "onnecting DB manager...\")",
                                          "children": []
                                        },
                                        {
                                          "value": "",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "ice_client(cls.db_client)\n        l",
                          "children": [
                            {
                              "value": "ice_client(cls.db_client)\n        l",
                              "children": [
                                {
                                  "value": "ice_client(cls.db_cl",
                                  "children": []
                                },
                                {
                                  "value": "ient)\n        l",
                                  "children": [
                                    {
                                      "value": "ent)",
                                      "children": [
                                        {
                                          "value": "ent",
                                          "children": []
                                        },
                                        {
                                          "value": "",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "o(f\"[on_node_executor_stop {cls.pid}] \u2705 Finished cleanup\")\n\n    @class",
                          "children": [
                            {
                              "value": "o(f\"[on_node_executor_stop {cls.pid}] \u2705 Finished cleanup\")\n\n    @class",
                              "children": [
                                {
                                  "value": "o(f\"[on_nod",
                                  "children": [
                                    {
                                      "value": "o(f\"[o",
                                      "children": []
                                    },
                                    {
                                      "value": "_nod",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "e_executor_stop {cls.pid}] \u2705 Finished cleanup\")\n\n    @class",
                                  "children": [
                                    {
                                      "value": "_executor_stop {cls.pid}] \u2705 Finished cleanup\")\n\n    @clas",
                                      "children": [
                                        {
                                          "value": "_e",
                                          "children": []
                                        },
                                        {
                                          "value": "xecutor_stop {cls.pid}]",
                                          "children": []
                                        },
                                        {
                                          "value": "\u2705 Finish",
                                          "children": [
                                            {
                                              "value": "\u2705 Finis",
                                              "children": [
                                                {
                                                  "value": "\u2705 F",
                                                  "children": []
                                                },
                                                {
                                                  "value": "nis",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "ed cleanup\")\n\n    @cla",
                                          "children": []
                                        },
                                        {
                                          "value": "s",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def on_node_executor_sigterm(cls):\n        llprint(f\"[on_node_executor_sigterm {cls.pid}] \u26a0\ufe0f SIGTERM received\")\n        if not cls.shutdown_lock.acquire(blocking=False):\n            return  # already shutting down\n\n        llprint(f\"[on_node_executor_stop {cls.pid}] \u23f3 Releasing locks...\")\n        cls.creds_manager.release_all_locks()\n        llprint(f\"[on_node_executor_stop {cls.pid}] \u23f3 Disconnecting Redis...\")\n        redis.disconnect()\n        llprint(f\"[on_node_executor_stop {cls.pid}] \u2705 Finished cleanup\")\n        sys.exit(0)\n\n    @classmethod",
              "children": [
                {
                  "value": "def on_",
                  "children": [
                    {
                      "value": "def on_",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "executor_sigterm(cls):\n        llprint(f\"[on_node_executor_sigterm {cls.pid}] \u26a0\ufe0f SIGTERM received\")\n        if not cls.shutdown_lock.acquire(blocking=False):\n            return  # already shutting down\n\n        llprint(f\"[on_node_executor_stop {cls.pid}] \u23f3 Releasing locks...\")\n        cls.creds_manager.release_all_locks()\n        llprint(f\"[on_node_executor_stop {cls.pid}] \u23f3 Disconnecting Redis...\")\n        redis.disconnect()\n        llprint(f\"[on_node_executor_stop {cls.pid}] \u2705 Finished cleanup\")\n        sys.exit(0)\n\n    @classmethod",
                  "children": [
                    {
                      "value": "utor_sigterm(cls):",
                      "children": []
                    },
                    {
                      "value": "ll",
                      "children": [
                        {
                          "value": "l",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "n_node_executor_sigterm {cls.pid}] \u26a0\ufe0f SIGTERM received\")\n        if not cls.shutdown_lock.acquire(blocking=False):\n            return  # already shutting down\n\n        llprint(f\"[on_node_executor_stop {cls.pid}] \u23f3 Releasing locks...\")\n        cls.creds_manager.release_all_locks()\n        llprint(f\"[on_node_executor_stop {cls.pid}] \u23f3 Disconnecting Redis...\")\n        redis.disconnect()\n        llprint(f\"[on_node_executor_stop {cls.pid}] \u2705 Finished cleanup\")\n        sys.exit(0)\n\n    @classmethod",
                      "children": [
                        {
                          "value": "n_node_executor_sigterm {cls.pid}] \u26a0\ufe0f SIGTERM received\")\n        if not",
                          "children": [
                            {
                              "value": "n_node_executor_sigterm {cls.pid}] \u26a0\ufe0f SIGTERM received\")\n        if not",
                              "children": [
                                {
                                  "value": "n_node_",
                                  "children": []
                                },
                                {
                                  "value": "executor_sigterm {cls.pid}] \u26a0\ufe0f SIGTERM received\")\n        if not",
                                  "children": [
                                    {
                                      "value": "xecutor_sigterm {cls.pid}] \u26a0\ufe0f SIGTERM received\")\n        if not",
                                      "children": [
                                        {
                                          "value": "xe",
                                          "children": []
                                        },
                                        {
                                          "value": "cutor_sigterm {cls.pid}] \u26a0",
                                          "children": []
                                        },
                                        {
                                          "value": "\ufe0f SIGTERM",
                                          "children": [
                                            {
                                              "value": "SIGTER",
                                              "children": [
                                                {
                                                  "value": "SI",
                                                  "children": []
                                                },
                                                {
                                                  "value": "TER",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "received\")\n        if no",
                                          "children": []
                                        },
                                        {
                                          "value": "t",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "own_lock.acquire(blocking=False):\n            return  # already shutting down\n\n        llprin",
                          "children": [
                            {
                              "value": "_lock.acquire(blocking=False):\n            re",
                              "children": [
                                {
                                  "value": "k.acquire(blocking=False):\n            re",
                                  "children": [
                                    {
                                      "value": "k.acquire(blocking=False)",
                                      "children": [
                                        {
                                          "value": "k.acquire(blockin",
                                          "children": [
                                            {
                                              "value": "k.a",
                                              "children": []
                                            },
                                            {
                                              "value": "quire(blockin",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "=False)",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": ":\n            re",
                                      "children": [
                                        {
                                          "value": "r",
                                          "children": [
                                            {
                                              "value": "",
                                              "children": []
                                            },
                                            {
                                              "value": "r",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "y shutting down\n\n        llprin",
                              "children": [
                                {
                                  "value": "y shut",
                                  "children": []
                                },
                                {
                                  "value": "ng down\n\n        llprin",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "de_executor_stop {cls.pid}] \u23f3 Releasing locks...\")\n        cls.creds",
                          "children": [
                            {
                              "value": "de_executor_stop {cls.pid}] \u23f3 Releasing locks...\")\n        cls.creds",
                              "children": [
                                {
                                  "value": "de_exec",
                                  "children": []
                                },
                                {
                                  "value": "utor_stop {cls.pid}] \u23f3 Releasing locks...\")\n        cls.creds",
                                  "children": [
                                    {
                                      "value": "tor_stop {cls.pid}] \u23f3 Releasing locks...\")\n        cls.cred",
                                      "children": [
                                        {
                                          "value": "to",
                                          "children": []
                                        },
                                        {
                                          "value": "r_stop {cls.pid}] \u23f3 Rel",
                                          "children": []
                                        },
                                        {
                                          "value": "easing lo",
                                          "children": [
                                            {
                                              "value": "asing l",
                                              "children": [
                                                {
                                                  "value": "asi",
                                                  "children": []
                                                },
                                                {
                                                  "value": "g l",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "cks...\")\n        cls.cre",
                                          "children": []
                                        },
                                        {
                                          "value": "d",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "release_all_locks()\n        llprint(f",
                          "children": [
                            {
                              "value": "release_all_locks()\n        llprint(f",
                              "children": [
                                {
                                  "value": "release_all_locks()\n        llprint",
                                  "children": [
                                    {
                                      "value": "release_all_locks",
                                      "children": [
                                        {
                                          "value": "rel",
                                          "children": []
                                        },
                                        {
                                          "value": "ase_all_locks",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": ")\n        llprint",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(f",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "_executor_stop {cls.pid}] \u23f3 Disconnecting Redis...\")\n        redis.disco",
                          "children": [
                            {
                              "value": "_executor_stop {cls.pid}] \u23f3 Disconnecting Redis...\")\n        redis.disco",
                              "children": [
                                {
                                  "value": "_execut",
                                  "children": []
                                },
                                {
                                  "value": "or_stop {cls.pid}] \u23f3 Disconnecting Redis...\")\n        redis.disco",
                                  "children": [
                                    {
                                      "value": "r_stop {cls.pid}] \u23f3 Disconnecting Redis...\")\n        redis.disc",
                                      "children": [
                                        {
                                          "value": "r_",
                                          "children": []
                                        },
                                        {
                                          "value": "stop {cls.pid}] \u23f3 Disco",
                                          "children": []
                                        },
                                        {
                                          "value": "nnecting",
                                          "children": [
                                            {
                                              "value": "necting",
                                              "children": [
                                                {
                                                  "value": "nec",
                                                  "children": []
                                                },
                                                {
                                                  "value": "ing",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "Redis...\")\n        redis.dis",
                                          "children": []
                                        },
                                        {
                                          "value": "c",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "llprint(f\"[",
                          "children": [
                            {
                              "value": "llprint(f\"[",
                              "children": [
                                {
                                  "value": "llprint(f",
                                  "children": [
                                    {
                                      "value": "",
                                      "children": []
                                    },
                                    {
                                      "value": "llprint(f",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "\"[",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "xecutor_stop {cls.pid}] \u2705 Finished cleanup\")\n        sys.exit(0)",
                          "children": [
                            {
                              "value": "xecutor_stop {cls.pid}] \u2705 Finished cleanup\")\n        sys.exit(0)",
                              "children": [
                                {
                                  "value": "xecutor",
                                  "children": []
                                },
                                {
                                  "value": "_stop {cls.pid}] \u2705 Finished cleanup\")\n        sys.exit(0)",
                                  "children": [
                                    {
                                      "value": "stop {cls.pid}] \u2705 Finished cleanup\")\n        sys.exit(0)",
                                      "children": [
                                        {
                                          "value": "st",
                                          "children": []
                                        },
                                        {
                                          "value": "op {cls.pid}] \u2705 Finishe",
                                          "children": []
                                        },
                                        {
                                          "value": "d cleanup",
                                          "children": [
                                            {
                                              "value": "cleanu",
                                              "children": [
                                                {
                                                  "value": "cl",
                                                  "children": []
                                                },
                                                {
                                                  "value": "anu",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\")\n        sys.exit(0)",
                                          "children": []
                                        },
                                        {
                                          "value": "",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "smethod",
                          "children": [
                            {
                              "value": "smethod",
                              "children": [
                                {
                                  "value": "smethod",
                                  "children": [
                                    {
                                      "value": "sme",
                                      "children": []
                                    },
                                    {
                                      "value": "hod",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "",
                                  "children": [
                                    {
                                      "value": "",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "r_logged\n    def on_node_execution(\n        cls,\n        q: ExecutionQueue[NodeExecutionEntry],\n        node_exec: NodeExecutionEntry,\n    ) -> dict[str, Any]:\n        log_metadata = LogMetadata(\n            user_id=node_exec.user_id,\n            graph_eid=node_exec.graph_exec_id,\n            graph_id=node_exec.graph_id,\n            node_eid=node_exec.node_exec_id,\n            node_id=node_exec.node_id,\n            block_name=\"-\",\n        )\n\n        execution_stats = {}\n        timing_info, _ = cls._on_node_execution(\n            q, node_exec, log_metadata, execution_stats\n        )\n        execution_stats[\"walltime\"] = timing_info.wall_time\n        execution_stats[\"cputime\"] = timing_info.cpu_time\n\n        cls.db_client.update_node_execution_stats(\n            node_exec.node_exec_id, execution_stats\n        )\n        return execution_stats\n\n    @classmethod",
              "children": [
                {
                  "value": "r_logged",
                  "children": [
                    {
                      "value": "_logged",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "on_node_execu",
                  "children": [
                    {
                      "value": "n_node_execu",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "cls,\n        q: ExecutionQueue[NodeExecutionEntry],\n        node_exec: NodeExecutionEntry,\n    ) -> dict[str, Any]:\n        log_metadata = LogMetadata(\n            user_id=node_exec.user_id,\n            graph_eid=node_exec.graph_exec_id,\n            graph_id=node_exec.graph_id,\n            node_eid=node_exec.node_exec_id,\n            node_id=node_exec.node_id,\n            block_name=\"-\",\n        )\n\n        execution_stats = {}\n        timing_info, _ = cls._on_node_execution(\n            q, node_exec, log_metadata, execution_stats\n        )\n        execution_stats[\"walltime\"] = timing_info.wall_time\n        execution_stats[\"cputime\"] = timing_info.cpu_time\n\n        cls.db_client.update_node_execution_stats(\n            node_exec.node_exec_id, execution_stats\n        )\n        return execution_stats\n\n    @classmethod",
                  "children": [
                    {
                      "value": "cls,",
                      "children": []
                    },
                    {
                      "value": "q: ExecutionQueue[NodeExecutionEntry],\n        node_exec: NodeExecutionEntry,\n    ) -> dict[str, Any]:",
                      "children": [
                        {
                          "value": "ion",
                          "children": []
                        },
                        {
                          "value": "ExecutionEntry],\n        node_exec: N",
                          "children": [
                            {
                              "value": "E",
                              "children": []
                            },
                            {
                              "value": "cutionEntry],\n        node_exec: N",
                              "children": [
                                {
                                  "value": "cutionEntry],\n        node_exec: N",
                                  "children": [
                                    {
                                      "value": "cutionEntry],",
                                      "children": []
                                    },
                                    {
                                      "value": "node_exec: N",
                                      "children": [
                                        {
                                          "value": "node_exec:",
                                          "children": [
                                            {
                                              "value": "node_exec:",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "onEntry,\n    ) -> dict[str, A",
                          "children": [
                            {
                              "value": "onEntry,",
                              "children": []
                            },
                            {
                              "value": ") -> dict[str, A",
                              "children": [
                                {
                                  "value": ") -> dict[str, A",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "log_metadata",
                      "children": [
                        {
                          "value": "log_metadata",
                          "children": [
                            {
                              "value": "lo",
                              "children": []
                            },
                            {
                              "value": "g_metadata",
                              "children": [
                                {
                                  "value": "_me",
                                  "children": [
                                    {
                                      "value": "_me",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "dat",
                                  "children": [
                                    {
                                      "value": "dat",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "data(\n            user_id=node_exec.user_id,\n            graph_eid=node_exec.graph_exec_id,\n            graph_id=node_exec.graph_id,\n            node_eid=node_exec.node_exec_id,\n            node_id=node_exec.node_id,\n            block_name=\"-\",\n        )\n\n        execution_stats = {}\n        timing_info, _ = cls._on_node_execution(\n            q, node_exec, log_metadata, execution_stats\n        )\n        execution_stats[\"walltime\"] = timing_info.wall_time\n        execution_stats[\"cputime\"] = timing_info.cpu_time\n\n        cls.db_client.update_node_execution_stats(\n            node_exec.node_exec_id, execution_stats\n        )\n        return execution_stats\n\n    @classmethod",
                      "children": [
                        {
                          "value": "data(\n            user_id=node_exec.user_id,\n            graph_eid=node_exec.graph_exec_id,\n            graph_id=node_exec.graph_id,\n            node_eid=node_exec.node_exec_id,\n            node_id=node_exec.node_id,\n            block_name=\"-\",\n        )\n\n        execution_st",
                          "children": [
                            {
                              "value": "data(\n            user_id=node_exec.user_id,\n            graph_eid=node_exec.graph_exec_id,\n            graph_id=node_exec.graph_id,\n            node_eid=node_exec.node_exec_id,\n            node_id=node_exec.node_id,\n            block_name=\"-\",\n        )\n\n        execution_st",
                              "children": [
                                {
                                  "value": "data(",
                                  "children": []
                                },
                                {
                                  "value": "user_id=node_exec.user_id,\n            graph_eid=node_exec.graph_exec_id,\n            graph_id=node_exec.graph_id,\n            node_eid=node_exec.node_exec_id,\n            node_id=node_exec.node_id,\n            block_name=\"-\",\n        )\n\n        execution_st",
                                  "children": [
                                    {
                                      "value": "user_id=",
                                      "children": []
                                    },
                                    {
                                      "value": "node_exec.user_id,\n            graph_eid=node_exec.graph_exec_id,\n            graph_id=node_exec.graph_id,\n            node_eid=node_exec.node_exec_id,\n            node_id=node_exec.node_id,\n            block_name=\"-\",\n        )\n\n        execution_st",
                                      "children": [
                                        {
                                          "value": "_id,\n            graph_ei",
                                          "children": [
                                            {
                                              "value": "_id,",
                                              "children": []
                                            },
                                            {
                                              "value": "graph_ei",
                                              "children": [
                                                {
                                                  "value": "",
                                                  "children": []
                                                },
                                                {
                                                  "value": "raph_ei",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "aph_exec_id,\n            graph_id",
                                          "children": [
                                            {
                                              "value": "aph_exec_",
                                              "children": []
                                            },
                                            {
                                              "value": "d,\n            graph_id",
                                              "children": [
                                                {
                                                  "value": "d,",
                                                  "children": []
                                                },
                                                {
                                                  "value": "graph_id",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "ph_id,\n            node_eid",
                                          "children": [
                                            {
                                              "value": "ph_id,",
                                              "children": []
                                            },
                                            {
                                              "value": "node_eid",
                                              "children": [
                                                {
                                                  "value": "",
                                                  "children": []
                                                },
                                                {
                                                  "value": "node_eid",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "e_exec_id,\n            node_id=",
                                          "children": [
                                            {
                                              "value": "e_exec_i",
                                              "children": []
                                            },
                                            {
                                              "value": ",\n            node_id=",
                                              "children": [
                                                {
                                                  "value": ",",
                                                  "children": []
                                                },
                                                {
                                                  "value": "node_id=",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "_id,\n            block_na",
                                          "children": [
                                            {
                                              "value": "_id,",
                                              "children": []
                                            },
                                            {
                                              "value": "block_na",
                                              "children": [
                                                {
                                                  "value": "",
                                                  "children": []
                                                },
                                                {
                                                  "value": "lock_na",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": ")\n\n        e",
                                          "children": [
                                            {
                                              "value": ")",
                                              "children": []
                                            },
                                            {
                                              "value": "e",
                                              "children": [
                                                {
                                                  "value": "",
                                                  "children": []
                                                },
                                                {
                                                  "value": "",
                                                  "children": []
                                                },
                                                {
                                                  "value": "e",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "timing_info,",
                          "children": [
                            {
                              "value": "timing_info,",
                              "children": [
                                {
                                  "value": "timing_i",
                                  "children": []
                                },
                                {
                                  "value": ",",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "on_node_execution(\n            q, node_exec, log_metadata, execution_stats\n        )\n        execution_sta",
                          "children": [
                            {
                              "value": "on_node_execution(\n            q, node_exec, log_metadata, execution_stats\n        )\n        execution_sta",
                              "children": [
                                {
                                  "value": "on_node_execut",
                                  "children": [
                                    {
                                      "value": "on_node_exe",
                                      "children": []
                                    },
                                    {
                                      "value": "t",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(\n            q, node_exec, log_metadata, execution_stats\n        )\n        execution_sta",
                                  "children": [
                                    {
                                      "value": "(\n            q, node_",
                                      "children": [
                                        {
                                          "value": "(",
                                          "children": []
                                        },
                                        {
                                          "value": "q, node_",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "exec, log_metadata, execution_stats\n        )\n        execution_sta",
                                      "children": [
                                        {
                                          "value": "d",
                                          "children": []
                                        },
                                        {
                                          "value": "a, execut",
                                          "children": []
                                        },
                                        {
                                          "value": "n_stats",
                                          "children": []
                                        },
                                        {
                                          "value": ")\n        exe",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "ime\"] = timing_info.wall_time\n        execution_sta",
                          "children": [
                            {
                              "value": "ime\"] = timing_info.wall_time\n        execution_sta",
                              "children": [
                                {
                                  "value": "ime\"] = timing_info.wall_ti",
                                  "children": [
                                    {
                                      "value": "ime\"] = timing_",
                                      "children": []
                                    },
                                    {
                                      "value": "nfo.wall_t",
                                      "children": [
                                        {
                                          "value": "n",
                                          "children": []
                                        },
                                        {
                                          "value": "fo.wall_",
                                          "children": []
                                        },
                                        {
                                          "value": "t",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "execution_sta",
                                  "children": [
                                    {
                                      "value": "exe",
                                      "children": []
                                    },
                                    {
                                      "value": "ution_sta",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "me\"] = timing_info.cpu_time\n\n        cls.db_clien",
                          "children": [
                            {
                              "value": "me\"] = timing_info.cpu_time\n\n        cls.db_clien",
                              "children": [
                                {
                                  "value": "me\"] = timing_info.cpu_tim",
                                  "children": [
                                    {
                                      "value": "me\"] = timing_i",
                                      "children": []
                                    },
                                    {
                                      "value": "fo.cpu_ti",
                                      "children": [
                                        {
                                          "value": "f",
                                          "children": []
                                        },
                                        {
                                          "value": "o.cpu_t",
                                          "children": []
                                        },
                                        {
                                          "value": "i",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "cls.db_clien",
                                  "children": [
                                    {
                                      "value": "cls",
                                      "children": []
                                    },
                                    {
                                      "value": "db_clien",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "ode_execution_stats(\n            node_exec.node_exec_id, execution_stats\n        )\n        return execut",
                          "children": [
                            {
                              "value": "ode_execution_stats(\n            node_exec.node_exec_id, execution_stats\n        )\n        return execut",
                              "children": [
                                {
                                  "value": "ode_execution_stats(\n            node_exe",
                                  "children": [
                                    {
                                      "value": "ode_execution",
                                      "children": [
                                        {
                                          "value": "ode",
                                          "children": []
                                        },
                                        {
                                          "value": "execution",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "stats(\n            node_exe",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "c.node_exec_id, execution_stats\n        )\n        return execut",
                                  "children": [
                                    {
                                      "value": ", execution_stats",
                                      "children": [
                                        {
                                          "value": ", executi",
                                          "children": []
                                        },
                                        {
                                          "value": "n_stats",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": ")\n        ret",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "@classmethod",
                          "children": [
                            {
                              "value": "classmethod",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "_measured\n    def _on_node_execution(\n        cls,\n        q: ExecutionQueue[NodeExecutionEntry],\n        node_exec: NodeExecutionEntry,\n        log_metadata: LogMetadata,\n        stats: dict[str, Any] | None = None,\n    ):\n        try:\n            log_metadata.info(f\"Start node execution {node_exec.node_exec_id}\")\n            for execution in execute_node(\n                cls.db_client, cls.creds_manager, node_exec, stats\n            ):\n                q.add(execution)\n            log_metadata.info(f\"Finished node execution {node_exec.node_exec_id}\")\n        except Exception as e:\n            log_metadata.exception(\n                f\"Failed node execution {node_exec.node_exec_id}: {e}\"\n            )\n\n    @classmethod",
              "children": [
                {
                  "value": "_measured",
                  "children": [
                    {
                      "value": "measured",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "_on_node_exec",
                  "children": [
                    {
                      "value": "_on_node_exec",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(\n        cls,\n        q: ExecutionQueue[NodeExecutionEntry],\n        node_exec: NodeExecutionEntry,\n        log_metadata: LogMetadata,\n        stats: dict[str, Any] | None = None,\n    ):\n        try:\n            log_metadata.info(f\"Start node execution {node_exec.node_exec_id}\")\n            for execution in execute_node(\n                cls.db_client, cls.creds_manager, node_exec, stats\n            ):\n                q.add(execution)\n            log_metadata.info(f\"Finished node execution {node_exec.node_exec_id}\")\n        except Exception as e:\n            log_metadata.exception(\n                f\"Failed node execution {node_exec.node_exec_id}: {e}\"\n            )\n\n    @classmethod",
                  "children": [
                    {
                      "value": "cls,",
                      "children": []
                    },
                    {
                      "value": "q: ExecutionQueue[NodeExecutionEntry],\n        node_exec: NodeExecutionEntry,\n        log_metadata: LogMetadata,\n        stats: dict[str, Any] | None = None,\n    ):\n        try:",
                      "children": [
                        {
                          "value": "ion",
                          "children": []
                        },
                        {
                          "value": "ExecutionEntry],\n        node_exec: N",
                          "children": [
                            {
                              "value": "E",
                              "children": []
                            },
                            {
                              "value": "cutionEntry],\n        node_exec: N",
                              "children": [
                                {
                                  "value": "cutionEntry],\n        node_exec: N",
                                  "children": [
                                    {
                                      "value": "cutionEntry],",
                                      "children": []
                                    },
                                    {
                                      "value": "node_exec: N",
                                      "children": [
                                        {
                                          "value": "node_exec:",
                                          "children": [
                                            {
                                              "value": "node_exec:",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "onEntry,\n        log_metadata",
                          "children": [
                            {
                              "value": "onEntry,",
                              "children": []
                            },
                            {
                              "value": "log_metadata",
                              "children": [
                                {
                                  "value": "log_metadata",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "ata,\n        stats: dict[",
                          "children": [
                            {
                              "value": "ata,",
                              "children": []
                            },
                            {
                              "value": "tats: dict[",
                              "children": [
                                {
                                  "value": "tats: dict[",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "| None = None,\n    ):\n        try:",
                          "children": [
                            {
                              "value": "| Non",
                              "children": []
                            },
                            {
                              "value": "= None,\n    ):",
                              "children": [
                                {
                                  "value": "= None,\n    ):",
                                  "children": [
                                    {
                                      "value": "= None,\n    ):",
                                      "children": [
                                        {
                                          "value": "= None,\n    ):",
                                          "children": [
                                            {
                                              "value": "= No",
                                              "children": []
                                            },
                                            {
                                              "value": "ne,\n    ):",
                                              "children": [
                                                {
                                                  "value": "e,",
                                                  "children": [
                                                    {
                                                      "value": "e,",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": ")",
                                                  "children": [
                                                    {
                                                      "value": ")",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "",
                                      "children": [
                                        {
                                          "value": "",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "ry:",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "etadata.info(f\"Start node execution {node_exec.node_exec_id}\")\n            for execution in execute_node(\n                cls.db_client, cls.creds_manager, node_exec, stats\n            ):\n                q.add(execution)\n            log_metadata.info(f\"Finished node execution {node_exec.node_exec_id}\")\n        except Exception as e:\n            log_metadata.exception(\n                f\"Failed node execution {node_exec.node_exec_id}: {e}\"\n            )\n\n    @classmethod",
                      "children": [
                        {
                          "value": "etadata.info(f\"Start node execution {node_exec.node_exec_id}\")\n            for execution in execute_node(\n                cls.db_client, cls.creds_manager, node_exec, stats\n            ):\n                q.add(execution)\n            log_metadata.info(f\"Finished node execution {node_exec.node_exec_id}\")\n        except Exception as e:\n            log_metadata.exception(\n                f\"Failed node execution {node_exec.node_exec_id}: {e}\"\n            )\n\n    @classmethod",
                          "children": [
                            {
                              "value": "art node execution {node_exec.node_exec_id}\")\n            for execution in execute_node(\n                cls.db_client, cls.creds_manager, node_exec, stats\n            ):\n                q.add(execution)\n            log_metadata.info(f\"Finished node execution {node_exec.node_exec_id}\")\n        except Except",
                              "children": [
                                {
                                  "value": "art node execution {node_exec.node_exec_id}\")\n            for execu",
                                  "children": [
                                    {
                                      "value": "art node execution {node_exec.node_exec_id}\")\n            for execu",
                                      "children": [
                                        {
                                          "value": "art node executio",
                                          "children": [
                                            {
                                              "value": "art node exe",
                                              "children": []
                                            },
                                            {
                                              "value": "utio",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "n {node_exec.node_exec_id}\")\n            for execu",
                                          "children": [
                                            {
                                              "value": "{node_exec.node_exec_id}\")\n            for exec",
                                              "children": [
                                                {
                                                  "value": "{",
                                                  "children": []
                                                },
                                                {
                                                  "value": "node_exec.node_exec_i",
                                                  "children": []
                                                },
                                                {
                                                  "value": "d}\")\n            for exe",
                                                  "children": [
                                                    {
                                                      "value": "}\")\n            for ex",
                                                      "children": [
                                                        {
                                                          "value": "}\")",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "for ex",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "c",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "te_node(\n                cls.db_client, cls.creds_manager, node_exec, stats\n            ):\n                q.add(execution)\n            log_metad",
                                  "children": [
                                    {
                                      "value": "ode(",
                                      "children": []
                                    },
                                    {
                                      "value": "cls.db_client, cls.creds_manager, node_exec, stats\n            ):\n                q.ad",
                                      "children": [
                                        {
                                          "value": "cls.",
                                          "children": []
                                        },
                                        {
                                          "value": "db_client, cls.creds_manager, node_exec, stats\n            ):\n                q.ad",
                                          "children": [
                                            {
                                              "value": "ds_manager, n",
                                              "children": [
                                                {
                                                  "value": "ds_",
                                                  "children": []
                                                },
                                                {
                                                  "value": "anager, n",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "e_exec, stats",
                                              "children": [
                                                {
                                                  "value": "e_e",
                                                  "children": []
                                                },
                                                {
                                                  "value": "ec, stats",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "):",
                                              "children": []
                                            },
                                            {
                                              "value": "",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "log_metad",
                                      "children": [
                                        {
                                          "value": "log_metad",
                                          "children": [
                                            {
                                              "value": "log_metad",
                                              "children": [
                                                {
                                                  "value": "",
                                                  "children": [
                                                    {
                                                      "value": "",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "log_metad",
                                                  "children": [
                                                    {
                                                      "value": "log_meta",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "nished node execution {node_exec.node_exec_id}\")\n        except Except",
                                  "children": [
                                    {
                                      "value": "nished node execution {node_exec.node_exec_id}\")\n        except Except",
                                      "children": [
                                        {
                                          "value": "nished node execu",
                                          "children": [
                                            {
                                              "value": "nished node",
                                              "children": []
                                            },
                                            {
                                              "value": "xecu",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "tion {node_exec.node_exec_id}\")\n        except Except",
                                          "children": [
                                            {
                                              "value": "ion {node_exec.node_exec_id}\")\n        except Excep",
                                              "children": [
                                                {
                                                  "value": "io",
                                                  "children": []
                                                },
                                                {
                                                  "value": "n {node_exec.node_exec_i",
                                                  "children": []
                                                },
                                                {
                                                  "value": "d}\")\n        except Exce",
                                                  "children": [
                                                    {
                                                      "value": "}\")\n        except Exc",
                                                      "children": [
                                                        {
                                                          "value": "}\")",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "except Exc",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "p",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "log_metadata.exception(\n                f\"Failed node execution {node_exec.node_exec_id}: {e}\"\n            )\n\n    @classmethod",
                              "children": [
                                {
                                  "value": "log_meta",
                                  "children": [
                                    {
                                      "value": "log",
                                      "children": []
                                    },
                                    {
                                      "value": "a",
                                      "children": [
                                        {
                                          "value": "a",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "(\n                f\"Failed node execution {node_exec.node_exec_id}: {e}\"\n            )\n\n    @classmethod",
                                  "children": [
                                    {
                                      "value": "(\n                f\"Failed node execution {node_exec.node_exec_id}: {e}\"\n            )\n\n    @classmethod",
                                      "children": [
                                        {
                                          "value": "(\n                f\"Failed node execution {node_exec.node_exec_id}: {e}\"\n            )\n\n    @classmethod",
                                          "children": [
                                            {
                                              "value": "(\n                f\"Fa",
                                              "children": [
                                                {
                                                  "value": "(",
                                                  "children": []
                                                },
                                                {
                                                  "value": "f\"Fa",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "iled node execution {node_exec.node_exec_id}: {e}\"\n            )\n\n    @classmethod",
                                              "children": [
                                                {
                                                  "value": "n {node_exec.node_exec_id}: {e}\"\n            )\n\n    @c",
                                                  "children": [
                                                    {
                                                      "value": "n",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "{node_exec.node_exec_i",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "d}: {e}\"\n            )",
                                                      "children": [
                                                        {
                                                          "value": "}: {e}\"\n            )",
                                                          "children": [
                                                            {
                                                              "value": "}: {e}\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": ")",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "@",
                                                      "children": [
                                                        {
                                                          "value": "",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "c",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "n_graph_executor_start(cls):\n        configure_logging()\n        set_service_name(\"GraphExecutor\")\n\n        cls.db_client = get_db_client()\n        cls.pool_size = settings.config.num_node_workers\n        cls.pid = os.getpid()\n        cls._init_node_executor_pool()\n        logger.info(\n            f\"Graph executor {cls.pid} started with {cls.pool_size} node workers\"\n        )\n\n        # Set up shutdown handler\n        atexit.register(cls.on_graph_executor_stop)\n\n    @classmethod",
              "children": [
                {
                  "value": "n_graph_exec",
                  "children": [
                    {
                      "value": "_graph_exec",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "start(cls):\n        configure_logging()\n        set_service_name(\"GraphExecutor\")\n\n        cls.db_client = get_db_client()\n        cls.pool_size = settings.config.num_node_workers\n        cls.pid = os.getpid()\n        cls._init_node_executor_pool()\n        logger.info(\n            f\"Graph executor {cls.pid} started with {cls.pool_size} node workers\"\n        )\n\n        # Set up shutdown handler\n        atexit.register(cls.on_graph_executor_stop)\n\n    @classmethod",
                  "children": [
                    {
                      "value": "t(cls):\n        configu",
                      "children": []
                    },
                    {
                      "value": "re_lo",
                      "children": [
                        {
                          "value": "e_l",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "set_service_name(\"GraphExecutor\")\n\n        cls.db_client = get_db_client()\n        cls.pool_size = settings.config.num_node_workers\n        cls.pid = os.getpid()\n        cls._init_node_executor_pool()\n        logger.info(\n            f\"Graph executor {cls.pid} started with {cls.pool_size} node workers\"\n        )\n\n        # Set up shutdown handler\n        atexit.register(cls.on_graph_executor_stop)\n\n    @classmethod",
                      "children": [
                        {
                          "value": "set_service_n",
                          "children": [
                            {
                              "value": "set_service_n",
                              "children": [
                                {
                                  "value": "set_service",
                                  "children": []
                                },
                                {
                                  "value": "_n",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "hExecutor\")\n\n        cls.db_clien",
                          "children": [
                            {
                              "value": "hExecutor\")\n\n        cls.db_clien",
                              "children": [
                                {
                                  "value": "hExecutor\")",
                                  "children": []
                                },
                                {
                                  "value": "cls.db_clien",
                                  "children": [
                                    {
                                      "value": "cls.db_clie",
                                      "children": [
                                        {
                                          "value": "",
                                          "children": []
                                        },
                                        {
                                          "value": "cls.db_cli",
                                          "children": []
                                        },
                                        {
                                          "value": "e",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "_client()\n        cls.pool_size",
                          "children": [
                            {
                              "value": "_client()\n        cls.pool_size",
                              "children": [
                                {
                                  "value": "_client()",
                                  "children": [
                                    {
                                      "value": "_cl",
                                      "children": []
                                    },
                                    {
                                      "value": "ent()",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "cls.pool_size",
                                  "children": [
                                    {
                                      "value": "cls.pool_si",
                                      "children": []
                                    },
                                    {
                                      "value": "ze",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "gs.config.num_node_workers\n        cls.pid = os.",
                          "children": [
                            {
                              "value": "gs.config.num_node_workers\n        cls.pid = os.",
                              "children": [
                                {
                                  "value": "gs.config.num",
                                  "children": [
                                    {
                                      "value": "gs.",
                                      "children": []
                                    },
                                    {
                                      "value": "onfig.num",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "de_workers\n        cls.pid = os.",
                                  "children": [
                                    {
                                      "value": "de_workers",
                                      "children": [
                                        {
                                          "value": "de_worke",
                                          "children": []
                                        },
                                        {
                                          "value": "s",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "cls.pid = os.",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "cls._init_nod",
                          "children": [
                            {
                              "value": "cls._init_nod",
                              "children": [
                                {
                                  "value": "",
                                  "children": [
                                    {
                                      "value": "",
                                      "children": []
                                    },
                                    {
                                      "value": "",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "s._init_nod",
                                  "children": [
                                    {
                                      "value": "s._init_n",
                                      "children": [
                                        {
                                          "value": "s.",
                                          "children": []
                                        },
                                        {
                                          "value": "init_n",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "od",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "r_pool()\n        logger.info(",
                          "children": [
                            {
                              "value": "r_pool()\n        logger.info(",
                              "children": [
                                {
                                  "value": "r_pool()\n        logger.info",
                                  "children": [
                                    {
                                      "value": "r_p",
                                      "children": []
                                    },
                                    {
                                      "value": "ol()\n        logger.info",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "f\"Graph executor {cls.pid} started with {cls.pool_size} node workers\"\n        )\n\n        # Set up shu",
                          "children": [
                            {
                              "value": "f\"Graph executor {cls.pid} started with {cls.pool_size} node workers\"\n        )\n\n        # Set up shu",
                              "children": [
                                {
                                  "value": "f\"Graph",
                                  "children": [
                                    {
                                      "value": "f\"G",
                                      "children": []
                                    },
                                    {
                                      "value": "aph",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "executor {cls.pid} started with {cls.pool_size} node workers\"\n        )\n\n        # Set up shu",
                                  "children": [
                                    {
                                      "value": "pid} started with {cls.pool_size} node workers\"\n        )\n\n        #",
                                      "children": [
                                        {
                                          "value": "pi",
                                          "children": []
                                        },
                                        {
                                          "value": "d} started with",
                                          "children": []
                                        },
                                        {
                                          "value": "{cls.poo",
                                          "children": [
                                            {
                                              "value": "{cls.po",
                                              "children": [
                                                {
                                                  "value": "{cl",
                                                  "children": []
                                                },
                                                {
                                                  "value": ".po",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "l_size} node w",
                                          "children": []
                                        },
                                        {
                                          "value": "orkers\"",
                                          "children": [
                                            {
                                              "value": "rkers\"",
                                              "children": [
                                                {
                                                  "value": "rke",
                                                  "children": []
                                                },
                                                {
                                                  "value": "s\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": ")\n\n        #",
                                          "children": []
                                        },
                                        {
                                          "value": "",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "ler\n        atexit.regist",
                          "children": []
                        },
                        {
                          "value": "_graph_executor_stop)\n\n    @classmethod",
                          "children": [
                            {
                              "value": "_graph_executor_stop)\n\n    @classmethod",
                              "children": [
                                {
                                  "value": "_graph_executor",
                                  "children": [
                                    {
                                      "value": "_graph",
                                      "children": []
                                    },
                                    {
                                      "value": "executor",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "_stop)\n\n    @classmethod",
                                  "children": [
                                    {
                                      "value": "stop)\n\n    @classmethod",
                                      "children": [
                                        {
                                          "value": "sto",
                                          "children": []
                                        },
                                        {
                                          "value": ")\n\n    @classmethod",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "n_graph_executor_stop(cls):\n        prefix = f\"[on_graph_executor_stop {cls.pid}]\"\n        logger.info(f\"{prefix} \u23f3 Terminating node executor pool...\")\n        cls.executor.terminate()\n        logger.info(f\"{prefix} \u23f3 Disconnecting DB manager...\")\n        close_service_client(cls.db_client)\n        logger.info(f\"{prefix} \u2705 Finished cleanup\")\n\n    @classmethod\n    def _",
              "children": [
                {
                  "value": "n_graph_exec",
                  "children": [
                    {
                      "value": "_graph_exec",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "stop(cls):\n        prefix = f\"[on_graph_executor_stop {cls.pid}]\"\n        logger.info(f\"{prefix} \u23f3 Terminating node executor pool...\")\n        cls.executor.terminate()\n        logger.info(f\"{prefix} \u23f3 Disconnecting DB manager...\")\n        close_service_client(cls.db_client)\n        logger.info(f\"{prefix} \u2705 Finished cleanup\")\n\n    @classmethod\n    def _",
                  "children": [
                    {
                      "value": "(cls):\n        prefix",
                      "children": []
                    },
                    {
                      "value": "= f\"[",
                      "children": [
                        {
                          "value": "f\"",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "xecutor_stop {cls.pid}]\"\n        logger.info(f\"{prefix} \u23f3 Terminating node executor pool...\")\n        cls.executor.terminate()\n        logger.info(f\"{prefix} \u23f3 Disconnecting DB manager...\")\n        close_service_client(cls.db_client)\n        logger.info(f\"{prefix} \u2705 Finished cleanup\")\n\n    @classmethod\n    def _",
                      "children": [
                        {
                          "value": "xecutor_stop {cls.pid}]\"\n        logger.info(f",
                          "children": [
                            {
                              "value": "xecutor_stop {cls.pid}]\"\n        logger.info(f",
                              "children": [
                                {
                                  "value": "xecuto",
                                  "children": []
                                },
                                {
                                  "value": "top {cls.pid}]\"\n        logger.info(f",
                                  "children": [
                                    {
                                      "value": "to",
                                      "children": []
                                    },
                                    {
                                      "value": "p {cls.pid}]\"\n        lo",
                                      "children": []
                                    },
                                    {
                                      "value": "gger.info",
                                      "children": [
                                        {
                                          "value": "ger.inf",
                                          "children": [
                                            {
                                              "value": "ger",
                                              "children": []
                                            },
                                            {
                                              "value": "inf",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(",
                                      "children": []
                                    },
                                    {
                                      "value": "f",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "\u23f3 Terminating node executor pool...\")\n        cls.executor.te",
                          "children": [
                            {
                              "value": "\u23f3 Terminating node executor pool...\")\n        cls.executor.te",
                              "children": [
                                {
                                  "value": "\u23f3 Terminat",
                                  "children": [
                                    {
                                      "value": "\u23f3 Ter",
                                      "children": []
                                    },
                                    {
                                      "value": "inat",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "ing node executor pool...\")\n        cls.executor.te",
                                  "children": [
                                    {
                                      "value": "ng node executor pool...\")\n        cls.executor.t",
                                      "children": [
                                        {
                                          "value": "ng",
                                          "children": []
                                        },
                                        {
                                          "value": "node ex",
                                          "children": [
                                            {
                                              "value": "node e",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "ecutor pool...\")\n        cls.executor.",
                                          "children": []
                                        },
                                        {
                                          "value": "t",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "logger.info(f\"{",
                          "children": [
                            {
                              "value": "logger.info(f\"{",
                              "children": [
                                {
                                  "value": "logger.info(f",
                                  "children": [
                                    {
                                      "value": "log",
                                      "children": [
                                        {
                                          "value": "",
                                          "children": []
                                        },
                                        {
                                          "value": "log",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "er.info(f",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "\"{",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "Disconnecting DB manager...\")\n        close_service_cli",
                          "children": [
                            {
                              "value": "Disconnecting DB manager...\")\n        close_service_cli",
                              "children": [
                                {
                                  "value": "Disconnect",
                                  "children": [
                                    {
                                      "value": "Disco",
                                      "children": []
                                    },
                                    {
                                      "value": "nect",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "ing DB manager...\")\n        close_service_cli",
                                  "children": [
                                    {
                                      "value": "ng DB manager...\")\n        close_service_cl",
                                      "children": [
                                        {
                                          "value": "ng",
                                          "children": []
                                        },
                                        {
                                          "value": "DB mana",
                                          "children": [
                                            {
                                              "value": "DB man",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "ger...\")\n        close_service_c",
                                          "children": []
                                        },
                                        {
                                          "value": "l",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "b_client)\n        logger.info(f\"{pr",
                          "children": [
                            {
                              "value": "b_client)\n        logger.info(f\"{pr",
                              "children": [
                                {
                                  "value": "b_client)\n        lo",
                                  "children": []
                                },
                                {
                                  "value": "gger.info(f\"{pr",
                                  "children": [
                                    {
                                      "value": "ger.info(f\"{p",
                                      "children": [
                                        {
                                          "value": "ger",
                                          "children": []
                                        },
                                        {
                                          "value": "info(f\"{p",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "inished cleanup\")\n\n    @classmethod\n    def _",
                          "children": [
                            {
                              "value": "inished cleanup\")\n\n    @classmethod\n    def _",
                              "children": [
                                {
                                  "value": "inished cle",
                                  "children": [
                                    {
                                      "value": "inishe",
                                      "children": []
                                    },
                                    {
                                      "value": "cle",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "anup\")\n\n    @classmethod\n    def _",
                                  "children": [
                                    {
                                      "value": "nup\")\n\n    @classmethod\n    def",
                                      "children": [
                                        {
                                          "value": "nu",
                                          "children": []
                                        },
                                        {
                                          "value": "p\")",
                                          "children": [
                                            {
                                              "value": "\")",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "@classmethod\n    def",
                                          "children": []
                                        },
                                        {
                                          "value": "",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "ode_executor_pool(cls):\n        cls.executor = Pool(\n            processes=cls.pool_size,\n            initializer=cls.on_node_executor_start,\n        )\n\n    @classmethod\n    @erro",
              "children": [
                {
                  "value": "ode_executor",
                  "children": [
                    {
                      "value": "de_executor",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(cls):\n        cls.executor = Pool(\n            processes=cls.pool_size,\n            initializer=cls.on_node_executor_start,\n        )\n\n    @classmethod\n    @erro",
                  "children": [
                    {
                      "value": "):\n        cls.executor",
                      "children": []
                    },
                    {
                      "value": "= Poo",
                      "children": [
                        {
                          "value": "Po",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "processes=cls.pool_size,\n            initializer=cls.on_node_executor_start,\n        )\n\n    @classmethod\n    @erro",
                      "children": [
                        {
                          "value": "processes=cls.pool_size,\n            initializer=cls.on_node_executor_start,\n        )\n\n    @classmethod\n    @erro",
                          "children": [
                            {
                              "value": "processes=cls.pool_size,\n            initializer=cls.on_node_executor_start,\n        )\n\n    @classmethod\n    @erro",
                              "children": [
                                {
                                  "value": "process",
                                  "children": [
                                    {
                                      "value": "",
                                      "children": []
                                    },
                                    {
                                      "value": "process",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "cls.pool_size,\n            initializer=cls.on_node_executor_start,\n        )\n\n    @classmethod\n    @erro",
                                  "children": [
                                    {
                                      "value": "cls.",
                                      "children": []
                                    },
                                    {
                                      "value": "pool_size,\n            initializer=cls.on_node_executor_start,\n        )\n\n    @classmethod\n    @erro",
                                      "children": [
                                        {
                                          "value": "initializer=cl",
                                          "children": [
                                            {
                                              "value": "",
                                              "children": []
                                            },
                                            {
                                              "value": "nitializer=cl",
                                              "children": [
                                                {
                                                  "value": "nit",
                                                  "children": []
                                                },
                                                {
                                                  "value": "alizer=cl",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "utor_start,\n        )\n\n    @classmetho",
                                          "children": [
                                            {
                                              "value": "utor_start,",
                                              "children": []
                                            },
                                            {
                                              "value": ")\n\n    @classmetho",
                                              "children": [
                                                {
                                                  "value": "",
                                                  "children": []
                                                },
                                                {
                                                  "value": ")\n\n    @classmetho",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "ed\n    def on_graph_execution(\n        cls, graph_exec: GraphExecutionEntry, cancel: threading.Event\n    ):\n        log_metadata = LogMetadata(\n            user_id=graph_exec.user_id,\n            graph_eid=graph_exec.graph_exec_id,\n            graph_id=graph_exec.graph_id,\n            node_id=\"*\",\n            node_eid=\"*\",\n            block_name=\"-\",\n        )\n        timing_info, (exec_stats, error) = cls._on_graph_execution(\n            graph_exec, cancel, log_metadata\n        )\n        exec_stats[\"walltime\"] = timing_info.wall_time\n        exec_stats[\"cputime\"] = timing_info.cpu_time\n        exec_stats[\"error\"] = str(error) if error else None\n        result = cls.db_client.update_graph_execution_stats(\n            graph_exec_id=graph_exec.graph_exec_id,\n            stats=exec_stats,\n        )\n        cls.db_client.send_execution_update(result)\n\n    @classmethod\n    @time",
              "children": [
                {
                  "value": "ed\n    def o",
                  "children": [
                    {
                      "value": "d\n    def o",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "ph_execution(",
                  "children": [
                    {
                      "value": "h_execution(",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "cls, graph_exec: GraphExecutionEntry, cancel: threading.Event\n    ):\n        log_metadata = LogMetadata(\n            user_id=graph_exec.user_id,\n            graph_eid=graph_exec.graph_exec_id,\n            graph_id=graph_exec.graph_id,\n            node_id=\"*\",\n            node_eid=\"*\",\n            block_name=\"-\",\n        )\n        timing_info, (exec_stats, error) = cls._on_graph_execution(\n            graph_exec, cancel, log_metadata\n        )\n        exec_stats[\"walltime\"] = timing_info.wall_time\n        exec_stats[\"cputime\"] = timing_info.cpu_time\n        exec_stats[\"error\"] = str(error) if error else None\n        result = cls.db_client.update_graph_execution_stats(\n            graph_exec_id=graph_exec.graph_exec_id,\n            stats=exec_stats,\n        )\n        cls.db_client.send_execution_update(result)\n\n    @classmethod\n    @time",
                  "children": [
                    {
                      "value": "cls, graph_exec: G",
                      "children": []
                    },
                    {
                      "value": "raphExecutionEntry, cancel: threading.Event\n    ):\n        log_metadata = Log",
                      "children": [
                        {
                          "value": "ion",
                          "children": []
                        },
                        {
                          "value": "try, cancel: threading.Event",
                          "children": [
                            {
                              "value": "try, cance",
                              "children": []
                            },
                            {
                              "value": "threading.Event",
                              "children": [
                                {
                                  "value": "threading.Event",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "):\n        log_metadata",
                          "children": [
                            {
                              "value": "):",
                              "children": []
                            },
                            {
                              "value": "log_metadata",
                              "children": [
                                {
                                  "value": "log_metadata",
                                  "children": [
                                    {
                                      "value": "log_me",
                                      "children": []
                                    },
                                    {
                                      "value": "adata",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "user_id=graph_exec.user_id,\n            graph_eid=graph_exec.graph_exec_id,\n            graph_id=graph_exec.graph_id,\n            node_id=\"*\",\n            node_eid=\"*\",\n            block_name=\"-\",\n        )\n        timing_info, (exec_stats, error) = cls._on_graph_execution(\n            graph_exec, cancel, log_metadata\n        )\n        exec_stats[\"walltime\"] = timing_info.wall_time\n        exec_stats[\"cputime\"] = timing_info.cpu_time\n        exec_stats[\"error\"] = str(error) if error else None\n        result = cls.db_client.update_graph_execution_stats(\n            graph_exec_id=graph_exec.graph_exec_id,\n            stats=exec_stats,\n        )\n        cls.db_client.send_execution_update(result)\n\n    @classmethod\n    @time",
                      "children": [
                        {
                          "value": "user_id=graph_exec.user_id,\n            graph_eid=graph_exec.graph_exec_id,\n            graph_id=graph_exec.graph_id,\n            node_id=\"*\",\n            node_eid=\"*\",\n            block_name=\"-\",\n        )\n        timing_info, (exec_",
                          "children": [
                            {
                              "value": "user_id=graph_exec.user_id,\n            graph_eid=graph_exec.graph_exec_id,\n            graph_id=graph_exec.graph_id,\n            node_id=\"*\",\n            node_eid=\"*\",\n            block_name=\"-\",\n        )\n        timing_info, (exec_",
                              "children": [
                                {
                                  "value": "",
                                  "children": []
                                },
                                {
                                  "value": "r_id=graph_exec.user_id,\n            graph_eid=graph_exec.graph_exec_id,\n            graph_id=graph_exec.graph_id,\n            node_id=\"*\",\n            node_eid=\"*\",\n            block_name=\"-\",\n        )\n        timing_info, (exec_",
                                  "children": [
                                    {
                                      "value": "r_id=graph_",
                                      "children": []
                                    },
                                    {
                                      "value": "exec.user_id,\n            graph_eid=graph_exec.graph_exec_id,\n            graph_id=graph_exec.graph_id,\n            node_id=\"*\",\n            node_eid=\"*\",\n            block_name=\"-\",\n        )\n        timing_info, (exec_",
                                      "children": [
                                        {
                                          "value": "graph_eid=grap",
                                          "children": [
                                            {
                                              "value": "",
                                              "children": []
                                            },
                                            {
                                              "value": "graph_eid=grap",
                                              "children": [
                                                {
                                                  "value": "graph_",
                                                  "children": []
                                                },
                                                {
                                                  "value": "id=grap",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "xec_id,\n            graph_id=graph",
                                          "children": [
                                            {
                                              "value": "xec_id,",
                                              "children": []
                                            },
                                            {
                                              "value": "graph_id=graph",
                                              "children": [
                                                {
                                                  "value": "",
                                                  "children": []
                                                },
                                                {
                                                  "value": "raph_id=graph",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": ",\n            node_id=\"*\",",
                                          "children": [
                                            {
                                              "value": ",",
                                              "children": []
                                            },
                                            {
                                              "value": "node_id=\"*\",",
                                              "children": [
                                                {
                                                  "value": "node_",
                                                  "children": []
                                                },
                                                {
                                                  "value": "d=\"*\",",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "e_eid=\"*\",",
                                          "children": [
                                            {
                                              "value": "e_eid=\"",
                                              "children": []
                                            },
                                            {
                                              "value": "\",",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": ",",
                                                  "children": []
                                                },
                                                {
                                                  "value": "",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "ock_name=\"-\"",
                                          "children": [
                                            {
                                              "value": "ock_name",
                                              "children": []
                                            },
                                            {
                                              "value": "\"-\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "-",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "timing_i",
                                          "children": [
                                            {
                                              "value": "timi",
                                              "children": []
                                            },
                                            {
                                              "value": "g_i",
                                              "children": [
                                                {
                                                  "value": "g",
                                                  "children": []
                                                },
                                                {
                                                  "value": "_",
                                                  "children": []
                                                },
                                                {
                                                  "value": "i",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "ror) = cls._on_graph_execution(\n            graph_exec, cancel, log_metadata\n        )\n        exec_stats[\"walltim",
                          "children": [
                            {
                              "value": "ror) = cls._on_graph_execution(\n            graph_exec, cancel, log_metadata\n        )\n        exec_stats[\"walltim",
                              "children": [
                                {
                                  "value": "ror) = cls._on_graph_execution(",
                                  "children": [
                                    {
                                      "value": "ror) = cls.",
                                      "children": []
                                    },
                                    {
                                      "value": "n_graph_execution(",
                                      "children": [
                                        {
                                          "value": "_graph_exe",
                                          "children": []
                                        },
                                        {
                                          "value": "tion(",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "graph_exec, cancel, log_metadata\n        )\n        exec_stats[\"walltim",
                                  "children": [
                                    {
                                      "value": "graph_exec, ca",
                                      "children": [
                                        {
                                          "value": "",
                                          "children": []
                                        },
                                        {
                                          "value": "graph_exec, ca",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "ncel, log_metadata\n        )\n        exec_stats[\"walltim",
                                      "children": [
                                        {
                                          "value": "data",
                                          "children": []
                                        },
                                        {
                                          "value": ")",
                                          "children": []
                                        },
                                        {
                                          "value": "exec_stat",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "ing_info.wall_time\n        exec_stats[\"cputime",
                          "children": [
                            {
                              "value": "ing_info.wall_time\n        exec_stats[\"cputime",
                              "children": [
                                {
                                  "value": "ing_info.wall_time",
                                  "children": [
                                    {
                                      "value": "ing_info.w",
                                      "children": []
                                    },
                                    {
                                      "value": "ll_time",
                                      "children": [
                                        {
                                          "value": "l",
                                          "children": []
                                        },
                                        {
                                          "value": "l_time",
                                          "children": []
                                        },
                                        {
                                          "value": "",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "exec_stats[\"cputime",
                                  "children": [
                                    {
                                      "value": "exec_stat",
                                      "children": []
                                    },
                                    {
                                      "value": "[\"cputime",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "ng_info.cpu_time\n        exec_stats[\"error\"]",
                          "children": [
                            {
                              "value": "ng_info.cpu_time\n        exec_stats[\"error\"]",
                              "children": [
                                {
                                  "value": "ng_info.cpu_time",
                                  "children": [
                                    {
                                      "value": "ng_info.cp",
                                      "children": []
                                    },
                                    {
                                      "value": "_time",
                                      "children": [
                                        {
                                          "value": "_",
                                          "children": []
                                        },
                                        {
                                          "value": "time",
                                          "children": []
                                        },
                                        {
                                          "value": "",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "exec_stats[\"error\"]",
                                  "children": [
                                    {
                                      "value": "exec_stats",
                                      "children": []
                                    },
                                    {
                                      "value": "\"error\"]",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "ror) if error else None\n        result = cls.db_cli",
                          "children": [
                            {
                              "value": "ror) if error else None\n        result = cls.db_cli",
                              "children": [
                                {
                                  "value": "ror) if error else",
                                  "children": [
                                    {
                                      "value": "ror) if er",
                                      "children": []
                                    },
                                    {
                                      "value": "or else",
                                      "children": [
                                        {
                                          "value": "o",
                                          "children": []
                                        },
                                        {
                                          "value": "r els",
                                          "children": []
                                        },
                                        {
                                          "value": "e",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "e\n        result = cls.db_cli",
                                  "children": [
                                    {
                                      "value": "e",
                                      "children": [
                                        {
                                          "value": "e",
                                          "children": []
                                        },
                                        {
                                          "value": "",
                                          "children": [
                                            {
                                              "value": "",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "lt =",
                                      "children": []
                                    },
                                    {
                                      "value": "_cli",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "e_graph_execution_stats(\n            graph_exec_id=graph_exec.graph_exec_id,\n            stats=exec_stats,\n        )\n        cls.db_client.send_",
                          "children": [
                            {
                              "value": "e_graph_execution_stats(\n            graph_exec_id=graph_exec.graph_exec_id,\n            stats=exec_stats,\n        )\n        cls.db_client.send_",
                              "children": [
                                {
                                  "value": "e_grap",
                                  "children": []
                                },
                                {
                                  "value": "xecution_stats(\n            graph_exec_id=graph_exec.graph_exec_id,\n            stats=exec_stats,\n        )\n        cls.db_client.send_",
                                  "children": [
                                    {
                                      "value": "xecution_stats(\n            graph_exec_id=",
                                      "children": [
                                        {
                                          "value": "xecution_stat",
                                          "children": [
                                            {
                                              "value": "xec",
                                              "children": []
                                            },
                                            {
                                              "value": "tion_stat",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(\n            graph_exec_id=",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "graph_exec.graph_exec_id,\n            stats=exec_stats,\n        )\n        cls.db_client.send_",
                                      "children": [
                                        {
                                          "value": "ph_exec_id,\n            stats=exec_sta",
                                          "children": [
                                            {
                                              "value": "ph_exec_id,",
                                              "children": []
                                            },
                                            {
                                              "value": "stats=exec_sta",
                                              "children": [
                                                {
                                                  "value": "",
                                                  "children": []
                                                },
                                                {
                                                  "value": "tats=exec_sta",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "cls.db_c",
                                          "children": [
                                            {
                                              "value": "",
                                              "children": []
                                            },
                                            {
                                              "value": "cls.db_c",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "_update(result)\n\n    @classmethod\n    @time",
                          "children": [
                            {
                              "value": "_update(result)\n\n    @classmethod\n    @time",
                              "children": [
                                {
                                  "value": "_update(result)\n\n    @classmethod",
                                  "children": [
                                    {
                                      "value": "_update(resul",
                                      "children": [
                                        {
                                          "value": "_up",
                                          "children": []
                                        },
                                        {
                                          "value": "ate(resul",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": ")\n\n    @classmethod",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "@time",
                                  "children": [
                                    {
                                      "value": "@tim",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "red\n    def _on_graph_execution(\n        cls,\n        graph_exec: GraphExecutionEntry,\n        cancel: threading.Event,\n        log_metadata: LogMetadata,\n    ) -> tuple[dict[str, Any], Exception | None]:\n        \"\"\"\n        Returns:\n            The execution statistics of the graph execution.\n            The error that occurred during the execution.\n        \"\"\"\n        log_metadata.info(f\"Start graph execution {graph_exec.graph_exec_id}\")\n        exec_stats = {\n            \"nodes_walltime\": 0,\n            \"nodes_cputime\": 0,\n            \"node_count\": 0,\n        }\n        error = None\n        finished = False\n\n        def cancel_handler():\n            while not cancel.is_set():\n                cancel.wait(1)\n            if finished:\n                return\n            cls.executor.terminate()\n            log_metadata.info(f\"Terminated graph execution {graph_exec.graph_exec_id}\")\n            cls._init_node_executor_pool()\n\n        cancel_thread = threading.Thread(target=cancel_handler)\n        cancel_thread.start()\n\n        try:\n            queue = ExecutionQueue[NodeExecutionEntry]()\n            for node_exec in graph_exec.start_node_execs:\n                queue.add(node_exec)\n\n            running_executions: dict[str, AsyncResult] = {}\n\n            def make_exec_callback(exec_data: NodeExecutionEntry):\n                node_id = exec_data.node_id\n\n                def callback(result: object):\n                    running_executions.pop(node_id)\n                    nonlocal exec_stats\n                    if isinstance(result, dict):\n                        exec_stats[\"node_count\"] += 1\n                        exec_stats[\"nodes_cputime\"] += result.get(\"cputime\", 0)\n                        exec_stats[\"nodes_walltime\"] += result.get(\"walltime\", 0)\n\n                return callback\n\n            while not queue.empty():\n                if cancel.is_set():\n                    error = RuntimeError(\"Execution is cancelled\")\n                    return exec_stats, error\n\n                exec_data = queue.get()\n\n                # Avoid parallel execution of the same node.\n                execution = running_executions.get(exec_data.node_id)\n                if execution and not execution.ready():\n                    # TODO (performance improvement):\n                    #   Wait for the completion of the same node execution is blocking.\n                    #   To improve this we need a separate queue for each node.\n                    #   Re-enqueueing the data back to the queue will disrupt the order.\n                    execution.wait()\n\n                log_metadata.debug(\n                    f\"Dispatching node execution {exec_data.node_exec_id} \"\n                    f\"for node {exec_data.node_id}\",\n                )\n                running_executions[exec_data.node_id] = cls.executor.apply_async(\n                    cls.on_node_execution,\n                    (queue, exec_data),\n                    callback=make_exec_callback(exec_data),\n                )\n\n                # Avoid terminating graph execution when some nodes are still running.\n                while queue.empty() and running_executions:\n                    log_metadata.debug(\n                        f\"Queue empty; running nodes: {list(running_executions.keys())}\"\n                    )\n                    for node_id, execution in list(running_executions.items()):\n                        if cancel.is_set():\n                            error = RuntimeError(\"Execution is cancelled\")\n                            return exec_stats, error\n\n                        if not queue.empty():\n                            break  # yield to parent loop to execute new queue items\n\n                        log_metadata.debug(f\"Waiting on execution of node {node_id}\")\n                        execution.wait(3)\n\n            log_metadata.info(f\"Finished graph execution {graph_exec.graph_exec_id}\")\n        except Exception as e:\n            log_metadata.exception(\n                f\"Failed graph execution {graph_exec.graph_exec_id}: {e}\"\n            )\n            error = e\n        finally:\n            if not cancel.is_set():\n                finished = True\n                cancel.set()\n            cancel_thread.join()\n            return exec_stats, error\n\n\nclass ExecutionManager(Ap",
              "children": [
                {
                  "value": "red\n    def",
                  "children": [
                    {
                      "value": "ed\n    def",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "raph_execution",
                  "children": [
                    {
                      "value": "aph_execution",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "cls,\n        graph_exec: GraphExecutionEntry,\n        cancel: threading.Event,\n        log_metadata: LogMetadata,\n    ) -> tuple[dict[str, Any], Exception | None]:\n        \"\"\"\n        Returns:\n            The execution statistics of the graph execution.\n            The error that occurred during the execution.\n        \"\"\"\n        log_metadata.info(f\"Start graph execution {graph_exec.graph_exec_id}\")\n        exec_stats = {\n            \"nodes_walltime\": 0,\n            \"nodes_cputime\": 0,\n            \"node_count\": 0,\n        }\n        error = None\n        finished = False\n\n        def cancel_handler():\n            while not cancel.is_set():\n                cancel.wait(1)\n            if finished:\n                return\n            cls.executor.terminate()\n            log_metadata.info(f\"Terminated graph execution {graph_exec.graph_exec_id}\")\n            cls._init_node_executor_pool()\n\n        cancel_thread = threading.Thread(target=cancel_handler)\n        cancel_thread.start()\n\n        try:\n            queue = ExecutionQueue[NodeExecutionEntry]()\n            for node_exec in graph_exec.start_node_execs:\n                queue.add(node_exec)\n\n            running_executions: dict[str, AsyncResult] = {}\n\n            def make_exec_callback(exec_data: NodeExecutionEntry):\n                node_id = exec_data.node_id\n\n                def callback(result: object):\n                    running_executions.pop(node_id)\n                    nonlocal exec_stats\n                    if isinstance(result, dict):\n                        exec_stats[\"node_count\"] += 1\n                        exec_stats[\"nodes_cputime\"] += result.get(\"cputime\", 0)\n                        exec_stats[\"nodes_walltime\"] += result.get(\"walltime\", 0)\n\n                return callback\n\n            while not queue.empty():\n                if cancel.is_set():\n                    error = RuntimeError(\"Execution is cancelled\")\n                    return exec_stats, error\n\n                exec_data = queue.get()\n\n                # Avoid parallel execution of the same node.\n                execution = running_executions.get(exec_data.node_id)\n                if execution and not execution.ready():\n                    # TODO (performance improvement):\n                    #   Wait for the completion of the same node execution is blocking.\n                    #   To improve this we need a separate queue for each node.\n                    #   Re-enqueueing the data back to the queue will disrupt the order.\n                    execution.wait()\n\n                log_metadata.debug(\n                    f\"Dispatching node execution {exec_data.node_exec_id} \"\n                    f\"for node {exec_data.node_id}\",\n                )\n                running_executions[exec_data.node_id] = cls.executor.apply_async(\n                    cls.on_node_execution,\n                    (queue, exec_data),\n                    callback=make_exec_callback(exec_data),\n                )\n\n                # Avoid terminating graph execution when some nodes are still running.\n                while queue.empty() and running_executions:\n                    log_metadata.debug(\n                        f\"Queue empty; running nodes: {list(running_executions.keys())}\"\n                    )\n                    for node_id, execution in list(running_executions.items()):\n                        if cancel.is_set():\n                            error = RuntimeError(\"Execution is cancelled\")\n                            return exec_stats, error\n\n                        if not queue.empty():\n                            break  # yield to parent loop to execute new queue items\n\n                        log_metadata.debug(f\"Waiting on execution of node {node_id}\")\n                        execution.wait(3)\n\n            log_metadata.info(f\"Finished graph execution {graph_exec.graph_exec_id}\")\n        except Exception as e:\n            log_metadata.exception(\n                f\"Failed graph execution {graph_exec.graph_exec_id}: {e}\"\n            )\n            error = e\n        finally:\n            if not cancel.is_set():\n                finished = True\n                cancel.set()\n            cancel_thread.join()\n            return exec_stats, error\n\n\nclass ExecutionManager(Ap",
                  "children": [
                    {
                      "value": "cls,\n        graph",
                      "children": []
                    },
                    {
                      "value": "_exec: GraphExecutionEntry,\n        cancel: threading.Event,\n        log_metadata: LogMetadata,\n    ) -> tuple[dict[str, Any], Ex",
                      "children": [
                        {
                          "value": "phE",
                          "children": []
                        },
                        {
                          "value": "try,\n        cancel: threading.",
                          "children": [
                            {
                              "value": "try,",
                              "children": []
                            },
                            {
                              "value": "cancel: threading.",
                              "children": [
                                {
                                  "value": "cancel: threading.",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "log_metadata: LogM",
                          "children": [
                            {
                              "value": "l",
                              "children": []
                            },
                            {
                              "value": "_metadata: LogM",
                              "children": [
                                {
                                  "value": "_metadata: LogM",
                                  "children": [
                                    {
                                      "value": "_metadata",
                                      "children": []
                                    },
                                    {
                                      "value": "LogM",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": ") -> tuple[dict[str, A",
                          "children": [
                            {
                              "value": ") -> tupl",
                              "children": []
                            },
                            {
                              "value": "dict[str, A",
                              "children": [
                                {
                                  "value": "dict[str, A",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "ion | None]:\n        \"\"\"\n        Return",
                      "children": [
                        {
                          "value": "ion | None]:\n        \"\"\"\n        Return",
                          "children": [
                            {
                              "value": "ion |",
                              "children": []
                            },
                            {
                              "value": "None]:\n        \"\"\"\n        Return",
                              "children": [
                                {
                                  "value": "None]:",
                                  "children": [
                                    {
                                      "value": "None]:",
                                      "children": [
                                        {
                                          "value": "None",
                                          "children": []
                                        },
                                        {
                                          "value": "]:",
                                          "children": [
                                            {
                                              "value": ":",
                                              "children": [
                                                {
                                                  "value": ":",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "",
                                              "children": [
                                                {
                                                  "value": "",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "\"\"\n        Retur",
                                  "children": [
                                    {
                                      "value": "\"\"\n        Retur",
                                      "children": [
                                        {
                                          "value": "\"\"",
                                          "children": []
                                        },
                                        {
                                          "value": "etur",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "The execution statistics of the graph execution.\n            The error that occurred during the execution.\n        \"\"\"\n        log_metadata.info(f\"Start graph execution {graph_exec.graph_exec_id}\")\n        exec_stats = {\n            \"nodes_walltime\": 0,\n            \"nodes_cputime\": 0,\n            \"node_count\": 0,\n        }\n        error = None\n        finished = False\n\n        def cancel_handler():\n            while not cancel.is_set():\n                cancel.wait(1)\n            if finished:\n                return\n            cls.executor.terminate()\n            log_metadata.info(f\"Terminated graph execution {graph_exec.graph_exec_id}\")\n            cls._init_node_executor_pool()\n\n        cancel_thread = threading.Thread(target=cancel_handler)\n        cancel_thread.start()\n\n        try:\n            queue = ExecutionQueue[NodeExecutionEntry]()\n            for node_exec in graph_exec.start_node_execs:\n                queue.add(node_exec)\n\n            running_executions: dict[str, AsyncResult] = {}\n\n            def make_exec_callback(exec_data: NodeExecutionEntry):\n                node_id = exec_data.node_id\n\n                def callback(result: object):\n                    running_executions.pop(node_id)\n                    nonlocal exec_stats\n                    if isinstance(result, dict):\n                        exec_stats[\"node_count\"] += 1\n                        exec_stats[\"nodes_cputime\"] += result.get(\"cputime\", 0)\n                        exec_stats[\"nodes_walltime\"] += result.get(\"walltime\", 0)\n\n                return callback\n\n            while not queue.empty():\n                if cancel.is_set():\n                    error = RuntimeError(\"Execution is cancelled\")\n                    return exec_stats, error\n\n                exec_data = queue.get()\n\n                # Avoid parallel execution of the same node.\n                execution = running_executions.get(exec_data.node_id)\n                if execution and not execution.ready():\n                    # TODO (performance improvement):\n                    #   Wait for the completion of the same node execution is blocking.\n                    #   To improve this we need a separate queue for each node.\n                    #   Re-enqueueing the data back to the queue will disrupt the order.\n                    execution.wait()\n\n                log_metadata.debug(\n                    f\"Dispatching node execution {exec_data.node_exec_id} \"\n                    f\"for node {exec_data.node_id}\",\n                )\n                running_executions[exec_data.node_id] = cls.executor.apply_async(\n                    cls.on_node_execution,\n                    (queue, exec_data),\n                    callback=make_exec_callback(exec_data),\n                )\n\n                # Avoid terminating graph execution when some nodes are still running.\n                while queue.empty() and running_executions:\n                    log_metadata.debug(\n                        f\"Queue empty; running nodes: {list(running_executions.keys())}\"\n                    )\n                    for node_id, execution in list(running_executions.items()):\n                        if cancel.is_set():\n                            error = RuntimeError(\"Execution is cancelled\")\n                            return exec_stats, error\n\n                        if not queue.empty():\n                            break  # yield to parent loop to execute new queue items\n\n                        log_metadata.debug(f\"Waiting on execution of node {node_id}\")\n                        execution.wait(3)\n\n            log_metadata.info(f\"Finished graph execution {graph_exec.graph_exec_id}\")\n        except Exception as e:\n            log_metadata.exception(\n                f\"Failed graph execution {graph_exec.graph_exec_id}: {e}\"\n            )\n            error = e\n        finally:\n            if not cancel.is_set():\n                finished = True\n                cancel.set()\n            cancel_thread.join()\n            return exec_stats, error\n\n\nclass ExecutionManager(Ap",
                      "children": [
                        {
                          "value": "The execution statistics of the graph execution.\n            The error that occurred during the execution.\n        \"\"\"\n        log_metadata.info(f",
                          "children": [
                            {
                              "value": "The execution statistics of the graph execution.\n            The error that occurred during the execution.\n        \"\"\"\n        log_metadata.info(f",
                              "children": [
                                {
                                  "value": "",
                                  "children": []
                                },
                                {
                                  "value": "The execution statistics of the graph execution.\n            The error that occurred during the execution.\n        \"\"\"\n        log_metadata.inf",
                                  "children": []
                                },
                                {
                                  "value": "o(f",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "aph execution {graph_exec.graph_exec_id}\")\n        exec_stats = {",
                          "children": [
                            {
                              "value": "aph execution {graph_exec.graph_exec_id}\")\n        exec_stats = {",
                              "children": [
                                {
                                  "value": "aph execution {gr",
                                  "children": [
                                    {
                                      "value": "aph executio",
                                      "children": []
                                    },
                                    {
                                      "value": "{gr",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "aph_exec.graph_exec_id}\")\n        exec_stats = {",
                                  "children": [
                                    {
                                      "value": "ph_exec.graph_exec_id}\")\n        exec_stats = {",
                                      "children": [
                                        {
                                          "value": "ph",
                                          "children": []
                                        },
                                        {
                                          "value": "_exec.graph_exec_id}\")",
                                          "children": []
                                        },
                                        {
                                          "value": "exec_stats = {",
                                          "children": [
                                            {
                                              "value": "exec_stats = {",
                                              "children": [
                                                {
                                                  "value": "ex",
                                                  "children": []
                                                },
                                                {
                                                  "value": "c_stats = {",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "nodes_walltime\": 0,\n            \"nodes_cputime\": 0,\n            \"node_count\": 0,\n        }\n        error = None",
                          "children": [
                            {
                              "value": "nodes_walltime\": 0,\n            \"nodes_cputime\": 0,\n            \"node_count\": 0,\n        }\n        error = None",
                              "children": [
                                {
                                  "value": "nodes_wall",
                                  "children": []
                                },
                                {
                                  "value": "e\": 0,\n            \"nodes_cputime\": 0,\n            \"node_count\": 0,\n        }\n        error = None",
                                  "children": [
                                    {
                                      "value": "\"nodes_cputime",
                                      "children": [
                                        {
                                          "value": "\"nodes_cput",
                                          "children": [
                                            {
                                              "value": "",
                                              "children": []
                                            },
                                            {
                                              "value": "\"nodes_cpu",
                                              "children": []
                                            },
                                            {
                                              "value": "t",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "e",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "\"node_count\":",
                                      "children": [
                                        {
                                          "value": "\"node_count",
                                          "children": [
                                            {
                                              "value": "",
                                              "children": []
                                            },
                                            {
                                              "value": "\"node_coun",
                                              "children": []
                                            },
                                            {
                                              "value": "t",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "error =",
                                      "children": [
                                        {
                                          "value": "error",
                                          "children": [
                                            {
                                              "value": "",
                                              "children": []
                                            },
                                            {
                                              "value": "erro",
                                              "children": []
                                            },
                                            {
                                              "value": "r",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "d = False",
                          "children": [
                            {
                              "value": "d = False",
                              "children": [
                                {
                                  "value": "d = F",
                                  "children": []
                                },
                                {
                                  "value": "e",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "f cancel_handler",
                          "children": [
                            {
                              "value": "f cancel_handler",
                              "children": [
                                {
                                  "value": "f cancel",
                                  "children": []
                                },
                                {
                                  "value": "ndler",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "while not cancel.is_set():\n                cancel.wait(1)\n            if finished:\n                return\n            cls.executor.terminate()\n            log_metadata.info(f\"Terminated graph execution {graph_exec.graph_exec_id}\")\n            cls._init_node_executor_pool()\n\n        cancel_thread = th",
                          "children": [
                            {
                              "value": "while not ca",
                              "children": []
                            },
                            {
                              "value": "nc",
                              "children": []
                            },
                            {
                              "value": "cancel.wait(1)\n            if finished:\n                return\n            cls.executor.terminate()\n            log_metadata.info(f\"Terminated graph execution {graph_exec.graph_exec_id}\")\n            cls._init_node_executor_pool()\n\n        cancel_thread = th",
                              "children": [
                                {
                                  "value": "cancel.wait(1)\n            if finished:",
                                  "children": [
                                    {
                                      "value": "cancel.wai",
                                      "children": [
                                        {
                                          "value": "cancel.wai",
                                          "children": [
                                            {
                                              "value": "cancel.w",
                                              "children": [
                                                {
                                                  "value": "c",
                                                  "children": []
                                                },
                                                {
                                                  "value": "ncel.w",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "ai",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "f finished:",
                                      "children": [
                                        {
                                          "value": "f finished:",
                                          "children": [
                                            {
                                              "value": "f finished:",
                                              "children": [
                                                {
                                                  "value": "f finished:",
                                                  "children": [
                                                    {
                                                      "value": "f fini",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "hed:",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "",
                                                  "children": [
                                                    {
                                                      "value": "",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "return\n            cls.executor.te",
                                  "children": [
                                    {
                                      "value": "turn",
                                      "children": []
                                    },
                                    {
                                      "value": "tor.te",
                                      "children": [
                                        {
                                          "value": "tor.te",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "log_metadata.in",
                                  "children": [
                                    {
                                      "value": "log_metadata.in",
                                      "children": [
                                        {
                                          "value": "log_metadata.",
                                          "children": [
                                            {
                                              "value": "log",
                                              "children": [
                                                {
                                                  "value": "",
                                                  "children": []
                                                },
                                                {
                                                  "value": "log",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "metadata.",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "in",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "ed graph execution {graph_exec.graph_exec_id}\")\n            cls._init_node_",
                                  "children": [
                                    {
                                      "value": "ed graph execution {graph_exec.graph_exec_id}\")\n            cls._init_node_",
                                      "children": [
                                        {
                                          "value": "ed graph executio",
                                          "children": [
                                            {
                                              "value": "ed graph exe",
                                              "children": []
                                            },
                                            {
                                              "value": "utio",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "n {graph_exec.graph_exec_id}\")\n            cls._init_node_",
                                          "children": [
                                            {
                                              "value": "{graph_exec.graph_exec_id}\")\n            cls._init_node",
                                              "children": [
                                                {
                                                  "value": "{",
                                                  "children": []
                                                },
                                                {
                                                  "value": "graph_exec.graph_exec_id}\")",
                                                  "children": []
                                                },
                                                {
                                                  "value": "cls._init_nod",
                                                  "children": [
                                                    {
                                                      "value": "cls._init_no",
                                                      "children": [
                                                        {
                                                          "value": "",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "cls._init_no",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "e",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "()\n\n        cancel_thread = th",
                                  "children": [
                                    {
                                      "value": "()\n\n        cancel_thread = th",
                                      "children": [
                                        {
                                          "value": "()\n\n        cancel_thread =",
                                          "children": [
                                            {
                                              "value": "()",
                                              "children": []
                                            },
                                            {
                                              "value": "cancel_thread =",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "th",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "read(target=cancel_handler)\n        cancel_thread.start",
                          "children": [
                            {
                              "value": "read(target=cancel_handler)\n        cancel_thread.start",
                              "children": [
                                {
                                  "value": "read(target=c",
                                  "children": []
                                },
                                {
                                  "value": "el_handler)\n        cancel_thread.start",
                                  "children": [
                                    {
                                      "value": "el_handler)",
                                      "children": [
                                        {
                                          "value": "el_handle",
                                          "children": []
                                        },
                                        {
                                          "value": ")",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "cancel_thread.start",
                                      "children": [
                                        {
                                          "value": "cancel_thread.star",
                                          "children": [
                                            {
                                              "value": "can",
                                              "children": []
                                            },
                                            {
                                              "value": "el_thread.star",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "try:\n            q",
                          "children": [
                            {
                              "value": "try:\n            q",
                              "children": [
                                {
                                  "value": "try:",
                                  "children": [
                                    {
                                      "value": "try:",
                                      "children": []
                                    },
                                    {
                                      "value": "",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "q",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "cutionQueue[NodeExecutionEntry]()\n            for node_exec in graph_exec.start_node_execs:\n                queue.add(node_exec)\n\n            running_executions: dict[str, AsyncResult] = {}\n\n            def make_exec_callback(exec_data: NodeExecutionEntry):\n                node_id = exec_data.node_id\n\n                def callback(result: object):\n                    running_executions.pop(node_id)\n                    nonlocal exec_stats\n                    if isinstance(result, dict):\n                        exec_stats[\"node_count\"] += 1\n                        exec_stats[\"nodes_cputime\"] += result.get(\"cputime\", 0)\n                        exec_stats[\"nodes_walltime\"] += result.get(\"walltime\", 0)\n\n                return callback\n\n            while not queue.empty():\n                if cancel.is_set():\n                    error = RuntimeError(\"Execution is cancelled\")\n                    return exec_stats, error\n\n                exec_data = queue.get()\n\n                # Avoid parallel execution of the same node.\n                execution = running_executions.get(exec_data.node_id)\n                if execution and not execution.ready():\n                    # TODO (performance improvement):\n                    #   Wait for the completion of the same node execution is blocking.\n                    #   To improve this we need a separate queue for each node.\n                    #   Re-enqueueing the data back to the queue will disrupt the order.\n                    execution.wait()\n\n                log_metadata.debug(\n                    f\"Dispatching node execution {exec_data.node_exec_id} \"\n                    f\"for node {exec_data.node_id}\",\n                )\n                running_executions[exec_data.node_id] = cls.executor.apply_async(\n                    cls.on_node_execution,\n                    (queue, exec_data),\n                    callback=make_exec_callback(exec_data),\n                )\n\n                # Avoid terminating graph execution when some nodes are still running.\n                while queue.empty() and running_executions:\n                    log_metadata.debug(\n                        f\"Queue empty; running nodes: {list(running_executions.keys())}\"\n                    )\n                    for node_id, execution in list(running_executions.items()):\n                        if cancel.is_set():\n                            error = RuntimeError(\"Execution is cancelled\")\n                            return exec_stats, error\n\n                        if not queue.empty():\n                            break  # yield to parent loop to execute new queue items\n\n                        log_metadata.debug(f\"Waiting on execution of node {node_id}\")\n                        execution.wait(3)\n\n            log_metadata.info(f\"Finished graph execution {graph_exec.graph_exec_id}\")\n        except Exception as e:\n            log_metadata.exception(\n                f\"Failed graph execution {graph_exec.graph_exec_id}: {e}\"\n            )\n            error = e\n        finally:\n            if not cancel.is_set():\n                finished = True\n                cancel.set()\n            cancel_thread.join()\n            return exec_stats, error\n\n\nclass ExecutionManager(Ap",
                          "children": [
                            {
                              "value": "xecutionEntry]()\n            for node_exec in graph_exec.start_node_execs:\n                queue.add(node_exec)\n\n            running_executions: dict[str, AsyncResult] = {}\n\n            def make_exec_callback(exec_data: NodeExecutionEntry):\n                node_id = exec_data.node_id\n\n                def callback(result: object):\n                    running_executions.pop(node_id)\n                    nonlocal exec_stats\n                    if isinstance(result, dict):\n                        exec_stats[\"node_count\"] += 1\n                        exec_stats[\"nodes_cputime\"] += result.get(\"cputime\", 0)\n                        exec_stats[\"nodes_walltime\"] += result.get(\"walltime\", 0)\n\n                return callback\n\n            while not queue.empty():\n                if cancel.is_set():\n                    error = RuntimeError(\"Execution is cancelled\")\n                    return exec_stats, error\n\n                exec_data = queue.get()\n\n                # Avoid parallel execution of the same node.\n                execution = running_executions.get(exec_data.node_id)\n                if execution and not execution.ready():\n                    # TODO (performance improvement):\n                    #   Wait for the completion of the same node execution is blocking.\n                    #   To improve this we need a separate queue for each node.\n                    #   Re-enqueueing the data back to the queue will disrupt the order.\n                    execution.wait()\n\n                log_metadata.debug(\n                    f\"Dispatching node execution {exec_data.node_exec_id} \"\n                    f\"for node {exec_data.node_id}\",\n                )\n                running_executions[exec_data.node_id] = cls.executor.apply_async(\n                    cls.on_node_execution,\n                    (queue, exec_data),\n                    callback=make_exec_callback(exec_data),\n                )\n\n                # Avoid terminating graph execution when some nodes are still running.\n                while queue.empty() and running_executions:\n                    log_metadata.debug(\n                        f\"Queue empty; running nodes: {list(running_executions.keys())}\"\n                    )\n                    for node_id, execution in list(running_executions.items()):\n                        if cancel.is_set():\n                            error = RuntimeError(\"Execution is cancelled\")\n                            return exec_stats, error\n\n                        if not queue.empty():\n                            break  # yield to parent loop to execute new queue items\n\n                        log_metadata.debug(f\"Waiting on execution of node {node_id}\")\n                        execution.wait(3)\n\n            log_metadata.info(f\"Finished graph execution {graph_exec.graph_exec_id}\")\n        except Exception as",
                              "children": [
                                {
                                  "value": "xecutionEntry]()\n            for node_exec i",
                                  "children": [
                                    {
                                      "value": "xecutionEntry]()\n            for node_exec i",
                                      "children": [
                                        {
                                          "value": "xecut",
                                          "children": []
                                        },
                                        {
                                          "value": "Entry]()\n            for node_exec i",
                                          "children": [
                                            {
                                              "value": "Entry]()\n            for node_exec",
                                              "children": [
                                                {
                                                  "value": "Entry]()",
                                                  "children": []
                                                },
                                                {
                                                  "value": "for node_exe",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "i",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "start_node_execs:\n                queue.add(node_exec)\n\n            running_execut",
                                  "children": [
                                    {
                                      "value": "t_node_ex",
                                      "children": []
                                    },
                                    {
                                      "value": "queue.add(",
                                      "children": [
                                        {
                                          "value": "",
                                          "children": []
                                        },
                                        {
                                          "value": "queue.add(",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "running_execut",
                                      "children": [
                                        {
                                          "value": "running_execut",
                                          "children": [
                                            {
                                              "value": "running_execut",
                                              "children": [
                                                {
                                                  "value": "run",
                                                  "children": [
                                                    {
                                                      "value": "",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "run",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "ning_execut",
                                                  "children": [
                                                    {
                                                      "value": "ing_execu",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": ", AsyncResult] = {}\n\n            def make_exec_",
                                  "children": [
                                    {
                                      "value": ", AsyncResult] = {}\n\n            def make_exec_",
                                      "children": [
                                        {
                                          "value": ", AsyncResult] = {",
                                          "children": []
                                        },
                                        {
                                          "value": "def make_",
                                          "children": [
                                            {
                                              "value": "def make_",
                                              "children": [
                                                {
                                                  "value": "",
                                                  "children": []
                                                },
                                                {
                                                  "value": "def make_",
                                                  "children": [
                                                    {
                                                      "value": "",
                                                      "children": [
                                                        {
                                                          "value": "",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "def make",
                                                      "children": [
                                                        {
                                                          "value": "def make",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "c_",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "data: NodeExecutionEntry):\n                node_id = exec_data.node_id\n\n                def callback(result: object):\n                    running_executions.pop(node_id)\n                    nonlocal exec_stats\n                    if isinstance(result, dict):\n                        exec_stats[\"node_count\"] += 1\n                        exec_stats[\"nodes_cputime\"] += result.get(\"cputime\", 0)\n                        exec_stats[\"nodes_walltime\"] += result.get(\"walltime\", 0)\n\n                return callback\n\n            while not queu",
                                  "children": [
                                    {
                                      "value": ": NodeExecutionEnt",
                                      "children": []
                                    },
                                    {
                                      "value": "ry):\n                node_id =",
                                      "children": [
                                        {
                                          "value": "y):\n                node_id =",
                                          "children": [
                                            {
                                              "value": "y):",
                                              "children": []
                                            },
                                            {
                                              "value": "node_id =",
                                              "children": [
                                                {
                                                  "value": "node_id =",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "def callback(result: object):\n                    running_executions.pop(node_id)\n                    nonlocal exec_stats\n                    if isinstance(result, dict):\n                        exec_stats[\"node_count\"] += 1\n                        exec_stats[\"nodes_cputime\"] += result.get(\"cputime\", 0)\n                        exec_stats[\"nodes_walltime\"] += result.get(\"walltime\", 0)\n\n                return callback\n\n            while not queu",
                                      "children": [
                                        {
                                          "value": "def callba",
                                          "children": [
                                            {
                                              "value": "def callba",
                                              "children": [
                                                {
                                                  "value": "",
                                                  "children": []
                                                },
                                                {
                                                  "value": "def callba",
                                                  "children": [
                                                    {
                                                      "value": "de",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "callba",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": ":\n                    running_executions.pop(node_id)\n                    nonlocal exec_stats\n                    if isinstance(result, dict):\n                        exec_stats[\"node_count\"] += 1\n                        exec_stats[\"nodes_cputime\"] += result.get(\"cputime\", 0)\n                        exec_stats[\"nodes_walltime\"] += result.get(\"walltime\", 0)\n\n                return cal",
                                          "children": [
                                            {
                                              "value": "",
                                              "children": []
                                            },
                                            {
                                              "value": "runnin",
                                              "children": [
                                                {
                                                  "value": "runni",
                                                  "children": [
                                                    {
                                                      "value": "",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "runni",
                                                      "children": [
                                                        {
                                                          "value": "runni",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "id)\n                    nonlocal exec_stats\n                    if isinstance(result, dict):\n                        exec_stats[\"node_count\"] += 1\n                        exec_stats[\"nodes_cputime\"] += result.get(\"cputime\", 0)\n                        exec_stats[\"nodes_walltime\"] += result.get(\"walltime\", 0)\n\n                return cal",
                                              "children": [
                                                {
                                                  "value": "id)\n                    nonloca",
                                                  "children": [
                                                    {
                                                      "value": "id)\n                    nonloca",
                                                      "children": [
                                                        {
                                                          "value": "id)",
                                                          "children": [
                                                            {
                                                              "value": "id)",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "nonloca",
                                                          "children": [
                                                            {
                                                              "value": "nonloc",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "if isin",
                                                  "children": [
                                                    {
                                                      "value": "if isin",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "exec_stats[\"node_count\"] += 1\n                        exec_stats[\"nodes_cputime\"] += result.get(\"cputime\", 0)\n                        exec_stats[\"nodes_walltime\"] += result.get(\"walltime\", 0)\n\n                return cal",
                                                  "children": [
                                                    {
                                                      "value": "ex",
                                                      "children": [
                                                        {
                                                          "value": "",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "ex",
                                                          "children": [
                                                            {
                                                              "value": "",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "e",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "1\n                        exec_stats[\"nodes_cputime\"] += result.get(\"cputime\", 0)\n                        exec_stats[\"nodes_walltime\"] += result.get(\"walltime\", 0)\n\n                return cal",
                                                      "children": [
                                                        {
                                                          "value": "1\n                        exe",
                                                          "children": [
                                                            {
                                                              "value": "1\n                        exe",
                                                              "children": [
                                                                {
                                                                  "value": "1",
                                                                  "children": [
                                                                    {
                                                                      "value": "1",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "",
                                                                      "children": [
                                                                        {
                                                                          "value": "",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "e",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "+= result.get(\"cputime\", 0)\n                        exe",
                                                          "children": [
                                                            {
                                                              "value": "+= result.get(\"cputime\", 0)\n                        exe",
                                                              "children": [
                                                                {
                                                                  "value": "+= result.get(\"cputime\", 0)",
                                                                  "children": [
                                                                    {
                                                                      "value": "+= result.",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "et(\"cputime\", 0",
                                                                      "children": [
                                                                        {
                                                                          "value": "e",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "t(\"cputime\",",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "0",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "exe",
                                                                  "children": [
                                                                    {
                                                                      "value": "",
                                                                      "children": [
                                                                        {
                                                                          "value": "",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "exe",
                                                                      "children": [
                                                                        {
                                                                          "value": "",
                                                                          "children": [
                                                                            {
                                                                              "value": "",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "value": "",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "value": "",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "value": "x",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "+= result.get(\"walltime\", 0)\n\n                return cal",
                                                          "children": [
                                                            {
                                                              "value": "+= result.get(\"walltime\", 0)\n\n                return cal",
                                                              "children": [
                                                                {
                                                                  "value": "+= result.get(\"walltime\", 0",
                                                                  "children": [
                                                                    {
                                                                      "value": "+= result",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "get(\"walltime\",",
                                                                      "children": [
                                                                        {
                                                                          "value": "g",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "et(\"walltime\",",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "return cal",
                                                                  "children": [
                                                                    {
                                                                      "value": "",
                                                                      "children": [
                                                                        {
                                                                          "value": "",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "return cal",
                                                                      "children": [
                                                                        {
                                                                          "value": "return",
                                                                          "children": [
                                                                            {
                                                                              "value": "",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "value": "retur",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "value": "n",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "value": "a",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "while not queu",
                                          "children": [
                                            {
                                              "value": "not queu",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "if cancel.is_set():\n                    error = RuntimeError(\"Execution is cancelled\")\n                    return exec_stats, error\n\n                exec_data = queue.get()\n\n                # Avoid parallel execution of the same node.\n                execution = running_executions.get(exec_data.node_id)\n                if execution and not execution.ready():\n                    # TODO (performance improvement):\n                    #   Wait for the completion of the same node execution is blocking.\n                    #   To improve this we need a separate queue for each node.\n                    #   Re-enqueueing the data back to the queue will disrupt the order.\n                    execution.wait()\n\n                log_metadata.debug(\n                    f\"Dispatching node execution {exec_data.node_exec_id} \"\n                    f\"for node {exec_data.node_id}\",\n                )\n                running_executions[exec_data.node_id] = cls.executor.apply_async(\n                    cls.on_node_execution,\n                    (queue, exec_data),\n                    callback=make_exec_callback(exec_data),\n                )\n\n                # Avoid terminating graph execution when some nodes are still running.\n                while queue.empty() and running_executions:\n                    log_metadata.debug(\n                        f\"Queue empty; running nodes: {list(running_executions.keys())}\"\n                    )\n                    for node_id, execution in list(running_executions.items()):\n                        if cancel.is_set():\n                            error = RuntimeError(\"Execution is cancelled\")\n                            return exec_stats, error\n\n                        if not queue.empty():\n                            break  # yield to parent loop to execute new queue items\n\n                        log_metadata.debug(f\"Waiting on execution of node {node_id}\")\n                        execution.wait(3)\n\n            log_metadata.i",
                                  "children": [
                                    {
                                      "value": "if cancel.",
                                      "children": [
                                        {
                                          "value": "if cancel.",
                                          "children": [
                                            {
                                              "value": "if cance",
                                              "children": [
                                                {
                                                  "value": "if",
                                                  "children": []
                                                },
                                                {
                                                  "value": "cance",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "l.",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "error = RuntimeError(\"Execution is cancelled\")\n                    return exec_stats, error\n\n                exec_data = queue.get()\n\n                # Avoid parallel execution of the same node.\n                execution = running_executions.get(exec_data.node_id)\n                if execution and not execution.ready():\n                    # TODO (performance improvement):\n                    #   Wait for the completion of the same node execution is blocking.\n                    #   To improve this we need a separate queue for each node.\n                    #   Re-enqueueing the data back to the queue will disrupt the order.\n                    execution.wait()\n\n                log_metadata.debug(\n                    f\"Dispatching node execution {exec_data.node_exec_id} \"\n                    f\"for node {exec_data.node_id}\",\n                )\n                running_executions[exec_data.node_id] = cls.executor.apply_async(\n                    cls.on_node_execution,\n                    (queue, exec_data),\n                    callback=make_exec_callback(exec_data),\n                )\n\n                # Avoid terminating graph execution when some nodes are still running.\n                while queue.empty() and running_executions:\n                    log_metadata.debug(\n                        f\"Queue empty; running nodes: {list(running_executions.keys())}\"\n                    )\n                    for node_id, execution in list(running_executions.items()):\n                        if cancel.is_set():\n                            error = RuntimeError(\"Execution is cancelled\")\n                            return exec_stats, error\n\n                        if not queue.empty():\n                            break  # yield to parent loop to execute new queue items\n\n                        log_metadata.debug(f\"Waiting on execution of node {node_id}\")\n                        execution.wait(3)\n\n            log_metadata.i",
                                      "children": [
                                        {
                                          "value": "error = RuntimeError(\"Execution is cancelled\")\n                    return exec_stats, error\n\n                exec_data",
                                          "children": [
                                            {
                                              "value": "error",
                                              "children": [
                                                {
                                                  "value": "erro",
                                                  "children": [
                                                    {
                                                      "value": "",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "erro",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "r",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "ion is cancelled\")\n                    return exec_stats, error\n\n                exec_data",
                                              "children": [
                                                {
                                                  "value": "ion is cancelled\")\n                    return",
                                                  "children": [
                                                    {
                                                      "value": "ion is cancelled\")\n                    return",
                                                      "children": [
                                                        {
                                                          "value": "ion i",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "ancelled\")\n                    return",
                                                          "children": [
                                                            {
                                                              "value": "ancelled\")",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "return",
                                                              "children": [
                                                                {
                                                                  "value": "return",
                                                                  "children": [
                                                                    {
                                                                      "value": "",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "retur",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "n",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "exec_data",
                                                  "children": [
                                                    {
                                                      "value": "exec_data",
                                                      "children": [
                                                        {
                                                          "value": "exe",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "data",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "# Avoid pa",
                                          "children": [
                                            {
                                              "value": "# Avoid pa",
                                              "children": [
                                                {
                                                  "value": "",
                                                  "children": []
                                                },
                                                {
                                                  "value": "# Avoid pa",
                                                  "children": [
                                                    {
                                                      "value": "# Avoid",
                                                      "children": [
                                                        {
                                                          "value": "# Av",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "id",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "pa",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "f the same node.\n                execution =",
                                          "children": []
                                        },
                                        {
                                          "value": "ns.get(exec_data.node_id)\n                if executio",
                                          "children": [
                                            {
                                              "value": "ns.get(exec_data.node_id)\n                if executio",
                                              "children": [
                                                {
                                                  "value": "ns.get(ex",
                                                  "children": []
                                                },
                                                {
                                                  "value": "data.node_id)\n                if executio",
                                                  "children": [
                                                    {
                                                      "value": "data.node_id)",
                                                      "children": [
                                                        {
                                                          "value": "data.node_id)",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "if executio",
                                                      "children": [
                                                        {
                                                          "value": "if executi",
                                                          "children": [
                                                            {
                                                              "value": "if",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "executi",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "on.ready():\n                    # TODO (performance improvement):\n                    #   Wait for the completion of the same node execution is blocking.\n                    #   To improve this we need a separate queue for each node.\n                    #   Re-enqueueing the data back to the queue will disrupt the order.\n                    execution.wait()\n\n                log_metada",
                                          "children": [
                                            {
                                              "value": "ready():\n                    # TODO",
                                              "children": [
                                                {
                                                  "value": "ready():",
                                                  "children": []
                                                },
                                                {
                                                  "value": "# TODO",
                                                  "children": [
                                                    {
                                                      "value": "# TODO",
                                                      "children": [
                                                        {
                                                          "value": "# TO",
                                                          "children": [
                                                            {
                                                              "value": "",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "# TO",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "DO",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "ent):\n                    #   Wai",
                                              "children": []
                                            },
                                            {
                                              "value": "of the same node execution is blocking.\n                    #   To",
                                              "children": []
                                            },
                                            {
                                              "value": "a separate queue for each node.\n                    #   Re-",
                                              "children": []
                                            },
                                            {
                                              "value": "ack to the queue will disrupt the order.\n                    executi",
                                              "children": []
                                            },
                                            {
                                              "value": "log_metada",
                                              "children": [
                                                {
                                                  "value": "log_metada",
                                                  "children": [
                                                    {
                                                      "value": "log_metada",
                                                      "children": [
                                                        {
                                                          "value": "log_meta",
                                                          "children": [
                                                            {
                                                              "value": "log",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "meta",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "da",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "f\"Dispatching node execution {exec_data.node_exec_id} \"\n                    f\"for node {exec_data.node_id}\",\n                )\n                running_exe",
                                          "children": [
                                            {
                                              "value": "f\"Dispatching node execution {exec_data.node_exec_id} \"\n                    f\"for node {exec_data.node_id}\",\n                )\n                running_exe",
                                              "children": [
                                                {
                                                  "value": "f\"Disp",
                                                  "children": [
                                                    {
                                                      "value": "",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"Disp",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "atching node execution {exec_data.node_exec_id} \"\n                    f\"for node {exec_data.node_id}\",\n                )\n                running_exe",
                                                  "children": [
                                                    {
                                                      "value": "{exec_data.node_exec_id} \"\n                    f\"for node {exec_data.node_id}\",\n                )",
                                                      "children": [
                                                        {
                                                          "value": "{exec_data.node_exec_id} \"\n                    f\"for n",
                                                          "children": [
                                                            {
                                                              "value": "{",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "exec_data.node_exec_id} \"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "f\"for",
                                                              "children": [
                                                                {
                                                                  "value": "f\"fo",
                                                                  "children": [
                                                                    {
                                                                      "value": "",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "f\"fo",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "n",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "d}\",\n                )",
                                                          "children": [
                                                            {
                                                              "value": "d}",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\",",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": ")",
                                                              "children": [
                                                                {
                                                                  "value": ")",
                                                                  "children": [
                                                                    {
                                                                      "value": "",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": ".node_id] = cls.executor.apply_async(\n                    cls.on_node_execution,\n                    (queue, exec_data),\n                    callback=make_exec_callback(exec_data),\n                )\n\n                # Avoid te",
                                          "children": [
                                            {
                                              "value": ".node_id] = cls.executor.apply_async(\n                    cls.on_node_execution,\n                    (queue, exec_data),\n                    callback=make_exec_callback(exec_data),\n                )\n\n                # Avoid te",
                                              "children": [
                                                {
                                                  "value": ".node_id] = cls.executor.apply_async(",
                                                  "children": [
                                                    {
                                                      "value": ".node_id] = cls.ex",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "cutor.apply_async",
                                                      "children": [
                                                        {
                                                          "value": "cutor.app",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "y_async",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "cls.on_node_execution,\n                    (queue, exec_data),\n                    callback=make_exec_callback(exec_data),\n                )\n\n                # Avoid te",
                                                  "children": [
                                                    {
                                                      "value": "cls.on",
                                                      "children": [
                                                        {
                                                          "value": "",
                                                          "children": [
                                                            {
                                                              "value": "",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "cls.on",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "_node_execution,\n                    (queue, exec_data),\n                    callback=make_exec_callback(exec_data),\n                )\n\n                # Avoid te",
                                                      "children": [
                                                        {
                                                          "value": "(queue",
                                                          "children": [
                                                            {
                                                              "value": "",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "(queue",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "callba",
                                                          "children": [
                                                            {
                                                              "value": "",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "callb",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "exec_data),\n                )",
                                                          "children": [
                                                            {
                                                              "value": "exec_dat",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "),\n                )",
                                                              "children": [
                                                                {
                                                                  "value": "),",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": ")",
                                                                  "children": [
                                                                    {
                                                                      "value": ")",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "ecution when some nodes are still running.\n                while queue",
                                          "children": []
                                        },
                                        {
                                          "value": "ing_executions:\n                    log_metadata.debug(\n                        f\"Queue empty; running nodes: {list(running_executions.keys())}\"\n                    )\n                    for node_id, execution in list(running_executions.items()):\n                        if cancel.is_set():\n                            error = RuntimeError(\"Execution is cancelled\")\n                            return exec_stats, error\n\n                        if not queue.empty():\n                            break  # yield to parent loop to execute new queue items\n\n                        log_metadata.debug(f\"Waiting on execution of node {node_id}\")\n                        execution.wait(3)\n\n            log_metadata.i",
                                          "children": [
                                            {
                                              "value": "ecutions:\n                    log_me",
                                              "children": [
                                                {
                                                  "value": "ecutions:",
                                                  "children": [
                                                    {
                                                      "value": "ecutions:",
                                                      "children": [
                                                        {
                                                          "value": "ecuti",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "ns:",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "log_me",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "f\"Queue empty; running nodes: {list(running_executions.keys())}\"\n                    )\n                    for node_id, execution in list(running_executions.items()):\n                        if cancel.is_set():\n                            error = RuntimeError(\"Execution is cancelled\")\n                            return exec_stats, error\n\n                        if not queue.empty():\n                            break  # yield to parent loop to execute new queue items\n\n                        log_metadata.debug(f\"Waiting on execution of node {node_id}\")\n                        execution.wait(3)\n\n            log_metadata.i",
                                              "children": [
                                                {
                                                  "value": "f\"Queue empty; running nodes: {list(running_executions.keys())}\"\n                    )\n                    for nod",
                                                  "children": [
                                                    {
                                                      "value": "f\"Queue empty; running nodes: {list(running_executions.keys())}\"\n                    )\n                    for nod",
                                                      "children": [
                                                        {
                                                          "value": "f\"",
                                                          "children": [
                                                            {
                                                              "value": "",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "f\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "Queue empty; running nodes: {list(running_executions.keys())}\"\n                    )\n                    for nod",
                                                          "children": [
                                                            {
                                                              "value": ": {list(running_executions.keys())}\"\n                    )",
                                                              "children": [
                                                                {
                                                                  "value": ":",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "{list(running_executions.key",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "s())}\"\n                    )",
                                                                  "children": [
                                                                    {
                                                                      "value": "())}\"\n                    )",
                                                                      "children": [
                                                                        {
                                                                          "value": "())}",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "\"\n                    )",
                                                                          "children": [
                                                                            {
                                                                              "value": ")",
                                                                              "children": [
                                                                                {
                                                                                  "value": ")",
                                                                                  "children": [
                                                                                    {
                                                                                      "value": "",
                                                                                      "children": []
                                                                                    },
                                                                                    {
                                                                                      "value": ")",
                                                                                      "children": []
                                                                                    }
                                                                                  ]
                                                                                },
                                                                                {
                                                                                  "value": "",
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "st(running_executions.items()):\n                        if cancel.is_set():\n                            error = RuntimeError(\"Execution is cancelled\")\n                            return exec_stats, error\n\n                        if not queue.empty():\n                            break  # yield to parent loop to execute new queue items\n\n                        log_metadata.debug(f\"Waiting on execution of node {node_id}\")\n                        execution.wait(3)\n\n            log_metadata.i",
                                                  "children": [
                                                    {
                                                      "value": "unning_executions.",
                                                      "children": [
                                                        {
                                                          "value": "unning_",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "ecutions.",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "s()):\n                        if",
                                                      "children": [
                                                        {
                                                          "value": "s())",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": ":\n                        if",
                                                          "children": [
                                                            {
                                                              "value": "i",
                                                              "children": [
                                                                {
                                                                  "value": "",
                                                                  "children": [
                                                                    {
                                                                      "value": "",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "i",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "error = RuntimeError(\"Execution is cancelled\")\n                            return exec_stats, error\n\n                        if not queue.empty():\n                            break  # yield to parent loop to execute new queue items\n\n                        log_metadata.debug(f\"Waiting on execution of node {node_id}\")\n                        execution.wait(3)\n\n            log_metadata.i",
                                                      "children": [
                                                        {
                                                          "value": "error = RuntimeError(\"Execution is cancelled\")\n                            return exec_stats, error\n\n                        if",
                                                          "children": [
                                                            {
                                                              "value": "",
                                                              "children": [
                                                                {
                                                                  "value": "",
                                                                  "children": [
                                                                    {
                                                                      "value": "",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "ion is cancelled\")\n                            return exec_stats, error\n\n                        if",
                                                              "children": [
                                                                {
                                                                  "value": "ion is cancelled\")",
                                                                  "children": [
                                                                    {
                                                                      "value": "ion is cancelled\")",
                                                                      "children": [
                                                                        {
                                                                          "value": "ion i",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "ancelled\")",
                                                                          "children": [
                                                                            {
                                                                              "value": "ancelled\")",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "value": "",
                                                                              "children": [
                                                                                {
                                                                                  "value": "",
                                                                                  "children": [
                                                                                    {
                                                                                      "value": "",
                                                                                      "children": []
                                                                                    },
                                                                                    {
                                                                                      "value": "",
                                                                                      "children": []
                                                                                    },
                                                                                    {
                                                                                      "value": "",
                                                                                      "children": []
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "if",
                                                                  "children": [
                                                                    {
                                                                      "value": "if",
                                                                      "children": [
                                                                        {
                                                                          "value": "",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "if",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "break  # yield to parent loop to execute new queue items\n\n                        lo",
                                                          "children": [
                                                            {
                                                              "value": "",
                                                              "children": [
                                                                {
                                                                  "value": "",
                                                                  "children": [
                                                                    {
                                                                      "value": "",
                                                                      "children": [
                                                                        {
                                                                          "value": "",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "p to execute new queue items\n\n                        lo",
                                                              "children": [
                                                                {
                                                                  "value": "p to",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "ecute new queue items\n\n                        lo",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "on execution of node {node_id}\")\n                        exe",
                                                          "children": [
                                                            {
                                                              "value": "on execution of node {node_id}\")\n                        exe",
                                                              "children": [
                                                                {
                                                                  "value": "on execution of n",
                                                                  "children": [
                                                                    {
                                                                      "value": "on executio",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "of n",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "ode {node_id}\")\n                        exe",
                                                                  "children": [
                                                                    {
                                                                      "value": "de {node_id}\")\n                        ex",
                                                                      "children": [
                                                                        {
                                                                          "value": "de",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "{node_id}\")",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "e",
                                                                          "children": [
                                                                            {
                                                                              "value": "",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "value": "x",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "log_metadata.i",
                                                          "children": [
                                                            {
                                                              "value": "log_metadata.i",
                                                              "children": [
                                                                {
                                                                  "value": "log_metadat",
                                                                  "children": [
                                                                    {
                                                                      "value": "log_me",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "adat",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "a.i",
                                                                  "children": [
                                                                    {
                                                                      "value": ".",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "graph execution {graph_exec.graph_exec_id}\")\n        except Exception as",
                                  "children": [
                                    {
                                      "value": "graph execution {graph_exec.graph_exec_id}\")\n        except Exception as",
                                      "children": [
                                        {
                                          "value": "graph execution",
                                          "children": [
                                            {
                                              "value": "graph execu",
                                              "children": []
                                            },
                                            {
                                              "value": "ion",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "{graph_exec.graph_exec_id}\")\n        except Exception as",
                                          "children": [
                                            {
                                              "value": "graph_exec.graph_exec_id}\")\n        except Exception a",
                                              "children": [
                                                {
                                                  "value": "gr",
                                                  "children": []
                                                },
                                                {
                                                  "value": "aph_exec.graph_exec_id}\")",
                                                  "children": []
                                                },
                                                {
                                                  "value": "except Exception",
                                                  "children": [
                                                    {
                                                      "value": "except Exception",
                                                      "children": [
                                                        {
                                                          "value": "ex",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "ept Exception",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "a",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "log_metadata.exception(\n                f\"Failed graph execution {graph_exec.graph_exec_id}: {e}\"\n            )\n            error = e\n        finally:",
                              "children": [
                                {
                                  "value": "log_metadata.e",
                                  "children": [
                                    {
                                      "value": "log_metad",
                                      "children": []
                                    },
                                    {
                                      "value": "e",
                                      "children": [
                                        {
                                          "value": "e",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "f\"Failed graph execution {graph_exec.graph_exec_id}: {e}\"\n            )\n            error = e\n        finally:",
                                  "children": [
                                    {
                                      "value": "f\"Failed graph execution {graph_exec.graph_exec_id}: {e}\"\n            )\n            error = e",
                                      "children": [
                                        {
                                          "value": "f\"Failed graph execution {graph_exec.graph_exec_id}: {e}\"\n            )\n            error = e",
                                          "children": [
                                            {
                                              "value": "f\"Failed g",
                                              "children": [
                                                {
                                                  "value": "",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"Failed g",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "raph execution {graph_exec.graph_exec_id}: {e}\"\n            )\n            error = e",
                                              "children": [
                                                {
                                                  "value": "aph_exec.graph_exec_id}: {e}\"\n            )\n            e",
                                                  "children": [
                                                    {
                                                      "value": "ap",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "h_exec.graph_exec_id}:",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "{e}\"\n            )",
                                                      "children": [
                                                        {
                                                          "value": "e}\"\n            )",
                                                          "children": [
                                                            {
                                                              "value": "e}\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": ")",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "",
                                                      "children": [
                                                        {
                                                          "value": "",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "e",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "",
                                      "children": [
                                        {
                                          "value": "",
                                          "children": [
                                            {
                                              "value": "",
                                              "children": []
                                            },
                                            {
                                              "value": "",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "cancel.is_set():\n                finished = True\n                cancel.set()\n            cancel_thread.join()\n            return exec_stats, error\n\n\nclass ExecutionManager(Ap",
                              "children": [
                                {
                                  "value": "finished = True\n                cancel.set()\n            cancel_thread.join()\n            return exec_stats, error\n\n\nclass ExecutionManager(Ap",
                                  "children": [
                                    {
                                      "value": "finished = True\n                cancel.set()\n            cancel_thread.j",
                                      "children": [
                                        {
                                          "value": "finished =",
                                          "children": [
                                            {
                                              "value": "finished =",
                                              "children": [
                                                {
                                                  "value": "finished",
                                                  "children": [
                                                    {
                                                      "value": "f",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "nished",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "=",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "cancel.set()\n            cancel_thread.j",
                                          "children": [
                                            {
                                              "value": "cancel.set(",
                                              "children": [
                                                {
                                                  "value": "cancel.set(",
                                                  "children": [
                                                    {
                                                      "value": "canc",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "set(",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "cel_thread.j",
                                              "children": [
                                                {
                                                  "value": "cel_thread.j",
                                                  "children": [
                                                    {
                                                      "value": "cel_thread",
                                                      "children": [
                                                        {
                                                          "value": "cel_th",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "ead",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": ".j",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "return exec_sta",
                                      "children": [
                                        {
                                          "value": "return exec_sta",
                                          "children": [
                                            {
                                              "value": "return exec_s",
                                              "children": [
                                                {
                                                  "value": "return e",
                                                  "children": []
                                                },
                                                {
                                                  "value": "ec_s",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "ta",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "lass ExecutionManager(Ap",
                                      "children": [
                                        {
                                          "value": "ecutionManager(Ap",
                                          "children": [
                                            {
                                              "value": "ecutionMan",
                                              "children": []
                                            },
                                            {
                                              "value": "er(Ap",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "rvice):\n    def __init__(self):\n        super().__init__()\n        self.use_redis = True\n        self.use_supabase = True\n        self.pool_size = settings.config.num_graph_workers\n        self.queue = ExecutionQueue[GraphExecutionEntry]()\n        self.active_graph_runs: dict[str, tuple[Future, threading.Event]] = {}\n\n    @classmethod\n    def get_port(cls) -> int:\n        return settings.config.execution_manager_port\n\n    def run_service(self):\n        from backend.integrations.credentials_store import IntegrationCredentialsStore\n\n        self.credentials_store = IntegrationCredentialsStore()\n        self.executor = ProcessPoolExecutor(\n            max_workers=self.pool_size,\n            initializer=Executor.on_graph_executor_start,\n        )\n        sync_manager = multiprocessing.Manager()\n        logger.info(\n            f\"[{self.service_name}] Started with max-{self.pool_size} graph workers\"\n        )\n        while True:\n            graph_exec_data = self.queue.get()\n            graph_exec_id = graph_exec_data.graph_exec_id\n            logger.debug(\n                f\"[ExecutionManager] Dispatching graph execution {graph_exec_id}\"\n            )\n            cancel_event = sync_manager.Event()\n            future = self.executor.submit(\n                Executor.on_graph_execution, graph_exec_data, cancel_event\n            )\n            self.active_graph_runs[graph_exec_id] = (future, cancel_event)\n            future.add_done_callback(\n                lambda _: self.active_graph_runs.pop(graph_exec_id, None)\n            )\n\n    def cleanup(self):\n        logger.info(f\"[{__class__.__name__}] \u23f3 Shutting down graph executor pool...\")\n        self.executor.shutdown(cancel_futures=True)\n\n        super().cleanup()\n\n    @property\n    def db_client(self) -> \"DatabaseManager\":\n        return get_db_client()\n\n    @expose\n    def add_execution(\n        self,\n        graph_id: str,\n        data: BlockInput,\n        user_id: str,\n        graph_version: int | None = None,\n    ) -> GraphExecutionEntry:\n        graph: GraphModel | None = self.db_client.get_graph(\n            graph_id=graph_id, user_id=user_id, version=graph_version\n        )\n        if not graph:\n            raise ValueError(f\"Graph #{graph_id} not found.\")\n\n        graph.validate_graph(for_run=True)\n        self._validate_node_input_credentials(graph, user_id)\n\n        nodes_input = []\n        for node in graph.starting_nodes:\n            input_data = {}\n            block = get_block(node.block_id)\n\n            # Invalid block & Note block should never be executed.\n            if not block or block.block_type == BlockType.NOTE:\n                continue\n\n            # Extract request input data, and assign it to the input pin.\n            if block.block_type == BlockType.INPUT:\n                name = node.input_default.get(\"name\")\n                if name and name in data:\n                    input_data = {\"value\": data[name]}\n\n            # Extract webhook payload, and assign it to the input pin\n            webhook_payload_key = f\"webhook_{node.webhook_id}_payload\"\n            if (\n                block.block_type in (BlockType.WEBHOOK, BlockType.WEBHOOK_MANUAL)\n                and node.webhook_id\n            ):\n                if webhook_payload_key not in data:\n                    raise ValueError(\n                        f\"Node {block.name} #{node.id} webhook payload is missing\"\n                    )\n                input_data = {\"payload\": data[webhook_payload_key]}\n\n            input_data, error = validate_exec(node, input_data)\n            if input_data is None:\n                raise ValueError(error)\n            else:\n                nodes_input.append((node.id, input_data))\n\n        graph_exec_id, node_execs = self.db_client.create_graph_execution(\n            graph_id=graph_id,\n            graph_version=graph.version,\n            nodes_input=nodes_input,\n            user_id=user_id,\n        )\n\n        starting_node_execs = []\n        for node_exec in node_execs:\n            starting_node_execs.append(\n                NodeExecutionEntry(\n                    user_id=user_id,\n                    graph_exec_id=node_exec.graph_exec_id,\n                    graph_id=node_exec.graph_id,\n                    node_exec_id=node_exec.node_exec_id,\n                    node_id=node_exec.node_id,\n                    data=node_exec.input_data,\n                )\n            )\n            exec_update = self.db_client.update_execution_status(\n                node_exec.node_exec_id, ExecutionStatus.QUEUED, node_exec.input_data\n            )\n            self.db_client.send_execution_update(exec_update)\n\n        graph_exec = GraphExecutionEntry(\n            user_id=user_id,\n            graph_id=graph_id,\n            graph_exec_id=graph_exec_id,\n            start_node_execs=starting_node_execs,\n        )\n        self.queue.add(graph_exec)\n\n        return graph_exec\n\n    @expose\n    def cancel_execution(self, graph_exec_id: str) -> None:\n        \"\"\"\n        Mechanism:\n        1. Set the cancel event\n        2. Graph executor's cancel handler thread detects the event, terminates workers,\n           reinitializes worker pool, and returns.\n        3. Update execution statuses in DB and set `error` outputs to `\"TERMINATED\"`.\n        \"\"\"\n        if graph_exec_id not in self.active_graph_runs:\n            raise Exception(\n                f\"Graph execution #{graph_exec_id} not active/running: \"\n                \"possibly already completed/cancelled.\"\n            )\n\n        future, cancel_event = self.active_graph_runs[graph_exec_id]\n        if cancel_event.is_set():\n            return\n\n        cancel_event.set()\n        future.result()\n\n        # Update the status of the unfinished node executions\n        node_execs = self.db_client.get_execution_results(graph_exec_id)\n        for node_exec in node_execs:\n            if node_exec.status not in (\n                ExecutionStatus.COMPLETED,\n                ExecutionStatus.FAILED,\n            ):\n                self.db_client.upsert_execution_output(\n                    node_exec.node_exec_id, \"error\", \"TERMINATED\"\n                )\n                exec_update = self.db_client.update_execution_status(\n                    node_exec.node_exec_id, ExecutionStatus.FAILED\n                )\n                self.db_client.send_execution_update(exec_update)\n\n    def _validate_node_input_credentials(self, graph: GraphModel, user_id: str):\n        \"\"\"Checks all credentials for all nodes of the graph\"\"\"\n\n        for node in graph.nodes:\n            block = get_block(node.block_id)\n            if not block:\n                raise ValueError(f\"Unknown block {node.block_id} for node #{node.id}\")\n\n            # Find any fields of type CredentialsMetaInput\n            model_fields = cast(type[BaseModel], block.input_schema).model_fields\n            if CREDENTIALS_FIELD_NAME not in model_fields:\n                continue\n\n            field = model_fields[CREDENTIALS_FIELD_NAME]\n\n            # The BlockSchema class enforces that a `credentials` field is always a\n            # `CredentialsMetaInput`, so we can safely assume this here.\n            credentials_meta_type = cast(CredentialsMetaInput, field.annotation)\n            credentials_meta = credentials_meta_type.model_validate(\n                node.input_default[CREDENTIALS_FIELD_NAME]\n            )\n            # Fetch the corresponding Credentials and perform sanity checks\n            credentials = self.credentials_store.get_creds_by_id(\n                user_id, credentials_meta.id\n            )\n            if not credentials:\n                raise ValueError(\n                    f\"Unknown credentials #{credentials_meta.id} \"\n                    f\"for node #{node.id}\"\n                )\n            if (\n                credentials.provider != credentials_meta.provider\n                or credentials.type != credentials_meta.type\n            ):\n                logger.warning(\n                    f\"Invalid credentials #{credentials.id} for node #{node.id}: \"\n                    \"type/provider mismatch: \"\n                    f\"{credentials_meta.type}<>{credentials.type};\"\n                    f\"{credentials_meta.provider}<>{credentials.provider}\"\n                )\n                raise ValueError(\n                    f\"Invalid credentials #{credentials.id} for node #{node.id}: \"\n                    \"type/provider mismatch\"\n                )\n\n\n# ------- UTILITIES -------",
      "children": [
        {
          "value": ":\n    def __init",
          "children": []
        },
        {
          "value": "__(self):",
          "children": [
            {
              "value": "_(self):",
              "children": []
            }
          ]
        },
        {
          "value": "super().__init__()\n        self.use_redis = True\n        self.use_supabase = True\n        self.pool_size = settings.config.num_graph_workers\n        self.queue = ExecutionQueue[GraphExecutionEntry]()\n        self.active_graph_runs: dict[str, tuple[Future, threading.Event]] = {}\n\n    @classmethod\n    def get_port(cls) -> int:\n        return settings.config.execution_manager_port\n\n    def run_service(self):\n        from backend.integrations.credentials_store import IntegrationCredentialsStore\n\n        self.credentials_store = IntegrationCredentialsStore()\n        self.executor = ProcessPoolExecutor(\n            max_workers=self.pool_size,\n            initializer=Executor.on_graph_executor_start,\n        )\n        sync_manager = multiprocessing.Manager()\n        logger.info(\n            f\"[{self.service_name}] Started with max-{self.pool_size} graph workers\"\n        )\n        while True:\n            graph_exec_data = self.queue.get()\n            graph_exec_id = graph_exec_data.graph_exec_id\n            logger.debug(\n                f\"[ExecutionManager] Dispatching graph execution {graph_exec_id}\"\n            )\n            cancel_event = sync_manager.Event()\n            future = self.executor.submit(\n                Executor.on_graph_execution, graph_exec_data, cancel_event\n            )\n            self.active_graph_runs[graph_exec_id] = (future, cancel_event)\n            future.add_done_callback(\n                lambda _: self.active_graph_runs.pop(graph_exec_id, None)\n            )\n\n    def cleanup(self):\n        logger.info(f\"[{__class__.__name__}] \u23f3 Shutting down graph executor pool...\")\n        self.executor.shutdown(cancel_futures=True)\n\n        super().cleanup()\n\n    @property\n    def db_client(self) -> \"DatabaseManager\":\n        return get_db_client()\n\n    @expose\n    def add_execution(\n        self,\n        graph_id: str,\n        data: BlockInput,\n        user_id: str,\n        graph_version: int | None = None,\n    ) -> GraphExecutionEntry:\n        graph: GraphModel | None = self.db_client.get_graph(\n            graph_id=graph_id, user_id=user_id, version=graph_version\n        )\n        if not graph:\n            raise ValueError(f\"Graph #{graph_id} not found.\")\n\n        graph.validate_graph(for_run=True)\n        self._validate_node_input_credentials(graph, user_id)\n\n        nodes_input = []\n        for node in graph.starting_nodes:\n            input_data = {}\n            block = get_block(node.block_id)\n\n            # Invalid block & Note block should never be executed.\n            if not block or block.block_type == BlockType.NOTE:\n                continue\n\n            # Extract request input data, and assign it to the input pin.\n            if block.block_type == BlockType.INPUT:\n                name = node.input_default.get(\"name\")\n                if name and name in data:\n                    input_data = {\"value\": data[name]}\n\n            # Extract webhook payload, and assign it to the input pin\n            webhook_payload_key = f\"webhook_{node.webhook_id}_payload\"\n            if (\n                block.block_type in (BlockType.WEBHOOK, BlockType.WEBHOOK_MANUAL)\n                and node.webhook_id\n            ):\n                if webhook_payload_key not in data:\n                    raise ValueError(\n                        f\"Node {block.name} #{node.id} webhook payload is missing\"\n                    )\n                input_data = {\"payload\": data[webhook_payload_key]}\n\n            input_data, error = validate_exec(node, input_data)\n            if input_data is None:\n                raise ValueError(error)\n            else:\n                nodes_input.append((node.id, input_data))\n\n        graph_exec_id, node_execs = self.db_client.create_graph_execution(\n            graph_id=graph_id,\n            graph_version=graph.version,\n            nodes_input=nodes_input,\n            user_id=user_id,\n        )\n\n        starting_node_execs = []\n        for node_exec in node_execs:\n            starting_node_execs.append(\n                NodeExecutionEntry(\n                    user_id=user_id,\n                    graph_exec_id=node_exec.graph_exec_id,\n                    graph_id=node_exec.graph_id,\n                    node_exec_id=node_exec.node_exec_id,\n                    node_id=node_exec.node_id,\n                    data=node_exec.input_data,\n                )\n            )\n            exec_update = self.db_client.update_execution_status(\n                node_exec.node_exec_id, ExecutionStatus.QUEUED, node_exec.input_data\n            )\n            self.db_client.send_execution_update(exec_update)\n\n        graph_exec = GraphExecutionEntry(\n            user_id=user_id,\n            graph_id=graph_id,\n            graph_exec_id=graph_exec_id,\n            start_node_execs=starting_node_execs,\n        )\n        self.queue.add(graph_exec)\n\n        return graph_exec\n\n    @expose\n    def cancel_execution(self, graph_exec_id: str) -> None:\n        \"\"\"\n        Mechanism:\n        1. Set the cancel event\n        2. Graph executor's cancel handler thread detects the event, terminates workers,\n           reinitializes worker pool, and returns.\n        3. Update execution statuses in DB and set `error` outputs to `\"TERMINATED\"`.\n        \"\"\"\n        if graph_exec_id not in self.active_graph_runs:\n            raise Exception(\n                f\"Graph execution #{graph_exec_id} not active/running: \"\n                \"possibly already completed/cancelled.\"\n            )\n\n        future, cancel_event = self.active_graph_runs[graph_exec_id]\n        if cancel_event.is_set():\n            return\n\n        cancel_event.set()\n        future.result()\n\n        # Update the status of the unfinished node executions\n        node_execs = self.db_client.get_execution_results(graph_exec_id)\n        for node_exec in node_execs:\n            if node_exec.status not in (\n                ExecutionStatus.COMPLETED,\n                ExecutionStatus.FAILED,\n            ):\n                self.db_client.upsert_execution_output(\n                    node_exec.node_exec_id, \"error\", \"TERMINATED\"\n                )\n                exec_update = self.db_client.update_execution_status(\n                    node_exec.node_exec_id, ExecutionStatus.FAILED\n                )\n                self.db_client.send_execution_update(exec_update)\n\n    def _validate_node_input_credentials(self, graph: GraphModel, user_id: str):\n        \"\"\"Checks all credentials for all nodes of the graph\"\"\"\n\n        for node in graph.nodes:\n            block = get_block(node.block_id)\n            if not block:\n                raise ValueError(f\"Unknown block {node.block_id} for node #{node.id}\")\n\n            # Find any fields of type CredentialsMetaInput\n            model_fields = cast(type[BaseModel], block.input_schema).model_fields\n            if CREDENTIALS_FIELD_NAME not in model_fields:\n                continue\n\n            field = model_fields[CREDENTIALS_FIELD_NAME]\n\n            # The BlockSchema class enforces that a `credentials` field is always a\n            # `CredentialsMetaInput`, so we can safely assume this here.\n            credentials_meta_type = cast(CredentialsMetaInput, field.annotation)\n            credentials_meta = credentials_meta_type.model_validate(\n                node.input_default[CREDENTIALS_FIELD_NAME]\n            )\n            # Fetch the corresponding Credentials and perform sanity checks\n            credentials = self.credentials_store.get_creds_by_id(\n                user_id, credentials_meta.id\n            )\n            if not credentials:\n                raise ValueError(\n                    f\"Unknown credentials #{credentials_meta.id} \"\n                    f\"for node #{node.id}\"\n                )\n            if (\n                credentials.provider != credentials_meta.provider\n                or credentials.type != credentials_meta.type\n            ):\n                logger.warning(\n                    f\"Invalid credentials #{credentials.id} for node #{node.id}: \"\n                    \"type/provider mismatch: \"\n                    f\"{credentials_meta.type}<>{credentials.type};\"\n                    f\"{credentials_meta.provider}<>{credentials.provider}\"\n                )\n                raise ValueError(\n                    f\"Invalid credentials #{credentials.id} for node #{node.id}: \"\n                    \"type/provider mismatch\"\n                )\n\n\n# ------- UTILITIES -------",
          "children": [
            {
              "value": "super().__init__()\n        self.use_redis = True\n        self.use_supabase = True\n        self.pool_size = settings.config.num_graph_workers\n        self.queue = ExecutionQueue[GraphExecutionEntry]()\n        self.active_graph_runs: dict[str, tuple[Future, threading.Event]] = {}\n\n    @classmethod\n    def g",
              "children": [
                {
                  "value": "r().__in",
                  "children": []
                },
                {
                  "value": "it__()",
                  "children": [
                    {
                      "value": "t__(",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "elf.use_redis = True\n        self.use_supabase = True\n        self.pool_size = settings.config.num_graph_workers\n        self.queue = ExecutionQueue[GraphExecutionEntry]()\n        self.active_graph_runs: dict[str, tuple[Future, threading.Event]] = {}\n\n    @classmethod\n    def g",
                  "children": [
                    {
                      "value": "elf.use_redis = Tr",
                      "children": [
                        {
                          "value": "elf.use_redis = Tr",
                          "children": [
                            {
                              "value": "elf.use_redis =",
                              "children": [
                                {
                                  "value": "elf.use",
                                  "children": [
                                    {
                                      "value": "elf.u",
                                      "children": []
                                    },
                                    {
                                      "value": "se",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "redis =",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "Tr",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.use_supabase =",
                      "children": [
                        {
                          "value": "self.use_supabase =",
                          "children": [
                            {
                              "value": "self.use_sup",
                              "children": [
                                {
                                  "value": "se",
                                  "children": []
                                },
                                {
                                  "value": "f.use_sup",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "se =",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.pool_size = se",
                      "children": [
                        {
                          "value": "self.pool_size = se",
                          "children": [
                            {
                              "value": "self.pool_si",
                              "children": [
                                {
                                  "value": "",
                                  "children": []
                                },
                                {
                                  "value": "self.pool_si",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "= se",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "nfig.num_graph_workers\n        self.queue = Execut",
                      "children": [
                        {
                          "value": "nfig.num_graph_workers\n        self.queue = Execut",
                          "children": [
                            {
                              "value": "nfig.num_graph",
                              "children": [
                                {
                                  "value": "nfig",
                                  "children": []
                                },
                                {
                                  "value": "num_graph",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "rkers\n        self.queue = Execut",
                              "children": [
                                {
                                  "value": "rkers\n        s",
                                  "children": [
                                    {
                                      "value": "rkers",
                                      "children": []
                                    },
                                    {
                                      "value": "s",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "lf.queue = Execut",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "GraphExecutionEntry]()\n        self.active_graph_r",
                      "children": [
                        {
                          "value": "GraphExecutionEntry]()\n        self.active_graph_r",
                          "children": [
                            {
                              "value": "GraphExecu",
                              "children": [
                                {
                                  "value": "Grap",
                                  "children": []
                                },
                                {
                                  "value": "Execu",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "nEntry]()\n        self.active_graph_r",
                              "children": [
                                {
                                  "value": "nEntry]()\n        self.active_graph",
                                  "children": [
                                    {
                                      "value": "nEntry]()",
                                      "children": []
                                    },
                                    {
                                      "value": "self.active_grap",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "_r",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "[str, tuple[Future, threading.Event]] = {}\n\n    @classmethod\n    def g",
                      "children": [
                        {
                          "value": "[str, tuple[Future, threading.Event]] = {}\n\n    @classmethod\n    def g",
                          "children": [
                            {
                              "value": "[str, tuple[Future, th",
                              "children": [
                                {
                                  "value": "[str",
                                  "children": []
                                },
                                {
                                  "value": "tuple[Future, th",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "ading.Event]] = {}\n\n    @classmethod",
                              "children": [
                                {
                                  "value": "ading.Event]] = {}\n\n    @classmethod",
                                  "children": [
                                    {
                                      "value": "adin",
                                      "children": []
                                    },
                                    {
                                      "value": "g.Event]] = {}\n\n    @classmethod",
                                      "children": [
                                        {
                                          "value": ".Ev",
                                          "children": [
                                            {
                                              "value": ".Ev",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "t]] = {}\n\n    @classmethod",
                                          "children": [
                                            {
                                              "value": "t]] = {}\n\n    @classmethod",
                                              "children": [
                                                {
                                                  "value": "t]] =",
                                                  "children": []
                                                },
                                                {
                                                  "value": "{}\n\n    @classmethod",
                                                  "children": [
                                                    {
                                                      "value": "{}",
                                                      "children": [
                                                        {
                                                          "value": "{}",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "@classmethod",
                                                      "children": [
                                                        {
                                                          "value": "@classmethod",
                                                          "children": [
                                                            {
                                                              "value": "@classmet",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "od",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "g",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "t(cls) -> int:\n        return settings.config.execution_manager_port\n\n    def run_service(self):",
              "children": [
                {
                  "value": "t(cls) -> in",
                  "children": [
                    {
                      "value": "(cls) -> in",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "return settings.config.execution_manager_port\n\n    def run_service(self):",
                  "children": [
                    {
                      "value": "return",
                      "children": []
                    },
                    {
                      "value": "sett",
                      "children": [
                        {
                          "value": "set",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": ".co",
                      "children": [
                        {
                          "value": ".co",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "tion_manager_port\n\n    def run_service(self):",
                      "children": [
                        {
                          "value": "tion_manager_port\n\n    def run_service(self):",
                          "children": [
                            {
                              "value": "nager_port\n\n    def run_service(self):",
                              "children": [
                                {
                                  "value": "nager_port",
                                  "children": [
                                    {
                                      "value": "nager_po",
                                      "children": []
                                    },
                                    {
                                      "value": "t",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "def run_service(self):",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "from backend.integrations.credentials_store import IntegrationCredentialsStore\n\n        self.credentials_store = IntegrationCredentialsStore()\n        self.executor = ProcessPoolExecutor(\n            max_workers=self.pool_size,\n            initializer=Executor.on_graph_executor_start,\n        )\n        sync_manager = multiprocessing.Manager()\n        logger.info(\n            f\"[{self.service_name}] Started with max-{self.pool_size} graph workers\"\n        )\n        while True:\n            graph_exec_data = self.queue.get()\n            graph_exec_id = graph_exec_data.graph_exec_id\n            logger.debug(\n                f\"[ExecutionManager] Dispatching graph execution {graph_exec_id}\"\n            )\n            cancel_event = sync_manager.Event()\n            future = self.executor.submit(\n                Executor.on_graph_execution, graph_exec_data, cancel_event\n            )\n            self.active_graph_runs[graph_exec_id] = (future, cancel_event)\n            future.add_done_callback(\n                lambda _: self.active_graph_runs.pop(graph_exec_id, None)\n            )\n\n    def cleanup(self):",
              "children": [
                {
                  "value": "rom backend",
                  "children": []
                },
                {
                  "value": ".integ",
                  "children": [
                    {
                      "value": "inte",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "edentials_store import IntegrationCredentialsStore\n\n        self.credentials_store = IntegrationCredentialsStore()\n        self.executor = ProcessPoolExecutor(\n            max_workers=self.pool_size,\n            initializer=Executor.on_graph_executor_start,\n        )\n        sync_manager = multiprocessing.Manager()\n        logger.info(\n            f\"[{self.service_name}] Started with max-{self.pool_size} graph workers\"\n        )\n        while True:\n            graph_exec_data = self.queue.get()\n            graph_exec_id = graph_exec_data.graph_exec_id\n            logger.debug(\n                f\"[ExecutionManager] Dispatching graph execution {graph_exec_id}\"\n            )\n            cancel_event = sync_manager.Event()\n            future = self.executor.submit(\n                Executor.on_graph_execution, graph_exec_data, cancel_event\n            )\n            self.active_graph_runs[graph_exec_id] = (future, cancel_event)\n            future.add_done_callback(\n                lambda _: self.active_graph_runs.pop(graph_exec_id, None)\n            )\n\n    def cleanup(self):",
                  "children": [
                    {
                      "value": "edentials_store import IntegrationCredentialsStore\n\n        self.credentials_s",
                      "children": [
                        {
                          "value": "ials_store import IntegrationCredentia",
                          "children": [
                            {
                              "value": "ials_st",
                              "children": []
                            },
                            {
                              "value": "re import In",
                              "children": []
                            },
                            {
                              "value": "egrationCredentia",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "self.credentials_s",
                          "children": [
                            {
                              "value": "self.credentials_s",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "egrationCredentialsStore()\n        self.executor = Pro",
                      "children": [
                        {
                          "value": "egrationCredentialsStore()\n        self.executor = Pro",
                          "children": [
                            {
                              "value": "egrationCredentialsSto",
                              "children": [
                                {
                                  "value": "egra",
                                  "children": []
                                },
                                {
                                  "value": "ionCredentialsSto",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": ")\n        self.executor = Pro",
                              "children": [
                                {
                                  "value": ")\n        self.executor = P",
                                  "children": []
                                },
                                {
                                  "value": "ro",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "xecutor(\n            max_workers=self.pool_size,\n            initializer=Executor.on_graph_executor_start,\n        )\n        sync_manager = mult",
                      "children": [
                        {
                          "value": "xecutor(\n            max_workers=self.pool_size,\n            initializer=Executor.on_graph_executor_start,\n        )\n        sync_manager = mult",
                          "children": [
                            {
                              "value": "xecutor(",
                              "children": [
                                {
                                  "value": "xecu",
                                  "children": []
                                },
                                {
                                  "value": "or(",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "max_workers=self.pool_size,\n            initializer=Executor.on_graph_executor_start,\n        )\n        sync_manager = mult",
                              "children": [
                                {
                                  "value": "max_workers=se",
                                  "children": []
                                },
                                {
                                  "value": "lf.pool_size,\n            initializer=Executor.on_graph_executor_start,\n        )\n        sync_manager = mult",
                                  "children": [
                                    {
                                      "value": "initializer=Ex",
                                      "children": [
                                        {
                                          "value": "",
                                          "children": []
                                        },
                                        {
                                          "value": "initializer=Ex",
                                          "children": [
                                            {
                                              "value": "init",
                                              "children": []
                                            },
                                            {
                                              "value": "alizer=Ex",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "h_executor_start,\n        )\n        sync_man",
                                      "children": [
                                        {
                                          "value": "h_executor_",
                                          "children": []
                                        },
                                        {
                                          "value": "tart,\n        )\n        sync_man",
                                          "children": [
                                            {
                                              "value": "tart,",
                                              "children": []
                                            },
                                            {
                                              "value": ")\n        sync_man",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "ng.Manager()\n        logger.info(",
                      "children": [
                        {
                          "value": "ng.Manager()\n        logger.info(",
                          "children": [
                            {
                              "value": "ng.Manager()",
                              "children": []
                            },
                            {
                              "value": "logger.info(",
                              "children": [
                                {
                                  "value": "logger.info(",
                                  "children": [
                                    {
                                      "value": "logger.in",
                                      "children": []
                                    },
                                    {
                                      "value": "o(",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "{self.service_name}] Started with max-{self.pool_size} graph workers\"\n        )\n        while True:",
                      "children": [
                        {
                          "value": "{self.service_name}] Started with max-{self.pool_size} graph workers\"\n        )\n        while True:",
                          "children": [
                            {
                              "value": "{self.servi",
                              "children": [
                                {
                                  "value": "{self.",
                                  "children": []
                                },
                                {
                                  "value": "ervi",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "ce_name}] Started with max-{self.pool_size} graph workers\"\n        )\n        while True:",
                              "children": [
                                {
                                  "value": "ted with max-{self.pool_size} graph workers\"\n        )\n        while Tru",
                                  "children": [
                                    {
                                      "value": "te",
                                      "children": []
                                    },
                                    {
                                      "value": "d",
                                      "children": []
                                    },
                                    {
                                      "value": "with max-{self.poo",
                                      "children": [
                                        {
                                          "value": "with max-{self.po",
                                          "children": [
                                            {
                                              "value": "with",
                                              "children": []
                                            },
                                            {
                                              "value": "max-{self.po",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "l_size} graph worke",
                                      "children": []
                                    },
                                    {
                                      "value": "rs\"\n        )",
                                      "children": [
                                        {
                                          "value": "s\"\n        )",
                                          "children": [
                                            {
                                              "value": "s\"",
                                              "children": []
                                            },
                                            {
                                              "value": ")",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "while Tr",
                                      "children": []
                                    },
                                    {
                                      "value": "u",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "h_exec_data = self.queue.get()\n            graph_exec_id = graph_exec_data.graph_exec_id\n            logger.debug(\n                f\"[ExecutionManager] Dispatching graph execution {graph_exec_id}\"\n            )\n            cancel_event = sync_manager.Event()\n            future = self.executor.submit(\n                Executor.on_graph_execution, graph_exec_data, cancel_event\n            )\n            self.active_graph_runs[graph_exec_id] = (future, cancel_event)\n            future.add_done_callback(\n                lambda _: self.active_graph_runs.pop(graph_exec_id, None)\n            )\n\n    def cleanup(self):",
                      "children": [
                        {
                          "value": "_dat",
                          "children": []
                        },
                        {
                          "value": ".get()\n            graph_exec_id = graph_exec_data.graph_exec_id\n            logger.debug(\n                f\"[ExecutionManager] Dispatching graph execution {graph_exec_id}\"\n            )\n            cancel_event = sync_manager.Event()\n            future = self.executor.submit(\n                Executor.on_graph_execution, graph_exec_data, cancel_event\n            )\n            self.active_graph_runs[graph_exec_id] = (future, cancel_event)\n            future.add_done_callback(\n                lambda _: self.active_graph_runs.pop(graph_exec_id, None)\n            )\n\n    def cleanup(self):",
                          "children": [
                            {
                              "value": ".get()\n            graph_exec_id =",
                              "children": [
                                {
                                  "value": ".get()\n            graph_exec_id =",
                                  "children": [
                                    {
                                      "value": ".get()",
                                      "children": []
                                    },
                                    {
                                      "value": "graph_exec_id =",
                                      "children": [
                                        {
                                          "value": "graph_exec_id",
                                          "children": [
                                            {
                                              "value": "graph_exe",
                                              "children": [
                                                {
                                                  "value": "gra",
                                                  "children": []
                                                },
                                                {
                                                  "value": "h_exe",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "_id",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "=",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "ata.graph_exec_id\n            logger.debug(",
                              "children": [
                                {
                                  "value": "ata.graph_exec_id\n            logger.debug(",
                                  "children": [
                                    {
                                      "value": "ata.graph_exe",
                                      "children": []
                                    },
                                    {
                                      "value": "d\n            logger.debug(",
                                      "children": [
                                        {
                                          "value": "d\n            l",
                                          "children": []
                                        },
                                        {
                                          "value": "gger.debug(",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "f\"[ExecutionManager] Dispatching graph execution {graph_exec_id}\"\n            )\n            cancel_event =",
                              "children": [
                                {
                                  "value": "f\"[ExecutionManager] Dispatching graph execution {graph_exec_id}\"\n            )\n            cancel_event =",
                                  "children": [
                                    {
                                      "value": "f\"[Executi",
                                      "children": [
                                        {
                                          "value": "f\"[E",
                                          "children": []
                                        },
                                        {
                                          "value": "ecuti",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "onManager] Dispatching graph execution {graph_exec_id}\"\n            )\n            cancel_event =",
                                      "children": [
                                        {
                                          "value": "hing graph execution {graph_exec_id}\"\n            )\n            c",
                                          "children": [
                                            {
                                              "value": "hi",
                                              "children": []
                                            },
                                            {
                                              "value": "ng graph execution {graph_exec_id}\"",
                                              "children": []
                                            },
                                            {
                                              "value": ")",
                                              "children": [
                                                {
                                                  "value": ")",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "c",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "Event()\n            future = self.e",
                              "children": [
                                {
                                  "value": "Event()\n            future = self.e",
                                  "children": [
                                    {
                                      "value": "Event()",
                                      "children": []
                                    },
                                    {
                                      "value": "future = self.e",
                                      "children": [
                                        {
                                          "value": "future = self",
                                          "children": [
                                            {
                                              "value": "future",
                                              "children": []
                                            },
                                            {
                                              "value": "self",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": ".e",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "t(\n                Executor.on_graph_execution, graph_exec_data, cancel_event\n            )\n            self.active_gra",
                              "children": [
                                {
                                  "value": "t(\n                Executor.on_graph_execution, graph_exec_data, cancel_event\n            )\n            self.active_gra",
                                  "children": [
                                    {
                                      "value": "t(",
                                      "children": []
                                    },
                                    {
                                      "value": "Executor.on_graph_execution, graph_exec_data, cancel_event\n            )\n            self.active_gra",
                                      "children": [
                                        {
                                          "value": "Executor.o",
                                          "children": [
                                            {
                                              "value": "Exe",
                                              "children": [
                                                {
                                                  "value": "",
                                                  "children": []
                                                },
                                                {
                                                  "value": "Exe",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "utor.o",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "n_graph_execution, graph_exec_data, cancel_event\n            )\n            self.active_gra",
                                          "children": [
                                            {
                                              "value": "graph_exec_data, cancel_ev",
                                              "children": [
                                                {
                                                  "value": "graph_e",
                                                  "children": []
                                                },
                                                {
                                                  "value": "ec_data, cancel_ev",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "t\n            )",
                                              "children": []
                                            },
                                            {
                                              "value": "s",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "_exec_id] = (future, cancel_event)\n            future.add_done",
                              "children": [
                                {
                                  "value": "_exec_id] = (future, cancel_event)\n            future.add_done",
                                  "children": [
                                    {
                                      "value": "_exec_id] = (future, cancel_event)",
                                      "children": [
                                        {
                                          "value": "_exec_id] = (future, c",
                                          "children": [
                                            {
                                              "value": "_exe",
                                              "children": []
                                            },
                                            {
                                              "value": "_id] = (future, c",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "ncel_event)",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "future.add_done",
                                      "children": [
                                        {
                                          "value": "",
                                          "children": []
                                        },
                                        {
                                          "value": "ture.add_don",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "lambda _: self.active_graph_runs.pop(graph_exec_id, None)\n            )\n\n    def cleanup(self):",
                              "children": [
                                {
                                  "value": "lambda _: self.active_graph_runs.pop(graph_exec_id, None)\n            )\n\n    def cleanup(self):",
                                  "children": [
                                    {
                                      "value": "lambda _:",
                                      "children": [
                                        {
                                          "value": "",
                                          "children": []
                                        },
                                        {
                                          "value": "lambda _:",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "self.active_graph_runs.pop(graph_exec_id, None)\n            )\n\n    def cleanup(self):",
                                      "children": [
                                        {
                                          "value": "runs.pop(graph_exec_id, None)\n            )\n\n    def clea",
                                          "children": [
                                            {
                                              "value": "p",
                                              "children": [
                                                {
                                                  "value": "p",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "raph_exec_id, None)\n            )\n\n    def clea",
                                              "children": [
                                                {
                                                  "value": "raph_exec_id, None)",
                                                  "children": [
                                                    {
                                                      "value": "raph_exec_id, None)",
                                                      "children": [
                                                        {
                                                          "value": "raph",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "exec_id, None)",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": ")\n\n    def clea",
                                                  "children": [
                                                    {
                                                      "value": ")\n\n    d",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "cle",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "ogger.info(f\"[{__class__.__name__}] \u23f3 Shutting down graph executor pool...\")\n        self.executor.shutdown(cancel_futures=True)\n\n        super().cleanup()\n\n    @property\n    def db_cli",
              "children": [
                {
                  "value": "r.info(",
                  "children": []
                },
                {
                  "value": "f\"[{__",
                  "children": [
                    {
                      "value": "\"[{_",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "name__}] \u23f3 Shutting down graph executor pool...\")\n        self.executor.shutdown(cancel_futures=True)\n\n        super().cleanup()\n\n    @property\n    def db_cli",
                  "children": [
                    {
                      "value": "name__}] \u23f3 Shutting down graph executor pool...\")\n        self.executor.shutdow",
                      "children": [
                        {
                          "value": "name__}] \u23f3 Shutting down graph executor pool...\")\n        self.executor.shutdow",
                          "children": [
                            {
                              "value": "name__}] \u23f3",
                              "children": [
                                {
                                  "value": "name__",
                                  "children": []
                                },
                                {
                                  "value": "] \u23f3",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "Shutting down graph executor pool...\")\n        self.executor.shutdow",
                              "children": [
                                {
                                  "value": "hutting down graph executor pool...\")\n        self.executor.shutdo",
                                  "children": [
                                    {
                                      "value": "hu",
                                      "children": []
                                    },
                                    {
                                      "value": "t",
                                      "children": []
                                    },
                                    {
                                      "value": "ting down graph exec",
                                      "children": [
                                        {
                                          "value": "ing down graph exe",
                                          "children": [
                                            {
                                              "value": "ing down",
                                              "children": []
                                            },
                                            {
                                              "value": "raph exe",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "utor pool...\")\n        self.executor.shutd",
                                      "children": []
                                    },
                                    {
                                      "value": "o",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "futures=True)\n\n        super().cleanup()",
                      "children": [
                        {
                          "value": "futures=True)\n\n        super().cleanup()",
                          "children": [
                            {
                              "value": "futures=True)",
                              "children": [
                                {
                                  "value": "futures=True)",
                                  "children": [
                                    {
                                      "value": "futu",
                                      "children": []
                                    },
                                    {
                                      "value": "es=True)",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "super().cleanup()",
                              "children": [
                                {
                                  "value": "super().cleanup()",
                                  "children": [
                                    {
                                      "value": "super().cleanu",
                                      "children": []
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "ty\n    def db_cli",
                      "children": [
                        {
                          "value": "ty\n    def db_cli",
                          "children": [
                            {
                              "value": "ty\n    def db_c",
                              "children": [
                                {
                                  "value": "ty",
                                  "children": [
                                    {
                                      "value": "ty",
                                      "children": []
                                    },
                                    {
                                      "value": "",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "ef db_c",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "li",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "lf) -> \"DatabaseManager\":\n        return get_db_client()\n\n    @expose\n    def add_exec",
              "children": [
                {
                  "value": "lf) -> \"D",
                  "children": [
                    {
                      "value": "f) -> \"D",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "seManager\":\n        return get_db_client()\n\n    @expose\n    def add_exec",
                  "children": [
                    {
                      "value": "nager\":",
                      "children": []
                    },
                    {
                      "value": "",
                      "children": [
                        {
                          "value": "",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "urn get_db_client",
                      "children": [
                        {
                          "value": "urn get_db_client",
                          "children": [
                            {
                              "value": "u",
                              "children": []
                            },
                            {
                              "value": "rn get_db_clien",
                              "children": []
                            },
                            {
                              "value": "t",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "xpose\n    def add_exec",
                      "children": [
                        {
                          "value": "xpose\n    def add_exec",
                          "children": [
                            {
                              "value": "def add_exec",
                              "children": [
                                {
                                  "value": "def add_ex",
                                  "children": []
                                },
                                {
                                  "value": "ec",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "self,\n        graph_id: str,\n        data: BlockInput,\n        user_id: str,\n        graph_version: int | None = None,\n    ) -> GraphExecutionEntry:\n        graph: GraphModel | None = self.db_client.get_graph(\n            graph_id=graph_id, user_id=user_id, version=graph_version\n        )\n        if not graph:\n            raise ValueError(f\"Graph #{graph_id} not found.\")\n\n        graph.validate_graph(for_run=True)\n        self._validate_node_input_credentials(graph, user_id)\n\n        nodes_input = []\n        for node in graph.starting_nodes:\n            input_data = {}\n            block = get_block(node.block_id)\n\n            # Invalid block & Note block should never be executed.\n            if not block or block.block_type == BlockType.NOTE:\n                continue\n\n            # Extract request input data, and assign it to the input pin.\n            if block.block_type == BlockType.INPUT:\n                name = node.input_default.get(\"name\")\n                if name and name in data:\n                    input_data = {\"value\": data[name]}\n\n            # Extract webhook payload, and assign it to the input pin\n            webhook_payload_key = f\"webhook_{node.webhook_id}_payload\"\n            if (\n                block.block_type in (BlockType.WEBHOOK, BlockType.WEBHOOK_MANUAL)\n                and node.webhook_id\n            ):\n                if webhook_payload_key not in data:\n                    raise ValueError(\n                        f\"Node {block.name} #{node.id} webhook payload is missing\"\n                    )\n                input_data = {\"payload\": data[webhook_payload_key]}\n\n            input_data, error = validate_exec(node, input_data)\n            if input_data is None:\n                raise ValueError(error)\n            else:\n                nodes_input.append((node.id, input_data))\n\n        graph_exec_id, node_execs = self.db_client.create_graph_execution(\n            graph_id=graph_id,\n            graph_version=graph.version,\n            nodes_input=nodes_input,\n            user_id=user_id,\n        )\n\n        starting_node_execs = []\n        for node_exec in node_execs:\n            starting_node_execs.append(\n                NodeExecutionEntry(\n                    user_id=user_id,\n                    graph_exec_id=node_exec.graph_exec_id,\n                    graph_id=node_exec.graph_id,\n                    node_exec_id=node_exec.node_exec_id,\n                    node_id=node_exec.node_id,\n                    data=node_exec.input_data,\n                )\n            )\n            exec_update = self.db_client.update_execution_status(\n                node_exec.node_exec_id, ExecutionStatus.QUEUED, node_exec.input_data\n            )\n            self.db_client.send_execution_update(exec_update)\n\n        graph_exec = GraphExecutionEntry(\n            user_id=user_id,\n            graph_id=graph_id,\n            graph_exec_id=graph_exec_id,\n            start_node_execs=starting_node_execs,\n        )\n        self.queue.add(graph_exec)\n\n        return graph_exec\n\n    @expose\n    def cancel_e",
              "children": [
                {
                  "value": "",
                  "children": [
                    {
                      "value": "",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "f,\n        graph_id: str,\n        data: BlockInput,\n        user_id: str,\n        graph_version: int | None = None,\n    ) -> GraphExecutionEntry:\n        graph: GraphModel | None = self.db_client.get_graph(\n            graph_id=graph_id, user_id=user_id, version=graph_version\n        )\n        if not graph:\n            raise ValueError(f\"Graph #{graph_id} not found.\")\n\n        graph.validate_graph(for_run=True)\n        self._validate_node_input_credentials(graph, user_id)\n\n        nodes_input = []\n        for node in graph.starting_nodes:\n            input_data = {}\n            block = get_block(node.block_id)\n\n            # Invalid block & Note block should never be executed.\n            if not block or block.block_type == BlockType.NOTE:\n                continue\n\n            # Extract request input data, and assign it to the input pin.\n            if block.block_type == BlockType.INPUT:\n                name = node.input_default.get(\"name\")\n                if name and name in data:\n                    input_data = {\"value\": data[name]}\n\n            # Extract webhook payload, and assign it to the input pin\n            webhook_payload_key = f\"webhook_{node.webhook_id}_payload\"\n            if (\n                block.block_type in (BlockType.WEBHOOK, BlockType.WEBHOOK_MANUAL)\n                and node.webhook_id\n            ):\n                if webhook_payload_key not in data:\n                    raise ValueError(\n                        f\"Node {block.name} #{node.id} webhook payload is missing\"\n                    )\n                input_data = {\"payload\": data[webhook_payload_key]}\n\n            input_data, error = validate_exec(node, input_data)\n            if input_data is None:\n                raise ValueError(error)\n            else:\n                nodes_input.append((node.id, input_data))\n\n        graph_exec_id, node_execs = self.db_client.create_graph_execution(\n            graph_id=graph_id,\n            graph_version=graph.version,\n            nodes_input=nodes_input,\n            user_id=user_id,\n        )\n\n        starting_node_execs = []\n        for node_exec in node_execs:\n            starting_node_execs.append(\n                NodeExecutionEntry(\n                    user_id=user_id,\n                    graph_exec_id=node_exec.graph_exec_id,\n                    graph_id=node_exec.graph_id,\n                    node_exec_id=node_exec.node_exec_id,\n                    node_id=node_exec.node_id,\n                    data=node_exec.input_data,\n                )\n            )\n            exec_update = self.db_client.update_execution_status(\n                node_exec.node_exec_id, ExecutionStatus.QUEUED, node_exec.input_data\n            )\n            self.db_client.send_execution_update(exec_update)\n\n        graph_exec = GraphExecutionEntry(\n            user_id=user_id,\n            graph_id=graph_id,\n            graph_exec_id=graph_exec_id,\n            start_node_execs=starting_node_execs,\n        )\n        self.queue.add(graph_exec)\n\n        return graph_exec\n\n    @expose\n    def cancel_e",
                  "children": [
                    {
                      "value": "graph_",
                      "children": []
                    },
                    {
                      "value": "id: str,\n        data: BlockInput,\n        user_id: str,\n        graph_version: int | None = None,\n    ) -> GraphExecutionEntry:",
                      "children": [
                        {
                          "value": "",
                          "children": []
                        },
                        {
                          "value": "lockInput,",
                          "children": [
                            {
                              "value": "lockInpu",
                              "children": []
                            },
                            {
                              "value": "",
                              "children": [
                                {
                                  "value": "",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "_id: str,",
                          "children": [
                            {
                              "value": "_id:",
                              "children": []
                            },
                            {
                              "value": "tr,",
                              "children": [
                                {
                                  "value": "tr,",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "rsion: int |",
                          "children": [
                            {
                              "value": "rsion:",
                              "children": []
                            },
                            {
                              "value": "t |",
                              "children": [
                                {
                                  "value": "t |",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "ne,\n    ) -> GraphExecutionEntry",
                          "children": [
                            {
                              "value": "ne,\n    ) ->",
                              "children": []
                            },
                            {
                              "value": "aphExecuti",
                              "children": [
                                {
                                  "value": "aphExecuti",
                                  "children": [
                                    {
                                      "value": "aph",
                                      "children": []
                                    },
                                    {
                                      "value": "cuti",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "ntry",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "raph: GraphModel |",
                      "children": [
                        {
                          "value": "raph: GraphModel |",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "f.db_client.get_graph(\n            graph_id=graph_id, user_id=user_id, version=graph_version\n        )\n        if not graph:\n            raise ValueError(f\"Graph #{graph_id} not found.\")\n\n        graph.validate_graph(for_run=True)\n        self._validate_node_input_credentials(graph, user_id)\n\n        nodes_input = []\n        for node in graph.starting_nodes:\n            input_data = {}\n            block = get_block(node.block_id)\n\n            # Invalid block & Note block should never be executed.\n            if not block or block.block_type == BlockType.NOTE:\n                continue\n\n            # Extract request input data, and assign it to the input pin.\n            if block.block_type == BlockType.INPUT:\n                name = node.input_default.get(\"name\")\n                if name and name in data:\n                    input_data = {\"value\": data[name]}\n\n            # Extract webhook payload, and assign it to the input pin\n            webhook_payload_key = f\"webhook_{node.webhook_id}_payload\"\n            if (\n                block.block_type in (BlockType.WEBHOOK, BlockType.WEBHOOK_MANUAL)\n                and node.webhook_id\n            ):\n                if webhook_payload_key not in data:\n                    raise ValueError(\n                        f\"Node {block.name} #{node.id} webhook payload is missing\"\n                    )\n                input_data = {\"payload\": data[webhook_payload_key]}\n\n            input_data, error = validate_exec(node, input_data)\n            if input_data is None:\n                raise ValueError(error)\n            else:\n                nodes_input.append((node.id, input_data))\n\n        graph_exec_id, node_execs = self.db_client.create_graph_execution(\n            graph_id=graph_id,\n            graph_version=graph.version,\n            nodes_input=nodes_input,\n            user_id=user_id,\n        )\n\n        starting_node_execs = []\n        for node_exec in node_execs:\n            starting_node_execs.append(\n                NodeExecutionEntry(\n                    user_id=user_id,\n                    graph_exec_id=node_exec.graph_exec_id,\n                    graph_id=node_exec.graph_id,\n                    node_exec_id=node_exec.node_exec_id,\n                    node_id=node_exec.node_id,\n                    data=node_exec.input_data,\n                )\n            )\n            exec_update = self.db_client.update_execution_status(\n                node_exec.node_exec_id, ExecutionStatus.QUEUED, node_exec.input_data\n            )\n            self.db_client.send_execution_update(exec_update)\n\n        graph_exec = GraphExecutionEntry(\n            user_id=user_id,\n            graph_id=graph_id,\n            graph_exec_id=graph_exec_id,\n            start_node_execs=starting_node_execs,\n        )\n        self.queue.add(graph_exec)\n\n        return graph_exec\n\n    @expose\n    def cancel_e",
                      "children": [
                        {
                          "value": "f.db_client.get_graph(\n            graph_id=graph_id, user_id=user_id, version=graph_version\n        )\n        if not graph:",
                          "children": [
                            {
                              "value": "f.db_client.get_graph(\n            graph_id=graph_id, user_id=user_id, version=graph_version\n        )\n        if not graph:",
                              "children": [
                                {
                                  "value": "f.db_",
                                  "children": []
                                },
                                {
                                  "value": "ient.get_graph(",
                                  "children": [
                                    {
                                      "value": "ient.get_graph(",
                                      "children": [
                                        {
                                          "value": "ient.get_g",
                                          "children": []
                                        },
                                        {
                                          "value": "h(",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "graph_id=graph_id, user_id=user_id, version=graph_version\n        )\n        if not graph:",
                                  "children": [
                                    {
                                      "value": "graph_id=graph_i",
                                      "children": [
                                        {
                                          "value": "graph_",
                                          "children": [
                                            {
                                              "value": "",
                                              "children": []
                                            },
                                            {
                                              "value": "graph_",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "d=graph_i",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "d, user_id=user_id, version=graph_version\n        )\n        if not graph:",
                                      "children": [
                                        {
                                          "value": "r_id, version=gra",
                                          "children": [
                                            {
                                              "value": "r_id, ve",
                                              "children": []
                                            },
                                            {
                                              "value": "sion=gra",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "_version",
                                          "children": [
                                            {
                                              "value": "_versio",
                                              "children": []
                                            },
                                            {
                                              "value": "",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": ")\n        if not grap",
                                          "children": [
                                            {
                                              "value": ")",
                                              "children": []
                                            },
                                            {
                                              "value": "if not grap",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "e ValueError(f\"Graph #{graph_id} not found.\")\n\n        graph.validate_graph",
                          "children": [
                            {
                              "value": "alueError",
                              "children": [
                                {
                                  "value": "Error",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "ph_id} not found.\")\n\n        graph.validate_graph",
                              "children": [
                                {
                                  "value": "ph_id} not found.\")\n\n        graph.validate_graph",
                                  "children": [
                                    {
                                      "value": "not found.\")\n\n        graph.validate_graph",
                                      "children": [
                                        {
                                          "value": "not found",
                                          "children": []
                                        },
                                        {
                                          "value": ".\")\n\n        graph.validate_graph",
                                          "children": [
                                            {
                                              "value": "\")\n\n        graph.validate_grap",
                                              "children": [
                                                {
                                                  "value": "\")",
                                                  "children": []
                                                },
                                                {
                                                  "value": "",
                                                  "children": []
                                                },
                                                {
                                                  "value": "graph.v",
                                                  "children": [
                                                    {
                                                      "value": "graph.",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "alidate_gra",
                                                  "children": []
                                                },
                                                {
                                                  "value": "p",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "rue)\n        self._validate_node_i",
                          "children": [
                            {
                              "value": "rue)\n        self._validate_node_i",
                              "children": [
                                {
                                  "value": "rue)\n        self._v",
                                  "children": [
                                    {
                                      "value": "rue)",
                                      "children": []
                                    },
                                    {
                                      "value": "self._v",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "alidate_node_i",
                                  "children": [
                                    {
                                      "value": "lidate_node_",
                                      "children": [
                                        {
                                          "value": "lidate_",
                                          "children": []
                                        },
                                        {
                                          "value": "ode_",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "entials(graph, user_id)\n\n        nodes_input = []",
                          "children": [
                            {
                              "value": "entials(graph, user_id)\n\n        nodes_input = []",
                              "children": [
                                {
                                  "value": "entials(graph, user_id)\n\n        node",
                                  "children": [
                                    {
                                      "value": "enti",
                                      "children": []
                                    },
                                    {
                                      "value": "ls(graph, user_id)\n\n        node",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "s_input = []",
                                  "children": [
                                    {
                                      "value": "_inpu",
                                      "children": []
                                    },
                                    {
                                      "value": "= []",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "ode in graph.sta",
                          "children": [
                            {
                              "value": "ode in graph.sta",
                              "children": [
                                {
                                  "value": "ode in grap",
                                  "children": []
                                },
                                {
                                  "value": "ta",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "es:\n            input_data = {}\n            block = get_block(node.block_id)\n\n            # Invalid block & Note block should never be executed.\n            if not block or block.block_type == BlockType.NOTE:\n                continue\n\n            # Extract request input data, and assign it to the input pin.\n            if block.block_type == BlockType.INPUT:\n                name = node.input_default.get(\"name\")\n                if name and name in data:\n                    input_data = {\"value\": data[name]}\n\n            # Extract webhook payload, and assign it to the input pin\n            webhook_payload_key = f\"webhook_{node.webhook_id}_payload\"\n            if (\n                block.block_type in (BlockType.WEBHOOK, BlockType.WEBHOOK_MANUAL)\n                and node.webhook_id\n            ):\n                if webhook_payload_key not in data:\n                    raise ValueError(\n                        f\"Node {block.name} #{node.id} webhook payload is missing\"\n                    )\n                input_data = {\"payload\": data[webhook_payload_key]}\n\n            input_data, error = validate_exec(node, input_data)\n            if input_data is None:\n                raise ValueError(error)\n            else:\n                nodes_input.append((node.id, input_data))\n\n        graph_exec_id, node_",
                          "children": [
                            {
                              "value": "",
                              "children": []
                            },
                            {
                              "value": "input_data = {}",
                              "children": [
                                {
                                  "value": "i",
                                  "children": []
                                },
                                {
                                  "value": "put_data = {}",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "ock = get_block(node.block_id)\n\n            # Invalid block & Note block should never be executed.\n            if not block or block.block_type == BlockType.NOTE:\n                continue\n\n            # Extract request input data, and assign it to the input pin.\n            if block.block_type == BlockType.INPUT:\n                name = node.input_default.get(\"name\")\n                if name and name in data:\n                    input_data = {\"value\": data[name]}\n\n            # Extract webhook payload, and assign it to the input pin\n            webhook_payload_key = f\"webhook_{node.webhook_id}_payload\"\n            if (\n                block.block_type in (BlockType.WEBHOOK, BlockType.WEBHOOK_MANUAL)\n                and node.webhook_id\n            ):\n                if webhook_payload_key not in data:\n                    raise ValueError(\n                        f\"Node {block.name} #{node.id} webhook payload is missing\"\n                    )\n                input_data = {\"payload\": data[webhook_payload_key]}\n\n            input_data, error = validate_exec(node, input_data)\n            if input_data is None:\n                raise ValueError(error)\n            else:\n                nodes_input.append((node.id, input_data))\n\n        graph_exec_id, node_",
                              "children": [
                                {
                                  "value": "ock = get_block",
                                  "children": [
                                    {
                                      "value": "ock = get_block",
                                      "children": [
                                        {
                                          "value": "ock = get_",
                                          "children": []
                                        },
                                        {
                                          "value": "ck",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "d)\n\n            # Invalid block",
                                  "children": [
                                    {
                                      "value": "d)\n\n            # Invalid block",
                                      "children": [
                                        {
                                          "value": "d)",
                                          "children": []
                                        },
                                        {
                                          "value": "# Invalid block",
                                          "children": [
                                            {
                                              "value": "#",
                                              "children": []
                                            },
                                            {
                                              "value": "Invalid block",
                                              "children": [
                                                {
                                                  "value": "Invalid block",
                                                  "children": [
                                                    {
                                                      "value": "Inva",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "id block",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "hould never be executed.\n            if not block or b",
                                  "children": []
                                },
                                {
                                  "value": "pe == BlockType.NOTE:\n                continue\n\n            # Extract reques",
                                  "children": [
                                    {
                                      "value": "== BlockType.NOTE:\n                continue",
                                      "children": [
                                        {
                                          "value": "== BlockT",
                                          "children": [
                                            {
                                              "value": "lockT",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "NOTE:\n                continue",
                                          "children": [
                                            {
                                              "value": "NOTE:",
                                              "children": [
                                                {
                                                  "value": "NOTE:",
                                                  "children": []
                                                },
                                                {
                                                  "value": "",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "continue",
                                              "children": [
                                                {
                                                  "value": "continu",
                                                  "children": []
                                                },
                                                {
                                                  "value": "",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "t reques",
                                      "children": [
                                        {
                                          "value": "t reques",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "and assign it to the input pin.\n            if block.block_ty",
                                  "children": []
                                },
                                {
                                  "value": "pe.INPUT:\n                name = node.input_default.get(\"name\")\n                if name and name in data:\n                    input_data = {\"value\": data[name]}\n\n            # Extract webhoo",
                                  "children": [
                                    {
                                      "value": "INPUT:\n                name = node.",
                                      "children": [
                                        {
                                          "value": "INPUT:",
                                          "children": [
                                            {
                                              "value": "INPUT",
                                              "children": []
                                            },
                                            {
                                              "value": "",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "name = node.",
                                          "children": [
                                            {
                                              "value": "name =",
                                              "children": []
                                            },
                                            {
                                              "value": "node.",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "\"name\")\n                if name and name in data:\n                    input_data = {\"value\": data[name]}\n\n            # Extract webhoo",
                                      "children": [
                                        {
                                          "value": "\"name\")\n                if name and n",
                                          "children": [
                                            {
                                              "value": "\"name\")\n                if name and n",
                                              "children": [
                                                {
                                                  "value": "\"nam",
                                                  "children": []
                                                },
                                                {
                                                  "value": "if name and n",
                                                  "children": [
                                                    {
                                                      "value": "if na",
                                                      "children": [
                                                        {
                                                          "value": "i",
                                                          "children": [
                                                            {
                                                              "value": "",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "i",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "na",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "me and n",
                                                      "children": [
                                                        {
                                                          "value": "e and",
                                                          "children": [
                                                            {
                                                              "value": "e",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "and",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "input_data = {\"value\": data[name]}\n\n            # Extract webhoo",
                                          "children": [
                                            {
                                              "value": "input_da",
                                              "children": [
                                                {
                                                  "value": "",
                                                  "children": []
                                                },
                                                {
                                                  "value": "input_da",
                                                  "children": [
                                                    {
                                                      "value": "",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "t_da",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "me]}\n\n            # Extract webhoo",
                                              "children": [
                                                {
                                                  "value": "me]}\n\n            # Extract webhoo",
                                                  "children": [
                                                    {
                                                      "value": "me]}\n\n            # Extract webhoo",
                                                      "children": [
                                                        {
                                                          "value": "me]}",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "# Extract webhoo",
                                                          "children": [
                                                            {
                                                              "value": "# Extract webho",
                                                              "children": [
                                                                {
                                                                  "value": "# E",
                                                                  "children": [
                                                                    {
                                                                      "value": "",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "#",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "E",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "ract webho",
                                                                  "children": [
                                                                    {
                                                                      "value": "ract",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "webh",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "assign it to the input pin\n            webhook_payload_k",
                                  "children": []
                                },
                                {
                                  "value": "k_{node.webhook_id}_payload\"\n            if (",
                                  "children": [
                                    {
                                      "value": "k_{node.webhook_id}_payload\"\n            if (",
                                      "children": [
                                        {
                                          "value": "k_{node.webhook_id}",
                                          "children": []
                                        },
                                        {
                                          "value": "yload\"\n            if (",
                                          "children": [
                                            {
                                              "value": "yl",
                                              "children": []
                                            },
                                            {
                                              "value": "oad\"",
                                              "children": []
                                            },
                                            {
                                              "value": "if (",
                                              "children": [
                                                {
                                                  "value": "if (",
                                                  "children": [
                                                    {
                                                      "value": "",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "if (",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "",
                                              "children": []
                                            },
                                            {
                                              "value": "",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "ck_type in (BlockType.WEBHOOK, BlockType.WEBHOOK_MANUAL)\n                and node.webhook_id\n            ):\n                if webhook_payload_key not in data:\n                    raise ValueError(\n                        f\"Node {block.name} #{node.id} webhook payload is missing\"\n                    )\n                input_data = {\"payload\": data[webhook_payload_key]}\n\n            input_data, erro",
                                  "children": [
                                    {
                                      "value": "type in (BlockType.WEBHOOK, BlockType.WEBHOOK_MANUAL)\n                and node.webhook_id\n            ):\n                if webhook_p",
                                      "children": [
                                        {
                                          "value": ".WEBHOOK, BlockType.WEBHOOK_MANUAL)\n                and node.webhook_id\n            ):",
                                          "children": [
                                            {
                                              "value": ".WEBHOOK, BlockType.WEBHOOK_MANUAL)\n                and node.webh",
                                              "children": [
                                                {
                                                  "value": ".WEBHOOK, BlockT",
                                                  "children": [
                                                    {
                                                      "value": ".WEBH",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "OK, BlockT",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "WEBHOOK_MANUAL)\n                and node.webh",
                                                  "children": [
                                                    {
                                                      "value": "EBHOOK_MANUAL)",
                                                      "children": [
                                                        {
                                                          "value": "EBHOOK_MA",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "UAL)",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "and node.web",
                                                      "children": [
                                                        {
                                                          "value": "",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "and node.web",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "",
                                              "children": [
                                                {
                                                  "value": "",
                                                  "children": []
                                                },
                                                {
                                                  "value": "",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "data:\n                    raise ValueError(\n                        f\"Node {block.name} #{node.id} webhook payload is missing\"\n                    )\n                input_data = {\"payload\": data[webhook_payload_key]}\n\n            input_data, erro",
                                      "children": [
                                        {
                                          "value": "data:\n                    raise ValueError(\n                        f\"Node {block.name} #{node.id} webhook payload is missing\"\n                    )\n                input_data =",
                                          "children": [
                                            {
                                              "value": "a:\n                    raise Va",
                                              "children": [
                                                {
                                                  "value": "a:",
                                                  "children": []
                                                },
                                                {
                                                  "value": "e Va",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "f\"Node {block.name} #{node.id} webhook payload is missing\"\n                    )\n                input_data =",
                                              "children": [
                                                {
                                                  "value": "f\"Node {block.name} #{node.id} webhook payload is missing\"\n                    )\n                input_data =",
                                                  "children": [
                                                    {
                                                      "value": "f\"Node {block.name} #{node.id} webhook payload is missing\"\n                    )\n                input_data =",
                                                      "children": [
                                                        {
                                                          "value": "f\"No",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "de {block.name} #{node.id} webhook payload is missing\"\n                    )\n                input_data =",
                                                          "children": [
                                                            {
                                                              "value": "webhook payload is missing\"\n                    )",
                                                              "children": [
                                                                {
                                                                  "value": "w",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "ebhoo",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "k payload is",
                                                                  "children": [
                                                                    {
                                                                      "value": "payload i",
                                                                      "children": [
                                                                        {
                                                                          "value": "payl",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "ad i",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "m",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "issing\"",
                                                                  "children": [
                                                                    {
                                                                      "value": "ssing\"",
                                                                      "children": [
                                                                        {
                                                                          "value": "ssin",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "\"",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": ")",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "webhook_payload_key]}\n\n            input_data, erro",
                                          "children": [
                                            {
                                              "value": "webhook_payload_key]}\n\n            input_data, erro",
                                              "children": [
                                                {
                                                  "value": "webhook_pa",
                                                  "children": []
                                                },
                                                {
                                                  "value": "ad_key]}\n\n            input_data, erro",
                                                  "children": [
                                                    {
                                                      "value": "d_key]}\n\n            input_data, err",
                                                      "children": [
                                                        {
                                                          "value": "d_key]}",
                                                          "children": [
                                                            {
                                                              "value": "d",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "_key]}",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "input_data, err",
                                                          "children": [
                                                            {
                                                              "value": "",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "input_data, er",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "xec(node, input_data)\n            if input_data is",
                                  "children": [
                                    {
                                      "value": "xec(node, input_data)\n            if input_data is",
                                      "children": [
                                        {
                                          "value": "xec(node, input_d",
                                          "children": [
                                            {
                                              "value": "xec(node,",
                                              "children": []
                                            },
                                            {
                                              "value": "put_d",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": ")\n            if input_data is",
                                          "children": [
                                            {
                                              "value": ")",
                                              "children": []
                                            },
                                            {
                                              "value": "if input_data is",
                                              "children": [
                                                {
                                                  "value": "if i",
                                                  "children": []
                                                },
                                                {
                                                  "value": "ut_data is",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "raise ValueError(error)\n            else:\n                nodes_input.append((node.id, input_data))\n\n        graph_exec_id, node_",
                                  "children": [
                                    {
                                      "value": "raise ValueE",
                                      "children": [
                                        {
                                          "value": "rais",
                                          "children": []
                                        },
                                        {
                                          "value": "lueE",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "else:",
                                      "children": [
                                        {
                                          "value": "else:",
                                          "children": [
                                            {
                                              "value": "else:",
                                              "children": [
                                                {
                                                  "value": "else:",
                                                  "children": []
                                                },
                                                {
                                                  "value": "",
                                                  "children": [
                                                    {
                                                      "value": "",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "put.append((node.id, input_data))\n\n        graph_exec_id, node_",
                                      "children": [
                                        {
                                          "value": "nput_data))\n\n        graph_exec_id, node_",
                                          "children": [
                                            {
                                              "value": "nput_data))\n\n        graph_exec_id, node_",
                                              "children": [
                                                {
                                                  "value": "nput_data))\n\n        graph_exec_id, node_",
                                                  "children": [
                                                    {
                                                      "value": "nput_data))",
                                                      "children": [
                                                        {
                                                          "value": "nput_data))",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "graph_exec_id, node_",
                                                      "children": [
                                                        {
                                                          "value": "graph_exec_id, node",
                                                          "children": [
                                                            {
                                                              "value": "graph_",
                                                              "children": [
                                                                {
                                                                  "value": "gra",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "h_",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "ec_id, nod",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "lf.db_client.create_graph_execution(\n            graph_id=graph_id,\n            graph_version=graph.version,\n            nodes_input=nodes_input,\n            user_id=user_id,\n        )\n\n        starting_node_execs",
                          "children": [
                            {
                              "value": "lf.db_client.create_graph_execution(\n            graph_id=graph_id,\n            graph_version=graph.version,\n            nodes_input=nodes_input,\n            user_id=user_id,\n        )\n\n        starting_node_execs",
                              "children": [
                                {
                                  "value": "lf.db_client.create_graph",
                                  "children": [
                                    {
                                      "value": "lf.db_client.",
                                      "children": []
                                    },
                                    {
                                      "value": "eate_graph",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "ecution(\n            graph_id=graph_id,\n            graph_version=graph.version,\n            nodes_input=nodes_input,\n            user_id=user_id,\n        )\n\n        starting_node_execs",
                                  "children": [
                                    {
                                      "value": "ecution(\n            graph_id=graph_i",
                                      "children": [
                                        {
                                          "value": "ecution(",
                                          "children": [
                                            {
                                              "value": "ecut",
                                              "children": []
                                            },
                                            {
                                              "value": "on(",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "graph_id=graph_i",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "d,\n            graph_version=graph.version,\n            nodes_input=nodes_input,\n            user_id=user_id,\n        )\n\n        starting_node_execs",
                                      "children": [
                                        {
                                          "value": "graph_version=gr",
                                          "children": [
                                            {
                                              "value": "graph_v",
                                              "children": []
                                            },
                                            {
                                              "value": "rsion=gr",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "nodes_input=node",
                                          "children": [
                                            {
                                              "value": "no",
                                              "children": []
                                            },
                                            {
                                              "value": "es_input=node",
                                              "children": [
                                                {
                                                  "value": "es_in",
                                                  "children": []
                                                },
                                                {
                                                  "value": "ut=node",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "user_id=user_id,",
                                          "children": [
                                            {
                                              "value": "user",
                                              "children": []
                                            },
                                            {
                                              "value": "id=user_id,",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "starting_",
                                          "children": [
                                            {
                                              "value": "s",
                                              "children": []
                                            },
                                            {
                                              "value": "arting_",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "for node_exec in node",
                          "children": [
                            {
                              "value": "for node_exec in node",
                              "children": [
                                {
                                  "value": "for node_exec in",
                                  "children": []
                                },
                                {
                                  "value": "de",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "starting_node_execs.append(\n                NodeExecutionEntry(\n                    user_id=user_id,\n                    graph_exec_id=node_exec.graph_exec_id,\n                    graph_id=node_exec.graph_id,\n                    node_exec_id=node_exec.node_exec_id,\n                    node_id=node_exec.node_id,\n                    data=node_exec.input_data,\n                )\n            )\n            exec_update = self.db_client.update_execution_status(\n                node_exec.node_exec_id, ExecutionStatus.QUEUED, node_exec.input_data\n            )\n            self.db_client.send_execution_update(exec_update)\n\n        graph_exec = GraphEx",
                          "children": [
                            {
                              "value": "st",
                              "children": []
                            },
                            {
                              "value": "ng_node_ex",
                              "children": []
                            },
                            {
                              "value": "NodeExecutionEntry(\n                    user_id=user_id,\n                    graph_exec_id=node_exec.graph_exec_id,\n                    graph_id=node_exec.graph_id,\n                    node_exec_id=node_exec.node_exec_id,\n                    node_id=node_exec.node_id,\n                    data=node_exec.input_data,\n                )\n            )\n            exec_update = self.db_client.update_execution_status(\n                node_exec.node_exec_id, ExecutionStatus.QUEUED, node_exec.input_data\n            )\n            self.db_client.send_execution_update(exec_update)\n\n        graph_exec = GraphEx",
                              "children": [
                                {
                                  "value": "NodeExecutionEntry(\n                    user_id=user_id,\n                    graph_exec_id=node_exec.graph_exec_id,\n                    graph_id=node_exec.graph_id,\n                    node_exec_id=node_exec.node_exec_id,\n                    node_id=node_exec.node_id,\n                    data=node_exec.input_data,\n                )\n            )\n            exec_update = sel",
                                  "children": [
                                    {
                                      "value": "NodeExecutionEntry(\n                    user_id=user_id,\n                    graph_exec_id=node_exec.graph_exec_id,\n                    graph_id=node_exec.graph_id,\n                    node_exec_id=node_exec.node_exec_id,\n                    node_id=node_exec.node_id,\n                    data=node_exec.input_data,\n                )\n            )\n            exec_update = sel",
                                      "children": [
                                        {
                                          "value": "NodeExecutio",
                                          "children": [
                                            {
                                              "value": "NodeE",
                                              "children": []
                                            },
                                            {
                                              "value": "ecutio",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "nEntry(\n                    user_id=user_id,\n                    graph_exec_id=node_exec.graph_exec_id,\n                    graph_id=node_exec.graph_id,\n                    node_exec_id=node_exec.node_exec_id,\n                    node_id=node_exec.node_id,\n                    data=node_exec.input_data,\n                )\n            )\n            exec_update = sel",
                                          "children": [
                                            {
                                              "value": "user_id=user_id,\n                    graph_exec_id=node_exec.graph_exec_id,\n                    graph_id=node_exec.graph_id,\n                    node_exec_id=node_exec.node_exec_id,\n                    node_id=node_exec.node_id,\n                    data=node_exec.input_data,\n                )\n            )\n            exe",
                                              "children": [
                                                {
                                                  "value": "user_id=",
                                                  "children": []
                                                },
                                                {
                                                  "value": "user_id,\n                    graph_exec_id=node_exec.graph_exec_id,\n                    graph_id=node_exec.graph_id,\n                    node_exec_id=node_exec.node_exec_id,\n                    node_id=node_exec.node_id,\n                    data=node_exec.input_data,\n                )\n            )\n            exe",
                                                  "children": [
                                                    {
                                                      "value": "graph_ex",
                                                      "children": [
                                                        {
                                                          "value": "",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "raph_ex",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "exec_id,\n                    graph_id",
                                                      "children": [
                                                        {
                                                          "value": "exec_id,",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "graph_id",
                                                          "children": [
                                                            {
                                                              "value": "",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "graph_id",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "node_exe",
                                                      "children": [
                                                        {
                                                          "value": "",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "node_exe",
                                                          "children": [
                                                            {
                                                              "value": "",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "node_exe",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "ec_id,\n                    node_id=",
                                                      "children": [
                                                        {
                                                          "value": "ec_id,",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "node_id=",
                                                          "children": [
                                                            {
                                                              "value": "",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "node_id=",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "data=nod",
                                                      "children": [
                                                        {
                                                          "value": "",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "data=nod",
                                                          "children": [
                                                            {
                                                              "value": "",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "ata=nod",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": ")",
                                                      "children": [
                                                        {
                                                          "value": "",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": ")",
                                                          "children": [
                                                            {
                                                              "value": ")",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "pdate_execution_status(\n                node_exec.node_exec_id, ExecutionStatus.QUEUED, node_exec.input_data\n            )\n            self.db_client.se",
                                  "children": [
                                    {
                                      "value": "pdate_execution_status(\n                node_exec.node_exec_id, ExecutionStatus.QUEUED, node_exec.input_data\n            )\n            self.db_client.se",
                                      "children": [
                                        {
                                          "value": "pdate_execu",
                                          "children": []
                                        },
                                        {
                                          "value": "n_status(\n                node_exec.node_exec_id, ExecutionStatus.QUEUED, node_exec.input_data\n            )\n            self.db_client.se",
                                          "children": [
                                            {
                                              "value": "n_status(\n                node_exec.no",
                                              "children": [
                                                {
                                                  "value": "n_status(",
                                                  "children": [
                                                    {
                                                      "value": "n_st",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "tus(",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "node_exec.no",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "de_exec_id, ExecutionStatus.QUEUED, node_exec.input_data\n            )\n            self.db_client.se",
                                              "children": [
                                                {
                                                  "value": "ionStatus.QUEUED, node",
                                                  "children": [
                                                    {
                                                      "value": "ionStatus",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "QUEUED, node",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "xec.input_data",
                                                  "children": [
                                                    {
                                                      "value": "xec.input_data",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": ")\n            sel",
                                                  "children": [
                                                    {
                                                      "value": ")",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "sel",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "update(exec_update)\n\n        graph_exec = GraphEx",
                                  "children": [
                                    {
                                      "value": "update(exec_update)\n\n        graph_exec = GraphEx",
                                      "children": [
                                        {
                                          "value": "update(exec_update)\n\n        graph_e",
                                          "children": [
                                            {
                                              "value": "update(exec_up",
                                              "children": [
                                                {
                                                  "value": "upda",
                                                  "children": []
                                                },
                                                {
                                                  "value": "e(exec_up",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "ate)\n\n        graph_e",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "xec = GraphEx",
                                          "children": [
                                            {
                                              "value": "ec = GraphE",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "ry(\n            user_id=user_id,\n            graph_id=graph_id,\n            graph_exec_id=graph_exec_id,\n            start_node_execs=starting_node_execs,\n        )\n        self.queue.add(graph_",
                          "children": [
                            {
                              "value": "ry(\n            user_id=user_id,\n            graph_id=graph_id,\n            graph_exec_id=graph_exec_id,\n            start_node_execs=starting_node_execs,\n        )\n        self.queue.add(graph_",
                              "children": [
                                {
                                  "value": "ry(",
                                  "children": []
                                },
                                {
                                  "value": "user_id=user_id,\n            graph_id=graph_id,\n            graph_exec_id=graph_exec_id,\n            start_node_execs=starting_node_execs,\n        )\n        self.queue.add(graph_",
                                  "children": [
                                    {
                                      "value": "user_id=user_id,",
                                      "children": []
                                    },
                                    {
                                      "value": "graph_id=graph_id,\n            graph_exec_id=graph_exec_id,\n            start_node_execs=starting_node_execs,\n        )\n        self.queue.add(graph_",
                                      "children": [
                                        {
                                          "value": "raph_id=graph_i",
                                          "children": [
                                            {
                                              "value": "raph_id",
                                              "children": []
                                            },
                                            {
                                              "value": "graph_i",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "graph_exec_id=gr",
                                          "children": [
                                            {
                                              "value": "graph_e",
                                              "children": []
                                            },
                                            {
                                              "value": "ec_id=gr",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "start_node_execs",
                                          "children": [
                                            {
                                              "value": "st",
                                              "children": []
                                            },
                                            {
                                              "value": "rt_node_execs",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "_execs,\n        )\n        self.queue",
                                          "children": [
                                            {
                                              "value": "_execs,",
                                              "children": []
                                            },
                                            {
                                              "value": "self.queue",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "return graph_exec",
                          "children": [
                            {
                              "value": "return graph_exec",
                              "children": [
                                {
                                  "value": "return g",
                                  "children": [
                                    {
                                      "value": "retu",
                                      "children": [
                                        {
                                          "value": "",
                                          "children": []
                                        },
                                        {
                                          "value": "retu",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "n g",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "raph_exec",
                                  "children": [
                                    {
                                      "value": "aph_exec",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "def cancel_e",
                          "children": [
                            {
                              "value": "f cancel_e",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "on(self, graph_exec_id: str) -> None:\n        \"\"\"\n        Mechanism:\n        1. Set the cancel event\n        2. Graph executor's cancel handler thread detects the event, terminates workers,\n           reinitializes worker pool, and returns.\n        3. Update execution statuses in DB and set `error` outputs to `\"TERMINATED\"`.\n        \"\"\"\n        if graph_exec_id not in self.active_graph_runs:\n            raise Exception(\n                f\"Graph execution #{graph_exec_id} not active/running: \"\n                \"possibly already completed/cancelled.\"\n            )\n\n        future, cancel_event = self.active_graph_runs[graph_exec_id]\n        if cancel_event.is_set():\n            return\n\n        cancel_event.set()\n        future.result()\n\n        # Update the status of the unfinished node executions\n        node_execs = self.db_client.get_execution_results(graph_exec_id)\n        for node_exec in node_execs:\n            if node_exec.status not in (\n                ExecutionStatus.COMPLETED,\n                ExecutionStatus.FAILED,\n            ):\n                self.db_client.upsert_execution_output(\n                    node_exec.node_exec_id, \"error\", \"TERMINATED\"\n                )\n                exec_update = self.db_client.update_execution_status(\n                    node_exec.node_exec_id, ExecutionStatus.FAILED\n                )\n                self.db_client.send_execution_update(exec_update)\n\n    def _validate_node_input",
              "children": [
                {
                  "value": "on(self",
                  "children": [
                    {
                      "value": "n(self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "ph_exec_id: str) -> None:\n        \"\"\"\n        Mechanism:\n        1. Set the cancel event\n        2. Graph executor's cancel handler thread detects the event, terminates workers,\n           reinitializes worker pool, and returns.\n        3. Update execution statuses in DB and set `error` outputs to `\"TERMINATED\"`.\n        \"\"\"\n        if graph_exec_id not in self.active_graph_runs:\n            raise Exception(\n                f\"Graph execution #{graph_exec_id} not active/running: \"\n                \"possibly already completed/cancelled.\"\n            )\n\n        future, cancel_event = self.active_graph_runs[graph_exec_id]\n        if cancel_event.is_set():\n            return\n\n        cancel_event.set()\n        future.result()\n\n        # Update the status of the unfinished node executions\n        node_execs = self.db_client.get_execution_results(graph_exec_id)\n        for node_exec in node_execs:\n            if node_exec.status not in (\n                ExecutionStatus.COMPLETED,\n                ExecutionStatus.FAILED,\n            ):\n                self.db_client.upsert_execution_output(\n                    node_exec.node_exec_id, \"error\", \"TERMINATED\"\n                )\n                exec_update = self.db_client.update_execution_status(\n                    node_exec.node_exec_id, ExecutionStatus.FAILED\n                )\n                self.db_client.send_execution_update(exec_update)\n\n    def _validate_node_input",
                  "children": [
                    {
                      "value": "xec_id: str) ->",
                      "children": []
                    },
                    {
                      "value": "None:\n        \"\"\"",
                      "children": [
                        {
                          "value": "one:",
                          "children": []
                        },
                        {
                          "value": "\"\"\"",
                          "children": [
                            {
                              "value": "\"\"\"",
                              "children": []
                            },
                            {
                              "value": "",
                              "children": [
                                {
                                  "value": "",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "anis",
                      "children": [
                        {
                          "value": "anis",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "1. Set the cancel event\n        2. Graph executor's cancel handler thread detects the event, terminates workers,\n           reinitializes worker pool, and returns.\n        3. Update execution statuses in DB and set `error` outputs to `\"TERMINATED\"`.\n        \"\"\"\n        if graph_exec_id not in self.active_graph_runs:\n            raise Exception(\n                f\"Graph execution #{graph_exec_id} not active/running: \"\n                \"possibly already completed/cancelled.\"\n            )\n\n        future, cancel_event = self.active_graph_runs[graph_exec_id]\n        if cancel_event.is_set():\n            return\n\n        cancel_event.set()\n        future.result()\n\n        # Update the status of the unfinished node executions\n        node_execs = self.db_client.get_execution_results(graph_exec_id)\n        for node_exec in node_execs:\n            if node_exec.status not in (\n                ExecutionStatus.COMPLETED,\n                ExecutionStatus.FAILED,\n            ):\n                self.db_client.upsert_execution_output(\n                    node_exec.node_exec_id, \"error\", \"TERMINATED\"\n                )\n                exec_update = self.db_client.update_execution_status(\n                    node_exec.node_exec_id, ExecutionStatus.FAILED\n                )\n                self.db_client.send_execution_update(exec_update)\n\n    def _validate_node_input",
                      "children": [
                        {
                          "value": "1. Set the cancel event\n        2. Graph executor's cancel handler thread detects the event, terminates workers,\n           reinitializes worker pool, and returns.\n        3. Update execution statuses in DB and set `error` outputs to `\"TERMINATED\"`.\n        \"\"\"\n        if graph_exec_id not",
                          "children": [
                            {
                              "value": "1. Set the cancel event\n        2. Graph executor's cancel handler thread detects the event, terminates workers,\n           reinitializes worker pool, and returns.\n        3. Update execution statuses in DB and set `error` outputs to `\"TERMINATED\"`.\n        \"\"\"\n        if graph_exec_id not",
                              "children": [
                                {
                                  "value": "1.",
                                  "children": []
                                },
                                {
                                  "value": "Set the cancel event\n        2. Graph executor's cancel handler thread detects the event, terminates workers,\n           reinitializes worker pool, and returns.\n        3. Update execution statuses in DB and set `error` outputs to `\"TERMINATED\"`.\n        \"\"\"\n        if graph_exec_id n",
                                  "children": []
                                },
                                {
                                  "value": "ot",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "ctive_graph_runs:\n            raise Exception(\n                f\"Graph execution #{graph_exec_id} not active/running: \"\n                \"possibly already completed/cancelled.\"\n            )\n\n        future, cancel_event",
                          "children": [
                            {
                              "value": "ve_graph_runs:\n            raise Exception(",
                              "children": [
                                {
                                  "value": "ve_graph_runs",
                                  "children": []
                                },
                                {
                                  "value": "raise Exception(",
                                  "children": [
                                    {
                                      "value": "",
                                      "children": []
                                    },
                                    {
                                      "value": "raise Exception(",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "f\"Graph execution #{graph_exec_id} not active/running: \"\n                \"possibly already completed/cancelled.\"\n            )\n\n        future, cancel_event",
                              "children": [
                                {
                                  "value": "f\"Graph execution #{graph_exec_id} not active/running: \"\n                \"possibly already completed/cancelled.\"\n            )\n\n        future, cancel_event",
                                  "children": [
                                    {
                                      "value": "raph execution #{graph_exec_id} not active/running: \"\n                \"possibly already completed/cancelled.\"\n            )\n\n        future, cancel_event",
                                      "children": [
                                        {
                                          "value": "raph exec",
                                          "children": []
                                        },
                                        {
                                          "value": "ution #{graph_exec_id} not active/running: \"\n                \"possibly already completed/cancelled.\"\n            )\n\n        future, cancel_event",
                                          "children": [
                                            {
                                              "value": "_id} not active/running: \"\n                \"possibly already completed/cancelled.\"\n            )\n\n        future",
                                              "children": [
                                                {
                                                  "value": "_id} not active/running: \"\n                \"possibly alr",
                                                  "children": [
                                                    {
                                                      "value": "_i",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "d} not active/run",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "ning: \"",
                                                      "children": [
                                                        {
                                                          "value": "ing: \"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"possibly al",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "r",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "ncelled.\"\n            )\n\n        future",
                                                  "children": [
                                                    {
                                                      "value": "n",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "celled.\"\n            )\n\n        futur",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "e",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "tive_graph_runs[graph_exec_id]\n        if cancel_event.is_se",
                          "children": [
                            {
                              "value": "tive_graph_runs[graph_exec_id]\n        if cancel_event.is_se",
                              "children": [
                                {
                                  "value": "tive_graph_runs[grap",
                                  "children": [
                                    {
                                      "value": "tive_g",
                                      "children": []
                                    },
                                    {
                                      "value": "ph_runs[grap",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "xec_id]\n        if cancel_event.is_se",
                                  "children": [
                                    {
                                      "value": "xec_id]\n        if can",
                                      "children": [
                                        {
                                          "value": "xec_",
                                          "children": []
                                        },
                                        {
                                          "value": "d]\n        if can",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "el_event.is_s",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "return\n\n        cancel_event.set()",
                          "children": [
                            {
                              "value": "return",
                              "children": [
                                {
                                  "value": "return",
                                  "children": [
                                    {
                                      "value": "return",
                                      "children": []
                                    },
                                    {
                                      "value": "",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "et()",
                              "children": [
                                {
                                  "value": "et()",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "ure.result()",
                          "children": [
                            {
                              "value": "ure.result()",
                              "children": [
                                {
                                  "value": "ure.result()",
                                  "children": [
                                    {
                                      "value": "ure.result()",
                                      "children": []
                                    },
                                    {
                                      "value": "",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "ate the status",
                          "children": [
                            {
                              "value": "ate the status",
                              "children": [
                                {
                                  "value": "ate the statu",
                                  "children": [
                                    {
                                      "value": "ate th",
                                      "children": []
                                    },
                                    {
                                      "value": "statu",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "s",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "inished node executions\n        node_execs = self.db_",
                          "children": []
                        },
                        {
                          "value": "t_execution_results(graph_exec_id)\n        for node_exec in node",
                          "children": [
                            {
                              "value": "t_execution_results(graph_exec_id)\n        for node_exec in node",
                              "children": [
                                {
                                  "value": "t_executio",
                                  "children": []
                                },
                                {
                                  "value": "esults(graph_exec_id)\n        for node_exec in node",
                                  "children": [
                                    {
                                      "value": "esults(graph_exec_id)\n        for no",
                                      "children": [
                                        {
                                          "value": "esults(graph_e",
                                          "children": [
                                            {
                                              "value": "esul",
                                              "children": []
                                            },
                                            {
                                              "value": "s(graph_e",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "ec_id)\n        for no",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "de_exec in node",
                                      "children": [
                                        {
                                          "value": "e_exec in nod",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "if node_exec.status not in (\n                ExecutionStatus.COMPLETED,\n                ExecutionStatus.FAILED,\n            ):\n                self.db_client.upsert_execution_output(\n                    node_exec.node_exec_id, \"error\", \"TERMINATED\"\n                )\n                exec_update = self.db_client.update_execution_status(\n                    node_exec.node_exec_id, ExecutionStatus.FAILED\n                )\n                self.db_client.send_execution_update(exec_update)\n\n    def _validate_node_input",
                          "children": [
                            {
                              "value": "if",
                              "children": []
                            },
                            {
                              "value": "e_exec.sta",
                              "children": []
                            },
                            {
                              "value": "ExecutionStatus.COMPLETED,\n                ExecutionStatus.FAILED,\n            ):\n                self.db_client.upsert_execution_output(\n                    node_exec.node_exec_id, \"error\", \"TERMINATED\"\n                )\n                exec_update = self.db_client.update_execution_status(\n                    node_exec.node_exec_id, ExecutionStatus.FAILED\n                )\n                self.db_client.send_execution_update(exec_update)\n\n    def _validate_node_input",
                              "children": [
                                {
                                  "value": "ExecutionStatus.COMPLETED,\n                ExecutionStatus.FAILED,\n            ):\n                self.db_client.upsert_execution_output(\n                    node_exec.node_exec_id, \"error\", \"TERMINATED\"\n                )\n                exec_update = self.db_client.update_execution_status(\n                    node_exec.node_exec_id, ExecutionStatus.FAILED\n                )\n                self.db_client.send_execution_update(exec_update)\n\n    def _validate_node_input",
                                  "children": [
                                    {
                                      "value": "ExecutionStatus.COMPLETED,\n                ExecutionStatus.FAILED,\n            ):\n                self.db_clie",
                                      "children": [
                                        {
                                          "value": "Exec",
                                          "children": [
                                            {
                                              "value": "",
                                              "children": []
                                            },
                                            {
                                              "value": "Exec",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "tus.COMPLETED,\n                ExecutionStatus.FAILED,\n            ):\n                self.db_clie",
                                          "children": [
                                            {
                                              "value": "ExecutionSta",
                                              "children": [
                                                {
                                                  "value": "Ex",
                                                  "children": []
                                                },
                                                {
                                                  "value": "cutionSta",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "):",
                                              "children": [
                                                {
                                                  "value": "):",
                                                  "children": []
                                                },
                                                {
                                                  "value": "",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "n_output(\n                    node_exec.node_exec_id, \"error\", \"TERMINATED\"\n                )\n                exec_update = self.db_client.update_execution_status(\n                    node_exec.node_exec_id, ExecutionStatus.FAILED\n                )\n                self.db_client.send_execution_update(exec_update)\n\n    def _validate_node_input",
                                      "children": [
                                        {
                                          "value": "n_output(\n                    node_exec.node_exec_id, \"error\", \"TERMINATED\"\n                )\n                exec_update =",
                                          "children": [
                                            {
                                              "value": "n_output(\n                    node_exec.node_exec_id, \"error\", \"TERMINATED\"\n                )\n                exec_update =",
                                              "children": [
                                                {
                                                  "value": "n_output(\n                    node_exe",
                                                  "children": [
                                                    {
                                                      "value": "n_output(",
                                                      "children": [
                                                        {
                                                          "value": "n_ou",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "put(",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "node_exe",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "c.node_exec_id, \"error\", \"TERMINATED\"\n                )\n                exec_update =",
                                                  "children": [
                                                    {
                                                      "value": "\", \"TERMINATED\"",
                                                      "children": [
                                                        {
                                                          "value": "\", \"TERMI",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "ATED\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "",
                                                      "children": [
                                                        {
                                                          "value": "",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "",
                                                      "children": [
                                                        {
                                                          "value": "",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "pdate_execution_status(\n                    node_exec.node_exec_id, ExecutionStatus.FAILED\n                )\n                self.db_clien",
                                          "children": [
                                            {
                                              "value": "pdate_execution_status(\n                    node_exec.node_exec_id, ExecutionStatus.FAILED\n                )\n                self.db_clien",
                                              "children": [
                                                {
                                                  "value": "pdate_execu",
                                                  "children": []
                                                },
                                                {
                                                  "value": "n_status(\n                    node_exec.node_exec_id, ExecutionStatus.FAILED\n                )\n                self.db_clien",
                                                  "children": [
                                                    {
                                                      "value": "n_status(\n                    node_exe",
                                                      "children": [
                                                        {
                                                          "value": "n_status(",
                                                          "children": [
                                                            {
                                                              "value": "n_st",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "tus(",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "node_exe",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "c.node_exec_id, ExecutionStatus.FAILED\n                )\n                self.db_clien",
                                                      "children": [
                                                        {
                                                          "value": "ionStatus.FAILED",
                                                          "children": [
                                                            {
                                                              "value": "ionStatus",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "FAILED",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": ")",
                                                          "children": [
                                                            {
                                                              "value": ")",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "update(exec_update)\n\n    def _validate_node_input",
                                          "children": [
                                            {
                                              "value": "update(exec_update)\n\n    def _validate_node_input",
                                              "children": [
                                                {
                                                  "value": "update(exec_update)\n\n    def _valida",
                                                  "children": [
                                                    {
                                                      "value": "update(exec_up",
                                                      "children": [
                                                        {
                                                          "value": "upda",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "e(exec_up",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "ate)\n\n    def _valida",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "te_node_input",
                                                  "children": [
                                                    {
                                                      "value": "e_node_inpu",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "ntials(self, graph: GraphModel, user_id: str):\n        \"\"\"Checks all credentials for all nodes of the graph\"\"\"\n\n        for node in graph.nodes:\n            block = get_block(node.block_id)\n            if not block:\n                raise ValueError(f\"Unknown block {node.block_id} for node #{node.id}\")\n\n            # Find any fields of type CredentialsMetaInput\n            model_fields = cast(type[BaseModel], block.input_schema).model_fields\n            if CREDENTIALS_FIELD_NAME not in model_fields:\n                continue\n\n            field = model_fields[CREDENTIALS_FIELD_NAME]\n\n            # The BlockSchema class enforces that a `credentials` field is always a\n            # `CredentialsMetaInput`, so we can safely assume this here.\n            credentials_meta_type = cast(CredentialsMetaInput, field.annotation)\n            credentials_meta = credentials_meta_type.model_validate(\n                node.input_default[CREDENTIALS_FIELD_NAME]\n            )\n            # Fetch the corresponding Credentials and perform sanity checks\n            credentials = self.credentials_store.get_creds_by_id(\n                user_id, credentials_meta.id\n            )\n            if not credentials:\n                raise ValueError(\n                    f\"Unknown credentials #{credentials_meta.id} \"\n                    f\"for node #{node.id}\"\n                )\n            if (\n                credentials.provider != credentials_meta.provider\n                or credentials.type != credentials_meta.type\n            ):\n                logger.warning(\n                    f\"Invalid credentials #{credentials.id} for node #{node.id}: \"\n                    \"type/provider mismatch: \"\n                    f\"{credentials_meta.type}<>{credentials.type};\"\n                    f\"{credentials_meta.provider}<>{credentials.provider}\"\n                )\n                raise ValueError(\n                    f\"Invalid credentials #{credentials.id} for node #{node.id}: \"\n                    \"type/provider mismatch\"\n                )\n\n\n# ------- UTILITIES -------",
              "children": [
                {
                  "value": "ls(self, graph: GraphModel, user",
                  "children": []
                },
                {
                  "value": "_id: str):\n        \"\"\"Checks all creden",
                  "children": [
                    {
                      "value": "id:",
                      "children": []
                    },
                    {
                      "value": "r):\n        \"\"\"Ch",
                      "children": [
                        {
                          "value": "r):",
                          "children": []
                        },
                        {
                          "value": "\"\"\"Ch",
                          "children": [
                            {
                              "value": "\"\"\"Ch",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "ks all crede",
                      "children": [
                        {
                          "value": "ks all",
                          "children": []
                        },
                        {
                          "value": "ede",
                          "children": [
                            {
                              "value": "ede",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "all nodes of the graph\"\"\"\n\n        for node in graph.nodes:\n            block = get_block(node.block_id)\n            if not block:\n                raise ValueError(f\"Unknown block {node.block_id} for node #{node.id}\")\n\n            # Find any fields of type CredentialsMetaInput\n            model_fields = cast(type[BaseModel], block.input_schema).model_fields\n            if CREDENTIALS_FIELD_NAME not in model_fields:\n                continue\n\n            field = model_fields[CREDENTIALS_FIELD_NAME]\n\n            # The BlockSchema class enforces that a `credentials` field is always a\n            # `CredentialsMetaInput`, so we can safely assume this here.\n            credentials_meta_type = cast(CredentialsMetaInput, field.annotation)\n            credentials_meta = credentials_meta_type.model_validate(\n                node.input_default[CREDENTIALS_FIELD_NAME]\n            )\n            # Fetch the corresponding Credentials and perform sanity checks\n            credentials = self.credentials_store.get_creds_by_id(\n                user_id, credentials_meta.id\n            )\n            if not credentials:\n                raise ValueError(\n                    f\"Unknown credentials #{credentials_meta.id} \"\n                    f\"for node #{node.id}\"\n                )\n            if (\n                credentials.provider != credentials_meta.provider\n                or credentials.type != credentials_meta.type\n            ):\n                logger.warning(\n                    f\"Invalid credentials #{credentials.id} for node #{node.id}: \"\n                    \"type/provider mismatch: \"\n                    f\"{credentials_meta.type}<>{credentials.type};\"\n                    f\"{credentials_meta.provider}<>{credentials.provider}\"\n                )\n                raise ValueError(\n                    f\"Invalid credentials #{credentials.id} for node #{node.id}: \"\n                    \"type/provider mismatch\"\n                )\n\n\n# ------- UTILITIES -------",
                  "children": [
                    {
                      "value": "all nodes of the graph\"\"\"\n\n        for node in graph.no",
                      "children": [
                        {
                          "value": "all nodes of the graph\"\"\"\n\n        for node in graph.no",
                          "children": [
                            {
                              "value": "all",
                              "children": []
                            },
                            {
                              "value": "nodes of the graph\"\"\"\n\n        for node in graph",
                              "children": []
                            },
                            {
                              "value": ".no",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "block = get_block(node.block_id)\n            if not block:\n                raise ValueError(f\"Unknown block {node.block_id} for node #{node.id}\")\n\n            # Find any fields of type CredentialsMetaInput\n            model_fields = cast(type[BaseModel], block.input_schema).model_fields\n            if CREDENTIALS_FIELD_NAME not in model_fields:\n                continue\n\n            field = model_fields[CREDENTIALS_FIELD_NAME]\n\n            # The BlockSchema class enforces that a `credentials` field is always a\n            # `CredentialsMetaInput`, so we can safely assume this here.\n            credentials_meta_type = cast(CredentialsMetaInput, field.annotation)\n            credentials_meta = credentials_meta_type.model_validate(\n                node.input_default[CREDENTIALS_FIELD_NAME]\n            )\n            # Fetch the corresponding Credentials and perform sanity checks\n            credentials = self.credentials_store.get_creds_by_id(\n                user_id, credentials_meta.id\n            )\n            if not credentials:\n                raise ValueError(\n                    f\"Unknown credentials #{credentials_meta.id} \"\n                    f\"for node #{node.id}\"\n                )\n            if (\n                credentials.provider != credentials_meta.provider\n                or credentials.type != credentials_meta.type\n            ):\n                logger.warning(\n                    f\"Invalid credentials #{credentials.id} for node #{node.id}: \"\n                    \"type/provider mismatch: \"\n                    f\"{credentials_meta.type}<>{credentials.type};\"\n                    f\"{credentials_meta.provider}<>{credentials.provider}\"\n                )\n                raise ValueError(\n                    f\"Invalid credentials #{credentials.id} for node #{node.id}: \"\n                    \"type/provider mismatch\"\n                )\n\n\n# ------- UTILITIES -------",
                      "children": [
                        {
                          "value": "b",
                          "children": []
                        },
                        {
                          "value": "= get_bloc",
                          "children": [
                            {
                              "value": "= ge",
                              "children": []
                            },
                            {
                              "value": "_bloc",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "d)\n            if not block:\n                raise ValueError(f\"Unknown block {node.block_id} for node #{node.id}\")\n\n            # Find any fields of type CredentialsMetaInput\n            model_fields = cast(type[BaseModel], block.input_schema).model_fields\n            if CREDENTIALS_FIELD_NAME not in model_fields:\n                continue\n\n            field = model_fields[CREDENTIALS_FIELD_NAME]\n\n            # The BlockSchema class enforces that a `credentials` field is always a\n            # `CredentialsMetaInput`, so we can safely assume this here.\n            credentials_meta_type = cast(CredentialsMetaInput, field.annotation)\n            credentials_meta = credentials_meta_type.model_validate(\n                node.input_default[CREDENTIALS_FIELD_NAME]\n            )\n            # Fetch the corresponding Credentials and perform sanity checks\n            credentials = self.credentials_store.get_creds_by_id(\n                user_id, credentials_meta.id\n            )\n            if not credentials:\n                raise ValueError(\n                    f\"Unknown credentials #{credentials_meta.id} \"\n                    f\"for node #{node.id}\"\n                )\n            if (\n                credentials.provider != credentials_meta.provider\n                or credentials.type != credentials_meta.type\n            ):\n                logger.warning(\n                    f\"Invalid credentials #{credentials.id} for node #{node.id}: \"\n                    \"type/provider mismatch: \"\n                    f\"{credentials_meta.type}<>{credentials.type};\"\n                    f\"{credentials_meta.provider}<>{credentials.provider}\"\n                )\n                raise ValueError(\n                    f\"Invalid credentials #{credentials.id} for node #{node.id}: \"\n                    \"type/provider mismatch\"\n                )\n\n\n# ------- UTILITIES -------",
                          "children": [
                            {
                              "value": "d)\n            if not block:",
                              "children": [
                                {
                                  "value": "d)\n            if not block:",
                                  "children": [
                                    {
                                      "value": "d)",
                                      "children": []
                                    },
                                    {
                                      "value": "if not block:",
                                      "children": [
                                        {
                                          "value": "if",
                                          "children": []
                                        },
                                        {
                                          "value": "not block:",
                                          "children": [
                                            {
                                              "value": "not block:",
                                              "children": [
                                                {
                                                  "value": "not",
                                                  "children": []
                                                },
                                                {
                                                  "value": "lock:",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "raise ValueError(f\"Unknown block {node.block_id} for node #{node.id}\")\n\n            # Find any field",
                              "children": [
                                {
                                  "value": "se ValueE",
                                  "children": [
                                    {
                                      "value": "alueE",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "ck {node.block_id} for node #{node.id}\")\n\n            # Find any field",
                                  "children": [
                                    {
                                      "value": "ck {node.block_id} for node #{node.id}\")\n\n            # Find any field",
                                      "children": [
                                        {
                                          "value": "de.block_id} for node #{node.id}\")\n\n            # Find any field",
                                          "children": [
                                            {
                                              "value": "de.block_i",
                                              "children": []
                                            },
                                            {
                                              "value": "d} for node #{node.id}\")\n\n            # Find any field",
                                              "children": [
                                                {
                                                  "value": "} for node #{node.id}\")\n\n            # Find any fiel",
                                                  "children": [
                                                    {
                                                      "value": "}",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "for node #{nod",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "e.id}\")",
                                                      "children": [
                                                        {
                                                          "value": ".id}\")",
                                                          "children": [
                                                            {
                                                              "value": ".id}",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": ")",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "# Fin",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "d any fie",
                                                      "children": [
                                                        {
                                                          "value": "any fi",
                                                          "children": [
                                                            {
                                                              "value": "any",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "fi",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "l",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "entialsMetaInput\n            model_fields = ca",
                              "children": []
                            },
                            {
                              "value": "odel], block.input_schema).model_fields\n            if CREDENTIALS_FI",
                              "children": [
                                {
                                  "value": "odel], block.input_schema).model_fields\n            if CREDENTIALS_FI",
                                  "children": [
                                    {
                                      "value": "odel], block",
                                      "children": []
                                    },
                                    {
                                      "value": "put_schema).model_fields\n            if CREDENTIALS_FI",
                                      "children": [
                                        {
                                          "value": "put_schema).model_fields\n            if C",
                                          "children": [
                                            {
                                              "value": "put_",
                                              "children": []
                                            },
                                            {
                                              "value": "schema).model_fields\n            if C",
                                              "children": [
                                                {
                                                  "value": "chema).model_fi",
                                                  "children": [
                                                    {
                                                      "value": "chem",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": ").model_f",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "ds\n            if",
                                                  "children": [
                                                    {
                                                      "value": "ds",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "if",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "EDENTIALS_FI",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "in model_fields:\n                continue\n\n            field = model_fi",
                              "children": [
                                {
                                  "value": "model_fields:\n                continue",
                                  "children": [
                                    {
                                      "value": "model_fields:",
                                      "children": []
                                    },
                                    {
                                      "value": "continue",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "model_fi",
                                  "children": [
                                    {
                                      "value": "model_fi",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "LS_FIELD_NAME]\n\n            # The BlockSchem",
                              "children": [
                                {
                                  "value": "LS_FIELD_NAME]\n\n            # The BlockSchem",
                                  "children": [
                                    {
                                      "value": "LS_FI",
                                      "children": []
                                    },
                                    {
                                      "value": "_NAME]\n\n            # The BlockSchem",
                                      "children": [
                                        {
                                          "value": "_NAME]",
                                          "children": []
                                        },
                                        {
                                          "value": "# The BlockSche",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "es that a `credentials` field is always a\n            # `CredentialsMet",
                              "children": []
                            },
                            {
                              "value": "e can safely assume this here.\n            credentials_meta_",
                              "children": []
                            },
                            {
                              "value": "redentialsMetaInput, field.annotation)\n            credentials_meta",
                              "children": [
                                {
                                  "value": "redentialsMetaInput, field.annotation)\n            credentials_meta",
                                  "children": [
                                    {
                                      "value": "redentialsMetaInput,",
                                      "children": []
                                    },
                                    {
                                      "value": "ld.annotation)\n            credentials_meta",
                                      "children": [
                                        {
                                          "value": "ld.a",
                                          "children": []
                                        },
                                        {
                                          "value": "nnotation)\n            credentials_meta",
                                          "children": [
                                            {
                                              "value": "notation)",
                                              "children": []
                                            },
                                            {
                                              "value": "credentials_meta",
                                              "children": [
                                                {
                                                  "value": "crede",
                                                  "children": []
                                                },
                                                {
                                                  "value": "tials_meta",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "_meta_type.model_validate(\n                node.input_default[CREDENTIALS_FIELD_NAME]\n            )\n            # Fetch the corre",
                              "children": [
                                {
                                  "value": "_meta_type.model_validate(\n                node.input_default[CREDENTIALS_FIELD_NAME]\n            )\n            # Fetch the corre",
                                  "children": [
                                    {
                                      "value": "_meta_type.model",
                                      "children": []
                                    },
                                    {
                                      "value": "lidate(\n                node.input_default[CREDENTIALS_FIELD_NAME]\n            )\n            # Fetch the corre",
                                      "children": [
                                        {
                                          "value": "lidate(\n                node.input_d",
                                          "children": [
                                            {
                                              "value": "lidate(",
                                              "children": []
                                            },
                                            {
                                              "value": "node.input_d",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "efault[CREDENTIALS_FIELD_NAME]\n            )\n            # Fetch the corre",
                                          "children": [
                                            {
                                              "value": "_FIELD_NAME]\n            )\n            # F",
                                              "children": [
                                                {
                                                  "value": "_FIELD_NAME]",
                                                  "children": [
                                                    {
                                                      "value": "_FIE",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "D_NAME]",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": ")\n            #",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "entials and perform sanity checks\n            credentials = sel",
                              "children": []
                            },
                            {
                              "value": "_store.get_creds_by_id(\n                user_id, credentials_meta.id\n            )\n            if not credential",
                              "children": [
                                {
                                  "value": "_store.get_creds_by_id(\n                user_id, credentials_meta.id\n            )\n            if not credential",
                                  "children": [
                                    {
                                      "value": "_store.get_",
                                      "children": []
                                    },
                                    {
                                      "value": "ds_by_id(\n                user_id, credentials_meta.id\n            )\n            if not credential",
                                      "children": [
                                        {
                                          "value": "ds_by_id(\n                user_id, cre",
                                          "children": [
                                            {
                                              "value": "ds_by_id(",
                                              "children": [
                                                {
                                                  "value": "ds_b",
                                                  "children": []
                                                },
                                                {
                                                  "value": "_id(",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "user_id, cre",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "dentials_meta.id\n            )\n            if not credential",
                                          "children": [
                                            {
                                              "value": "",
                                              "children": []
                                            },
                                            {
                                              "value": ")\n            if",
                                              "children": [
                                                {
                                                  "value": ")",
                                                  "children": []
                                                },
                                                {
                                                  "value": "f",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "raise ValueError(\n                    f\"Unknown credentials #{credentials_meta.id} \"\n                    f\"for node #{node.id}\"\n                )\n            if (",
                              "children": [
                                {
                                  "value": "raise ValueE",
                                  "children": [
                                    {
                                      "value": "aise ValueE",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "f\"Unknown credentials #{credentials_meta.id} \"\n                    f\"for node #{node.id}\"\n                )\n            if (",
                                  "children": [
                                    {
                                      "value": "f\"Unknown credentials #{credentials_meta.id} \"\n                    f\"for node #{node.id}\"\n                )\n            if (",
                                      "children": [
                                        {
                                          "value": "f\"Unknown credentials #{credentials_meta.id} \"\n                    f\"for node #{node.id}\"\n                )\n            if (",
                                          "children": [
                                            {
                                              "value": "f\"Unknow",
                                              "children": []
                                            },
                                            {
                                              "value": "n credentials #{credentials_meta.id} \"\n                    f\"for node #{node.id}\"\n                )\n            if (",
                                              "children": [
                                                {
                                                  "value": "tials_meta.id} \"\n                    f\"for node #{node.id}\"\n                )",
                                                  "children": [
                                                    {
                                                      "value": "tials_meta.id} \"\n                    f\"for nod",
                                                      "children": [
                                                        {
                                                          "value": "ti",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "als_meta.id} \"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "f\"for n",
                                                          "children": [
                                                            {
                                                              "value": "f\"for",
                                                              "children": [
                                                                {
                                                                  "value": "f\"f",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "r",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "o",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "d",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": ")",
                                                      "children": [
                                                        {
                                                          "value": "",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": ")",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "",
                                                          "children": [
                                                            {
                                                              "value": "",
                                                              "children": [
                                                                {
                                                                  "value": "",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "ls.provider != credentials_meta.provider\n                or credentials.type != credentials_meta.type\n            ):\n                logger.warning(\n                    f\"Invalid credentials #{credentials.id} for node #{node.id}: \"\n                    \"type/provider mismatch: \"\n                    f\"{credentials_meta.type}<>{credentials.type};\"\n                    f\"{credentials_meta.provider}<>{credentials.provider}\"\n                )\n                raise ValueError(\n                    f\"Invalid credentials #{credentials.id} for node #{node.id}: \"\n                    \"type/provider mismatch\"\n                )\n\n\n# ------- UTILITIES -------",
                              "children": [
                                {
                                  "value": "provider != credentials_meta.provider\n                or credentials.type != credentials_meta.type\n            ):\n                logger.warni",
                                  "children": [
                                    {
                                      "value": "tials_meta.provider\n                or credentials.type != credentials_meta.type\n            ):",
                                      "children": [
                                        {
                                          "value": "tials_meta.provider\n                or credential",
                                          "children": [
                                            {
                                              "value": "tials_meta.provider",
                                              "children": [
                                                {
                                                  "value": "tials_meta.",
                                                  "children": []
                                                },
                                                {
                                                  "value": "rovider",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "or credential",
                                              "children": [
                                                {
                                                  "value": "or c",
                                                  "children": []
                                                },
                                                {
                                                  "value": "edential",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "s_meta.type\n            ):",
                                          "children": [
                                            {
                                              "value": "s_meta.type",
                                              "children": [
                                                {
                                                  "value": "s_meta.type",
                                                  "children": []
                                                },
                                                {
                                                  "value": "",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "):",
                                              "children": [
                                                {
                                                  "value": "):",
                                                  "children": []
                                                },
                                                {
                                                  "value": "",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "f\"Invalid credentials #{credentials.id} for node #{node.id}: \"\n                    \"type/provider mismatch: \"\n                    f\"{credentials_meta.type}<>{credentials.type};\"\n                    f\"{credentials_meta.provider}<>{credentials.provider}\"\n                )\n                raise ValueError(\n                    f\"Invalid credentials #{credentials.id} for node #{node.id}: \"\n                    \"type/provider mismatch\"\n                )\n\n\n# ------- UTILITIES -------",
                                  "children": [
                                    {
                                      "value": "f\"Invalid credentials #{credentials.id} for node #{node.id}: \"\n                    \"type/provider mismatch: \"\n                    f\"{credentials_meta.type}<>{credentials.type};\"\n                    f\"{credentials_meta.provider}<>{credentials.provider}\"\n                )\n                raise ValueEr",
                                      "children": [
                                        {
                                          "value": "f\"Invalid credentials #{credentials.id} for node #{node.id}: \"\n                    \"type/provider mismatch: \"\n                    f\"{credentials_meta.type}<>{credentials.type};\"\n                    f\"{credentials_meta.provider}<>{credentials.provider}\"\n                )\n                raise ValueEr",
                                          "children": [
                                            {
                                              "value": "f\"Invali",
                                              "children": [
                                                {
                                                  "value": "",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"Invali",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "d credentials #{credentials.id} for node #{node.id}: \"\n                    \"type/provider mismatch: \"\n                    f\"{credentials_meta.type}<>{credentials.type};\"\n                    f\"{credentials_meta.provider}<>{credentials.provider}\"\n                )\n                raise ValueEr",
                                              "children": [
                                                {
                                                  "value": "tials.id} for node #{node.id}: \"\n                    \"type/provider mismatch: \"\n                    f\"{credentials_meta.type}<>{credentials.type};\"\n                    f\"{credentials_meta.provider}<>{credentials.provider}\"\n                )",
                                                  "children": [
                                                    {
                                                      "value": "tials.id} for node #{node.id}: \"\n                    \"type/pro",
                                                      "children": [
                                                        {
                                                          "value": "ti",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "als.id} for node #{no",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "de.id}: \"",
                                                          "children": [
                                                            {
                                                              "value": "e.id}: \"",
                                                              "children": [
                                                                {
                                                                  "value": "e.id}: \"",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"type/",
                                                          "children": [
                                                            {
                                                              "value": "\"type",
                                                              "children": [
                                                                {
                                                                  "value": "\"t",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "pe",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "pr",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "o",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "f\"{creden",
                                                      "children": [
                                                        {
                                                          "value": "",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "f\"{crede",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "n",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "edentials.type};\"\n                    f\"{creden",
                                                      "children": [
                                                        {
                                                          "value": "ed",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "entials.type};\"",
                                                          "children": [
                                                            {
                                                              "value": "ntials.type};\"",
                                                              "children": [
                                                                {
                                                                  "value": "ntials.type};\"",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "f\"{cred",
                                                          "children": [
                                                            {
                                                              "value": "f\"{cre",
                                                              "children": [
                                                                {
                                                                  "value": "f",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "{cre",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "e",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "n",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": ">{credentials.provider}\"\n                )",
                                                      "children": [
                                                        {
                                                          "value": ">{",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "credentials.provider}\"",
                                                          "children": [
                                                            {
                                                              "value": "redentials.provider}\"",
                                                              "children": [
                                                                {
                                                                  "value": "redentials.provi",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "er}\"",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": ")",
                                                          "children": [
                                                            {
                                                              "value": ")",
                                                              "children": [
                                                                {
                                                                  "value": ")",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "f\"Invalid credentials #{credentials.id} for node #{node.id}: \"\n                    \"type/provider mismatch\"\n                )\n\n\n# ------- UTILITIES -------",
                                      "children": [
                                        {
                                          "value": "f\"Invalid credentials #{credentials.id} for node #{node.id}: \"\n                    \"type/provider mismatch\"\n                )\n\n\n# ------- UTILITIES -------",
                                          "children": [
                                            {
                                              "value": "f\"Invali",
                                              "children": []
                                            },
                                            {
                                              "value": "d credentials #{credentials.id} for node #{node.id}: \"\n                    \"type/provider mismatch\"\n                )\n\n\n# ------- UTILITIES -------",
                                              "children": [
                                                {
                                                  "value": "tials.id} for node #{node.id}: \"\n                    \"type/provider mismatch\"\n                )\n\n\n# -------",
                                                  "children": [
                                                    {
                                                      "value": "tials.id} for node #{node.id}: \"\n                    \"type/pro",
                                                      "children": [
                                                        {
                                                          "value": "ti",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "als.id} for node #{no",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "de.id}: \"",
                                                          "children": [
                                                            {
                                                              "value": "e.id}: \"",
                                                              "children": [
                                                                {
                                                                  "value": "e.id}: \"",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"type/",
                                                          "children": [
                                                            {
                                                              "value": "\"type",
                                                              "children": [
                                                                {
                                                                  "value": "\"t",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "pe",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "pr",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "o",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": ")\n\n\n# -------",
                                                      "children": [
                                                        {
                                                          "value": "",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": ")\n\n\n# ------",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "-",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "@thread_cached\ndef get_db_c",
      "children": []
    },
    {
      "value": "nt() -> \"DatabaseManager\":\n    from backend.executor import DatabaseManager\n\n    return get_service_client(DatabaseManager)\n\n\n@contextmanager\ndef synchro",
      "children": [
        {
          "value": "nt() -> \"Datab",
          "children": [
            {
              "value": "t() -> \"Datab",
              "children": []
            }
          ]
        },
        {
          "value": "seManager\":\n    from backend.executor import DatabaseManager\n\n    return get_service_client(DatabaseManager)\n\n\n@contextmanager\ndef synchro",
          "children": [
            {
              "value": "nager\":\n    f",
              "children": []
            },
            {
              "value": "ro",
              "children": []
            },
            {
              "value": "ckend.executor im",
              "children": [
                {
                  "value": "ckend.executor im",
                  "children": [
                    {
                      "value": "c",
                      "children": []
                    },
                    {
                      "value": "kend.executor i",
                      "children": []
                    },
                    {
                      "value": "m",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "atabaseManager\n\n    return get_service_client(DatabaseManager)\n\n\n@contextmanager\ndef synchro",
              "children": [
                {
                  "value": "atabaseManager\n\n    return get_service_clien",
                  "children": [
                    {
                      "value": "seManager\n\n    r",
                      "children": [
                        {
                          "value": "seManag",
                          "children": []
                        },
                        {
                          "value": "r\n\n    r",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "t_service_clien",
                      "children": [
                        {
                          "value": "t_service_clien",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "baseManager)\n\n\n@contextmanager\ndef synchro",
                  "children": [
                    {
                      "value": "ager)\n\n\n@contextmanager\ndef synchro",
                      "children": [
                        {
                          "value": "ager)\n\n\n@contextma",
                          "children": []
                        },
                        {
                          "value": "nager\ndef synchro",
                          "children": [
                            {
                              "value": "ager\ndef synchr",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "ed(key: str, timeout: int = 60):\n    lock: RedisLock = redis.get_redis().lock(f\"lock:{key}\", timeout=timeout)\n    try:\n        lock.acquire()\n        yield\n    finally:\n        if lock.locked():\n            lock.release()\n\n\ndef llprint(message: str):",
      "children": [
        {
          "value": "ed(key: str, ti",
          "children": [
            {
              "value": "d(key: str, ti",
              "children": []
            }
          ]
        },
        {
          "value": "eout: int = 60):\n    lock: RedisLock = redis.get_redis().lock(f\"lock:{key}\", timeout=timeout)\n    try:\n        lock.acquire()\n        yield\n    finally:\n        if lock.locked():\n            lock.release()\n\n\ndef llprint(message: str):",
          "children": [
            {
              "value": ": int = 60):",
              "children": []
            },
            {
              "value": "lock: RedisLock = redis.",
              "children": [
                {
                  "value": "lock",
                  "children": [
                    {
                      "value": "",
                      "children": []
                    },
                    {
                      "value": "ock",
                      "children": [
                        {
                          "value": "ock",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "RedisLock = redis",
                  "children": [
                    {
                      "value": "RedisLo",
                      "children": []
                    },
                    {
                      "value": "=",
                      "children": [
                        {
                          "value": "=",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "is",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "dis().lock(f\"lock:{key}\", timeout=timeout)\n    try:\n        lock.acquire()\n        yield\n    finally:\n        if lock.locked():\n            lock.release()\n\n\ndef llprint(message: str):",
              "children": [
                {
                  "value": "dis().lock(f\"lock:{key}\", timeout=timeout)\n    try:\n        lock.acquire",
                  "children": [
                    {
                      "value": "dis().lock(f\"lock:{key}\", timeout=timeout)\n    try:\n        lock.acquire",
                      "children": [
                        {
                          "value": "dis(",
                          "children": []
                        },
                        {
                          "value": "lock(f\"lo",
                          "children": [
                            {
                              "value": "lock(f\"lo",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "{key}\", timeout=timeout)\n    try:\n        lock.acquire",
                          "children": [
                            {
                              "value": "{key}\", timeout=timeou",
                              "children": [
                                {
                                  "value": "{key}\", timeout=t",
                                  "children": [
                                    {
                                      "value": "{key}\", timeout",
                                      "children": [
                                        {
                                          "value": "{key}",
                                          "children": []
                                        },
                                        {
                                          "value": ", timeout",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "=t",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "meou",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "t)\n    try:\n        lock.acquire",
                              "children": [
                                {
                                  "value": ")\n    try:",
                                  "children": [
                                    {
                                      "value": ")",
                                      "children": []
                                    },
                                    {
                                      "value": "t",
                                      "children": []
                                    },
                                    {
                                      "value": "ry:",
                                      "children": [
                                        {
                                          "value": "y:",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "lock.acquir",
                                  "children": [
                                    {
                                      "value": "loc",
                                      "children": []
                                    },
                                    {
                                      "value": ".acquir",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "yield\n    finally:\n        if lock.locked():\n            lock.release()\n\n\ndef llprint(message: str):",
                  "children": [
                    {
                      "value": "finally:\n        if lock.",
                      "children": [
                        {
                          "value": "finally:",
                          "children": [
                            {
                              "value": "finally:",
                              "children": [
                                {
                                  "value": "finally:",
                                  "children": [
                                    {
                                      "value": "f",
                                      "children": []
                                    },
                                    {
                                      "value": "nally:",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "lock.",
                          "children": [
                            {
                              "value": "lock.",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "d():\n            lock.release()\n\n\ndef llprint(message: str):",
                      "children": [
                        {
                          "value": "lock.release()\n\n\ndef llprint(message: str):",
                          "children": [
                            {
                              "value": "lock.release()\n\n\ndef llprint(message: str):",
                              "children": [
                                {
                                  "value": "k.release()",
                                  "children": [
                                    {
                                      "value": "k.release()",
                                      "children": [
                                        {
                                          "value": "k.re",
                                          "children": []
                                        },
                                        {
                                          "value": "ease()",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "essage: str):",
                                  "children": [
                                    {
                                      "value": "essage: str):",
                                      "children": [
                                        {
                                          "value": "essage: str):",
                                          "children": [
                                            {
                                              "value": "essage: str)",
                                              "children": [
                                                {
                                                  "value": "essa",
                                                  "children": []
                                                },
                                                {
                                                  "value": "e: str)",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": ":",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "\"\"\"\n    Low-level print/log helper function for use in signal handlers.\n    Regular log/print statements are not allowed in signal handlers.\n    \"\"\"\n    if logger.getEffectiveLevel() == logging.DEBUG:\n        os.write(sys.stdout.fileno(), (message + \"\\n\").encode())",
      "children": [
        {
          "value": "Lo",
          "children": []
        },
        {
          "value": "w-level print/",
          "children": [
            {
              "value": "-level print",
              "children": [
                {
                  "value": "-level",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "lper function for use in signal handlers.\n    Regular log/print statements are not allowed in signal handlers.\n    \"\"\"\n    if logger.getEffectiveLevel() == logging.DEBUG:\n        os.write(sys.stdout.fileno(), (message + \"\\n\").encode())",
          "children": [
            {
              "value": "lper function for use in signal handlers.\n    Regular log/print statements are not allowed in signal handlers.\n    \"\"\"\n    if logger.getEffectiveLev",
              "children": [
                {
                  "value": "lper function for use in signal handlers.\n    Regular log/print statements are not allowed in signal handlers.\n    \"\"\"\n    if logger.getEffectiveLev",
                  "children": [
                    {
                      "value": "lpe",
                      "children": []
                    },
                    {
                      "value": "r function for use in signal handlers.\n    Regular log/print statements are not allowed in signal handlers.\n    \"\"\"\n    if logger.getEffective",
                      "children": []
                    },
                    {
                      "value": "Lev",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "== logging.DEBUG:\n        os.write(sys.stdout.fileno(), (message + \"\\n\").encode())",
              "children": [
                {
                  "value": "logging.DEBUG:\n        os.write(sys.stdout.",
                  "children": [
                    {
                      "value": "logging.DEBUG:\n        os.",
                      "children": [
                        {
                          "value": "logging.DEBUG:\n        o",
                          "children": [
                            {
                              "value": "loggin",
                              "children": []
                            },
                            {
                              "value": ".DEBUG:\n        o",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "s.",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "e(sys.stdout.",
                      "children": [
                        {
                          "value": "e(sys.s",
                          "children": []
                        },
                        {
                          "value": "dout.",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "(message + \"\\n\").encode())",
                  "children": [
                    {
                      "value": "(message + \"\\n\").encode())",
                      "children": [
                        {
                          "value": "(message + \"\\n\").encode())",
                          "children": [
                            {
                              "value": "(message",
                              "children": [
                                {
                                  "value": "(m",
                                  "children": []
                                },
                                {
                                  "value": "ssage",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "+ \"\\n\").encode())",
                              "children": [
                                {
                                  "value": "+ \"\\n\").encode())",
                                  "children": [
                                    {
                                      "value": "+ \"\\n\").encode())",
                                      "children": [
                                        {
                                          "value": "+ \"\\n\").en",
                                          "children": [
                                            {
                                              "value": "+ \"",
                                              "children": []
                                            },
                                            {
                                              "value": "n\").en",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "ode())",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "",
                                  "children": [
                                    {
                                      "value": "",
                                      "children": [
                                        {
                                          "value": "",
                                          "children": [
                                            {
                                              "value": "",
                                              "children": [
                                                {
                                                  "value": "",
                                                  "children": []
                                                },
                                                {
                                                  "value": "",
                                                  "children": [
                                                    {
                                                      "value": "",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "",
                                                      "children": [
                                                        {
                                                          "value": "",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}