{
  "value": "import asyncio\nimport logging\nimport os\nimport threading\nfrom functools import wraps\nfrom uuid import uuid4\n\nfrom tenacity import retry, stop_after_attempt, wait_exponential\n\nfrom backend.util.process import get_service_name\n\nlogger = logging.getLogger(__name__)\n\n\ndef _log_prefix(resource_name: str, conn_id: str):\n    \"\"\"\n    Returns a prefix string for logging purposes.\n    This needs to be called on the fly to get the current process ID & service name,\n    not the parent process ID & service name.\n    \"\"\"\n    return f\"[PID-{os.getpid()}|THREAD-{threading.get_native_id()}|{get_service_name()}|{resource_name}-{conn_id}]\"\n\n\ndef conn_retry(\n    resource_name: str,\n    action_name: str,\n    max_retry: int = 5,\n    multiplier: int = 1,\n    min_wait: float = 1,\n    max_wait: float = 30,\n):\n    conn_id = str(uuid4())\n\n    def on_retry(retry_state):\n        prefix = _log_prefix(resource_name, conn_id)\n        exception = retry_state.outcome.exception()\n        logger.error(f\"{prefix} {action_name} failed: {exception}. Retrying now...\")\n\n    def decorator(func):\n        is_coroutine = asyncio.iscoroutinefunction(func)\n        retry_decorator = retry(\n            stop=stop_after_attempt(max_retry + 1),\n            wait=wait_exponential(multiplier=multiplier, min=min_wait, max=max_wait),\n            before_sleep=on_retry,\n            reraise=True,\n        )\n        wrapped_func = retry_decorator(func)\n\n        @wraps(func)\n        def sync_wrapper(*args, **kwargs):\n            prefix = _log_prefix(resource_name, conn_id)\n            logger.info(f\"{prefix} {action_name} started...\")\n            try:\n                result = wrapped_func(*args, **kwargs)\n                logger.info(f\"{prefix} {action_name} completed successfully.\")\n                return result\n            except Exception as e:\n                logger.error(f\"{prefix} {action_name} failed after retries: {e}\")\n                raise\n\n        @wraps(func)\n        async def async_wrapper(*args, **kwargs):\n            prefix = _log_prefix(resource_name, conn_id)\n            logger.info(f\"{prefix} {action_name} started...\")\n            try:\n                result = await wrapped_func(*args, **kwargs)\n                logger.info(f\"{prefix} {action_name} completed successfully.\")\n                return result\n            except Exception as e:\n                logger.error(f\"{prefix} {action_name} failed after retries: {e}\")\n                raise\n\n        return async_wrapper if is_coroutine else sync_wrapper\n\n    return decorator",
  "children": [
    {
      "value": "import asyncio",
      "children": [
        {
          "value": "asyncio",
          "children": [
            {
              "value": "asyncio",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import logging",
      "children": [
        {
          "value": "logging",
          "children": [
            {
              "value": "logging",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import os",
      "children": [
        {
          "value": "os",
          "children": [
            {
              "value": "os",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import threading",
      "children": [
        {
          "value": "threading",
          "children": [
            {
              "value": "threading",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from functools import wraps",
      "children": [
        {
          "value": "functools",
          "children": [
            {
              "value": "functools",
              "children": []
            }
          ]
        },
        {
          "value": "wraps",
          "children": [
            {
              "value": "wraps",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from uuid import uuid4",
      "children": [
        {
          "value": "uuid",
          "children": [
            {
              "value": "uuid",
              "children": []
            }
          ]
        },
        {
          "value": "uuid4",
          "children": [
            {
              "value": "uuid4",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from tenacity import retry, stop_after_attempt, wait_exponential",
      "children": [
        {
          "value": "tenacity",
          "children": [
            {
              "value": "tenacity",
              "children": []
            }
          ]
        },
        {
          "value": "retry",
          "children": [
            {
              "value": "retry",
              "children": []
            }
          ]
        },
        {
          "value": "stop_after_attempt",
          "children": [
            {
              "value": "stop_after_attempt",
              "children": []
            }
          ]
        },
        {
          "value": "wait_exponential",
          "children": [
            {
              "value": "wait_exponential",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.util.process import get_service_name",
      "children": [
        {
          "value": "backend.util.process",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "util",
              "children": []
            },
            {
              "value": "process",
              "children": []
            }
          ]
        },
        {
          "value": "get_service_name",
          "children": [
            {
              "value": "get_service_name",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "logger = logging.getLogger(__name__)",
      "children": [
        {
          "value": "logger = logging.getLogger(__name__)",
          "children": [
            {
              "value": "logger",
              "children": []
            },
            {
              "value": "logging.getLogger(__name__)",
              "children": [
                {
                  "value": "logging.getLogger",
                  "children": [
                    {
                      "value": "logging",
                      "children": []
                    },
                    {
                      "value": "getLogger",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(__name__)",
                  "children": [
                    {
                      "value": "__name__",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def _log_prefix(resource_name: str, conn_id: str):\n    \"\"\"\n    Returns a prefix string for logging purposes.\n    This needs to be called on the fly to get the current process ID & service name,\n    not the parent process ID & service name.\n    \"\"\"\n    return f\"[PID-{os.getpid()}|THREAD-{threading.get_native_id()}|{get_service_name()}|{resource_name}-{conn_id}]\"",
      "children": [
        {
          "value": "_log_prefix",
          "children": []
        },
        {
          "value": "(resource_name: str, conn_id: str)",
          "children": [
            {
              "value": "resource_name: str",
              "children": [
                {
                  "value": "resource_name",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "conn_id: str",
              "children": [
                {
                  "value": "conn_id",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "\"\"\"\n    Returns a prefix string for logging purposes.\n    This needs to be called on the fly to get the current process ID & service name,\n    not the parent process ID & service name.\n    \"\"\"\n    return f\"[PID-{os.getpid()}|THREAD-{threading.get_native_id()}|{get_service_name()}|{resource_name}-{conn_id}]\"",
          "children": [
            {
              "value": "\"\"\"\n    Returns a prefix string for logging purposes.\n    This needs to be called on the fly to get the current process ID & service name,\n    not the parent process ID & service name.\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    Returns a prefix string for logging purposes.\n    This needs to be called on the fly to get the current process ID & service name,\n    not the parent process ID & service name.\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Returns a prefix string for logging purposes.\n    This needs to be called on the fly to get the current process ID & service name,\n    not the parent process ID & service name.",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "return f\"[PID-{os.getpid()}|THREAD-{threading.get_native_id()}|{get_service_name()}|{resource_name}-{conn_id}]\"",
              "children": [
                {
                  "value": "f\"[PID-{os.getpid()}|THREAD-{threading.get_native_id()}|{get_service_name()}|{resource_name}-{conn_id}]\"",
                  "children": [
                    {
                      "value": "f\"",
                      "children": []
                    },
                    {
                      "value": "[PID-",
                      "children": []
                    },
                    {
                      "value": "{os.getpid()}",
                      "children": [
                        {
                          "value": "os.getpid()",
                          "children": [
                            {
                              "value": "os.getpid",
                              "children": [
                                {
                                  "value": "os",
                                  "children": []
                                },
                                {
                                  "value": "getpid",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "()",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "|THREAD-",
                      "children": []
                    },
                    {
                      "value": "{threading.get_native_id()}",
                      "children": [
                        {
                          "value": "threading.get_native_id()",
                          "children": [
                            {
                              "value": "threading.get_native_id",
                              "children": [
                                {
                                  "value": "threading",
                                  "children": []
                                },
                                {
                                  "value": "get_native_id",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "()",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "|",
                      "children": []
                    },
                    {
                      "value": "{get_service_name()}",
                      "children": [
                        {
                          "value": "get_service_name()",
                          "children": [
                            {
                              "value": "get_service_name",
                              "children": []
                            },
                            {
                              "value": "()",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "|",
                      "children": []
                    },
                    {
                      "value": "{resource_name}",
                      "children": [
                        {
                          "value": "resource_name",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "-",
                      "children": []
                    },
                    {
                      "value": "{conn_id}",
                      "children": [
                        {
                          "value": "conn_id",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "]",
                      "children": []
                    },
                    {
                      "value": "\"",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def conn_retry(\n    resource_name: str,\n    action_name: str,\n    max_retry: int = 5,\n    multiplier: int = 1,\n    min_wait: float = 1,\n    max_wait: float = 30,\n):\n    conn_id = str(uuid4())\n\n    def on_retry(retry_state):\n        prefix = _log_prefix(resource_name, conn_id)\n        exception = retry_state.outcome.exception()\n        logger.error(f\"{prefix} {action_name} failed: {exception}. Retrying now...\")\n\n    def decorator(func):\n        is_coroutine = asyncio.iscoroutinefunction(func)\n        retry_decorator = retry(\n            stop=stop_after_attempt(max_retry + 1),\n            wait=wait_exponential(multiplier=multiplier, min=min_wait, max=max_wait),\n            before_sleep=on_retry,\n            reraise=True,\n        )\n        wrapped_func = retry_decorator(func)\n\n        @wraps(func)\n        def sync_wrapper(*args, **kwargs):\n            prefix = _log_prefix(resource_name, conn_id)\n            logger.info(f\"{prefix} {action_name} started...\")\n            try:\n                result = wrapped_func(*args, **kwargs)\n                logger.info(f\"{prefix} {action_name} completed successfully.\")\n                return result\n            except Exception as e:\n                logger.error(f\"{prefix} {action_name} failed after retries: {e}\")\n                raise\n\n        @wraps(func)\n        async def async_wrapper(*args, **kwargs):\n            prefix = _log_prefix(resource_name, conn_id)\n            logger.info(f\"{prefix} {action_name} started...\")\n            try:\n                result = await wrapped_func(*args, **kwargs)\n                logger.info(f\"{prefix} {action_name} completed successfully.\")\n                return result\n            except Exception as e:\n                logger.error(f\"{prefix} {action_name} failed after retries: {e}\")\n                raise\n\n        return async_wrapper if is_coroutine else sync_wrapper\n\n    return decorator",
      "children": [
        {
          "value": "conn_retry",
          "children": []
        },
        {
          "value": "(\n    resource_name: str,\n    action_name: str,\n    max_retry: int = 5,\n    multiplier: int = 1,\n    min_wait: float = 1,\n    max_wait: float = 30,\n)",
          "children": [
            {
              "value": "resource_name: str",
              "children": [
                {
                  "value": "resource_name",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "action_name: str",
              "children": [
                {
                  "value": "action_name",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "max_retry: int = 5",
              "children": [
                {
                  "value": "max_retry",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "5",
                  "children": []
                }
              ]
            },
            {
              "value": "multiplier: int = 1",
              "children": [
                {
                  "value": "multiplier",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "1",
                  "children": []
                }
              ]
            },
            {
              "value": "min_wait: float = 1",
              "children": [
                {
                  "value": "min_wait",
                  "children": []
                },
                {
                  "value": "float",
                  "children": [
                    {
                      "value": "float",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "1",
                  "children": []
                }
              ]
            },
            {
              "value": "max_wait: float = 30",
              "children": [
                {
                  "value": "max_wait",
                  "children": []
                },
                {
                  "value": "float",
                  "children": [
                    {
                      "value": "float",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "30",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "conn_id = str(uuid4())\n\n    def on_retry(retry_state):\n        prefix = _log_prefix(resource_name, conn_id)\n        exception = retry_state.outcome.exception()\n        logger.error(f\"{prefix} {action_name} failed: {exception}. Retrying now...\")\n\n    def decorator(func):\n        is_coroutine = asyncio.iscoroutinefunction(func)\n        retry_decorator = retry(\n            stop=stop_after_attempt(max_retry + 1),\n            wait=wait_exponential(multiplier=multiplier, min=min_wait, max=max_wait),\n            before_sleep=on_retry,\n            reraise=True,\n        )\n        wrapped_func = retry_decorator(func)\n\n        @wraps(func)\n        def sync_wrapper(*args, **kwargs):\n            prefix = _log_prefix(resource_name, conn_id)\n            logger.info(f\"{prefix} {action_name} started...\")\n            try:\n                result = wrapped_func(*args, **kwargs)\n                logger.info(f\"{prefix} {action_name} completed successfully.\")\n                return result\n            except Exception as e:\n                logger.error(f\"{prefix} {action_name} failed after retries: {e}\")\n                raise\n\n        @wraps(func)\n        async def async_wrapper(*args, **kwargs):\n            prefix = _log_prefix(resource_name, conn_id)\n            logger.info(f\"{prefix} {action_name} started...\")\n            try:\n                result = await wrapped_func(*args, **kwargs)\n                logger.info(f\"{prefix} {action_name} completed successfully.\")\n                return result\n            except Exception as e:\n                logger.error(f\"{prefix} {action_name} failed after retries: {e}\")\n                raise\n\n        return async_wrapper if is_coroutine else sync_wrapper\n\n    return decorator",
          "children": [
            {
              "value": "conn_id = str(uuid4())",
              "children": [
                {
                  "value": "conn_id = str(uuid4())",
                  "children": [
                    {
                      "value": "conn_id",
                      "children": []
                    },
                    {
                      "value": "str(uuid4())",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        },
                        {
                          "value": "(uuid4())",
                          "children": [
                            {
                              "value": "uuid4()",
                              "children": [
                                {
                                  "value": "uuid4",
                                  "children": []
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def on_retry(retry_state):\n        prefix = _log_prefix(resource_name, conn_id)\n        exception = retry_state.outcome.exception()\n        logger.error(f\"{prefix} {action_name} failed: {exception}. Retrying now...\")",
              "children": [
                {
                  "value": "on_retry",
                  "children": []
                },
                {
                  "value": "(retry_state)",
                  "children": [
                    {
                      "value": "retry_state",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "prefix = _log_prefix(resource_name, conn_id)\n        exception = retry_state.outcome.exception()\n        logger.error(f\"{prefix} {action_name} failed: {exception}. Retrying now...\")",
                  "children": [
                    {
                      "value": "prefix = _log_prefix(resource_name, conn_id)",
                      "children": [
                        {
                          "value": "prefix = _log_prefix(resource_name, conn_id)",
                          "children": [
                            {
                              "value": "prefix",
                              "children": []
                            },
                            {
                              "value": "_log_prefix(resource_name, conn_id)",
                              "children": [
                                {
                                  "value": "_log_prefix",
                                  "children": []
                                },
                                {
                                  "value": "(resource_name, conn_id)",
                                  "children": [
                                    {
                                      "value": "resource_name",
                                      "children": []
                                    },
                                    {
                                      "value": "conn_id",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "exception = retry_state.outcome.exception()",
                      "children": [
                        {
                          "value": "exception = retry_state.outcome.exception()",
                          "children": [
                            {
                              "value": "exception",
                              "children": []
                            },
                            {
                              "value": "retry_state.outcome.exception()",
                              "children": [
                                {
                                  "value": "retry_state.outcome.exception",
                                  "children": [
                                    {
                                      "value": "retry_state.outcome",
                                      "children": [
                                        {
                                          "value": "retry_state",
                                          "children": []
                                        },
                                        {
                                          "value": "outcome",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "exception",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "logger.error(f\"{prefix} {action_name} failed: {exception}. Retrying now...\")",
                      "children": [
                        {
                          "value": "logger.error(f\"{prefix} {action_name} failed: {exception}. Retrying now...\")",
                          "children": [
                            {
                              "value": "logger.error",
                              "children": [
                                {
                                  "value": "logger",
                                  "children": []
                                },
                                {
                                  "value": "error",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(f\"{prefix} {action_name} failed: {exception}. Retrying now...\")",
                              "children": [
                                {
                                  "value": "f\"{prefix} {action_name} failed: {exception}. Retrying now...\"",
                                  "children": [
                                    {
                                      "value": "f\"",
                                      "children": []
                                    },
                                    {
                                      "value": "{prefix}",
                                      "children": [
                                        {
                                          "value": "prefix",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "",
                                      "children": []
                                    },
                                    {
                                      "value": "{action_name}",
                                      "children": [
                                        {
                                          "value": "action_name",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "failed:",
                                      "children": []
                                    },
                                    {
                                      "value": "{exception}",
                                      "children": [
                                        {
                                          "value": "exception",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": ". Retrying now...",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def decorator(func):\n        is_coroutine = asyncio.iscoroutinefunction(func)\n        retry_decorator = retry(\n            stop=stop_after_attempt(max_retry + 1),\n            wait=wait_exponential(multiplier=multiplier, min=min_wait, max=max_wait),\n            before_sleep=on_retry,\n            reraise=True,\n        )\n        wrapped_func = retry_decorator(func)\n\n        @wraps(func)\n        def sync_wrapper(*args, **kwargs):\n            prefix = _log_prefix(resource_name, conn_id)\n            logger.info(f\"{prefix} {action_name} started...\")\n            try:\n                result = wrapped_func(*args, **kwargs)\n                logger.info(f\"{prefix} {action_name} completed successfully.\")\n                return result\n            except Exception as e:\n                logger.error(f\"{prefix} {action_name} failed after retries: {e}\")\n                raise\n\n        @wraps(func)\n        async def async_wrapper(*args, **kwargs):\n            prefix = _log_prefix(resource_name, conn_id)\n            logger.info(f\"{prefix} {action_name} started...\")\n            try:\n                result = await wrapped_func(*args, **kwargs)\n                logger.info(f\"{prefix} {action_name} completed successfully.\")\n                return result\n            except Exception as e:\n                logger.error(f\"{prefix} {action_name} failed after retries: {e}\")\n                raise\n\n        return async_wrapper if is_coroutine else sync_wrapper",
              "children": [
                {
                  "value": "decorator",
                  "children": []
                },
                {
                  "value": "(func)",
                  "children": [
                    {
                      "value": "func",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "is_coroutine = asyncio.iscoroutinefunction(func)\n        retry_decorator = retry(\n            stop=stop_after_attempt(max_retry + 1),\n            wait=wait_exponential(multiplier=multiplier, min=min_wait, max=max_wait),\n            before_sleep=on_retry,\n            reraise=True,\n        )\n        wrapped_func = retry_decorator(func)\n\n        @wraps(func)\n        def sync_wrapper(*args, **kwargs):\n            prefix = _log_prefix(resource_name, conn_id)\n            logger.info(f\"{prefix} {action_name} started...\")\n            try:\n                result = wrapped_func(*args, **kwargs)\n                logger.info(f\"{prefix} {action_name} completed successfully.\")\n                return result\n            except Exception as e:\n                logger.error(f\"{prefix} {action_name} failed after retries: {e}\")\n                raise\n\n        @wraps(func)\n        async def async_wrapper(*args, **kwargs):\n            prefix = _log_prefix(resource_name, conn_id)\n            logger.info(f\"{prefix} {action_name} started...\")\n            try:\n                result = await wrapped_func(*args, **kwargs)\n                logger.info(f\"{prefix} {action_name} completed successfully.\")\n                return result\n            except Exception as e:\n                logger.error(f\"{prefix} {action_name} failed after retries: {e}\")\n                raise\n\n        return async_wrapper if is_coroutine else sync_wrapper",
                  "children": [
                    {
                      "value": "is_coroutine = asyncio.iscoroutinefunction(func)",
                      "children": [
                        {
                          "value": "is_coroutine = asyncio.iscoroutinefunction(func)",
                          "children": [
                            {
                              "value": "is_coroutine",
                              "children": []
                            },
                            {
                              "value": "asyncio.iscoroutinefunction(func)",
                              "children": [
                                {
                                  "value": "asyncio.iscoroutinefunction",
                                  "children": [
                                    {
                                      "value": "asyncio",
                                      "children": []
                                    },
                                    {
                                      "value": "iscoroutinefunction",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(func)",
                                  "children": [
                                    {
                                      "value": "func",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "retry_decorator = retry(\n            stop=stop_after_attempt(max_retry + 1),\n            wait=wait_exponential(multiplier=multiplier, min=min_wait, max=max_wait),\n            before_sleep=on_retry,\n            reraise=True,\n        )",
                      "children": [
                        {
                          "value": "retry_decorator = retry(\n            stop=stop_after_attempt(max_retry + 1),\n            wait=wait_exponential(multiplier=multiplier, min=min_wait, max=max_wait),\n            before_sleep=on_retry,\n            reraise=True,\n        )",
                          "children": [
                            {
                              "value": "retry_decorator",
                              "children": []
                            },
                            {
                              "value": "retry(\n            stop=stop_after_attempt(max_retry + 1),\n            wait=wait_exponential(multiplier=multiplier, min=min_wait, max=max_wait),\n            before_sleep=on_retry,\n            reraise=True,\n        )",
                              "children": [
                                {
                                  "value": "retry",
                                  "children": []
                                },
                                {
                                  "value": "(\n            stop=stop_after_attempt(max_retry + 1),\n            wait=wait_exponential(multiplier=multiplier, min=min_wait, max=max_wait),\n            before_sleep=on_retry,\n            reraise=True,\n        )",
                                  "children": [
                                    {
                                      "value": "stop=stop_after_attempt(max_retry + 1)",
                                      "children": [
                                        {
                                          "value": "stop",
                                          "children": []
                                        },
                                        {
                                          "value": "stop_after_attempt(max_retry + 1)",
                                          "children": [
                                            {
                                              "value": "stop_after_attempt",
                                              "children": []
                                            },
                                            {
                                              "value": "(max_retry + 1)",
                                              "children": [
                                                {
                                                  "value": "max_retry + 1",
                                                  "children": [
                                                    {
                                                      "value": "max_retry",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "1",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "wait=wait_exponential(multiplier=multiplier, min=min_wait, max=max_wait)",
                                      "children": [
                                        {
                                          "value": "wait",
                                          "children": []
                                        },
                                        {
                                          "value": "wait_exponential(multiplier=multiplier, min=min_wait, max=max_wait)",
                                          "children": [
                                            {
                                              "value": "wait_exponential",
                                              "children": []
                                            },
                                            {
                                              "value": "(multiplier=multiplier, min=min_wait, max=max_wait)",
                                              "children": [
                                                {
                                                  "value": "multiplier=multiplier",
                                                  "children": [
                                                    {
                                                      "value": "multiplier",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "multiplier",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "min=min_wait",
                                                  "children": [
                                                    {
                                                      "value": "min",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "min_wait",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "max=max_wait",
                                                  "children": [
                                                    {
                                                      "value": "max",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "max_wait",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "before_sleep=on_retry",
                                      "children": [
                                        {
                                          "value": "before_sleep",
                                          "children": []
                                        },
                                        {
                                          "value": "on_retry",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "reraise=True",
                                      "children": [
                                        {
                                          "value": "reraise",
                                          "children": []
                                        },
                                        {
                                          "value": "True",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "wrapped_func = retry_decorator(func)",
                      "children": [
                        {
                          "value": "wrapped_func = retry_decorator(func)",
                          "children": [
                            {
                              "value": "wrapped_func",
                              "children": []
                            },
                            {
                              "value": "retry_decorator(func)",
                              "children": [
                                {
                                  "value": "retry_decorator",
                                  "children": []
                                },
                                {
                                  "value": "(func)",
                                  "children": [
                                    {
                                      "value": "func",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "@wraps(func)\n        def sync_wrapper(*args, **kwargs):\n            prefix = _log_prefix(resource_name, conn_id)\n            logger.info(f\"{prefix} {action_name} started...\")\n            try:\n                result = wrapped_func(*args, **kwargs)\n                logger.info(f\"{prefix} {action_name} completed successfully.\")\n                return result\n            except Exception as e:\n                logger.error(f\"{prefix} {action_name} failed after retries: {e}\")\n                raise",
                      "children": [
                        {
                          "value": "@wraps(func)",
                          "children": [
                            {
                              "value": "wraps(func)",
                              "children": [
                                {
                                  "value": "wraps",
                                  "children": []
                                },
                                {
                                  "value": "(func)",
                                  "children": [
                                    {
                                      "value": "func",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "def sync_wrapper(*args, **kwargs):\n            prefix = _log_prefix(resource_name, conn_id)\n            logger.info(f\"{prefix} {action_name} started...\")\n            try:\n                result = wrapped_func(*args, **kwargs)\n                logger.info(f\"{prefix} {action_name} completed successfully.\")\n                return result\n            except Exception as e:\n                logger.error(f\"{prefix} {action_name} failed after retries: {e}\")\n                raise",
                          "children": [
                            {
                              "value": "sync_wrapper",
                              "children": []
                            },
                            {
                              "value": "(*args, **kwargs)",
                              "children": [
                                {
                                  "value": "*args",
                                  "children": [
                                    {
                                      "value": "args",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "**kwargs",
                                  "children": [
                                    {
                                      "value": "kwargs",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "prefix = _log_prefix(resource_name, conn_id)\n            logger.info(f\"{prefix} {action_name} started...\")\n            try:\n                result = wrapped_func(*args, **kwargs)\n                logger.info(f\"{prefix} {action_name} completed successfully.\")\n                return result\n            except Exception as e:\n                logger.error(f\"{prefix} {action_name} failed after retries: {e}\")\n                raise",
                              "children": [
                                {
                                  "value": "prefix = _log_prefix(resource_name, conn_id)",
                                  "children": [
                                    {
                                      "value": "prefix = _log_prefix(resource_name, conn_id)",
                                      "children": [
                                        {
                                          "value": "prefix",
                                          "children": []
                                        },
                                        {
                                          "value": "_log_prefix(resource_name, conn_id)",
                                          "children": [
                                            {
                                              "value": "_log_prefix",
                                              "children": []
                                            },
                                            {
                                              "value": "(resource_name, conn_id)",
                                              "children": [
                                                {
                                                  "value": "resource_name",
                                                  "children": []
                                                },
                                                {
                                                  "value": "conn_id",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "logger.info(f\"{prefix} {action_name} started...\")",
                                  "children": [
                                    {
                                      "value": "logger.info(f\"{prefix} {action_name} started...\")",
                                      "children": [
                                        {
                                          "value": "logger.info",
                                          "children": [
                                            {
                                              "value": "logger",
                                              "children": []
                                            },
                                            {
                                              "value": "info",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(f\"{prefix} {action_name} started...\")",
                                          "children": [
                                            {
                                              "value": "f\"{prefix} {action_name} started...\"",
                                              "children": [
                                                {
                                                  "value": "f\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "{prefix}",
                                                  "children": [
                                                    {
                                                      "value": "prefix",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "",
                                                  "children": []
                                                },
                                                {
                                                  "value": "{action_name}",
                                                  "children": [
                                                    {
                                                      "value": "action_name",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "started...",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "try:\n                result = wrapped_func(*args, **kwargs)\n                logger.info(f\"{prefix} {action_name} completed successfully.\")\n                return result\n            except Exception as e:\n                logger.error(f\"{prefix} {action_name} failed after retries: {e}\")\n                raise",
                                  "children": [
                                    {
                                      "value": "result = wrapped_func(*args, **kwargs)\n                logger.info(f\"{prefix} {action_name} completed successfully.\")\n                return result",
                                      "children": [
                                        {
                                          "value": "result = wrapped_func(*args, **kwargs)",
                                          "children": [
                                            {
                                              "value": "result = wrapped_func(*args, **kwargs)",
                                              "children": [
                                                {
                                                  "value": "result",
                                                  "children": []
                                                },
                                                {
                                                  "value": "wrapped_func(*args, **kwargs)",
                                                  "children": [
                                                    {
                                                      "value": "wrapped_func",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "(*args, **kwargs)",
                                                      "children": [
                                                        {
                                                          "value": "*args",
                                                          "children": [
                                                            {
                                                              "value": "args",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "**kwargs",
                                                          "children": [
                                                            {
                                                              "value": "kwargs",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "logger.info(f\"{prefix} {action_name} completed successfully.\")",
                                          "children": [
                                            {
                                              "value": "logger.info(f\"{prefix} {action_name} completed successfully.\")",
                                              "children": [
                                                {
                                                  "value": "logger.info",
                                                  "children": [
                                                    {
                                                      "value": "logger",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "info",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(f\"{prefix} {action_name} completed successfully.\")",
                                                  "children": [
                                                    {
                                                      "value": "f\"{prefix} {action_name} completed successfully.\"",
                                                      "children": [
                                                        {
                                                          "value": "f\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "{prefix}",
                                                          "children": [
                                                            {
                                                              "value": "prefix",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "{action_name}",
                                                          "children": [
                                                            {
                                                              "value": "action_name",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "completed successfully.",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "return result",
                                          "children": [
                                            {
                                              "value": "result",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "except Exception as e:\n                logger.error(f\"{prefix} {action_name} failed after retries: {e}\")\n                raise",
                                      "children": [
                                        {
                                          "value": "Exception as e",
                                          "children": [
                                            {
                                              "value": "Exception",
                                              "children": []
                                            },
                                            {
                                              "value": "e",
                                              "children": [
                                                {
                                                  "value": "e",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "logger.error(f\"{prefix} {action_name} failed after retries: {e}\")\n                raise",
                                          "children": [
                                            {
                                              "value": "logger.error(f\"{prefix} {action_name} failed after retries: {e}\")",
                                              "children": [
                                                {
                                                  "value": "logger.error(f\"{prefix} {action_name} failed after retries: {e}\")",
                                                  "children": [
                                                    {
                                                      "value": "logger.error",
                                                      "children": [
                                                        {
                                                          "value": "logger",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "error",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "(f\"{prefix} {action_name} failed after retries: {e}\")",
                                                      "children": [
                                                        {
                                                          "value": "f\"{prefix} {action_name} failed after retries: {e}\"",
                                                          "children": [
                                                            {
                                                              "value": "f\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "{prefix}",
                                                              "children": [
                                                                {
                                                                  "value": "prefix",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "{action_name}",
                                                              "children": [
                                                                {
                                                                  "value": "action_name",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "failed after retries:",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "{e}",
                                                              "children": [
                                                                {
                                                                  "value": "e",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "raise",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "@wraps(func)\n        async def async_wrapper(*args, **kwargs):\n            prefix = _log_prefix(resource_name, conn_id)\n            logger.info(f\"{prefix} {action_name} started...\")\n            try:\n                result = await wrapped_func(*args, **kwargs)\n                logger.info(f\"{prefix} {action_name} completed successfully.\")\n                return result\n            except Exception as e:\n                logger.error(f\"{prefix} {action_name} failed after retries: {e}\")\n                raise",
                      "children": [
                        {
                          "value": "@wraps(func)",
                          "children": [
                            {
                              "value": "wraps(func)",
                              "children": [
                                {
                                  "value": "wraps",
                                  "children": []
                                },
                                {
                                  "value": "(func)",
                                  "children": [
                                    {
                                      "value": "func",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "async def async_wrapper(*args, **kwargs):\n            prefix = _log_prefix(resource_name, conn_id)\n            logger.info(f\"{prefix} {action_name} started...\")\n            try:\n                result = await wrapped_func(*args, **kwargs)\n                logger.info(f\"{prefix} {action_name} completed successfully.\")\n                return result\n            except Exception as e:\n                logger.error(f\"{prefix} {action_name} failed after retries: {e}\")\n                raise",
                          "children": [
                            {
                              "value": "async_wrapper",
                              "children": []
                            },
                            {
                              "value": "(*args, **kwargs)",
                              "children": [
                                {
                                  "value": "*args",
                                  "children": [
                                    {
                                      "value": "args",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "**kwargs",
                                  "children": [
                                    {
                                      "value": "kwargs",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "prefix = _log_prefix(resource_name, conn_id)\n            logger.info(f\"{prefix} {action_name} started...\")\n            try:\n                result = await wrapped_func(*args, **kwargs)\n                logger.info(f\"{prefix} {action_name} completed successfully.\")\n                return result\n            except Exception as e:\n                logger.error(f\"{prefix} {action_name} failed after retries: {e}\")\n                raise",
                              "children": [
                                {
                                  "value": "prefix = _log_prefix(resource_name, conn_id)",
                                  "children": [
                                    {
                                      "value": "prefix = _log_prefix(resource_name, conn_id)",
                                      "children": [
                                        {
                                          "value": "prefix",
                                          "children": []
                                        },
                                        {
                                          "value": "_log_prefix(resource_name, conn_id)",
                                          "children": [
                                            {
                                              "value": "_log_prefix",
                                              "children": []
                                            },
                                            {
                                              "value": "(resource_name, conn_id)",
                                              "children": [
                                                {
                                                  "value": "resource_name",
                                                  "children": []
                                                },
                                                {
                                                  "value": "conn_id",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "logger.info(f\"{prefix} {action_name} started...\")",
                                  "children": [
                                    {
                                      "value": "logger.info(f\"{prefix} {action_name} started...\")",
                                      "children": [
                                        {
                                          "value": "logger.info",
                                          "children": [
                                            {
                                              "value": "logger",
                                              "children": []
                                            },
                                            {
                                              "value": "info",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(f\"{prefix} {action_name} started...\")",
                                          "children": [
                                            {
                                              "value": "f\"{prefix} {action_name} started...\"",
                                              "children": [
                                                {
                                                  "value": "f\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "{prefix}",
                                                  "children": [
                                                    {
                                                      "value": "prefix",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "",
                                                  "children": []
                                                },
                                                {
                                                  "value": "{action_name}",
                                                  "children": [
                                                    {
                                                      "value": "action_name",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "started...",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "try:\n                result = await wrapped_func(*args, **kwargs)\n                logger.info(f\"{prefix} {action_name} completed successfully.\")\n                return result\n            except Exception as e:\n                logger.error(f\"{prefix} {action_name} failed after retries: {e}\")\n                raise",
                                  "children": [
                                    {
                                      "value": "result = await wrapped_func(*args, **kwargs)\n                logger.info(f\"{prefix} {action_name} completed successfully.\")\n                return result",
                                      "children": [
                                        {
                                          "value": "result = await wrapped_func(*args, **kwargs)",
                                          "children": [
                                            {
                                              "value": "result = await wrapped_func(*args, **kwargs)",
                                              "children": [
                                                {
                                                  "value": "result",
                                                  "children": []
                                                },
                                                {
                                                  "value": "await wrapped_func(*args, **kwargs)",
                                                  "children": [
                                                    {
                                                      "value": "wrapped_func(*args, **kwargs)",
                                                      "children": [
                                                        {
                                                          "value": "wrapped_func",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "(*args, **kwargs)",
                                                          "children": [
                                                            {
                                                              "value": "*args",
                                                              "children": [
                                                                {
                                                                  "value": "args",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "**kwargs",
                                                              "children": [
                                                                {
                                                                  "value": "kwargs",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "logger.info(f\"{prefix} {action_name} completed successfully.\")",
                                          "children": [
                                            {
                                              "value": "logger.info(f\"{prefix} {action_name} completed successfully.\")",
                                              "children": [
                                                {
                                                  "value": "logger.info",
                                                  "children": [
                                                    {
                                                      "value": "logger",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "info",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(f\"{prefix} {action_name} completed successfully.\")",
                                                  "children": [
                                                    {
                                                      "value": "f\"{prefix} {action_name} completed successfully.\"",
                                                      "children": [
                                                        {
                                                          "value": "f\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "{prefix}",
                                                          "children": [
                                                            {
                                                              "value": "prefix",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "{action_name}",
                                                          "children": [
                                                            {
                                                              "value": "action_name",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "completed successfully.",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "return result",
                                          "children": [
                                            {
                                              "value": "result",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "except Exception as e:\n                logger.error(f\"{prefix} {action_name} failed after retries: {e}\")\n                raise",
                                      "children": [
                                        {
                                          "value": "Exception as e",
                                          "children": [
                                            {
                                              "value": "Exception",
                                              "children": []
                                            },
                                            {
                                              "value": "e",
                                              "children": [
                                                {
                                                  "value": "e",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "logger.error(f\"{prefix} {action_name} failed after retries: {e}\")\n                raise",
                                          "children": [
                                            {
                                              "value": "logger.error(f\"{prefix} {action_name} failed after retries: {e}\")",
                                              "children": [
                                                {
                                                  "value": "logger.error(f\"{prefix} {action_name} failed after retries: {e}\")",
                                                  "children": [
                                                    {
                                                      "value": "logger.error",
                                                      "children": [
                                                        {
                                                          "value": "logger",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "error",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "(f\"{prefix} {action_name} failed after retries: {e}\")",
                                                      "children": [
                                                        {
                                                          "value": "f\"{prefix} {action_name} failed after retries: {e}\"",
                                                          "children": [
                                                            {
                                                              "value": "f\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "{prefix}",
                                                              "children": [
                                                                {
                                                                  "value": "prefix",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "{action_name}",
                                                              "children": [
                                                                {
                                                                  "value": "action_name",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "failed after retries:",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "{e}",
                                                              "children": [
                                                                {
                                                                  "value": "e",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "raise",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return async_wrapper if is_coroutine else sync_wrapper",
                      "children": [
                        {
                          "value": "async_wrapper if is_coroutine else sync_wrapper",
                          "children": [
                            {
                              "value": "async_wrapper",
                              "children": []
                            },
                            {
                              "value": "is_coroutine",
                              "children": []
                            },
                            {
                              "value": "sync_wrapper",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "return decorator",
              "children": [
                {
                  "value": "decorator",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}