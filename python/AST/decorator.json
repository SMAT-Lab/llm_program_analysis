{
  "value": "import functools\nimport logging\nimport os\nimport time\nfrom typing import Callable, ParamSpec, Tuple, TypeVar\n\nfrom pydantic import BaseModel\n\n\nclass TimingInfo(BaseModel):\n    cpu_time: float\n    wall_time: float\n\n\ndef _start_measurement() -> Tuple[float, float]:\n    return time.time(), os.times()[0] + os.times()[1]\n\n\ndef _end_measurement(\n    start_wall_time: float, start_cpu_time: float\n) -> Tuple[float, float]:\n    end_wall_time = time.time()\n    end_cpu_time = os.times()[0] + os.times()[1]\n    return end_wall_time - start_wall_time, end_cpu_time - start_cpu_time\n\n\nP = ParamSpec(\"P\")\nT = TypeVar(\"T\")\n\nlogger = logging.getLogger(__name__)\n\n\ndef time_measured(func: Callable[P, T]) -> Callable[P, Tuple[TimingInfo, T]]:\n    \"\"\"\n    Decorator to measure the time taken by a function to execute.\n    \"\"\"\n\n    @functools.wraps(func)\n    def wrapper(*args: P.args, **kwargs: P.kwargs) -> Tuple[TimingInfo, T]:\n        start_wall_time, start_cpu_time = _start_measurement()\n        try:\n            result = func(*args, **kwargs)\n        finally:\n            wall_duration, cpu_duration = _end_measurement(\n                start_wall_time, start_cpu_time\n            )\n            timing_info = TimingInfo(cpu_time=cpu_duration, wall_time=wall_duration)\n        return timing_info, result\n\n    return wrapper\n\n\ndef error_logged(func: Callable[P, T]) -> Callable[P, T | None]:\n    \"\"\"\n    Decorator to suppress and log any exceptions raised by a function.\n    \"\"\"\n\n    @functools.wraps(func)\n    def wrapper(*args: P.args, **kwargs: P.kwargs) -> T | None:\n        try:\n            return func(*args, **kwargs)\n        except Exception as e:\n            logger.exception(\n                f\"Error when calling function {func.__name__} with arguments {args} {kwargs}: {e}\"\n            )\n\n    return wrapper",
  "children": [
    {
      "value": "import functools",
      "children": [
        {
          "value": "functools",
          "children": [
            {
              "value": "functools",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import logging",
      "children": [
        {
          "value": "logging",
          "children": [
            {
              "value": "logging",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import os",
      "children": [
        {
          "value": "os",
          "children": [
            {
              "value": "os",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import time",
      "children": [
        {
          "value": "time",
          "children": [
            {
              "value": "time",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from typing import Callable, ParamSpec, Tuple, TypeVar",
      "children": [
        {
          "value": "typing",
          "children": [
            {
              "value": "typing",
              "children": []
            }
          ]
        },
        {
          "value": "Callable",
          "children": [
            {
              "value": "Callable",
              "children": []
            }
          ]
        },
        {
          "value": "ParamSpec",
          "children": [
            {
              "value": "ParamSpec",
              "children": []
            }
          ]
        },
        {
          "value": "Tuple",
          "children": [
            {
              "value": "Tuple",
              "children": []
            }
          ]
        },
        {
          "value": "TypeVar",
          "children": [
            {
              "value": "TypeVar",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from pydantic import BaseModel",
      "children": [
        {
          "value": "pydantic",
          "children": [
            {
              "value": "pydantic",
              "children": []
            }
          ]
        },
        {
          "value": "BaseModel",
          "children": [
            {
              "value": "BaseModel",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "class TimingInfo(BaseModel):\n    cpu_time: float\n    wall_time: float",
      "children": [
        {
          "value": "TimingInfo",
          "children": []
        },
        {
          "value": "(BaseModel)",
          "children": [
            {
              "value": "BaseModel",
              "children": []
            }
          ]
        },
        {
          "value": "cpu_time: float\n    wall_time: float",
          "children": [
            {
              "value": "cpu_time: float",
              "children": [
                {
                  "value": "cpu_time: float",
                  "children": [
                    {
                      "value": "cpu_time",
                      "children": []
                    },
                    {
                      "value": "float",
                      "children": [
                        {
                          "value": "float",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "wall_time: float",
              "children": [
                {
                  "value": "wall_time: float",
                  "children": [
                    {
                      "value": "wall_time",
                      "children": []
                    },
                    {
                      "value": "float",
                      "children": [
                        {
                          "value": "float",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def _start_measurement() -> Tuple[float, float]:\n    return time.time(), os.times()[0] + os.times()[1]",
      "children": [
        {
          "value": "_start_measurement",
          "children": []
        },
        {
          "value": "()",
          "children": []
        },
        {
          "value": "Tuple[float, float]",
          "children": [
            {
              "value": "Tuple[float, float]",
              "children": [
                {
                  "value": "Tuple",
                  "children": []
                },
                {
                  "value": "[float, float]",
                  "children": [
                    {
                      "value": "float",
                      "children": [
                        {
                          "value": "float",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "float",
                      "children": [
                        {
                          "value": "float",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "return time.time(), os.times()[0] + os.times()[1]",
          "children": [
            {
              "value": "return time.time(), os.times()[0] + os.times()[1]",
              "children": [
                {
                  "value": "time.time(), os.times()[0] + os.times()[1]",
                  "children": [
                    {
                      "value": "time.time()",
                      "children": [
                        {
                          "value": "time.time",
                          "children": [
                            {
                              "value": "time",
                              "children": []
                            },
                            {
                              "value": "time",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "()",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "os.times()[0] + os.times()[1]",
                      "children": [
                        {
                          "value": "os.times()[0]",
                          "children": [
                            {
                              "value": "os.times()",
                              "children": [
                                {
                                  "value": "os.times",
                                  "children": [
                                    {
                                      "value": "os",
                                      "children": []
                                    },
                                    {
                                      "value": "times",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "0",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "os.times()[1]",
                          "children": [
                            {
                              "value": "os.times()",
                              "children": [
                                {
                                  "value": "os.times",
                                  "children": [
                                    {
                                      "value": "os",
                                      "children": []
                                    },
                                    {
                                      "value": "times",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "1",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def _end_measurement(\n    start_wall_time: float, start_cpu_time: float\n) -> Tuple[float, float]:\n    end_wall_time = time.time()\n    end_cpu_time = os.times()[0] + os.times()[1]\n    return end_wall_time - start_wall_time, end_cpu_time - start_cpu_time",
      "children": [
        {
          "value": "_end_measurement",
          "children": []
        },
        {
          "value": "(\n    start_wall_time: float, start_cpu_time: float\n)",
          "children": [
            {
              "value": "start_wall_time: float",
              "children": [
                {
                  "value": "start_wall_time",
                  "children": []
                },
                {
                  "value": "float",
                  "children": [
                    {
                      "value": "float",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "start_cpu_time: float",
              "children": [
                {
                  "value": "start_cpu_time",
                  "children": []
                },
                {
                  "value": "float",
                  "children": [
                    {
                      "value": "float",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "Tuple[float, float]",
          "children": [
            {
              "value": "Tuple[float, float]",
              "children": [
                {
                  "value": "Tuple",
                  "children": []
                },
                {
                  "value": "[float, float]",
                  "children": [
                    {
                      "value": "float",
                      "children": [
                        {
                          "value": "float",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "float",
                      "children": [
                        {
                          "value": "float",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "end_wall_time = time.time()\n    end_cpu_time = os.times()[0] + os.times()[1]\n    return end_wall_time - start_wall_time, end_cpu_time - start_cpu_time",
          "children": [
            {
              "value": "end_wall_time = time.time()",
              "children": [
                {
                  "value": "end_wall_time = time.time()",
                  "children": [
                    {
                      "value": "end_wall_time",
                      "children": []
                    },
                    {
                      "value": "time.time()",
                      "children": [
                        {
                          "value": "time.time",
                          "children": [
                            {
                              "value": "time",
                              "children": []
                            },
                            {
                              "value": "time",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "()",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "end_cpu_time = os.times()[0] + os.times()[1]",
              "children": [
                {
                  "value": "end_cpu_time = os.times()[0] + os.times()[1]",
                  "children": [
                    {
                      "value": "end_cpu_time",
                      "children": []
                    },
                    {
                      "value": "os.times()[0] + os.times()[1]",
                      "children": [
                        {
                          "value": "os.times()[0]",
                          "children": [
                            {
                              "value": "os.times()",
                              "children": [
                                {
                                  "value": "os.times",
                                  "children": [
                                    {
                                      "value": "os",
                                      "children": []
                                    },
                                    {
                                      "value": "times",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "0",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "os.times()[1]",
                          "children": [
                            {
                              "value": "os.times()",
                              "children": [
                                {
                                  "value": "os.times",
                                  "children": [
                                    {
                                      "value": "os",
                                      "children": []
                                    },
                                    {
                                      "value": "times",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "1",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "return end_wall_time - start_wall_time, end_cpu_time - start_cpu_time",
              "children": [
                {
                  "value": "end_wall_time - start_wall_time, end_cpu_time - start_cpu_time",
                  "children": [
                    {
                      "value": "end_wall_time - start_wall_time",
                      "children": [
                        {
                          "value": "end_wall_time",
                          "children": []
                        },
                        {
                          "value": "start_wall_time",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "end_cpu_time - start_cpu_time",
                      "children": [
                        {
                          "value": "end_cpu_time",
                          "children": []
                        },
                        {
                          "value": "start_cpu_time",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "P = ParamSpec(\"P\")",
      "children": [
        {
          "value": "P = ParamSpec(\"P\")",
          "children": [
            {
              "value": "P",
              "children": []
            },
            {
              "value": "ParamSpec(\"P\")",
              "children": [
                {
                  "value": "ParamSpec",
                  "children": []
                },
                {
                  "value": "(\"P\")",
                  "children": [
                    {
                      "value": "\"P\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "P",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "T = TypeVar(\"T\")",
      "children": [
        {
          "value": "T = TypeVar(\"T\")",
          "children": [
            {
              "value": "T",
              "children": []
            },
            {
              "value": "TypeVar(\"T\")",
              "children": [
                {
                  "value": "TypeVar",
                  "children": []
                },
                {
                  "value": "(\"T\")",
                  "children": [
                    {
                      "value": "\"T\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "T",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "logger = logging.getLogger(__name__)",
      "children": [
        {
          "value": "logger = logging.getLogger(__name__)",
          "children": [
            {
              "value": "logger",
              "children": []
            },
            {
              "value": "logging.getLogger(__name__)",
              "children": [
                {
                  "value": "logging.getLogger",
                  "children": [
                    {
                      "value": "logging",
                      "children": []
                    },
                    {
                      "value": "getLogger",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(__name__)",
                  "children": [
                    {
                      "value": "__name__",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def time_measured(func: Callable[P, T]) -> Callable[P, Tuple[TimingInfo, T]]:\n    \"\"\"\n    Decorator to measure the time taken by a function to execute.\n    \"\"\"\n\n    @functools.wraps(func)\n    def wrapper(*args: P.args, **kwargs: P.kwargs) -> Tuple[TimingInfo, T]:\n        start_wall_time, start_cpu_time = _start_measurement()\n        try:\n            result = func(*args, **kwargs)\n        finally:\n            wall_duration, cpu_duration = _end_measurement(\n                start_wall_time, start_cpu_time\n            )\n            timing_info = TimingInfo(cpu_time=cpu_duration, wall_time=wall_duration)\n        return timing_info, result\n\n    return wrapper",
      "children": [
        {
          "value": "time_measured",
          "children": []
        },
        {
          "value": "(func: Callable[P, T])",
          "children": [
            {
              "value": "func: Callable[P, T]",
              "children": [
                {
                  "value": "func",
                  "children": []
                },
                {
                  "value": "Callable[P, T]",
                  "children": [
                    {
                      "value": "Callable[P, T]",
                      "children": [
                        {
                          "value": "Callable",
                          "children": []
                        },
                        {
                          "value": "[P, T]",
                          "children": [
                            {
                              "value": "P",
                              "children": [
                                {
                                  "value": "P",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "T",
                              "children": [
                                {
                                  "value": "T",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "Callable[P, Tuple[TimingInfo, T]]",
          "children": [
            {
              "value": "Callable[P, Tuple[TimingInfo, T]]",
              "children": [
                {
                  "value": "Callable",
                  "children": []
                },
                {
                  "value": "[P, Tuple[TimingInfo, T]]",
                  "children": [
                    {
                      "value": "P",
                      "children": [
                        {
                          "value": "P",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "Tuple[TimingInfo, T]",
                      "children": [
                        {
                          "value": "Tuple[TimingInfo, T]",
                          "children": [
                            {
                              "value": "Tuple",
                              "children": []
                            },
                            {
                              "value": "[TimingInfo, T]",
                              "children": [
                                {
                                  "value": "TimingInfo",
                                  "children": [
                                    {
                                      "value": "TimingInfo",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "T",
                                  "children": [
                                    {
                                      "value": "T",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "\"\"\"\n    Decorator to measure the time taken by a function to execute.\n    \"\"\"\n\n    @functools.wraps(func)\n    def wrapper(*args: P.args, **kwargs: P.kwargs) -> Tuple[TimingInfo, T]:\n        start_wall_time, start_cpu_time = _start_measurement()\n        try:\n            result = func(*args, **kwargs)\n        finally:\n            wall_duration, cpu_duration = _end_measurement(\n                start_wall_time, start_cpu_time\n            )\n            timing_info = TimingInfo(cpu_time=cpu_duration, wall_time=wall_duration)\n        return timing_info, result\n\n    return wrapper",
          "children": [
            {
              "value": "\"\"\"\n    Decorator to measure the time taken by a function to execute.\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    Decorator to measure the time taken by a function to execute.\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Decorator to measure the time taken by a function to execute.",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "@functools.wraps(func)\n    def wrapper(*args: P.args, **kwargs: P.kwargs) -> Tuple[TimingInfo, T]:\n        start_wall_time, start_cpu_time = _start_measurement()\n        try:\n            result = func(*args, **kwargs)\n        finally:\n            wall_duration, cpu_duration = _end_measurement(\n                start_wall_time, start_cpu_time\n            )\n            timing_info = TimingInfo(cpu_time=cpu_duration, wall_time=wall_duration)\n        return timing_info, result",
              "children": [
                {
                  "value": "@functools.wraps(func)",
                  "children": [
                    {
                      "value": "functools.wraps(func)",
                      "children": [
                        {
                          "value": "functools.wraps",
                          "children": [
                            {
                              "value": "functools",
                              "children": []
                            },
                            {
                              "value": "wraps",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "(func)",
                          "children": [
                            {
                              "value": "func",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "def wrapper(*args: P.args, **kwargs: P.kwargs) -> Tuple[TimingInfo, T]:\n        start_wall_time, start_cpu_time = _start_measurement()\n        try:\n            result = func(*args, **kwargs)\n        finally:\n            wall_duration, cpu_duration = _end_measurement(\n                start_wall_time, start_cpu_time\n            )\n            timing_info = TimingInfo(cpu_time=cpu_duration, wall_time=wall_duration)\n        return timing_info, result",
                  "children": [
                    {
                      "value": "wrapper",
                      "children": []
                    },
                    {
                      "value": "(*args: P.args, **kwargs: P.kwargs)",
                      "children": [
                        {
                          "value": "*args: P.args",
                          "children": [
                            {
                              "value": "*args",
                              "children": [
                                {
                                  "value": "args",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "P.args",
                              "children": [
                                {
                                  "value": "P.args",
                                  "children": [
                                    {
                                      "value": "P",
                                      "children": []
                                    },
                                    {
                                      "value": "args",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "**kwargs: P.kwargs",
                          "children": [
                            {
                              "value": "**kwargs",
                              "children": [
                                {
                                  "value": "kwargs",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "P.kwargs",
                              "children": [
                                {
                                  "value": "P.kwargs",
                                  "children": [
                                    {
                                      "value": "P",
                                      "children": []
                                    },
                                    {
                                      "value": "kwargs",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "Tuple[TimingInfo, T]",
                      "children": [
                        {
                          "value": "Tuple[TimingInfo, T]",
                          "children": [
                            {
                              "value": "Tuple",
                              "children": []
                            },
                            {
                              "value": "[TimingInfo, T]",
                              "children": [
                                {
                                  "value": "TimingInfo",
                                  "children": [
                                    {
                                      "value": "TimingInfo",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "T",
                                  "children": [
                                    {
                                      "value": "T",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "start_wall_time, start_cpu_time = _start_measurement()\n        try:\n            result = func(*args, **kwargs)\n        finally:\n            wall_duration, cpu_duration = _end_measurement(\n                start_wall_time, start_cpu_time\n            )\n            timing_info = TimingInfo(cpu_time=cpu_duration, wall_time=wall_duration)\n        return timing_info, result",
                      "children": [
                        {
                          "value": "start_wall_time, start_cpu_time = _start_measurement()",
                          "children": [
                            {
                              "value": "start_wall_time, start_cpu_time = _start_measurement()",
                              "children": [
                                {
                                  "value": "start_wall_time, start_cpu_time",
                                  "children": [
                                    {
                                      "value": "start_wall_time",
                                      "children": []
                                    },
                                    {
                                      "value": "start_cpu_time",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "_start_measurement()",
                                  "children": [
                                    {
                                      "value": "_start_measurement",
                                      "children": []
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "try:\n            result = func(*args, **kwargs)\n        finally:\n            wall_duration, cpu_duration = _end_measurement(\n                start_wall_time, start_cpu_time\n            )\n            timing_info = TimingInfo(cpu_time=cpu_duration, wall_time=wall_duration)",
                          "children": [
                            {
                              "value": "result = func(*args, **kwargs)",
                              "children": [
                                {
                                  "value": "result = func(*args, **kwargs)",
                                  "children": [
                                    {
                                      "value": "result = func(*args, **kwargs)",
                                      "children": [
                                        {
                                          "value": "result",
                                          "children": []
                                        },
                                        {
                                          "value": "func(*args, **kwargs)",
                                          "children": [
                                            {
                                              "value": "func",
                                              "children": []
                                            },
                                            {
                                              "value": "(*args, **kwargs)",
                                              "children": [
                                                {
                                                  "value": "*args",
                                                  "children": [
                                                    {
                                                      "value": "args",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "**kwargs",
                                                  "children": [
                                                    {
                                                      "value": "kwargs",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "finally:\n            wall_duration, cpu_duration = _end_measurement(\n                start_wall_time, start_cpu_time\n            )\n            timing_info = TimingInfo(cpu_time=cpu_duration, wall_time=wall_duration)",
                              "children": [
                                {
                                  "value": "wall_duration, cpu_duration = _end_measurement(\n                start_wall_time, start_cpu_time\n            )\n            timing_info = TimingInfo(cpu_time=cpu_duration, wall_time=wall_duration)",
                                  "children": [
                                    {
                                      "value": "wall_duration, cpu_duration = _end_measurement(\n                start_wall_time, start_cpu_time\n            )",
                                      "children": [
                                        {
                                          "value": "wall_duration, cpu_duration = _end_measurement(\n                start_wall_time, start_cpu_time\n            )",
                                          "children": [
                                            {
                                              "value": "wall_duration, cpu_duration",
                                              "children": [
                                                {
                                                  "value": "wall_duration",
                                                  "children": []
                                                },
                                                {
                                                  "value": "cpu_duration",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "_end_measurement(\n                start_wall_time, start_cpu_time\n            )",
                                              "children": [
                                                {
                                                  "value": "_end_measurement",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(\n                start_wall_time, start_cpu_time\n            )",
                                                  "children": [
                                                    {
                                                      "value": "start_wall_time",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "start_cpu_time",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "timing_info = TimingInfo(cpu_time=cpu_duration, wall_time=wall_duration)",
                                      "children": [
                                        {
                                          "value": "timing_info = TimingInfo(cpu_time=cpu_duration, wall_time=wall_duration)",
                                          "children": [
                                            {
                                              "value": "timing_info",
                                              "children": []
                                            },
                                            {
                                              "value": "TimingInfo(cpu_time=cpu_duration, wall_time=wall_duration)",
                                              "children": [
                                                {
                                                  "value": "TimingInfo",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(cpu_time=cpu_duration, wall_time=wall_duration)",
                                                  "children": [
                                                    {
                                                      "value": "cpu_time=cpu_duration",
                                                      "children": [
                                                        {
                                                          "value": "cpu_time",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "cpu_duration",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "wall_time=wall_duration",
                                                      "children": [
                                                        {
                                                          "value": "wall_time",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "wall_duration",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "return timing_info, result",
                          "children": [
                            {
                              "value": "timing_info, result",
                              "children": [
                                {
                                  "value": "timing_info",
                                  "children": []
                                },
                                {
                                  "value": "result",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "return wrapper",
              "children": [
                {
                  "value": "wrapper",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def error_logged(func: Callable[P, T]) -> Callable[P, T | None]:\n    \"\"\"\n    Decorator to suppress and log any exceptions raised by a function.\n    \"\"\"\n\n    @functools.wraps(func)\n    def wrapper(*args: P.args, **kwargs: P.kwargs) -> T | None:\n        try:\n            return func(*args, **kwargs)\n        except Exception as e:\n            logger.exception(\n                f\"Error when calling function {func.__name__} with arguments {args} {kwargs}: {e}\"\n            )\n\n    return wrapper",
      "children": [
        {
          "value": "error_logged",
          "children": []
        },
        {
          "value": "(func: Callable[P, T])",
          "children": [
            {
              "value": "func: Callable[P, T]",
              "children": [
                {
                  "value": "func",
                  "children": []
                },
                {
                  "value": "Callable[P, T]",
                  "children": [
                    {
                      "value": "Callable[P, T]",
                      "children": [
                        {
                          "value": "Callable",
                          "children": []
                        },
                        {
                          "value": "[P, T]",
                          "children": [
                            {
                              "value": "P",
                              "children": [
                                {
                                  "value": "P",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "T",
                              "children": [
                                {
                                  "value": "T",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "Callable[P, T | None]",
          "children": [
            {
              "value": "Callable[P, T | None]",
              "children": [
                {
                  "value": "Callable",
                  "children": []
                },
                {
                  "value": "[P, T | None]",
                  "children": [
                    {
                      "value": "P",
                      "children": [
                        {
                          "value": "P",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "T | None",
                      "children": [
                        {
                          "value": "T | None",
                          "children": [
                            {
                              "value": "T",
                              "children": []
                            },
                            {
                              "value": "None",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "\"\"\"\n    Decorator to suppress and log any exceptions raised by a function.\n    \"\"\"\n\n    @functools.wraps(func)\n    def wrapper(*args: P.args, **kwargs: P.kwargs) -> T | None:\n        try:\n            return func(*args, **kwargs)\n        except Exception as e:\n            logger.exception(\n                f\"Error when calling function {func.__name__} with arguments {args} {kwargs}: {e}\"\n            )\n\n    return wrapper",
          "children": [
            {
              "value": "\"\"\"\n    Decorator to suppress and log any exceptions raised by a function.\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    Decorator to suppress and log any exceptions raised by a function.\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Decorator to suppress and log any exceptions raised by a function.",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "@functools.wraps(func)\n    def wrapper(*args: P.args, **kwargs: P.kwargs) -> T | None:\n        try:\n            return func(*args, **kwargs)\n        except Exception as e:\n            logger.exception(\n                f\"Error when calling function {func.__name__} with arguments {args} {kwargs}: {e}\"\n            )",
              "children": [
                {
                  "value": "@functools.wraps(func)",
                  "children": [
                    {
                      "value": "functools.wraps(func)",
                      "children": [
                        {
                          "value": "functools.wraps",
                          "children": [
                            {
                              "value": "functools",
                              "children": []
                            },
                            {
                              "value": "wraps",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "(func)",
                          "children": [
                            {
                              "value": "func",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "def wrapper(*args: P.args, **kwargs: P.kwargs) -> T | None:\n        try:\n            return func(*args, **kwargs)\n        except Exception as e:\n            logger.exception(\n                f\"Error when calling function {func.__name__} with arguments {args} {kwargs}: {e}\"\n            )",
                  "children": [
                    {
                      "value": "wrapper",
                      "children": []
                    },
                    {
                      "value": "(*args: P.args, **kwargs: P.kwargs)",
                      "children": [
                        {
                          "value": "*args: P.args",
                          "children": [
                            {
                              "value": "*args",
                              "children": [
                                {
                                  "value": "args",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "P.args",
                              "children": [
                                {
                                  "value": "P.args",
                                  "children": [
                                    {
                                      "value": "P",
                                      "children": []
                                    },
                                    {
                                      "value": "args",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "**kwargs: P.kwargs",
                          "children": [
                            {
                              "value": "**kwargs",
                              "children": [
                                {
                                  "value": "kwargs",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "P.kwargs",
                              "children": [
                                {
                                  "value": "P.kwargs",
                                  "children": [
                                    {
                                      "value": "P",
                                      "children": []
                                    },
                                    {
                                      "value": "kwargs",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "T | None",
                      "children": [
                        {
                          "value": "T | None",
                          "children": [
                            {
                              "value": "T",
                              "children": []
                            },
                            {
                              "value": "None",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "try:\n            return func(*args, **kwargs)\n        except Exception as e:\n            logger.exception(\n                f\"Error when calling function {func.__name__} with arguments {args} {kwargs}: {e}\"\n            )",
                      "children": [
                        {
                          "value": "try:\n            return func(*args, **kwargs)\n        except Exception as e:\n            logger.exception(\n                f\"Error when calling function {func.__name__} with arguments {args} {kwargs}: {e}\"\n            )",
                          "children": [
                            {
                              "value": "return func(*args, **kwargs)",
                              "children": [
                                {
                                  "value": "return func(*args, **kwargs)",
                                  "children": [
                                    {
                                      "value": "func(*args, **kwargs)",
                                      "children": [
                                        {
                                          "value": "func",
                                          "children": []
                                        },
                                        {
                                          "value": "(*args, **kwargs)",
                                          "children": [
                                            {
                                              "value": "*args",
                                              "children": [
                                                {
                                                  "value": "args",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "**kwargs",
                                              "children": [
                                                {
                                                  "value": "kwargs",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "except Exception as e:\n            logger.exception(\n                f\"Error when calling function {func.__name__} with arguments {args} {kwargs}: {e}\"\n            )",
                              "children": [
                                {
                                  "value": "Exception as e",
                                  "children": [
                                    {
                                      "value": "Exception",
                                      "children": []
                                    },
                                    {
                                      "value": "e",
                                      "children": [
                                        {
                                          "value": "e",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "logger.exception(\n                f\"Error when calling function {func.__name__} with arguments {args} {kwargs}: {e}\"\n            )",
                                  "children": [
                                    {
                                      "value": "logger.exception(\n                f\"Error when calling function {func.__name__} with arguments {args} {kwargs}: {e}\"\n            )",
                                      "children": [
                                        {
                                          "value": "logger.exception(\n                f\"Error when calling function {func.__name__} with arguments {args} {kwargs}: {e}\"\n            )",
                                          "children": [
                                            {
                                              "value": "logger.exception",
                                              "children": [
                                                {
                                                  "value": "logger",
                                                  "children": []
                                                },
                                                {
                                                  "value": "exception",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(\n                f\"Error when calling function {func.__name__} with arguments {args} {kwargs}: {e}\"\n            )",
                                              "children": [
                                                {
                                                  "value": "f\"Error when calling function {func.__name__} with arguments {args} {kwargs}: {e}\"",
                                                  "children": [
                                                    {
                                                      "value": "f\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "Error when calling function",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "{func.__name__}",
                                                      "children": [
                                                        {
                                                          "value": "func.__name__",
                                                          "children": [
                                                            {
                                                              "value": "func",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "__name__",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "with arguments",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "{args}",
                                                      "children": [
                                                        {
                                                          "value": "args",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "{kwargs}",
                                                      "children": [
                                                        {
                                                          "value": "kwargs",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": ":",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "{e}",
                                                      "children": [
                                                        {
                                                          "value": "e",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "return wrapper",
              "children": [
                {
                  "value": "wrapper",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}