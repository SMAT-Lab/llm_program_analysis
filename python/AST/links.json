{
  "value": "# -*- coding: utf-8 -*-\n\nimport re\nimport sys\nimport random\nfrom typing import List, Tuple\n\nimport requests\nfrom requests.models import Response\n\n\ndef find_links_in_text(text: str) -> List[str]:\n    \"\"\"Find links in a text and return a list of URLs.\"\"\"\n\n    link_pattern = re.compile(r'((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:\\'\\\".,<>?\u00ab\u00bb\u201c\u201d\u2018\u2019]))')\n\n    raw_links = re.findall(link_pattern, text)\n\n    links = [\n        str(raw_link[0]) for raw_link in raw_links\n    ]\n\n    return links\n\n\ndef find_links_in_file(filename: str) -> List[str]:\n    \"\"\"Find links in a file and return a list of URLs from text file.\"\"\"\n\n    with open(filename, mode='r', encoding='utf-8') as file:\n        readme = file.read()\n        index_section = readme.find('## Index')\n        if index_section == -1:\n            index_section = 0\n        content = readme[index_section:]\n\n    links = find_links_in_text(content)\n\n    return links\n\n\ndef check_duplicate_links(links: List[str]) -> Tuple[bool, List]:\n    \"\"\"Check for duplicated links.\n\n    Returns a tuple with True or False and duplicate list.\n    \"\"\"\n\n    seen = {}\n    duplicates = []\n    has_duplicate = False\n\n    for link in links:\n        link = link.rstrip('/')\n        if link not in seen:\n            seen[link] = 1\n        else:\n            if seen[link] == 1:\n                duplicates.append(link)\n\n    if duplicates:\n        has_duplicate = True\n\n    return (has_duplicate, duplicates)\n\n\ndef fake_user_agent() -> str:\n    \"\"\"Faking user agent as some hosting services block not-whitelisted UA.\"\"\"\n\n    user_agents = [\n        'Mozilla/5.0 (Windows NT 6.2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1467.0 Safari/537.36',\n        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/605.1.15 (KHTML, like Gecko)',\n        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36',\n        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36',\n    ]\n\n    return random.choice(user_agents)\n\n\ndef get_host_from_link(link: str) -> str:\n\n    host = link.split('://', 1)[1] if '://' in link else link\n\n    # Remove routes, arguments and anchors\n    if '/' in host:\n        host = host.split('/', 1)[0]\n\n    elif '?' in host:\n        host = host.split('?', 1)[0]\n\n    elif '#' in host:\n        host = host.split('#', 1)[0]\n\n    return host\n\n\ndef has_cloudflare_protection(resp: Response) -> bool:\n    \"\"\"Checks if there is any cloudflare protection in the response.\n\n    Cloudflare implements multiple network protections on a given link,\n    this script tries to detect if any of them exist in the response from request.\n\n    Common protections have the following HTTP code as a response:\n        - 403: When host header is missing or incorrect (and more)\n        - 503: When DDOS protection exists\n\n    See more about it at:\n        - https://support.cloudflare.com/hc/en-us/articles/115003014512-4xx-Client-Error\n        - https://support.cloudflare.com/hc/en-us/articles/115003011431-Troubleshooting-Cloudflare-5XX-errors\n        - https://www.cloudflare.com/ddos/\n        - https://superuser.com/a/888526\n\n    Discussions in issues and pull requests:\n        - https://github.com/public-apis/public-apis/pull/2409\n        - https://github.com/public-apis/public-apis/issues/2960 \n    \"\"\"\n\n    code = resp.status_code\n    server = resp.headers.get('Server') or resp.headers.get('server')\n    cloudflare_flags = [\n        '403 Forbidden',\n        'cloudflare',\n        'Cloudflare',\n        'Security check',\n        'Please Wait... | Cloudflare',\n        'We are checking your browser...',\n        'Please stand by, while we are checking your browser...',\n        'Checking your browser before accessing',\n        'This process is automatic.',\n        'Your browser will redirect to your requested content shortly.',\n        'Please allow up to 5 seconds',\n        'DDoS protection by',\n        'Ray ID:',\n        'Cloudflare Ray ID:',\n        '_cf_chl',\n        '_cf_chl_opt',\n        '__cf_chl_rt_tk',\n        'cf-spinner-please-wait',\n        'cf-spinner-redirecting'\n    ]\n\n    if code in [403, 503] and server == 'cloudflare':\n        html = resp.text\n\n        flags_found = [flag in html for flag in cloudflare_flags]\n        any_flag_found = any(flags_found)\n\n        if any_flag_found:\n            return True\n\n    return False\n\n\ndef check_if_link_is_working(link: str) -> Tuple[bool, str]:\n    \"\"\"Checks if a link is working.\n\n    If an error is identified when the request for the link occurs,\n    the return will be a tuple with the first value True and the second\n    value a string containing the error message.\n\n    If no errors are identified, the return will be a tuple with the\n    first value False and the second an empty string.\n    \"\"\"\n\n    has_error = False\n    error_message = ''\n\n    try:\n        resp = requests.get(link, timeout=25, headers={\n            'User-Agent': fake_user_agent(),\n            'host': get_host_from_link(link)\n        })\n\n        code = resp.status_code\n\n        if code >= 400 and not has_cloudflare_protection(resp):\n            has_error = True\n            error_message = f'ERR:CLT: {code} : {link}'\n\n    except requests.exceptions.SSLError as error:\n        has_error = True\n        error_message = f'ERR:SSL: {error} : {link}'\n\n    except requests.exceptions.ConnectionError as error:\n        has_error = True\n        error_message = f'ERR:CNT: {error} : {link}'\n\n    except (TimeoutError, requests.exceptions.ConnectTimeout):\n        has_error = True\n        error_message = f'ERR:TMO: {link}'\n\n    except requests.exceptions.TooManyRedirects as error:\n        has_error = True\n        error_message = f'ERR:TMR: {error} : {link}'\n\n    except (Exception, requests.exceptions.RequestException) as error:\n        has_error = True\n        error_message = f'ERR:UKN: {error} : {link}'\n\n    return (has_error, error_message)\n\n\ndef check_if_list_of_links_are_working(list_of_links: List[str]) -> List[str]:\n    error_messages = []\n    for link in list_of_links:\n        has_error, error_message = check_if_link_is_working(link)\n\n        if has_error:\n            error_messages.append(error_message)\n\n    return error_messages\n\n\ndef start_duplicate_links_checker(links: List[str]) -> None:\n\n    print('Checking for duplicate links...')\n\n    has_duplicate_link, duplicates_links = check_duplicate_links(links)\n\n    if has_duplicate_link:\n        print(f'Found duplicate links:')\n\n        for duplicate_link in duplicates_links:\n            print(duplicate_link)\n\n        sys.exit(1)\n    else:\n        print('No duplicate links.')\n\n\ndef start_links_working_checker(links: List[str]) -> None:\n\n    print(f'Checking if {len(links)} links are working...')\n\n    errors = check_if_list_of_links_are_working(links)\n    if errors:\n\n        num_errors = len(errors)\n        print(f'Apparently {num_errors} links are not working properly. See in:')\n\n        for error_message in errors:\n            print(error_message)\n\n        sys.exit(1)\n\n\ndef main(filename: str, only_duplicate_links_checker: bool) -> None:\n\n    links = find_links_in_file(filename)\n\n    start_duplicate_links_checker(links)\n\n    if not only_duplicate_links_checker:\n        start_links_working_checker(links)\n\n\nif __name__ == '__main__':\n    num_args = len(sys.argv)\n    only_duplicate_links_checker = False\n\n    if num_args < 2:\n        print('No .md file passed')\n        sys.exit(1)\n    elif num_args == 3:\n        third_arg = sys.argv[2].lower()\n\n        if third_arg == '-odlc' or third_arg == '--only_duplicate_links_checker':\n            only_duplicate_links_checker = True\n        else:\n            print(f'Third invalid argument. Usage: python {__file__} [-odlc | --only_duplicate_links_checker]')\n            sys.exit(1)\n\n    filename = sys.argv[1]\n\n    main(filename, only_duplicate_links_checker)",
  "children": [
    {
      "value": "# -*- coding: utf-8 -*-",
      "children": []
    },
    {
      "value": "import re",
      "children": [
        {
          "value": "re",
          "children": [
            {
              "value": "re",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import sys",
      "children": [
        {
          "value": "sys",
          "children": [
            {
              "value": "sys",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import random",
      "children": [
        {
          "value": "random",
          "children": [
            {
              "value": "random",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from typing import List, Tuple",
      "children": [
        {
          "value": "typing",
          "children": [
            {
              "value": "typing",
              "children": []
            }
          ]
        },
        {
          "value": "List",
          "children": [
            {
              "value": "List",
              "children": []
            }
          ]
        },
        {
          "value": "Tuple",
          "children": [
            {
              "value": "Tuple",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import requests",
      "children": [
        {
          "value": "requests",
          "children": [
            {
              "value": "requests",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from requests.models import Response",
      "children": [
        {
          "value": "requests.models",
          "children": [
            {
              "value": "requests",
              "children": []
            },
            {
              "value": "models",
              "children": []
            }
          ]
        },
        {
          "value": "Response",
          "children": [
            {
              "value": "Response",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "def find_links_in_text(text: str) -> List[str]:\n    \"\"\"Find links in a text and return a list of URLs.\"\"\"\n\n    link_pattern = re.compile(r'((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:\\'\\\".,<>?\u00ab\u00bb\u201c\u201d\u2018\u2019]))')\n\n    raw_links = re.findall(link_pattern, text)\n\n    links = [\n        str(raw_link[0]) for raw_link in raw_links\n    ]\n\n    return links\n\n\ndef fin",
      "children": [
        {
          "value": "find_links_in_text",
          "children": []
        },
        {
          "value": "(text: str)",
          "children": [
            {
              "value": "text: str",
              "children": [
                {
                  "value": "text",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "List[str]",
          "children": [
            {
              "value": "List[str]",
              "children": [
                {
                  "value": "List",
                  "children": []
                },
                {
                  "value": "[str]",
                  "children": [
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "\"\"\"Find links in a text and return a list of URLs.\"\"\"\n\n    link_pattern = re.compile(r'((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:\\'\\\".,<>?\u00ab\u00bb\u201c\u201d\u2018\u2019]))')\n\n    raw_links = re.findall(link_pattern, text)\n\n    links = [\n        str(raw_link[0]) for raw_link in raw_links\n    ]\n\n    return links\n\n\ndef fin",
          "children": [
            {
              "value": "\"\"\"Find links in a text and return a list of URLs.\"\"\"",
              "children": [
                {
                  "value": "\"\"\"Find links in a text and return a list of URLs.\"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Find links in a text and return a list of URLs.",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "link_pattern = re.compile(r'((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:\\'\\\".,<>?\u00ab\u00bb\u201c\u201d\u2018\u2019]))')\n\n    raw_",
              "children": [
                {
                  "value": "link_pattern = re.compile(r'((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:\\'\\\".,<>?\u00ab\u00bb\u201c\u201d\u2018\u2019]))')\n\n    raw_",
                  "children": [
                    {
                      "value": "link_pattern",
                      "children": []
                    },
                    {
                      "value": "re.compile(r'((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:\\'\\\".,<>?\u00ab\u00bb\u201c\u201d\u2018\u2019]))')\n\n    raw_",
                      "children": [
                        {
                          "value": "re.compile",
                          "children": [
                            {
                              "value": "re",
                              "children": []
                            },
                            {
                              "value": "compile",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "(r'((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:\\'\\\".,<>?\u00ab\u00bb\u201c\u201d\u2018\u2019]))')\n\n    raw_",
                          "children": [
                            {
                              "value": "r'((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:\\'\\\".,<>?\u00ab\u00bb\u201c\u201d\u2018\u2019]))')\n\n    raw",
                              "children": [
                                {
                                  "value": "r'",
                                  "children": []
                                },
                                {
                                  "value": "((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:\\'\\\".,<>?\u00ab\u00bb\u201c\u201d\u2018\u2019]))')\n\n    ra",
                                  "children": []
                                },
                                {
                                  "value": "w",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "= re.findall(link_pattern, text)\n\n    link",
              "children": [
                {
                  "value": "= re.findall(link_pattern, text)\n\n    link",
                  "children": [
                    {
                      "value": "= re.find",
                      "children": []
                    },
                    {
                      "value": "(link_pattern, text)\n\n    link",
                      "children": [
                        {
                          "value": "(link_patt",
                          "children": [
                            {
                              "value": "(l",
                              "children": []
                            },
                            {
                              "value": "nk_patt",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "ern, text)\n\n    link",
                          "children": [
                            {
                              "value": "rn, text)",
                              "children": []
                            },
                            {
                              "value": "lin",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "str(raw_link[0]) for raw_link in raw_links\n    ]\n\n    retu",
              "children": [
                {
                  "value": "str(raw_link[0]) for raw_link in raw_links\n    ]\n\n    retu",
                  "children": [
                    {
                      "value": "",
                      "children": []
                    },
                    {
                      "value": "str(raw_link[0]) for raw_link in raw_links\n    ]\n\n    retu",
                      "children": [
                        {
                          "value": "nk[0]) for raw_l",
                          "children": [
                            {
                              "value": "nk[",
                              "children": []
                            },
                            {
                              "value": "0]) for raw_l",
                              "children": [
                                {
                                  "value": "]) for raw_",
                                  "children": [
                                    {
                                      "value": "]) for r",
                                      "children": []
                                    },
                                    {
                                      "value": "w",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "nk in raw_links\n    ]",
                          "children": [
                            {
                              "value": "n raw_li",
                              "children": []
                            },
                            {
                              "value": "]",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "ks\n\n\ndef fin",
              "children": [
                {
                  "value": "f fin",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "inks_in_file(filename: str) -> List[str]:\n    \"\"\"Find links in a file and return a list of URLs from text file.\"\"\"\n\n    with open(filename, mode='r', encoding='utf-8') as file:\n        readme = file.read()\n        index_section = readme.find('## Index')\n        if index_section == -1:\n            index_section = 0\n        content = readme[index_section:]\n\n    links = find_links_in_text(content)\n\n    return links\n\n\ndef che",
      "children": [
        {
          "value": "_in_file(filename:",
          "children": []
        },
        {
          "value": "str) -> List[s",
          "children": [
            {
              "value": "str) -> List[",
              "children": [
                {
                  "value": "str) ->",
                  "children": []
                },
                {
                  "value": "st[",
                  "children": [
                    {
                      "value": "st[",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "\"\"\"F",
          "children": [
            {
              "value": "\"\"\"F",
              "children": [
                {
                  "value": "",
                  "children": []
                },
                {
                  "value": "\"\"\"F",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": [
                        {
                          "value": "\"\"\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "nks in a file and return a list of URLs from text file.\"\"\"\n\n    with open(filename, mode='r', encoding='utf-8') as file:\n        readme = file.read()\n        index_section = readme.find('## Index')\n        if index_section == -1:\n            index_section = 0\n        content = readme[index_section:]\n\n    links = find_links_in_text(content)\n\n    return links\n\n\ndef che",
          "children": [
            {
              "value": "nks in a file and return a list of URLs from text file.\"\"\"\n\n    with",
              "children": [
                {
                  "value": "nks in a file and return a list of URLs from text file.\"\"\"\n\n    with",
                  "children": [
                    {
                      "value": "nks",
                      "children": []
                    },
                    {
                      "value": "in a file and return a list of URLs from text file.\"\"\"\n\n    w",
                      "children": []
                    },
                    {
                      "value": "ith",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "filename, mode='r', encoding='utf-8') as file:\n        readme = file.read()\n        index_section = readme.find('## Index')\n        if index_section == -1:\n            index_section = 0\n        content = readme[index_section:]\n\n    link",
              "children": [
                {
                  "value": "ame, mode='r', encoding='utf-8') as file:",
                  "children": [
                    {
                      "value": "ame, mode='r', encoding='utf-8') as file:",
                      "children": [
                        {
                          "value": "ame, mode='r', encoding='utf-8') as file:",
                          "children": [
                            {
                              "value": "ame, mode='r', encoding='utf-8') as file:",
                              "children": [
                                {
                                  "value": "ame,",
                                  "children": []
                                },
                                {
                                  "value": "mode='r', encoding='utf-8') as file:",
                                  "children": [
                                    {
                                      "value": "mode='r'",
                                      "children": []
                                    },
                                    {
                                      "value": "encoding",
                                      "children": [
                                        {
                                          "value": "enco",
                                          "children": []
                                        },
                                        {
                                          "value": "ing",
                                          "children": [
                                            {
                                              "value": "i",
                                              "children": []
                                            },
                                            {
                                              "value": "n",
                                              "children": []
                                            },
                                            {
                                              "value": "g",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "utf-8') as file:",
                                      "children": [
                                        {
                                          "value": "utf-8')",
                                          "children": []
                                        },
                                        {
                                          "value": "s file:",
                                          "children": [
                                            {
                                              "value": "s",
                                              "children": []
                                            },
                                            {
                                              "value": "file",
                                              "children": []
                                            },
                                            {
                                              "value": ":",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "",
                              "children": [
                                {
                                  "value": "",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "ile.read()\n        index_section = readme.find('## Index')\n        if index_section == -1:\n            index_section = 0\n        content = readme[index_section:]\n\n    link",
                  "children": [
                    {
                      "value": "ile.read()\n        i",
                      "children": [
                        {
                          "value": "ile.read()\n        i",
                          "children": [
                            {
                              "value": "ile.re",
                              "children": []
                            },
                            {
                              "value": ")\n        i",
                              "children": [
                                {
                                  "value": ")",
                                  "children": [
                                    {
                                      "value": ")",
                                      "children": []
                                    },
                                    {
                                      "value": "",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "i",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "ion = readme.find('## Index')\n        i",
                      "children": [
                        {
                          "value": "ion = readme.find('## Index')\n        i",
                          "children": [
                            {
                              "value": "ion = readme.",
                              "children": []
                            },
                            {
                              "value": "d('## Index')\n        i",
                              "children": [
                                {
                                  "value": "d('## Index",
                                  "children": [
                                    {
                                      "value": "d('##",
                                      "children": []
                                    },
                                    {
                                      "value": "ndex",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "')\n        i",
                                  "children": [
                                    {
                                      "value": ")",
                                      "children": [
                                        {
                                          "value": ")",
                                          "children": []
                                        },
                                        {
                                          "value": "",
                                          "children": []
                                        },
                                        {
                                          "value": "",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "ection == -1:\n            index_section = 0\n        c",
                      "children": [
                        {
                          "value": "ion == -1:",
                          "children": [
                            {
                              "value": "ion == -1:",
                              "children": []
                            },
                            {
                              "value": "",
                              "children": [
                                {
                                  "value": "",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "ion = 0\n        c",
                          "children": [
                            {
                              "value": "ion = 0\n        c",
                              "children": [
                                {
                                  "value": "ion = 0\n        c",
                                  "children": [
                                    {
                                      "value": "ion = 0",
                                      "children": []
                                    },
                                    {
                                      "value": "c",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "readme[index_section:]\n\n    link",
                      "children": [
                        {
                          "value": "readme[index_section:]\n\n    link",
                          "children": [
                            {
                              "value": "readme[",
                              "children": []
                            },
                            {
                              "value": "ex_section:]\n\n    link",
                              "children": [
                                {
                                  "value": "ex_sec",
                                  "children": []
                                },
                                {
                                  "value": "ion:]\n\n    lin",
                                  "children": [
                                    {
                                      "value": "ion:]\n\n    li",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "nd_links_in_text(content)\n\n    retu",
              "children": [
                {
                  "value": "nd_links_in_text(content)\n\n    retu",
                  "children": [
                    {
                      "value": "nd_li",
                      "children": []
                    },
                    {
                      "value": "_in_text(content)\n\n    retu",
                      "children": [
                        {
                          "value": "_in_text(content)",
                          "children": []
                        },
                        {
                          "value": "retu",
                          "children": [
                            {
                              "value": "ret",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "ks\n\n\ndef che",
              "children": [
                {
                  "value": "f che",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "duplicate_links(links: List[str]) -> Tuple[bool, List]:\n    \"\"\"Check for duplicated links.\n\n    Returns a tuple with True or False and duplicate list.\n    \"\"\"\n\n    seen = {}\n    duplicates = []\n    has_duplicate = False\n\n    for link in links:\n        link = link.rstrip('/')\n        if link not in seen:\n            seen[link] = 1\n        else:\n            if seen[link] == 1:\n                duplicates.append(link)\n\n    if duplicates:\n        has_duplicate = True\n\n    return (has_duplicate, duplicates)\n\n\ndef fak",
      "children": [
        {
          "value": "icate_links(links: Li",
          "children": []
        },
        {
          "value": "st[str]) -> Tuple[",
          "children": [
            {
              "value": "t[str]) -> Tuple",
              "children": [
                {
                  "value": "t[str",
                  "children": []
                },
                {
                  "value": "-> Tuple",
                  "children": [
                    {
                      "value": "-> Tuple",
                      "children": [
                        {
                          "value": "->",
                          "children": []
                        },
                        {
                          "value": "Tuple",
                          "children": [
                            {
                              "value": "upl",
                              "children": [
                                {
                                  "value": "upl",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": ", List]:\n    \"\"\"C",
          "children": [
            {
              "value": ", List]:\n    \"\"\"C",
              "children": [
                {
                  "value": ", Lis",
                  "children": []
                },
                {
                  "value": "t]:\n    \"\"\"C",
                  "children": [
                    {
                      "value": "]:",
                      "children": [
                        {
                          "value": "]:",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "\"\"\"",
                      "children": [
                        {
                          "value": "\"\"\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "or duplicated links.\n\n    Returns a tuple with True or False and duplicate list.\n    \"\"\"\n\n    seen = {}\n    duplicates = []\n    has_duplicate = False\n\n    for link in links:\n        link = link.rstrip('/')\n        if link not in seen:\n            seen[link] = 1\n        else:\n            if seen[link] == 1:\n                duplicates.append(link)\n\n    if duplicates:\n        has_duplicate = True\n\n    return (has_duplicate, duplicates)\n\n\ndef fak",
          "children": [
            {
              "value": "or duplicated links.\n\n    Returns a tuple with True or False and duplicate list.\n    \"\"\"\n\n    seen",
              "children": [
                {
                  "value": "or duplicated links.\n\n    Returns a tuple with True or False and duplicate list.\n    \"\"\"\n\n    seen",
                  "children": [
                    {
                      "value": "or",
                      "children": []
                    },
                    {
                      "value": "duplicated links.\n\n    Returns a tuple with True or False and duplicate list.\n    \"\"\"\n\n    s",
                      "children": []
                    },
                    {
                      "value": "een",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "dupli",
              "children": [
                {
                  "value": "dupli",
                  "children": [
                    {
                      "value": "",
                      "children": []
                    },
                    {
                      "value": "li",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "= []\n    has_d",
              "children": [
                {
                  "value": "= []\n    has_d",
                  "children": [
                    {
                      "value": "= []",
                      "children": []
                    },
                    {
                      "value": "_d",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "ate = False\n\n    for",
              "children": [
                {
                  "value": "ate = False\n\n    for",
                  "children": [
                    {
                      "value": "ate = False",
                      "children": []
                    },
                    {
                      "value": "for",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "n links:\n        link = link.rstrip('/')\n        if link not in seen:\n            seen[link] = 1\n        else:\n            if seen[link] == 1:\n                duplicates.append(link)\n\n    if d",
              "children": [
                {
                  "value": "nks:",
                  "children": []
                },
                {
                  "value": "",
                  "children": []
                },
                {
                  "value": "k.rstrip('/')\n        if link not in seen:\n            seen[link] = 1\n        else:\n            if seen[link] == 1:\n                duplicates.append(link)\n\n    if d",
                  "children": [
                    {
                      "value": "k.rstrip('/')\n        i",
                      "children": [
                        {
                          "value": "k.rstrip('/')\n        i",
                          "children": [
                            {
                              "value": "k.rs",
                              "children": []
                            },
                            {
                              "value": "p('/')\n        i",
                              "children": [
                                {
                                  "value": "p('/')",
                                  "children": [
                                    {
                                      "value": "p('/",
                                      "children": []
                                    },
                                    {
                                      "value": ")",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "i",
                                  "children": [
                                    {
                                      "value": "",
                                      "children": [
                                        {
                                          "value": "",
                                          "children": []
                                        },
                                        {
                                          "value": "",
                                          "children": []
                                        },
                                        {
                                          "value": "",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "t in seen:\n            seen[link] = 1\n        else:\n            if seen[link] == 1:\n                duplicates.append(link)\n\n    if d",
                      "children": [
                        {
                          "value": "n seen:",
                          "children": [
                            {
                              "value": "n se",
                              "children": []
                            },
                            {
                              "value": "",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "= 1\n        e",
                          "children": [
                            {
                              "value": "= 1\n        e",
                              "children": [
                                {
                                  "value": "= 1\n        e",
                                  "children": [
                                    {
                                      "value": "= 1",
                                      "children": [
                                        {
                                          "value": "= 1",
                                          "children": []
                                        },
                                        {
                                          "value": "",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "e",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "if seen[link] == 1:\n                duplicates.append(link)\n\n    if d",
                          "children": [
                            {
                              "value": "nk] == 1:\n                duplicates.append(link)\n\n    if d",
                              "children": [
                                {
                                  "value": "nk] == 1:\n                duplicates.append(link)\n\n    if d",
                                  "children": [
                                    {
                                      "value": "== 1:",
                                      "children": [
                                        {
                                          "value": "== 1:",
                                          "children": [
                                            {
                                              "value": "==",
                                              "children": []
                                            },
                                            {
                                              "value": ":",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": ".append(link)\n\n    if d",
                                      "children": [
                                        {
                                          "value": ".append(link)\n\n    if d",
                                          "children": [
                                            {
                                              "value": ".append(link)\n\n    if d",
                                              "children": [
                                                {
                                                  "value": ".append(link)",
                                                  "children": [
                                                    {
                                                      "value": ".append(li",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "k)",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "if d",
                                                  "children": [
                                                    {
                                                      "value": "if",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "tes:\n        has_duplicate = True\n\n    retu",
              "children": [
                {
                  "value": ":",
                  "children": []
                },
                {
                  "value": "ate = True\n\n    retu",
                  "children": [
                    {
                      "value": "ate = True\n\n    retu",
                      "children": [
                        {
                          "value": "ate = True\n\n    retu",
                          "children": [
                            {
                              "value": "ate = True",
                              "children": []
                            },
                            {
                              "value": "retu",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "s_duplicate, duplicates)\n\n\ndef fak",
              "children": [
                {
                  "value": "cate, duplicates)\n\n\ndef fak",
                  "children": [
                    {
                      "value": "ate, duplicat",
                      "children": []
                    },
                    {
                      "value": ")\n\n\ndef fa",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "ser_agent() -> str:\n    \"\"\"Faking user agent as some hosting services block not-whitelisted UA.\"\"\"\n\n    user_agents = [\n        'Mozilla/5.0 (Windows NT 6.2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1467.0 Safari/537.36',\n        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/605.1.15 (KHTML, like Gecko)',\n        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36',\n        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36',\n    ]\n\n    return random.choice(user_agents)\n\n\ndef get",
      "children": [
        {
          "value": "agent() -> str:",
          "children": []
        },
        {
          "value": "",
          "children": []
        },
        {
          "value": "\"\"F",
          "children": [
            {
              "value": "\"\"F",
              "children": []
            }
          ]
        },
        {
          "value": "user agent as some hosting services block not-whitelisted UA.\"\"\"\n\n    user_agents = [\n        'Mozilla/5.0 (Windows NT 6.2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1467.0 Safari/537.36',\n        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/605.1.15 (KHTML, like Gecko)',\n        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36',\n        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36',\n    ]\n\n    return random.choice(user_agents)\n\n\ndef get",
          "children": [
            {
              "value": "user agent as some hosting services block not-whitelisted UA.\"\"\"\n\n    user",
              "children": [
                {
                  "value": "user agent as some hosting services block not-whitelisted UA.\"\"\"\n\n    user",
                  "children": [
                    {
                      "value": "use",
                      "children": []
                    },
                    {
                      "value": "r agent as some hosting services block not-whitelisted UA.\"\"\"\n\n    u",
                      "children": []
                    },
                    {
                      "value": "ser",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "s = [\n        'Mozilla/5.0 (Windows NT 6.2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1467.0 Safari/537.36',\n        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/605.1.15 (KHTML, like Gecko)',\n        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36',\n        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36',\n    ]\n\n    retu",
              "children": [
                {
                  "value": "s = [\n        'Mozilla/5.0 (Windows NT 6.2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1467.0 Safari/537.36',\n        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/605.1.15 (KHTML, like Gecko)',\n        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36',\n        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36',\n    ]\n\n    retu",
                  "children": [
                    {
                      "value": "s = [",
                      "children": []
                    },
                    {
                      "value": "'Mozilla/5.0 (Windows NT 6.2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1467.0 Safari/537.36',\n        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/605.1.15 (KHTML, like Gecko)',\n        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36',\n        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36',\n    ]\n\n    retu",
                      "children": [
                        {
                          "value": ".0 (Windows NT 6.2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1467.0 Safari/537.36',",
                          "children": [
                            {
                              "value": ".",
                              "children": []
                            },
                            {
                              "value": "0 (Windows NT 6.2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1467.0 Safari/537.36',",
                              "children": []
                            },
                            {
                              "value": "",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": ".0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/605.1.15 (KHTML, like Gecko)',",
                          "children": [
                            {
                              "value": ".",
                              "children": []
                            },
                            {
                              "value": "0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/605.1.15 (KHTML, like Gecko)',",
                              "children": []
                            },
                            {
                              "value": "",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": ".0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36',",
                          "children": [
                            {
                              "value": ".",
                              "children": []
                            },
                            {
                              "value": "0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36',",
                              "children": []
                            },
                            {
                              "value": "",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": ".0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36',\n    ]",
                          "children": [
                            {
                              "value": ".",
                              "children": []
                            },
                            {
                              "value": "0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36',\n    ]",
                              "children": []
                            },
                            {
                              "value": "",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "dom.choice(user_agents)\n\n\ndef get",
              "children": [
                {
                  "value": "ice(user_agents)\n\n\ndef get",
                  "children": [
                    {
                      "value": "ice(user_agen",
                      "children": [
                        {
                          "value": "ice(us",
                          "children": []
                        },
                        {
                          "value": "r_agen",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "ts)\n\n\ndef get",
                      "children": [
                        {
                          "value": "s)\n\n\ndef ge",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "st_from_link(link: str) -> str:\n\n    host = link.split('://', 1)[1] if '://' in link else link\n\n    # Remove routes, arguments and anchors\n    if '/' in host:\n        host = host.split('/', 1)[0]\n\n    elif '?' in host:\n        host = host.split('?', 1)[0]\n\n    elif '#' in host:\n        host = host.split('#', 1)[0]\n\n    return host\n\n\ndef has",
      "children": [
        {
          "value": "rom_link(link: str",
          "children": []
        },
        {
          "value": ") -> str:",
          "children": [
            {
              "value": "-> str:",
              "children": [
                {
                  "value": "->",
                  "children": []
                },
                {
                  "value": "r:",
                  "children": [
                    {
                      "value": "r:",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "hos",
          "children": [
            {
              "value": "hos",
              "children": []
            }
          ]
        },
        {
          "value": "k.split('://', 1)[1] if '://' in link else link\n\n    # Remove routes, arguments and anchors\n    if '/' in host:\n        host = host.split('/', 1)[0]\n\n    elif '?' in host:\n        host = host.split('?', 1)[0]\n\n    elif '#' in host:\n        host = host.split('#', 1)[0]\n\n    return host\n\n\ndef has",
          "children": [
            {
              "value": "k.split('://', 1)[1] if '://' in link else link\n\n    # Re",
              "children": [
                {
                  "value": "k.split('://', 1)[1] if '://' in link else link\n\n    # Re",
                  "children": [
                    {
                      "value": "k.sp",
                      "children": []
                    },
                    {
                      "value": "('://', 1)[1] if '://' in link else link\n\n    # Re",
                      "children": [
                        {
                          "value": "('://', 1)[1] if '://'",
                          "children": [
                            {
                              "value": "('://', 1)[1] if ':/",
                              "children": [
                                {
                                  "value": "('://', 1)",
                                  "children": [
                                    {
                                      "value": "(':/",
                                      "children": []
                                    },
                                    {
                                      "value": "', 1)",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "[1] if ':/",
                                  "children": [
                                    {
                                      "value": "1] if",
                                      "children": [
                                        {
                                          "value": "1",
                                          "children": []
                                        },
                                        {
                                          "value": "] i",
                                          "children": []
                                        },
                                        {
                                          "value": "f",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": ":",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "'",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "ink else link",
                          "children": [
                            {
                              "value": "ink e",
                              "children": [
                                {
                                  "value": "i",
                                  "children": []
                                },
                                {
                                  "value": "nk",
                                  "children": []
                                },
                                {
                                  "value": "e",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "link",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "# Re",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "outes, arguments and anchors\n    if '/",
              "children": []
            },
            {
              "value": "host:\n        host = host.split('/', 1)[0]\n\n    elif '?' in host:\n        host = host.split('?', 1)[0]\n\n    elif '#' in host:\n        host = host.split('#', 1)[0]\n\n    retu",
              "children": [
                {
                  "value": "t:",
                  "children": [
                    {
                      "value": "t:",
                      "children": [
                        {
                          "value": "t",
                          "children": []
                        },
                        {
                          "value": ":",
                          "children": []
                        },
                        {
                          "value": "",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "t.split('/', 1)[0]\n\n    elif",
                  "children": [
                    {
                      "value": "t.split('/', 1)[0]\n\n    elif",
                      "children": [
                        {
                          "value": "t.split('/', 1)[0]\n\n    elif",
                          "children": [
                            {
                              "value": "t.sp",
                              "children": []
                            },
                            {
                              "value": "('/', 1)[0]\n\n    elif",
                              "children": [
                                {
                                  "value": "('/', 1)[0]\n\n    e",
                                  "children": [
                                    {
                                      "value": "('/', 1)[0",
                                      "children": [
                                        {
                                          "value": "('/'",
                                          "children": []
                                        },
                                        {
                                          "value": "1)[0",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "]\n\n    e",
                                      "children": [
                                        {
                                          "value": "",
                                          "children": [
                                            {
                                              "value": "",
                                              "children": []
                                            },
                                            {
                                              "value": "",
                                              "children": []
                                            },
                                            {
                                              "value": "",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "i",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "n host:\n        host = host.split('?', 1)[0]\n\n    elif",
                  "children": [
                    {
                      "value": "t:",
                      "children": [
                        {
                          "value": "t:",
                          "children": [
                            {
                              "value": "t",
                              "children": []
                            },
                            {
                              "value": ":",
                              "children": []
                            },
                            {
                              "value": "",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "t.split('?', 1)[0]\n\n    elif",
                      "children": [
                        {
                          "value": "t.split('?', 1)[0]\n\n    elif",
                          "children": [
                            {
                              "value": "t.split('?', 1)[0]\n\n    elif",
                              "children": [
                                {
                                  "value": "t.sp",
                                  "children": []
                                },
                                {
                                  "value": "('?', 1)[0]\n\n    elif",
                                  "children": [
                                    {
                                      "value": "('?', 1)[0]\n\n    e",
                                      "children": [
                                        {
                                          "value": "('?', 1)[0",
                                          "children": [
                                            {
                                              "value": "('?'",
                                              "children": []
                                            },
                                            {
                                              "value": "1)[0",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "]\n\n    e",
                                          "children": [
                                            {
                                              "value": "",
                                              "children": [
                                                {
                                                  "value": "",
                                                  "children": []
                                                },
                                                {
                                                  "value": "",
                                                  "children": []
                                                },
                                                {
                                                  "value": "",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "i",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "n host:\n        host = host.split('#', 1)[0]\n\n    retu",
                  "children": [
                    {
                      "value": "t:",
                      "children": [
                        {
                          "value": "t:",
                          "children": [
                            {
                              "value": "t",
                              "children": []
                            },
                            {
                              "value": ":",
                              "children": []
                            },
                            {
                              "value": "",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "t.split('#', 1)[0]\n\n    retu",
                      "children": [
                        {
                          "value": "t.split('#', 1)[0]\n\n    retu",
                          "children": [
                            {
                              "value": "t.split('#', 1)[0]\n\n    retu",
                              "children": [
                                {
                                  "value": "t.sp",
                                  "children": []
                                },
                                {
                                  "value": "('#', 1)[0]\n\n    retu",
                                  "children": [
                                    {
                                      "value": "('#', 1)[0]\n\n    r",
                                      "children": [
                                        {
                                          "value": "('#', 1)[0",
                                          "children": [
                                            {
                                              "value": "('#'",
                                              "children": []
                                            },
                                            {
                                              "value": "1)[0",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "]\n\n    r",
                                          "children": [
                                            {
                                              "value": "",
                                              "children": [
                                                {
                                                  "value": "",
                                                  "children": []
                                                },
                                                {
                                                  "value": "",
                                                  "children": []
                                                },
                                                {
                                                  "value": "",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "t",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "t\n\n\ndef has",
              "children": [
                {
                  "value": "has",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "oudflare_protection(resp: Response) -> bool:\n    \"\"\"Checks if there is any cloudflare protection in the response.\n\n    Cloudflare implements multiple network protections on a given link,\n    this script tries to detect if any of them exist in the response from request.\n\n    Common protections have the following HTTP code as a response:\n        - 403: When host header is missing or incorrect (and more)\n        - 503: When DDOS protection exists\n\n    See more about it at:\n        - https://support.cloudflare.com/hc/en-us/articles/115003014512-4xx-Client-Error\n        - https://support.cloudflare.com/hc/en-us/articles/115003011431-Troubleshooting-Cloudflare-5XX-errors\n        - https://www.cloudflare.com/ddos/\n        - https://superuser.com/a/888526\n\n    Discussions in issues and pull requests:\n        - https://github.com/public-apis/public-apis/pull/2409\n        - https://github.com/public-apis/public-apis/issues/2960 \n    \"\"\"\n\n    code = resp.status_code\n    server = resp.headers.get('Server') or resp.headers.get('server')\n    cloudflare_flags = [\n        '403 Forbidden',\n        'cloudflare',\n        'Cloudflare',\n        'Security check',\n        'Please Wait... | Cloudflare',\n        'We are checking your browser...',\n        'Please stand by, while we are checking your browser...',\n        'Checking your browser before accessing',\n        'This process is automatic.',\n        'Your browser will redirect to your requested content shortly.',\n        'Please allow up to 5 seconds',\n        'DDoS protection by',\n        'Ray ID:',\n        'Cloudflare Ray ID:',\n        '_cf_chl',\n        '_cf_chl_opt',\n        '__cf_chl_rt_tk',\n        'cf-spinner-please-wait',\n        'cf-spinner-redirecting'\n    ]\n\n    if code in [403, 503] and server == 'cloudflare':\n        html = resp.text\n\n        flags_found = [flag in html for flag in cloudflare_flags]\n        any_flag_found = any(flags_found)\n\n        if any_flag_found:\n            return True\n\n    return False\n\n\ndef che",
      "children": [
        {
          "value": "lare_protection(resp: Res",
          "children": []
        },
        {
          "value": "ponse) -> bool:",
          "children": [
            {
              "value": "onse) -> bool:",
              "children": [
                {
                  "value": "onse",
                  "children": []
                },
                {
                  "value": "-> bool:",
                  "children": [
                    {
                      "value": "-> bool:",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "\"\"\"C",
          "children": [
            {
              "value": "\"\"\"C",
              "children": []
            }
          ]
        },
        {
          "value": "if there is any cloudflare protection in the response.\n\n    Cloudflare implements multiple network protections on a given link,\n    this script tries to detect if any of them exist in the response from request.\n\n    Common protections have the following HTTP code as a response:\n        - 403: When host header is missing or incorrect (and more)\n        - 503: When DDOS protection exists\n\n    See more about it at:\n        - https://support.cloudflare.com/hc/en-us/articles/115003014512-4xx-Client-Error\n        - https://support.cloudflare.com/hc/en-us/articles/115003011431-Troubleshooting-Cloudflare-5XX-errors\n        - https://www.cloudflare.com/ddos/\n        - https://superuser.com/a/888526\n\n    Discussions in issues and pull requests:\n        - https://github.com/public-apis/public-apis/pull/2409\n        - https://github.com/public-apis/public-apis/issues/2960 \n    \"\"\"\n\n    code = resp.status_code\n    server = resp.headers.get('Server') or resp.headers.get('server')\n    cloudflare_flags = [\n        '403 Forbidden',\n        'cloudflare',\n        'Cloudflare',\n        'Security check',\n        'Please Wait... | Cloudflare',\n        'We are checking your browser...',\n        'Please stand by, while we are checking your browser...',\n        'Checking your browser before accessing',\n        'This process is automatic.',\n        'Your browser will redirect to your requested content shortly.',\n        'Please allow up to 5 seconds',\n        'DDoS protection by',\n        'Ray ID:',\n        'Cloudflare Ray ID:',\n        '_cf_chl',\n        '_cf_chl_opt',\n        '__cf_chl_rt_tk',\n        'cf-spinner-please-wait',\n        'cf-spinner-redirecting'\n    ]\n\n    if code in [403, 503] and server == 'cloudflare':\n        html = resp.text\n\n        flags_found = [flag in html for flag in cloudflare_flags]\n        any_flag_found = any(flags_found)\n\n        if any_flag_found:\n            return True\n\n    return False\n\n\ndef che",
          "children": [
            {
              "value": "if there is any cloudflare protection in the response.\n\n    Cloudflare implements multiple network protections on a given link,\n    this script tries to detect if any of them exist in the response from request.\n\n    Common protections have the following HTTP code as a response:\n        - 403: When host header is missing or incorrect (and more)\n        - 503: When DDOS protection exists\n\n    See more about it at:\n        - https://support.cloudflare.com/hc/en-us/articles/115003014512-4xx-Client-Error\n        - https://support.cloudflare.com/hc/en-us/articles/115003011431-Troubleshooting-Cloudflare-5XX-errors\n        - https://www.cloudflare.com/ddos/\n        - https://superuser.com/a/888526\n\n    Discussions in issues and pull requests:\n        - https://github.com/public-apis/public-apis/pull/2409\n        - https://github.com/public-apis/public-apis/issues/2960 \n    \"\"\"\n\n    code",
              "children": [
                {
                  "value": "if there is any cloudflare protection in the response.\n\n    Cloudflare implements multiple network protections on a given link,\n    this script tries to detect if any of them exist in the response from request.\n\n    Common protections have the following HTTP code as a response:\n        - 403: When host header is missing or incorrect (and more)\n        - 503: When DDOS protection exists\n\n    See more about it at:\n        - https://support.cloudflare.com/hc/en-us/articles/115003014512-4xx-Client-Error\n        - https://support.cloudflare.com/hc/en-us/articles/115003011431-Troubleshooting-Cloudflare-5XX-errors\n        - https://www.cloudflare.com/ddos/\n        - https://superuser.com/a/888526\n\n    Discussions in issues and pull requests:\n        - https://github.com/public-apis/public-apis/pull/2409\n        - https://github.com/public-apis/public-apis/issues/2960 \n    \"\"\"\n\n    code",
                  "children": [
                    {
                      "value": "if",
                      "children": []
                    },
                    {
                      "value": "there is any cloudflare protection in the response.\n\n    Cloudflare implements multiple network protections on a given link,\n    this script tries to detect if any of them exist in the response from request.\n\n    Common protections have the following HTTP code as a response:\n        - 403: When host header is missing or incorrect (and more)\n        - 503: When DDOS protection exists\n\n    See more about it at:\n        - https://support.cloudflare.com/hc/en-us/articles/115003014512-4xx-Client-Error\n        - https://support.cloudflare.com/hc/en-us/articles/115003011431-Troubleshooting-Cloudflare-5XX-errors\n        - https://www.cloudflare.com/ddos/\n        - https://superuser.com/a/888526\n\n    Discussions in issues and pull requests:\n        - https://github.com/public-apis/public-apis/pull/2409\n        - https://github.com/public-apis/public-apis/issues/2960 \n    \"\"\"\n\n    c",
                      "children": []
                    },
                    {
                      "value": "ode",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "p.status_code\n    serve",
              "children": [
                {
                  "value": "p.status_code\n    serve",
                  "children": [
                    {
                      "value": "p.st",
                      "children": []
                    },
                    {
                      "value": "s_code\n    serve",
                      "children": [
                        {
                          "value": "s_co",
                          "children": []
                        },
                        {
                          "value": "e\n    serve",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "esp.headers.get('Server') or resp.headers.get('server')\n    cloud",
              "children": [
                {
                  "value": "esp.headers.get('Server') or resp.headers.get('server')\n    cloud",
                  "children": [
                    {
                      "value": "esp.he",
                      "children": []
                    },
                    {
                      "value": "rs.get('Server') or resp.headers.get('server')\n    cloud",
                      "children": [
                        {
                          "value": "rs.get('Server') or resp.h",
                          "children": [
                            {
                              "value": "rs.get('Server')",
                              "children": [
                                {
                                  "value": "rs.get('Serv",
                                  "children": [
                                    {
                                      "value": "rs.g",
                                      "children": []
                                    },
                                    {
                                      "value": "t('Serv",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "r')",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "or resp.h",
                              "children": [
                                {
                                  "value": "or resp.",
                                  "children": [
                                    {
                                      "value": "o",
                                      "children": []
                                    },
                                    {
                                      "value": "r resp",
                                      "children": []
                                    },
                                    {
                                      "value": ".",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "rs.get('server')\n    cloud",
                          "children": [
                            {
                              "value": "rs.get('server')",
                              "children": [
                                {
                                  "value": "rs.get('serv",
                                  "children": [
                                    {
                                      "value": "rs.g",
                                      "children": []
                                    },
                                    {
                                      "value": "t('serv",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "r')",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "cloud",
                              "children": [
                                {
                                  "value": "clou",
                                  "children": [
                                    {
                                      "value": "",
                                      "children": []
                                    },
                                    {
                                      "value": "clo",
                                      "children": []
                                    },
                                    {
                                      "value": "u",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "_flags = [\n        '403 Forbidden',\n        'cloudflare',\n        'Cloudflare',\n        'Security check',\n        'Please Wait... | Cloudflare',\n        'We are checking your browser...',\n        'Please stand by, while we are checking your browser...',\n        'Checking your browser before accessing',\n        'This process is automatic.',\n        'Your browser will redirect to your requested content shortly.',\n        'Please allow up to 5 seconds',\n        'DDoS protection by',\n        'Ray ID:',\n        'Cloudflare Ray ID:',\n        '_cf_chl',\n        '_cf_chl_opt',\n        '__cf_chl_rt_tk',\n        'cf-spinner-please-wait',\n        'cf-spinner-redirecting'\n    ]\n\n    if c",
              "children": [
                {
                  "value": "_flags = [\n        '403 Forbidden',\n        'cloudflare',\n        'Cloudflare',\n        'Security check',\n        'Please Wait... | Cloudflare',\n        'We are checking your browser...',\n        'Please stand by, while we are checking your browser...',\n        'Checking your browser before accessing',\n        'This process is automatic.',\n        'Your browser will redirect to your requested content shortly.',\n        'Please allow up to 5 seconds',\n        'DDoS protection by',\n        'Ray ID:',\n        'Cloudflare Ray ID:',\n        '_cf_chl',\n        '_cf_chl_opt',\n        '__cf_chl_rt_tk',\n        'cf-spinner-please-wait',\n        'cf-spinner-redirecting'\n    ]\n\n    if c",
                  "children": [
                    {
                      "value": "_flags = [",
                      "children": []
                    },
                    {
                      "value": "'403 Forbidden',\n        'cloudflare',\n        'Cloudflare',\n        'Security check',\n        'Please Wait... | Cloudflare',\n        'We are checking your browser...',\n        'Please stand by, while we are checking your browser...',\n        'Checking your browser before accessing',\n        'This process is automatic.',\n        'Your browser will redirect to your requested content shortly.',\n        'Please allow up to 5 seconds',\n        'DDoS protection by',\n        'Ray ID:',\n        'Cloudflare Ray ID:',\n        '_cf_chl',\n        '_cf_chl_opt',\n        '__cf_chl_rt_tk',\n        'cf-spinner-please-wait',\n        'cf-spinner-redirecting'\n    ]\n\n    if c",
                      "children": [
                        {
                          "value": "dden',",
                          "children": [
                            {
                              "value": "d",
                              "children": []
                            },
                            {
                              "value": "den',",
                              "children": []
                            },
                            {
                              "value": "",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "e',",
                          "children": [
                            {
                              "value": "e",
                              "children": []
                            },
                            {
                              "value": "',",
                              "children": []
                            },
                            {
                              "value": "",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "e',",
                          "children": [
                            {
                              "value": "e",
                              "children": []
                            },
                            {
                              "value": "',",
                              "children": []
                            },
                            {
                              "value": "",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "check',",
                          "children": [
                            {
                              "value": "c",
                              "children": []
                            },
                            {
                              "value": "heck',",
                              "children": []
                            },
                            {
                              "value": "",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "it... | Cloudflare',",
                          "children": [
                            {
                              "value": "i",
                              "children": []
                            },
                            {
                              "value": "t... | Cloudflare',",
                              "children": []
                            },
                            {
                              "value": "",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "ecking your browser...',",
                          "children": [
                            {
                              "value": "e",
                              "children": []
                            },
                            {
                              "value": "cking your browser...',",
                              "children": []
                            },
                            {
                              "value": "",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "and by, while we are checking your browser...',",
                          "children": [
                            {
                              "value": "a",
                              "children": []
                            },
                            {
                              "value": "nd by, while we are checking your browser...',",
                              "children": []
                            },
                            {
                              "value": "",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "your browser before accessing',",
                          "children": [
                            {
                              "value": "y",
                              "children": []
                            },
                            {
                              "value": "our browser before accessing',",
                              "children": []
                            },
                            {
                              "value": "",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "ess is automatic.',",
                          "children": [
                            {
                              "value": "e",
                              "children": []
                            },
                            {
                              "value": "ss is automatic.',",
                              "children": []
                            },
                            {
                              "value": "",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "ser will redirect to your requested content shortly.',",
                          "children": [
                            {
                              "value": "s",
                              "children": []
                            },
                            {
                              "value": "er will redirect to your requested content shortly.',",
                              "children": []
                            },
                            {
                              "value": "",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "low up to 5 seconds',",
                          "children": [
                            {
                              "value": "l",
                              "children": []
                            },
                            {
                              "value": "ow up to 5 seconds',",
                              "children": []
                            },
                            {
                              "value": "",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "ection by',",
                          "children": [
                            {
                              "value": "e",
                              "children": []
                            },
                            {
                              "value": "ction by',",
                              "children": []
                            },
                            {
                              "value": "",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "",
                          "children": [
                            {
                              "value": "",
                              "children": []
                            },
                            {
                              "value": "",
                              "children": []
                            },
                            {
                              "value": "",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "e Ray ID:',",
                          "children": [
                            {
                              "value": "e",
                              "children": []
                            },
                            {
                              "value": "Ray ID:',",
                              "children": []
                            },
                            {
                              "value": "",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "",
                          "children": [
                            {
                              "value": "",
                              "children": []
                            },
                            {
                              "value": "",
                              "children": []
                            },
                            {
                              "value": "",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "pt',",
                          "children": [
                            {
                              "value": "p",
                              "children": []
                            },
                            {
                              "value": "t',",
                              "children": []
                            },
                            {
                              "value": "",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "rt_tk',",
                          "children": [
                            {
                              "value": "r",
                              "children": []
                            },
                            {
                              "value": "t_tk',",
                              "children": []
                            },
                            {
                              "value": "",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "r-please-wait',",
                          "children": [
                            {
                              "value": "r",
                              "children": []
                            },
                            {
                              "value": "-please-wait',",
                              "children": []
                            },
                            {
                              "value": "",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "r-redirecting'\n    ]",
                          "children": [
                            {
                              "value": "r",
                              "children": []
                            },
                            {
                              "value": "-redirecting'\n    ]",
                              "children": []
                            },
                            {
                              "value": "",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "[403, 503] and server == 'cloudflare':\n        html = resp.text\n\n        flags_found = [flag in html for flag in cloudflare_flags]\n        any_flag_found = any(flags_found)\n\n        if any_flag_found:\n            return True\n\n    retu",
              "children": [
                {
                  "value": "03, 503] and server == 'cloudflare':",
                  "children": [
                    {
                      "value": "03, 503] and serve",
                      "children": [
                        {
                          "value": "03,",
                          "children": []
                        },
                        {
                          "value": "and serve",
                          "children": [
                            {
                              "value": "and",
                              "children": []
                            },
                            {
                              "value": "erv",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "'cloudflare':",
                      "children": [
                        {
                          "value": "'cloud",
                          "children": []
                        },
                        {
                          "value": "e':",
                          "children": [
                            {
                              "value": "e",
                              "children": []
                            },
                            {
                              "value": "':",
                              "children": []
                            },
                            {
                              "value": "",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "p.text\n\n        flags_found = [flag in html for flag in cloudflare_flags]\n        any_flag_found = any(flags_found)\n\n        if any_flag_found:\n            return True\n\n    retu",
                  "children": [
                    {
                      "value": "p.text",
                      "children": [
                        {
                          "value": "p.text",
                          "children": [
                            {
                              "value": "p.te",
                              "children": []
                            },
                            {
                              "value": "",
                              "children": [
                                {
                                  "value": "",
                                  "children": []
                                },
                                {
                                  "value": "",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "d = [flag in html for flag in cloudflare_flags]\n        a",
                      "children": [
                        {
                          "value": "d = [flag in html for flag in cloudflare_flags]\n        a",
                          "children": [
                            {
                              "value": "d = [flag i",
                              "children": []
                            },
                            {
                              "value": "tml for flag in cloudflare_flags]\n        a",
                              "children": [
                                {
                                  "value": "ml for flag",
                                  "children": [
                                    {
                                      "value": "ml f",
                                      "children": []
                                    },
                                    {
                                      "value": "lag",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "n cloudflare_flags]",
                                  "children": [
                                    {
                                      "value": "oudf",
                                      "children": []
                                    },
                                    {
                                      "value": "_flags]",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "ound = any(flags_found)",
                      "children": [
                        {
                          "value": "ound = any(flags_found)",
                          "children": [
                            {
                              "value": "ound = any(fla",
                              "children": []
                            },
                            {
                              "value": "found)",
                              "children": [
                                {
                                  "value": "fou",
                                  "children": []
                                },
                                {
                                  "value": "nd)",
                                  "children": [
                                    {
                                      "value": "d)",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "g_found:\n            return True\n\n    retu",
                      "children": [
                        {
                          "value": "ound:",
                          "children": []
                        },
                        {
                          "value": "e\n\n    retu",
                          "children": [
                            {
                              "value": "e\n\n    retu",
                              "children": [
                                {
                                  "value": "retu",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "se\n\n\ndef che",
              "children": [
                {
                  "value": "f che",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "if_link_is_working(link: str) -> Tuple[bool, str]:\n    \"\"\"Checks if a link is working.\n\n    If an error is identified when the request for the link occurs,\n    the return will be a tuple with the first value True and the second\n    value a string containing the error message.\n\n    If no errors are identified, the return will be a tuple with the\n    first value False and the second an empty string.\n    \"\"\"\n\n    has_error = False\n    error_message = ''\n\n    try:\n        resp = requests.get(link, timeout=25, headers={\n            'User-Agent': fake_user_agent(),\n            'host': get_host_from_link(link)\n        })\n\n        code = resp.status_code\n\n        if code >= 400 and not has_cloudflare_protection(resp):\n            has_error = True\n            error_message = f'ERR:CLT: {code} : {link}'\n\n    except requests.exceptions.SSLError as error:\n        has_error = True\n        error_message = f'ERR:SSL: {error} : {link}'\n\n    except requests.exceptions.ConnectionError as error:\n        has_error = True\n        error_message = f'ERR:CNT: {error} : {link}'\n\n    except (TimeoutError, requests.exceptions.ConnectTimeout):\n        has_error = True\n        error_message = f'ERR:TMO: {link}'\n\n    except requests.exceptions.TooManyRedirects as error:\n        has_error = True\n        error_message = f'ERR:TMR: {error} : {link}'\n\n    except (Exception, requests.exceptions.RequestException) as error:\n        has_error = True\n        error_message = f'ERR:UKN: {error} : {link}'\n\n    return (has_error, error_message)\n\n\ndef che",
      "children": [
        {
          "value": "ink_is_working(link: str",
          "children": []
        },
        {
          "value": ") -> Tuple[",
          "children": [
            {
              "value": "-> Tuple",
              "children": [
                {
                  "value": "->",
                  "children": []
                },
                {
                  "value": "ple",
                  "children": [
                    {
                      "value": "ple",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": ", str]:\n    \"\"\"C",
          "children": [
            {
              "value": ", str]:\n    \"\"\"C",
              "children": [
                {
                  "value": ", str",
                  "children": []
                },
                {
                  "value": "]:\n    \"\"\"C",
                  "children": [
                    {
                      "value": ":",
                      "children": [
                        {
                          "value": ":",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "\"\"\"",
                      "children": [
                        {
                          "value": "\"\"\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "if a link is working.\n\n    If an error is identified when the request for the link occurs,\n    the return will be a tuple with the first value True and the second\n    value a string containing the error message.\n\n    If no errors are identified, the return will be a tuple with the\n    first value False and the second an empty string.\n    \"\"\"\n\n    has_error = False\n    error_message = ''\n\n    try:\n        resp = requests.get(link, timeout=25, headers={\n            'User-Agent': fake_user_agent(),\n            'host': get_host_from_link(link)\n        })\n\n        code = resp.status_code\n\n        if code >= 400 and not has_cloudflare_protection(resp):\n            has_error = True\n            error_message = f'ERR:CLT: {code} : {link}'\n\n    except requests.exceptions.SSLError as error:\n        has_error = True\n        error_message = f'ERR:SSL: {error} : {link}'\n\n    except requests.exceptions.ConnectionError as error:\n        has_error = True\n        error_message = f'ERR:CNT: {error} : {link}'\n\n    except (TimeoutError, requests.exceptions.ConnectTimeout):\n        has_error = True\n        error_message = f'ERR:TMO: {link}'\n\n    except requests.exceptions.TooManyRedirects as error:\n        has_error = True\n        error_message = f'ERR:TMR: {error} : {link}'\n\n    except (Exception, requests.exceptions.RequestException) as error:\n        has_error = True\n        error_message = f'ERR:UKN: {error} : {link}'\n\n    return (has_error, error_message)\n\n\ndef che",
          "children": [
            {
              "value": "if a link is working.\n\n    If an error is identified when the request for the link occurs,\n    the return will be a tuple with the first value True and the second\n    value a string containing the error message.\n\n    If no errors are identified, the return will be a tuple with the\n    first value False and the second an empty string.\n    \"\"\"\n\n    has_",
              "children": [
                {
                  "value": "if a link is working.\n\n    If an error is identified when the request for the link occurs,\n    the return will be a tuple with the first value True and the second\n    value a string containing the error message.\n\n    If no errors are identified, the return will be a tuple with the\n    first value False and the second an empty string.\n    \"\"\"\n\n    has_",
                  "children": [
                    {
                      "value": "if",
                      "children": []
                    },
                    {
                      "value": "a link is working.\n\n    If an error is identified when the request for the link occurs,\n    the return will be a tuple with the first value True and the second\n    value a string containing the error message.\n\n    If no errors are identified, the return will be a tuple with the\n    first value False and the second an empty string.\n    \"\"\"\n\n    h",
                      "children": []
                    },
                    {
                      "value": "as_",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "= False\n    error",
              "children": [
                {
                  "value": "= False\n    error",
                  "children": [
                    {
                      "value": "= False",
                      "children": []
                    },
                    {
                      "value": "error",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "age = ''\n\n    try:",
              "children": [
                {
                  "value": "age = ''\n\n    try:",
                  "children": [
                    {
                      "value": "age = ''",
                      "children": []
                    },
                    {
                      "value": "y:",
                      "children": [
                        {
                          "value": "y",
                          "children": []
                        },
                        {
                          "value": ":",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "resp = requests.get(link, timeout=25, headers={\n            'User-Agent': fake_user_agent(),\n            'host': get_host_from_link(link)\n        })\n\n        code = resp.status_code\n\n        if code >= 400 and not has_cloudflare_protection(resp):\n            has_error = True\n            error_message = f'ERR:CLT: {code} : {link}'\n\n    except requests.exceptions.SSLError as error:\n        has_error = True\n        error_message = f'ERR:SSL: {error} : {link}'\n\n    except requests.exceptions.ConnectionError as error:\n        has_error = True\n        error_message = f'ERR:CNT: {error} : {link}'\n\n    except (TimeoutError, requests.exceptions.ConnectTimeout):\n        has_error = True\n        error_message = f'ERR:TMO: {link}'\n\n    except requests.exceptions.TooManyRedirects as error:\n        has_error = True\n        error_message = f'ERR:TMR: {error} : {link}'\n\n    except (Exception, requests.exceptions.RequestException) as error:\n        has_error = True\n        error_message = f'ERR:UKN: {error} : {link}'\n\n    retu",
              "children": [
                {
                  "value": "uests.get(link, timeout=25, headers={\n            'User-Agent': fake_user_agent(),\n            'host': get_host_from_link(link)\n        })\n\n        code = resp.status_code\n\n        if code >= 400 and not has_cloudflare_protection(resp):\n            has_error = True\n            error_message = f'ERR:CLT: {code} : {link}'\n\n    exce",
                  "children": [
                    {
                      "value": "uests.get(link, timeout=25, headers={\n            'User-Agent': fake_user_agent(),\n            'host': get_host_from_link(link)\n        })",
                      "children": [
                        {
                          "value": "uests.get(link, timeout=25, headers={\n            'User-Agent': fake_user_agent(),\n            'host': get_host_from_link(link)\n        })",
                          "children": [
                            {
                              "value": "uest",
                              "children": []
                            },
                            {
                              "value": "et(link, timeout=25, headers={\n            'User-Agent': fake_user_agent(),\n            'host': get_host_from_link(link)\n        })",
                              "children": [
                                {
                                  "value": "et(link, tim",
                                  "children": [
                                    {
                                      "value": "et(link,",
                                      "children": []
                                    },
                                    {
                                      "value": "tim",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "eout=25, headers={\n            'User-Agent': fake_user_agent(),\n            'host': get_host_from_link(link)\n        })",
                                  "children": [
                                    {
                                      "value": "out=",
                                      "children": []
                                    },
                                    {
                                      "value": ", headers=",
                                      "children": [
                                        {
                                          "value": ", heade",
                                          "children": []
                                        },
                                        {
                                          "value": "s=",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "'User-Agent': fake_user_agent(),\n            'host': get_host_from_link(link)\n        })",
                                      "children": [
                                        {
                                          "value": "",
                                          "children": []
                                        },
                                        {
                                          "value": "'User-Agent': fake_user_agent(),\n            'host': get_host_from_link(link)\n        })",
                                          "children": [
                                            {
                                              "value": "t': fake_user_agent(),",
                                              "children": [
                                                {
                                                  "value": "t': fake_use",
                                                  "children": [
                                                    {
                                                      "value": "t",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "': fake_us",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "e",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "agent(),",
                                                  "children": [
                                                    {
                                                      "value": "agent(),",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "t_host_from_link(link)\n        }",
                                              "children": [
                                                {
                                                  "value": "t_host",
                                                  "children": [
                                                    {
                                                      "value": "t",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "_hos",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "t",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "rom_link(link)\n        }",
                                                  "children": [
                                                    {
                                                      "value": "rom_link(link)",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "}",
                                                      "children": [
                                                        {
                                                          "value": "",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "p.status_code",
                      "children": [
                        {
                          "value": "p.status_code",
                          "children": [
                            {
                              "value": "p.st",
                              "children": []
                            },
                            {
                              "value": "s_code",
                              "children": [
                                {
                                  "value": "s_co",
                                  "children": []
                                },
                                {
                                  "value": "e",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "400 and not has_cloudflare_protection(resp):\n            has_error = True\n            error_message = f'ERR:CLT: {code} : {link}'\n\n    exce",
                      "children": [
                        {
                          "value": "0 and not has_cloudflare_protection(resp):",
                          "children": [
                            {
                              "value": "0 and not h",
                              "children": [
                                {
                                  "value": "0 an",
                                  "children": []
                                },
                                {
                                  "value": "t h",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "oudflare_protection(resp):",
                              "children": [
                                {
                                  "value": "lare_protection(resp):",
                                  "children": [
                                    {
                                      "value": "lare_protection(resp):",
                                      "children": []
                                    },
                                    {
                                      "value": "",
                                      "children": [
                                        {
                                          "value": "",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "= True\n            error_message = f'ERR:CLT: {code} : {link}'\n\n    exce",
                          "children": [
                            {
                              "value": "= True",
                              "children": [
                                {
                                  "value": "= True",
                                  "children": [
                                    {
                                      "value": "= True",
                                      "children": []
                                    },
                                    {
                                      "value": "",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "age = f'ERR:CLT: {code} : {link}'\n\n    exce",
                              "children": [
                                {
                                  "value": "age = f'ERR:CLT: {code} : {link}'\n\n    exce",
                                  "children": [
                                    {
                                      "value": "age = f'ERR:C",
                                      "children": []
                                    },
                                    {
                                      "value": "{code} : {link}'\n\n    exce",
                                      "children": [
                                        {
                                          "value": "{",
                                          "children": []
                                        },
                                        {
                                          "value": "code} : {",
                                          "children": []
                                        },
                                        {
                                          "value": "link}'",
                                          "children": [
                                            {
                                              "value": "ink}",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "",
                                          "children": []
                                        },
                                        {
                                          "value": "exc",
                                          "children": [
                                            {
                                              "value": "ex",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "e",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "uests.exceptions.SSLError as error:\n        has_error = True\n        error_message = f'ERR:SSL: {error} : {link}'\n\n    exce",
                  "children": [
                    {
                      "value": "xceptions.SSLError as error:",
                      "children": [
                        {
                          "value": "xceptions.SSLError as error:",
                          "children": [
                            {
                              "value": "xceptions.SSLError",
                              "children": [
                                {
                                  "value": "xception",
                                  "children": []
                                },
                                {
                                  "value": ".SSLError",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "s error:",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "",
                          "children": [
                            {
                              "value": "",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "= True\n        error_message = f'ERR:SSL: {error} : {link}'\n\n    exce",
                      "children": [
                        {
                          "value": "= True\n        e",
                          "children": [
                            {
                              "value": "= True\n        e",
                              "children": [
                                {
                                  "value": "= True",
                                  "children": []
                                },
                                {
                                  "value": "e",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "age = f'ERR:SSL: {error} : {link}'\n\n    exce",
                          "children": [
                            {
                              "value": "age = f'ERR:SSL: {error} : {link}'\n\n    exce",
                              "children": [
                                {
                                  "value": "age = f'ERR:S",
                                  "children": []
                                },
                                {
                                  "value": "{error} : {link}'\n\n    exce",
                                  "children": [
                                    {
                                      "value": "{",
                                      "children": []
                                    },
                                    {
                                      "value": "error} :",
                                      "children": []
                                    },
                                    {
                                      "value": "{link}'",
                                      "children": [
                                        {
                                          "value": "link}",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "",
                                      "children": []
                                    },
                                    {
                                      "value": "exc",
                                      "children": [
                                        {
                                          "value": "ex",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "e",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "uests.exceptions.ConnectionError as error:\n        has_error = True\n        error_message = f'ERR:CNT: {error} : {link}'\n\n    exce",
                  "children": [
                    {
                      "value": "xceptions.ConnectionError as error:",
                      "children": [
                        {
                          "value": "xceptions.ConnectionError as error:",
                          "children": [
                            {
                              "value": "xceptions.Connectio",
                              "children": [
                                {
                                  "value": "xception",
                                  "children": []
                                },
                                {
                                  "value": ".Connectio",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "Error as error:",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "",
                          "children": [
                            {
                              "value": "",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "= True\n        error_message = f'ERR:CNT: {error} : {link}'\n\n    exce",
                      "children": [
                        {
                          "value": "= True\n        e",
                          "children": [
                            {
                              "value": "= True\n        e",
                              "children": [
                                {
                                  "value": "= True",
                                  "children": []
                                },
                                {
                                  "value": "e",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "age = f'ERR:CNT: {error} : {link}'\n\n    exce",
                          "children": [
                            {
                              "value": "age = f'ERR:CNT: {error} : {link}'\n\n    exce",
                              "children": [
                                {
                                  "value": "age = f'ERR:C",
                                  "children": []
                                },
                                {
                                  "value": "{error} : {link}'\n\n    exce",
                                  "children": [
                                    {
                                      "value": "{",
                                      "children": []
                                    },
                                    {
                                      "value": "error} :",
                                      "children": []
                                    },
                                    {
                                      "value": "{link}'",
                                      "children": [
                                        {
                                          "value": "link}",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "",
                                      "children": []
                                    },
                                    {
                                      "value": "exc",
                                      "children": [
                                        {
                                          "value": "ex",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "e",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "meoutError, requests.exceptions.ConnectTimeout):\n        has_error = True\n        error_message = f'ERR:TMO: {link}'\n\n    exce",
                  "children": [
                    {
                      "value": "ror, requests.exceptions.ConnectTimeout):",
                      "children": [
                        {
                          "value": "or, requests",
                          "children": []
                        },
                        {
                          "value": "xceptions.ConnectTimeout):",
                          "children": [
                            {
                              "value": "xceptions.ConnectTi",
                              "children": [
                                {
                                  "value": "xception",
                                  "children": []
                                },
                                {
                                  "value": ".ConnectTi",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "eout):",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "= True\n        error_message = f'ERR:TMO: {link}'\n\n    exce",
                      "children": [
                        {
                          "value": "= True\n        e",
                          "children": [
                            {
                              "value": "= True\n        e",
                              "children": [
                                {
                                  "value": "= True",
                                  "children": []
                                },
                                {
                                  "value": "e",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "age = f'ERR:TMO: {link}'\n\n    exce",
                          "children": [
                            {
                              "value": "age = f'ERR:TMO: {link}'\n\n    exce",
                              "children": [
                                {
                                  "value": "age = f'ERR:T",
                                  "children": []
                                },
                                {
                                  "value": "{link}'\n\n    exce",
                                  "children": [
                                    {
                                      "value": "{",
                                      "children": []
                                    },
                                    {
                                      "value": "link}'",
                                      "children": []
                                    },
                                    {
                                      "value": "exc",
                                      "children": [
                                        {
                                          "value": "ex",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "e",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "uests.exceptions.TooManyRedirects as error:\n        has_error = True\n        error_message = f'ERR:TMR: {error} : {link}'\n\n    exce",
                  "children": [
                    {
                      "value": "xceptions.TooManyRedirects as error:",
                      "children": [
                        {
                          "value": "xceptions.TooManyRedirects as error:",
                          "children": [
                            {
                              "value": "xceptions.TooManyRe",
                              "children": [
                                {
                                  "value": "xception",
                                  "children": []
                                },
                                {
                                  "value": ".TooManyRe",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "irects as error:",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "",
                          "children": [
                            {
                              "value": "",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "= True\n        error_message = f'ERR:TMR: {error} : {link}'\n\n    exce",
                      "children": [
                        {
                          "value": "= True\n        e",
                          "children": [
                            {
                              "value": "= True\n        e",
                              "children": [
                                {
                                  "value": "= True",
                                  "children": []
                                },
                                {
                                  "value": "e",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "age = f'ERR:TMR: {error} : {link}'\n\n    exce",
                          "children": [
                            {
                              "value": "age = f'ERR:TMR: {error} : {link}'\n\n    exce",
                              "children": [
                                {
                                  "value": "age = f'ERR:T",
                                  "children": []
                                },
                                {
                                  "value": "{error} : {link}'\n\n    exce",
                                  "children": [
                                    {
                                      "value": "{",
                                      "children": []
                                    },
                                    {
                                      "value": "error} :",
                                      "children": []
                                    },
                                    {
                                      "value": "{link}'",
                                      "children": [
                                        {
                                          "value": "link}",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "",
                                      "children": []
                                    },
                                    {
                                      "value": "exc",
                                      "children": [
                                        {
                                          "value": "ex",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "e",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "ception, requests.exceptions.RequestException) as error:\n        has_error = True\n        error_message = f'ERR:UKN: {error} : {link}'\n\n    retu",
                  "children": [
                    {
                      "value": ", requests.exceptions.RequestException) as error:",
                      "children": [
                        {
                          "value": ", requests.exceptions.RequestException) as error:",
                          "children": [
                            {
                              "value": "requests",
                              "children": []
                            },
                            {
                              "value": "xceptions.RequestException) as error",
                              "children": [
                                {
                                  "value": "xceptions.RequestEx",
                                  "children": [
                                    {
                                      "value": "xception",
                                      "children": []
                                    },
                                    {
                                      "value": ".RequestEx",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "eption) as error",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "",
                          "children": [
                            {
                              "value": "",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "= True\n        error_message = f'ERR:UKN: {error} : {link}'\n\n    retu",
                      "children": [
                        {
                          "value": "= True\n        e",
                          "children": [
                            {
                              "value": "= True\n        e",
                              "children": [
                                {
                                  "value": "= True",
                                  "children": []
                                },
                                {
                                  "value": "e",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "age = f'ERR:UKN: {error} : {link}'\n\n    retu",
                          "children": [
                            {
                              "value": "age = f'ERR:UKN: {error} : {link}'\n\n    retu",
                              "children": [
                                {
                                  "value": "age = f'ERR:U",
                                  "children": []
                                },
                                {
                                  "value": "{error} : {link}'\n\n    retu",
                                  "children": [
                                    {
                                      "value": "{",
                                      "children": []
                                    },
                                    {
                                      "value": "error} :",
                                      "children": []
                                    },
                                    {
                                      "value": "{link}'",
                                      "children": [
                                        {
                                          "value": "link}",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "",
                                      "children": []
                                    },
                                    {
                                      "value": "ret",
                                      "children": [
                                        {
                                          "value": "re",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "u",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "s_error, error_message)\n\n\ndef che",
              "children": [
                {
                  "value": ", error_message)\n\n\ndef che",
                  "children": [
                    {
                      "value": "error_me",
                      "children": []
                    },
                    {
                      "value": "age)\n\n\ndef ch",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "if_list_of_links_are_working(list_of_links: List[str]) -> List[str]:\n    error_messages = []\n    for link in list_of_links:\n        has_error, error_message = check_if_link_is_working(link)\n\n        if has_error:\n            error_messages.append(error_message)\n\n    return error_messages\n\n\ndef sta",
      "children": [
        {
          "value": "ist_of_links_are_working(list_of_l",
          "children": []
        },
        {
          "value": "inks: List[str]) -> List[s",
          "children": [
            {
              "value": "nks: List[str]) -> List[",
              "children": [
                {
                  "value": "nks: List[str",
                  "children": []
                },
                {
                  "value": "-> List[",
                  "children": [
                    {
                      "value": "-> List[",
                      "children": [
                        {
                          "value": "->",
                          "children": []
                        },
                        {
                          "value": "List[",
                          "children": [
                            {
                              "value": "ist",
                              "children": [
                                {
                                  "value": "ist",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "erro",
          "children": [
            {
              "value": "erro",
              "children": [
                {
                  "value": "",
                  "children": []
                },
                {
                  "value": "erro",
                  "children": [
                    {
                      "value": "err",
                      "children": [
                        {
                          "value": "err",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "ages = []\n    for link in list_of_links:\n        has_error, error_message = check_if_link_is_working(link)\n\n        if has_error:\n            error_messages.append(error_message)\n\n    return error_messages\n\n\ndef sta",
          "children": [
            {
              "value": "ages = []\n    for l",
              "children": [
                {
                  "value": "ages = []\n    for l",
                  "children": [
                    {
                      "value": "ages = []",
                      "children": []
                    },
                    {
                      "value": "l",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "n list_of_links:\n        has_error, error_message = check_if_link_is_working(link)\n\n        if has_error:\n            error_messages.append(error_message)\n\n    retu",
              "children": [
                {
                  "value": "st_o",
                  "children": []
                },
                {
                  "value": "nks:",
                  "children": []
                },
                {
                  "value": "error_message = check_if_link_is_working(link)\n\n        if has_error:\n            error_messages.append(error_message)\n\n    retu",
                  "children": [
                    {
                      "value": "error_message = check_if_link_is_working(link)",
                      "children": [
                        {
                          "value": "error_message = check_if_link_is_working(link)",
                          "children": [
                            {
                              "value": "error_message = check_i",
                              "children": [
                                {
                                  "value": "error_me",
                                  "children": []
                                },
                                {
                                  "value": "age = check_i",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "ink_is_working(link)",
                              "children": [
                                {
                                  "value": "ink_is_working(link)",
                                  "children": []
                                },
                                {
                                  "value": "",
                                  "children": [
                                    {
                                      "value": "",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "or:\n            error_messages.append(error_message)\n\n    retu",
                      "children": [
                        {
                          "value": "",
                          "children": []
                        },
                        {
                          "value": "ages.append(error_message)\n\n    retu",
                          "children": [
                            {
                              "value": "ages.append(error_message)\n\n    retu",
                              "children": [
                                {
                                  "value": "ages.append(error_message)\n\n    retu",
                                  "children": [
                                    {
                                      "value": "ages.append(error_mes",
                                      "children": [
                                        {
                                          "value": "ages.append(er",
                                          "children": []
                                        },
                                        {
                                          "value": "or_mes",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "sage)\n\n    retu",
                                      "children": [
                                        {
                                          "value": "age)\n\n    ret",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "or_messages\n\n\ndef sta",
              "children": [
                {
                  "value": "ages\n\n\ndef sta",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "duplicate_links_checker(links: List[str]) -> None:\n\n    print('Checking for duplicate links...')\n\n    has_duplicate_link, duplicates_links = check_duplicate_links(links)\n\n    if has_duplicate_link:\n        print(f'Found duplicate links:')\n\n        for duplicate_link in duplicates_links:\n            print(duplicate_link)\n\n        sys.exit(1)\n    else:\n        print('No duplicate links.')\n\n\ndef sta",
      "children": [
        {
          "value": "icate_links_checker(links: Li",
          "children": []
        },
        {
          "value": "st[str]) -> None:",
          "children": [
            {
              "value": "t[str]) -> None:",
              "children": [
                {
                  "value": "t[str",
                  "children": []
                },
                {
                  "value": "-> None:",
                  "children": [
                    {
                      "value": "-> None:",
                      "children": [
                        {
                          "value": "->",
                          "children": []
                        },
                        {
                          "value": "None:",
                          "children": [
                            {
                              "value": "one",
                              "children": [
                                {
                                  "value": "one",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "pri",
          "children": [
            {
              "value": "pri",
              "children": []
            }
          ]
        },
        {
          "value": "cking for duplicate links...')\n\n    has_duplicate_link, duplicates_links = check_duplicate_links(links)\n\n    if has_duplicate_link:\n        print(f'Found duplicate links:')\n\n        for duplicate_link in duplicates_links:\n            print(duplicate_link)\n\n        sys.exit(1)\n    else:\n        print('No duplicate links.')\n\n\ndef sta",
          "children": [
            {
              "value": "cking for duplicate links...')\n\n    has_",
              "children": [
                {
                  "value": "cking for duplicate links...')\n\n    has_",
                  "children": [
                    {
                      "value": "cking",
                      "children": []
                    },
                    {
                      "value": "for duplicate links...')\n\n    has_",
                      "children": [
                        {
                          "value": "for duplicate links...')\n\n    has",
                          "children": [
                            {
                              "value": "f",
                              "children": []
                            },
                            {
                              "value": "or duplicate links...')\n\n    ha",
                              "children": []
                            },
                            {
                              "value": "s",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "ate_link, duplicates_links = check_duplicate_links(links)\n\n    if h",
              "children": [
                {
                  "value": "ate_link, duplicates_links = check_duplicate_links(links)\n\n    if h",
                  "children": [
                    {
                      "value": "ate_link, duplicates_links = check_d",
                      "children": [
                        {
                          "value": "ate_link, duplicat",
                          "children": []
                        },
                        {
                          "value": "_links = check_d",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "icate_links(links)\n\n    if h",
                      "children": [
                        {
                          "value": "icate_links(links)",
                          "children": []
                        },
                        {
                          "value": "if h",
                          "children": [
                            {
                              "value": "if",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "licate_link:\n        print(f'Found duplicate links:')\n\n        for duplicate_link in duplicates_links:\n            print(duplicate_link)\n\n        sys.exit(1)\n    else:\n        print('No duplicate links.')\n\n\ndef sta",
              "children": [
                {
                  "value": "ate_link:",
                  "children": []
                },
                {
                  "value": "und duplicate links:')\n\n        for duplicate_link in duplicates_links:\n            print(duplicate_link)\n\n        sys.exit(1)\n    else:",
                  "children": [
                    {
                      "value": "und duplicate links:')",
                      "children": [
                        {
                          "value": "und duplicate links:')",
                          "children": [
                            {
                              "value": "und d",
                              "children": []
                            },
                            {
                              "value": "uplicate links:')",
                              "children": [
                                {
                                  "value": "plicate links:')",
                                  "children": [
                                    {
                                      "value": "pl",
                                      "children": []
                                    },
                                    {
                                      "value": "icate links:')",
                                      "children": []
                                    },
                                    {
                                      "value": "",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "ate_link in duplicates_links:\n            print(duplicate_link)",
                      "children": [
                        {
                          "value": "link in duplic",
                          "children": []
                        },
                        {
                          "value": "_links:",
                          "children": []
                        },
                        {
                          "value": "icate_link)",
                          "children": [
                            {
                              "value": "icate_link)",
                              "children": [
                                {
                                  "value": "icate_link)",
                                  "children": [
                                    {
                                      "value": "icate",
                                      "children": []
                                    },
                                    {
                                      "value": "_link)",
                                      "children": [
                                        {
                                          "value": "link)",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": ")\n    else:",
                      "children": [
                        {
                          "value": ")\n    else:",
                          "children": [
                            {
                              "value": ")\n    el",
                              "children": [
                                {
                                  "value": ")",
                                  "children": []
                                },
                                {
                                  "value": "el",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "se:",
                              "children": [
                                {
                                  "value": "e",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "print('No duplicate links.')\n\n\ndef sta",
                  "children": [
                    {
                      "value": "duplicate links.')\n\n\ndef sta",
                      "children": [
                        {
                          "value": "duplicate links.')\n\n\ndef sta",
                          "children": [
                            {
                              "value": "duplicate links.')\n\n\ndef sta",
                              "children": [
                                {
                                  "value": "dupli",
                                  "children": []
                                },
                                {
                                  "value": "cate links.')\n\n\ndef sta",
                                  "children": [
                                    {
                                      "value": "ate links.')\n\n\ndef st",
                                      "children": [
                                        {
                                          "value": "a",
                                          "children": []
                                        },
                                        {
                                          "value": "te links.')\n\n\ndef s",
                                          "children": []
                                        },
                                        {
                                          "value": "t",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "links_working_checker(links: List[str]) -> None:\n\n    print(f'Checking if {len(links)} links are working...')\n\n    errors = check_if_list_of_links_are_working(links)\n    if errors:\n\n        num_errors = len(errors)\n        print(f'Apparently {num_errors} links are not working properly. See in:')\n\n        for error_message in errors:\n            print(error_message)\n\n        sys.exit(1)\n\n\ndef mai",
      "children": [
        {
          "value": "s_working_checker(links: Li",
          "children": []
        },
        {
          "value": "st[str]) -> None:",
          "children": [
            {
              "value": "t[str]) -> None:",
              "children": [
                {
                  "value": "t[str",
                  "children": []
                },
                {
                  "value": "-> None:",
                  "children": [
                    {
                      "value": "-> None:",
                      "children": [
                        {
                          "value": "->",
                          "children": []
                        },
                        {
                          "value": "None:",
                          "children": [
                            {
                              "value": "one",
                              "children": [
                                {
                                  "value": "one",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "pri",
          "children": [
            {
              "value": "pri",
              "children": []
            }
          ]
        },
        {
          "value": "ecking if {len(links)} links are working...')\n\n    errors = check_if_list_of_links_are_working(links)\n    if errors:\n\n        num_errors = len(errors)\n        print(f'Apparently {num_errors} links are not working properly. See in:')\n\n        for error_message in errors:\n            print(error_message)\n\n        sys.exit(1)\n\n\ndef mai",
          "children": [
            {
              "value": "ecking if {len(links)} links are working...')\n\n    erro",
              "children": [
                {
                  "value": "ecking if {len(links)} links are working...')\n\n    erro",
                  "children": [
                    {
                      "value": "eckin",
                      "children": []
                    },
                    {
                      "value": "g if {len(links)} links are working...')\n\n    erro",
                      "children": [
                        {
                          "value": "if {len(links)} links are working...')\n\n    err",
                          "children": [
                            {
                              "value": "i",
                              "children": []
                            },
                            {
                              "value": "f {len(links",
                              "children": []
                            },
                            {
                              "value": ")} links are",
                              "children": [
                                {
                                  "value": "} links ar",
                                  "children": [
                                    {
                                      "value": "} l",
                                      "children": []
                                    },
                                    {
                                      "value": "inks ar",
                                      "children": [
                                        {
                                          "value": "nks a",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "working...')\n\n    er",
                              "children": []
                            },
                            {
                              "value": "r",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "heck_if_list_of_links_are_working(links)\n    if er",
              "children": [
                {
                  "value": "heck_if_list_of_links_are_working(links)\n    if er",
                  "children": [
                    {
                      "value": "heck_i",
                      "children": []
                    },
                    {
                      "value": "ist_of_links_are_working(links)\n    if er",
                      "children": [
                        {
                          "value": "ist_of_links_are_working(links)",
                          "children": []
                        },
                        {
                          "value": "if er",
                          "children": [
                            {
                              "value": "if e",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "num_errors = len(errors)\n        print(f'Apparently {num_errors} links are not working properly. See in:')\n\n        for error_message in errors:\n            print(error_message)\n\n        sys.exit(1)\n\n\ndef mai",
              "children": [
                {
                  "value": "",
                  "children": []
                },
                {
                  "value": "= len(errors)\n        print(f'Apparently {num_errors} links are not working properly. See in:')\n\n        for error_message in errors:\n            print(error_message)\n\n        sys.exit(1)\n\n\ndef mai",
                  "children": [
                    {
                      "value": "= len(errors)\n        p",
                      "children": [
                        {
                          "value": "= len(errors)\n        p",
                          "children": [
                            {
                              "value": "= len(err",
                              "children": []
                            },
                            {
                              "value": ")\n        p",
                              "children": [
                                {
                                  "value": ")",
                                  "children": []
                                },
                                {
                                  "value": "p",
                                  "children": [
                                    {
                                      "value": "",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "parently {num_errors} links are not working properly. See in:')",
                      "children": [
                        {
                          "value": "parently {num_errors} links are not working properly. See in:')",
                          "children": [
                            {
                              "value": "paren",
                              "children": []
                            },
                            {
                              "value": "tly {num_errors} links are not working properly. See in:')",
                              "children": [
                                {
                                  "value": "ly {num_errors} links are not working properly. See in:')",
                                  "children": [
                                    {
                                      "value": "ly",
                                      "children": []
                                    },
                                    {
                                      "value": "{num_error",
                                      "children": []
                                    },
                                    {
                                      "value": "s} links are",
                                      "children": [
                                        {
                                          "value": "} links ar",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "not working properly. See in:')",
                                      "children": []
                                    },
                                    {
                                      "value": "",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "message in errors:\n            print(error_message)",
                      "children": [
                        {
                          "value": "age in errors",
                          "children": []
                        },
                        {
                          "value": "",
                          "children": []
                        },
                        {
                          "value": "r_message)",
                          "children": [
                            {
                              "value": "r_message)",
                              "children": [
                                {
                                  "value": "r_message)",
                                  "children": [
                                    {
                                      "value": "r_mes",
                                      "children": []
                                    },
                                    {
                                      "value": "sage)",
                                      "children": [
                                        {
                                          "value": "age)",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": ")\n\n\ndef mai",
                      "children": [
                        {
                          "value": ")\n\n\ndef mai",
                          "children": [
                            {
                              "value": ")\n\n\ndef",
                              "children": [
                                {
                                  "value": ")",
                                  "children": []
                                },
                                {
                                  "value": "def",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "mai",
                              "children": [
                                {
                                  "value": "a",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "ilename: str, only_duplicate_links_checker: bool) -> None:\n\n    links = find_links_in_file(filename)\n\n    start_duplicate_links_checker(links)\n\n    if not only_duplicate_links_checker:\n        start_links_working_checker(links)\n\n\nif __na",
      "children": [
        {
          "value": "ame:",
          "children": []
        },
        {
          "value": "str, only_duplicate_links_checker: bool) -> None:",
          "children": [
            {
              "value": "str, only_dup",
              "children": [
                {
                  "value": "str, onl",
                  "children": []
                },
                {
                  "value": "dup",
                  "children": [
                    {
                      "value": "dup",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "cate_links_checker: bool) -> None:",
              "children": [
                {
                  "value": "cate_links_checker: bool) ->",
                  "children": []
                },
                {
                  "value": "one:",
                  "children": [
                    {
                      "value": "one:",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "lin",
          "children": [
            {
              "value": "lin",
              "children": []
            }
          ]
        },
        {
          "value": "nd_links_in_file(filename)\n\n    start_duplicate_links_checker(links)\n\n    if not only_duplicate_links_checker:\n        start_links_working_checker(links)\n\n\nif __na",
          "children": [
            {
              "value": "nd_links_in_file(filename)\n\n    star",
              "children": [
                {
                  "value": "nd_links_in_file(filename)\n\n    star",
                  "children": [
                    {
                      "value": "nd_li",
                      "children": []
                    },
                    {
                      "value": "_in_file(filename)\n\n    star",
                      "children": [
                        {
                          "value": "_in_file(filename)",
                          "children": []
                        },
                        {
                          "value": "star",
                          "children": [
                            {
                              "value": "sta",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "icate_links_checker(links)\n\n    if n",
              "children": [
                {
                  "value": "icate_links_checker(links)\n\n    if n",
                  "children": [
                    {
                      "value": "icate_links_checker(links)",
                      "children": []
                    },
                    {
                      "value": "if n",
                      "children": [
                        {
                          "value": "if",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "y_duplicate_links_checker:\n        start_links_working_checker(links)\n\n\nif __na",
              "children": [
                {
                  "value": "uplicate_links_checker:",
                  "children": [
                    {
                      "value": "cate_links_checker:",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "s_working_checker(links)\n\n\nif __na",
                  "children": [
                    {
                      "value": "s_working_checker(links)\n\n\nif __na",
                      "children": [
                        {
                          "value": "s_working_checker(links)\n\n\nif __na",
                          "children": [
                            {
                              "value": "s_working_checker(links)",
                              "children": []
                            },
                            {
                              "value": "if __na",
                              "children": [
                                {
                                  "value": "f __n",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "_ == '__main__':\n    num_args = len(sys.argv)\n    only_duplicate_links_checker = False\n\n    if num_args < 2:\n        print('No .md file passed')\n        sys.exit(1)\n    elif num_args == 3:\n        third_arg = sys.argv[2].lower()\n\n        if third_arg == '-odlc' or third_arg == '--only_duplicate_links_checker':\n            only_duplicate_links_checker = True\n        else:\n            print(f'Third invalid argument. Usage: python {__file__} [-odlc | --only_duplicate_links_checker]')\n            sys.exit(1)\n\n    filename = sys.argv[1]\n\n    main(filename, only_duplicate_links_checker)",
      "children": [
        {
          "value": "= '__main__':\n    num_",
          "children": [
            {
              "value": "= '__mai",
              "children": []
            },
            {
              "value": ":\n    num_",
              "children": [
                {
                  "value": ":",
                  "children": []
                },
                {
                  "value": "num",
                  "children": []
                },
                {
                  "value": "_",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "len(sys.argv)\n    only_duplicate_links_checker = False\n\n    if num_args < 2:\n        print('No .md file passed')\n        sys.exit(1)\n    elif num_args == 3:\n        third_arg = sys.argv[2].lower()\n\n        if third_arg == '-odlc' or third_arg == '--only_duplicate_links_checker':\n            only_duplicate_links_checker = True\n        else:\n            print(f'Third invalid argument. Usage: python {__file__} [-odlc | --only_duplicate_links_checker]')\n            sys.exit(1)\n\n    filename = sys.argv[1]\n\n    main(filename, only_duplicate_links_checker)",
          "children": [
            {
              "value": "len(sys.argv)\n    only_",
              "children": [
                {
                  "value": "len(sys.argv)\n    only_",
                  "children": [
                    {
                      "value": "len(sys",
                      "children": []
                    },
                    {
                      "value": "gv)\n    only_",
                      "children": [
                        {
                          "value": "gv)",
                          "children": []
                        },
                        {
                          "value": "only_",
                          "children": [
                            {
                              "value": "only",
                              "children": [
                                {
                                  "value": "",
                                  "children": []
                                },
                                {
                                  "value": "only",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "cate_links_checker = False\n\n    if n",
              "children": [
                {
                  "value": "cate_links_checker = False\n\n    if n",
                  "children": [
                    {
                      "value": "cate_links_checker = False",
                      "children": []
                    },
                    {
                      "value": "if n",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "s < 2:\n        print('No .md file passed')\n        sys.exit(1)\n    elif num_args == 3:\n        third_arg = sys.argv[2].lower()\n\n        if third_arg == '-odlc' or third_arg == '--only_duplicate_links_checker':\n            only_duplicate_links_checker = True\n        else:\n            print(f'Third invalid argument. Usage: python {__file__} [-odlc | --only_duplicate_links_checker]')\n            sys.exit(1)\n\n    file",
              "children": [
                {
                  "value": "2:",
                  "children": [
                    {
                      "value": "2:",
                      "children": []
                    },
                    {
                      "value": "",
                      "children": []
                    }
                  ]
                },
                {
                  "value": ".md file passed')\n        sys.exit(1)\n    elif",
                  "children": [
                    {
                      "value": ".md file passed')\n        s",
                      "children": [
                        {
                          "value": ".md file passed')\n        s",
                          "children": [
                            {
                              "value": ".md f",
                              "children": []
                            },
                            {
                              "value": "ile passed')\n        s",
                              "children": [
                                {
                                  "value": "le passed')",
                                  "children": [
                                    {
                                      "value": "l",
                                      "children": []
                                    },
                                    {
                                      "value": "e passed')",
                                      "children": []
                                    },
                                    {
                                      "value": "",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": ")\n    elif",
                      "children": [
                        {
                          "value": ")\n    elif",
                          "children": [
                            {
                              "value": ")\n    el",
                              "children": [
                                {
                                  "value": ")",
                                  "children": []
                                },
                                {
                                  "value": "el",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "if",
                              "children": [
                                {
                                  "value": "f",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "rgs == 3:\n        third_arg = sys.argv[2].lower()\n\n        if third_arg == '-odlc' or third_arg == '--only_duplicate_links_checker':\n            only_duplicate_links_checker = True\n        else:\n            print(f'Third invalid argument. Usage: python {__file__} [-odlc | --only_duplicate_links_checker]')\n            sys.exit(1)\n\n    file",
                  "children": [
                    {
                      "value": "= 3:",
                      "children": [
                        {
                          "value": "= 3:",
                          "children": []
                        },
                        {
                          "value": "",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "= sys.argv[2].lower()\n\n        if third_arg == '-odlc' or third_arg == '--only_duplicate_links_checker':\n            only_duplicate_links_checker = True\n        else:\n            print(f'Third invalid argument. Usage: python {__file__} [-odlc | --only_duplicate_links_checker]')\n            sys.exit(1)\n\n    file",
                      "children": [
                        {
                          "value": "= sys.argv[2].lower()",
                          "children": [
                            {
                              "value": "= sys.argv[2].lower()",
                              "children": [
                                {
                                  "value": "= sys.arg",
                                  "children": []
                                },
                                {
                                  "value": "].lower()",
                                  "children": [
                                    {
                                      "value": "].lower()",
                                      "children": [
                                        {
                                          "value": "].lower()",
                                          "children": [
                                            {
                                              "value": "].lower(",
                                              "children": [
                                                {
                                                  "value": "].l",
                                                  "children": []
                                                },
                                                {
                                                  "value": "wer(",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "rg == '-odlc' or third_arg == '--only_duplicate_links_checker':\n            only_duplicate_links_checker = True\n        else:\n            print(f'Third invalid argument. Usage: python {__file__} [-odlc | --only_duplicate_links_checker]')\n            sys.exit(1)\n\n    file",
                          "children": [
                            {
                              "value": "== '-odlc' or third_arg == '--only_duplicate_links_checker':",
                              "children": [
                                {
                                  "value": "== '-odlc' or third_",
                                  "children": [
                                    {
                                      "value": "== '-odlc",
                                      "children": []
                                    },
                                    {
                                      "value": "third_",
                                      "children": [
                                        {
                                          "value": "",
                                          "children": []
                                        },
                                        {
                                          "value": "third",
                                          "children": []
                                        },
                                        {
                                          "value": "_",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "== '--only_duplicate_links_checker':",
                                  "children": [
                                    {
                                      "value": "== '--onl",
                                      "children": []
                                    },
                                    {
                                      "value": "plicate_links_checker':",
                                      "children": [
                                        {
                                          "value": "p",
                                          "children": []
                                        },
                                        {
                                          "value": "licate_links_checker':",
                                          "children": []
                                        },
                                        {
                                          "value": "",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "cate_links_checker = True\n        e",
                              "children": [
                                {
                                  "value": "cate_links_checker = True\n        e",
                                  "children": [
                                    {
                                      "value": "cate_links_checker = True\n        e",
                                      "children": [
                                        {
                                          "value": "cate_links_checker = True",
                                          "children": []
                                        },
                                        {
                                          "value": "e",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "print(f'Third invalid argument. Usage: python {__file__} [-odlc | --only_duplicate_links_checker]')\n            sys.exit(1)\n\n    file",
                              "children": [
                                {
                                  "value": "ird invalid argument. Usage: python {__file__} [-odlc | --only_duplicate_links_checker]')\n            sys.exit(1)\n\n    file",
                                  "children": [
                                    {
                                      "value": "ird invalid argument. Usage: python {__file__} [-odlc | --only_duplicate_links_checker]')",
                                      "children": [
                                        {
                                          "value": "ird invalid argument. Usage: python {__file__} [-odlc | --only_duplicate_links_checker]')",
                                          "children": [
                                            {
                                              "value": "ird i",
                                              "children": []
                                            },
                                            {
                                              "value": "nvalid argument. Usage: python {__file__} [-odlc | --only_duplicate_links_checker]')",
                                              "children": [
                                                {
                                                  "value": "valid argument. Usage: python {__file__} [-odlc | --only_duplicate_links_checker]')",
                                                  "children": [
                                                    {
                                                      "value": "va",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "lid argument. Usage: python {__file__}",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "[-odlc |",
                                                      "children": [
                                                        {
                                                          "value": "[-odlc |",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "--only_duplicate_links_checker]')",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": ")\n\n    file",
                                      "children": [
                                        {
                                          "value": ")\n\n    file",
                                          "children": [
                                            {
                                              "value": ")\n\n    f",
                                              "children": [
                                                {
                                                  "value": ")",
                                                  "children": []
                                                },
                                                {
                                                  "value": "f",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "ile",
                                              "children": [
                                                {
                                                  "value": "l",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "sys.argv[1]\n\n    main",
              "children": [
                {
                  "value": "sys.argv[1]\n\n    main",
                  "children": [
                    {
                      "value": "sys.arg",
                      "children": []
                    },
                    {
                      "value": "]\n\n    main",
                      "children": [
                        {
                          "value": "]\n\n    m",
                          "children": [
                            {
                              "value": "]",
                              "children": []
                            },
                            {
                              "value": "m",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "i",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "ame, only_duplicate_links_checker)",
              "children": [
                {
                  "value": "ame, only_duplicate_links_checker)",
                  "children": [
                    {
                      "value": "ame,",
                      "children": []
                    },
                    {
                      "value": "only_duplicate_links_checker)",
                      "children": [
                        {
                          "value": "only_dup",
                          "children": []
                        },
                        {
                          "value": "cate_links_checker)",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}