{
  "value": "from timeit import timeit\n\n\ndef get_set_bits_count_using_brian_kernighans_algorithm(number: int) -> int:\n    \"\"\"\n    Count the number of set bits in a 32 bit integer\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(25)\n    3\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(37)\n    3\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(21)\n    3\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(58)\n    4\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(0)\n    0\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(256)\n    1\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: the value of input must not be negative\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"the value of input must not be negative\")\n    result = 0\n    while number:\n        number &= number - 1\n        result += 1\n    return result\n\n\ndef get_set_bits_count_using_modulo_operator(number: int) -> int:\n    \"\"\"\n    Count the number of set bits in a 32 bit integer\n    >>> get_set_bits_count_using_modulo_operator(25)\n    3\n    >>> get_set_bits_count_using_modulo_operator(37)\n    3\n    >>> get_set_bits_count_using_modulo_operator(21)\n    3\n    >>> get_set_bits_count_using_modulo_operator(58)\n    4\n    >>> get_set_bits_count_using_modulo_operator(0)\n    0\n    >>> get_set_bits_count_using_modulo_operator(256)\n    1\n    >>> get_set_bits_count_using_modulo_operator(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: the value of input must not be negative\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"the value of input must not be negative\")\n    result = 0\n    while number:\n        if number % 2 == 1:\n            result += 1\n        number >>= 1\n    return result\n\n\ndef benchmark() -> None:\n    \"\"\"\n    Benchmark code for comparing 2 functions, with different length int values.\n    Brian Kernighan's algorithm is consistently faster than using modulo_operator.\n    \"\"\"\n\n    def do_benchmark(number: int) -> None:\n        setup = \"import __main__ as z\"\n        print(f\"Benchmark when {number = }:\")\n        print(f\"{get_set_bits_count_using_modulo_operator(number) = }\")\n        timing = timeit(\n            f\"z.get_set_bits_count_using_modulo_operator({number})\", setup=setup\n        )\n        print(f\"timeit() runs in {timing} seconds\")\n        print(f\"{get_set_bits_count_using_brian_kernighans_algorithm(number) = }\")\n        timing = timeit(\n            f\"z.get_set_bits_count_using_brian_kernighans_algorithm({number})\",\n            setup=setup,\n        )\n        print(f\"timeit() runs in {timing} seconds\")\n\n    for number in (25, 37, 58, 0):\n        do_benchmark(number)\n        print()\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n    benchmark()",
  "children": [
    {
      "value": "from timeit import timeit",
      "children": [
        {
          "value": "timeit",
          "children": [
            {
              "value": "timeit",
              "children": []
            }
          ]
        },
        {
          "value": "timeit",
          "children": [
            {
              "value": "timeit",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "def get_set_bits_count_using_brian_kernighans_algorithm(number: int) -> int:\n    \"\"\"\n    Count the number of set bits in a 32 bit integer\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(25)\n    3\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(37)\n    3\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(21)\n    3\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(58)\n    4\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(0)\n    0\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(256)\n    1\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: the value of input must not be negative\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"the value of input must not be negative\")\n    result = 0\n    while number:\n        number &= number - 1\n        result += 1\n    return result",
      "children": [
        {
          "value": "get_set_bits_count_using_brian_kernighans_algorithm",
          "children": []
        },
        {
          "value": "(number: int)",
          "children": [
            {
              "value": "number: int",
              "children": [
                {
                  "value": "number",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "int",
          "children": [
            {
              "value": "int",
              "children": []
            }
          ]
        },
        {
          "value": "\"\"\"\n    Count the number of set bits in a 32 bit integer\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(25)\n    3\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(37)\n    3\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(21)\n    3\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(58)\n    4\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(0)\n    0\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(256)\n    1\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: the value of input must not be negative\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"the value of input must not be negative\")\n    result = 0\n    while number:\n        number &= number - 1\n        result += 1\n    return result",
          "children": [
            {
              "value": "\"\"\"\n    Count the number of set bits in a 32 bit integer\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(25)\n    3\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(37)\n    3\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(21)\n    3\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(58)\n    4\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(0)\n    0\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(256)\n    1\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: the value of input must not be negative\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    Count the number of set bits in a 32 bit integer\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(25)\n    3\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(37)\n    3\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(21)\n    3\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(58)\n    4\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(0)\n    0\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(256)\n    1\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: the value of input must not be negative\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Count the number of set bits in a 32 bit integer\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(25)\n    3\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(37)\n    3\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(21)\n    3\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(58)\n    4\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(0)\n    0\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(256)\n    1\n    >>> get_set_bits_count_using_brian_kernighans_algorithm(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: the value of input must not be negative",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "if number < 0:\n        raise ValueError(\"the value of input must not be negative\")",
              "children": [
                {
                  "value": "number < 0",
                  "children": [
                    {
                      "value": "number",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "raise ValueError(\"the value of input must not be negative\")",
                  "children": [
                    {
                      "value": "raise ValueError(\"the value of input must not be negative\")",
                      "children": [
                        {
                          "value": "ValueError(\"the value of input must not be negative\")",
                          "children": [
                            {
                              "value": "ValueError",
                              "children": []
                            },
                            {
                              "value": "(\"the value of input must not be negative\")",
                              "children": [
                                {
                                  "value": "\"the value of input must not be negative\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "the value of input must not be negative",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "result = 0",
              "children": [
                {
                  "value": "result = 0",
                  "children": [
                    {
                      "value": "result",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "while number:\n        number &= number - 1\n        result += 1",
              "children": [
                {
                  "value": "number",
                  "children": []
                },
                {
                  "value": "number &= number - 1\n        result += 1",
                  "children": [
                    {
                      "value": "number &= number - 1",
                      "children": [
                        {
                          "value": "number &= number - 1",
                          "children": [
                            {
                              "value": "number",
                              "children": []
                            },
                            {
                              "value": "number - 1",
                              "children": [
                                {
                                  "value": "number",
                                  "children": []
                                },
                                {
                                  "value": "1",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "result += 1",
                      "children": [
                        {
                          "value": "result += 1",
                          "children": [
                            {
                              "value": "result",
                              "children": []
                            },
                            {
                              "value": "1",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "return result",
              "children": [
                {
                  "value": "result",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def get_set_bits_count_using_modulo_operator(number: int) -> int:\n    \"\"\"\n    Count the number of set bits in a 32 bit integer\n    >>> get_set_bits_count_using_modulo_operator(25)\n    3\n    >>> get_set_bits_count_using_modulo_operator(37)\n    3\n    >>> get_set_bits_count_using_modulo_operator(21)\n    3\n    >>> get_set_bits_count_using_modulo_operator(58)\n    4\n    >>> get_set_bits_count_using_modulo_operator(0)\n    0\n    >>> get_set_bits_count_using_modulo_operator(256)\n    1\n    >>> get_set_bits_count_using_modulo_operator(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: the value of input must not be negative\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"the value of input must not be negative\")\n    result = 0\n    while number:\n        if number % 2 == 1:\n            result += 1\n        number >>= 1\n    return result",
      "children": [
        {
          "value": "get_set_bits_count_using_modulo_operator",
          "children": []
        },
        {
          "value": "(number: int)",
          "children": [
            {
              "value": "number: int",
              "children": [
                {
                  "value": "number",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "int",
          "children": [
            {
              "value": "int",
              "children": []
            }
          ]
        },
        {
          "value": "\"\"\"\n    Count the number of set bits in a 32 bit integer\n    >>> get_set_bits_count_using_modulo_operator(25)\n    3\n    >>> get_set_bits_count_using_modulo_operator(37)\n    3\n    >>> get_set_bits_count_using_modulo_operator(21)\n    3\n    >>> get_set_bits_count_using_modulo_operator(58)\n    4\n    >>> get_set_bits_count_using_modulo_operator(0)\n    0\n    >>> get_set_bits_count_using_modulo_operator(256)\n    1\n    >>> get_set_bits_count_using_modulo_operator(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: the value of input must not be negative\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"the value of input must not be negative\")\n    result = 0\n    while number:\n        if number % 2 == 1:\n            result += 1\n        number >>= 1\n    return result",
          "children": [
            {
              "value": "\"\"\"\n    Count the number of set bits in a 32 bit integer\n    >>> get_set_bits_count_using_modulo_operator(25)\n    3\n    >>> get_set_bits_count_using_modulo_operator(37)\n    3\n    >>> get_set_bits_count_using_modulo_operator(21)\n    3\n    >>> get_set_bits_count_using_modulo_operator(58)\n    4\n    >>> get_set_bits_count_using_modulo_operator(0)\n    0\n    >>> get_set_bits_count_using_modulo_operator(256)\n    1\n    >>> get_set_bits_count_using_modulo_operator(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: the value of input must not be negative\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    Count the number of set bits in a 32 bit integer\n    >>> get_set_bits_count_using_modulo_operator(25)\n    3\n    >>> get_set_bits_count_using_modulo_operator(37)\n    3\n    >>> get_set_bits_count_using_modulo_operator(21)\n    3\n    >>> get_set_bits_count_using_modulo_operator(58)\n    4\n    >>> get_set_bits_count_using_modulo_operator(0)\n    0\n    >>> get_set_bits_count_using_modulo_operator(256)\n    1\n    >>> get_set_bits_count_using_modulo_operator(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: the value of input must not be negative\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Count the number of set bits in a 32 bit integer\n    >>> get_set_bits_count_using_modulo_operator(25)\n    3\n    >>> get_set_bits_count_using_modulo_operator(37)\n    3\n    >>> get_set_bits_count_using_modulo_operator(21)\n    3\n    >>> get_set_bits_count_using_modulo_operator(58)\n    4\n    >>> get_set_bits_count_using_modulo_operator(0)\n    0\n    >>> get_set_bits_count_using_modulo_operator(256)\n    1\n    >>> get_set_bits_count_using_modulo_operator(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: the value of input must not be negative",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "if number < 0:\n        raise ValueError(\"the value of input must not be negative\")",
              "children": [
                {
                  "value": "number < 0",
                  "children": [
                    {
                      "value": "number",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "raise ValueError(\"the value of input must not be negative\")",
                  "children": [
                    {
                      "value": "raise ValueError(\"the value of input must not be negative\")",
                      "children": [
                        {
                          "value": "ValueError(\"the value of input must not be negative\")",
                          "children": [
                            {
                              "value": "ValueError",
                              "children": []
                            },
                            {
                              "value": "(\"the value of input must not be negative\")",
                              "children": [
                                {
                                  "value": "\"the value of input must not be negative\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "the value of input must not be negative",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "result = 0",
              "children": [
                {
                  "value": "result = 0",
                  "children": [
                    {
                      "value": "result",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "while number:\n        if number % 2 == 1:\n            result += 1\n        number >>= 1",
              "children": [
                {
                  "value": "number",
                  "children": []
                },
                {
                  "value": "if number % 2 == 1:\n            result += 1\n        number >>= 1",
                  "children": [
                    {
                      "value": "if number % 2 == 1:\n            result += 1",
                      "children": [
                        {
                          "value": "number % 2 == 1",
                          "children": [
                            {
                              "value": "number % 2",
                              "children": [
                                {
                                  "value": "number",
                                  "children": []
                                },
                                {
                                  "value": "2",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "1",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "result += 1",
                          "children": [
                            {
                              "value": "result += 1",
                              "children": [
                                {
                                  "value": "result += 1",
                                  "children": [
                                    {
                                      "value": "result",
                                      "children": []
                                    },
                                    {
                                      "value": "1",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "number >>= 1",
                      "children": [
                        {
                          "value": "number >>= 1",
                          "children": [
                            {
                              "value": "number",
                              "children": []
                            },
                            {
                              "value": "1",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "return result",
              "children": [
                {
                  "value": "result",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def benchmark() -> None:\n    \"\"\"\n    Benchmark code for comparing 2 functions, with different length int values.\n    Brian Kernighan's algorithm is consistently faster than using modulo_operator.\n    \"\"\"\n\n    def do_benchmark(number: int) -> None:\n        setup = \"import __main__ as z\"\n        print(f\"Benchmark when {number = }:\")\n        print(f\"{get_set_bits_count_using_modulo_operator(number) = }\")\n        timing = timeit(\n            f\"z.get_set_bits_count_using_modulo_operator({number})\", setup=setup\n        )\n        print(f\"timeit() runs in {timing} seconds\")\n        print(f\"{get_set_bits_count_using_brian_kernighans_algorithm(number) = }\")\n        timing = timeit(\n            f\"z.get_set_bits_count_using_brian_kernighans_algorithm({number})\",\n            setup=setup,\n        )\n        print(f\"timeit() runs in {timing} seconds\")\n\n    for number in (25, 37, 58, 0):\n        do_benchmark(number)\n        print()",
      "children": [
        {
          "value": "benchmark",
          "children": []
        },
        {
          "value": "()",
          "children": []
        },
        {
          "value": "None",
          "children": [
            {
              "value": "None",
              "children": []
            }
          ]
        },
        {
          "value": "\"\"\"\n    Benchmark code for comparing 2 functions, with different length int values.\n    Brian Kernighan's algorithm is consistently faster than using modulo_operator.\n    \"\"\"\n\n    def do_benchmark(number: int) -> None:\n        setup = \"import __main__ as z\"\n        print(f\"Benchmark when {number = }:\")\n        print(f\"{get_set_bits_count_using_modulo_operator(number) = }\")\n        timing = timeit(\n            f\"z.get_set_bits_count_using_modulo_operator({number})\", setup=setup\n        )\n        print(f\"timeit() runs in {timing} seconds\")\n        print(f\"{get_set_bits_count_using_brian_kernighans_algorithm(number) = }\")\n        timing = timeit(\n            f\"z.get_set_bits_count_using_brian_kernighans_algorithm({number})\",\n            setup=setup,\n        )\n        print(f\"timeit() runs in {timing} seconds\")\n\n    for number in (25, 37, 58, 0):\n        do_benchmark(number)\n        print()",
          "children": [
            {
              "value": "\"\"\"\n    Benchmark code for comparing 2 functions, with different length int values.\n    Brian Kernighan's algorithm is consistently faster than using modulo_operator.\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    Benchmark code for comparing 2 functions, with different length int values.\n    Brian Kernighan's algorithm is consistently faster than using modulo_operator.\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Benchmark code for comparing 2 functions, with different length int values.\n    Brian Kernighan's algorithm is consistently faster than using modulo_operator.",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "def do_benchmark(number: int) -> None:\n        setup = \"import __main__ as z\"\n        print(f\"Benchmark when {number = }:\")\n        print(f\"{get_set_bits_count_using_modulo_operator(number) = }\")\n        timing = timeit(\n            f\"z.get_set_bits_count_using_modulo_operator({number})\", setup=setup\n        )\n        print(f\"timeit() runs in {timing} seconds\")\n        print(f\"{get_set_bits_count_using_brian_kernighans_algorithm(number) = }\")\n        timing = timeit(\n            f\"z.get_set_bits_count_using_brian_kernighans_algorithm({number})\",\n            setup=setup,\n        )\n        print(f\"timeit() runs in {timing} seconds\")",
              "children": [
                {
                  "value": "do_benchmark",
                  "children": []
                },
                {
                  "value": "(number: int)",
                  "children": [
                    {
                      "value": "number: int",
                      "children": [
                        {
                          "value": "number",
                          "children": []
                        },
                        {
                          "value": "int",
                          "children": [
                            {
                              "value": "int",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "None",
                  "children": [
                    {
                      "value": "None",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "setup = \"import __main__ as z\"\n        print(f\"Benchmark when {number = }:\")\n        print(f\"{get_set_bits_count_using_modulo_operator(number) = }\")\n        timing = timeit(\n            f\"z.get_set_bits_count_using_modulo_operator({number})\", setup=setup\n        )\n        print(f\"timeit() runs in {timing} seconds\")\n        print(f\"{get_set_bits_count_using_brian_kernighans_algorithm(number) = }\")\n        timing = timeit(\n            f\"z.get_set_bits_count_using_brian_kernighans_algorithm({number})\",\n            setup=setup,\n        )\n        print(f\"timeit() runs in {timing} seconds\")",
                  "children": [
                    {
                      "value": "setup = \"import __main__ as z\"",
                      "children": [
                        {
                          "value": "setup = \"import __main__ as z\"",
                          "children": [
                            {
                              "value": "setup",
                              "children": []
                            },
                            {
                              "value": "\"import __main__ as z\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "import __main__ as z",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "print(f\"Benchmark when {number = }:\")",
                      "children": [
                        {
                          "value": "print(f\"Benchmark when {number = }:\")",
                          "children": [
                            {
                              "value": "print",
                              "children": []
                            },
                            {
                              "value": "(f\"Benchmark when {number = }:\")",
                              "children": [
                                {
                                  "value": "f\"Benchmark when {number = }:\"",
                                  "children": [
                                    {
                                      "value": "f\"",
                                      "children": []
                                    },
                                    {
                                      "value": "Benchmark when",
                                      "children": []
                                    },
                                    {
                                      "value": "{number = }",
                                      "children": [
                                        {
                                          "value": "number",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": ":",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "print(f\"{get_set_bits_count_using_modulo_operator(number) = }\")",
                      "children": [
                        {
                          "value": "print(f\"{get_set_bits_count_using_modulo_operator(number) = }\")",
                          "children": [
                            {
                              "value": "print",
                              "children": []
                            },
                            {
                              "value": "(f\"{get_set_bits_count_using_modulo_operator(number) = }\")",
                              "children": [
                                {
                                  "value": "f\"{get_set_bits_count_using_modulo_operator(number) = }\"",
                                  "children": [
                                    {
                                      "value": "f\"",
                                      "children": []
                                    },
                                    {
                                      "value": "{get_set_bits_count_using_modulo_operator(number) = }",
                                      "children": [
                                        {
                                          "value": "get_set_bits_count_using_modulo_operator(number)",
                                          "children": [
                                            {
                                              "value": "get_set_bits_count_using_modulo_operator",
                                              "children": []
                                            },
                                            {
                                              "value": "(number)",
                                              "children": [
                                                {
                                                  "value": "number",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "timing = timeit(\n            f\"z.get_set_bits_count_using_modulo_operator({number})\", setup=setup\n        )",
                      "children": [
                        {
                          "value": "timing = timeit(\n            f\"z.get_set_bits_count_using_modulo_operator({number})\", setup=setup\n        )",
                          "children": [
                            {
                              "value": "timing",
                              "children": []
                            },
                            {
                              "value": "timeit(\n            f\"z.get_set_bits_count_using_modulo_operator({number})\", setup=setup\n        )",
                              "children": [
                                {
                                  "value": "timeit",
                                  "children": []
                                },
                                {
                                  "value": "(\n            f\"z.get_set_bits_count_using_modulo_operator({number})\", setup=setup\n        )",
                                  "children": [
                                    {
                                      "value": "f\"z.get_set_bits_count_using_modulo_operator({number})\"",
                                      "children": [
                                        {
                                          "value": "f\"",
                                          "children": []
                                        },
                                        {
                                          "value": "z.get_set_bits_count_using_modulo_operator(",
                                          "children": []
                                        },
                                        {
                                          "value": "{number}",
                                          "children": [
                                            {
                                              "value": "number",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": ")",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "setup=setup",
                                      "children": [
                                        {
                                          "value": "setup",
                                          "children": []
                                        },
                                        {
                                          "value": "setup",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "print(f\"timeit() runs in {timing} seconds\")",
                      "children": [
                        {
                          "value": "print(f\"timeit() runs in {timing} seconds\")",
                          "children": [
                            {
                              "value": "print",
                              "children": []
                            },
                            {
                              "value": "(f\"timeit() runs in {timing} seconds\")",
                              "children": [
                                {
                                  "value": "f\"timeit() runs in {timing} seconds\"",
                                  "children": [
                                    {
                                      "value": "f\"",
                                      "children": []
                                    },
                                    {
                                      "value": "timeit() runs in",
                                      "children": []
                                    },
                                    {
                                      "value": "{timing}",
                                      "children": [
                                        {
                                          "value": "timing",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "seconds",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "print(f\"{get_set_bits_count_using_brian_kernighans_algorithm(number) = }\")",
                      "children": [
                        {
                          "value": "print(f\"{get_set_bits_count_using_brian_kernighans_algorithm(number) = }\")",
                          "children": [
                            {
                              "value": "print",
                              "children": []
                            },
                            {
                              "value": "(f\"{get_set_bits_count_using_brian_kernighans_algorithm(number) = }\")",
                              "children": [
                                {
                                  "value": "f\"{get_set_bits_count_using_brian_kernighans_algorithm(number) = }\"",
                                  "children": [
                                    {
                                      "value": "f\"",
                                      "children": []
                                    },
                                    {
                                      "value": "{get_set_bits_count_using_brian_kernighans_algorithm(number) = }",
                                      "children": [
                                        {
                                          "value": "get_set_bits_count_using_brian_kernighans_algorithm(number)",
                                          "children": [
                                            {
                                              "value": "get_set_bits_count_using_brian_kernighans_algorithm",
                                              "children": []
                                            },
                                            {
                                              "value": "(number)",
                                              "children": [
                                                {
                                                  "value": "number",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "timing = timeit(\n            f\"z.get_set_bits_count_using_brian_kernighans_algorithm({number})\",\n            setup=setup,\n        )",
                      "children": [
                        {
                          "value": "timing = timeit(\n            f\"z.get_set_bits_count_using_brian_kernighans_algorithm({number})\",\n            setup=setup,\n        )",
                          "children": [
                            {
                              "value": "timing",
                              "children": []
                            },
                            {
                              "value": "timeit(\n            f\"z.get_set_bits_count_using_brian_kernighans_algorithm({number})\",\n            setup=setup,\n        )",
                              "children": [
                                {
                                  "value": "timeit",
                                  "children": []
                                },
                                {
                                  "value": "(\n            f\"z.get_set_bits_count_using_brian_kernighans_algorithm({number})\",\n            setup=setup,\n        )",
                                  "children": [
                                    {
                                      "value": "f\"z.get_set_bits_count_using_brian_kernighans_algorithm({number})\"",
                                      "children": [
                                        {
                                          "value": "f\"",
                                          "children": []
                                        },
                                        {
                                          "value": "z.get_set_bits_count_using_brian_kernighans_algorithm(",
                                          "children": []
                                        },
                                        {
                                          "value": "{number}",
                                          "children": [
                                            {
                                              "value": "number",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": ")",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "setup=setup",
                                      "children": [
                                        {
                                          "value": "setup",
                                          "children": []
                                        },
                                        {
                                          "value": "setup",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "print(f\"timeit() runs in {timing} seconds\")",
                      "children": [
                        {
                          "value": "print(f\"timeit() runs in {timing} seconds\")",
                          "children": [
                            {
                              "value": "print",
                              "children": []
                            },
                            {
                              "value": "(f\"timeit() runs in {timing} seconds\")",
                              "children": [
                                {
                                  "value": "f\"timeit() runs in {timing} seconds\"",
                                  "children": [
                                    {
                                      "value": "f\"",
                                      "children": []
                                    },
                                    {
                                      "value": "timeit() runs in",
                                      "children": []
                                    },
                                    {
                                      "value": "{timing}",
                                      "children": [
                                        {
                                          "value": "timing",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "seconds",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "for number in (25, 37, 58, 0):\n        do_benchmark(number)\n        print()",
              "children": [
                {
                  "value": "number",
                  "children": []
                },
                {
                  "value": "(25, 37, 58, 0)",
                  "children": [
                    {
                      "value": "25",
                      "children": []
                    },
                    {
                      "value": "37",
                      "children": []
                    },
                    {
                      "value": "58",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "do_benchmark(number)\n        print()",
                  "children": [
                    {
                      "value": "do_benchmark(number)",
                      "children": [
                        {
                          "value": "do_benchmark(number)",
                          "children": [
                            {
                              "value": "do_benchmark",
                              "children": []
                            },
                            {
                              "value": "(number)",
                              "children": [
                                {
                                  "value": "number",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "print()",
                      "children": [
                        {
                          "value": "print()",
                          "children": [
                            {
                              "value": "print",
                              "children": []
                            },
                            {
                              "value": "()",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "if __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n    benchmark()",
      "children": [
        {
          "value": "__name__ == \"__main__\"",
          "children": [
            {
              "value": "__name__",
              "children": []
            },
            {
              "value": "\"__main__\"",
              "children": [
                {
                  "value": "\"",
                  "children": []
                },
                {
                  "value": "__main__",
                  "children": []
                },
                {
                  "value": "\"",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "import doctest\n\n    doctest.testmod()\n    benchmark()",
          "children": [
            {
              "value": "import doctest",
              "children": [
                {
                  "value": "doctest",
                  "children": [
                    {
                      "value": "doctest",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "doctest.testmod()",
              "children": [
                {
                  "value": "doctest.testmod()",
                  "children": [
                    {
                      "value": "doctest.testmod",
                      "children": [
                        {
                          "value": "doctest",
                          "children": []
                        },
                        {
                          "value": "testmod",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "()",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "benchmark()",
              "children": [
                {
                  "value": "benchmark()",
                  "children": [
                    {
                      "value": "benchmark",
                      "children": []
                    },
                    {
                      "value": "()",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}