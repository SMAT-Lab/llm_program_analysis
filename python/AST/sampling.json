{
  "value": "import random\nfrom collections import defaultdict\nfrom enum import Enum\nfrom typing import Any, Dict, List, Optional, Union\n\nfrom backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema\nfrom backend.data.model import SchemaField\n\n\nclass SamplingMethod(str, Enum):\n    RANDOM = \"random\"\n    SYSTEMATIC = \"systematic\"\n    TOP = \"top\"\n    BOTTOM = \"bottom\"\n    STRATIFIED = \"stratified\"\n    WEIGHTED = \"weighted\"\n    RESERVOIR = \"reservoir\"\n    CLUSTER = \"cluster\"\n\n\nclass DataSamplingBlock(Block):\n    class Input(BlockSchema):\n        data: Union[Dict[str, Any], List[Union[dict, List[Any]]]] = SchemaField(\n            description=\"The dataset to sample from. Can be a single dictionary, a list of dictionaries, or a list of lists.\",\n            placeholder=\"{'id': 1, 'value': 'a'} or [{'id': 1, 'value': 'a'}, {'id': 2, 'value': 'b'}, ...]\",\n        )\n        sample_size: int = SchemaField(\n            description=\"The number of samples to take from the dataset.\",\n            placeholder=\"10\",\n            default=10,\n        )\n        sampling_method: SamplingMethod = SchemaField(\n            description=\"The method to use for sampling.\",\n            default=SamplingMethod.RANDOM,\n        )\n        accumulate: bool = SchemaField(\n            description=\"Whether to accumulate data before sampling.\",\n            default=False,\n        )\n        random_seed: Optional[int] = SchemaField(\n            description=\"Seed for random number generator (optional).\",\n            default=None,\n        )\n        stratify_key: Optional[str] = SchemaField(\n            description=\"Key to use for stratified sampling (required for stratified sampling).\",\n            default=None,\n        )\n        weight_key: Optional[str] = SchemaField(\n            description=\"Key to use for weighted sampling (required for weighted sampling).\",\n            default=None,\n        )\n        cluster_key: Optional[str] = SchemaField(\n            description=\"Key to use for cluster sampling (required for cluster sampling).\",\n            default=None,\n        )\n\n    class Output(BlockSchema):\n        sampled_data: List[Union[dict, List[Any]]] = SchemaField(\n            description=\"The sampled subset of the input data.\"\n        )\n        sample_indices: List[int] = SchemaField(\n            description=\"The indices of the sampled data in the original dataset.\"\n        )\n\n    def __init__(self):\n        super().__init__(\n            id=\"4a448883-71fa-49cf-91cf-70d793bd7d87\",\n            description=\"This block samples data from a given dataset using various sampling methods.\",\n            categories={BlockCategory.LOGIC},\n            input_schema=DataSamplingBlock.Input,\n            output_schema=DataSamplingBlock.Output,\n            test_input={\n                \"data\": [\n                    {\"id\": i, \"value\": chr(97 + i), \"group\": i % 3} for i in range(10)\n                ],\n                \"sample_size\": 3,\n                \"sampling_method\": SamplingMethod.STRATIFIED,\n                \"accumulate\": False,\n                \"random_seed\": 42,\n                \"stratify_key\": \"group\",\n            },\n            test_output=[\n                (\n                    \"sampled_data\",\n                    [\n                        {\"id\": 0, \"value\": \"a\", \"group\": 0},\n                        {\"id\": 1, \"value\": \"b\", \"group\": 1},\n                        {\"id\": 8, \"value\": \"i\", \"group\": 2},\n                    ],\n                ),\n                (\"sample_indices\", [0, 1, 8]),\n            ],\n        )\n        self.accumulated_data = []\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        if input_data.accumulate:\n            if isinstance(input_data.data, dict):\n                self.accumulated_data.append(input_data.data)\n            elif isinstance(input_data.data, list):\n                self.accumulated_data.extend(input_data.data)\n            else:\n                raise ValueError(f\"Unsupported data type: {type(input_data.data)}\")\n\n            # If we don't have enough data yet, return without sampling\n            if len(self.accumulated_data) < input_data.sample_size:\n                return\n\n            data_to_sample = self.accumulated_data\n        else:\n            # If not accumulating, use the input data directly\n            data_to_sample = (\n                input_data.data\n                if isinstance(input_data.data, list)\n                else [input_data.data]\n            )\n\n        if input_data.random_seed is not None:\n            random.seed(input_data.random_seed)\n\n        data_size = len(data_to_sample)\n\n        if input_data.sample_size > data_size:\n            raise ValueError(\n                f\"Sample size ({input_data.sample_size}) cannot be larger than the dataset size ({data_size}).\"\n            )\n\n        indices = []\n\n        if input_data.sampling_method == SamplingMethod.RANDOM:\n            indices = random.sample(range(data_size), input_data.sample_size)\n        elif input_data.sampling_method == SamplingMethod.SYSTEMATIC:\n            step = data_size // input_data.sample_size\n            start = random.randint(0, step - 1)\n            indices = list(range(start, data_size, step))[: input_data.sample_size]\n        elif input_data.sampling_method == SamplingMethod.TOP:\n            indices = list(range(input_data.sample_size))\n        elif input_data.sampling_method == SamplingMethod.BOTTOM:\n            indices = list(range(data_size - input_data.sample_size, data_size))\n        elif input_data.sampling_method == SamplingMethod.STRATIFIED:\n            if not input_data.stratify_key:\n                raise ValueError(\n                    \"Stratify key must be provided for stratified sampling.\"\n                )\n            strata = defaultdict(list)\n            for i, item in enumerate(data_to_sample):\n                if isinstance(item, dict):\n                    strata_value = item.get(input_data.stratify_key)\n                elif hasattr(item, input_data.stratify_key):\n                    strata_value = getattr(item, input_data.stratify_key)\n                else:\n                    raise ValueError(\n                        f\"Stratify key '{input_data.stratify_key}' not found in item {item}\"\n                    )\n\n                if strata_value is None:\n                    raise ValueError(\n                        f\"Stratify value for key '{input_data.stratify_key}' is None\"\n                    )\n\n                strata[str(strata_value)].append(i)\n\n            # Calculate the number of samples to take from each stratum\n            stratum_sizes = {\n                k: max(1, int(len(v) / data_size * input_data.sample_size))\n                for k, v in strata.items()\n            }\n\n            # Adjust sizes to ensure we get exactly sample_size samples\n            while sum(stratum_sizes.values()) != input_data.sample_size:\n                if sum(stratum_sizes.values()) < input_data.sample_size:\n                    stratum_sizes[\n                        max(stratum_sizes, key=lambda k: stratum_sizes[k])\n                    ] += 1\n                else:\n                    stratum_sizes[\n                        max(stratum_sizes, key=lambda k: stratum_sizes[k])\n                    ] -= 1\n\n            for stratum, size in stratum_sizes.items():\n                indices.extend(random.sample(strata[stratum], size))\n        elif input_data.sampling_method == SamplingMethod.WEIGHTED:\n            if not input_data.weight_key:\n                raise ValueError(\"Weight key must be provided for weighted sampling.\")\n            weights = []\n            for item in data_to_sample:\n                if isinstance(item, dict):\n                    weight = item.get(input_data.weight_key)\n                elif hasattr(item, input_data.weight_key):\n                    weight = getattr(item, input_data.weight_key)\n                else:\n                    raise ValueError(\n                        f\"Weight key '{input_data.weight_key}' not found in item {item}\"\n                    )\n\n                if weight is None:\n                    raise ValueError(\n                        f\"Weight value for key '{input_data.weight_key}' is None\"\n                    )\n                try:\n                    weights.append(float(weight))\n                except ValueError:\n                    raise ValueError(\n                        f\"Weight value '{weight}' cannot be converted to a number\"\n                    )\n\n            if not weights:\n                raise ValueError(\n                    f\"No valid weights found using key '{input_data.weight_key}'\"\n                )\n\n            indices = random.choices(\n                range(data_size), weights=weights, k=input_data.sample_size\n            )\n        elif input_data.sampling_method == SamplingMethod.RESERVOIR:\n            indices = list(range(input_data.sample_size))\n            for i in range(input_data.sample_size, data_size):\n                j = random.randint(0, i)\n                if j < input_data.sample_size:\n                    indices[j] = i\n        elif input_data.sampling_method == SamplingMethod.CLUSTER:\n            if not input_data.cluster_key:\n                raise ValueError(\"Cluster key must be provided for cluster sampling.\")\n            clusters = defaultdict(list)\n            for i, item in enumerate(data_to_sample):\n                if isinstance(item, dict):\n                    cluster_value = item.get(input_data.cluster_key)\n                elif hasattr(item, input_data.cluster_key):\n                    cluster_value = getattr(item, input_data.cluster_key)\n                else:\n                    raise TypeError(\n                        f\"Item {item} does not have the cluster key '{input_data.cluster_key}'\"\n                    )\n\n                clusters[str(cluster_value)].append(i)\n\n            # Randomly select clusters until we have enough samples\n            selected_clusters = []\n            while (\n                sum(len(clusters[c]) for c in selected_clusters)\n                < input_data.sample_size\n            ):\n                available_clusters = [c for c in clusters if c not in selected_clusters]\n                if not available_clusters:\n                    break\n                selected_clusters.append(random.choice(available_clusters))\n\n            for cluster in selected_clusters:\n                indices.extend(clusters[cluster])\n\n            # If we have more samples than needed, randomly remove some\n            if len(indices) > input_data.sample_size:\n                indices = random.sample(indices, input_data.sample_size)\n        else:\n            raise ValueError(f\"Unknown sampling method: {input_data.sampling_method}\")\n\n        sampled_data = [data_to_sample[i] for i in indices]\n\n        # Clear accumulated data after sampling if accumulation is enabled\n        if input_data.accumulate:\n            self.accumulated_data = []\n\n        yield \"sampled_data\", sampled_data\n        yield \"sample_indices\", indices",
  "children": [
    {
      "value": "import random",
      "children": [
        {
          "value": "random",
          "children": [
            {
              "value": "random",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from collections import defaultdict",
      "children": [
        {
          "value": "collections",
          "children": [
            {
              "value": "collections",
              "children": []
            }
          ]
        },
        {
          "value": "defaultdict",
          "children": [
            {
              "value": "defaultdict",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from enum import Enum",
      "children": [
        {
          "value": "enum",
          "children": [
            {
              "value": "enum",
              "children": []
            }
          ]
        },
        {
          "value": "Enum",
          "children": [
            {
              "value": "Enum",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from typing import Any, Dict, List, Optional, Union",
      "children": [
        {
          "value": "typing",
          "children": [
            {
              "value": "typing",
              "children": []
            }
          ]
        },
        {
          "value": "Any",
          "children": [
            {
              "value": "Any",
              "children": []
            }
          ]
        },
        {
          "value": "Dict",
          "children": [
            {
              "value": "Dict",
              "children": []
            }
          ]
        },
        {
          "value": "List",
          "children": [
            {
              "value": "List",
              "children": []
            }
          ]
        },
        {
          "value": "Optional",
          "children": [
            {
              "value": "Optional",
              "children": []
            }
          ]
        },
        {
          "value": "Union",
          "children": [
            {
              "value": "Union",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.data.block import Block, BlockCategory, BlockOutput, BlockSchema",
      "children": [
        {
          "value": "backend.data.block",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "data",
              "children": []
            },
            {
              "value": "block",
              "children": []
            }
          ]
        },
        {
          "value": "Block",
          "children": [
            {
              "value": "Block",
              "children": []
            }
          ]
        },
        {
          "value": "BlockCategory",
          "children": [
            {
              "value": "BlockCategory",
              "children": []
            }
          ]
        },
        {
          "value": "BlockOutput",
          "children": [
            {
              "value": "BlockOutput",
              "children": []
            }
          ]
        },
        {
          "value": "BlockSchema",
          "children": [
            {
              "value": "BlockSchema",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.data.model import SchemaField",
      "children": [
        {
          "value": "backend.data.model",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "data",
              "children": []
            },
            {
              "value": "model",
              "children": []
            }
          ]
        },
        {
          "value": "SchemaField",
          "children": [
            {
              "value": "SchemaField",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "class SamplingMethod(str, Enum):\n    RANDOM = \"random\"\n    SYSTEMATIC = \"systematic\"\n    TOP = \"top\"\n    BOTTOM = \"bottom\"\n    STRATIFIED = \"stratified\"\n    WEIGHTED = \"weighted\"\n    RESERVOIR = \"reservoir\"\n    CLUSTER = \"cluster\"",
      "children": [
        {
          "value": "SamplingMethod",
          "children": []
        },
        {
          "value": "(str, Enum)",
          "children": [
            {
              "value": "str",
              "children": []
            },
            {
              "value": "Enum",
              "children": []
            }
          ]
        },
        {
          "value": "RANDOM = \"random\"\n    SYSTEMATIC = \"systematic\"\n    TOP = \"top\"\n    BOTTOM = \"bottom\"\n    STRATIFIED = \"stratified\"\n    WEIGHTED = \"weighted\"\n    RESERVOIR = \"reservoir\"\n    CLUSTER = \"cluster\"",
          "children": [
            {
              "value": "RANDOM = \"random\"",
              "children": [
                {
                  "value": "RANDOM = \"random\"",
                  "children": [
                    {
                      "value": "RANDOM",
                      "children": []
                    },
                    {
                      "value": "\"random\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "random",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "SYSTEMATIC = \"systematic\"",
              "children": [
                {
                  "value": "SYSTEMATIC = \"systematic\"",
                  "children": [
                    {
                      "value": "SYSTEMATIC",
                      "children": []
                    },
                    {
                      "value": "\"systematic\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "systematic",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "TOP = \"top\"",
              "children": [
                {
                  "value": "TOP = \"top\"",
                  "children": [
                    {
                      "value": "TOP",
                      "children": []
                    },
                    {
                      "value": "\"top\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "top",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "BOTTOM = \"bottom\"",
              "children": [
                {
                  "value": "BOTTOM = \"bottom\"",
                  "children": [
                    {
                      "value": "BOTTOM",
                      "children": []
                    },
                    {
                      "value": "\"bottom\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "bottom",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "STRATIFIED = \"stratified\"",
              "children": [
                {
                  "value": "STRATIFIED = \"stratified\"",
                  "children": [
                    {
                      "value": "STRATIFIED",
                      "children": []
                    },
                    {
                      "value": "\"stratified\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "stratified",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "WEIGHTED = \"weighted\"",
              "children": [
                {
                  "value": "WEIGHTED = \"weighted\"",
                  "children": [
                    {
                      "value": "WEIGHTED",
                      "children": []
                    },
                    {
                      "value": "\"weighted\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "weighted",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "RESERVOIR = \"reservoir\"",
              "children": [
                {
                  "value": "RESERVOIR = \"reservoir\"",
                  "children": [
                    {
                      "value": "RESERVOIR",
                      "children": []
                    },
                    {
                      "value": "\"reservoir\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "reservoir",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "CLUSTER = \"cluster\"",
              "children": [
                {
                  "value": "CLUSTER = \"cluster\"",
                  "children": [
                    {
                      "value": "CLUSTER",
                      "children": []
                    },
                    {
                      "value": "\"cluster\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "cluster",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class DataSamplingBlock(Block):\n    class Input(BlockSchema):\n        data: Union[Dict[str, Any], List[Union[dict, List[Any]]]] = SchemaField(\n            description=\"The dataset to sample from. Can be a single dictionary, a list of dictionaries, or a list of lists.\",\n            placeholder=\"{'id': 1, 'value': 'a'} or [{'id': 1, 'value': 'a'}, {'id': 2, 'value': 'b'}, ...]\",\n        )\n        sample_size: int = SchemaField(\n            description=\"The number of samples to take from the dataset.\",\n            placeholder=\"10\",\n            default=10,\n        )\n        sampling_method: SamplingMethod = SchemaField(\n            description=\"The method to use for sampling.\",\n            default=SamplingMethod.RANDOM,\n        )\n        accumulate: bool = SchemaField(\n            description=\"Whether to accumulate data before sampling.\",\n            default=False,\n        )\n        random_seed: Optional[int] = SchemaField(\n            description=\"Seed for random number generator (optional).\",\n            default=None,\n        )\n        stratify_key: Optional[str] = SchemaField(\n            description=\"Key to use for stratified sampling (required for stratified sampling).\",\n            default=None,\n        )\n        weight_key: Optional[str] = SchemaField(\n            description=\"Key to use for weighted sampling (required for weighted sampling).\",\n            default=None,\n        )\n        cluster_key: Optional[str] = SchemaField(\n            description=\"Key to use for cluster sampling (required for cluster sampling).\",\n            default=None,\n        )\n\n    class Output(BlockSchema):\n        sampled_data: List[Union[dict, List[Any]]] = SchemaField(\n            description=\"The sampled subset of the input data.\"\n        )\n        sample_indices: List[int] = SchemaField(\n            description=\"The indices of the sampled data in the original dataset.\"\n        )\n\n    def __init__(self):\n        super().__init__(\n            id=\"4a448883-71fa-49cf-91cf-70d793bd7d87\",\n            description=\"This block samples data from a given dataset using various sampling methods.\",\n            categories={BlockCategory.LOGIC},\n            input_schema=DataSamplingBlock.Input,\n            output_schema=DataSamplingBlock.Output,\n            test_input={\n                \"data\": [\n                    {\"id\": i, \"value\": chr(97 + i), \"group\": i % 3} for i in range(10)\n                ],\n                \"sample_size\": 3,\n                \"sampling_method\": SamplingMethod.STRATIFIED,\n                \"accumulate\": False,\n                \"random_seed\": 42,\n                \"stratify_key\": \"group\",\n            },\n            test_output=[\n                (\n                    \"sampled_data\",\n                    [\n                        {\"id\": 0, \"value\": \"a\", \"group\": 0},\n                        {\"id\": 1, \"value\": \"b\", \"group\": 1},\n                        {\"id\": 8, \"value\": \"i\", \"group\": 2},\n                    ],\n                ),\n                (\"sample_indices\", [0, 1, 8]),\n            ],\n        )\n        self.accumulated_data = []\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        if input_data.accumulate:\n            if isinstance(input_data.data, dict):\n                self.accumulated_data.append(input_data.data)\n            elif isinstance(input_data.data, list):\n                self.accumulated_data.extend(input_data.data)\n            else:\n                raise ValueError(f\"Unsupported data type: {type(input_data.data)}\")\n\n            # If we don't have enough data yet, return without sampling\n            if len(self.accumulated_data) < input_data.sample_size:\n                return\n\n            data_to_sample = self.accumulated_data\n        else:\n            # If not accumulating, use the input data directly\n            data_to_sample = (\n                input_data.data\n                if isinstance(input_data.data, list)\n                else [input_data.data]\n            )\n\n        if input_data.random_seed is not None:\n            random.seed(input_data.random_seed)\n\n        data_size = len(data_to_sample)\n\n        if input_data.sample_size > data_size:\n            raise ValueError(\n                f\"Sample size ({input_data.sample_size}) cannot be larger than the dataset size ({data_size}).\"\n            )\n\n        indices = []\n\n        if input_data.sampling_method == SamplingMethod.RANDOM:\n            indices = random.sample(range(data_size), input_data.sample_size)\n        elif input_data.sampling_method == SamplingMethod.SYSTEMATIC:\n            step = data_size // input_data.sample_size\n            start = random.randint(0, step - 1)\n            indices = list(range(start, data_size, step))[: input_data.sample_size]\n        elif input_data.sampling_method == SamplingMethod.TOP:\n            indices = list(range(input_data.sample_size))\n        elif input_data.sampling_method == SamplingMethod.BOTTOM:\n            indices = list(range(data_size - input_data.sample_size, data_size))\n        elif input_data.sampling_method == SamplingMethod.STRATIFIED:\n            if not input_data.stratify_key:\n                raise ValueError(\n                    \"Stratify key must be provided for stratified sampling.\"\n                )\n            strata = defaultdict(list)\n            for i, item in enumerate(data_to_sample):\n                if isinstance(item, dict):\n                    strata_value = item.get(input_data.stratify_key)\n                elif hasattr(item, input_data.stratify_key):\n                    strata_value = getattr(item, input_data.stratify_key)\n                else:\n                    raise ValueError(\n                        f\"Stratify key '{input_data.stratify_key}' not found in item {item}\"\n                    )\n\n                if strata_value is None:\n                    raise ValueError(\n                        f\"Stratify value for key '{input_data.stratify_key}' is None\"\n                    )\n\n                strata[str(strata_value)].append(i)\n\n            # Calculate the number of samples to take from each stratum\n            stratum_sizes = {\n                k: max(1, int(len(v) / data_size * input_data.sample_size))\n                for k, v in strata.items()\n            }\n\n            # Adjust sizes to ensure we get exactly sample_size samples\n            while sum(stratum_sizes.values()) != input_data.sample_size:\n                if sum(stratum_sizes.values()) < input_data.sample_size:\n                    stratum_sizes[\n                        max(stratum_sizes, key=lambda k: stratum_sizes[k])\n                    ] += 1\n                else:\n                    stratum_sizes[\n                        max(stratum_sizes, key=lambda k: stratum_sizes[k])\n                    ] -= 1\n\n            for stratum, size in stratum_sizes.items():\n                indices.extend(random.sample(strata[stratum], size))\n        elif input_data.sampling_method == SamplingMethod.WEIGHTED:\n            if not input_data.weight_key:\n                raise ValueError(\"Weight key must be provided for weighted sampling.\")\n            weights = []\n            for item in data_to_sample:\n                if isinstance(item, dict):\n                    weight = item.get(input_data.weight_key)\n                elif hasattr(item, input_data.weight_key):\n                    weight = getattr(item, input_data.weight_key)\n                else:\n                    raise ValueError(\n                        f\"Weight key '{input_data.weight_key}' not found in item {item}\"\n                    )\n\n                if weight is None:\n                    raise ValueError(\n                        f\"Weight value for key '{input_data.weight_key}' is None\"\n                    )\n                try:\n                    weights.append(float(weight))\n                except ValueError:\n                    raise ValueError(\n                        f\"Weight value '{weight}' cannot be converted to a number\"\n                    )\n\n            if not weights:\n                raise ValueError(\n                    f\"No valid weights found using key '{input_data.weight_key}'\"\n                )\n\n            indices = random.choices(\n                range(data_size), weights=weights, k=input_data.sample_size\n            )\n        elif input_data.sampling_method == SamplingMethod.RESERVOIR:\n            indices = list(range(input_data.sample_size))\n            for i in range(input_data.sample_size, data_size):\n                j = random.randint(0, i)\n                if j < input_data.sample_size:\n                    indices[j] = i\n        elif input_data.sampling_method == SamplingMethod.CLUSTER:\n            if not input_data.cluster_key:\n                raise ValueError(\"Cluster key must be provided for cluster sampling.\")\n            clusters = defaultdict(list)\n            for i, item in enumerate(data_to_sample):\n                if isinstance(item, dict):\n                    cluster_value = item.get(input_data.cluster_key)\n                elif hasattr(item, input_data.cluster_key):\n                    cluster_value = getattr(item, input_data.cluster_key)\n                else:\n                    raise TypeError(\n                        f\"Item {item} does not have the cluster key '{input_data.cluster_key}'\"\n                    )\n\n                clusters[str(cluster_value)].append(i)\n\n            # Randomly select clusters until we have enough samples\n            selected_clusters = []\n            while (\n                sum(len(clusters[c]) for c in selected_clusters)\n                < input_data.sample_size\n            ):\n                available_clusters = [c for c in clusters if c not in selected_clusters]\n                if not available_clusters:\n                    break\n                selected_clusters.append(random.choice(available_clusters))\n\n            for cluster in selected_clusters:\n                indices.extend(clusters[cluster])\n\n            # If we have more samples than needed, randomly remove some\n            if len(indices) > input_data.sample_size:\n                indices = random.sample(indices, input_data.sample_size)\n        else:\n            raise ValueError(f\"Unknown sampling method: {input_data.sampling_method}\")\n\n        sampled_data = [data_to_sample[i] for i in indices]\n\n        # Clear accumulated data after sampling if accumulation is enabled\n        if input_data.accumulate:\n            self.accumulated_data = []\n\n        yield \"sampled_data\", sampled_data\n        yield \"sample_indices\", indices",
      "children": [
        {
          "value": "DataSamplingBlock",
          "children": []
        },
        {
          "value": "(Block)",
          "children": [
            {
              "value": "Block",
              "children": []
            }
          ]
        },
        {
          "value": "class Input(BlockSchema):\n        data: Union[Dict[str, Any], List[Union[dict, List[Any]]]] = SchemaField(\n            description=\"The dataset to sample from. Can be a single dictionary, a list of dictionaries, or a list of lists.\",\n            placeholder=\"{'id': 1, 'value': 'a'} or [{'id': 1, 'value': 'a'}, {'id': 2, 'value': 'b'}, ...]\",\n        )\n        sample_size: int = SchemaField(\n            description=\"The number of samples to take from the dataset.\",\n            placeholder=\"10\",\n            default=10,\n        )\n        sampling_method: SamplingMethod = SchemaField(\n            description=\"The method to use for sampling.\",\n            default=SamplingMethod.RANDOM,\n        )\n        accumulate: bool = SchemaField(\n            description=\"Whether to accumulate data before sampling.\",\n            default=False,\n        )\n        random_seed: Optional[int] = SchemaField(\n            description=\"Seed for random number generator (optional).\",\n            default=None,\n        )\n        stratify_key: Optional[str] = SchemaField(\n            description=\"Key to use for stratified sampling (required for stratified sampling).\",\n            default=None,\n        )\n        weight_key: Optional[str] = SchemaField(\n            description=\"Key to use for weighted sampling (required for weighted sampling).\",\n            default=None,\n        )\n        cluster_key: Optional[str] = SchemaField(\n            description=\"Key to use for cluster sampling (required for cluster sampling).\",\n            default=None,\n        )\n\n    class Output(BlockSchema):\n        sampled_data: List[Union[dict, List[Any]]] = SchemaField(\n            description=\"The sampled subset of the input data.\"\n        )\n        sample_indices: List[int] = SchemaField(\n            description=\"The indices of the sampled data in the original dataset.\"\n        )\n\n    def __init__(self):\n        super().__init__(\n            id=\"4a448883-71fa-49cf-91cf-70d793bd7d87\",\n            description=\"This block samples data from a given dataset using various sampling methods.\",\n            categories={BlockCategory.LOGIC},\n            input_schema=DataSamplingBlock.Input,\n            output_schema=DataSamplingBlock.Output,\n            test_input={\n                \"data\": [\n                    {\"id\": i, \"value\": chr(97 + i), \"group\": i % 3} for i in range(10)\n                ],\n                \"sample_size\": 3,\n                \"sampling_method\": SamplingMethod.STRATIFIED,\n                \"accumulate\": False,\n                \"random_seed\": 42,\n                \"stratify_key\": \"group\",\n            },\n            test_output=[\n                (\n                    \"sampled_data\",\n                    [\n                        {\"id\": 0, \"value\": \"a\", \"group\": 0},\n                        {\"id\": 1, \"value\": \"b\", \"group\": 1},\n                        {\"id\": 8, \"value\": \"i\", \"group\": 2},\n                    ],\n                ),\n                (\"sample_indices\", [0, 1, 8]),\n            ],\n        )\n        self.accumulated_data = []\n\n    def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        if input_data.accumulate:\n            if isinstance(input_data.data, dict):\n                self.accumulated_data.append(input_data.data)\n            elif isinstance(input_data.data, list):\n                self.accumulated_data.extend(input_data.data)\n            else:\n                raise ValueError(f\"Unsupported data type: {type(input_data.data)}\")\n\n            # If we don't have enough data yet, return without sampling\n            if len(self.accumulated_data) < input_data.sample_size:\n                return\n\n            data_to_sample = self.accumulated_data\n        else:\n            # If not accumulating, use the input data directly\n            data_to_sample = (\n                input_data.data\n                if isinstance(input_data.data, list)\n                else [input_data.data]\n            )\n\n        if input_data.random_seed is not None:\n            random.seed(input_data.random_seed)\n\n        data_size = len(data_to_sample)\n\n        if input_data.sample_size > data_size:\n            raise ValueError(\n                f\"Sample size ({input_data.sample_size}) cannot be larger than the dataset size ({data_size}).\"\n            )\n\n        indices = []\n\n        if input_data.sampling_method == SamplingMethod.RANDOM:\n            indices = random.sample(range(data_size), input_data.sample_size)\n        elif input_data.sampling_method == SamplingMethod.SYSTEMATIC:\n            step = data_size // input_data.sample_size\n            start = random.randint(0, step - 1)\n            indices = list(range(start, data_size, step))[: input_data.sample_size]\n        elif input_data.sampling_method == SamplingMethod.TOP:\n            indices = list(range(input_data.sample_size))\n        elif input_data.sampling_method == SamplingMethod.BOTTOM:\n            indices = list(range(data_size - input_data.sample_size, data_size))\n        elif input_data.sampling_method == SamplingMethod.STRATIFIED:\n            if not input_data.stratify_key:\n                raise ValueError(\n                    \"Stratify key must be provided for stratified sampling.\"\n                )\n            strata = defaultdict(list)\n            for i, item in enumerate(data_to_sample):\n                if isinstance(item, dict):\n                    strata_value = item.get(input_data.stratify_key)\n                elif hasattr(item, input_data.stratify_key):\n                    strata_value = getattr(item, input_data.stratify_key)\n                else:\n                    raise ValueError(\n                        f\"Stratify key '{input_data.stratify_key}' not found in item {item}\"\n                    )\n\n                if strata_value is None:\n                    raise ValueError(\n                        f\"Stratify value for key '{input_data.stratify_key}' is None\"\n                    )\n\n                strata[str(strata_value)].append(i)\n\n            # Calculate the number of samples to take from each stratum\n            stratum_sizes = {\n                k: max(1, int(len(v) / data_size * input_data.sample_size))\n                for k, v in strata.items()\n            }\n\n            # Adjust sizes to ensure we get exactly sample_size samples\n            while sum(stratum_sizes.values()) != input_data.sample_size:\n                if sum(stratum_sizes.values()) < input_data.sample_size:\n                    stratum_sizes[\n                        max(stratum_sizes, key=lambda k: stratum_sizes[k])\n                    ] += 1\n                else:\n                    stratum_sizes[\n                        max(stratum_sizes, key=lambda k: stratum_sizes[k])\n                    ] -= 1\n\n            for stratum, size in stratum_sizes.items():\n                indices.extend(random.sample(strata[stratum], size))\n        elif input_data.sampling_method == SamplingMethod.WEIGHTED:\n            if not input_data.weight_key:\n                raise ValueError(\"Weight key must be provided for weighted sampling.\")\n            weights = []\n            for item in data_to_sample:\n                if isinstance(item, dict):\n                    weight = item.get(input_data.weight_key)\n                elif hasattr(item, input_data.weight_key):\n                    weight = getattr(item, input_data.weight_key)\n                else:\n                    raise ValueError(\n                        f\"Weight key '{input_data.weight_key}' not found in item {item}\"\n                    )\n\n                if weight is None:\n                    raise ValueError(\n                        f\"Weight value for key '{input_data.weight_key}' is None\"\n                    )\n                try:\n                    weights.append(float(weight))\n                except ValueError:\n                    raise ValueError(\n                        f\"Weight value '{weight}' cannot be converted to a number\"\n                    )\n\n            if not weights:\n                raise ValueError(\n                    f\"No valid weights found using key '{input_data.weight_key}'\"\n                )\n\n            indices = random.choices(\n                range(data_size), weights=weights, k=input_data.sample_size\n            )\n        elif input_data.sampling_method == SamplingMethod.RESERVOIR:\n            indices = list(range(input_data.sample_size))\n            for i in range(input_data.sample_size, data_size):\n                j = random.randint(0, i)\n                if j < input_data.sample_size:\n                    indices[j] = i\n        elif input_data.sampling_method == SamplingMethod.CLUSTER:\n            if not input_data.cluster_key:\n                raise ValueError(\"Cluster key must be provided for cluster sampling.\")\n            clusters = defaultdict(list)\n            for i, item in enumerate(data_to_sample):\n                if isinstance(item, dict):\n                    cluster_value = item.get(input_data.cluster_key)\n                elif hasattr(item, input_data.cluster_key):\n                    cluster_value = getattr(item, input_data.cluster_key)\n                else:\n                    raise TypeError(\n                        f\"Item {item} does not have the cluster key '{input_data.cluster_key}'\"\n                    )\n\n                clusters[str(cluster_value)].append(i)\n\n            # Randomly select clusters until we have enough samples\n            selected_clusters = []\n            while (\n                sum(len(clusters[c]) for c in selected_clusters)\n                < input_data.sample_size\n            ):\n                available_clusters = [c for c in clusters if c not in selected_clusters]\n                if not available_clusters:\n                    break\n                selected_clusters.append(random.choice(available_clusters))\n\n            for cluster in selected_clusters:\n                indices.extend(clusters[cluster])\n\n            # If we have more samples than needed, randomly remove some\n            if len(indices) > input_data.sample_size:\n                indices = random.sample(indices, input_data.sample_size)\n        else:\n            raise ValueError(f\"Unknown sampling method: {input_data.sampling_method}\")\n\n        sampled_data = [data_to_sample[i] for i in indices]\n\n        # Clear accumulated data after sampling if accumulation is enabled\n        if input_data.accumulate:\n            self.accumulated_data = []\n\n        yield \"sampled_data\", sampled_data\n        yield \"sample_indices\", indices",
          "children": [
            {
              "value": "class Input(BlockSchema):\n        data: Union[Dict[str, Any], List[Union[dict, List[Any]]]] = SchemaField(\n            description=\"The dataset to sample from. Can be a single dictionary, a list of dictionaries, or a list of lists.\",\n            placeholder=\"{'id': 1, 'value': 'a'} or [{'id': 1, 'value': 'a'}, {'id': 2, 'value': 'b'}, ...]\",\n        )\n        sample_size: int = SchemaField(\n            description=\"The number of samples to take from the dataset.\",\n            placeholder=\"10\",\n            default=10,\n        )\n        sampling_method: SamplingMethod = SchemaField(\n            description=\"The method to use for sampling.\",\n            default=SamplingMethod.RANDOM,\n        )\n        accumulate: bool = SchemaField(\n            description=\"Whether to accumulate data before sampling.\",\n            default=False,\n        )\n        random_seed: Optional[int] = SchemaField(\n            description=\"Seed for random number generator (optional).\",\n            default=None,\n        )\n        stratify_key: Optional[str] = SchemaField(\n            description=\"Key to use for stratified sampling (required for stratified sampling).\",\n            default=None,\n        )\n        weight_key: Optional[str] = SchemaField(\n            description=\"Key to use for weighted sampling (required for weighted sampling).\",\n            default=None,\n        )\n        cluster_key: Optional[str] = SchemaField(\n            description=\"Key to use for cluster sampling (required for cluster sampling).\",\n            default=None,\n        )",
              "children": [
                {
                  "value": "Input",
                  "children": []
                },
                {
                  "value": "(BlockSchema)",
                  "children": [
                    {
                      "value": "BlockSchema",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "data: Union[Dict[str, Any], List[Union[dict, List[Any]]]] = SchemaField(\n            description=\"The dataset to sample from. Can be a single dictionary, a list of dictionaries, or a list of lists.\",\n            placeholder=\"{'id': 1, 'value': 'a'} or [{'id': 1, 'value': 'a'}, {'id': 2, 'value': 'b'}, ...]\",\n        )\n        sample_size: int = SchemaField(\n            description=\"The number of samples to take from the dataset.\",\n            placeholder=\"10\",\n            default=10,\n        )\n        sampling_method: SamplingMethod = SchemaField(\n            description=\"The method to use for sampling.\",\n            default=SamplingMethod.RANDOM,\n        )\n        accumulate: bool = SchemaField(\n            description=\"Whether to accumulate data before sampling.\",\n            default=False,\n        )\n        random_seed: Optional[int] = SchemaField(\n            description=\"Seed for random number generator (optional).\",\n            default=None,\n        )\n        stratify_key: Optional[str] = SchemaField(\n            description=\"Key to use for stratified sampling (required for stratified sampling).\",\n            default=None,\n        )\n        weight_key: Optional[str] = SchemaField(\n            description=\"Key to use for weighted sampling (required for weighted sampling).\",\n            default=None,\n        )\n        cluster_key: Optional[str] = SchemaField(\n            description=\"Key to use for cluster sampling (required for cluster sampling).\",\n            default=None,\n        )",
                  "children": [
                    {
                      "value": "data: Union[Dict[str, Any], List[Union[dict, List[Any]]]] = SchemaField(\n            description=\"The dataset to sample from. Can be a single dictionary, a list of dictionaries, or a list of lists.\",\n            placeholder=\"{'id': 1, 'value': 'a'} or [{'id': 1, 'value': 'a'}, {'id': 2, 'value': 'b'}, ...]\",\n        )",
                      "children": [
                        {
                          "value": "data: Union[Dict[str, Any], List[Union[dict, List[Any]]]] = SchemaField(\n            description=\"The dataset to sample from. Can be a single dictionary, a list of dictionaries, or a list of lists.\",\n            placeholder=\"{'id': 1, 'value': 'a'} or [{'id': 1, 'value': 'a'}, {'id': 2, 'value': 'b'}, ...]\",\n        )",
                          "children": [
                            {
                              "value": "data",
                              "children": []
                            },
                            {
                              "value": "Union[Dict[str, Any], List[Union[dict, List[Any]]]]",
                              "children": [
                                {
                                  "value": "Union[Dict[str, Any], List[Union[dict, List[Any]]]]",
                                  "children": [
                                    {
                                      "value": "Union",
                                      "children": []
                                    },
                                    {
                                      "value": "[Dict[str, Any], List[Union[dict, List[Any]]]]",
                                      "children": [
                                        {
                                          "value": "Dict[str, Any]",
                                          "children": [
                                            {
                                              "value": "Dict[str, Any]",
                                              "children": [
                                                {
                                                  "value": "Dict",
                                                  "children": []
                                                },
                                                {
                                                  "value": "[str, Any]",
                                                  "children": [
                                                    {
                                                      "value": "str",
                                                      "children": [
                                                        {
                                                          "value": "str",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "Any",
                                                      "children": [
                                                        {
                                                          "value": "Any",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "List[Union[dict, List[Any]]]",
                                          "children": [
                                            {
                                              "value": "List[Union[dict, List[Any]]]",
                                              "children": [
                                                {
                                                  "value": "List",
                                                  "children": []
                                                },
                                                {
                                                  "value": "[Union[dict, List[Any]]]",
                                                  "children": [
                                                    {
                                                      "value": "Union[dict, List[Any]]",
                                                      "children": [
                                                        {
                                                          "value": "Union[dict, List[Any]]",
                                                          "children": [
                                                            {
                                                              "value": "Union",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "[dict, List[Any]]",
                                                              "children": [
                                                                {
                                                                  "value": "dict",
                                                                  "children": [
                                                                    {
                                                                      "value": "dict",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "List[Any]",
                                                                  "children": [
                                                                    {
                                                                      "value": "List[Any]",
                                                                      "children": [
                                                                        {
                                                                          "value": "List",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "[Any]",
                                                                          "children": [
                                                                            {
                                                                              "value": "Any",
                                                                              "children": [
                                                                                {
                                                                                  "value": "Any",
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            description=\"The dataset to sample from. Can be a single dictionary, a list of dictionaries, or a list of lists.\",\n            placeholder=\"{'id': 1, 'value': 'a'} or [{'id': 1, 'value': 'a'}, {'id': 2, 'value': 'b'}, ...]\",\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            description=\"The dataset to sample from. Can be a single dictionary, a list of dictionaries, or a list of lists.\",\n            placeholder=\"{'id': 1, 'value': 'a'} or [{'id': 1, 'value': 'a'}, {'id': 2, 'value': 'b'}, ...]\",\n        )",
                                  "children": [
                                    {
                                      "value": "description=\"The dataset to sample from. Can be a single dictionary, a list of dictionaries, or a list of lists.\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"The dataset to sample from. Can be a single dictionary, a list of dictionaries, or a list of lists.\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "The dataset to sample from. Can be a single dictionary, a list of dictionaries, or a list of lists.",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "placeholder=\"{'id': 1, 'value': 'a'} or [{'id': 1, 'value': 'a'}, {'id': 2, 'value': 'b'}, ...]\"",
                                      "children": [
                                        {
                                          "value": "placeholder",
                                          "children": []
                                        },
                                        {
                                          "value": "\"{'id': 1, 'value': 'a'} or [{'id': 1, 'value': 'a'}, {'id': 2, 'value': 'b'}, ...]\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "{'id': 1, 'value': 'a'} or [{'id': 1, 'value': 'a'}, {'id': 2, 'value': 'b'}, ...]",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "sample_size: int = SchemaField(\n            description=\"The number of samples to take from the dataset.\",\n            placeholder=\"10\",\n            default=10,\n        )",
                      "children": [
                        {
                          "value": "sample_size: int = SchemaField(\n            description=\"The number of samples to take from the dataset.\",\n            placeholder=\"10\",\n            default=10,\n        )",
                          "children": [
                            {
                              "value": "sample_size",
                              "children": []
                            },
                            {
                              "value": "int",
                              "children": [
                                {
                                  "value": "int",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            description=\"The number of samples to take from the dataset.\",\n            placeholder=\"10\",\n            default=10,\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            description=\"The number of samples to take from the dataset.\",\n            placeholder=\"10\",\n            default=10,\n        )",
                                  "children": [
                                    {
                                      "value": "description=\"The number of samples to take from the dataset.\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"The number of samples to take from the dataset.\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "The number of samples to take from the dataset.",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "placeholder=\"10\"",
                                      "children": [
                                        {
                                          "value": "placeholder",
                                          "children": []
                                        },
                                        {
                                          "value": "\"10\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "10",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "default=10",
                                      "children": [
                                        {
                                          "value": "default",
                                          "children": []
                                        },
                                        {
                                          "value": "10",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "sampling_method: SamplingMethod = SchemaField(\n            description=\"The method to use for sampling.\",\n            default=SamplingMethod.RANDOM,\n        )",
                      "children": [
                        {
                          "value": "sampling_method: SamplingMethod = SchemaField(\n            description=\"The method to use for sampling.\",\n            default=SamplingMethod.RANDOM,\n        )",
                          "children": [
                            {
                              "value": "sampling_method",
                              "children": []
                            },
                            {
                              "value": "SamplingMethod",
                              "children": [
                                {
                                  "value": "SamplingMethod",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            description=\"The method to use for sampling.\",\n            default=SamplingMethod.RANDOM,\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            description=\"The method to use for sampling.\",\n            default=SamplingMethod.RANDOM,\n        )",
                                  "children": [
                                    {
                                      "value": "description=\"The method to use for sampling.\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"The method to use for sampling.\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "The method to use for sampling.",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "default=SamplingMethod.RANDOM",
                                      "children": [
                                        {
                                          "value": "default",
                                          "children": []
                                        },
                                        {
                                          "value": "SamplingMethod.RANDOM",
                                          "children": [
                                            {
                                              "value": "SamplingMethod",
                                              "children": []
                                            },
                                            {
                                              "value": "RANDOM",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "accumulate: bool = SchemaField(\n            description=\"Whether to accumulate data before sampling.\",\n            default=False,\n        )",
                      "children": [
                        {
                          "value": "accumulate: bool = SchemaField(\n            description=\"Whether to accumulate data before sampling.\",\n            default=False,\n        )",
                          "children": [
                            {
                              "value": "accumulate",
                              "children": []
                            },
                            {
                              "value": "bool",
                              "children": [
                                {
                                  "value": "bool",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            description=\"Whether to accumulate data before sampling.\",\n            default=False,\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            description=\"Whether to accumulate data before sampling.\",\n            default=False,\n        )",
                                  "children": [
                                    {
                                      "value": "description=\"Whether to accumulate data before sampling.\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Whether to accumulate data before sampling.\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Whether to accumulate data before sampling.",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "default=False",
                                      "children": [
                                        {
                                          "value": "default",
                                          "children": []
                                        },
                                        {
                                          "value": "False",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "random_seed: Optional[int] = SchemaField(\n            description=\"Seed for random number generator (optional).\",\n            default=None,\n        )",
                      "children": [
                        {
                          "value": "random_seed: Optional[int] = SchemaField(\n            description=\"Seed for random number generator (optional).\",\n            default=None,\n        )",
                          "children": [
                            {
                              "value": "random_seed",
                              "children": []
                            },
                            {
                              "value": "Optional[int]",
                              "children": [
                                {
                                  "value": "Optional[int]",
                                  "children": [
                                    {
                                      "value": "Optional",
                                      "children": []
                                    },
                                    {
                                      "value": "[int]",
                                      "children": [
                                        {
                                          "value": "int",
                                          "children": [
                                            {
                                              "value": "int",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            description=\"Seed for random number generator (optional).\",\n            default=None,\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            description=\"Seed for random number generator (optional).\",\n            default=None,\n        )",
                                  "children": [
                                    {
                                      "value": "description=\"Seed for random number generator (optional).\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Seed for random number generator (optional).\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Seed for random number generator (optional).",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "default=None",
                                      "children": [
                                        {
                                          "value": "default",
                                          "children": []
                                        },
                                        {
                                          "value": "None",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "stratify_key: Optional[str] = SchemaField(\n            description=\"Key to use for stratified sampling (required for stratified sampling).\",\n            default=None,\n        )",
                      "children": [
                        {
                          "value": "stratify_key: Optional[str] = SchemaField(\n            description=\"Key to use for stratified sampling (required for stratified sampling).\",\n            default=None,\n        )",
                          "children": [
                            {
                              "value": "stratify_key",
                              "children": []
                            },
                            {
                              "value": "Optional[str]",
                              "children": [
                                {
                                  "value": "Optional[str]",
                                  "children": [
                                    {
                                      "value": "Optional",
                                      "children": []
                                    },
                                    {
                                      "value": "[str]",
                                      "children": [
                                        {
                                          "value": "str",
                                          "children": [
                                            {
                                              "value": "str",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            description=\"Key to use for stratified sampling (required for stratified sampling).\",\n            default=None,\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            description=\"Key to use for stratified sampling (required for stratified sampling).\",\n            default=None,\n        )",
                                  "children": [
                                    {
                                      "value": "description=\"Key to use for stratified sampling (required for stratified sampling).\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Key to use for stratified sampling (required for stratified sampling).\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Key to use for stratified sampling (required for stratified sampling).",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "default=None",
                                      "children": [
                                        {
                                          "value": "default",
                                          "children": []
                                        },
                                        {
                                          "value": "None",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "weight_key: Optional[str] = SchemaField(\n            description=\"Key to use for weighted sampling (required for weighted sampling).\",\n            default=None,\n        )",
                      "children": [
                        {
                          "value": "weight_key: Optional[str] = SchemaField(\n            description=\"Key to use for weighted sampling (required for weighted sampling).\",\n            default=None,\n        )",
                          "children": [
                            {
                              "value": "weight_key",
                              "children": []
                            },
                            {
                              "value": "Optional[str]",
                              "children": [
                                {
                                  "value": "Optional[str]",
                                  "children": [
                                    {
                                      "value": "Optional",
                                      "children": []
                                    },
                                    {
                                      "value": "[str]",
                                      "children": [
                                        {
                                          "value": "str",
                                          "children": [
                                            {
                                              "value": "str",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            description=\"Key to use for weighted sampling (required for weighted sampling).\",\n            default=None,\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            description=\"Key to use for weighted sampling (required for weighted sampling).\",\n            default=None,\n        )",
                                  "children": [
                                    {
                                      "value": "description=\"Key to use for weighted sampling (required for weighted sampling).\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Key to use for weighted sampling (required for weighted sampling).\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Key to use for weighted sampling (required for weighted sampling).",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "default=None",
                                      "children": [
                                        {
                                          "value": "default",
                                          "children": []
                                        },
                                        {
                                          "value": "None",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "cluster_key: Optional[str] = SchemaField(\n            description=\"Key to use for cluster sampling (required for cluster sampling).\",\n            default=None,\n        )",
                      "children": [
                        {
                          "value": "cluster_key: Optional[str] = SchemaField(\n            description=\"Key to use for cluster sampling (required for cluster sampling).\",\n            default=None,\n        )",
                          "children": [
                            {
                              "value": "cluster_key",
                              "children": []
                            },
                            {
                              "value": "Optional[str]",
                              "children": [
                                {
                                  "value": "Optional[str]",
                                  "children": [
                                    {
                                      "value": "Optional",
                                      "children": []
                                    },
                                    {
                                      "value": "[str]",
                                      "children": [
                                        {
                                          "value": "str",
                                          "children": [
                                            {
                                              "value": "str",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            description=\"Key to use for cluster sampling (required for cluster sampling).\",\n            default=None,\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            description=\"Key to use for cluster sampling (required for cluster sampling).\",\n            default=None,\n        )",
                                  "children": [
                                    {
                                      "value": "description=\"Key to use for cluster sampling (required for cluster sampling).\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"Key to use for cluster sampling (required for cluster sampling).\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Key to use for cluster sampling (required for cluster sampling).",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "default=None",
                                      "children": [
                                        {
                                          "value": "default",
                                          "children": []
                                        },
                                        {
                                          "value": "None",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "class Output(BlockSchema):\n        sampled_data: List[Union[dict, List[Any]]] = SchemaField(\n            description=\"The sampled subset of the input data.\"\n        )\n        sample_indices: List[int] = SchemaField(\n            description=\"The indices of the sampled data in the original dataset.\"\n        )",
              "children": [
                {
                  "value": "Output",
                  "children": []
                },
                {
                  "value": "(BlockSchema)",
                  "children": [
                    {
                      "value": "BlockSchema",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "sampled_data: List[Union[dict, List[Any]]] = SchemaField(\n            description=\"The sampled subset of the input data.\"\n        )\n        sample_indices: List[int] = SchemaField(\n            description=\"The indices of the sampled data in the original dataset.\"\n        )",
                  "children": [
                    {
                      "value": "sampled_data: List[Union[dict, List[Any]]] = SchemaField(\n            description=\"The sampled subset of the input data.\"\n        )",
                      "children": [
                        {
                          "value": "sampled_data: List[Union[dict, List[Any]]] = SchemaField(\n            description=\"The sampled subset of the input data.\"\n        )",
                          "children": [
                            {
                              "value": "sampled_data",
                              "children": []
                            },
                            {
                              "value": "List[Union[dict, List[Any]]]",
                              "children": [
                                {
                                  "value": "List[Union[dict, List[Any]]]",
                                  "children": [
                                    {
                                      "value": "List",
                                      "children": []
                                    },
                                    {
                                      "value": "[Union[dict, List[Any]]]",
                                      "children": [
                                        {
                                          "value": "Union[dict, List[Any]]",
                                          "children": [
                                            {
                                              "value": "Union[dict, List[Any]]",
                                              "children": [
                                                {
                                                  "value": "Union",
                                                  "children": []
                                                },
                                                {
                                                  "value": "[dict, List[Any]]",
                                                  "children": [
                                                    {
                                                      "value": "dict",
                                                      "children": [
                                                        {
                                                          "value": "dict",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "List[Any]",
                                                      "children": [
                                                        {
                                                          "value": "List[Any]",
                                                          "children": [
                                                            {
                                                              "value": "List",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "[Any]",
                                                              "children": [
                                                                {
                                                                  "value": "Any",
                                                                  "children": [
                                                                    {
                                                                      "value": "Any",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            description=\"The sampled subset of the input data.\"\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            description=\"The sampled subset of the input data.\"\n        )",
                                  "children": [
                                    {
                                      "value": "description=\"The sampled subset of the input data.\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"The sampled subset of the input data.\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "The sampled subset of the input data.",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "sample_indices: List[int] = SchemaField(\n            description=\"The indices of the sampled data in the original dataset.\"\n        )",
                      "children": [
                        {
                          "value": "sample_indices: List[int] = SchemaField(\n            description=\"The indices of the sampled data in the original dataset.\"\n        )",
                          "children": [
                            {
                              "value": "sample_indices",
                              "children": []
                            },
                            {
                              "value": "List[int]",
                              "children": [
                                {
                                  "value": "List[int]",
                                  "children": [
                                    {
                                      "value": "List",
                                      "children": []
                                    },
                                    {
                                      "value": "[int]",
                                      "children": [
                                        {
                                          "value": "int",
                                          "children": [
                                            {
                                              "value": "int",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "SchemaField(\n            description=\"The indices of the sampled data in the original dataset.\"\n        )",
                              "children": [
                                {
                                  "value": "SchemaField",
                                  "children": []
                                },
                                {
                                  "value": "(\n            description=\"The indices of the sampled data in the original dataset.\"\n        )",
                                  "children": [
                                    {
                                      "value": "description=\"The indices of the sampled data in the original dataset.\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "\"The indices of the sampled data in the original dataset.\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "The indices of the sampled data in the original dataset.",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def __init__(self):\n        super().__init__(\n            id=\"4a448883-71fa-49cf-91cf-70d793bd7d87\",\n            description=\"This block samples data from a given dataset using various sampling methods.\",\n            categories={BlockCategory.LOGIC},\n            input_schema=DataSamplingBlock.Input,\n            output_schema=DataSamplingBlock.Output,\n            test_input={\n                \"data\": [\n                    {\"id\": i, \"value\": chr(97 + i), \"group\": i % 3} for i in range(10)\n                ],\n                \"sample_size\": 3,\n                \"sampling_method\": SamplingMethod.STRATIFIED,\n                \"accumulate\": False,\n                \"random_seed\": 42,\n                \"stratify_key\": \"group\",\n            },\n            test_output=[\n                (\n                    \"sampled_data\",\n                    [\n                        {\"id\": 0, \"value\": \"a\", \"group\": 0},\n                        {\"id\": 1, \"value\": \"b\", \"group\": 1},\n                        {\"id\": 8, \"value\": \"i\", \"group\": 2},\n                    ],\n                ),\n                (\"sample_indices\", [0, 1, 8]),\n            ],\n        )\n        self.accumulated_data = []",
              "children": [
                {
                  "value": "__init__",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "super().__init__(\n            id=\"4a448883-71fa-49cf-91cf-70d793bd7d87\",\n            description=\"This block samples data from a given dataset using various sampling methods.\",\n            categories={BlockCategory.LOGIC},\n            input_schema=DataSamplingBlock.Input,\n            output_schema=DataSamplingBlock.Output,\n            test_input={\n                \"data\": [\n                    {\"id\": i, \"value\": chr(97 + i), \"group\": i % 3} for i in range(10)\n                ],\n                \"sample_size\": 3,\n                \"sampling_method\": SamplingMethod.STRATIFIED,\n                \"accumulate\": False,\n                \"random_seed\": 42,\n                \"stratify_key\": \"group\",\n            },\n            test_output=[\n                (\n                    \"sampled_data\",\n                    [\n                        {\"id\": 0, \"value\": \"a\", \"group\": 0},\n                        {\"id\": 1, \"value\": \"b\", \"group\": 1},\n                        {\"id\": 8, \"value\": \"i\", \"group\": 2},\n                    ],\n                ),\n                (\"sample_indices\", [0, 1, 8]),\n            ],\n        )\n        self.accumulated_data = []",
                  "children": [
                    {
                      "value": "super().__init__(\n            id=\"4a448883-71fa-49cf-91cf-70d793bd7d87\",\n            description=\"This block samples data from a given dataset using various sampling methods.\",\n            categories={BlockCategory.LOGIC},\n            input_schema=DataSamplingBlock.Input,\n            output_schema=DataSamplingBlock.Output,\n            test_input={\n                \"data\": [\n                    {\"id\": i, \"value\": chr(97 + i), \"group\": i % 3} for i in range(10)\n                ],\n                \"sample_size\": 3,\n                \"sampling_method\": SamplingMethod.STRATIFIED,\n                \"accumulate\": False,\n                \"random_seed\": 42,\n                \"stratify_key\": \"group\",\n            },\n            test_output=[\n                (\n                    \"sampled_data\",\n                    [\n                        {\"id\": 0, \"value\": \"a\", \"group\": 0},\n                        {\"id\": 1, \"value\": \"b\", \"group\": 1},\n                        {\"id\": 8, \"value\": \"i\", \"group\": 2},\n                    ],\n                ),\n                (\"sample_indices\", [0, 1, 8]),\n            ],\n        )",
                      "children": [
                        {
                          "value": "super().__init__(\n            id=\"4a448883-71fa-49cf-91cf-70d793bd7d87\",\n            description=\"This block samples data from a given dataset using various sampling methods.\",\n            categories={BlockCategory.LOGIC},\n            input_schema=DataSamplingBlock.Input,\n            output_schema=DataSamplingBlock.Output,\n            test_input={\n                \"data\": [\n                    {\"id\": i, \"value\": chr(97 + i), \"group\": i % 3} for i in range(10)\n                ],\n                \"sample_size\": 3,\n                \"sampling_method\": SamplingMethod.STRATIFIED,\n                \"accumulate\": False,\n                \"random_seed\": 42,\n                \"stratify_key\": \"group\",\n            },\n            test_output=[\n                (\n                    \"sampled_data\",\n                    [\n                        {\"id\": 0, \"value\": \"a\", \"group\": 0},\n                        {\"id\": 1, \"value\": \"b\", \"group\": 1},\n                        {\"id\": 8, \"value\": \"i\", \"group\": 2},\n                    ],\n                ),\n                (\"sample_indices\", [0, 1, 8]),\n            ],\n        )",
                          "children": [
                            {
                              "value": "super().__init__",
                              "children": [
                                {
                                  "value": "super()",
                                  "children": [
                                    {
                                      "value": "super",
                                      "children": []
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "__init__",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(\n            id=\"4a448883-71fa-49cf-91cf-70d793bd7d87\",\n            description=\"This block samples data from a given dataset using various sampling methods.\",\n            categories={BlockCategory.LOGIC},\n            input_schema=DataSamplingBlock.Input,\n            output_schema=DataSamplingBlock.Output,\n            test_input={\n                \"data\": [\n                    {\"id\": i, \"value\": chr(97 + i), \"group\": i % 3} for i in range(10)\n                ],\n                \"sample_size\": 3,\n                \"sampling_method\": SamplingMethod.STRATIFIED,\n                \"accumulate\": False,\n                \"random_seed\": 42,\n                \"stratify_key\": \"group\",\n            },\n            test_output=[\n                (\n                    \"sampled_data\",\n                    [\n                        {\"id\": 0, \"value\": \"a\", \"group\": 0},\n                        {\"id\": 1, \"value\": \"b\", \"group\": 1},\n                        {\"id\": 8, \"value\": \"i\", \"group\": 2},\n                    ],\n                ),\n                (\"sample_indices\", [0, 1, 8]),\n            ],\n        )",
                              "children": [
                                {
                                  "value": "id=\"4a448883-71fa-49cf-91cf-70d793bd7d87\"",
                                  "children": [
                                    {
                                      "value": "id",
                                      "children": []
                                    },
                                    {
                                      "value": "\"4a448883-71fa-49cf-91cf-70d793bd7d87\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "4a448883-71fa-49cf-91cf-70d793bd7d87",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "description=\"This block samples data from a given dataset using various sampling methods.\"",
                                  "children": [
                                    {
                                      "value": "description",
                                      "children": []
                                    },
                                    {
                                      "value": "\"This block samples data from a given dataset using various sampling methods.\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "This block samples data from a given dataset using various sampling methods.",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "categories={BlockCategory.LOGIC}",
                                  "children": [
                                    {
                                      "value": "categories",
                                      "children": []
                                    },
                                    {
                                      "value": "{BlockCategory.LOGIC}",
                                      "children": [
                                        {
                                          "value": "BlockCategory.LOGIC",
                                          "children": [
                                            {
                                              "value": "BlockCategory",
                                              "children": []
                                            },
                                            {
                                              "value": "LOGIC",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "input_schema=DataSamplingBlock.Input",
                                  "children": [
                                    {
                                      "value": "input_schema",
                                      "children": []
                                    },
                                    {
                                      "value": "DataSamplingBlock.Input",
                                      "children": [
                                        {
                                          "value": "DataSamplingBlock",
                                          "children": []
                                        },
                                        {
                                          "value": "Input",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "output_schema=DataSamplingBlock.Output",
                                  "children": [
                                    {
                                      "value": "output_schema",
                                      "children": []
                                    },
                                    {
                                      "value": "DataSamplingBlock.Output",
                                      "children": [
                                        {
                                          "value": "DataSamplingBlock",
                                          "children": []
                                        },
                                        {
                                          "value": "Output",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "test_input={\n                \"data\": [\n                    {\"id\": i, \"value\": chr(97 + i), \"group\": i % 3} for i in range(10)\n                ],\n                \"sample_size\": 3,\n                \"sampling_method\": SamplingMethod.STRATIFIED,\n                \"accumulate\": False,\n                \"random_seed\": 42,\n                \"stratify_key\": \"group\",\n            }",
                                  "children": [
                                    {
                                      "value": "test_input",
                                      "children": []
                                    },
                                    {
                                      "value": "{\n                \"data\": [\n                    {\"id\": i, \"value\": chr(97 + i), \"group\": i % 3} for i in range(10)\n                ],\n                \"sample_size\": 3,\n                \"sampling_method\": SamplingMethod.STRATIFIED,\n                \"accumulate\": False,\n                \"random_seed\": 42,\n                \"stratify_key\": \"group\",\n            }",
                                      "children": [
                                        {
                                          "value": "\"data\": [\n                    {\"id\": i, \"value\": chr(97 + i), \"group\": i % 3} for i in range(10)\n                ]",
                                          "children": [
                                            {
                                              "value": "\"data\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "data",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "[\n                    {\"id\": i, \"value\": chr(97 + i), \"group\": i % 3} for i in range(10)\n                ]",
                                              "children": [
                                                {
                                                  "value": "{\"id\": i, \"value\": chr(97 + i), \"group\": i % 3}",
                                                  "children": [
                                                    {
                                                      "value": "\"id\": i",
                                                      "children": [
                                                        {
                                                          "value": "\"id\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "id",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "i",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"value\": chr(97 + i)",
                                                      "children": [
                                                        {
                                                          "value": "\"value\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "value",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "chr(97 + i)",
                                                          "children": [
                                                            {
                                                              "value": "chr",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "(97 + i)",
                                                              "children": [
                                                                {
                                                                  "value": "97 + i",
                                                                  "children": [
                                                                    {
                                                                      "value": "97",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "i",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"group\": i % 3",
                                                      "children": [
                                                        {
                                                          "value": "\"group\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "group",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "i % 3",
                                                          "children": [
                                                            {
                                                              "value": "i",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "3",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "for i in range(10)",
                                                  "children": [
                                                    {
                                                      "value": "i",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "range(10)",
                                                      "children": [
                                                        {
                                                          "value": "range",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "(10)",
                                                          "children": [
                                                            {
                                                              "value": "10",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"sample_size\": 3",
                                          "children": [
                                            {
                                              "value": "\"sample_size\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "sample_size",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "3",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"sampling_method\": SamplingMethod.STRATIFIED",
                                          "children": [
                                            {
                                              "value": "\"sampling_method\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "sampling_method",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "SamplingMethod.STRATIFIED",
                                              "children": [
                                                {
                                                  "value": "SamplingMethod",
                                                  "children": []
                                                },
                                                {
                                                  "value": "STRATIFIED",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"accumulate\": False",
                                          "children": [
                                            {
                                              "value": "\"accumulate\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "accumulate",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "False",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"random_seed\": 42",
                                          "children": [
                                            {
                                              "value": "\"random_seed\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "random_seed",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "42",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"stratify_key\": \"group\"",
                                          "children": [
                                            {
                                              "value": "\"stratify_key\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "stratify_key",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"group\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "group",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "test_output=[\n                (\n                    \"sampled_data\",\n                    [\n                        {\"id\": 0, \"value\": \"a\", \"group\": 0},\n                        {\"id\": 1, \"value\": \"b\", \"group\": 1},\n                        {\"id\": 8, \"value\": \"i\", \"group\": 2},\n                    ],\n                ),\n                (\"sample_indices\", [0, 1, 8]),\n            ]",
                                  "children": [
                                    {
                                      "value": "test_output",
                                      "children": []
                                    },
                                    {
                                      "value": "[\n                (\n                    \"sampled_data\",\n                    [\n                        {\"id\": 0, \"value\": \"a\", \"group\": 0},\n                        {\"id\": 1, \"value\": \"b\", \"group\": 1},\n                        {\"id\": 8, \"value\": \"i\", \"group\": 2},\n                    ],\n                ),\n                (\"sample_indices\", [0, 1, 8]),\n            ]",
                                      "children": [
                                        {
                                          "value": "(\n                    \"sampled_data\",\n                    [\n                        {\"id\": 0, \"value\": \"a\", \"group\": 0},\n                        {\"id\": 1, \"value\": \"b\", \"group\": 1},\n                        {\"id\": 8, \"value\": \"i\", \"group\": 2},\n                    ],\n                )",
                                          "children": [
                                            {
                                              "value": "\"sampled_data\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "sampled_data",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "[\n                        {\"id\": 0, \"value\": \"a\", \"group\": 0},\n                        {\"id\": 1, \"value\": \"b\", \"group\": 1},\n                        {\"id\": 8, \"value\": \"i\", \"group\": 2},\n                    ]",
                                              "children": [
                                                {
                                                  "value": "{\"id\": 0, \"value\": \"a\", \"group\": 0}",
                                                  "children": [
                                                    {
                                                      "value": "\"id\": 0",
                                                      "children": [
                                                        {
                                                          "value": "\"id\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "id",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "0",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"value\": \"a\"",
                                                      "children": [
                                                        {
                                                          "value": "\"value\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "value",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "\"a\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "a",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"group\": 0",
                                                      "children": [
                                                        {
                                                          "value": "\"group\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "group",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "0",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "{\"id\": 1, \"value\": \"b\", \"group\": 1}",
                                                  "children": [
                                                    {
                                                      "value": "\"id\": 1",
                                                      "children": [
                                                        {
                                                          "value": "\"id\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "id",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "1",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"value\": \"b\"",
                                                      "children": [
                                                        {
                                                          "value": "\"value\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "value",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "\"b\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "b",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"group\": 1",
                                                      "children": [
                                                        {
                                                          "value": "\"group\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "group",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "1",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "{\"id\": 8, \"value\": \"i\", \"group\": 2}",
                                                  "children": [
                                                    {
                                                      "value": "\"id\": 8",
                                                      "children": [
                                                        {
                                                          "value": "\"id\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "id",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "8",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"value\": \"i\"",
                                                      "children": [
                                                        {
                                                          "value": "\"value\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "value",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "\"i\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "i",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"group\": 2",
                                                      "children": [
                                                        {
                                                          "value": "\"group\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "group",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "2",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(\"sample_indices\", [0, 1, 8])",
                                          "children": [
                                            {
                                              "value": "\"sample_indices\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "sample_indices",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "[0, 1, 8]",
                                              "children": [
                                                {
                                                  "value": "0",
                                                  "children": []
                                                },
                                                {
                                                  "value": "1",
                                                  "children": []
                                                },
                                                {
                                                  "value": "8",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.accumulated_data = []",
                      "children": [
                        {
                          "value": "self.accumulated_data = []",
                          "children": [
                            {
                              "value": "self.accumulated_data",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "accumulated_data",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "[]",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def run(self, input_data: Input, **kwargs) -> BlockOutput:\n        if input_data.accumulate:\n            if isinstance(input_data.data, dict):\n                self.accumulated_data.append(input_data.data)\n            elif isinstance(input_data.data, list):\n                self.accumulated_data.extend(input_data.data)\n            else:\n                raise ValueError(f\"Unsupported data type: {type(input_data.data)}\")\n\n            # If we don't have enough data yet, return without sampling\n            if len(self.accumulated_data) < input_data.sample_size:\n                return\n\n            data_to_sample = self.accumulated_data\n        else:\n            # If not accumulating, use the input data directly\n            data_to_sample = (\n                input_data.data\n                if isinstance(input_data.data, list)\n                else [input_data.data]\n            )\n\n        if input_data.random_seed is not None:\n            random.seed(input_data.random_seed)\n\n        data_size = len(data_to_sample)\n\n        if input_data.sample_size > data_size:\n            raise ValueError(\n                f\"Sample size ({input_data.sample_size}) cannot be larger than the dataset size ({data_size}).\"\n            )\n\n        indices = []\n\n        if input_data.sampling_method == SamplingMethod.RANDOM:\n            indices = random.sample(range(data_size), input_data.sample_size)\n        elif input_data.sampling_method == SamplingMethod.SYSTEMATIC:\n            step = data_size // input_data.sample_size\n            start = random.randint(0, step - 1)\n            indices = list(range(start, data_size, step))[: input_data.sample_size]\n        elif input_data.sampling_method == SamplingMethod.TOP:\n            indices = list(range(input_data.sample_size))\n        elif input_data.sampling_method == SamplingMethod.BOTTOM:\n            indices = list(range(data_size - input_data.sample_size, data_size))\n        elif input_data.sampling_method == SamplingMethod.STRATIFIED:\n            if not input_data.stratify_key:\n                raise ValueError(\n                    \"Stratify key must be provided for stratified sampling.\"\n                )\n            strata = defaultdict(list)\n            for i, item in enumerate(data_to_sample):\n                if isinstance(item, dict):\n                    strata_value = item.get(input_data.stratify_key)\n                elif hasattr(item, input_data.stratify_key):\n                    strata_value = getattr(item, input_data.stratify_key)\n                else:\n                    raise ValueError(\n                        f\"Stratify key '{input_data.stratify_key}' not found in item {item}\"\n                    )\n\n                if strata_value is None:\n                    raise ValueError(\n                        f\"Stratify value for key '{input_data.stratify_key}' is None\"\n                    )\n\n                strata[str(strata_value)].append(i)\n\n            # Calculate the number of samples to take from each stratum\n            stratum_sizes = {\n                k: max(1, int(len(v) / data_size * input_data.sample_size))\n                for k, v in strata.items()\n            }\n\n            # Adjust sizes to ensure we get exactly sample_size samples\n            while sum(stratum_sizes.values()) != input_data.sample_size:\n                if sum(stratum_sizes.values()) < input_data.sample_size:\n                    stratum_sizes[\n                        max(stratum_sizes, key=lambda k: stratum_sizes[k])\n                    ] += 1\n                else:\n                    stratum_sizes[\n                        max(stratum_sizes, key=lambda k: stratum_sizes[k])\n                    ] -= 1\n\n            for stratum, size in stratum_sizes.items():\n                indices.extend(random.sample(strata[stratum], size))\n        elif input_data.sampling_method == SamplingMethod.WEIGHTED:\n            if not input_data.weight_key:\n                raise ValueError(\"Weight key must be provided for weighted sampling.\")\n            weights = []\n            for item in data_to_sample:\n                if isinstance(item, dict):\n                    weight = item.get(input_data.weight_key)\n                elif hasattr(item, input_data.weight_key):\n                    weight = getattr(item, input_data.weight_key)\n                else:\n                    raise ValueError(\n                        f\"Weight key '{input_data.weight_key}' not found in item {item}\"\n                    )\n\n                if weight is None:\n                    raise ValueError(\n                        f\"Weight value for key '{input_data.weight_key}' is None\"\n                    )\n                try:\n                    weights.append(float(weight))\n                except ValueError:\n                    raise ValueError(\n                        f\"Weight value '{weight}' cannot be converted to a number\"\n                    )\n\n            if not weights:\n                raise ValueError(\n                    f\"No valid weights found using key '{input_data.weight_key}'\"\n                )\n\n            indices = random.choices(\n                range(data_size), weights=weights, k=input_data.sample_size\n            )\n        elif input_data.sampling_method == SamplingMethod.RESERVOIR:\n            indices = list(range(input_data.sample_size))\n            for i in range(input_data.sample_size, data_size):\n                j = random.randint(0, i)\n                if j < input_data.sample_size:\n                    indices[j] = i\n        elif input_data.sampling_method == SamplingMethod.CLUSTER:\n            if not input_data.cluster_key:\n                raise ValueError(\"Cluster key must be provided for cluster sampling.\")\n            clusters = defaultdict(list)\n            for i, item in enumerate(data_to_sample):\n                if isinstance(item, dict):\n                    cluster_value = item.get(input_data.cluster_key)\n                elif hasattr(item, input_data.cluster_key):\n                    cluster_value = getattr(item, input_data.cluster_key)\n                else:\n                    raise TypeError(\n                        f\"Item {item} does not have the cluster key '{input_data.cluster_key}'\"\n                    )\n\n                clusters[str(cluster_value)].append(i)\n\n            # Randomly select clusters until we have enough samples\n            selected_clusters = []\n            while (\n                sum(len(clusters[c]) for c in selected_clusters)\n                < input_data.sample_size\n            ):\n                available_clusters = [c for c in clusters if c not in selected_clusters]\n                if not available_clusters:\n                    break\n                selected_clusters.append(random.choice(available_clusters))\n\n            for cluster in selected_clusters:\n                indices.extend(clusters[cluster])\n\n            # If we have more samples than needed, randomly remove some\n            if len(indices) > input_data.sample_size:\n                indices = random.sample(indices, input_data.sample_size)\n        else:\n            raise ValueError(f\"Unknown sampling method: {input_data.sampling_method}\")\n\n        sampled_data = [data_to_sample[i] for i in indices]\n\n        # Clear accumulated data after sampling if accumulation is enabled\n        if input_data.accumulate:\n            self.accumulated_data = []\n\n        yield \"sampled_data\", sampled_data\n        yield \"sample_indices\", indices",
              "children": [
                {
                  "value": "run",
                  "children": []
                },
                {
                  "value": "(self, input_data: Input, **kwargs)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "input_data: Input",
                      "children": [
                        {
                          "value": "input_data",
                          "children": []
                        },
                        {
                          "value": "Input",
                          "children": [
                            {
                              "value": "Input",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "**kwargs",
                      "children": [
                        {
                          "value": "kwargs",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "BlockOutput",
                  "children": [
                    {
                      "value": "BlockOutput",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "if input_data.accumulate:\n            if isinstance(input_data.data, dict):\n                self.accumulated_data.append(input_data.data)\n            elif isinstance(input_data.data, list):\n                self.accumulated_data.extend(input_data.data)\n            else:\n                raise ValueError(f\"Unsupported data type: {type(input_data.data)}\")\n\n            # If we don't have enough data yet, return without sampling\n            if len(self.accumulated_data) < input_data.sample_size:\n                return\n\n            data_to_sample = self.accumulated_data\n        else:\n            # If not accumulating, use the input data directly\n            data_to_sample = (\n                input_data.data\n                if isinstance(input_data.data, list)\n                else [input_data.data]\n            )\n\n        if input_data.random_seed is not None:\n            random.seed(input_data.random_seed)\n\n        data_size = len(data_to_sample)\n\n        if input_data.sample_size > data_size:\n            raise ValueError(\n                f\"Sample size ({input_data.sample_size}) cannot be larger than the dataset size ({data_size}).\"\n            )\n\n        indices = []\n\n        if input_data.sampling_method == SamplingMethod.RANDOM:\n            indices = random.sample(range(data_size), input_data.sample_size)\n        elif input_data.sampling_method == SamplingMethod.SYSTEMATIC:\n            step = data_size // input_data.sample_size\n            start = random.randint(0, step - 1)\n            indices = list(range(start, data_size, step))[: input_data.sample_size]\n        elif input_data.sampling_method == SamplingMethod.TOP:\n            indices = list(range(input_data.sample_size))\n        elif input_data.sampling_method == SamplingMethod.BOTTOM:\n            indices = list(range(data_size - input_data.sample_size, data_size))\n        elif input_data.sampling_method == SamplingMethod.STRATIFIED:\n            if not input_data.stratify_key:\n                raise ValueError(\n                    \"Stratify key must be provided for stratified sampling.\"\n                )\n            strata = defaultdict(list)\n            for i, item in enumerate(data_to_sample):\n                if isinstance(item, dict):\n                    strata_value = item.get(input_data.stratify_key)\n                elif hasattr(item, input_data.stratify_key):\n                    strata_value = getattr(item, input_data.stratify_key)\n                else:\n                    raise ValueError(\n                        f\"Stratify key '{input_data.stratify_key}' not found in item {item}\"\n                    )\n\n                if strata_value is None:\n                    raise ValueError(\n                        f\"Stratify value for key '{input_data.stratify_key}' is None\"\n                    )\n\n                strata[str(strata_value)].append(i)\n\n            # Calculate the number of samples to take from each stratum\n            stratum_sizes = {\n                k: max(1, int(len(v) / data_size * input_data.sample_size))\n                for k, v in strata.items()\n            }\n\n            # Adjust sizes to ensure we get exactly sample_size samples\n            while sum(stratum_sizes.values()) != input_data.sample_size:\n                if sum(stratum_sizes.values()) < input_data.sample_size:\n                    stratum_sizes[\n                        max(stratum_sizes, key=lambda k: stratum_sizes[k])\n                    ] += 1\n                else:\n                    stratum_sizes[\n                        max(stratum_sizes, key=lambda k: stratum_sizes[k])\n                    ] -= 1\n\n            for stratum, size in stratum_sizes.items():\n                indices.extend(random.sample(strata[stratum], size))\n        elif input_data.sampling_method == SamplingMethod.WEIGHTED:\n            if not input_data.weight_key:\n                raise ValueError(\"Weight key must be provided for weighted sampling.\")\n            weights = []\n            for item in data_to_sample:\n                if isinstance(item, dict):\n                    weight = item.get(input_data.weight_key)\n                elif hasattr(item, input_data.weight_key):\n                    weight = getattr(item, input_data.weight_key)\n                else:\n                    raise ValueError(\n                        f\"Weight key '{input_data.weight_key}' not found in item {item}\"\n                    )\n\n                if weight is None:\n                    raise ValueError(\n                        f\"Weight value for key '{input_data.weight_key}' is None\"\n                    )\n                try:\n                    weights.append(float(weight))\n                except ValueError:\n                    raise ValueError(\n                        f\"Weight value '{weight}' cannot be converted to a number\"\n                    )\n\n            if not weights:\n                raise ValueError(\n                    f\"No valid weights found using key '{input_data.weight_key}'\"\n                )\n\n            indices = random.choices(\n                range(data_size), weights=weights, k=input_data.sample_size\n            )\n        elif input_data.sampling_method == SamplingMethod.RESERVOIR:\n            indices = list(range(input_data.sample_size))\n            for i in range(input_data.sample_size, data_size):\n                j = random.randint(0, i)\n                if j < input_data.sample_size:\n                    indices[j] = i\n        elif input_data.sampling_method == SamplingMethod.CLUSTER:\n            if not input_data.cluster_key:\n                raise ValueError(\"Cluster key must be provided for cluster sampling.\")\n            clusters = defaultdict(list)\n            for i, item in enumerate(data_to_sample):\n                if isinstance(item, dict):\n                    cluster_value = item.get(input_data.cluster_key)\n                elif hasattr(item, input_data.cluster_key):\n                    cluster_value = getattr(item, input_data.cluster_key)\n                else:\n                    raise TypeError(\n                        f\"Item {item} does not have the cluster key '{input_data.cluster_key}'\"\n                    )\n\n                clusters[str(cluster_value)].append(i)\n\n            # Randomly select clusters until we have enough samples\n            selected_clusters = []\n            while (\n                sum(len(clusters[c]) for c in selected_clusters)\n                < input_data.sample_size\n            ):\n                available_clusters = [c for c in clusters if c not in selected_clusters]\n                if not available_clusters:\n                    break\n                selected_clusters.append(random.choice(available_clusters))\n\n            for cluster in selected_clusters:\n                indices.extend(clusters[cluster])\n\n            # If we have more samples than needed, randomly remove some\n            if len(indices) > input_data.sample_size:\n                indices = random.sample(indices, input_data.sample_size)\n        else:\n            raise ValueError(f\"Unknown sampling method: {input_data.sampling_method}\")\n\n        sampled_data = [data_to_sample[i] for i in indices]\n\n        # Clear accumulated data after sampling if accumulation is enabled\n        if input_data.accumulate:\n            self.accumulated_data = []\n\n        yield \"sampled_data\", sampled_data\n        yield \"sample_indices\", indices",
                  "children": [
                    {
                      "value": "if input_data.accumulate:\n            if isinstance(input_data.data, dict):\n                self.accumulated_data.append(input_data.data)\n            elif isinstance(input_data.data, list):\n                self.accumulated_data.extend(input_data.data)\n            else:\n                raise ValueError(f\"Unsupported data type: {type(input_data.data)}\")\n\n            # If we don't have enough data yet, return without sampling\n            if len(self.accumulated_data) < input_data.sample_size:\n                return\n\n            data_to_sample = self.accumulated_data\n        else:\n            # If not accumulating, use the input data directly\n            data_to_sample = (\n                input_data.data\n                if isinstance(input_data.data, list)\n                else [input_data.data]\n            )",
                      "children": [
                        {
                          "value": "input_data.accumulate",
                          "children": [
                            {
                              "value": "input_data",
                              "children": []
                            },
                            {
                              "value": "accumulate",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "if isinstance(input_data.data, dict):\n                self.accumulated_data.append(input_data.data)\n            elif isinstance(input_data.data, list):\n                self.accumulated_data.extend(input_data.data)\n            else:\n                raise ValueError(f\"Unsupported data type: {type(input_data.data)}\")\n\n            # If we don't have enough data yet, return without sampling\n            if len(self.accumulated_data) < input_data.sample_size:\n                return\n\n            data_to_sample = self.accumulated_data",
                          "children": [
                            {
                              "value": "if isinstance(input_data.data, dict):\n                self.accumulated_data.append(input_data.data)\n            elif isinstance(input_data.data, list):\n                self.accumulated_data.extend(input_data.data)\n            else:\n                raise ValueError(f\"Unsupported data type: {type(input_data.data)}\")",
                              "children": [
                                {
                                  "value": "isinstance(input_data.data, dict)",
                                  "children": [
                                    {
                                      "value": "isinstance",
                                      "children": []
                                    },
                                    {
                                      "value": "(input_data.data, dict)",
                                      "children": [
                                        {
                                          "value": "input_data.data",
                                          "children": [
                                            {
                                              "value": "input_data",
                                              "children": []
                                            },
                                            {
                                              "value": "data",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "dict",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "self.accumulated_data.append(input_data.data)",
                                  "children": [
                                    {
                                      "value": "self.accumulated_data.append(input_data.data)",
                                      "children": [
                                        {
                                          "value": "self.accumulated_data.append(input_data.data)",
                                          "children": [
                                            {
                                              "value": "self.accumulated_data.append",
                                              "children": [
                                                {
                                                  "value": "self.accumulated_data",
                                                  "children": [
                                                    {
                                                      "value": "self",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "accumulated_data",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "append",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(input_data.data)",
                                              "children": [
                                                {
                                                  "value": "input_data.data",
                                                  "children": [
                                                    {
                                                      "value": "input_data",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "data",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "elif isinstance(input_data.data, list):\n                self.accumulated_data.extend(input_data.data)",
                                  "children": [
                                    {
                                      "value": "isinstance(input_data.data, list)",
                                      "children": [
                                        {
                                          "value": "isinstance",
                                          "children": []
                                        },
                                        {
                                          "value": "(input_data.data, list)",
                                          "children": [
                                            {
                                              "value": "input_data.data",
                                              "children": [
                                                {
                                                  "value": "input_data",
                                                  "children": []
                                                },
                                                {
                                                  "value": "data",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "list",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "self.accumulated_data.extend(input_data.data)",
                                      "children": [
                                        {
                                          "value": "self.accumulated_data.extend(input_data.data)",
                                          "children": [
                                            {
                                              "value": "self.accumulated_data.extend(input_data.data)",
                                              "children": [
                                                {
                                                  "value": "self.accumulated_data.extend",
                                                  "children": [
                                                    {
                                                      "value": "self.accumulated_data",
                                                      "children": [
                                                        {
                                                          "value": "self",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "accumulated_data",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "extend",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(input_data.data)",
                                                  "children": [
                                                    {
                                                      "value": "input_data.data",
                                                      "children": [
                                                        {
                                                          "value": "input_data",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "data",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "else:\n                raise ValueError(f\"Unsupported data type: {type(input_data.data)}\")",
                                  "children": [
                                    {
                                      "value": "raise ValueError(f\"Unsupported data type: {type(input_data.data)}\")",
                                      "children": [
                                        {
                                          "value": "raise ValueError(f\"Unsupported data type: {type(input_data.data)}\")",
                                          "children": [
                                            {
                                              "value": "ValueError(f\"Unsupported data type: {type(input_data.data)}\")",
                                              "children": [
                                                {
                                                  "value": "ValueError",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(f\"Unsupported data type: {type(input_data.data)}\")",
                                                  "children": [
                                                    {
                                                      "value": "f\"Unsupported data type: {type(input_data.data)}\"",
                                                      "children": [
                                                        {
                                                          "value": "f\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "Unsupported data type:",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "{type(input_data.data)}",
                                                          "children": [
                                                            {
                                                              "value": "type(input_data.data)",
                                                              "children": [
                                                                {
                                                                  "value": "type",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "(input_data.data)",
                                                                  "children": [
                                                                    {
                                                                      "value": "input_data.data",
                                                                      "children": [
                                                                        {
                                                                          "value": "input_data",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "data",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "# If we don't have enough data yet, return without sampling",
                              "children": []
                            },
                            {
                              "value": "if len(self.accumulated_data) < input_data.sample_size:\n                return",
                              "children": [
                                {
                                  "value": "len(self.accumulated_data) < input_data.sample_size",
                                  "children": [
                                    {
                                      "value": "len(self.accumulated_data)",
                                      "children": [
                                        {
                                          "value": "len",
                                          "children": []
                                        },
                                        {
                                          "value": "(self.accumulated_data)",
                                          "children": [
                                            {
                                              "value": "self.accumulated_data",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "accumulated_data",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "input_data.sample_size",
                                      "children": [
                                        {
                                          "value": "input_data",
                                          "children": []
                                        },
                                        {
                                          "value": "sample_size",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "return",
                                  "children": [
                                    {
                                      "value": "return",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "data_to_sample = self.accumulated_data",
                              "children": [
                                {
                                  "value": "data_to_sample = self.accumulated_data",
                                  "children": [
                                    {
                                      "value": "data_to_sample",
                                      "children": []
                                    },
                                    {
                                      "value": "self.accumulated_data",
                                      "children": [
                                        {
                                          "value": "self",
                                          "children": []
                                        },
                                        {
                                          "value": "accumulated_data",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "else:\n            # If not accumulating, use the input data directly\n            data_to_sample = (\n                input_data.data\n                if isinstance(input_data.data, list)\n                else [input_data.data]\n            )",
                          "children": [
                            {
                              "value": "# If not accumulating, use the input data directly",
                              "children": []
                            },
                            {
                              "value": "data_to_sample = (\n                input_data.data\n                if isinstance(input_data.data, list)\n                else [input_data.data]\n            )",
                              "children": [
                                {
                                  "value": "data_to_sample = (\n                input_data.data\n                if isinstance(input_data.data, list)\n                else [input_data.data]\n            )",
                                  "children": [
                                    {
                                      "value": "data_to_sample = (\n                input_data.data\n                if isinstance(input_data.data, list)\n                else [input_data.data]\n            )",
                                      "children": [
                                        {
                                          "value": "data_to_sample",
                                          "children": []
                                        },
                                        {
                                          "value": "(\n                input_data.data\n                if isinstance(input_data.data, list)\n                else [input_data.data]\n            )",
                                          "children": [
                                            {
                                              "value": "input_data.data\n                if isinstance(input_data.data, list)\n                else [input_data.data]",
                                              "children": [
                                                {
                                                  "value": "input_data.data",
                                                  "children": [
                                                    {
                                                      "value": "input_data",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "data",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "isinstance(input_data.data, list)",
                                                  "children": [
                                                    {
                                                      "value": "isinstance",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "(input_data.data, list)",
                                                      "children": [
                                                        {
                                                          "value": "input_data.data",
                                                          "children": [
                                                            {
                                                              "value": "input_data",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "data",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "list",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "[input_data.data]",
                                                  "children": [
                                                    {
                                                      "value": "input_data.data",
                                                      "children": [
                                                        {
                                                          "value": "input_data",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "data",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if input_data.random_seed is not None:\n            random.seed(input_data.random_seed)",
                      "children": [
                        {
                          "value": "input_data.random_seed is not None",
                          "children": [
                            {
                              "value": "input_data.random_seed",
                              "children": [
                                {
                                  "value": "input_data",
                                  "children": []
                                },
                                {
                                  "value": "random_seed",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "None",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "random.seed(input_data.random_seed)",
                          "children": [
                            {
                              "value": "random.seed(input_data.random_seed)",
                              "children": [
                                {
                                  "value": "random.seed(input_data.random_seed)",
                                  "children": [
                                    {
                                      "value": "random.seed",
                                      "children": [
                                        {
                                          "value": "random",
                                          "children": []
                                        },
                                        {
                                          "value": "seed",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(input_data.random_seed)",
                                      "children": [
                                        {
                                          "value": "input_data.random_seed",
                                          "children": [
                                            {
                                              "value": "input_data",
                                              "children": []
                                            },
                                            {
                                              "value": "random_seed",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "data_size = len(data_to_sample)",
                      "children": [
                        {
                          "value": "data_size = len(data_to_sample)",
                          "children": [
                            {
                              "value": "data_size",
                              "children": []
                            },
                            {
                              "value": "len(data_to_sample)",
                              "children": [
                                {
                                  "value": "len",
                                  "children": []
                                },
                                {
                                  "value": "(data_to_sample)",
                                  "children": [
                                    {
                                      "value": "data_to_sample",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if input_data.sample_size > data_size:\n            raise ValueError(\n                f\"Sample size ({input_data.sample_size}) cannot be larger than the dataset size ({data_size}).\"\n            )",
                      "children": [
                        {
                          "value": "input_data.sample_size > data_size",
                          "children": [
                            {
                              "value": "input_data.sample_size",
                              "children": [
                                {
                                  "value": "input_data",
                                  "children": []
                                },
                                {
                                  "value": "sample_size",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "data_size",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "raise ValueError(\n                f\"Sample size ({input_data.sample_size}) cannot be larger than the dataset size ({data_size}).\"\n            )",
                          "children": [
                            {
                              "value": "raise ValueError(\n                f\"Sample size ({input_data.sample_size}) cannot be larger than the dataset size ({data_size}).\"\n            )",
                              "children": [
                                {
                                  "value": "ValueError(\n                f\"Sample size ({input_data.sample_size}) cannot be larger than the dataset size ({data_size}).\"\n            )",
                                  "children": [
                                    {
                                      "value": "ValueError",
                                      "children": []
                                    },
                                    {
                                      "value": "(\n                f\"Sample size ({input_data.sample_size}) cannot be larger than the dataset size ({data_size}).\"\n            )",
                                      "children": [
                                        {
                                          "value": "f\"Sample size ({input_data.sample_size}) cannot be larger than the dataset size ({data_size}).\"",
                                          "children": [
                                            {
                                              "value": "f\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Sample size (",
                                              "children": []
                                            },
                                            {
                                              "value": "{input_data.sample_size}",
                                              "children": [
                                                {
                                                  "value": "input_data.sample_size",
                                                  "children": [
                                                    {
                                                      "value": "input_data",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "sample_size",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": ") cannot be larger than the dataset size (",
                                              "children": []
                                            },
                                            {
                                              "value": "{data_size}",
                                              "children": [
                                                {
                                                  "value": "data_size",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": ").",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "indices = []",
                      "children": [
                        {
                          "value": "indices = []",
                          "children": [
                            {
                              "value": "indices",
                              "children": []
                            },
                            {
                              "value": "[]",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if input_data.sampling_method == SamplingMethod.RANDOM:\n            indices = random.sample(range(data_size), input_data.sample_size)\n        elif input_data.sampling_method == SamplingMethod.SYSTEMATIC:\n            step = data_size // input_data.sample_size\n            start = random.randint(0, step - 1)\n            indices = list(range(start, data_size, step))[: input_data.sample_size]\n        elif input_data.sampling_method == SamplingMethod.TOP:\n            indices = list(range(input_data.sample_size))\n        elif input_data.sampling_method == SamplingMethod.BOTTOM:\n            indices = list(range(data_size - input_data.sample_size, data_size))\n        elif input_data.sampling_method == SamplingMethod.STRATIFIED:\n            if not input_data.stratify_key:\n                raise ValueError(\n                    \"Stratify key must be provided for stratified sampling.\"\n                )\n            strata = defaultdict(list)\n            for i, item in enumerate(data_to_sample):\n                if isinstance(item, dict):\n                    strata_value = item.get(input_data.stratify_key)\n                elif hasattr(item, input_data.stratify_key):\n                    strata_value = getattr(item, input_data.stratify_key)\n                else:\n                    raise ValueError(\n                        f\"Stratify key '{input_data.stratify_key}' not found in item {item}\"\n                    )\n\n                if strata_value is None:\n                    raise ValueError(\n                        f\"Stratify value for key '{input_data.stratify_key}' is None\"\n                    )\n\n                strata[str(strata_value)].append(i)\n\n            # Calculate the number of samples to take from each stratum\n            stratum_sizes = {\n                k: max(1, int(len(v) / data_size * input_data.sample_size))\n                for k, v in strata.items()\n            }\n\n            # Adjust sizes to ensure we get exactly sample_size samples\n            while sum(stratum_sizes.values()) != input_data.sample_size:\n                if sum(stratum_sizes.values()) < input_data.sample_size:\n                    stratum_sizes[\n                        max(stratum_sizes, key=lambda k: stratum_sizes[k])\n                    ] += 1\n                else:\n                    stratum_sizes[\n                        max(stratum_sizes, key=lambda k: stratum_sizes[k])\n                    ] -= 1\n\n            for stratum, size in stratum_sizes.items():\n                indices.extend(random.sample(strata[stratum], size))\n        elif input_data.sampling_method == SamplingMethod.WEIGHTED:\n            if not input_data.weight_key:\n                raise ValueError(\"Weight key must be provided for weighted sampling.\")\n            weights = []\n            for item in data_to_sample:\n                if isinstance(item, dict):\n                    weight = item.get(input_data.weight_key)\n                elif hasattr(item, input_data.weight_key):\n                    weight = getattr(item, input_data.weight_key)\n                else:\n                    raise ValueError(\n                        f\"Weight key '{input_data.weight_key}' not found in item {item}\"\n                    )\n\n                if weight is None:\n                    raise ValueError(\n                        f\"Weight value for key '{input_data.weight_key}' is None\"\n                    )\n                try:\n                    weights.append(float(weight))\n                except ValueError:\n                    raise ValueError(\n                        f\"Weight value '{weight}' cannot be converted to a number\"\n                    )\n\n            if not weights:\n                raise ValueError(\n                    f\"No valid weights found using key '{input_data.weight_key}'\"\n                )\n\n            indices = random.choices(\n                range(data_size), weights=weights, k=input_data.sample_size\n            )\n        elif input_data.sampling_method == SamplingMethod.RESERVOIR:\n            indices = list(range(input_data.sample_size))\n            for i in range(input_data.sample_size, data_size):\n                j = random.randint(0, i)\n                if j < input_data.sample_size:\n                    indices[j] = i\n        elif input_data.sampling_method == SamplingMethod.CLUSTER:\n            if not input_data.cluster_key:\n                raise ValueError(\"Cluster key must be provided for cluster sampling.\")\n            clusters = defaultdict(list)\n            for i, item in enumerate(data_to_sample):\n                if isinstance(item, dict):\n                    cluster_value = item.get(input_data.cluster_key)\n                elif hasattr(item, input_data.cluster_key):\n                    cluster_value = getattr(item, input_data.cluster_key)\n                else:\n                    raise TypeError(\n                        f\"Item {item} does not have the cluster key '{input_data.cluster_key}'\"\n                    )\n\n                clusters[str(cluster_value)].append(i)\n\n            # Randomly select clusters until we have enough samples\n            selected_clusters = []\n            while (\n                sum(len(clusters[c]) for c in selected_clusters)\n                < input_data.sample_size\n            ):\n                available_clusters = [c for c in clusters if c not in selected_clusters]\n                if not available_clusters:\n                    break\n                selected_clusters.append(random.choice(available_clusters))\n\n            for cluster in selected_clusters:\n                indices.extend(clusters[cluster])\n\n            # If we have more samples than needed, randomly remove some\n            if len(indices) > input_data.sample_size:\n                indices = random.sample(indices, input_data.sample_size)\n        else:\n            raise ValueError(f\"Unknown sampling method: {input_data.sampling_method}\")",
                      "children": [
                        {
                          "value": "input_data.sampling_method == SamplingMethod.RANDOM",
                          "children": [
                            {
                              "value": "input_data.sampling_method",
                              "children": [
                                {
                                  "value": "input_data",
                                  "children": []
                                },
                                {
                                  "value": "sampling_method",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "SamplingMethod.RANDOM",
                              "children": [
                                {
                                  "value": "SamplingMethod",
                                  "children": []
                                },
                                {
                                  "value": "RANDOM",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "indices = random.sample(range(data_size), input_data.sample_size)",
                          "children": [
                            {
                              "value": "indices = random.sample(range(data_size), input_data.sample_size)",
                              "children": [
                                {
                                  "value": "indices = random.sample(range(data_size), input_data.sample_size)",
                                  "children": [
                                    {
                                      "value": "indices",
                                      "children": []
                                    },
                                    {
                                      "value": "random.sample(range(data_size), input_data.sample_size)",
                                      "children": [
                                        {
                                          "value": "random.sample",
                                          "children": [
                                            {
                                              "value": "random",
                                              "children": []
                                            },
                                            {
                                              "value": "sample",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(range(data_size), input_data.sample_size)",
                                          "children": [
                                            {
                                              "value": "range(data_size)",
                                              "children": [
                                                {
                                                  "value": "range",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(data_size)",
                                                  "children": [
                                                    {
                                                      "value": "data_size",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "input_data.sample_size",
                                              "children": [
                                                {
                                                  "value": "input_data",
                                                  "children": []
                                                },
                                                {
                                                  "value": "sample_size",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "elif input_data.sampling_method == SamplingMethod.SYSTEMATIC:\n            step = data_size // input_data.sample_size\n            start = random.randint(0, step - 1)\n            indices = list(range(start, data_size, step))[: input_data.sample_size]",
                          "children": [
                            {
                              "value": "input_data.sampling_method == SamplingMethod.SYSTEMATIC",
                              "children": [
                                {
                                  "value": "input_data.sampling_method",
                                  "children": [
                                    {
                                      "value": "input_data",
                                      "children": []
                                    },
                                    {
                                      "value": "sampling_method",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "SamplingMethod.SYSTEMATIC",
                                  "children": [
                                    {
                                      "value": "SamplingMethod",
                                      "children": []
                                    },
                                    {
                                      "value": "SYSTEMATIC",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "step = data_size // input_data.sample_size\n            start = random.randint(0, step - 1)\n            indices = list(range(start, data_size, step))[: input_data.sample_size]",
                              "children": [
                                {
                                  "value": "step = data_size // input_data.sample_size",
                                  "children": [
                                    {
                                      "value": "step = data_size // input_data.sample_size",
                                      "children": [
                                        {
                                          "value": "step",
                                          "children": []
                                        },
                                        {
                                          "value": "data_size // input_data.sample_size",
                                          "children": [
                                            {
                                              "value": "data_size",
                                              "children": []
                                            },
                                            {
                                              "value": "input_data.sample_size",
                                              "children": [
                                                {
                                                  "value": "input_data",
                                                  "children": []
                                                },
                                                {
                                                  "value": "sample_size",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "start = random.randint(0, step - 1)",
                                  "children": [
                                    {
                                      "value": "start = random.randint(0, step - 1)",
                                      "children": [
                                        {
                                          "value": "start",
                                          "children": []
                                        },
                                        {
                                          "value": "random.randint(0, step - 1)",
                                          "children": [
                                            {
                                              "value": "random.randint",
                                              "children": [
                                                {
                                                  "value": "random",
                                                  "children": []
                                                },
                                                {
                                                  "value": "randint",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(0, step - 1)",
                                              "children": [
                                                {
                                                  "value": "0",
                                                  "children": []
                                                },
                                                {
                                                  "value": "step - 1",
                                                  "children": [
                                                    {
                                                      "value": "step",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "1",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "indices = list(range(start, data_size, step))[: input_data.sample_size]",
                                  "children": [
                                    {
                                      "value": "indices = list(range(start, data_size, step))[: input_data.sample_size]",
                                      "children": [
                                        {
                                          "value": "indices",
                                          "children": []
                                        },
                                        {
                                          "value": "list(range(start, data_size, step))[: input_data.sample_size]",
                                          "children": [
                                            {
                                              "value": "list(range(start, data_size, step))",
                                              "children": [
                                                {
                                                  "value": "list",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(range(start, data_size, step))",
                                                  "children": [
                                                    {
                                                      "value": "range(start, data_size, step)",
                                                      "children": [
                                                        {
                                                          "value": "range",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "(start, data_size, step)",
                                                          "children": [
                                                            {
                                                              "value": "start",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "data_size",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "step",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": ": input_data.sample_size",
                                              "children": [
                                                {
                                                  "value": "input_data.sample_size",
                                                  "children": [
                                                    {
                                                      "value": "input_data",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "sample_size",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "elif input_data.sampling_method == SamplingMethod.TOP:\n            indices = list(range(input_data.sample_size))",
                          "children": [
                            {
                              "value": "input_data.sampling_method == SamplingMethod.TOP",
                              "children": [
                                {
                                  "value": "input_data.sampling_method",
                                  "children": [
                                    {
                                      "value": "input_data",
                                      "children": []
                                    },
                                    {
                                      "value": "sampling_method",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "SamplingMethod.TOP",
                                  "children": [
                                    {
                                      "value": "SamplingMethod",
                                      "children": []
                                    },
                                    {
                                      "value": "TOP",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "indices = list(range(input_data.sample_size))",
                              "children": [
                                {
                                  "value": "indices = list(range(input_data.sample_size))",
                                  "children": [
                                    {
                                      "value": "indices = list(range(input_data.sample_size))",
                                      "children": [
                                        {
                                          "value": "indices",
                                          "children": []
                                        },
                                        {
                                          "value": "list(range(input_data.sample_size))",
                                          "children": [
                                            {
                                              "value": "list",
                                              "children": []
                                            },
                                            {
                                              "value": "(range(input_data.sample_size))",
                                              "children": [
                                                {
                                                  "value": "range(input_data.sample_size)",
                                                  "children": [
                                                    {
                                                      "value": "range",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "(input_data.sample_size)",
                                                      "children": [
                                                        {
                                                          "value": "input_data.sample_size",
                                                          "children": [
                                                            {
                                                              "value": "input_data",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "sample_size",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "elif input_data.sampling_method == SamplingMethod.BOTTOM:\n            indices = list(range(data_size - input_data.sample_size, data_size))",
                          "children": [
                            {
                              "value": "input_data.sampling_method == SamplingMethod.BOTTOM",
                              "children": [
                                {
                                  "value": "input_data.sampling_method",
                                  "children": [
                                    {
                                      "value": "input_data",
                                      "children": []
                                    },
                                    {
                                      "value": "sampling_method",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "SamplingMethod.BOTTOM",
                                  "children": [
                                    {
                                      "value": "SamplingMethod",
                                      "children": []
                                    },
                                    {
                                      "value": "BOTTOM",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "indices = list(range(data_size - input_data.sample_size, data_size))",
                              "children": [
                                {
                                  "value": "indices = list(range(data_size - input_data.sample_size, data_size))",
                                  "children": [
                                    {
                                      "value": "indices = list(range(data_size - input_data.sample_size, data_size))",
                                      "children": [
                                        {
                                          "value": "indices",
                                          "children": []
                                        },
                                        {
                                          "value": "list(range(data_size - input_data.sample_size, data_size))",
                                          "children": [
                                            {
                                              "value": "list",
                                              "children": []
                                            },
                                            {
                                              "value": "(range(data_size - input_data.sample_size, data_size))",
                                              "children": [
                                                {
                                                  "value": "range(data_size - input_data.sample_size, data_size)",
                                                  "children": [
                                                    {
                                                      "value": "range",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "(data_size - input_data.sample_size, data_size)",
                                                      "children": [
                                                        {
                                                          "value": "data_size - input_data.sample_size",
                                                          "children": [
                                                            {
                                                              "value": "data_size",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "input_data.sample_size",
                                                              "children": [
                                                                {
                                                                  "value": "input_data",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "sample_size",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "data_size",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "elif input_data.sampling_method == SamplingMethod.STRATIFIED:\n            if not input_data.stratify_key:\n                raise ValueError(\n                    \"Stratify key must be provided for stratified sampling.\"\n                )\n            strata = defaultdict(list)\n            for i, item in enumerate(data_to_sample):\n                if isinstance(item, dict):\n                    strata_value = item.get(input_data.stratify_key)\n                elif hasattr(item, input_data.stratify_key):\n                    strata_value = getattr(item, input_data.stratify_key)\n                else:\n                    raise ValueError(\n                        f\"Stratify key '{input_data.stratify_key}' not found in item {item}\"\n                    )\n\n                if strata_value is None:\n                    raise ValueError(\n                        f\"Stratify value for key '{input_data.stratify_key}' is None\"\n                    )\n\n                strata[str(strata_value)].append(i)\n\n            # Calculate the number of samples to take from each stratum\n            stratum_sizes = {\n                k: max(1, int(len(v) / data_size * input_data.sample_size))\n                for k, v in strata.items()\n            }\n\n            # Adjust sizes to ensure we get exactly sample_size samples\n            while sum(stratum_sizes.values()) != input_data.sample_size:\n                if sum(stratum_sizes.values()) < input_data.sample_size:\n                    stratum_sizes[\n                        max(stratum_sizes, key=lambda k: stratum_sizes[k])\n                    ] += 1\n                else:\n                    stratum_sizes[\n                        max(stratum_sizes, key=lambda k: stratum_sizes[k])\n                    ] -= 1\n\n            for stratum, size in stratum_sizes.items():\n                indices.extend(random.sample(strata[stratum], size))",
                          "children": [
                            {
                              "value": "input_data.sampling_method == SamplingMethod.STRATIFIED",
                              "children": [
                                {
                                  "value": "input_data.sampling_method",
                                  "children": [
                                    {
                                      "value": "input_data",
                                      "children": []
                                    },
                                    {
                                      "value": "sampling_method",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "SamplingMethod.STRATIFIED",
                                  "children": [
                                    {
                                      "value": "SamplingMethod",
                                      "children": []
                                    },
                                    {
                                      "value": "STRATIFIED",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "if not input_data.stratify_key:\n                raise ValueError(\n                    \"Stratify key must be provided for stratified sampling.\"\n                )\n            strata = defaultdict(list)\n            for i, item in enumerate(data_to_sample):\n                if isinstance(item, dict):\n                    strata_value = item.get(input_data.stratify_key)\n                elif hasattr(item, input_data.stratify_key):\n                    strata_value = getattr(item, input_data.stratify_key)\n                else:\n                    raise ValueError(\n                        f\"Stratify key '{input_data.stratify_key}' not found in item {item}\"\n                    )\n\n                if strata_value is None:\n                    raise ValueError(\n                        f\"Stratify value for key '{input_data.stratify_key}' is None\"\n                    )\n\n                strata[str(strata_value)].append(i)\n\n            # Calculate the number of samples to take from each stratum\n            stratum_sizes = {\n                k: max(1, int(len(v) / data_size * input_data.sample_size))\n                for k, v in strata.items()\n            }\n\n            # Adjust sizes to ensure we get exactly sample_size samples\n            while sum(stratum_sizes.values()) != input_data.sample_size:\n                if sum(stratum_sizes.values()) < input_data.sample_size:\n                    stratum_sizes[\n                        max(stratum_sizes, key=lambda k: stratum_sizes[k])\n                    ] += 1\n                else:\n                    stratum_sizes[\n                        max(stratum_sizes, key=lambda k: stratum_sizes[k])\n                    ] -= 1\n\n            for stratum, size in stratum_sizes.items():\n                indices.extend(random.sample(strata[stratum], size))",
                              "children": [
                                {
                                  "value": "if not input_data.stratify_key:\n                raise ValueError(\n                    \"Stratify key must be provided for stratified sampling.\"\n                )",
                                  "children": [
                                    {
                                      "value": "not input_data.stratify_key",
                                      "children": [
                                        {
                                          "value": "input_data.stratify_key",
                                          "children": [
                                            {
                                              "value": "input_data",
                                              "children": []
                                            },
                                            {
                                              "value": "stratify_key",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "raise ValueError(\n                    \"Stratify key must be provided for stratified sampling.\"\n                )",
                                      "children": [
                                        {
                                          "value": "raise ValueError(\n                    \"Stratify key must be provided for stratified sampling.\"\n                )",
                                          "children": [
                                            {
                                              "value": "ValueError(\n                    \"Stratify key must be provided for stratified sampling.\"\n                )",
                                              "children": [
                                                {
                                                  "value": "ValueError",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(\n                    \"Stratify key must be provided for stratified sampling.\"\n                )",
                                                  "children": [
                                                    {
                                                      "value": "\"Stratify key must be provided for stratified sampling.\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "Stratify key must be provided for stratified sampling.",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "strata = defaultdict(list)",
                                  "children": [
                                    {
                                      "value": "strata = defaultdict(list)",
                                      "children": [
                                        {
                                          "value": "strata",
                                          "children": []
                                        },
                                        {
                                          "value": "defaultdict(list)",
                                          "children": [
                                            {
                                              "value": "defaultdict",
                                              "children": []
                                            },
                                            {
                                              "value": "(list)",
                                              "children": [
                                                {
                                                  "value": "list",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "for i, item in enumerate(data_to_sample):\n                if isinstance(item, dict):\n                    strata_value = item.get(input_data.stratify_key)\n                elif hasattr(item, input_data.stratify_key):\n                    strata_value = getattr(item, input_data.stratify_key)\n                else:\n                    raise ValueError(\n                        f\"Stratify key '{input_data.stratify_key}' not found in item {item}\"\n                    )\n\n                if strata_value is None:\n                    raise ValueError(\n                        f\"Stratify value for key '{input_data.stratify_key}' is None\"\n                    )\n\n                strata[str(strata_value)].append(i)",
                                  "children": [
                                    {
                                      "value": "i, item",
                                      "children": [
                                        {
                                          "value": "i",
                                          "children": []
                                        },
                                        {
                                          "value": "item",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "enumerate(data_to_sample)",
                                      "children": [
                                        {
                                          "value": "enumerate",
                                          "children": []
                                        },
                                        {
                                          "value": "(data_to_sample)",
                                          "children": [
                                            {
                                              "value": "data_to_sample",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "if isinstance(item, dict):\n                    strata_value = item.get(input_data.stratify_key)\n                elif hasattr(item, input_data.stratify_key):\n                    strata_value = getattr(item, input_data.stratify_key)\n                else:\n                    raise ValueError(\n                        f\"Stratify key '{input_data.stratify_key}' not found in item {item}\"\n                    )\n\n                if strata_value is None:\n                    raise ValueError(\n                        f\"Stratify value for key '{input_data.stratify_key}' is None\"\n                    )\n\n                strata[str(strata_value)].append(i)",
                                      "children": [
                                        {
                                          "value": "if isinstance(item, dict):\n                    strata_value = item.get(input_data.stratify_key)\n                elif hasattr(item, input_data.stratify_key):\n                    strata_value = getattr(item, input_data.stratify_key)\n                else:\n                    raise ValueError(\n                        f\"Stratify key '{input_data.stratify_key}' not found in item {item}\"\n                    )",
                                          "children": [
                                            {
                                              "value": "isinstance(item, dict)",
                                              "children": [
                                                {
                                                  "value": "isinstance",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(item, dict)",
                                                  "children": [
                                                    {
                                                      "value": "item",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "dict",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "strata_value = item.get(input_data.stratify_key)",
                                              "children": [
                                                {
                                                  "value": "strata_value = item.get(input_data.stratify_key)",
                                                  "children": [
                                                    {
                                                      "value": "strata_value = item.get(input_data.stratify_key)",
                                                      "children": [
                                                        {
                                                          "value": "strata_value",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "item.get(input_data.stratify_key)",
                                                          "children": [
                                                            {
                                                              "value": "item.get",
                                                              "children": [
                                                                {
                                                                  "value": "item",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "get",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "(input_data.stratify_key)",
                                                              "children": [
                                                                {
                                                                  "value": "input_data.stratify_key",
                                                                  "children": [
                                                                    {
                                                                      "value": "input_data",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "stratify_key",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "elif hasattr(item, input_data.stratify_key):\n                    strata_value = getattr(item, input_data.stratify_key)",
                                              "children": [
                                                {
                                                  "value": "hasattr(item, input_data.stratify_key)",
                                                  "children": [
                                                    {
                                                      "value": "hasattr",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "(item, input_data.stratify_key)",
                                                      "children": [
                                                        {
                                                          "value": "item",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "input_data.stratify_key",
                                                          "children": [
                                                            {
                                                              "value": "input_data",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "stratify_key",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "strata_value = getattr(item, input_data.stratify_key)",
                                                  "children": [
                                                    {
                                                      "value": "strata_value = getattr(item, input_data.stratify_key)",
                                                      "children": [
                                                        {
                                                          "value": "strata_value = getattr(item, input_data.stratify_key)",
                                                          "children": [
                                                            {
                                                              "value": "strata_value",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "getattr(item, input_data.stratify_key)",
                                                              "children": [
                                                                {
                                                                  "value": "getattr",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "(item, input_data.stratify_key)",
                                                                  "children": [
                                                                    {
                                                                      "value": "item",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "input_data.stratify_key",
                                                                      "children": [
                                                                        {
                                                                          "value": "input_data",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "stratify_key",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "else:\n                    raise ValueError(\n                        f\"Stratify key '{input_data.stratify_key}' not found in item {item}\"\n                    )",
                                              "children": [
                                                {
                                                  "value": "raise ValueError(\n                        f\"Stratify key '{input_data.stratify_key}' not found in item {item}\"\n                    )",
                                                  "children": [
                                                    {
                                                      "value": "raise ValueError(\n                        f\"Stratify key '{input_data.stratify_key}' not found in item {item}\"\n                    )",
                                                      "children": [
                                                        {
                                                          "value": "ValueError(\n                        f\"Stratify key '{input_data.stratify_key}' not found in item {item}\"\n                    )",
                                                          "children": [
                                                            {
                                                              "value": "ValueError",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "(\n                        f\"Stratify key '{input_data.stratify_key}' not found in item {item}\"\n                    )",
                                                              "children": [
                                                                {
                                                                  "value": "f\"Stratify key '{input_data.stratify_key}' not found in item {item}\"",
                                                                  "children": [
                                                                    {
                                                                      "value": "f\"",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "Stratify key '",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "{input_data.stratify_key}",
                                                                      "children": [
                                                                        {
                                                                          "value": "input_data.stratify_key",
                                                                          "children": [
                                                                            {
                                                                              "value": "input_data",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "value": "stratify_key",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "' not found in item",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "{item}",
                                                                      "children": [
                                                                        {
                                                                          "value": "item",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "if strata_value is None:\n                    raise ValueError(\n                        f\"Stratify value for key '{input_data.stratify_key}' is None\"\n                    )",
                                          "children": [
                                            {
                                              "value": "strata_value is None",
                                              "children": [
                                                {
                                                  "value": "strata_value",
                                                  "children": []
                                                },
                                                {
                                                  "value": "None",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "raise ValueError(\n                        f\"Stratify value for key '{input_data.stratify_key}' is None\"\n                    )",
                                              "children": [
                                                {
                                                  "value": "raise ValueError(\n                        f\"Stratify value for key '{input_data.stratify_key}' is None\"\n                    )",
                                                  "children": [
                                                    {
                                                      "value": "ValueError(\n                        f\"Stratify value for key '{input_data.stratify_key}' is None\"\n                    )",
                                                      "children": [
                                                        {
                                                          "value": "ValueError",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "(\n                        f\"Stratify value for key '{input_data.stratify_key}' is None\"\n                    )",
                                                          "children": [
                                                            {
                                                              "value": "f\"Stratify value for key '{input_data.stratify_key}' is None\"",
                                                              "children": [
                                                                {
                                                                  "value": "f\"",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "Stratify value for key '",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "{input_data.stratify_key}",
                                                                  "children": [
                                                                    {
                                                                      "value": "input_data.stratify_key",
                                                                      "children": [
                                                                        {
                                                                          "value": "input_data",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "stratify_key",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "' is None",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "strata[str(strata_value)].append(i)",
                                          "children": [
                                            {
                                              "value": "strata[str(strata_value)].append(i)",
                                              "children": [
                                                {
                                                  "value": "strata[str(strata_value)].append",
                                                  "children": [
                                                    {
                                                      "value": "strata[str(strata_value)]",
                                                      "children": [
                                                        {
                                                          "value": "strata",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "str(strata_value)",
                                                          "children": [
                                                            {
                                                              "value": "str",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "(strata_value)",
                                                              "children": [
                                                                {
                                                                  "value": "strata_value",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "append",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(i)",
                                                  "children": [
                                                    {
                                                      "value": "i",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "# Calculate the number of samples to take from each stratum",
                                  "children": []
                                },
                                {
                                  "value": "stratum_sizes = {\n                k: max(1, int(len(v) / data_size * input_data.sample_size))\n                for k, v in strata.items()\n            }",
                                  "children": [
                                    {
                                      "value": "stratum_sizes = {\n                k: max(1, int(len(v) / data_size * input_data.sample_size))\n                for k, v in strata.items()\n            }",
                                      "children": [
                                        {
                                          "value": "stratum_sizes",
                                          "children": []
                                        },
                                        {
                                          "value": "{\n                k: max(1, int(len(v) / data_size * input_data.sample_size))\n                for k, v in strata.items()\n            }",
                                          "children": [
                                            {
                                              "value": "k: max(1, int(len(v) / data_size * input_data.sample_size))",
                                              "children": [
                                                {
                                                  "value": "k",
                                                  "children": []
                                                },
                                                {
                                                  "value": "max(1, int(len(v) / data_size * input_data.sample_size))",
                                                  "children": [
                                                    {
                                                      "value": "max",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "(1, int(len(v) / data_size * input_data.sample_size))",
                                                      "children": [
                                                        {
                                                          "value": "1",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "int(len(v) / data_size * input_data.sample_size)",
                                                          "children": [
                                                            {
                                                              "value": "int",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "(len(v) / data_size * input_data.sample_size)",
                                                              "children": [
                                                                {
                                                                  "value": "len(v) / data_size * input_data.sample_size",
                                                                  "children": [
                                                                    {
                                                                      "value": "len(v) / data_size",
                                                                      "children": [
                                                                        {
                                                                          "value": "len(v)",
                                                                          "children": [
                                                                            {
                                                                              "value": "len",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "value": "(v)",
                                                                              "children": [
                                                                                {
                                                                                  "value": "v",
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "value": "data_size",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "input_data.sample_size",
                                                                      "children": [
                                                                        {
                                                                          "value": "input_data",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "sample_size",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "for k, v in strata.items()",
                                              "children": [
                                                {
                                                  "value": "k, v",
                                                  "children": [
                                                    {
                                                      "value": "k",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "v",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "strata.items()",
                                                  "children": [
                                                    {
                                                      "value": "strata.items",
                                                      "children": [
                                                        {
                                                          "value": "strata",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "items",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "()",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "# Adjust sizes to ensure we get exactly sample_size samples",
                                  "children": []
                                },
                                {
                                  "value": "while sum(stratum_sizes.values()) != input_data.sample_size:\n                if sum(stratum_sizes.values()) < input_data.sample_size:\n                    stratum_sizes[\n                        max(stratum_sizes, key=lambda k: stratum_sizes[k])\n                    ] += 1\n                else:\n                    stratum_sizes[\n                        max(stratum_sizes, key=lambda k: stratum_sizes[k])\n                    ] -= 1",
                                  "children": [
                                    {
                                      "value": "sum(stratum_sizes.values()) != input_data.sample_size",
                                      "children": [
                                        {
                                          "value": "sum(stratum_sizes.values())",
                                          "children": [
                                            {
                                              "value": "sum",
                                              "children": []
                                            },
                                            {
                                              "value": "(stratum_sizes.values())",
                                              "children": [
                                                {
                                                  "value": "stratum_sizes.values()",
                                                  "children": [
                                                    {
                                                      "value": "stratum_sizes.values",
                                                      "children": [
                                                        {
                                                          "value": "stratum_sizes",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "values",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "()",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "input_data.sample_size",
                                          "children": [
                                            {
                                              "value": "input_data",
                                              "children": []
                                            },
                                            {
                                              "value": "sample_size",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "if sum(stratum_sizes.values()) < input_data.sample_size:\n                    stratum_sizes[\n                        max(stratum_sizes, key=lambda k: stratum_sizes[k])\n                    ] += 1\n                else:\n                    stratum_sizes[\n                        max(stratum_sizes, key=lambda k: stratum_sizes[k])\n                    ] -= 1",
                                      "children": [
                                        {
                                          "value": "if sum(stratum_sizes.values()) < input_data.sample_size:\n                    stratum_sizes[\n                        max(stratum_sizes, key=lambda k: stratum_sizes[k])\n                    ] += 1\n                else:\n                    stratum_sizes[\n                        max(stratum_sizes, key=lambda k: stratum_sizes[k])\n                    ] -= 1",
                                          "children": [
                                            {
                                              "value": "sum(stratum_sizes.values()) < input_data.sample_size",
                                              "children": [
                                                {
                                                  "value": "sum(stratum_sizes.values())",
                                                  "children": [
                                                    {
                                                      "value": "sum",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "(stratum_sizes.values())",
                                                      "children": [
                                                        {
                                                          "value": "stratum_sizes.values()",
                                                          "children": [
                                                            {
                                                              "value": "stratum_sizes.values",
                                                              "children": [
                                                                {
                                                                  "value": "stratum_sizes",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "values",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "()",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "input_data.sample_size",
                                                  "children": [
                                                    {
                                                      "value": "input_data",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "sample_size",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "stratum_sizes[\n                        max(stratum_sizes, key=lambda k: stratum_sizes[k])\n                    ] += 1",
                                              "children": [
                                                {
                                                  "value": "stratum_sizes[\n                        max(stratum_sizes, key=lambda k: stratum_sizes[k])\n                    ] += 1",
                                                  "children": [
                                                    {
                                                      "value": "stratum_sizes[\n                        max(stratum_sizes, key=lambda k: stratum_sizes[k])\n                    ] += 1",
                                                      "children": [
                                                        {
                                                          "value": "stratum_sizes[\n                        max(stratum_sizes, key=lambda k: stratum_sizes[k])\n                    ]",
                                                          "children": [
                                                            {
                                                              "value": "stratum_sizes",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "max(stratum_sizes, key=lambda k: stratum_sizes[k])",
                                                              "children": [
                                                                {
                                                                  "value": "max",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "(stratum_sizes, key=lambda k: stratum_sizes[k])",
                                                                  "children": [
                                                                    {
                                                                      "value": "stratum_sizes",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "key=lambda k: stratum_sizes[k]",
                                                                      "children": [
                                                                        {
                                                                          "value": "key",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "lambda k: stratum_sizes[k]",
                                                                          "children": [
                                                                            {
                                                                              "value": "k",
                                                                              "children": [
                                                                                {
                                                                                  "value": "k",
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "value": "stratum_sizes[k]",
                                                                              "children": [
                                                                                {
                                                                                  "value": "stratum_sizes",
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "value": "k",
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "1",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "else:\n                    stratum_sizes[\n                        max(stratum_sizes, key=lambda k: stratum_sizes[k])\n                    ] -= 1",
                                              "children": [
                                                {
                                                  "value": "stratum_sizes[\n                        max(stratum_sizes, key=lambda k: stratum_sizes[k])\n                    ] -= 1",
                                                  "children": [
                                                    {
                                                      "value": "stratum_sizes[\n                        max(stratum_sizes, key=lambda k: stratum_sizes[k])\n                    ] -= 1",
                                                      "children": [
                                                        {
                                                          "value": "stratum_sizes[\n                        max(stratum_sizes, key=lambda k: stratum_sizes[k])\n                    ] -= 1",
                                                          "children": [
                                                            {
                                                              "value": "stratum_sizes[\n                        max(stratum_sizes, key=lambda k: stratum_sizes[k])\n                    ]",
                                                              "children": [
                                                                {
                                                                  "value": "stratum_sizes",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "max(stratum_sizes, key=lambda k: stratum_sizes[k])",
                                                                  "children": [
                                                                    {
                                                                      "value": "max",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "(stratum_sizes, key=lambda k: stratum_sizes[k])",
                                                                      "children": [
                                                                        {
                                                                          "value": "stratum_sizes",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "key=lambda k: stratum_sizes[k]",
                                                                          "children": [
                                                                            {
                                                                              "value": "key",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "value": "lambda k: stratum_sizes[k]",
                                                                              "children": [
                                                                                {
                                                                                  "value": "k",
                                                                                  "children": [
                                                                                    {
                                                                                      "value": "k",
                                                                                      "children": []
                                                                                    }
                                                                                  ]
                                                                                },
                                                                                {
                                                                                  "value": "stratum_sizes[k]",
                                                                                  "children": [
                                                                                    {
                                                                                      "value": "stratum_sizes",
                                                                                      "children": []
                                                                                    },
                                                                                    {
                                                                                      "value": "k",
                                                                                      "children": []
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "1",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "for stratum, size in stratum_sizes.items():\n                indices.extend(random.sample(strata[stratum], size))",
                                  "children": [
                                    {
                                      "value": "stratum, size",
                                      "children": [
                                        {
                                          "value": "stratum",
                                          "children": []
                                        },
                                        {
                                          "value": "size",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "stratum_sizes.items()",
                                      "children": [
                                        {
                                          "value": "stratum_sizes.items",
                                          "children": [
                                            {
                                              "value": "stratum_sizes",
                                              "children": []
                                            },
                                            {
                                              "value": "items",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "()",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "indices.extend(random.sample(strata[stratum], size))",
                                      "children": [
                                        {
                                          "value": "indices.extend(random.sample(strata[stratum], size))",
                                          "children": [
                                            {
                                              "value": "indices.extend(random.sample(strata[stratum], size))",
                                              "children": [
                                                {
                                                  "value": "indices.extend",
                                                  "children": [
                                                    {
                                                      "value": "indices",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "extend",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(random.sample(strata[stratum], size))",
                                                  "children": [
                                                    {
                                                      "value": "random.sample(strata[stratum], size)",
                                                      "children": [
                                                        {
                                                          "value": "random.sample",
                                                          "children": [
                                                            {
                                                              "value": "random",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "sample",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "(strata[stratum], size)",
                                                          "children": [
                                                            {
                                                              "value": "strata[stratum]",
                                                              "children": [
                                                                {
                                                                  "value": "strata",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "stratum",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "size",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "elif input_data.sampling_method == SamplingMethod.WEIGHTED:\n            if not input_data.weight_key:\n                raise ValueError(\"Weight key must be provided for weighted sampling.\")\n            weights = []\n            for item in data_to_sample:\n                if isinstance(item, dict):\n                    weight = item.get(input_data.weight_key)\n                elif hasattr(item, input_data.weight_key):\n                    weight = getattr(item, input_data.weight_key)\n                else:\n                    raise ValueError(\n                        f\"Weight key '{input_data.weight_key}' not found in item {item}\"\n                    )\n\n                if weight is None:\n                    raise ValueError(\n                        f\"Weight value for key '{input_data.weight_key}' is None\"\n                    )\n                try:\n                    weights.append(float(weight))\n                except ValueError:\n                    raise ValueError(\n                        f\"Weight value '{weight}' cannot be converted to a number\"\n                    )\n\n            if not weights:\n                raise ValueError(\n                    f\"No valid weights found using key '{input_data.weight_key}'\"\n                )\n\n            indices = random.choices(\n                range(data_size), weights=weights, k=input_data.sample_size\n            )",
                          "children": [
                            {
                              "value": "input_data.sampling_method == SamplingMethod.WEIGHTED",
                              "children": [
                                {
                                  "value": "input_data.sampling_method",
                                  "children": [
                                    {
                                      "value": "input_data",
                                      "children": []
                                    },
                                    {
                                      "value": "sampling_method",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "SamplingMethod.WEIGHTED",
                                  "children": [
                                    {
                                      "value": "SamplingMethod",
                                      "children": []
                                    },
                                    {
                                      "value": "WEIGHTED",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "if not input_data.weight_key:\n                raise ValueError(\"Weight key must be provided for weighted sampling.\")\n            weights = []\n            for item in data_to_sample:\n                if isinstance(item, dict):\n                    weight = item.get(input_data.weight_key)\n                elif hasattr(item, input_data.weight_key):\n                    weight = getattr(item, input_data.weight_key)\n                else:\n                    raise ValueError(\n                        f\"Weight key '{input_data.weight_key}' not found in item {item}\"\n                    )\n\n                if weight is None:\n                    raise ValueError(\n                        f\"Weight value for key '{input_data.weight_key}' is None\"\n                    )\n                try:\n                    weights.append(float(weight))\n                except ValueError:\n                    raise ValueError(\n                        f\"Weight value '{weight}' cannot be converted to a number\"\n                    )\n\n            if not weights:\n                raise ValueError(\n                    f\"No valid weights found using key '{input_data.weight_key}'\"\n                )\n\n            indices = random.choices(\n                range(data_size), weights=weights, k=input_data.sample_size\n            )",
                              "children": [
                                {
                                  "value": "if not input_data.weight_key:\n                raise ValueError(\"Weight key must be provided for weighted sampling.\")",
                                  "children": [
                                    {
                                      "value": "not input_data.weight_key",
                                      "children": [
                                        {
                                          "value": "input_data.weight_key",
                                          "children": [
                                            {
                                              "value": "input_data",
                                              "children": []
                                            },
                                            {
                                              "value": "weight_key",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "raise ValueError(\"Weight key must be provided for weighted sampling.\")",
                                      "children": [
                                        {
                                          "value": "raise ValueError(\"Weight key must be provided for weighted sampling.\")",
                                          "children": [
                                            {
                                              "value": "ValueError(\"Weight key must be provided for weighted sampling.\")",
                                              "children": [
                                                {
                                                  "value": "ValueError",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(\"Weight key must be provided for weighted sampling.\")",
                                                  "children": [
                                                    {
                                                      "value": "\"Weight key must be provided for weighted sampling.\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "Weight key must be provided for weighted sampling.",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "weights = []",
                                  "children": [
                                    {
                                      "value": "weights = []",
                                      "children": [
                                        {
                                          "value": "weights",
                                          "children": []
                                        },
                                        {
                                          "value": "[]",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "for item in data_to_sample:\n                if isinstance(item, dict):\n                    weight = item.get(input_data.weight_key)\n                elif hasattr(item, input_data.weight_key):\n                    weight = getattr(item, input_data.weight_key)\n                else:\n                    raise ValueError(\n                        f\"Weight key '{input_data.weight_key}' not found in item {item}\"\n                    )\n\n                if weight is None:\n                    raise ValueError(\n                        f\"Weight value for key '{input_data.weight_key}' is None\"\n                    )\n                try:\n                    weights.append(float(weight))\n                except ValueError:\n                    raise ValueError(\n                        f\"Weight value '{weight}' cannot be converted to a number\"\n                    )",
                                  "children": [
                                    {
                                      "value": "item",
                                      "children": []
                                    },
                                    {
                                      "value": "data_to_sample",
                                      "children": []
                                    },
                                    {
                                      "value": "if isinstance(item, dict):\n                    weight = item.get(input_data.weight_key)\n                elif hasattr(item, input_data.weight_key):\n                    weight = getattr(item, input_data.weight_key)\n                else:\n                    raise ValueError(\n                        f\"Weight key '{input_data.weight_key}' not found in item {item}\"\n                    )\n\n                if weight is None:\n                    raise ValueError(\n                        f\"Weight value for key '{input_data.weight_key}' is None\"\n                    )\n                try:\n                    weights.append(float(weight))\n                except ValueError:\n                    raise ValueError(\n                        f\"Weight value '{weight}' cannot be converted to a number\"\n                    )",
                                      "children": [
                                        {
                                          "value": "if isinstance(item, dict):\n                    weight = item.get(input_data.weight_key)\n                elif hasattr(item, input_data.weight_key):\n                    weight = getattr(item, input_data.weight_key)\n                else:\n                    raise ValueError(\n                        f\"Weight key '{input_data.weight_key}' not found in item {item}\"\n                    )",
                                          "children": [
                                            {
                                              "value": "isinstance(item, dict)",
                                              "children": [
                                                {
                                                  "value": "isinstance",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(item, dict)",
                                                  "children": [
                                                    {
                                                      "value": "item",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "dict",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "weight = item.get(input_data.weight_key)",
                                              "children": [
                                                {
                                                  "value": "weight = item.get(input_data.weight_key)",
                                                  "children": [
                                                    {
                                                      "value": "weight = item.get(input_data.weight_key)",
                                                      "children": [
                                                        {
                                                          "value": "weight",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "item.get(input_data.weight_key)",
                                                          "children": [
                                                            {
                                                              "value": "item.get",
                                                              "children": [
                                                                {
                                                                  "value": "item",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "get",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "(input_data.weight_key)",
                                                              "children": [
                                                                {
                                                                  "value": "input_data.weight_key",
                                                                  "children": [
                                                                    {
                                                                      "value": "input_data",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "weight_key",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "elif hasattr(item, input_data.weight_key):\n                    weight = getattr(item, input_data.weight_key)",
                                              "children": [
                                                {
                                                  "value": "hasattr(item, input_data.weight_key)",
                                                  "children": [
                                                    {
                                                      "value": "hasattr",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "(item, input_data.weight_key)",
                                                      "children": [
                                                        {
                                                          "value": "item",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "input_data.weight_key",
                                                          "children": [
                                                            {
                                                              "value": "input_data",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "weight_key",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "weight = getattr(item, input_data.weight_key)",
                                                  "children": [
                                                    {
                                                      "value": "weight = getattr(item, input_data.weight_key)",
                                                      "children": [
                                                        {
                                                          "value": "weight = getattr(item, input_data.weight_key)",
                                                          "children": [
                                                            {
                                                              "value": "weight",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "getattr(item, input_data.weight_key)",
                                                              "children": [
                                                                {
                                                                  "value": "getattr",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "(item, input_data.weight_key)",
                                                                  "children": [
                                                                    {
                                                                      "value": "item",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "input_data.weight_key",
                                                                      "children": [
                                                                        {
                                                                          "value": "input_data",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "weight_key",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "else:\n                    raise ValueError(\n                        f\"Weight key '{input_data.weight_key}' not found in item {item}\"\n                    )",
                                              "children": [
                                                {
                                                  "value": "raise ValueError(\n                        f\"Weight key '{input_data.weight_key}' not found in item {item}\"\n                    )",
                                                  "children": [
                                                    {
                                                      "value": "raise ValueError(\n                        f\"Weight key '{input_data.weight_key}' not found in item {item}\"\n                    )",
                                                      "children": [
                                                        {
                                                          "value": "ValueError(\n                        f\"Weight key '{input_data.weight_key}' not found in item {item}\"\n                    )",
                                                          "children": [
                                                            {
                                                              "value": "ValueError",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "(\n                        f\"Weight key '{input_data.weight_key}' not found in item {item}\"\n                    )",
                                                              "children": [
                                                                {
                                                                  "value": "f\"Weight key '{input_data.weight_key}' not found in item {item}\"",
                                                                  "children": [
                                                                    {
                                                                      "value": "f\"",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "Weight key '",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "{input_data.weight_key}",
                                                                      "children": [
                                                                        {
                                                                          "value": "input_data.weight_key",
                                                                          "children": [
                                                                            {
                                                                              "value": "input_data",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "value": "weight_key",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "' not found in item",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "{item}",
                                                                      "children": [
                                                                        {
                                                                          "value": "item",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "if weight is None:\n                    raise ValueError(\n                        f\"Weight value for key '{input_data.weight_key}' is None\"\n                    )",
                                          "children": [
                                            {
                                              "value": "weight is None",
                                              "children": [
                                                {
                                                  "value": "weight",
                                                  "children": []
                                                },
                                                {
                                                  "value": "None",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "raise ValueError(\n                        f\"Weight value for key '{input_data.weight_key}' is None\"\n                    )",
                                              "children": [
                                                {
                                                  "value": "raise ValueError(\n                        f\"Weight value for key '{input_data.weight_key}' is None\"\n                    )",
                                                  "children": [
                                                    {
                                                      "value": "ValueError(\n                        f\"Weight value for key '{input_data.weight_key}' is None\"\n                    )",
                                                      "children": [
                                                        {
                                                          "value": "ValueError",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "(\n                        f\"Weight value for key '{input_data.weight_key}' is None\"\n                    )",
                                                          "children": [
                                                            {
                                                              "value": "f\"Weight value for key '{input_data.weight_key}' is None\"",
                                                              "children": [
                                                                {
                                                                  "value": "f\"",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "Weight value for key '",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "{input_data.weight_key}",
                                                                  "children": [
                                                                    {
                                                                      "value": "input_data.weight_key",
                                                                      "children": [
                                                                        {
                                                                          "value": "input_data",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "weight_key",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "' is None",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "try:\n                    weights.append(float(weight))\n                except ValueError:\n                    raise ValueError(\n                        f\"Weight value '{weight}' cannot be converted to a number\"\n                    )",
                                          "children": [
                                            {
                                              "value": "weights.append(float(weight))",
                                              "children": [
                                                {
                                                  "value": "weights.append(float(weight))",
                                                  "children": [
                                                    {
                                                      "value": "weights.append(float(weight))",
                                                      "children": [
                                                        {
                                                          "value": "weights.append",
                                                          "children": [
                                                            {
                                                              "value": "weights",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "append",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "(float(weight))",
                                                          "children": [
                                                            {
                                                              "value": "float(weight)",
                                                              "children": [
                                                                {
                                                                  "value": "float",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "(weight)",
                                                                  "children": [
                                                                    {
                                                                      "value": "weight",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "except ValueError:\n                    raise ValueError(\n                        f\"Weight value '{weight}' cannot be converted to a number\"\n                    )",
                                              "children": [
                                                {
                                                  "value": "ValueError",
                                                  "children": []
                                                },
                                                {
                                                  "value": "raise ValueError(\n                        f\"Weight value '{weight}' cannot be converted to a number\"\n                    )",
                                                  "children": [
                                                    {
                                                      "value": "raise ValueError(\n                        f\"Weight value '{weight}' cannot be converted to a number\"\n                    )",
                                                      "children": [
                                                        {
                                                          "value": "ValueError(\n                        f\"Weight value '{weight}' cannot be converted to a number\"\n                    )",
                                                          "children": [
                                                            {
                                                              "value": "ValueError",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "(\n                        f\"Weight value '{weight}' cannot be converted to a number\"\n                    )",
                                                              "children": [
                                                                {
                                                                  "value": "f\"Weight value '{weight}' cannot be converted to a number\"",
                                                                  "children": [
                                                                    {
                                                                      "value": "f\"",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "Weight value '",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "{weight}",
                                                                      "children": [
                                                                        {
                                                                          "value": "weight",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "' cannot be converted to a number",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "if not weights:\n                raise ValueError(\n                    f\"No valid weights found using key '{input_data.weight_key}'\"\n                )",
                                  "children": [
                                    {
                                      "value": "not weights",
                                      "children": [
                                        {
                                          "value": "weights",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "raise ValueError(\n                    f\"No valid weights found using key '{input_data.weight_key}'\"\n                )",
                                      "children": [
                                        {
                                          "value": "raise ValueError(\n                    f\"No valid weights found using key '{input_data.weight_key}'\"\n                )",
                                          "children": [
                                            {
                                              "value": "ValueError(\n                    f\"No valid weights found using key '{input_data.weight_key}'\"\n                )",
                                              "children": [
                                                {
                                                  "value": "ValueError",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(\n                    f\"No valid weights found using key '{input_data.weight_key}'\"\n                )",
                                                  "children": [
                                                    {
                                                      "value": "f\"No valid weights found using key '{input_data.weight_key}'\"",
                                                      "children": [
                                                        {
                                                          "value": "f\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "No valid weights found using key '",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "{input_data.weight_key}",
                                                          "children": [
                                                            {
                                                              "value": "input_data.weight_key",
                                                              "children": [
                                                                {
                                                                  "value": "input_data",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "weight_key",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "'",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "indices = random.choices(\n                range(data_size), weights=weights, k=input_data.sample_size\n            )",
                                  "children": [
                                    {
                                      "value": "indices = random.choices(\n                range(data_size), weights=weights, k=input_data.sample_size\n            )",
                                      "children": [
                                        {
                                          "value": "indices",
                                          "children": []
                                        },
                                        {
                                          "value": "random.choices(\n                range(data_size), weights=weights, k=input_data.sample_size\n            )",
                                          "children": [
                                            {
                                              "value": "random.choices",
                                              "children": [
                                                {
                                                  "value": "random",
                                                  "children": []
                                                },
                                                {
                                                  "value": "choices",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(\n                range(data_size), weights=weights, k=input_data.sample_size\n            )",
                                              "children": [
                                                {
                                                  "value": "range(data_size)",
                                                  "children": [
                                                    {
                                                      "value": "range",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "(data_size)",
                                                      "children": [
                                                        {
                                                          "value": "data_size",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "weights=weights",
                                                  "children": [
                                                    {
                                                      "value": "weights",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "weights",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "k=input_data.sample_size",
                                                  "children": [
                                                    {
                                                      "value": "k",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "input_data.sample_size",
                                                      "children": [
                                                        {
                                                          "value": "input_data",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "sample_size",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "elif input_data.sampling_method == SamplingMethod.RESERVOIR:\n            indices = list(range(input_data.sample_size))\n            for i in range(input_data.sample_size, data_size):\n                j = random.randint(0, i)\n                if j < input_data.sample_size:\n                    indices[j] = i",
                          "children": [
                            {
                              "value": "input_data.sampling_method == SamplingMethod.RESERVOIR",
                              "children": [
                                {
                                  "value": "input_data.sampling_method",
                                  "children": [
                                    {
                                      "value": "input_data",
                                      "children": []
                                    },
                                    {
                                      "value": "sampling_method",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "SamplingMethod.RESERVOIR",
                                  "children": [
                                    {
                                      "value": "SamplingMethod",
                                      "children": []
                                    },
                                    {
                                      "value": "RESERVOIR",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "indices = list(range(input_data.sample_size))\n            for i in range(input_data.sample_size, data_size):\n                j = random.randint(0, i)\n                if j < input_data.sample_size:\n                    indices[j] = i",
                              "children": [
                                {
                                  "value": "indices = list(range(input_data.sample_size))",
                                  "children": [
                                    {
                                      "value": "indices = list(range(input_data.sample_size))",
                                      "children": [
                                        {
                                          "value": "indices",
                                          "children": []
                                        },
                                        {
                                          "value": "list(range(input_data.sample_size))",
                                          "children": [
                                            {
                                              "value": "list",
                                              "children": []
                                            },
                                            {
                                              "value": "(range(input_data.sample_size))",
                                              "children": [
                                                {
                                                  "value": "range(input_data.sample_size)",
                                                  "children": [
                                                    {
                                                      "value": "range",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "(input_data.sample_size)",
                                                      "children": [
                                                        {
                                                          "value": "input_data.sample_size",
                                                          "children": [
                                                            {
                                                              "value": "input_data",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "sample_size",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "for i in range(input_data.sample_size, data_size):\n                j = random.randint(0, i)\n                if j < input_data.sample_size:\n                    indices[j] = i",
                                  "children": [
                                    {
                                      "value": "i",
                                      "children": []
                                    },
                                    {
                                      "value": "range(input_data.sample_size, data_size)",
                                      "children": [
                                        {
                                          "value": "range",
                                          "children": []
                                        },
                                        {
                                          "value": "(input_data.sample_size, data_size)",
                                          "children": [
                                            {
                                              "value": "input_data.sample_size",
                                              "children": [
                                                {
                                                  "value": "input_data",
                                                  "children": []
                                                },
                                                {
                                                  "value": "sample_size",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "data_size",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "j = random.randint(0, i)\n                if j < input_data.sample_size:\n                    indices[j] = i",
                                      "children": [
                                        {
                                          "value": "j = random.randint(0, i)",
                                          "children": [
                                            {
                                              "value": "j = random.randint(0, i)",
                                              "children": [
                                                {
                                                  "value": "j",
                                                  "children": []
                                                },
                                                {
                                                  "value": "random.randint(0, i)",
                                                  "children": [
                                                    {
                                                      "value": "random.randint",
                                                      "children": [
                                                        {
                                                          "value": "random",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "randint",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "(0, i)",
                                                      "children": [
                                                        {
                                                          "value": "0",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "i",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "if j < input_data.sample_size:\n                    indices[j] = i",
                                          "children": [
                                            {
                                              "value": "j < input_data.sample_size",
                                              "children": [
                                                {
                                                  "value": "j",
                                                  "children": []
                                                },
                                                {
                                                  "value": "input_data.sample_size",
                                                  "children": [
                                                    {
                                                      "value": "input_data",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "sample_size",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "indices[j] = i",
                                              "children": [
                                                {
                                                  "value": "indices[j] = i",
                                                  "children": [
                                                    {
                                                      "value": "indices[j] = i",
                                                      "children": [
                                                        {
                                                          "value": "indices[j]",
                                                          "children": [
                                                            {
                                                              "value": "indices",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "j",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "i",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "elif input_data.sampling_method == SamplingMethod.CLUSTER:\n            if not input_data.cluster_key:\n                raise ValueError(\"Cluster key must be provided for cluster sampling.\")\n            clusters = defaultdict(list)\n            for i, item in enumerate(data_to_sample):\n                if isinstance(item, dict):\n                    cluster_value = item.get(input_data.cluster_key)\n                elif hasattr(item, input_data.cluster_key):\n                    cluster_value = getattr(item, input_data.cluster_key)\n                else:\n                    raise TypeError(\n                        f\"Item {item} does not have the cluster key '{input_data.cluster_key}'\"\n                    )\n\n                clusters[str(cluster_value)].append(i)\n\n            # Randomly select clusters until we have enough samples\n            selected_clusters = []\n            while (\n                sum(len(clusters[c]) for c in selected_clusters)\n                < input_data.sample_size\n            ):\n                available_clusters = [c for c in clusters if c not in selected_clusters]\n                if not available_clusters:\n                    break\n                selected_clusters.append(random.choice(available_clusters))\n\n            for cluster in selected_clusters:\n                indices.extend(clusters[cluster])\n\n            # If we have more samples than needed, randomly remove some\n            if len(indices) > input_data.sample_size:\n                indices = random.sample(indices, input_data.sample_size)",
                          "children": [
                            {
                              "value": "input_data.sampling_method == SamplingMethod.CLUSTER",
                              "children": [
                                {
                                  "value": "input_data.sampling_method",
                                  "children": [
                                    {
                                      "value": "input_data",
                                      "children": []
                                    },
                                    {
                                      "value": "sampling_method",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "SamplingMethod.CLUSTER",
                                  "children": [
                                    {
                                      "value": "SamplingMethod",
                                      "children": []
                                    },
                                    {
                                      "value": "CLUSTER",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "if not input_data.cluster_key:\n                raise ValueError(\"Cluster key must be provided for cluster sampling.\")\n            clusters = defaultdict(list)\n            for i, item in enumerate(data_to_sample):\n                if isinstance(item, dict):\n                    cluster_value = item.get(input_data.cluster_key)\n                elif hasattr(item, input_data.cluster_key):\n                    cluster_value = getattr(item, input_data.cluster_key)\n                else:\n                    raise TypeError(\n                        f\"Item {item} does not have the cluster key '{input_data.cluster_key}'\"\n                    )\n\n                clusters[str(cluster_value)].append(i)\n\n            # Randomly select clusters until we have enough samples\n            selected_clusters = []\n            while (\n                sum(len(clusters[c]) for c in selected_clusters)\n                < input_data.sample_size\n            ):\n                available_clusters = [c for c in clusters if c not in selected_clusters]\n                if not available_clusters:\n                    break\n                selected_clusters.append(random.choice(available_clusters))\n\n            for cluster in selected_clusters:\n                indices.extend(clusters[cluster])\n\n            # If we have more samples than needed, randomly remove some\n            if len(indices) > input_data.sample_size:\n                indices = random.sample(indices, input_data.sample_size)",
                              "children": [
                                {
                                  "value": "if not input_data.cluster_key:\n                raise ValueError(\"Cluster key must be provided for cluster sampling.\")",
                                  "children": [
                                    {
                                      "value": "not input_data.cluster_key",
                                      "children": [
                                        {
                                          "value": "input_data.cluster_key",
                                          "children": [
                                            {
                                              "value": "input_data",
                                              "children": []
                                            },
                                            {
                                              "value": "cluster_key",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "raise ValueError(\"Cluster key must be provided for cluster sampling.\")",
                                      "children": [
                                        {
                                          "value": "raise ValueError(\"Cluster key must be provided for cluster sampling.\")",
                                          "children": [
                                            {
                                              "value": "ValueError(\"Cluster key must be provided for cluster sampling.\")",
                                              "children": [
                                                {
                                                  "value": "ValueError",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(\"Cluster key must be provided for cluster sampling.\")",
                                                  "children": [
                                                    {
                                                      "value": "\"Cluster key must be provided for cluster sampling.\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "Cluster key must be provided for cluster sampling.",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "clusters = defaultdict(list)",
                                  "children": [
                                    {
                                      "value": "clusters = defaultdict(list)",
                                      "children": [
                                        {
                                          "value": "clusters",
                                          "children": []
                                        },
                                        {
                                          "value": "defaultdict(list)",
                                          "children": [
                                            {
                                              "value": "defaultdict",
                                              "children": []
                                            },
                                            {
                                              "value": "(list)",
                                              "children": [
                                                {
                                                  "value": "list",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "for i, item in enumerate(data_to_sample):\n                if isinstance(item, dict):\n                    cluster_value = item.get(input_data.cluster_key)\n                elif hasattr(item, input_data.cluster_key):\n                    cluster_value = getattr(item, input_data.cluster_key)\n                else:\n                    raise TypeError(\n                        f\"Item {item} does not have the cluster key '{input_data.cluster_key}'\"\n                    )\n\n                clusters[str(cluster_value)].append(i)",
                                  "children": [
                                    {
                                      "value": "i, item",
                                      "children": [
                                        {
                                          "value": "i",
                                          "children": []
                                        },
                                        {
                                          "value": "item",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "enumerate(data_to_sample)",
                                      "children": [
                                        {
                                          "value": "enumerate",
                                          "children": []
                                        },
                                        {
                                          "value": "(data_to_sample)",
                                          "children": [
                                            {
                                              "value": "data_to_sample",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "if isinstance(item, dict):\n                    cluster_value = item.get(input_data.cluster_key)\n                elif hasattr(item, input_data.cluster_key):\n                    cluster_value = getattr(item, input_data.cluster_key)\n                else:\n                    raise TypeError(\n                        f\"Item {item} does not have the cluster key '{input_data.cluster_key}'\"\n                    )\n\n                clusters[str(cluster_value)].append(i)",
                                      "children": [
                                        {
                                          "value": "if isinstance(item, dict):\n                    cluster_value = item.get(input_data.cluster_key)\n                elif hasattr(item, input_data.cluster_key):\n                    cluster_value = getattr(item, input_data.cluster_key)\n                else:\n                    raise TypeError(\n                        f\"Item {item} does not have the cluster key '{input_data.cluster_key}'\"\n                    )",
                                          "children": [
                                            {
                                              "value": "isinstance(item, dict)",
                                              "children": [
                                                {
                                                  "value": "isinstance",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(item, dict)",
                                                  "children": [
                                                    {
                                                      "value": "item",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "dict",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "cluster_value = item.get(input_data.cluster_key)",
                                              "children": [
                                                {
                                                  "value": "cluster_value = item.get(input_data.cluster_key)",
                                                  "children": [
                                                    {
                                                      "value": "cluster_value = item.get(input_data.cluster_key)",
                                                      "children": [
                                                        {
                                                          "value": "cluster_value",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "item.get(input_data.cluster_key)",
                                                          "children": [
                                                            {
                                                              "value": "item.get",
                                                              "children": [
                                                                {
                                                                  "value": "item",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "get",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "(input_data.cluster_key)",
                                                              "children": [
                                                                {
                                                                  "value": "input_data.cluster_key",
                                                                  "children": [
                                                                    {
                                                                      "value": "input_data",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "cluster_key",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "elif hasattr(item, input_data.cluster_key):\n                    cluster_value = getattr(item, input_data.cluster_key)",
                                              "children": [
                                                {
                                                  "value": "hasattr(item, input_data.cluster_key)",
                                                  "children": [
                                                    {
                                                      "value": "hasattr",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "(item, input_data.cluster_key)",
                                                      "children": [
                                                        {
                                                          "value": "item",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "input_data.cluster_key",
                                                          "children": [
                                                            {
                                                              "value": "input_data",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "cluster_key",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "cluster_value = getattr(item, input_data.cluster_key)",
                                                  "children": [
                                                    {
                                                      "value": "cluster_value = getattr(item, input_data.cluster_key)",
                                                      "children": [
                                                        {
                                                          "value": "cluster_value = getattr(item, input_data.cluster_key)",
                                                          "children": [
                                                            {
                                                              "value": "cluster_value",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "getattr(item, input_data.cluster_key)",
                                                              "children": [
                                                                {
                                                                  "value": "getattr",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "(item, input_data.cluster_key)",
                                                                  "children": [
                                                                    {
                                                                      "value": "item",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "input_data.cluster_key",
                                                                      "children": [
                                                                        {
                                                                          "value": "input_data",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "cluster_key",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "else:\n                    raise TypeError(\n                        f\"Item {item} does not have the cluster key '{input_data.cluster_key}'\"\n                    )",
                                              "children": [
                                                {
                                                  "value": "raise TypeError(\n                        f\"Item {item} does not have the cluster key '{input_data.cluster_key}'\"\n                    )",
                                                  "children": [
                                                    {
                                                      "value": "raise TypeError(\n                        f\"Item {item} does not have the cluster key '{input_data.cluster_key}'\"\n                    )",
                                                      "children": [
                                                        {
                                                          "value": "TypeError(\n                        f\"Item {item} does not have the cluster key '{input_data.cluster_key}'\"\n                    )",
                                                          "children": [
                                                            {
                                                              "value": "TypeError",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "(\n                        f\"Item {item} does not have the cluster key '{input_data.cluster_key}'\"\n                    )",
                                                              "children": [
                                                                {
                                                                  "value": "f\"Item {item} does not have the cluster key '{input_data.cluster_key}'\"",
                                                                  "children": [
                                                                    {
                                                                      "value": "f\"",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "Item",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "{item}",
                                                                      "children": [
                                                                        {
                                                                          "value": "item",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "does not have the cluster key '",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "{input_data.cluster_key}",
                                                                      "children": [
                                                                        {
                                                                          "value": "input_data.cluster_key",
                                                                          "children": [
                                                                            {
                                                                              "value": "input_data",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "value": "cluster_key",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "'",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "clusters[str(cluster_value)].append(i)",
                                          "children": [
                                            {
                                              "value": "clusters[str(cluster_value)].append(i)",
                                              "children": [
                                                {
                                                  "value": "clusters[str(cluster_value)].append",
                                                  "children": [
                                                    {
                                                      "value": "clusters[str(cluster_value)]",
                                                      "children": [
                                                        {
                                                          "value": "clusters",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "str(cluster_value)",
                                                          "children": [
                                                            {
                                                              "value": "str",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "(cluster_value)",
                                                              "children": [
                                                                {
                                                                  "value": "cluster_value",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "append",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(i)",
                                                  "children": [
                                                    {
                                                      "value": "i",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "# Randomly select clusters until we have enough samples",
                                  "children": []
                                },
                                {
                                  "value": "selected_clusters = []",
                                  "children": [
                                    {
                                      "value": "selected_clusters = []",
                                      "children": [
                                        {
                                          "value": "selected_clusters",
                                          "children": []
                                        },
                                        {
                                          "value": "[]",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "while (\n                sum(len(clusters[c]) for c in selected_clusters)\n                < input_data.sample_size\n            ):\n                available_clusters = [c for c in clusters if c not in selected_clusters]\n                if not available_clusters:\n                    break\n                selected_clusters.append(random.choice(available_clusters))",
                                  "children": [
                                    {
                                      "value": "(\n                sum(len(clusters[c]) for c in selected_clusters)\n                < input_data.sample_size\n            )",
                                      "children": [
                                        {
                                          "value": "sum(len(clusters[c]) for c in selected_clusters)\n                < input_data.sample_size",
                                          "children": [
                                            {
                                              "value": "sum(len(clusters[c]) for c in selected_clusters)",
                                              "children": [
                                                {
                                                  "value": "sum",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(len(clusters[c]) for c in selected_clusters)",
                                                  "children": [
                                                    {
                                                      "value": "len(clusters[c])",
                                                      "children": [
                                                        {
                                                          "value": "len",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "(clusters[c])",
                                                          "children": [
                                                            {
                                                              "value": "clusters[c]",
                                                              "children": [
                                                                {
                                                                  "value": "clusters",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "c",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "for c in selected_clusters",
                                                      "children": [
                                                        {
                                                          "value": "c",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "selected_clusters",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "input_data.sample_size",
                                              "children": [
                                                {
                                                  "value": "input_data",
                                                  "children": []
                                                },
                                                {
                                                  "value": "sample_size",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "available_clusters = [c for c in clusters if c not in selected_clusters]\n                if not available_clusters:\n                    break\n                selected_clusters.append(random.choice(available_clusters))",
                                      "children": [
                                        {
                                          "value": "available_clusters = [c for c in clusters if c not in selected_clusters]",
                                          "children": [
                                            {
                                              "value": "available_clusters = [c for c in clusters if c not in selected_clusters]",
                                              "children": [
                                                {
                                                  "value": "available_clusters",
                                                  "children": []
                                                },
                                                {
                                                  "value": "[c for c in clusters if c not in selected_clusters]",
                                                  "children": [
                                                    {
                                                      "value": "c",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "for c in clusters",
                                                      "children": [
                                                        {
                                                          "value": "c",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "clusters",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "if c not in selected_clusters",
                                                      "children": [
                                                        {
                                                          "value": "c not in selected_clusters",
                                                          "children": [
                                                            {
                                                              "value": "c",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "selected_clusters",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "if not available_clusters:\n                    break",
                                          "children": [
                                            {
                                              "value": "not available_clusters",
                                              "children": [
                                                {
                                                  "value": "available_clusters",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "break",
                                              "children": [
                                                {
                                                  "value": "break",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "selected_clusters.append(random.choice(available_clusters))",
                                          "children": [
                                            {
                                              "value": "selected_clusters.append(random.choice(available_clusters))",
                                              "children": [
                                                {
                                                  "value": "selected_clusters.append",
                                                  "children": [
                                                    {
                                                      "value": "selected_clusters",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "append",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(random.choice(available_clusters))",
                                                  "children": [
                                                    {
                                                      "value": "random.choice(available_clusters)",
                                                      "children": [
                                                        {
                                                          "value": "random.choice",
                                                          "children": [
                                                            {
                                                              "value": "random",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "choice",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "(available_clusters)",
                                                          "children": [
                                                            {
                                                              "value": "available_clusters",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "for cluster in selected_clusters:\n                indices.extend(clusters[cluster])",
                                  "children": [
                                    {
                                      "value": "cluster",
                                      "children": []
                                    },
                                    {
                                      "value": "selected_clusters",
                                      "children": []
                                    },
                                    {
                                      "value": "indices.extend(clusters[cluster])",
                                      "children": [
                                        {
                                          "value": "indices.extend(clusters[cluster])",
                                          "children": [
                                            {
                                              "value": "indices.extend(clusters[cluster])",
                                              "children": [
                                                {
                                                  "value": "indices.extend",
                                                  "children": [
                                                    {
                                                      "value": "indices",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "extend",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(clusters[cluster])",
                                                  "children": [
                                                    {
                                                      "value": "clusters[cluster]",
                                                      "children": [
                                                        {
                                                          "value": "clusters",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "cluster",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "# If we have more samples than needed, randomly remove some",
                                  "children": []
                                },
                                {
                                  "value": "if len(indices) > input_data.sample_size:\n                indices = random.sample(indices, input_data.sample_size)",
                                  "children": [
                                    {
                                      "value": "len(indices) > input_data.sample_size",
                                      "children": [
                                        {
                                          "value": "len(indices)",
                                          "children": [
                                            {
                                              "value": "len",
                                              "children": []
                                            },
                                            {
                                              "value": "(indices)",
                                              "children": [
                                                {
                                                  "value": "indices",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "input_data.sample_size",
                                          "children": [
                                            {
                                              "value": "input_data",
                                              "children": []
                                            },
                                            {
                                              "value": "sample_size",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "indices = random.sample(indices, input_data.sample_size)",
                                      "children": [
                                        {
                                          "value": "indices = random.sample(indices, input_data.sample_size)",
                                          "children": [
                                            {
                                              "value": "indices = random.sample(indices, input_data.sample_size)",
                                              "children": [
                                                {
                                                  "value": "indices",
                                                  "children": []
                                                },
                                                {
                                                  "value": "random.sample(indices, input_data.sample_size)",
                                                  "children": [
                                                    {
                                                      "value": "random.sample",
                                                      "children": [
                                                        {
                                                          "value": "random",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "sample",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "(indices, input_data.sample_size)",
                                                      "children": [
                                                        {
                                                          "value": "indices",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "input_data.sample_size",
                                                          "children": [
                                                            {
                                                              "value": "input_data",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "sample_size",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "else:\n            raise ValueError(f\"Unknown sampling method: {input_data.sampling_method}\")",
                          "children": [
                            {
                              "value": "raise ValueError(f\"Unknown sampling method: {input_data.sampling_method}\")",
                              "children": [
                                {
                                  "value": "raise ValueError(f\"Unknown sampling method: {input_data.sampling_method}\")",
                                  "children": [
                                    {
                                      "value": "ValueError(f\"Unknown sampling method: {input_data.sampling_method}\")",
                                      "children": [
                                        {
                                          "value": "ValueError",
                                          "children": []
                                        },
                                        {
                                          "value": "(f\"Unknown sampling method: {input_data.sampling_method}\")",
                                          "children": [
                                            {
                                              "value": "f\"Unknown sampling method: {input_data.sampling_method}\"",
                                              "children": [
                                                {
                                                  "value": "f\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "Unknown sampling method:",
                                                  "children": []
                                                },
                                                {
                                                  "value": "{input_data.sampling_method}",
                                                  "children": [
                                                    {
                                                      "value": "input_data.sampling_method",
                                                      "children": [
                                                        {
                                                          "value": "input_data",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "sampling_method",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "sampled_data = [data_to_sample[i] for i in indices]",
                      "children": [
                        {
                          "value": "sampled_data = [data_to_sample[i] for i in indices]",
                          "children": [
                            {
                              "value": "sampled_data",
                              "children": []
                            },
                            {
                              "value": "[data_to_sample[i] for i in indices]",
                              "children": [
                                {
                                  "value": "data_to_sample[i]",
                                  "children": [
                                    {
                                      "value": "data_to_sample",
                                      "children": []
                                    },
                                    {
                                      "value": "i",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "for i in indices",
                                  "children": [
                                    {
                                      "value": "i",
                                      "children": []
                                    },
                                    {
                                      "value": "indices",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "# Clear accumulated data after sampling if accumulation is enabled",
                      "children": []
                    },
                    {
                      "value": "if input_data.accumulate:\n            self.accumulated_data = []",
                      "children": [
                        {
                          "value": "input_data.accumulate",
                          "children": [
                            {
                              "value": "input_data",
                              "children": []
                            },
                            {
                              "value": "accumulate",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "self.accumulated_data = []",
                          "children": [
                            {
                              "value": "self.accumulated_data = []",
                              "children": [
                                {
                                  "value": "self.accumulated_data = []",
                                  "children": [
                                    {
                                      "value": "self.accumulated_data",
                                      "children": [
                                        {
                                          "value": "self",
                                          "children": []
                                        },
                                        {
                                          "value": "accumulated_data",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "[]",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "yield \"sampled_data\", sampled_data",
                      "children": [
                        {
                          "value": "yield \"sampled_data\", sampled_data",
                          "children": [
                            {
                              "value": "\"sampled_data\", sampled_data",
                              "children": [
                                {
                                  "value": "\"sampled_data\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "sampled_data",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "sampled_data",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "yield \"sample_indices\", indices",
                      "children": [
                        {
                          "value": "yield \"sample_indices\", indices",
                          "children": [
                            {
                              "value": "\"sample_indices\", indices",
                              "children": [
                                {
                                  "value": "\"sample_indices\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "sample_indices",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "indices",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}