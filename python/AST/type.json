{
  "value": "import json\nfrom typing import Any, Type, TypeVar, cast, get_args, get_origin\n\n\nclass ConversionError(ValueError):\n    pass\n\n\ndef __convert_list(value: Any) -> list:\n    if isinstance(value, (list, tuple, set)):\n        return list(value)\n    elif isinstance(value, dict):\n        return list(value.items())\n    elif isinstance(value, str):\n        value = value.strip()\n        if value.startswith(\"[\") and value.endswith(\"]\"):\n            try:\n                return json.loads(value)\n            except json.JSONDecodeError:\n                return [value]\n        else:\n            return [value]\n    else:\n        return [value]\n\n\ndef __convert_dict(value: Any) -> dict:\n    if isinstance(value, str):\n        try:\n            result = json.loads(value)\n            if isinstance(result, dict):\n                return result\n            else:\n                return {\"value\": result}\n        except json.JSONDecodeError:\n            return {\"value\": value}  # Fallback conversion\n    elif isinstance(value, list):\n        return {i: value[i] for i in range(len(value))}\n    elif isinstance(value, tuple):\n        return {i: value[i] for i in range(len(value))}\n    elif isinstance(value, dict):\n        return value\n    else:\n        return {\"value\": value}\n\n\ndef __convert_tuple(value: Any) -> tuple:\n    if isinstance(value, (str, list, set)):\n        return tuple(value)\n    elif isinstance(value, dict):\n        return tuple(value.items())\n    elif isinstance(value, (int, float, bool)):\n        return (value,)\n    elif isinstance(value, tuple):\n        return value\n    else:\n        return (value,)\n\n\ndef __convert_set(value: Any) -> set:\n    if isinstance(value, (str, list, tuple)):\n        return set(value)\n    elif isinstance(value, dict):\n        return set(value.items())\n    elif isinstance(value, set):\n        return value\n    else:\n        return {value}\n\n\ndef __convert_str(value: Any) -> str:\n    if isinstance(value, str):\n        return value\n    else:\n        return json.dumps(value)\n\n\nNUM = TypeVar(\"NUM\", int, float)\n\n\ndef __convert_num(value: Any, num_type: Type[NUM]) -> NUM:\n    if isinstance(value, (list, dict, tuple, set)):\n        return num_type(len(value))\n    elif isinstance(value, num_type):\n        return value\n    else:\n        try:\n            return num_type(float(value))\n        except (ValueError, TypeError):\n            return num_type(0)  # Fallback conversion\n\n\ndef __convert_bool(value: Any) -> bool:\n    if isinstance(value, bool):\n        return value\n    elif isinstance(value, str):\n        if value.lower() in [\"true\", \"1\"]:\n            return True\n        else:\n            return False\n    else:\n        return bool(value)\n\n\ndef _try_convert(value: Any, target_type: Type, raise_on_mismatch: bool) -> Any:\n    origin = get_origin(target_type)\n    args = get_args(target_type)\n    if origin is None:\n        origin = target_type\n    if origin not in [list, dict, tuple, str, set, int, float, bool]:\n        return value\n\n    # Handle the case when value is already of the target type\n    if isinstance(value, origin):\n        if not args:\n            return value\n        else:\n            # Need to convert elements\n            if origin is list:\n                return [convert(v, args[0]) for v in value]\n            elif origin is tuple:\n                # Tuples can have multiple types\n                if len(args) == 1:\n                    return tuple(convert(v, args[0]) for v in value)\n                else:\n                    return tuple(convert(v, t) for v, t in zip(value, args))\n            elif origin is dict:\n                key_type, val_type = args\n                return {\n                    convert(k, key_type): convert(v, val_type) for k, v in value.items()\n                }\n            elif origin is set:\n                return {convert(v, args[0]) for v in value}\n            else:\n                return value\n    elif raise_on_mismatch:\n        raise TypeError(f\"Value {value} is not of expected type {target_type}\")\n    else:\n        # Need to convert value to the origin type\n        if origin is list:\n            value = __convert_list(value)\n            if args:\n                return [convert(v, args[0]) for v in value]\n            else:\n                return value\n        elif origin is dict:\n            value = __convert_dict(value)\n            if args:\n                key_type, val_type = args\n                return {\n                    convert(k, key_type): convert(v, val_type) for k, v in value.items()\n                }\n            else:\n                return value\n        elif origin is tuple:\n            value = __convert_tuple(value)\n            if args:\n                if len(args) == 1:\n                    return tuple(convert(v, args[0]) for v in value)\n                else:\n                    return tuple(convert(v, t) for v, t in zip(value, args))\n            else:\n                return value\n        elif origin is str:\n            return __convert_str(value)\n        elif origin is set:\n            value = __convert_set(value)\n            if args:\n                return {convert(v, args[0]) for v in value}\n            else:\n                return value\n        elif origin is int:\n            return __convert_num(value, int)\n        elif origin is float:\n            return __convert_num(value, float)\n        elif origin is bool:\n            return __convert_bool(value)\n        else:\n            return value\n\n\nT = TypeVar(\"T\")\n\n\ndef type_match(value: Any, target_type: Type[T]) -> T:\n    return cast(T, _try_convert(value, target_type, raise_on_mismatch=True))\n\n\ndef convert(value: Any, target_type: Type[T]) -> T:\n    try:\n        return cast(T, _try_convert(value, target_type, raise_on_mismatch=False))\n    except Exception as e:\n        raise ConversionError(f\"Failed to convert {value} to {target_type}\") from e",
  "children": [
    {
      "value": "import json",
      "children": [
        {
          "value": "json",
          "children": [
            {
              "value": "json",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from typing import Any, Type, TypeVar, cast, get_args, get_origin",
      "children": [
        {
          "value": "typing",
          "children": [
            {
              "value": "typing",
              "children": []
            }
          ]
        },
        {
          "value": "Any",
          "children": [
            {
              "value": "Any",
              "children": []
            }
          ]
        },
        {
          "value": "Type",
          "children": [
            {
              "value": "Type",
              "children": []
            }
          ]
        },
        {
          "value": "TypeVar",
          "children": [
            {
              "value": "TypeVar",
              "children": []
            }
          ]
        },
        {
          "value": "cast",
          "children": [
            {
              "value": "cast",
              "children": []
            }
          ]
        },
        {
          "value": "get_args",
          "children": [
            {
              "value": "get_args",
              "children": []
            }
          ]
        },
        {
          "value": "get_origin",
          "children": [
            {
              "value": "get_origin",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "class ConversionError(ValueError):\n    pass",
      "children": [
        {
          "value": "ConversionError",
          "children": []
        },
        {
          "value": "(ValueError)",
          "children": [
            {
              "value": "ValueError",
              "children": []
            }
          ]
        },
        {
          "value": "pass",
          "children": [
            {
              "value": "pass",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "def __convert_list(value: Any) -> list:\n    if isinstance(value, (list, tuple, set)):\n        return list(value)\n    elif isinstance(value, dict):\n        return list(value.items())\n    elif isinstance(value, str):\n        value = value.strip()\n        if value.startswith(\"[\") and value.endswith(\"]\"):\n            try:\n                return json.loads(value)\n            except json.JSONDecodeError:\n                return [value]\n        else:\n            return [value]\n    else:\n        return [value]",
      "children": [
        {
          "value": "__convert_list",
          "children": []
        },
        {
          "value": "(value: Any)",
          "children": [
            {
              "value": "value: Any",
              "children": [
                {
                  "value": "value",
                  "children": []
                },
                {
                  "value": "Any",
                  "children": [
                    {
                      "value": "Any",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "list",
          "children": [
            {
              "value": "list",
              "children": []
            }
          ]
        },
        {
          "value": "if isinstance(value, (list, tuple, set)):\n        return list(value)\n    elif isinstance(value, dict):\n        return list(value.items())\n    elif isinstance(value, str):\n        value = value.strip()\n        if value.startswith(\"[\") and value.endswith(\"]\"):\n            try:\n                return json.loads(value)\n            except json.JSONDecodeError:\n                return [value]\n        else:\n            return [value]\n    else:\n        return [value]",
          "children": [
            {
              "value": "if isinstance(value, (list, tuple, set)):\n        return list(value)\n    elif isinstance(value, dict):\n        return list(value.items())\n    elif isinstance(value, str):\n        value = value.strip()\n        if value.startswith(\"[\") and value.endswith(\"]\"):\n            try:\n                return json.loads(value)\n            except json.JSONDecodeError:\n                return [value]\n        else:\n            return [value]\n    else:\n        return [value]",
              "children": [
                {
                  "value": "isinstance(value, (list, tuple, set))",
                  "children": [
                    {
                      "value": "isinstance",
                      "children": []
                    },
                    {
                      "value": "(value, (list, tuple, set))",
                      "children": [
                        {
                          "value": "value",
                          "children": []
                        },
                        {
                          "value": "(list, tuple, set)",
                          "children": [
                            {
                              "value": "list",
                              "children": []
                            },
                            {
                              "value": "tuple",
                              "children": []
                            },
                            {
                              "value": "set",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "return list(value)",
                  "children": [
                    {
                      "value": "return list(value)",
                      "children": [
                        {
                          "value": "list(value)",
                          "children": [
                            {
                              "value": "list",
                              "children": []
                            },
                            {
                              "value": "(value)",
                              "children": [
                                {
                                  "value": "value",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "elif isinstance(value, dict):\n        return list(value.items())",
                  "children": [
                    {
                      "value": "isinstance(value, dict)",
                      "children": [
                        {
                          "value": "isinstance",
                          "children": []
                        },
                        {
                          "value": "(value, dict)",
                          "children": [
                            {
                              "value": "value",
                              "children": []
                            },
                            {
                              "value": "dict",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return list(value.items())",
                      "children": [
                        {
                          "value": "return list(value.items())",
                          "children": [
                            {
                              "value": "list(value.items())",
                              "children": [
                                {
                                  "value": "list",
                                  "children": []
                                },
                                {
                                  "value": "(value.items())",
                                  "children": [
                                    {
                                      "value": "value.items()",
                                      "children": [
                                        {
                                          "value": "value.items",
                                          "children": [
                                            {
                                              "value": "value",
                                              "children": []
                                            },
                                            {
                                              "value": "items",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "()",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "elif isinstance(value, str):\n        value = value.strip()\n        if value.startswith(\"[\") and value.endswith(\"]\"):\n            try:\n                return json.loads(value)\n            except json.JSONDecodeError:\n                return [value]\n        else:\n            return [value]",
                  "children": [
                    {
                      "value": "isinstance(value, str)",
                      "children": [
                        {
                          "value": "isinstance",
                          "children": []
                        },
                        {
                          "value": "(value, str)",
                          "children": [
                            {
                              "value": "value",
                              "children": []
                            },
                            {
                              "value": "str",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "value = value.strip()\n        if value.startswith(\"[\") and value.endswith(\"]\"):\n            try:\n                return json.loads(value)\n            except json.JSONDecodeError:\n                return [value]\n        else:\n            return [value]",
                      "children": [
                        {
                          "value": "value = value.strip()",
                          "children": [
                            {
                              "value": "value = value.strip()",
                              "children": [
                                {
                                  "value": "value",
                                  "children": []
                                },
                                {
                                  "value": "value.strip()",
                                  "children": [
                                    {
                                      "value": "value.strip",
                                      "children": [
                                        {
                                          "value": "value",
                                          "children": []
                                        },
                                        {
                                          "value": "strip",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "if value.startswith(\"[\") and value.endswith(\"]\"):\n            try:\n                return json.loads(value)\n            except json.JSONDecodeError:\n                return [value]\n        else:\n            return [value]",
                          "children": [
                            {
                              "value": "value.startswith(\"[\") and value.endswith(\"]\")",
                              "children": [
                                {
                                  "value": "value.startswith(\"[\")",
                                  "children": [
                                    {
                                      "value": "value.startswith",
                                      "children": [
                                        {
                                          "value": "value",
                                          "children": []
                                        },
                                        {
                                          "value": "startswith",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(\"[\")",
                                      "children": [
                                        {
                                          "value": "\"[\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "[",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "value.endswith(\"]\")",
                                  "children": [
                                    {
                                      "value": "value.endswith",
                                      "children": [
                                        {
                                          "value": "value",
                                          "children": []
                                        },
                                        {
                                          "value": "endswith",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(\"]\")",
                                      "children": [
                                        {
                                          "value": "\"]\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "]",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "try:\n                return json.loads(value)\n            except json.JSONDecodeError:\n                return [value]",
                              "children": [
                                {
                                  "value": "try:\n                return json.loads(value)\n            except json.JSONDecodeError:\n                return [value]",
                                  "children": [
                                    {
                                      "value": "return json.loads(value)",
                                      "children": [
                                        {
                                          "value": "return json.loads(value)",
                                          "children": [
                                            {
                                              "value": "json.loads(value)",
                                              "children": [
                                                {
                                                  "value": "json.loads",
                                                  "children": [
                                                    {
                                                      "value": "json",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "loads",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(value)",
                                                  "children": [
                                                    {
                                                      "value": "value",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "except json.JSONDecodeError:\n                return [value]",
                                      "children": [
                                        {
                                          "value": "json.JSONDecodeError",
                                          "children": [
                                            {
                                              "value": "json",
                                              "children": []
                                            },
                                            {
                                              "value": "JSONDecodeError",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "return [value]",
                                          "children": [
                                            {
                                              "value": "return [value]",
                                              "children": [
                                                {
                                                  "value": "[value]",
                                                  "children": [
                                                    {
                                                      "value": "value",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "else:\n            return [value]",
                              "children": [
                                {
                                  "value": "return [value]",
                                  "children": [
                                    {
                                      "value": "return [value]",
                                      "children": [
                                        {
                                          "value": "[value]",
                                          "children": [
                                            {
                                              "value": "value",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "else:\n        return [value]",
                  "children": [
                    {
                      "value": "return [value]",
                      "children": [
                        {
                          "value": "return [value]",
                          "children": [
                            {
                              "value": "[value]",
                              "children": [
                                {
                                  "value": "value",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def __convert_dict(value: Any) -> dict:\n    if isinstance(value, str):\n        try:\n            result = json.loads(value)\n            if isinstance(result, dict):\n                return result\n            else:\n                return {\"value\": result}\n        except json.JSONDecodeError:\n            return {\"value\": value}  # Fallback conversion\n    elif isinstance(value, list):\n        return {i: value[i] for i in range(len(value))}\n    elif isinstance(value, tuple):\n        return {i: value[i] for i in range(len(value))}\n    elif isinstance(value, dict):\n        return value\n    else:\n        return {\"value\": value}",
      "children": [
        {
          "value": "__convert_dict",
          "children": []
        },
        {
          "value": "(value: Any)",
          "children": [
            {
              "value": "value: Any",
              "children": [
                {
                  "value": "value",
                  "children": []
                },
                {
                  "value": "Any",
                  "children": [
                    {
                      "value": "Any",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "dict",
          "children": [
            {
              "value": "dict",
              "children": []
            }
          ]
        },
        {
          "value": "if isinstance(value, str):\n        try:\n            result = json.loads(value)\n            if isinstance(result, dict):\n                return result\n            else:\n                return {\"value\": result}\n        except json.JSONDecodeError:\n            return {\"value\": value}  # Fallback conversion\n    elif isinstance(value, list):\n        return {i: value[i] for i in range(len(value))}\n    elif isinstance(value, tuple):\n        return {i: value[i] for i in range(len(value))}\n    elif isinstance(value, dict):\n        return value\n    else:\n        return {\"value\": value}",
          "children": [
            {
              "value": "if isinstance(value, str):\n        try:\n            result = json.loads(value)\n            if isinstance(result, dict):\n                return result\n            else:\n                return {\"value\": result}\n        except json.JSONDecodeError:\n            return {\"value\": value}  # Fallback conversion\n    elif isinstance(value, list):\n        return {i: value[i] for i in range(len(value))}\n    elif isinstance(value, tuple):\n        return {i: value[i] for i in range(len(value))}\n    elif isinstance(value, dict):\n        return value\n    else:\n        return {\"value\": value}",
              "children": [
                {
                  "value": "isinstance(value, str)",
                  "children": [
                    {
                      "value": "isinstance",
                      "children": []
                    },
                    {
                      "value": "(value, str)",
                      "children": [
                        {
                          "value": "value",
                          "children": []
                        },
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "try:\n            result = json.loads(value)\n            if isinstance(result, dict):\n                return result\n            else:\n                return {\"value\": result}\n        except json.JSONDecodeError:\n            return {\"value\": value}  # Fallback conversion",
                  "children": [
                    {
                      "value": "try:\n            result = json.loads(value)\n            if isinstance(result, dict):\n                return result\n            else:\n                return {\"value\": result}\n        except json.JSONDecodeError:\n            return {\"value\": value}  # Fallback conversion",
                      "children": [
                        {
                          "value": "result = json.loads(value)\n            if isinstance(result, dict):\n                return result\n            else:\n                return {\"value\": result}",
                          "children": [
                            {
                              "value": "result = json.loads(value)",
                              "children": [
                                {
                                  "value": "result = json.loads(value)",
                                  "children": [
                                    {
                                      "value": "result",
                                      "children": []
                                    },
                                    {
                                      "value": "json.loads(value)",
                                      "children": [
                                        {
                                          "value": "json.loads",
                                          "children": [
                                            {
                                              "value": "json",
                                              "children": []
                                            },
                                            {
                                              "value": "loads",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(value)",
                                          "children": [
                                            {
                                              "value": "value",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "if isinstance(result, dict):\n                return result\n            else:\n                return {\"value\": result}",
                              "children": [
                                {
                                  "value": "isinstance(result, dict)",
                                  "children": [
                                    {
                                      "value": "isinstance",
                                      "children": []
                                    },
                                    {
                                      "value": "(result, dict)",
                                      "children": [
                                        {
                                          "value": "result",
                                          "children": []
                                        },
                                        {
                                          "value": "dict",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "return result",
                                  "children": [
                                    {
                                      "value": "return result",
                                      "children": [
                                        {
                                          "value": "result",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "else:\n                return {\"value\": result}",
                                  "children": [
                                    {
                                      "value": "return {\"value\": result}",
                                      "children": [
                                        {
                                          "value": "return {\"value\": result}",
                                          "children": [
                                            {
                                              "value": "{\"value\": result}",
                                              "children": [
                                                {
                                                  "value": "\"value\": result",
                                                  "children": [
                                                    {
                                                      "value": "\"value\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "value",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "result",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "except json.JSONDecodeError:\n            return {\"value\": value}  # Fallback conversion",
                          "children": [
                            {
                              "value": "json.JSONDecodeError",
                              "children": [
                                {
                                  "value": "json",
                                  "children": []
                                },
                                {
                                  "value": "JSONDecodeError",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "return {\"value\": value}  # Fallback conversion",
                              "children": [
                                {
                                  "value": "return {\"value\": value}",
                                  "children": [
                                    {
                                      "value": "{\"value\": value}",
                                      "children": [
                                        {
                                          "value": "\"value\": value",
                                          "children": [
                                            {
                                              "value": "\"value\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "value",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "value",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "# Fallback conversion",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "elif isinstance(value, list):\n        return {i: value[i] for i in range(len(value))}",
                  "children": [
                    {
                      "value": "isinstance(value, list)",
                      "children": [
                        {
                          "value": "isinstance",
                          "children": []
                        },
                        {
                          "value": "(value, list)",
                          "children": [
                            {
                              "value": "value",
                              "children": []
                            },
                            {
                              "value": "list",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return {i: value[i] for i in range(len(value))}",
                      "children": [
                        {
                          "value": "return {i: value[i] for i in range(len(value))}",
                          "children": [
                            {
                              "value": "{i: value[i] for i in range(len(value))}",
                              "children": [
                                {
                                  "value": "i: value[i]",
                                  "children": [
                                    {
                                      "value": "i",
                                      "children": []
                                    },
                                    {
                                      "value": "value[i]",
                                      "children": [
                                        {
                                          "value": "value",
                                          "children": []
                                        },
                                        {
                                          "value": "i",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "for i in range(len(value))",
                                  "children": [
                                    {
                                      "value": "i",
                                      "children": []
                                    },
                                    {
                                      "value": "range(len(value))",
                                      "children": [
                                        {
                                          "value": "range",
                                          "children": []
                                        },
                                        {
                                          "value": "(len(value))",
                                          "children": [
                                            {
                                              "value": "len(value)",
                                              "children": [
                                                {
                                                  "value": "len",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(value)",
                                                  "children": [
                                                    {
                                                      "value": "value",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "elif isinstance(value, tuple):\n        return {i: value[i] for i in range(len(value))}",
                  "children": [
                    {
                      "value": "isinstance(value, tuple)",
                      "children": [
                        {
                          "value": "isinstance",
                          "children": []
                        },
                        {
                          "value": "(value, tuple)",
                          "children": [
                            {
                              "value": "value",
                              "children": []
                            },
                            {
                              "value": "tuple",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return {i: value[i] for i in range(len(value))}",
                      "children": [
                        {
                          "value": "return {i: value[i] for i in range(len(value))}",
                          "children": [
                            {
                              "value": "{i: value[i] for i in range(len(value))}",
                              "children": [
                                {
                                  "value": "i: value[i]",
                                  "children": [
                                    {
                                      "value": "i",
                                      "children": []
                                    },
                                    {
                                      "value": "value[i]",
                                      "children": [
                                        {
                                          "value": "value",
                                          "children": []
                                        },
                                        {
                                          "value": "i",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "for i in range(len(value))",
                                  "children": [
                                    {
                                      "value": "i",
                                      "children": []
                                    },
                                    {
                                      "value": "range(len(value))",
                                      "children": [
                                        {
                                          "value": "range",
                                          "children": []
                                        },
                                        {
                                          "value": "(len(value))",
                                          "children": [
                                            {
                                              "value": "len(value)",
                                              "children": [
                                                {
                                                  "value": "len",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(value)",
                                                  "children": [
                                                    {
                                                      "value": "value",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "elif isinstance(value, dict):\n        return value",
                  "children": [
                    {
                      "value": "isinstance(value, dict)",
                      "children": [
                        {
                          "value": "isinstance",
                          "children": []
                        },
                        {
                          "value": "(value, dict)",
                          "children": [
                            {
                              "value": "value",
                              "children": []
                            },
                            {
                              "value": "dict",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return value",
                      "children": [
                        {
                          "value": "return value",
                          "children": [
                            {
                              "value": "value",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "else:\n        return {\"value\": value}",
                  "children": [
                    {
                      "value": "return {\"value\": value}",
                      "children": [
                        {
                          "value": "return {\"value\": value}",
                          "children": [
                            {
                              "value": "{\"value\": value}",
                              "children": [
                                {
                                  "value": "\"value\": value",
                                  "children": [
                                    {
                                      "value": "\"value\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "value",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "value",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def __convert_tuple(value: Any) -> tuple:\n    if isinstance(value, (str, list, set)):\n        return tuple(value)\n    elif isinstance(value, dict):\n        return tuple(value.items())\n    elif isinstance(value, (int, float, bool)):\n        return (value,)\n    elif isinstance(value, tuple):\n        return value\n    else:\n        return (value,)",
      "children": [
        {
          "value": "__convert_tuple",
          "children": []
        },
        {
          "value": "(value: Any)",
          "children": [
            {
              "value": "value: Any",
              "children": [
                {
                  "value": "value",
                  "children": []
                },
                {
                  "value": "Any",
                  "children": [
                    {
                      "value": "Any",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "tuple",
          "children": [
            {
              "value": "tuple",
              "children": []
            }
          ]
        },
        {
          "value": "if isinstance(value, (str, list, set)):\n        return tuple(value)\n    elif isinstance(value, dict):\n        return tuple(value.items())\n    elif isinstance(value, (int, float, bool)):\n        return (value,)\n    elif isinstance(value, tuple):\n        return value\n    else:\n        return (value,)",
          "children": [
            {
              "value": "if isinstance(value, (str, list, set)):\n        return tuple(value)\n    elif isinstance(value, dict):\n        return tuple(value.items())\n    elif isinstance(value, (int, float, bool)):\n        return (value,)\n    elif isinstance(value, tuple):\n        return value\n    else:\n        return (value,)",
              "children": [
                {
                  "value": "isinstance(value, (str, list, set))",
                  "children": [
                    {
                      "value": "isinstance",
                      "children": []
                    },
                    {
                      "value": "(value, (str, list, set))",
                      "children": [
                        {
                          "value": "value",
                          "children": []
                        },
                        {
                          "value": "(str, list, set)",
                          "children": [
                            {
                              "value": "str",
                              "children": []
                            },
                            {
                              "value": "list",
                              "children": []
                            },
                            {
                              "value": "set",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "return tuple(value)",
                  "children": [
                    {
                      "value": "return tuple(value)",
                      "children": [
                        {
                          "value": "tuple(value)",
                          "children": [
                            {
                              "value": "tuple",
                              "children": []
                            },
                            {
                              "value": "(value)",
                              "children": [
                                {
                                  "value": "value",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "elif isinstance(value, dict):\n        return tuple(value.items())",
                  "children": [
                    {
                      "value": "isinstance(value, dict)",
                      "children": [
                        {
                          "value": "isinstance",
                          "children": []
                        },
                        {
                          "value": "(value, dict)",
                          "children": [
                            {
                              "value": "value",
                              "children": []
                            },
                            {
                              "value": "dict",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return tuple(value.items())",
                      "children": [
                        {
                          "value": "return tuple(value.items())",
                          "children": [
                            {
                              "value": "tuple(value.items())",
                              "children": [
                                {
                                  "value": "tuple",
                                  "children": []
                                },
                                {
                                  "value": "(value.items())",
                                  "children": [
                                    {
                                      "value": "value.items()",
                                      "children": [
                                        {
                                          "value": "value.items",
                                          "children": [
                                            {
                                              "value": "value",
                                              "children": []
                                            },
                                            {
                                              "value": "items",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "()",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "elif isinstance(value, (int, float, bool)):\n        return (value,)",
                  "children": [
                    {
                      "value": "isinstance(value, (int, float, bool))",
                      "children": [
                        {
                          "value": "isinstance",
                          "children": []
                        },
                        {
                          "value": "(value, (int, float, bool))",
                          "children": [
                            {
                              "value": "value",
                              "children": []
                            },
                            {
                              "value": "(int, float, bool)",
                              "children": [
                                {
                                  "value": "int",
                                  "children": []
                                },
                                {
                                  "value": "float",
                                  "children": []
                                },
                                {
                                  "value": "bool",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return (value,)",
                      "children": [
                        {
                          "value": "return (value,)",
                          "children": [
                            {
                              "value": "(value,)",
                              "children": [
                                {
                                  "value": "value",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "elif isinstance(value, tuple):\n        return value",
                  "children": [
                    {
                      "value": "isinstance(value, tuple)",
                      "children": [
                        {
                          "value": "isinstance",
                          "children": []
                        },
                        {
                          "value": "(value, tuple)",
                          "children": [
                            {
                              "value": "value",
                              "children": []
                            },
                            {
                              "value": "tuple",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return value",
                      "children": [
                        {
                          "value": "return value",
                          "children": [
                            {
                              "value": "value",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "else:\n        return (value,)",
                  "children": [
                    {
                      "value": "return (value,)",
                      "children": [
                        {
                          "value": "return (value,)",
                          "children": [
                            {
                              "value": "(value,)",
                              "children": [
                                {
                                  "value": "value",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def __convert_set(value: Any) -> set:\n    if isinstance(value, (str, list, tuple)):\n        return set(value)\n    elif isinstance(value, dict):\n        return set(value.items())\n    elif isinstance(value, set):\n        return value\n    else:\n        return {value}",
      "children": [
        {
          "value": "__convert_set",
          "children": []
        },
        {
          "value": "(value: Any)",
          "children": [
            {
              "value": "value: Any",
              "children": [
                {
                  "value": "value",
                  "children": []
                },
                {
                  "value": "Any",
                  "children": [
                    {
                      "value": "Any",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "set",
          "children": [
            {
              "value": "set",
              "children": []
            }
          ]
        },
        {
          "value": "if isinstance(value, (str, list, tuple)):\n        return set(value)\n    elif isinstance(value, dict):\n        return set(value.items())\n    elif isinstance(value, set):\n        return value\n    else:\n        return {value}",
          "children": [
            {
              "value": "if isinstance(value, (str, list, tuple)):\n        return set(value)\n    elif isinstance(value, dict):\n        return set(value.items())\n    elif isinstance(value, set):\n        return value\n    else:\n        return {value}",
              "children": [
                {
                  "value": "isinstance(value, (str, list, tuple))",
                  "children": [
                    {
                      "value": "isinstance",
                      "children": []
                    },
                    {
                      "value": "(value, (str, list, tuple))",
                      "children": [
                        {
                          "value": "value",
                          "children": []
                        },
                        {
                          "value": "(str, list, tuple)",
                          "children": [
                            {
                              "value": "str",
                              "children": []
                            },
                            {
                              "value": "list",
                              "children": []
                            },
                            {
                              "value": "tuple",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "return set(value)",
                  "children": [
                    {
                      "value": "return set(value)",
                      "children": [
                        {
                          "value": "set(value)",
                          "children": [
                            {
                              "value": "set",
                              "children": []
                            },
                            {
                              "value": "(value)",
                              "children": [
                                {
                                  "value": "value",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "elif isinstance(value, dict):\n        return set(value.items())",
                  "children": [
                    {
                      "value": "isinstance(value, dict)",
                      "children": [
                        {
                          "value": "isinstance",
                          "children": []
                        },
                        {
                          "value": "(value, dict)",
                          "children": [
                            {
                              "value": "value",
                              "children": []
                            },
                            {
                              "value": "dict",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return set(value.items())",
                      "children": [
                        {
                          "value": "return set(value.items())",
                          "children": [
                            {
                              "value": "set(value.items())",
                              "children": [
                                {
                                  "value": "set",
                                  "children": []
                                },
                                {
                                  "value": "(value.items())",
                                  "children": [
                                    {
                                      "value": "value.items()",
                                      "children": [
                                        {
                                          "value": "value.items",
                                          "children": [
                                            {
                                              "value": "value",
                                              "children": []
                                            },
                                            {
                                              "value": "items",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "()",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "elif isinstance(value, set):\n        return value",
                  "children": [
                    {
                      "value": "isinstance(value, set)",
                      "children": [
                        {
                          "value": "isinstance",
                          "children": []
                        },
                        {
                          "value": "(value, set)",
                          "children": [
                            {
                              "value": "value",
                              "children": []
                            },
                            {
                              "value": "set",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return value",
                      "children": [
                        {
                          "value": "return value",
                          "children": [
                            {
                              "value": "value",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "else:\n        return {value}",
                  "children": [
                    {
                      "value": "return {value}",
                      "children": [
                        {
                          "value": "return {value}",
                          "children": [
                            {
                              "value": "{value}",
                              "children": [
                                {
                                  "value": "value",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def __convert_str(value: Any) -> str:\n    if isinstance(value, str):\n        return value\n    else:\n        return json.dumps(value)",
      "children": [
        {
          "value": "__convert_str",
          "children": []
        },
        {
          "value": "(value: Any)",
          "children": [
            {
              "value": "value: Any",
              "children": [
                {
                  "value": "value",
                  "children": []
                },
                {
                  "value": "Any",
                  "children": [
                    {
                      "value": "Any",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "str",
          "children": [
            {
              "value": "str",
              "children": []
            }
          ]
        },
        {
          "value": "if isinstance(value, str):\n        return value\n    else:\n        return json.dumps(value)",
          "children": [
            {
              "value": "if isinstance(value, str):\n        return value\n    else:\n        return json.dumps(value)",
              "children": [
                {
                  "value": "isinstance(value, str)",
                  "children": [
                    {
                      "value": "isinstance",
                      "children": []
                    },
                    {
                      "value": "(value, str)",
                      "children": [
                        {
                          "value": "value",
                          "children": []
                        },
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "return value",
                  "children": [
                    {
                      "value": "return value",
                      "children": [
                        {
                          "value": "value",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "else:\n        return json.dumps(value)",
                  "children": [
                    {
                      "value": "return json.dumps(value)",
                      "children": [
                        {
                          "value": "return json.dumps(value)",
                          "children": [
                            {
                              "value": "json.dumps(value)",
                              "children": [
                                {
                                  "value": "json.dumps",
                                  "children": [
                                    {
                                      "value": "json",
                                      "children": []
                                    },
                                    {
                                      "value": "dumps",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(value)",
                                  "children": [
                                    {
                                      "value": "value",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "NUM = TypeVar(\"NUM\", int, float)",
      "children": [
        {
          "value": "NUM = TypeVar(\"NUM\", int, float)",
          "children": [
            {
              "value": "NUM",
              "children": []
            },
            {
              "value": "TypeVar(\"NUM\", int, float)",
              "children": [
                {
                  "value": "TypeVar",
                  "children": []
                },
                {
                  "value": "(\"NUM\", int, float)",
                  "children": [
                    {
                      "value": "\"NUM\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "NUM",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "int",
                      "children": []
                    },
                    {
                      "value": "float",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def __convert_num(value: Any, num_type: Type[NUM]) -> NUM:\n    if isinstance(value, (list, dict, tuple, set)):\n        return num_type(len(value))\n    elif isinstance(value, num_type):\n        return value\n    else:\n        try:\n            return num_type(float(value))\n        except (ValueError, TypeError):\n            return num_type(0)  # Fallback conversion",
      "children": [
        {
          "value": "__convert_num",
          "children": []
        },
        {
          "value": "(value: Any, num_type: Type[NUM])",
          "children": [
            {
              "value": "value: Any",
              "children": [
                {
                  "value": "value",
                  "children": []
                },
                {
                  "value": "Any",
                  "children": [
                    {
                      "value": "Any",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "num_type: Type[NUM]",
              "children": [
                {
                  "value": "num_type",
                  "children": []
                },
                {
                  "value": "Type[NUM]",
                  "children": [
                    {
                      "value": "Type[NUM]",
                      "children": [
                        {
                          "value": "Type",
                          "children": []
                        },
                        {
                          "value": "[NUM]",
                          "children": [
                            {
                              "value": "NUM",
                              "children": [
                                {
                                  "value": "NUM",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "NUM",
          "children": [
            {
              "value": "NUM",
              "children": []
            }
          ]
        },
        {
          "value": "if isinstance(value, (list, dict, tuple, set)):\n        return num_type(len(value))\n    elif isinstance(value, num_type):\n        return value\n    else:\n        try:\n            return num_type(float(value))\n        except (ValueError, TypeError):\n            return num_type(0)  # Fallback conversion",
          "children": [
            {
              "value": "if isinstance(value, (list, dict, tuple, set)):\n        return num_type(len(value))\n    elif isinstance(value, num_type):\n        return value\n    else:\n        try:\n            return num_type(float(value))\n        except (ValueError, TypeError):\n            return num_type(0)  # Fallback conversion",
              "children": [
                {
                  "value": "isinstance(value, (list, dict, tuple, set))",
                  "children": [
                    {
                      "value": "isinstance",
                      "children": []
                    },
                    {
                      "value": "(value, (list, dict, tuple, set))",
                      "children": [
                        {
                          "value": "value",
                          "children": []
                        },
                        {
                          "value": "(list, dict, tuple, set)",
                          "children": [
                            {
                              "value": "list",
                              "children": []
                            },
                            {
                              "value": "dict",
                              "children": []
                            },
                            {
                              "value": "tuple",
                              "children": []
                            },
                            {
                              "value": "set",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "return num_type(len(value))",
                  "children": [
                    {
                      "value": "return num_type(len(value))",
                      "children": [
                        {
                          "value": "num_type(len(value))",
                          "children": [
                            {
                              "value": "num_type",
                              "children": []
                            },
                            {
                              "value": "(len(value))",
                              "children": [
                                {
                                  "value": "len(value)",
                                  "children": [
                                    {
                                      "value": "len",
                                      "children": []
                                    },
                                    {
                                      "value": "(value)",
                                      "children": [
                                        {
                                          "value": "value",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "elif isinstance(value, num_type):\n        return value",
                  "children": [
                    {
                      "value": "isinstance(value, num_type)",
                      "children": [
                        {
                          "value": "isinstance",
                          "children": []
                        },
                        {
                          "value": "(value, num_type)",
                          "children": [
                            {
                              "value": "value",
                              "children": []
                            },
                            {
                              "value": "num_type",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return value",
                      "children": [
                        {
                          "value": "return value",
                          "children": [
                            {
                              "value": "value",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "else:\n        try:\n            return num_type(float(value))\n        except (ValueError, TypeError):\n            return num_type(0)  # Fallback conversion",
                  "children": [
                    {
                      "value": "try:\n            return num_type(float(value))\n        except (ValueError, TypeError):\n            return num_type(0)  # Fallback conversion",
                      "children": [
                        {
                          "value": "try:\n            return num_type(float(value))\n        except (ValueError, TypeError):\n            return num_type(0)  # Fallback conversion",
                          "children": [
                            {
                              "value": "return num_type(float(value))",
                              "children": [
                                {
                                  "value": "return num_type(float(value))",
                                  "children": [
                                    {
                                      "value": "num_type(float(value))",
                                      "children": [
                                        {
                                          "value": "num_type",
                                          "children": []
                                        },
                                        {
                                          "value": "(float(value))",
                                          "children": [
                                            {
                                              "value": "float(value)",
                                              "children": [
                                                {
                                                  "value": "float",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(value)",
                                                  "children": [
                                                    {
                                                      "value": "value",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "except (ValueError, TypeError):\n            return num_type(0)  # Fallback conversion",
                              "children": [
                                {
                                  "value": "(ValueError, TypeError)",
                                  "children": [
                                    {
                                      "value": "ValueError",
                                      "children": []
                                    },
                                    {
                                      "value": "TypeError",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "return num_type(0)  # Fallback conversion",
                                  "children": [
                                    {
                                      "value": "return num_type(0)",
                                      "children": [
                                        {
                                          "value": "num_type(0)",
                                          "children": [
                                            {
                                              "value": "num_type",
                                              "children": []
                                            },
                                            {
                                              "value": "(0)",
                                              "children": [
                                                {
                                                  "value": "0",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "# Fallback conversion",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def __convert_bool(value: Any) -> bool:\n    if isinstance(value, bool):\n        return value\n    elif isinstance(value, str):\n        if value.lower() in [\"true\", \"1\"]:\n            return True\n        else:\n            return False\n    else:\n        return bool(value)",
      "children": [
        {
          "value": "__convert_bool",
          "children": []
        },
        {
          "value": "(value: Any)",
          "children": [
            {
              "value": "value: Any",
              "children": [
                {
                  "value": "value",
                  "children": []
                },
                {
                  "value": "Any",
                  "children": [
                    {
                      "value": "Any",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "bool",
          "children": [
            {
              "value": "bool",
              "children": []
            }
          ]
        },
        {
          "value": "if isinstance(value, bool):\n        return value\n    elif isinstance(value, str):\n        if value.lower() in [\"true\", \"1\"]:\n            return True\n        else:\n            return False\n    else:\n        return bool(value)",
          "children": [
            {
              "value": "if isinstance(value, bool):\n        return value\n    elif isinstance(value, str):\n        if value.lower() in [\"true\", \"1\"]:\n            return True\n        else:\n            return False\n    else:\n        return bool(value)",
              "children": [
                {
                  "value": "isinstance(value, bool)",
                  "children": [
                    {
                      "value": "isinstance",
                      "children": []
                    },
                    {
                      "value": "(value, bool)",
                      "children": [
                        {
                          "value": "value",
                          "children": []
                        },
                        {
                          "value": "bool",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "return value",
                  "children": [
                    {
                      "value": "return value",
                      "children": [
                        {
                          "value": "value",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "elif isinstance(value, str):\n        if value.lower() in [\"true\", \"1\"]:\n            return True\n        else:\n            return False",
                  "children": [
                    {
                      "value": "isinstance(value, str)",
                      "children": [
                        {
                          "value": "isinstance",
                          "children": []
                        },
                        {
                          "value": "(value, str)",
                          "children": [
                            {
                              "value": "value",
                              "children": []
                            },
                            {
                              "value": "str",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if value.lower() in [\"true\", \"1\"]:\n            return True\n        else:\n            return False",
                      "children": [
                        {
                          "value": "if value.lower() in [\"true\", \"1\"]:\n            return True\n        else:\n            return False",
                          "children": [
                            {
                              "value": "value.lower() in [\"true\", \"1\"]",
                              "children": [
                                {
                                  "value": "value.lower()",
                                  "children": [
                                    {
                                      "value": "value.lower",
                                      "children": [
                                        {
                                          "value": "value",
                                          "children": []
                                        },
                                        {
                                          "value": "lower",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "[\"true\", \"1\"]",
                                  "children": [
                                    {
                                      "value": "\"true\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "true",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "\"1\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "1",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "return True",
                              "children": [
                                {
                                  "value": "return True",
                                  "children": [
                                    {
                                      "value": "True",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "else:\n            return False",
                              "children": [
                                {
                                  "value": "return False",
                                  "children": [
                                    {
                                      "value": "return False",
                                      "children": [
                                        {
                                          "value": "False",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "else:\n        return bool(value)",
                  "children": [
                    {
                      "value": "return bool(value)",
                      "children": [
                        {
                          "value": "return bool(value)",
                          "children": [
                            {
                              "value": "bool(value)",
                              "children": [
                                {
                                  "value": "bool",
                                  "children": []
                                },
                                {
                                  "value": "(value)",
                                  "children": [
                                    {
                                      "value": "value",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def _try_convert(value: Any, target_type: Type, raise_on_mismatch: bool) -> Any:\n    origin = get_origin(target_type)\n    args = get_args(target_type)\n    if origin is None:\n        origin = target_type\n    if origin not in [list, dict, tuple, str, set, int, float, bool]:\n        return value\n\n    # Handle the case when value is already of the target type\n    if isinstance(value, origin):\n        if not args:\n            return value\n        else:\n            # Need to convert elements\n            if origin is list:\n                return [convert(v, args[0]) for v in value]\n            elif origin is tuple:\n                # Tuples can have multiple types\n                if len(args) == 1:\n                    return tuple(convert(v, args[0]) for v in value)\n                else:\n                    return tuple(convert(v, t) for v, t in zip(value, args))\n            elif origin is dict:\n                key_type, val_type = args\n                return {\n                    convert(k, key_type): convert(v, val_type) for k, v in value.items()\n                }\n            elif origin is set:\n                return {convert(v, args[0]) for v in value}\n            else:\n                return value\n    elif raise_on_mismatch:\n        raise TypeError(f\"Value {value} is not of expected type {target_type}\")\n    else:\n        # Need to convert value to the origin type\n        if origin is list:\n            value = __convert_list(value)\n            if args:\n                return [convert(v, args[0]) for v in value]\n            else:\n                return value\n        elif origin is dict:\n            value = __convert_dict(value)\n            if args:\n                key_type, val_type = args\n                return {\n                    convert(k, key_type): convert(v, val_type) for k, v in value.items()\n                }\n            else:\n                return value\n        elif origin is tuple:\n            value = __convert_tuple(value)\n            if args:\n                if len(args) == 1:\n                    return tuple(convert(v, args[0]) for v in value)\n                else:\n                    return tuple(convert(v, t) for v, t in zip(value, args))\n            else:\n                return value\n        elif origin is str:\n            return __convert_str(value)\n        elif origin is set:\n            value = __convert_set(value)\n            if args:\n                return {convert(v, args[0]) for v in value}\n            else:\n                return value\n        elif origin is int:\n            return __convert_num(value, int)\n        elif origin is float:\n            return __convert_num(value, float)\n        elif origin is bool:\n            return __convert_bool(value)\n        else:\n            return value",
      "children": [
        {
          "value": "_try_convert",
          "children": []
        },
        {
          "value": "(value: Any, target_type: Type, raise_on_mismatch: bool)",
          "children": [
            {
              "value": "value: Any",
              "children": [
                {
                  "value": "value",
                  "children": []
                },
                {
                  "value": "Any",
                  "children": [
                    {
                      "value": "Any",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "target_type: Type",
              "children": [
                {
                  "value": "target_type",
                  "children": []
                },
                {
                  "value": "Type",
                  "children": [
                    {
                      "value": "Type",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "raise_on_mismatch: bool",
              "children": [
                {
                  "value": "raise_on_mismatch",
                  "children": []
                },
                {
                  "value": "bool",
                  "children": [
                    {
                      "value": "bool",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "Any",
          "children": [
            {
              "value": "Any",
              "children": []
            }
          ]
        },
        {
          "value": "origin = get_origin(target_type)\n    args = get_args(target_type)\n    if origin is None:\n        origin = target_type\n    if origin not in [list, dict, tuple, str, set, int, float, bool]:\n        return value\n\n    # Handle the case when value is already of the target type\n    if isinstance(value, origin):\n        if not args:\n            return value\n        else:\n            # Need to convert elements\n            if origin is list:\n                return [convert(v, args[0]) for v in value]\n            elif origin is tuple:\n                # Tuples can have multiple types\n                if len(args) == 1:\n                    return tuple(convert(v, args[0]) for v in value)\n                else:\n                    return tuple(convert(v, t) for v, t in zip(value, args))\n            elif origin is dict:\n                key_type, val_type = args\n                return {\n                    convert(k, key_type): convert(v, val_type) for k, v in value.items()\n                }\n            elif origin is set:\n                return {convert(v, args[0]) for v in value}\n            else:\n                return value\n    elif raise_on_mismatch:\n        raise TypeError(f\"Value {value} is not of expected type {target_type}\")\n    else:\n        # Need to convert value to the origin type\n        if origin is list:\n            value = __convert_list(value)\n            if args:\n                return [convert(v, args[0]) for v in value]\n            else:\n                return value\n        elif origin is dict:\n            value = __convert_dict(value)\n            if args:\n                key_type, val_type = args\n                return {\n                    convert(k, key_type): convert(v, val_type) for k, v in value.items()\n                }\n            else:\n                return value\n        elif origin is tuple:\n            value = __convert_tuple(value)\n            if args:\n                if len(args) == 1:\n                    return tuple(convert(v, args[0]) for v in value)\n                else:\n                    return tuple(convert(v, t) for v, t in zip(value, args))\n            else:\n                return value\n        elif origin is str:\n            return __convert_str(value)\n        elif origin is set:\n            value = __convert_set(value)\n            if args:\n                return {convert(v, args[0]) for v in value}\n            else:\n                return value\n        elif origin is int:\n            return __convert_num(value, int)\n        elif origin is float:\n            return __convert_num(value, float)\n        elif origin is bool:\n            return __convert_bool(value)\n        else:\n            return value",
          "children": [
            {
              "value": "origin = get_origin(target_type)",
              "children": [
                {
                  "value": "origin = get_origin(target_type)",
                  "children": [
                    {
                      "value": "origin",
                      "children": []
                    },
                    {
                      "value": "get_origin(target_type)",
                      "children": [
                        {
                          "value": "get_origin",
                          "children": []
                        },
                        {
                          "value": "(target_type)",
                          "children": [
                            {
                              "value": "target_type",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "args = get_args(target_type)",
              "children": [
                {
                  "value": "args = get_args(target_type)",
                  "children": [
                    {
                      "value": "args",
                      "children": []
                    },
                    {
                      "value": "get_args(target_type)",
                      "children": [
                        {
                          "value": "get_args",
                          "children": []
                        },
                        {
                          "value": "(target_type)",
                          "children": [
                            {
                              "value": "target_type",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "if origin is None:\n        origin = target_type",
              "children": [
                {
                  "value": "origin is None",
                  "children": [
                    {
                      "value": "origin",
                      "children": []
                    },
                    {
                      "value": "None",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "origin = target_type",
                  "children": [
                    {
                      "value": "origin = target_type",
                      "children": [
                        {
                          "value": "origin = target_type",
                          "children": [
                            {
                              "value": "origin",
                              "children": []
                            },
                            {
                              "value": "target_type",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "if origin not in [list, dict, tuple, str, set, int, float, bool]:\n        return value",
              "children": [
                {
                  "value": "origin not in [list, dict, tuple, str, set, int, float, bool]",
                  "children": [
                    {
                      "value": "origin",
                      "children": []
                    },
                    {
                      "value": "[list, dict, tuple, str, set, int, float, bool]",
                      "children": [
                        {
                          "value": "list",
                          "children": []
                        },
                        {
                          "value": "dict",
                          "children": []
                        },
                        {
                          "value": "tuple",
                          "children": []
                        },
                        {
                          "value": "str",
                          "children": []
                        },
                        {
                          "value": "set",
                          "children": []
                        },
                        {
                          "value": "int",
                          "children": []
                        },
                        {
                          "value": "float",
                          "children": []
                        },
                        {
                          "value": "bool",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "return value",
                  "children": [
                    {
                      "value": "return value",
                      "children": [
                        {
                          "value": "value",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "# Handle the case when value is already of the target type",
              "children": []
            },
            {
              "value": "if isinstance(value, origin):\n        if not args:\n            return value\n        else:\n            # Need to convert elements\n            if origin is list:\n                return [convert(v, args[0]) for v in value]\n            elif origin is tuple:\n                # Tuples can have multiple types\n                if len(args) == 1:\n                    return tuple(convert(v, args[0]) for v in value)\n                else:\n                    return tuple(convert(v, t) for v, t in zip(value, args))\n            elif origin is dict:\n                key_type, val_type = args\n                return {\n                    convert(k, key_type): convert(v, val_type) for k, v in value.items()\n                }\n            elif origin is set:\n                return {convert(v, args[0]) for v in value}\n            else:\n                return value\n    elif raise_on_mismatch:\n        raise TypeError(f\"Value {value} is not of expected type {target_type}\")\n    else:\n        # Need to convert value to the origin type\n        if origin is list:\n            value = __convert_list(value)\n            if args:\n                return [convert(v, args[0]) for v in value]\n            else:\n                return value\n        elif origin is dict:\n            value = __convert_dict(value)\n            if args:\n                key_type, val_type = args\n                return {\n                    convert(k, key_type): convert(v, val_type) for k, v in value.items()\n                }\n            else:\n                return value\n        elif origin is tuple:\n            value = __convert_tuple(value)\n            if args:\n                if len(args) == 1:\n                    return tuple(convert(v, args[0]) for v in value)\n                else:\n                    return tuple(convert(v, t) for v, t in zip(value, args))\n            else:\n                return value\n        elif origin is str:\n            return __convert_str(value)\n        elif origin is set:\n            value = __convert_set(value)\n            if args:\n                return {convert(v, args[0]) for v in value}\n            else:\n                return value\n        elif origin is int:\n            return __convert_num(value, int)\n        elif origin is float:\n            return __convert_num(value, float)\n        elif origin is bool:\n            return __convert_bool(value)\n        else:\n            return value",
              "children": [
                {
                  "value": "isinstance(value, origin)",
                  "children": [
                    {
                      "value": "isinstance",
                      "children": []
                    },
                    {
                      "value": "(value, origin)",
                      "children": [
                        {
                          "value": "value",
                          "children": []
                        },
                        {
                          "value": "origin",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "if not args:\n            return value\n        else:\n            # Need to convert elements\n            if origin is list:\n                return [convert(v, args[0]) for v in value]\n            elif origin is tuple:\n                # Tuples can have multiple types\n                if len(args) == 1:\n                    return tuple(convert(v, args[0]) for v in value)\n                else:\n                    return tuple(convert(v, t) for v, t in zip(value, args))\n            elif origin is dict:\n                key_type, val_type = args\n                return {\n                    convert(k, key_type): convert(v, val_type) for k, v in value.items()\n                }\n            elif origin is set:\n                return {convert(v, args[0]) for v in value}\n            else:\n                return value",
                  "children": [
                    {
                      "value": "if not args:\n            return value\n        else:\n            # Need to convert elements\n            if origin is list:\n                return [convert(v, args[0]) for v in value]\n            elif origin is tuple:\n                # Tuples can have multiple types\n                if len(args) == 1:\n                    return tuple(convert(v, args[0]) for v in value)\n                else:\n                    return tuple(convert(v, t) for v, t in zip(value, args))\n            elif origin is dict:\n                key_type, val_type = args\n                return {\n                    convert(k, key_type): convert(v, val_type) for k, v in value.items()\n                }\n            elif origin is set:\n                return {convert(v, args[0]) for v in value}\n            else:\n                return value",
                      "children": [
                        {
                          "value": "not args",
                          "children": [
                            {
                              "value": "args",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "return value",
                          "children": [
                            {
                              "value": "return value",
                              "children": [
                                {
                                  "value": "value",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "else:\n            # Need to convert elements\n            if origin is list:\n                return [convert(v, args[0]) for v in value]\n            elif origin is tuple:\n                # Tuples can have multiple types\n                if len(args) == 1:\n                    return tuple(convert(v, args[0]) for v in value)\n                else:\n                    return tuple(convert(v, t) for v, t in zip(value, args))\n            elif origin is dict:\n                key_type, val_type = args\n                return {\n                    convert(k, key_type): convert(v, val_type) for k, v in value.items()\n                }\n            elif origin is set:\n                return {convert(v, args[0]) for v in value}\n            else:\n                return value",
                          "children": [
                            {
                              "value": "# Need to convert elements",
                              "children": []
                            },
                            {
                              "value": "if origin is list:\n                return [convert(v, args[0]) for v in value]\n            elif origin is tuple:\n                # Tuples can have multiple types\n                if len(args) == 1:\n                    return tuple(convert(v, args[0]) for v in value)\n                else:\n                    return tuple(convert(v, t) for v, t in zip(value, args))\n            elif origin is dict:\n                key_type, val_type = args\n                return {\n                    convert(k, key_type): convert(v, val_type) for k, v in value.items()\n                }\n            elif origin is set:\n                return {convert(v, args[0]) for v in value}\n            else:\n                return value",
                              "children": [
                                {
                                  "value": "if origin is list:\n                return [convert(v, args[0]) for v in value]\n            elif origin is tuple:\n                # Tuples can have multiple types\n                if len(args) == 1:\n                    return tuple(convert(v, args[0]) for v in value)\n                else:\n                    return tuple(convert(v, t) for v, t in zip(value, args))\n            elif origin is dict:\n                key_type, val_type = args\n                return {\n                    convert(k, key_type): convert(v, val_type) for k, v in value.items()\n                }\n            elif origin is set:\n                return {convert(v, args[0]) for v in value}\n            else:\n                return value",
                                  "children": [
                                    {
                                      "value": "origin is list",
                                      "children": [
                                        {
                                          "value": "origin",
                                          "children": []
                                        },
                                        {
                                          "value": "list",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "return [convert(v, args[0]) for v in value]",
                                      "children": [
                                        {
                                          "value": "return [convert(v, args[0]) for v in value]",
                                          "children": [
                                            {
                                              "value": "[convert(v, args[0]) for v in value]",
                                              "children": [
                                                {
                                                  "value": "convert(v, args[0])",
                                                  "children": [
                                                    {
                                                      "value": "convert",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "(v, args[0])",
                                                      "children": [
                                                        {
                                                          "value": "v",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "args[0]",
                                                          "children": [
                                                            {
                                                              "value": "args",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "0",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "for v in value",
                                                  "children": [
                                                    {
                                                      "value": "v",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "value",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "elif origin is tuple:\n                # Tuples can have multiple types\n                if len(args) == 1:\n                    return tuple(convert(v, args[0]) for v in value)\n                else:\n                    return tuple(convert(v, t) for v, t in zip(value, args))",
                                      "children": [
                                        {
                                          "value": "origin is tuple",
                                          "children": [
                                            {
                                              "value": "origin",
                                              "children": []
                                            },
                                            {
                                              "value": "tuple",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "# Tuples can have multiple types",
                                          "children": []
                                        },
                                        {
                                          "value": "if len(args) == 1:\n                    return tuple(convert(v, args[0]) for v in value)\n                else:\n                    return tuple(convert(v, t) for v, t in zip(value, args))",
                                          "children": [
                                            {
                                              "value": "if len(args) == 1:\n                    return tuple(convert(v, args[0]) for v in value)\n                else:\n                    return tuple(convert(v, t) for v, t in zip(value, args))",
                                              "children": [
                                                {
                                                  "value": "len(args) == 1",
                                                  "children": [
                                                    {
                                                      "value": "len(args)",
                                                      "children": [
                                                        {
                                                          "value": "len",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "(args)",
                                                          "children": [
                                                            {
                                                              "value": "args",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "1",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "return tuple(convert(v, args[0]) for v in value)",
                                                  "children": [
                                                    {
                                                      "value": "return tuple(convert(v, args[0]) for v in value)",
                                                      "children": [
                                                        {
                                                          "value": "tuple(convert(v, args[0]) for v in value)",
                                                          "children": [
                                                            {
                                                              "value": "tuple",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "(convert(v, args[0]) for v in value)",
                                                              "children": [
                                                                {
                                                                  "value": "convert(v, args[0])",
                                                                  "children": [
                                                                    {
                                                                      "value": "convert",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "(v, args[0])",
                                                                      "children": [
                                                                        {
                                                                          "value": "v",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "args[0]",
                                                                          "children": [
                                                                            {
                                                                              "value": "args",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "value": "0",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "for v in value",
                                                                  "children": [
                                                                    {
                                                                      "value": "v",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "value",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "else:\n                    return tuple(convert(v, t) for v, t in zip(value, args))",
                                                  "children": [
                                                    {
                                                      "value": "return tuple(convert(v, t) for v, t in zip(value, args))",
                                                      "children": [
                                                        {
                                                          "value": "return tuple(convert(v, t) for v, t in zip(value, args))",
                                                          "children": [
                                                            {
                                                              "value": "tuple(convert(v, t) for v, t in zip(value, args))",
                                                              "children": [
                                                                {
                                                                  "value": "tuple",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "(convert(v, t) for v, t in zip(value, args))",
                                                                  "children": [
                                                                    {
                                                                      "value": "convert(v, t)",
                                                                      "children": [
                                                                        {
                                                                          "value": "convert",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "(v, t)",
                                                                          "children": [
                                                                            {
                                                                              "value": "v",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "value": "t",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "for v, t in zip(value, args)",
                                                                      "children": [
                                                                        {
                                                                          "value": "v, t",
                                                                          "children": [
                                                                            {
                                                                              "value": "v",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "value": "t",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "value": "zip(value, args)",
                                                                          "children": [
                                                                            {
                                                                              "value": "zip",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "value": "(value, args)",
                                                                              "children": [
                                                                                {
                                                                                  "value": "value",
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "value": "args",
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "elif origin is dict:\n                key_type, val_type = args\n                return {\n                    convert(k, key_type): convert(v, val_type) for k, v in value.items()\n                }",
                                      "children": [
                                        {
                                          "value": "origin is dict",
                                          "children": [
                                            {
                                              "value": "origin",
                                              "children": []
                                            },
                                            {
                                              "value": "dict",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "key_type, val_type = args\n                return {\n                    convert(k, key_type): convert(v, val_type) for k, v in value.items()\n                }",
                                          "children": [
                                            {
                                              "value": "key_type, val_type = args",
                                              "children": [
                                                {
                                                  "value": "key_type, val_type = args",
                                                  "children": [
                                                    {
                                                      "value": "key_type, val_type",
                                                      "children": [
                                                        {
                                                          "value": "key_type",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "val_type",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "args",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "return {\n                    convert(k, key_type): convert(v, val_type) for k, v in value.items()\n                }",
                                              "children": [
                                                {
                                                  "value": "{\n                    convert(k, key_type): convert(v, val_type) for k, v in value.items()\n                }",
                                                  "children": [
                                                    {
                                                      "value": "convert(k, key_type): convert(v, val_type)",
                                                      "children": [
                                                        {
                                                          "value": "convert(k, key_type)",
                                                          "children": [
                                                            {
                                                              "value": "convert",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "(k, key_type)",
                                                              "children": [
                                                                {
                                                                  "value": "k",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "key_type",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "convert(v, val_type)",
                                                          "children": [
                                                            {
                                                              "value": "convert",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "(v, val_type)",
                                                              "children": [
                                                                {
                                                                  "value": "v",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "val_type",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "for k, v in value.items()",
                                                      "children": [
                                                        {
                                                          "value": "k, v",
                                                          "children": [
                                                            {
                                                              "value": "k",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "v",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "value.items()",
                                                          "children": [
                                                            {
                                                              "value": "value.items",
                                                              "children": [
                                                                {
                                                                  "value": "value",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "items",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "()",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "elif origin is set:\n                return {convert(v, args[0]) for v in value}",
                                      "children": [
                                        {
                                          "value": "origin is set",
                                          "children": [
                                            {
                                              "value": "origin",
                                              "children": []
                                            },
                                            {
                                              "value": "set",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "return {convert(v, args[0]) for v in value}",
                                          "children": [
                                            {
                                              "value": "return {convert(v, args[0]) for v in value}",
                                              "children": [
                                                {
                                                  "value": "{convert(v, args[0]) for v in value}",
                                                  "children": [
                                                    {
                                                      "value": "convert(v, args[0])",
                                                      "children": [
                                                        {
                                                          "value": "convert",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "(v, args[0])",
                                                          "children": [
                                                            {
                                                              "value": "v",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "args[0]",
                                                              "children": [
                                                                {
                                                                  "value": "args",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "0",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "for v in value",
                                                      "children": [
                                                        {
                                                          "value": "v",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "value",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "else:\n                return value",
                                      "children": [
                                        {
                                          "value": "return value",
                                          "children": [
                                            {
                                              "value": "return value",
                                              "children": [
                                                {
                                                  "value": "value",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "elif raise_on_mismatch:\n        raise TypeError(f\"Value {value} is not of expected type {target_type}\")",
                  "children": [
                    {
                      "value": "raise_on_mismatch",
                      "children": []
                    },
                    {
                      "value": "raise TypeError(f\"Value {value} is not of expected type {target_type}\")",
                      "children": [
                        {
                          "value": "raise TypeError(f\"Value {value} is not of expected type {target_type}\")",
                          "children": [
                            {
                              "value": "TypeError(f\"Value {value} is not of expected type {target_type}\")",
                              "children": [
                                {
                                  "value": "TypeError",
                                  "children": []
                                },
                                {
                                  "value": "(f\"Value {value} is not of expected type {target_type}\")",
                                  "children": [
                                    {
                                      "value": "f\"Value {value} is not of expected type {target_type}\"",
                                      "children": [
                                        {
                                          "value": "f\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Value",
                                          "children": []
                                        },
                                        {
                                          "value": "{value}",
                                          "children": [
                                            {
                                              "value": "value",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "is not of expected type",
                                          "children": []
                                        },
                                        {
                                          "value": "{target_type}",
                                          "children": [
                                            {
                                              "value": "target_type",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "else:\n        # Need to convert value to the origin type\n        if origin is list:\n            value = __convert_list(value)\n            if args:\n                return [convert(v, args[0]) for v in value]\n            else:\n                return value\n        elif origin is dict:\n            value = __convert_dict(value)\n            if args:\n                key_type, val_type = args\n                return {\n                    convert(k, key_type): convert(v, val_type) for k, v in value.items()\n                }\n            else:\n                return value\n        elif origin is tuple:\n            value = __convert_tuple(value)\n            if args:\n                if len(args) == 1:\n                    return tuple(convert(v, args[0]) for v in value)\n                else:\n                    return tuple(convert(v, t) for v, t in zip(value, args))\n            else:\n                return value\n        elif origin is str:\n            return __convert_str(value)\n        elif origin is set:\n            value = __convert_set(value)\n            if args:\n                return {convert(v, args[0]) for v in value}\n            else:\n                return value\n        elif origin is int:\n            return __convert_num(value, int)\n        elif origin is float:\n            return __convert_num(value, float)\n        elif origin is bool:\n            return __convert_bool(value)\n        else:\n            return value",
                  "children": [
                    {
                      "value": "# Need to convert value to the origin type",
                      "children": []
                    },
                    {
                      "value": "if origin is list:\n            value = __convert_list(value)\n            if args:\n                return [convert(v, args[0]) for v in value]\n            else:\n                return value\n        elif origin is dict:\n            value = __convert_dict(value)\n            if args:\n                key_type, val_type = args\n                return {\n                    convert(k, key_type): convert(v, val_type) for k, v in value.items()\n                }\n            else:\n                return value\n        elif origin is tuple:\n            value = __convert_tuple(value)\n            if args:\n                if len(args) == 1:\n                    return tuple(convert(v, args[0]) for v in value)\n                else:\n                    return tuple(convert(v, t) for v, t in zip(value, args))\n            else:\n                return value\n        elif origin is str:\n            return __convert_str(value)\n        elif origin is set:\n            value = __convert_set(value)\n            if args:\n                return {convert(v, args[0]) for v in value}\n            else:\n                return value\n        elif origin is int:\n            return __convert_num(value, int)\n        elif origin is float:\n            return __convert_num(value, float)\n        elif origin is bool:\n            return __convert_bool(value)\n        else:\n            return value",
                      "children": [
                        {
                          "value": "if origin is list:\n            value = __convert_list(value)\n            if args:\n                return [convert(v, args[0]) for v in value]\n            else:\n                return value\n        elif origin is dict:\n            value = __convert_dict(value)\n            if args:\n                key_type, val_type = args\n                return {\n                    convert(k, key_type): convert(v, val_type) for k, v in value.items()\n                }\n            else:\n                return value\n        elif origin is tuple:\n            value = __convert_tuple(value)\n            if args:\n                if len(args) == 1:\n                    return tuple(convert(v, args[0]) for v in value)\n                else:\n                    return tuple(convert(v, t) for v, t in zip(value, args))\n            else:\n                return value\n        elif origin is str:\n            return __convert_str(value)\n        elif origin is set:\n            value = __convert_set(value)\n            if args:\n                return {convert(v, args[0]) for v in value}\n            else:\n                return value\n        elif origin is int:\n            return __convert_num(value, int)\n        elif origin is float:\n            return __convert_num(value, float)\n        elif origin is bool:\n            return __convert_bool(value)\n        else:\n            return value",
                          "children": [
                            {
                              "value": "origin is list",
                              "children": [
                                {
                                  "value": "origin",
                                  "children": []
                                },
                                {
                                  "value": "list",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "value = __convert_list(value)\n            if args:\n                return [convert(v, args[0]) for v in value]\n            else:\n                return value",
                              "children": [
                                {
                                  "value": "value = __convert_list(value)",
                                  "children": [
                                    {
                                      "value": "value = __convert_list(value)",
                                      "children": [
                                        {
                                          "value": "value",
                                          "children": []
                                        },
                                        {
                                          "value": "__convert_list(value)",
                                          "children": [
                                            {
                                              "value": "__convert_list",
                                              "children": []
                                            },
                                            {
                                              "value": "(value)",
                                              "children": [
                                                {
                                                  "value": "value",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "if args:\n                return [convert(v, args[0]) for v in value]\n            else:\n                return value",
                                  "children": [
                                    {
                                      "value": "args",
                                      "children": []
                                    },
                                    {
                                      "value": "return [convert(v, args[0]) for v in value]",
                                      "children": [
                                        {
                                          "value": "return [convert(v, args[0]) for v in value]",
                                          "children": [
                                            {
                                              "value": "[convert(v, args[0]) for v in value]",
                                              "children": [
                                                {
                                                  "value": "convert(v, args[0])",
                                                  "children": [
                                                    {
                                                      "value": "convert",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "(v, args[0])",
                                                      "children": [
                                                        {
                                                          "value": "v",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "args[0]",
                                                          "children": [
                                                            {
                                                              "value": "args",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "0",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "for v in value",
                                                  "children": [
                                                    {
                                                      "value": "v",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "value",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "else:\n                return value",
                                      "children": [
                                        {
                                          "value": "return value",
                                          "children": [
                                            {
                                              "value": "return value",
                                              "children": [
                                                {
                                                  "value": "value",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "elif origin is dict:\n            value = __convert_dict(value)\n            if args:\n                key_type, val_type = args\n                return {\n                    convert(k, key_type): convert(v, val_type) for k, v in value.items()\n                }\n            else:\n                return value",
                              "children": [
                                {
                                  "value": "origin is dict",
                                  "children": [
                                    {
                                      "value": "origin",
                                      "children": []
                                    },
                                    {
                                      "value": "dict",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "value = __convert_dict(value)\n            if args:\n                key_type, val_type = args\n                return {\n                    convert(k, key_type): convert(v, val_type) for k, v in value.items()\n                }\n            else:\n                return value",
                                  "children": [
                                    {
                                      "value": "value = __convert_dict(value)",
                                      "children": [
                                        {
                                          "value": "value = __convert_dict(value)",
                                          "children": [
                                            {
                                              "value": "value",
                                              "children": []
                                            },
                                            {
                                              "value": "__convert_dict(value)",
                                              "children": [
                                                {
                                                  "value": "__convert_dict",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(value)",
                                                  "children": [
                                                    {
                                                      "value": "value",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "if args:\n                key_type, val_type = args\n                return {\n                    convert(k, key_type): convert(v, val_type) for k, v in value.items()\n                }\n            else:\n                return value",
                                      "children": [
                                        {
                                          "value": "args",
                                          "children": []
                                        },
                                        {
                                          "value": "key_type, val_type = args\n                return {\n                    convert(k, key_type): convert(v, val_type) for k, v in value.items()\n                }",
                                          "children": [
                                            {
                                              "value": "key_type, val_type = args",
                                              "children": [
                                                {
                                                  "value": "key_type, val_type = args",
                                                  "children": [
                                                    {
                                                      "value": "key_type, val_type",
                                                      "children": [
                                                        {
                                                          "value": "key_type",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "val_type",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "args",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "return {\n                    convert(k, key_type): convert(v, val_type) for k, v in value.items()\n                }",
                                              "children": [
                                                {
                                                  "value": "{\n                    convert(k, key_type): convert(v, val_type) for k, v in value.items()\n                }",
                                                  "children": [
                                                    {
                                                      "value": "convert(k, key_type): convert(v, val_type)",
                                                      "children": [
                                                        {
                                                          "value": "convert(k, key_type)",
                                                          "children": [
                                                            {
                                                              "value": "convert",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "(k, key_type)",
                                                              "children": [
                                                                {
                                                                  "value": "k",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "key_type",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "convert(v, val_type)",
                                                          "children": [
                                                            {
                                                              "value": "convert",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "(v, val_type)",
                                                              "children": [
                                                                {
                                                                  "value": "v",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "val_type",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "for k, v in value.items()",
                                                      "children": [
                                                        {
                                                          "value": "k, v",
                                                          "children": [
                                                            {
                                                              "value": "k",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "v",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "value.items()",
                                                          "children": [
                                                            {
                                                              "value": "value.items",
                                                              "children": [
                                                                {
                                                                  "value": "value",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "items",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "()",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "else:\n                return value",
                                          "children": [
                                            {
                                              "value": "return value",
                                              "children": [
                                                {
                                                  "value": "return value",
                                                  "children": [
                                                    {
                                                      "value": "value",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "elif origin is tuple:\n            value = __convert_tuple(value)\n            if args:\n                if len(args) == 1:\n                    return tuple(convert(v, args[0]) for v in value)\n                else:\n                    return tuple(convert(v, t) for v, t in zip(value, args))\n            else:\n                return value",
                              "children": [
                                {
                                  "value": "origin is tuple",
                                  "children": [
                                    {
                                      "value": "origin",
                                      "children": []
                                    },
                                    {
                                      "value": "tuple",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "value = __convert_tuple(value)\n            if args:\n                if len(args) == 1:\n                    return tuple(convert(v, args[0]) for v in value)\n                else:\n                    return tuple(convert(v, t) for v, t in zip(value, args))\n            else:\n                return value",
                                  "children": [
                                    {
                                      "value": "value = __convert_tuple(value)",
                                      "children": [
                                        {
                                          "value": "value = __convert_tuple(value)",
                                          "children": [
                                            {
                                              "value": "value",
                                              "children": []
                                            },
                                            {
                                              "value": "__convert_tuple(value)",
                                              "children": [
                                                {
                                                  "value": "__convert_tuple",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(value)",
                                                  "children": [
                                                    {
                                                      "value": "value",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "if args:\n                if len(args) == 1:\n                    return tuple(convert(v, args[0]) for v in value)\n                else:\n                    return tuple(convert(v, t) for v, t in zip(value, args))\n            else:\n                return value",
                                      "children": [
                                        {
                                          "value": "args",
                                          "children": []
                                        },
                                        {
                                          "value": "if len(args) == 1:\n                    return tuple(convert(v, args[0]) for v in value)\n                else:\n                    return tuple(convert(v, t) for v, t in zip(value, args))",
                                          "children": [
                                            {
                                              "value": "if len(args) == 1:\n                    return tuple(convert(v, args[0]) for v in value)\n                else:\n                    return tuple(convert(v, t) for v, t in zip(value, args))",
                                              "children": [
                                                {
                                                  "value": "len(args) == 1",
                                                  "children": [
                                                    {
                                                      "value": "len(args)",
                                                      "children": [
                                                        {
                                                          "value": "len",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "(args)",
                                                          "children": [
                                                            {
                                                              "value": "args",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "1",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "return tuple(convert(v, args[0]) for v in value)",
                                                  "children": [
                                                    {
                                                      "value": "return tuple(convert(v, args[0]) for v in value)",
                                                      "children": [
                                                        {
                                                          "value": "tuple(convert(v, args[0]) for v in value)",
                                                          "children": [
                                                            {
                                                              "value": "tuple",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "(convert(v, args[0]) for v in value)",
                                                              "children": [
                                                                {
                                                                  "value": "convert(v, args[0])",
                                                                  "children": [
                                                                    {
                                                                      "value": "convert",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "(v, args[0])",
                                                                      "children": [
                                                                        {
                                                                          "value": "v",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "args[0]",
                                                                          "children": [
                                                                            {
                                                                              "value": "args",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "value": "0",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "for v in value",
                                                                  "children": [
                                                                    {
                                                                      "value": "v",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "value",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "else:\n                    return tuple(convert(v, t) for v, t in zip(value, args))",
                                                  "children": [
                                                    {
                                                      "value": "return tuple(convert(v, t) for v, t in zip(value, args))",
                                                      "children": [
                                                        {
                                                          "value": "return tuple(convert(v, t) for v, t in zip(value, args))",
                                                          "children": [
                                                            {
                                                              "value": "tuple(convert(v, t) for v, t in zip(value, args))",
                                                              "children": [
                                                                {
                                                                  "value": "tuple",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "(convert(v, t) for v, t in zip(value, args))",
                                                                  "children": [
                                                                    {
                                                                      "value": "convert(v, t)",
                                                                      "children": [
                                                                        {
                                                                          "value": "convert",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "(v, t)",
                                                                          "children": [
                                                                            {
                                                                              "value": "v",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "value": "t",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "for v, t in zip(value, args)",
                                                                      "children": [
                                                                        {
                                                                          "value": "v, t",
                                                                          "children": [
                                                                            {
                                                                              "value": "v",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "value": "t",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "value": "zip(value, args)",
                                                                          "children": [
                                                                            {
                                                                              "value": "zip",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "value": "(value, args)",
                                                                              "children": [
                                                                                {
                                                                                  "value": "value",
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "value": "args",
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "else:\n                return value",
                                          "children": [
                                            {
                                              "value": "return value",
                                              "children": [
                                                {
                                                  "value": "return value",
                                                  "children": [
                                                    {
                                                      "value": "value",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "elif origin is str:\n            return __convert_str(value)",
                              "children": [
                                {
                                  "value": "origin is str",
                                  "children": [
                                    {
                                      "value": "origin",
                                      "children": []
                                    },
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "return __convert_str(value)",
                                  "children": [
                                    {
                                      "value": "return __convert_str(value)",
                                      "children": [
                                        {
                                          "value": "__convert_str(value)",
                                          "children": [
                                            {
                                              "value": "__convert_str",
                                              "children": []
                                            },
                                            {
                                              "value": "(value)",
                                              "children": [
                                                {
                                                  "value": "value",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "elif origin is set:\n            value = __convert_set(value)\n            if args:\n                return {convert(v, args[0]) for v in value}\n            else:\n                return value",
                              "children": [
                                {
                                  "value": "origin is set",
                                  "children": [
                                    {
                                      "value": "origin",
                                      "children": []
                                    },
                                    {
                                      "value": "set",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "value = __convert_set(value)\n            if args:\n                return {convert(v, args[0]) for v in value}\n            else:\n                return value",
                                  "children": [
                                    {
                                      "value": "value = __convert_set(value)",
                                      "children": [
                                        {
                                          "value": "value = __convert_set(value)",
                                          "children": [
                                            {
                                              "value": "value",
                                              "children": []
                                            },
                                            {
                                              "value": "__convert_set(value)",
                                              "children": [
                                                {
                                                  "value": "__convert_set",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(value)",
                                                  "children": [
                                                    {
                                                      "value": "value",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "if args:\n                return {convert(v, args[0]) for v in value}\n            else:\n                return value",
                                      "children": [
                                        {
                                          "value": "args",
                                          "children": []
                                        },
                                        {
                                          "value": "return {convert(v, args[0]) for v in value}",
                                          "children": [
                                            {
                                              "value": "return {convert(v, args[0]) for v in value}",
                                              "children": [
                                                {
                                                  "value": "{convert(v, args[0]) for v in value}",
                                                  "children": [
                                                    {
                                                      "value": "convert(v, args[0])",
                                                      "children": [
                                                        {
                                                          "value": "convert",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "(v, args[0])",
                                                          "children": [
                                                            {
                                                              "value": "v",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "args[0]",
                                                              "children": [
                                                                {
                                                                  "value": "args",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "0",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "for v in value",
                                                      "children": [
                                                        {
                                                          "value": "v",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "value",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "else:\n                return value",
                                          "children": [
                                            {
                                              "value": "return value",
                                              "children": [
                                                {
                                                  "value": "return value",
                                                  "children": [
                                                    {
                                                      "value": "value",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "elif origin is int:\n            return __convert_num(value, int)",
                              "children": [
                                {
                                  "value": "origin is int",
                                  "children": [
                                    {
                                      "value": "origin",
                                      "children": []
                                    },
                                    {
                                      "value": "int",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "return __convert_num(value, int)",
                                  "children": [
                                    {
                                      "value": "return __convert_num(value, int)",
                                      "children": [
                                        {
                                          "value": "__convert_num(value, int)",
                                          "children": [
                                            {
                                              "value": "__convert_num",
                                              "children": []
                                            },
                                            {
                                              "value": "(value, int)",
                                              "children": [
                                                {
                                                  "value": "value",
                                                  "children": []
                                                },
                                                {
                                                  "value": "int",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "elif origin is float:\n            return __convert_num(value, float)",
                              "children": [
                                {
                                  "value": "origin is float",
                                  "children": [
                                    {
                                      "value": "origin",
                                      "children": []
                                    },
                                    {
                                      "value": "float",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "return __convert_num(value, float)",
                                  "children": [
                                    {
                                      "value": "return __convert_num(value, float)",
                                      "children": [
                                        {
                                          "value": "__convert_num(value, float)",
                                          "children": [
                                            {
                                              "value": "__convert_num",
                                              "children": []
                                            },
                                            {
                                              "value": "(value, float)",
                                              "children": [
                                                {
                                                  "value": "value",
                                                  "children": []
                                                },
                                                {
                                                  "value": "float",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "elif origin is bool:\n            return __convert_bool(value)",
                              "children": [
                                {
                                  "value": "origin is bool",
                                  "children": [
                                    {
                                      "value": "origin",
                                      "children": []
                                    },
                                    {
                                      "value": "bool",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "return __convert_bool(value)",
                                  "children": [
                                    {
                                      "value": "return __convert_bool(value)",
                                      "children": [
                                        {
                                          "value": "__convert_bool(value)",
                                          "children": [
                                            {
                                              "value": "__convert_bool",
                                              "children": []
                                            },
                                            {
                                              "value": "(value)",
                                              "children": [
                                                {
                                                  "value": "value",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "else:\n            return value",
                              "children": [
                                {
                                  "value": "return value",
                                  "children": [
                                    {
                                      "value": "return value",
                                      "children": [
                                        {
                                          "value": "value",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "T = TypeVar(\"T\")",
      "children": [
        {
          "value": "T = TypeVar(\"T\")",
          "children": [
            {
              "value": "T",
              "children": []
            },
            {
              "value": "TypeVar(\"T\")",
              "children": [
                {
                  "value": "TypeVar",
                  "children": []
                },
                {
                  "value": "(\"T\")",
                  "children": [
                    {
                      "value": "\"T\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "T",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def type_match(value: Any, target_type: Type[T]) -> T:\n    return cast(T, _try_convert(value, target_type, raise_on_mismatch=True))",
      "children": [
        {
          "value": "type_match",
          "children": []
        },
        {
          "value": "(value: Any, target_type: Type[T])",
          "children": [
            {
              "value": "value: Any",
              "children": [
                {
                  "value": "value",
                  "children": []
                },
                {
                  "value": "Any",
                  "children": [
                    {
                      "value": "Any",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "target_type: Type[T]",
              "children": [
                {
                  "value": "target_type",
                  "children": []
                },
                {
                  "value": "Type[T]",
                  "children": [
                    {
                      "value": "Type[T]",
                      "children": [
                        {
                          "value": "Type",
                          "children": []
                        },
                        {
                          "value": "[T]",
                          "children": [
                            {
                              "value": "T",
                              "children": [
                                {
                                  "value": "T",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "T",
          "children": [
            {
              "value": "T",
              "children": []
            }
          ]
        },
        {
          "value": "return cast(T, _try_convert(value, target_type, raise_on_mismatch=True))",
          "children": [
            {
              "value": "return cast(T, _try_convert(value, target_type, raise_on_mismatch=True))",
              "children": [
                {
                  "value": "cast(T, _try_convert(value, target_type, raise_on_mismatch=True))",
                  "children": [
                    {
                      "value": "cast",
                      "children": []
                    },
                    {
                      "value": "(T, _try_convert(value, target_type, raise_on_mismatch=True))",
                      "children": [
                        {
                          "value": "T",
                          "children": []
                        },
                        {
                          "value": "_try_convert(value, target_type, raise_on_mismatch=True)",
                          "children": [
                            {
                              "value": "_try_convert",
                              "children": []
                            },
                            {
                              "value": "(value, target_type, raise_on_mismatch=True)",
                              "children": [
                                {
                                  "value": "value",
                                  "children": []
                                },
                                {
                                  "value": "target_type",
                                  "children": []
                                },
                                {
                                  "value": "raise_on_mismatch=True",
                                  "children": [
                                    {
                                      "value": "raise_on_mismatch",
                                      "children": []
                                    },
                                    {
                                      "value": "True",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def convert(value: Any, target_type: Type[T]) -> T:\n    try:\n        return cast(T, _try_convert(value, target_type, raise_on_mismatch=False))\n    except Exception as e:\n        raise ConversionError(f\"Failed to convert {value} to {target_type}\") from e",
      "children": [
        {
          "value": "convert",
          "children": []
        },
        {
          "value": "(value: Any, target_type: Type[T])",
          "children": [
            {
              "value": "value: Any",
              "children": [
                {
                  "value": "value",
                  "children": []
                },
                {
                  "value": "Any",
                  "children": [
                    {
                      "value": "Any",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "target_type: Type[T]",
              "children": [
                {
                  "value": "target_type",
                  "children": []
                },
                {
                  "value": "Type[T]",
                  "children": [
                    {
                      "value": "Type[T]",
                      "children": [
                        {
                          "value": "Type",
                          "children": []
                        },
                        {
                          "value": "[T]",
                          "children": [
                            {
                              "value": "T",
                              "children": [
                                {
                                  "value": "T",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "T",
          "children": [
            {
              "value": "T",
              "children": []
            }
          ]
        },
        {
          "value": "try:\n        return cast(T, _try_convert(value, target_type, raise_on_mismatch=False))\n    except Exception as e:\n        raise ConversionError(f\"Failed to convert {value} to {target_type}\") from e",
          "children": [
            {
              "value": "try:\n        return cast(T, _try_convert(value, target_type, raise_on_mismatch=False))\n    except Exception as e:\n        raise ConversionError(f\"Failed to convert {value} to {target_type}\") from e",
              "children": [
                {
                  "value": "return cast(T, _try_convert(value, target_type, raise_on_mismatch=False))",
                  "children": [
                    {
                      "value": "return cast(T, _try_convert(value, target_type, raise_on_mismatch=False))",
                      "children": [
                        {
                          "value": "cast(T, _try_convert(value, target_type, raise_on_mismatch=False))",
                          "children": [
                            {
                              "value": "cast",
                              "children": []
                            },
                            {
                              "value": "(T, _try_convert(value, target_type, raise_on_mismatch=False))",
                              "children": [
                                {
                                  "value": "T",
                                  "children": []
                                },
                                {
                                  "value": "_try_convert(value, target_type, raise_on_mismatch=False)",
                                  "children": [
                                    {
                                      "value": "_try_convert",
                                      "children": []
                                    },
                                    {
                                      "value": "(value, target_type, raise_on_mismatch=False)",
                                      "children": [
                                        {
                                          "value": "value",
                                          "children": []
                                        },
                                        {
                                          "value": "target_type",
                                          "children": []
                                        },
                                        {
                                          "value": "raise_on_mismatch=False",
                                          "children": [
                                            {
                                              "value": "raise_on_mismatch",
                                              "children": []
                                            },
                                            {
                                              "value": "False",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "except Exception as e:\n        raise ConversionError(f\"Failed to convert {value} to {target_type}\") from e",
                  "children": [
                    {
                      "value": "Exception as e",
                      "children": [
                        {
                          "value": "Exception",
                          "children": []
                        },
                        {
                          "value": "e",
                          "children": [
                            {
                              "value": "e",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "raise ConversionError(f\"Failed to convert {value} to {target_type}\") from e",
                      "children": [
                        {
                          "value": "raise ConversionError(f\"Failed to convert {value} to {target_type}\") from e",
                          "children": [
                            {
                              "value": "ConversionError(f\"Failed to convert {value} to {target_type}\")",
                              "children": [
                                {
                                  "value": "ConversionError",
                                  "children": []
                                },
                                {
                                  "value": "(f\"Failed to convert {value} to {target_type}\")",
                                  "children": [
                                    {
                                      "value": "f\"Failed to convert {value} to {target_type}\"",
                                      "children": [
                                        {
                                          "value": "f\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Failed to convert",
                                          "children": []
                                        },
                                        {
                                          "value": "{value}",
                                          "children": [
                                            {
                                              "value": "value",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "to",
                                          "children": []
                                        },
                                        {
                                          "value": "{target_type}",
                                          "children": [
                                            {
                                              "value": "target_type",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "e",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}