{
  "value": "import logging\nimport os\nimport uuid\n\nimport fastapi\nfrom google.cloud import storage\n\nimport backend.server.v2.store.exceptions\nfrom backend.util.settings import Settings\n\nlogger = logging.getLogger(__name__)\n\nALLOWED_IMAGE_TYPES = {\"image/jpeg\", \"image/png\", \"image/gif\", \"image/webp\"}\nALLOWED_VIDEO_TYPES = {\"video/mp4\", \"video/webm\"}\nMAX_FILE_SIZE = 50 * 1024 * 1024  # 50MB\n\n\nasync def check_media_exists(user_id: str, filename: str) -> str | None:\n    \"\"\"\n    Check if a media file exists in storage for the given user.\n    Tries both images and videos directories.\n\n    Args:\n        user_id (str): ID of the user who uploaded the file\n        filename (str): Name of the file to check\n\n    Returns:\n        str | None: URL of the blob if it exists, None otherwise\n    \"\"\"\n    try:\n        settings = Settings()\n        storage_client = storage.Client()\n        bucket = storage_client.bucket(settings.config.media_gcs_bucket_name)\n\n        # Check images\n        image_path = f\"users/{user_id}/images/{filename}\"\n        image_blob = bucket.blob(image_path)\n        if image_blob.exists():\n            return image_blob.public_url\n\n        # Check videos\n        video_path = f\"users/{user_id}/videos/{filename}\"\n\n        video_blob = bucket.blob(video_path)\n        if video_blob.exists():\n            return video_blob.public_url\n\n        return None\n    except Exception as e:\n        logger.error(f\"Error checking if media file exists: {str(e)}\")\n        return None\n\n\nasync def upload_media(\n    user_id: str, file: fastapi.UploadFile, use_file_name: bool = False\n) -> str:\n\n    # Get file content for deeper validation\n    try:\n        content = await file.read(1024)  # Read first 1KB for validation\n        await file.seek(0)  # Reset file pointer\n    except Exception as e:\n        logger.error(f\"Error reading file content: {str(e)}\")\n        raise backend.server.v2.store.exceptions.FileReadError(\n            \"Failed to read file content\"\n        ) from e\n\n    # Validate file signature/magic bytes\n    if file.content_type in ALLOWED_IMAGE_TYPES:\n        # Check image file signatures\n        if content.startswith(b\"\\xFF\\xD8\\xFF\"):  # JPEG\n            if file.content_type != \"image/jpeg\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"\\x89PNG\\r\\n\\x1a\\n\"):  # PNG\n            if file.content_type != \"image/png\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"GIF87a\") or content.startswith(b\"GIF89a\"):  # GIF\n            if file.content_type != \"image/gif\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"RIFF\") and content[8:12] == b\"WEBP\":  # WebP\n            if file.content_type != \"image/webp\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        else:\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                \"Invalid image file signature\"\n            )\n\n    elif file.content_type in ALLOWED_VIDEO_TYPES:\n        # Check video file signatures\n        if content.startswith(b\"\\x00\\x00\\x00\") and (content[4:8] == b\"ftyp\"):  # MP4\n            if file.content_type != \"video/mp4\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"\\x1a\\x45\\xdf\\xa3\"):  # WebM\n            if file.content_type != \"video/webm\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        else:\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                \"Invalid video file signature\"\n            )\n\n    settings = Settings()\n\n    # Check required settings first before doing any file processing\n    if not settings.config.media_gcs_bucket_name:\n        logger.error(\"Missing GCS bucket name setting\")\n        raise backend.server.v2.store.exceptions.StorageConfigError(\n            \"Missing storage bucket configuration\"\n        )\n\n    try:\n        # Validate file type\n        content_type = file.content_type\n        if content_type is None:\n            content_type = \"image/jpeg\"\n\n        if (\n            content_type not in ALLOWED_IMAGE_TYPES\n            and content_type not in ALLOWED_VIDEO_TYPES\n        ):\n            logger.warning(f\"Invalid file type attempted: {content_type}\")\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                f\"File type not supported. Must be jpeg, png, gif, webp, mp4 or webm. Content type: {content_type}\"\n            )\n\n        # Validate file size\n        file_size = 0\n        chunk_size = 8192  # 8KB chunks\n\n        try:\n            while chunk := await file.read(chunk_size):\n                file_size += len(chunk)\n                if file_size > MAX_FILE_SIZE:\n                    logger.warning(f\"File size too large: {file_size} bytes\")\n                    raise backend.server.v2.store.exceptions.FileSizeTooLargeError(\n                        \"File too large. Maximum size is 50MB\"\n                    )\n        except backend.server.v2.store.exceptions.FileSizeTooLargeError:\n            raise\n        except Exception as e:\n            logger.error(f\"Error reading file chunks: {str(e)}\")\n            raise backend.server.v2.store.exceptions.FileReadError(\n                \"Failed to read uploaded file\"\n            ) from e\n\n        # Reset file pointer\n        await file.seek(0)\n\n        # Generate unique filename\n        filename = file.filename or \"\"\n        file_ext = os.path.splitext(filename)[1].lower()\n        if use_file_name:\n            unique_filename = filename\n        else:\n            unique_filename = f\"{uuid.uuid4()}{file_ext}\"\n\n        # Construct storage path\n        media_type = \"images\" if content_type in ALLOWED_IMAGE_TYPES else \"videos\"\n        storage_path = f\"users/{user_id}/{media_type}/{unique_filename}\"\n\n        try:\n            storage_client = storage.Client()\n            bucket = storage_client.bucket(settings.config.media_gcs_bucket_name)\n            blob = bucket.blob(storage_path)\n            blob.content_type = content_type\n\n            file_bytes = await file.read()\n            blob.upload_from_string(file_bytes, content_type=content_type)\n\n            public_url = blob.public_url\n\n            logger.info(f\"Successfully uploaded file to: {storage_path}\")\n            return public_url\n\n        except Exception as e:\n            logger.error(f\"GCS storage error: {str(e)}\")\n            raise backend.server.v2.store.exceptions.StorageUploadError(\n                \"Failed to upload file to storage\"\n            ) from e\n\n    except backend.server.v2.store.exceptions.MediaUploadError:\n        raise\n    except Exception as e:\n        logger.exception(\"Unexpected error in upload_media\")\n        raise backend.server.v2.store.exceptions.MediaUploadError(\n            \"Unexpected error during media upload\"\n        ) from e",
  "children": [
    {
      "value": "import logging",
      "children": [
        {
          "value": "logging",
          "children": [
            {
              "value": "logging",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import os",
      "children": [
        {
          "value": "os",
          "children": [
            {
              "value": "os",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import uuid",
      "children": [
        {
          "value": "uuid",
          "children": [
            {
              "value": "uuid",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import fastapi",
      "children": [
        {
          "value": "fastapi",
          "children": [
            {
              "value": "fastapi",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from google.cloud import storage",
      "children": [
        {
          "value": "google.cloud",
          "children": [
            {
              "value": "google",
              "children": []
            },
            {
              "value": "cloud",
              "children": []
            }
          ]
        },
        {
          "value": "storage",
          "children": [
            {
              "value": "storage",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import backend.server.v2.store.exceptions",
      "children": [
        {
          "value": "backend.server.v2.store.exceptions",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "server",
              "children": []
            },
            {
              "value": "v2",
              "children": []
            },
            {
              "value": "store",
              "children": []
            },
            {
              "value": "exceptions",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.util.settings import Settings",
      "children": [
        {
          "value": "backend.util.settings",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "util",
              "children": []
            },
            {
              "value": "settings",
              "children": []
            }
          ]
        },
        {
          "value": "Settings",
          "children": [
            {
              "value": "Settings",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "logger = logging.getLogger(__name__)",
      "children": [
        {
          "value": "logger = logging.getLogger(__name__)",
          "children": [
            {
              "value": "logger",
              "children": []
            },
            {
              "value": "logging.getLogger(__name__)",
              "children": [
                {
                  "value": "logging.getLogger",
                  "children": [
                    {
                      "value": "logging",
                      "children": []
                    },
                    {
                      "value": "getLogger",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(__name__)",
                  "children": [
                    {
                      "value": "__name__",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "ALLOWED_IMAGE_TYPES = {\"image/jpeg\", \"image/png\", \"image/gif\", \"image/webp\"}",
      "children": [
        {
          "value": "ALLOWED_IMAGE_TYPES = {\"image/jpeg\", \"image/png\", \"image/gif\", \"image/webp\"}",
          "children": [
            {
              "value": "ALLOWED_IMAGE_TYPES",
              "children": []
            },
            {
              "value": "{\"image/jpeg\", \"image/png\", \"image/gif\", \"image/webp\"}",
              "children": [
                {
                  "value": "\"image/jpeg\"",
                  "children": [
                    {
                      "value": "\"",
                      "children": []
                    },
                    {
                      "value": "image/jpeg",
                      "children": []
                    },
                    {
                      "value": "\"",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "\"image/png\"",
                  "children": [
                    {
                      "value": "\"",
                      "children": []
                    },
                    {
                      "value": "image/png",
                      "children": []
                    },
                    {
                      "value": "\"",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "\"image/gif\"",
                  "children": [
                    {
                      "value": "\"",
                      "children": []
                    },
                    {
                      "value": "image/gif",
                      "children": []
                    },
                    {
                      "value": "\"",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "\"image/webp\"",
                  "children": [
                    {
                      "value": "\"",
                      "children": []
                    },
                    {
                      "value": "image/webp",
                      "children": []
                    },
                    {
                      "value": "\"",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "ALLOWED_VIDEO_TYPES = {\"video/mp4\", \"video/webm\"}",
      "children": [
        {
          "value": "ALLOWED_VIDEO_TYPES = {\"video/mp4\", \"video/webm\"}",
          "children": [
            {
              "value": "ALLOWED_VIDEO_TYPES",
              "children": []
            },
            {
              "value": "{\"video/mp4\", \"video/webm\"}",
              "children": [
                {
                  "value": "\"video/mp4\"",
                  "children": [
                    {
                      "value": "\"",
                      "children": []
                    },
                    {
                      "value": "video/mp4",
                      "children": []
                    },
                    {
                      "value": "\"",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "\"video/webm\"",
                  "children": [
                    {
                      "value": "\"",
                      "children": []
                    },
                    {
                      "value": "video/webm",
                      "children": []
                    },
                    {
                      "value": "\"",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "MAX_FILE_SIZE = 50 * 1024 * 1024",
      "children": [
        {
          "value": "MAX_FILE_SIZE = 50 * 1024 * 1024",
          "children": [
            {
              "value": "MAX_FILE_SIZE",
              "children": []
            },
            {
              "value": "50 * 1024 * 1024",
              "children": [
                {
                  "value": "50 * 1024",
                  "children": [
                    {
                      "value": "50",
                      "children": []
                    },
                    {
                      "value": "1024",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "1024",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "# 50MB",
      "children": []
    },
    {
      "value": "async def check_media_exists(user_id: str, filename: str) -> str | None:\n    \"\"\"\n    Check if a media file exists in storage for the given user.\n    Tries both images and videos directories.\n\n    Args:\n        user_id (str): ID of the user who uploaded the file\n        filename (str): Name of the file to check\n\n    Returns:\n        str | None: URL of the blob if it exists, None otherwise\n    \"\"\"\n    try:\n        settings = Settings()\n        storage_client = storage.Client()\n        bucket = storage_client.bucket(settings.config.media_gcs_bucket_name)\n\n        # Check images\n        image_path = f\"users/{user_id}/images/{filename}\"\n        image_blob = bucket.blob(image_path)\n        if image_blob.exists():\n            return image_blob.public_url\n\n        # Check videos\n        video_path = f\"users/{user_id}/videos/{filename}\"\n\n        video_blob = bucket.blob(video_path)\n        if video_blob.exists():\n            return video_blob.public_url\n\n        return None\n    except Exception as e:\n        logger.error(f\"Error checking if media file exists: {str(e)}\")\n        return None",
      "children": [
        {
          "value": "check_media_exists",
          "children": []
        },
        {
          "value": "(user_id: str, filename: str)",
          "children": [
            {
              "value": "user_id: str",
              "children": [
                {
                  "value": "user_id",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "filename: str",
              "children": [
                {
                  "value": "filename",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "str | None",
          "children": [
            {
              "value": "str | None",
              "children": [
                {
                  "value": "str",
                  "children": []
                },
                {
                  "value": "None",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "\"\"\"\n    Check if a media file exists in storage for the given user.\n    Tries both images and videos directories.\n\n    Args:\n        user_id (str): ID of the user who uploaded the file\n        filename (str): Name of the file to check\n\n    Returns:\n        str | None: URL of the blob if it exists, None otherwise\n    \"\"\"\n    try:\n        settings = Settings()\n        storage_client = storage.Client()\n        bucket = storage_client.bucket(settings.config.media_gcs_bucket_name)\n\n        # Check images\n        image_path = f\"users/{user_id}/images/{filename}\"\n        image_blob = bucket.blob(image_path)\n        if image_blob.exists():\n            return image_blob.public_url\n\n        # Check videos\n        video_path = f\"users/{user_id}/videos/{filename}\"\n\n        video_blob = bucket.blob(video_path)\n        if video_blob.exists():\n            return video_blob.public_url\n\n        return None\n    except Exception as e:\n        logger.error(f\"Error checking if media file exists: {str(e)}\")\n        return None",
          "children": [
            {
              "value": "\"\"\"\n    Check if a media file exists in storage for the given user.\n    Tries both images and videos directories.\n\n    Args:\n        user_id (str): ID of the user who uploaded the file\n        filename (str): Name of the file to check\n\n    Returns:\n        str | None: URL of the blob if it exists, None otherwise\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    Check if a media file exists in storage for the given user.\n    Tries both images and videos directories.\n\n    Args:\n        user_id (str): ID of the user who uploaded the file\n        filename (str): Name of the file to check\n\n    Returns:\n        str | None: URL of the blob if it exists, None otherwise\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Check if a media file exists in storage for the given user.\n    Tries both images and videos directories.\n\n    Args:\n        user_id (str): ID of the user who uploaded the file\n        filename (str): Name of the file to check\n\n    Returns:\n        str | None: URL of the blob if it exists, None otherwise",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "try:\n        settings = Settings()\n        storage_client = storage.Client()\n        bucket = storage_client.bucket(settings.config.media_gcs_bucket_name)\n\n        # Check images\n        image_path = f\"users/{user_id}/images/{filename}\"\n        image_blob = bucket.blob(image_path)\n        if image_blob.exists():\n            return image_blob.public_url\n\n        # Check videos\n        video_path = f\"users/{user_id}/videos/{filename}\"\n\n        video_blob = bucket.blob(video_path)\n        if video_blob.exists():\n            return video_blob.public_url\n\n        return None\n    except Exception as e:\n        logger.error(f\"Error checking if media file exists: {str(e)}\")\n        return None",
              "children": [
                {
                  "value": "settings = Settings()\n        storage_client = storage.Client()\n        bucket = storage_client.bucket(settings.config.media_gcs_bucket_name)\n\n        # Check images\n        image_path = f\"users/{user_id}/images/{filename}\"\n        image_blob = bucket.blob(image_path)\n        if image_blob.exists():\n            return image_blob.public_url\n\n        # Check videos\n        video_path = f\"users/{user_id}/videos/{filename}\"\n\n        video_blob = bucket.blob(video_path)\n        if video_blob.exists():\n            return video_blob.public_url\n\n        return None",
                  "children": [
                    {
                      "value": "settings = Settings()",
                      "children": [
                        {
                          "value": "settings = Settings()",
                          "children": [
                            {
                              "value": "settings",
                              "children": []
                            },
                            {
                              "value": "Settings()",
                              "children": [
                                {
                                  "value": "Settings",
                                  "children": []
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "storage_client = storage.Client()",
                      "children": [
                        {
                          "value": "storage_client = storage.Client()",
                          "children": [
                            {
                              "value": "storage_client",
                              "children": []
                            },
                            {
                              "value": "storage.Client()",
                              "children": [
                                {
                                  "value": "storage.Client",
                                  "children": [
                                    {
                                      "value": "storage",
                                      "children": []
                                    },
                                    {
                                      "value": "Client",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "bucket = storage_client.bucket(settings.config.media_gcs_bucket_name)",
                      "children": [
                        {
                          "value": "bucket = storage_client.bucket(settings.config.media_gcs_bucket_name)",
                          "children": [
                            {
                              "value": "bucket",
                              "children": []
                            },
                            {
                              "value": "storage_client.bucket(settings.config.media_gcs_bucket_name)",
                              "children": [
                                {
                                  "value": "storage_client.bucket",
                                  "children": [
                                    {
                                      "value": "storage_client",
                                      "children": []
                                    },
                                    {
                                      "value": "bucket",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(settings.config.media_gcs_bucket_name)",
                                  "children": [
                                    {
                                      "value": "settings.config.media_gcs_bucket_name",
                                      "children": [
                                        {
                                          "value": "settings.config",
                                          "children": [
                                            {
                                              "value": "settings",
                                              "children": []
                                            },
                                            {
                                              "value": "config",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "media_gcs_bucket_name",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "# Check images",
                      "children": []
                    },
                    {
                      "value": "image_path = f\"users/{user_id}/images/{filename}\"",
                      "children": [
                        {
                          "value": "image_path = f\"users/{user_id}/images/{filename}\"",
                          "children": [
                            {
                              "value": "image_path",
                              "children": []
                            },
                            {
                              "value": "f\"users/{user_id}/images/{filename}\"",
                              "children": [
                                {
                                  "value": "f\"",
                                  "children": []
                                },
                                {
                                  "value": "users/",
                                  "children": []
                                },
                                {
                                  "value": "{user_id}",
                                  "children": [
                                    {
                                      "value": "user_id",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "/images/",
                                  "children": []
                                },
                                {
                                  "value": "{filename}",
                                  "children": [
                                    {
                                      "value": "filename",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "image_blob = bucket.blob(image_path)",
                      "children": [
                        {
                          "value": "image_blob = bucket.blob(image_path)",
                          "children": [
                            {
                              "value": "image_blob",
                              "children": []
                            },
                            {
                              "value": "bucket.blob(image_path)",
                              "children": [
                                {
                                  "value": "bucket.blob",
                                  "children": [
                                    {
                                      "value": "bucket",
                                      "children": []
                                    },
                                    {
                                      "value": "blob",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(image_path)",
                                  "children": [
                                    {
                                      "value": "image_path",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if image_blob.exists():\n            return image_blob.public_url",
                      "children": [
                        {
                          "value": "image_blob.exists()",
                          "children": [
                            {
                              "value": "image_blob.exists",
                              "children": [
                                {
                                  "value": "image_blob",
                                  "children": []
                                },
                                {
                                  "value": "exists",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "()",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "return image_blob.public_url",
                          "children": [
                            {
                              "value": "return image_blob.public_url",
                              "children": [
                                {
                                  "value": "image_blob.public_url",
                                  "children": [
                                    {
                                      "value": "image_blob",
                                      "children": []
                                    },
                                    {
                                      "value": "public_url",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "# Check videos",
                      "children": []
                    },
                    {
                      "value": "video_path = f\"users/{user_id}/videos/{filename}\"",
                      "children": [
                        {
                          "value": "video_path = f\"users/{user_id}/videos/{filename}\"",
                          "children": [
                            {
                              "value": "video_path",
                              "children": []
                            },
                            {
                              "value": "f\"users/{user_id}/videos/{filename}\"",
                              "children": [
                                {
                                  "value": "f\"",
                                  "children": []
                                },
                                {
                                  "value": "users/",
                                  "children": []
                                },
                                {
                                  "value": "{user_id}",
                                  "children": [
                                    {
                                      "value": "user_id",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "/videos/",
                                  "children": []
                                },
                                {
                                  "value": "{filename}",
                                  "children": [
                                    {
                                      "value": "filename",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "video_blob = bucket.blob(video_path)",
                      "children": [
                        {
                          "value": "video_blob = bucket.blob(video_path)",
                          "children": [
                            {
                              "value": "video_blob",
                              "children": []
                            },
                            {
                              "value": "bucket.blob(video_path)",
                              "children": [
                                {
                                  "value": "bucket.blob",
                                  "children": [
                                    {
                                      "value": "bucket",
                                      "children": []
                                    },
                                    {
                                      "value": "blob",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(video_path)",
                                  "children": [
                                    {
                                      "value": "video_path",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if video_blob.exists():\n            return video_blob.public_url",
                      "children": [
                        {
                          "value": "video_blob.exists()",
                          "children": [
                            {
                              "value": "video_blob.exists",
                              "children": [
                                {
                                  "value": "video_blob",
                                  "children": []
                                },
                                {
                                  "value": "exists",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "()",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "return video_blob.public_url",
                          "children": [
                            {
                              "value": "return video_blob.public_url",
                              "children": [
                                {
                                  "value": "video_blob.public_url",
                                  "children": [
                                    {
                                      "value": "video_blob",
                                      "children": []
                                    },
                                    {
                                      "value": "public_url",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return None",
                      "children": [
                        {
                          "value": "None",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "except Exception as e:\n        logger.error(f\"Error checking if media file exists: {str(e)}\")\n        return None",
                  "children": [
                    {
                      "value": "Exception as e",
                      "children": [
                        {
                          "value": "Exception",
                          "children": []
                        },
                        {
                          "value": "e",
                          "children": [
                            {
                              "value": "e",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "logger.error(f\"Error checking if media file exists: {str(e)}\")\n        return None",
                      "children": [
                        {
                          "value": "logger.error(f\"Error checking if media file exists: {str(e)}\")",
                          "children": [
                            {
                              "value": "logger.error(f\"Error checking if media file exists: {str(e)}\")",
                              "children": [
                                {
                                  "value": "logger.error",
                                  "children": [
                                    {
                                      "value": "logger",
                                      "children": []
                                    },
                                    {
                                      "value": "error",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(f\"Error checking if media file exists: {str(e)}\")",
                                  "children": [
                                    {
                                      "value": "f\"Error checking if media file exists: {str(e)}\"",
                                      "children": [
                                        {
                                          "value": "f\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Error checking if media file exists:",
                                          "children": []
                                        },
                                        {
                                          "value": "{str(e)}",
                                          "children": [
                                            {
                                              "value": "str(e)",
                                              "children": [
                                                {
                                                  "value": "str",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(e)",
                                                  "children": [
                                                    {
                                                      "value": "e",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "return None",
                          "children": [
                            {
                              "value": "None",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "async def upload_media(\n    user_id: str, file: fastapi.UploadFile, use_file_name: bool = False\n) -> str:\n\n    # Get file content for deeper validation\n    try:\n        content = await file.read(1024)  # Read first 1KB for validation\n        await file.seek(0)  # Reset file pointer\n    except Exception as e:\n        logger.error(f\"Error reading file content: {str(e)}\")\n        raise backend.server.v2.store.exceptions.FileReadError(\n            \"Failed to read file content\"\n        ) from e\n\n    # Validate file signature/magic bytes\n    if file.content_type in ALLOWED_IMAGE_TYPES:\n        # Check image file signatures\n        if content.startswith(b\"\\xFF\\xD8\\xFF\"):  # JPEG\n            if file.content_type != \"image/jpeg\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"\\x89PNG\\r\\n\\x1a\\n\"):  # PNG\n            if file.content_type != \"image/png\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"GIF87a\") or content.startswith(b\"GIF89a\"):  # GIF\n            if file.content_type != \"image/gif\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"RIFF\") and content[8:12] == b\"WEBP\":  # WebP\n            if file.content_type != \"image/webp\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        else:\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                \"Invalid image file signature\"\n            )\n\n    elif file.content_type in ALLOWED_VIDEO_TYPES:\n        # Check video file signatures\n        if content.startswith(b\"\\x00\\x00\\x00\") and (content[4:8] == b\"ftyp\"):  # MP4\n            if file.content_type != \"video/mp4\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"\\x1a\\x45\\xdf\\xa3\"):  # WebM\n            if file.content_type != \"video/webm\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        else:\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                \"Invalid video file signature\"\n            )\n\n    settings = Settings()\n\n    # Check required settings first before doing any file processing\n    if not settings.config.media_gcs_bucket_name:\n        logger.error(\"Missing GCS bucket name setting\")\n        raise backend.server.v2.store.exceptions.StorageConfigError(\n            \"Missing storage bucket configuration\"\n        )\n\n    try:\n        # Validate file type\n        content_type = file.content_type\n        if content_type is None:\n            content_type = \"image/jpeg\"\n\n        if (\n            content_type not in ALLOWED_IMAGE_TYPES\n            and content_type not in ALLOWED_VIDEO_TYPES\n        ):\n            logger.warning(f\"Invalid file type attempted: {content_type}\")\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                f\"File type not supported. Must be jpeg, png, gif, webp, mp4 or webm. Content type: {content_type}\"\n            )\n\n        # Validate file size\n        file_size = 0\n        chunk_size = 8192  # 8KB chunks\n\n        try:\n            while chunk := await file.read(chunk_size):\n                file_size += len(chunk)\n                if file_size > MAX_FILE_SIZE:\n                    logger.warning(f\"File size too large: {file_size} bytes\")\n                    raise backend.server.v2.store.exceptions.FileSizeTooLargeError(\n                        \"File too large. Maximum size is 50MB\"\n                    )\n        except backend.server.v2.store.exceptions.FileSizeTooLargeError:\n            raise\n        except Exception as e:\n            logger.error(f\"Error reading file chunks: {str(e)}\")\n            raise backend.server.v2.store.exceptions.FileReadError(\n                \"Failed to read uploaded file\"\n            ) from e\n\n        # Reset file pointer\n        await file.seek(0)\n\n        # Generate unique filename\n        filename = file.filename or \"\"\n        file_ext = os.path.splitext(filename)[1].lower()\n        if use_file_name:\n            unique_filename = filename\n        else:\n            unique_filename = f\"{uuid.uuid4()}{file_ext}\"\n\n        # Construct storage path\n        media_type = \"images\" if content_type in ALLOWED_IMAGE_TYPES else \"videos\"\n        storage_path = f\"users/{user_id}/{media_type}/{unique_filename}\"\n\n        try:\n            storage_client = storage.Client()\n            bucket = storage_client.bucket(settings.config.media_gcs_bucket_name)\n            blob = bucket.blob(storage_path)\n            blob.content_type = content_type\n\n            file_bytes = await file.read()\n            blob.upload_from_string(file_bytes, content_type=content_type)\n\n            public_url = blob.public_url\n\n            logger.info(f\"Successfully uploaded file to: {storage_path}\")\n            return public_url\n\n        except Exception as e:\n            logger.error(f\"GCS storage error: {str(e)}\")\n            raise backend.server.v2.store.exceptions.StorageUploadError(\n                \"Failed to upload file to storage\"\n            ) from e\n\n    except backend.server.v2.store.exceptions.MediaUploadError:\n        raise\n    except Exception as e:\n        logger.exception(\"Unexpected error in upload_media\")\n        raise backend.server.v2.store.exceptions.MediaUploadError(\n            \"Unexpected error during media upload\"\n        ) from e",
      "children": [
        {
          "value": "upload_media",
          "children": []
        },
        {
          "value": "(\n    user_id: str, file: fastapi.UploadFile, use_file_name: bool = False\n)",
          "children": [
            {
              "value": "user_id: str",
              "children": [
                {
                  "value": "user_id",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "file: fastapi.UploadFile",
              "children": [
                {
                  "value": "file",
                  "children": []
                },
                {
                  "value": "fastapi.UploadFile",
                  "children": [
                    {
                      "value": "fastapi.UploadFile",
                      "children": [
                        {
                          "value": "fastapi",
                          "children": []
                        },
                        {
                          "value": "UploadFile",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "use_file_name: bool = False",
              "children": [
                {
                  "value": "use_file_name",
                  "children": []
                },
                {
                  "value": "bool",
                  "children": [
                    {
                      "value": "bool",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "False",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "str",
          "children": [
            {
              "value": "str",
              "children": []
            }
          ]
        },
        {
          "value": "# Get file content for deeper validation",
          "children": []
        },
        {
          "value": "try:\n        content = await file.read(1024)  # Read first 1KB for validation\n        await file.seek(0)  # Reset file pointer\n    except Exception as e:\n        logger.error(f\"Error reading file content: {str(e)}\")\n        raise backend.server.v2.store.exceptions.FileReadError(\n            \"Failed to read file content\"\n        ) from e\n\n    # Validate file signature/magic bytes\n    if file.content_type in ALLOWED_IMAGE_TYPES:\n        # Check image file signatures\n        if content.startswith(b\"\\xFF\\xD8\\xFF\"):  # JPEG\n            if file.content_type != \"image/jpeg\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"\\x89PNG\\r\\n\\x1a\\n\"):  # PNG\n            if file.content_type != \"image/png\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"GIF87a\") or content.startswith(b\"GIF89a\"):  # GIF\n            if file.content_type != \"image/gif\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"RIFF\") and content[8:12] == b\"WEBP\":  # WebP\n            if file.content_type != \"image/webp\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        else:\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                \"Invalid image file signature\"\n            )\n\n    elif file.content_type in ALLOWED_VIDEO_TYPES:\n        # Check video file signatures\n        if content.startswith(b\"\\x00\\x00\\x00\") and (content[4:8] == b\"ftyp\"):  # MP4\n            if file.content_type != \"video/mp4\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"\\x1a\\x45\\xdf\\xa3\"):  # WebM\n            if file.content_type != \"video/webm\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        else:\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                \"Invalid video file signature\"\n            )\n\n    settings = Settings()\n\n    # Check required settings first before doing any file processing\n    if not settings.config.media_gcs_bucket_name:\n        logger.error(\"Missing GCS bucket name setting\")\n        raise backend.server.v2.store.exceptions.StorageConfigError(\n            \"Missing storage bucket configuration\"\n        )\n\n    try:\n        # Validate file type\n        content_type = file.content_type\n        if content_type is None:\n            content_type = \"image/jpeg\"\n\n        if (\n            content_type not in ALLOWED_IMAGE_TYPES\n            and content_type not in ALLOWED_VIDEO_TYPES\n        ):\n            logger.warning(f\"Invalid file type attempted: {content_type}\")\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                f\"File type not supported. Must be jpeg, png, gif, webp, mp4 or webm. Content type: {content_type}\"\n            )\n\n        # Validate file size\n        file_size = 0\n        chunk_size = 8192  # 8KB chunks\n\n        try:\n            while chunk := await file.read(chunk_size):\n                file_size += len(chunk)\n                if file_size > MAX_FILE_SIZE:\n                    logger.warning(f\"File size too large: {file_size} bytes\")\n                    raise backend.server.v2.store.exceptions.FileSizeTooLargeError(\n                        \"File too large. Maximum size is 50MB\"\n                    )\n        except backend.server.v2.store.exceptions.FileSizeTooLargeError:\n            raise\n        except Exception as e:\n            logger.error(f\"Error reading file chunks: {str(e)}\")\n            raise backend.server.v2.store.exceptions.FileReadError(\n                \"Failed to read uploaded file\"\n            ) from e\n\n        # Reset file pointer\n        await file.seek(0)\n\n        # Generate unique filename\n        filename = file.filename or \"\"\n        file_ext = os.path.splitext(filename)[1].lower()\n        if use_file_name:\n            unique_filename = filename\n        else:\n            unique_filename = f\"{uuid.uuid4()}{file_ext}\"\n\n        # Construct storage path\n        media_type = \"images\" if content_type in ALLOWED_IMAGE_TYPES else \"videos\"\n        storage_path = f\"users/{user_id}/{media_type}/{unique_filename}\"\n\n        try:\n            storage_client = storage.Client()\n            bucket = storage_client.bucket(settings.config.media_gcs_bucket_name)\n            blob = bucket.blob(storage_path)\n            blob.content_type = content_type\n\n            file_bytes = await file.read()\n            blob.upload_from_string(file_bytes, content_type=content_type)\n\n            public_url = blob.public_url\n\n            logger.info(f\"Successfully uploaded file to: {storage_path}\")\n            return public_url\n\n        except Exception as e:\n            logger.error(f\"GCS storage error: {str(e)}\")\n            raise backend.server.v2.store.exceptions.StorageUploadError(\n                \"Failed to upload file to storage\"\n            ) from e\n\n    except backend.server.v2.store.exceptions.MediaUploadError:\n        raise\n    except Exception as e:\n        logger.exception(\"Unexpected error in upload_media\")\n        raise backend.server.v2.store.exceptions.MediaUploadError(\n            \"Unexpected error during media upload\"\n        ) from e",
          "children": [
            {
              "value": "try:\n        content = await file.read(1024)  # Read first 1KB for validation\n        await file.seek(0)  # Reset file pointer\n    except Exception as e:\n        logger.error(f\"Error reading file content: {str(e)}\")\n        raise backend.server.v2.store.exceptions.FileReadError(\n            \"Failed to read file content\"\n        ) from e",
              "children": [
                {
                  "value": "content = await file.read(1024)  # Read first 1KB for validation\n        await file.seek(0)  # Reset file pointer",
                  "children": [
                    {
                      "value": "content = await file.read(1024)",
                      "children": [
                        {
                          "value": "content = await file.read(1024)",
                          "children": [
                            {
                              "value": "content",
                              "children": []
                            },
                            {
                              "value": "await file.read(1024)",
                              "children": [
                                {
                                  "value": "file.read(1024)",
                                  "children": [
                                    {
                                      "value": "file.read",
                                      "children": [
                                        {
                                          "value": "file",
                                          "children": []
                                        },
                                        {
                                          "value": "read",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(1024)",
                                      "children": [
                                        {
                                          "value": "1024",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "# Read first 1KB for validation",
                      "children": []
                    },
                    {
                      "value": "await file.seek(0)",
                      "children": [
                        {
                          "value": "await file.seek(0)",
                          "children": [
                            {
                              "value": "file.seek(0)",
                              "children": [
                                {
                                  "value": "file.seek",
                                  "children": [
                                    {
                                      "value": "file",
                                      "children": []
                                    },
                                    {
                                      "value": "seek",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(0)",
                                  "children": [
                                    {
                                      "value": "0",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "# Reset file pointer",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "except Exception as e:\n        logger.error(f\"Error reading file content: {str(e)}\")\n        raise backend.server.v2.store.exceptions.FileReadError(\n            \"Failed to read file content\"\n        ) from e",
                  "children": [
                    {
                      "value": "Exception as e",
                      "children": [
                        {
                          "value": "Exception",
                          "children": []
                        },
                        {
                          "value": "e",
                          "children": [
                            {
                              "value": "e",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "logger.error(f\"Error reading file content: {str(e)}\")\n        raise backend.server.v2.store.exceptions.FileReadError(\n            \"Failed to read file content\"\n        ) from e",
                      "children": [
                        {
                          "value": "logger.error(f\"Error reading file content: {str(e)}\")",
                          "children": [
                            {
                              "value": "logger.error(f\"Error reading file content: {str(e)}\")",
                              "children": [
                                {
                                  "value": "logger.error",
                                  "children": [
                                    {
                                      "value": "logger",
                                      "children": []
                                    },
                                    {
                                      "value": "error",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(f\"Error reading file content: {str(e)}\")",
                                  "children": [
                                    {
                                      "value": "f\"Error reading file content: {str(e)}\"",
                                      "children": [
                                        {
                                          "value": "f\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Error reading file content:",
                                          "children": []
                                        },
                                        {
                                          "value": "{str(e)}",
                                          "children": [
                                            {
                                              "value": "str(e)",
                                              "children": [
                                                {
                                                  "value": "str",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(e)",
                                                  "children": [
                                                    {
                                                      "value": "e",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "raise backend.server.v2.store.exceptions.FileReadError(\n            \"Failed to read file content\"\n        ) from e",
                          "children": [
                            {
                              "value": "backend.server.v2.store.exceptions.FileReadError(\n            \"Failed to read file content\"\n        )",
                              "children": [
                                {
                                  "value": "backend.server.v2.store.exceptions.FileReadError",
                                  "children": [
                                    {
                                      "value": "backend.server.v2.store.exceptions",
                                      "children": [
                                        {
                                          "value": "backend.server.v2.store",
                                          "children": [
                                            {
                                              "value": "backend.server.v2",
                                              "children": [
                                                {
                                                  "value": "backend.server",
                                                  "children": [
                                                    {
                                                      "value": "backend",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "server",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "v2",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "store",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "exceptions",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "FileReadError",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(\n            \"Failed to read file content\"\n        )",
                                  "children": [
                                    {
                                      "value": "\"Failed to read file content\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Failed to read file content",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "e",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "# Validate file signature/magic bytes",
              "children": []
            },
            {
              "value": "if file.content_type in ALLOWED_IMAGE_TYPES:\n        # Check image file signatures\n        if content.startswith(b\"\\xFF\\xD8\\xFF\"):  # JPEG\n            if file.content_type != \"image/jpeg\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"\\x89PNG\\r\\n\\x1a\\n\"):  # PNG\n            if file.content_type != \"image/png\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"GIF87a\") or content.startswith(b\"GIF89a\"):  # GIF\n            if file.content_type != \"image/gif\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"RIFF\") and content[8:12] == b\"WEBP\":  # WebP\n            if file.content_type != \"image/webp\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        else:\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                \"Invalid image file signature\"\n            )\n\n    elif file.content_type in ALLOWED_VIDEO_TYPES:\n        # Check video file signatures\n        if content.startswith(b\"\\x00\\x00\\x00\") and (content[4:8] == b\"ftyp\"):  # MP4\n            if file.content_type != \"video/mp4\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"\\x1a\\x45\\xdf\\xa3\"):  # WebM\n            if file.content_type != \"video/webm\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        else:\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                \"Invalid video file signature\"\n            )",
              "children": [
                {
                  "value": "file.content_type in ALLOWED_IMAGE_TYPES",
                  "children": [
                    {
                      "value": "file.content_type",
                      "children": [
                        {
                          "value": "file",
                          "children": []
                        },
                        {
                          "value": "content_type",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "ALLOWED_IMAGE_TYPES",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "# Check image file signatures",
                  "children": []
                },
                {
                  "value": "if content.startswith(b\"\\xFF\\xD8\\xFF\"):  # JPEG\n            if file.content_type != \"image/jpeg\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"\\x89PNG\\r\\n\\x1a\\n\"):  # PNG\n            if file.content_type != \"image/png\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"GIF87a\") or content.startswith(b\"GIF89a\"):  # GIF\n            if file.content_type != \"image/gif\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"RIFF\") and content[8:12] == b\"WEBP\":  # WebP\n            if file.content_type != \"image/webp\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        else:\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                \"Invalid image file signature\"\n            )",
                  "children": [
                    {
                      "value": "if content.startswith(b\"\\xFF\\xD8\\xFF\"):  # JPEG\n            if file.content_type != \"image/jpeg\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"\\x89PNG\\r\\n\\x1a\\n\"):  # PNG\n            if file.content_type != \"image/png\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"GIF87a\") or content.startswith(b\"GIF89a\"):  # GIF\n            if file.content_type != \"image/gif\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"RIFF\") and content[8:12] == b\"WEBP\":  # WebP\n            if file.content_type != \"image/webp\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        else:\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                \"Invalid image file signature\"\n            )",
                      "children": [
                        {
                          "value": "content.startswith(b\"\\xFF\\xD8\\xFF\")",
                          "children": [
                            {
                              "value": "content.startswith",
                              "children": [
                                {
                                  "value": "content",
                                  "children": []
                                },
                                {
                                  "value": "startswith",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(b\"\\xFF\\xD8\\xFF\")",
                              "children": [
                                {
                                  "value": "b\"\\xFF\\xD8\\xFF\"",
                                  "children": [
                                    {
                                      "value": "b\"",
                                      "children": []
                                    },
                                    {
                                      "value": "\\xFF\\xD8\\xFF",
                                      "children": [
                                        {
                                          "value": "\\xFF",
                                          "children": []
                                        },
                                        {
                                          "value": "\\xD8",
                                          "children": []
                                        },
                                        {
                                          "value": "\\xFF",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "# JPEG",
                          "children": []
                        },
                        {
                          "value": "if file.content_type != \"image/jpeg\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )",
                          "children": [
                            {
                              "value": "if file.content_type != \"image/jpeg\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )",
                              "children": [
                                {
                                  "value": "file.content_type != \"image/jpeg\"",
                                  "children": [
                                    {
                                      "value": "file.content_type",
                                      "children": [
                                        {
                                          "value": "file",
                                          "children": []
                                        },
                                        {
                                          "value": "content_type",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "\"image/jpeg\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "image/jpeg",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )",
                                  "children": [
                                    {
                                      "value": "raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )",
                                      "children": [
                                        {
                                          "value": "backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )",
                                          "children": [
                                            {
                                              "value": "backend.server.v2.store.exceptions.InvalidFileTypeError",
                                              "children": [
                                                {
                                                  "value": "backend.server.v2.store.exceptions",
                                                  "children": [
                                                    {
                                                      "value": "backend.server.v2.store",
                                                      "children": [
                                                        {
                                                          "value": "backend.server.v2",
                                                          "children": [
                                                            {
                                                              "value": "backend.server",
                                                              "children": [
                                                                {
                                                                  "value": "backend",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "server",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "v2",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "store",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "exceptions",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "InvalidFileTypeError",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(\n                    \"File signature does not match content type\"\n                )",
                                              "children": [
                                                {
                                                  "value": "\"File signature does not match content type\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "File signature does not match content type",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "elif content.startswith(b\"\\x89PNG\\r\\n\\x1a\\n\"):  # PNG\n            if file.content_type != \"image/png\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )",
                          "children": [
                            {
                              "value": "content.startswith(b\"\\x89PNG\\r\\n\\x1a\\n\")",
                              "children": [
                                {
                                  "value": "content.startswith",
                                  "children": [
                                    {
                                      "value": "content",
                                      "children": []
                                    },
                                    {
                                      "value": "startswith",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(b\"\\x89PNG\\r\\n\\x1a\\n\")",
                                  "children": [
                                    {
                                      "value": "b\"\\x89PNG\\r\\n\\x1a\\n\"",
                                      "children": [
                                        {
                                          "value": "b\"",
                                          "children": []
                                        },
                                        {
                                          "value": "\\x89PNG\\r\\n\\x1a\\n",
                                          "children": [
                                            {
                                              "value": "\\x89",
                                              "children": []
                                            },
                                            {
                                              "value": "\\r",
                                              "children": []
                                            },
                                            {
                                              "value": "\\n",
                                              "children": []
                                            },
                                            {
                                              "value": "\\x1a",
                                              "children": []
                                            },
                                            {
                                              "value": "\\n",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "# PNG",
                              "children": []
                            },
                            {
                              "value": "if file.content_type != \"image/png\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )",
                              "children": [
                                {
                                  "value": "if file.content_type != \"image/png\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )",
                                  "children": [
                                    {
                                      "value": "file.content_type != \"image/png\"",
                                      "children": [
                                        {
                                          "value": "file.content_type",
                                          "children": [
                                            {
                                              "value": "file",
                                              "children": []
                                            },
                                            {
                                              "value": "content_type",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"image/png\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "image/png",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )",
                                      "children": [
                                        {
                                          "value": "raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )",
                                          "children": [
                                            {
                                              "value": "backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )",
                                              "children": [
                                                {
                                                  "value": "backend.server.v2.store.exceptions.InvalidFileTypeError",
                                                  "children": [
                                                    {
                                                      "value": "backend.server.v2.store.exceptions",
                                                      "children": [
                                                        {
                                                          "value": "backend.server.v2.store",
                                                          "children": [
                                                            {
                                                              "value": "backend.server.v2",
                                                              "children": [
                                                                {
                                                                  "value": "backend.server",
                                                                  "children": [
                                                                    {
                                                                      "value": "backend",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "server",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "v2",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "store",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "exceptions",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "InvalidFileTypeError",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(\n                    \"File signature does not match content type\"\n                )",
                                                  "children": [
                                                    {
                                                      "value": "\"File signature does not match content type\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "File signature does not match content type",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "elif content.startswith(b\"GIF87a\") or content.startswith(b\"GIF89a\"):  # GIF\n            if file.content_type != \"image/gif\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )",
                          "children": [
                            {
                              "value": "content.startswith(b\"GIF87a\") or content.startswith(b\"GIF89a\")",
                              "children": [
                                {
                                  "value": "content.startswith(b\"GIF87a\")",
                                  "children": [
                                    {
                                      "value": "content.startswith",
                                      "children": [
                                        {
                                          "value": "content",
                                          "children": []
                                        },
                                        {
                                          "value": "startswith",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(b\"GIF87a\")",
                                      "children": [
                                        {
                                          "value": "b\"GIF87a\"",
                                          "children": [
                                            {
                                              "value": "b\"",
                                              "children": []
                                            },
                                            {
                                              "value": "GIF87a",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "content.startswith(b\"GIF89a\")",
                                  "children": [
                                    {
                                      "value": "content.startswith",
                                      "children": [
                                        {
                                          "value": "content",
                                          "children": []
                                        },
                                        {
                                          "value": "startswith",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(b\"GIF89a\")",
                                      "children": [
                                        {
                                          "value": "b\"GIF89a\"",
                                          "children": [
                                            {
                                              "value": "b\"",
                                              "children": []
                                            },
                                            {
                                              "value": "GIF89a",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "# GIF",
                              "children": []
                            },
                            {
                              "value": "if file.content_type != \"image/gif\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )",
                              "children": [
                                {
                                  "value": "if file.content_type != \"image/gif\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )",
                                  "children": [
                                    {
                                      "value": "file.content_type != \"image/gif\"",
                                      "children": [
                                        {
                                          "value": "file.content_type",
                                          "children": [
                                            {
                                              "value": "file",
                                              "children": []
                                            },
                                            {
                                              "value": "content_type",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"image/gif\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "image/gif",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )",
                                      "children": [
                                        {
                                          "value": "raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )",
                                          "children": [
                                            {
                                              "value": "backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )",
                                              "children": [
                                                {
                                                  "value": "backend.server.v2.store.exceptions.InvalidFileTypeError",
                                                  "children": [
                                                    {
                                                      "value": "backend.server.v2.store.exceptions",
                                                      "children": [
                                                        {
                                                          "value": "backend.server.v2.store",
                                                          "children": [
                                                            {
                                                              "value": "backend.server.v2",
                                                              "children": [
                                                                {
                                                                  "value": "backend.server",
                                                                  "children": [
                                                                    {
                                                                      "value": "backend",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "server",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "v2",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "store",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "exceptions",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "InvalidFileTypeError",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(\n                    \"File signature does not match content type\"\n                )",
                                                  "children": [
                                                    {
                                                      "value": "\"File signature does not match content type\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "File signature does not match content type",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "elif content.startswith(b\"RIFF\") and content[8:12] == b\"WEBP\":  # WebP\n            if file.content_type != \"image/webp\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )",
                          "children": [
                            {
                              "value": "content.startswith(b\"RIFF\") and content[8:12] == b\"WEBP\"",
                              "children": [
                                {
                                  "value": "content.startswith(b\"RIFF\")",
                                  "children": [
                                    {
                                      "value": "content.startswith",
                                      "children": [
                                        {
                                          "value": "content",
                                          "children": []
                                        },
                                        {
                                          "value": "startswith",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(b\"RIFF\")",
                                      "children": [
                                        {
                                          "value": "b\"RIFF\"",
                                          "children": [
                                            {
                                              "value": "b\"",
                                              "children": []
                                            },
                                            {
                                              "value": "RIFF",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "content[8:12] == b\"WEBP\"",
                                  "children": [
                                    {
                                      "value": "content[8:12]",
                                      "children": [
                                        {
                                          "value": "content",
                                          "children": []
                                        },
                                        {
                                          "value": "8:12",
                                          "children": [
                                            {
                                              "value": "8",
                                              "children": []
                                            },
                                            {
                                              "value": "12",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "b\"WEBP\"",
                                      "children": [
                                        {
                                          "value": "b\"",
                                          "children": []
                                        },
                                        {
                                          "value": "WEBP",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "# WebP",
                              "children": []
                            },
                            {
                              "value": "if file.content_type != \"image/webp\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )",
                              "children": [
                                {
                                  "value": "if file.content_type != \"image/webp\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )",
                                  "children": [
                                    {
                                      "value": "file.content_type != \"image/webp\"",
                                      "children": [
                                        {
                                          "value": "file.content_type",
                                          "children": [
                                            {
                                              "value": "file",
                                              "children": []
                                            },
                                            {
                                              "value": "content_type",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"image/webp\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "image/webp",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )",
                                      "children": [
                                        {
                                          "value": "raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )",
                                          "children": [
                                            {
                                              "value": "backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )",
                                              "children": [
                                                {
                                                  "value": "backend.server.v2.store.exceptions.InvalidFileTypeError",
                                                  "children": [
                                                    {
                                                      "value": "backend.server.v2.store.exceptions",
                                                      "children": [
                                                        {
                                                          "value": "backend.server.v2.store",
                                                          "children": [
                                                            {
                                                              "value": "backend.server.v2",
                                                              "children": [
                                                                {
                                                                  "value": "backend.server",
                                                                  "children": [
                                                                    {
                                                                      "value": "backend",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "server",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "v2",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "store",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "exceptions",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "InvalidFileTypeError",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(\n                    \"File signature does not match content type\"\n                )",
                                                  "children": [
                                                    {
                                                      "value": "\"File signature does not match content type\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "File signature does not match content type",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "else:\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                \"Invalid image file signature\"\n            )",
                          "children": [
                            {
                              "value": "raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                \"Invalid image file signature\"\n            )",
                              "children": [
                                {
                                  "value": "raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                \"Invalid image file signature\"\n            )",
                                  "children": [
                                    {
                                      "value": "backend.server.v2.store.exceptions.InvalidFileTypeError(\n                \"Invalid image file signature\"\n            )",
                                      "children": [
                                        {
                                          "value": "backend.server.v2.store.exceptions.InvalidFileTypeError",
                                          "children": [
                                            {
                                              "value": "backend.server.v2.store.exceptions",
                                              "children": [
                                                {
                                                  "value": "backend.server.v2.store",
                                                  "children": [
                                                    {
                                                      "value": "backend.server.v2",
                                                      "children": [
                                                        {
                                                          "value": "backend.server",
                                                          "children": [
                                                            {
                                                              "value": "backend",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "server",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "v2",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "store",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "exceptions",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "InvalidFileTypeError",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(\n                \"Invalid image file signature\"\n            )",
                                          "children": [
                                            {
                                              "value": "\"Invalid image file signature\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "Invalid image file signature",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "elif file.content_type in ALLOWED_VIDEO_TYPES:\n        # Check video file signatures\n        if content.startswith(b\"\\x00\\x00\\x00\") and (content[4:8] == b\"ftyp\"):  # MP4\n            if file.content_type != \"video/mp4\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"\\x1a\\x45\\xdf\\xa3\"):  # WebM\n            if file.content_type != \"video/webm\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        else:\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                \"Invalid video file signature\"\n            )",
                  "children": [
                    {
                      "value": "file.content_type in ALLOWED_VIDEO_TYPES",
                      "children": [
                        {
                          "value": "file.content_type",
                          "children": [
                            {
                              "value": "file",
                              "children": []
                            },
                            {
                              "value": "content_type",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "ALLOWED_VIDEO_TYPES",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "# Check video file signatures",
                      "children": []
                    },
                    {
                      "value": "if content.startswith(b\"\\x00\\x00\\x00\") and (content[4:8] == b\"ftyp\"):  # MP4\n            if file.content_type != \"video/mp4\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"\\x1a\\x45\\xdf\\xa3\"):  # WebM\n            if file.content_type != \"video/webm\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        else:\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                \"Invalid video file signature\"\n            )",
                      "children": [
                        {
                          "value": "if content.startswith(b\"\\x00\\x00\\x00\") and (content[4:8] == b\"ftyp\"):  # MP4\n            if file.content_type != \"video/mp4\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        elif content.startswith(b\"\\x1a\\x45\\xdf\\xa3\"):  # WebM\n            if file.content_type != \"video/webm\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )\n        else:\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                \"Invalid video file signature\"\n            )",
                          "children": [
                            {
                              "value": "content.startswith(b\"\\x00\\x00\\x00\") and (content[4:8] == b\"ftyp\")",
                              "children": [
                                {
                                  "value": "content.startswith(b\"\\x00\\x00\\x00\")",
                                  "children": [
                                    {
                                      "value": "content.startswith",
                                      "children": [
                                        {
                                          "value": "content",
                                          "children": []
                                        },
                                        {
                                          "value": "startswith",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(b\"\\x00\\x00\\x00\")",
                                      "children": [
                                        {
                                          "value": "b\"\\x00\\x00\\x00\"",
                                          "children": [
                                            {
                                              "value": "b\"",
                                              "children": []
                                            },
                                            {
                                              "value": "\\x00\\x00\\x00",
                                              "children": [
                                                {
                                                  "value": "\\x00",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\\x00",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\\x00",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "(content[4:8] == b\"ftyp\")",
                                  "children": [
                                    {
                                      "value": "content[4:8] == b\"ftyp\"",
                                      "children": [
                                        {
                                          "value": "content[4:8]",
                                          "children": [
                                            {
                                              "value": "content",
                                              "children": []
                                            },
                                            {
                                              "value": "4:8",
                                              "children": [
                                                {
                                                  "value": "4",
                                                  "children": []
                                                },
                                                {
                                                  "value": "8",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "b\"ftyp\"",
                                          "children": [
                                            {
                                              "value": "b\"",
                                              "children": []
                                            },
                                            {
                                              "value": "ftyp",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "# MP4",
                              "children": []
                            },
                            {
                              "value": "if file.content_type != \"video/mp4\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )",
                              "children": [
                                {
                                  "value": "if file.content_type != \"video/mp4\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )",
                                  "children": [
                                    {
                                      "value": "file.content_type != \"video/mp4\"",
                                      "children": [
                                        {
                                          "value": "file.content_type",
                                          "children": [
                                            {
                                              "value": "file",
                                              "children": []
                                            },
                                            {
                                              "value": "content_type",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"video/mp4\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "video/mp4",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )",
                                      "children": [
                                        {
                                          "value": "raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )",
                                          "children": [
                                            {
                                              "value": "backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )",
                                              "children": [
                                                {
                                                  "value": "backend.server.v2.store.exceptions.InvalidFileTypeError",
                                                  "children": [
                                                    {
                                                      "value": "backend.server.v2.store.exceptions",
                                                      "children": [
                                                        {
                                                          "value": "backend.server.v2.store",
                                                          "children": [
                                                            {
                                                              "value": "backend.server.v2",
                                                              "children": [
                                                                {
                                                                  "value": "backend.server",
                                                                  "children": [
                                                                    {
                                                                      "value": "backend",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "server",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "v2",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "store",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "exceptions",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "InvalidFileTypeError",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(\n                    \"File signature does not match content type\"\n                )",
                                                  "children": [
                                                    {
                                                      "value": "\"File signature does not match content type\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "File signature does not match content type",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "elif content.startswith(b\"\\x1a\\x45\\xdf\\xa3\"):  # WebM\n            if file.content_type != \"video/webm\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )",
                              "children": [
                                {
                                  "value": "content.startswith(b\"\\x1a\\x45\\xdf\\xa3\")",
                                  "children": [
                                    {
                                      "value": "content.startswith",
                                      "children": [
                                        {
                                          "value": "content",
                                          "children": []
                                        },
                                        {
                                          "value": "startswith",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(b\"\\x1a\\x45\\xdf\\xa3\")",
                                      "children": [
                                        {
                                          "value": "b\"\\x1a\\x45\\xdf\\xa3\"",
                                          "children": [
                                            {
                                              "value": "b\"",
                                              "children": []
                                            },
                                            {
                                              "value": "\\x1a\\x45\\xdf\\xa3",
                                              "children": [
                                                {
                                                  "value": "\\x1a",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\\x45",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\\xdf",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\\xa3",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "# WebM",
                                  "children": []
                                },
                                {
                                  "value": "if file.content_type != \"video/webm\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )",
                                  "children": [
                                    {
                                      "value": "if file.content_type != \"video/webm\":\n                raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )",
                                      "children": [
                                        {
                                          "value": "file.content_type != \"video/webm\"",
                                          "children": [
                                            {
                                              "value": "file.content_type",
                                              "children": [
                                                {
                                                  "value": "file",
                                                  "children": []
                                                },
                                                {
                                                  "value": "content_type",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"video/webm\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "video/webm",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )",
                                          "children": [
                                            {
                                              "value": "raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )",
                                              "children": [
                                                {
                                                  "value": "backend.server.v2.store.exceptions.InvalidFileTypeError(\n                    \"File signature does not match content type\"\n                )",
                                                  "children": [
                                                    {
                                                      "value": "backend.server.v2.store.exceptions.InvalidFileTypeError",
                                                      "children": [
                                                        {
                                                          "value": "backend.server.v2.store.exceptions",
                                                          "children": [
                                                            {
                                                              "value": "backend.server.v2.store",
                                                              "children": [
                                                                {
                                                                  "value": "backend.server.v2",
                                                                  "children": [
                                                                    {
                                                                      "value": "backend.server",
                                                                      "children": [
                                                                        {
                                                                          "value": "backend",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "server",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "v2",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "store",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "exceptions",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "InvalidFileTypeError",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "(\n                    \"File signature does not match content type\"\n                )",
                                                      "children": [
                                                        {
                                                          "value": "\"File signature does not match content type\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "File signature does not match content type",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "else:\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                \"Invalid video file signature\"\n            )",
                              "children": [
                                {
                                  "value": "raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                \"Invalid video file signature\"\n            )",
                                  "children": [
                                    {
                                      "value": "raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                \"Invalid video file signature\"\n            )",
                                      "children": [
                                        {
                                          "value": "backend.server.v2.store.exceptions.InvalidFileTypeError(\n                \"Invalid video file signature\"\n            )",
                                          "children": [
                                            {
                                              "value": "backend.server.v2.store.exceptions.InvalidFileTypeError",
                                              "children": [
                                                {
                                                  "value": "backend.server.v2.store.exceptions",
                                                  "children": [
                                                    {
                                                      "value": "backend.server.v2.store",
                                                      "children": [
                                                        {
                                                          "value": "backend.server.v2",
                                                          "children": [
                                                            {
                                                              "value": "backend.server",
                                                              "children": [
                                                                {
                                                                  "value": "backend",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "server",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "v2",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "store",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "exceptions",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "InvalidFileTypeError",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(\n                \"Invalid video file signature\"\n            )",
                                              "children": [
                                                {
                                                  "value": "\"Invalid video file signature\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "Invalid video file signature",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "settings = Settings()",
              "children": [
                {
                  "value": "settings = Settings()",
                  "children": [
                    {
                      "value": "settings",
                      "children": []
                    },
                    {
                      "value": "Settings()",
                      "children": [
                        {
                          "value": "Settings",
                          "children": []
                        },
                        {
                          "value": "()",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "# Check required settings first before doing any file processing",
              "children": []
            },
            {
              "value": "if not settings.config.media_gcs_bucket_name:\n        logger.error(\"Missing GCS bucket name setting\")\n        raise backend.server.v2.store.exceptions.StorageConfigError(\n            \"Missing storage bucket configuration\"\n        )",
              "children": [
                {
                  "value": "not settings.config.media_gcs_bucket_name",
                  "children": [
                    {
                      "value": "settings.config.media_gcs_bucket_name",
                      "children": [
                        {
                          "value": "settings.config",
                          "children": [
                            {
                              "value": "settings",
                              "children": []
                            },
                            {
                              "value": "config",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "media_gcs_bucket_name",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "logger.error(\"Missing GCS bucket name setting\")\n        raise backend.server.v2.store.exceptions.StorageConfigError(\n            \"Missing storage bucket configuration\"\n        )",
                  "children": [
                    {
                      "value": "logger.error(\"Missing GCS bucket name setting\")",
                      "children": [
                        {
                          "value": "logger.error(\"Missing GCS bucket name setting\")",
                          "children": [
                            {
                              "value": "logger.error",
                              "children": [
                                {
                                  "value": "logger",
                                  "children": []
                                },
                                {
                                  "value": "error",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(\"Missing GCS bucket name setting\")",
                              "children": [
                                {
                                  "value": "\"Missing GCS bucket name setting\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "Missing GCS bucket name setting",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "raise backend.server.v2.store.exceptions.StorageConfigError(\n            \"Missing storage bucket configuration\"\n        )",
                      "children": [
                        {
                          "value": "backend.server.v2.store.exceptions.StorageConfigError(\n            \"Missing storage bucket configuration\"\n        )",
                          "children": [
                            {
                              "value": "backend.server.v2.store.exceptions.StorageConfigError",
                              "children": [
                                {
                                  "value": "backend.server.v2.store.exceptions",
                                  "children": [
                                    {
                                      "value": "backend.server.v2.store",
                                      "children": [
                                        {
                                          "value": "backend.server.v2",
                                          "children": [
                                            {
                                              "value": "backend.server",
                                              "children": [
                                                {
                                                  "value": "backend",
                                                  "children": []
                                                },
                                                {
                                                  "value": "server",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "v2",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "store",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "exceptions",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "StorageConfigError",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(\n            \"Missing storage bucket configuration\"\n        )",
                              "children": [
                                {
                                  "value": "\"Missing storage bucket configuration\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "Missing storage bucket configuration",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "try:\n        # Validate file type\n        content_type = file.content_type\n        if content_type is None:\n            content_type = \"image/jpeg\"\n\n        if (\n            content_type not in ALLOWED_IMAGE_TYPES\n            and content_type not in ALLOWED_VIDEO_TYPES\n        ):\n            logger.warning(f\"Invalid file type attempted: {content_type}\")\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                f\"File type not supported. Must be jpeg, png, gif, webp, mp4 or webm. Content type: {content_type}\"\n            )\n\n        # Validate file size\n        file_size = 0\n        chunk_size = 8192  # 8KB chunks\n\n        try:\n            while chunk := await file.read(chunk_size):\n                file_size += len(chunk)\n                if file_size > MAX_FILE_SIZE:\n                    logger.warning(f\"File size too large: {file_size} bytes\")\n                    raise backend.server.v2.store.exceptions.FileSizeTooLargeError(\n                        \"File too large. Maximum size is 50MB\"\n                    )\n        except backend.server.v2.store.exceptions.FileSizeTooLargeError:\n            raise\n        except Exception as e:\n            logger.error(f\"Error reading file chunks: {str(e)}\")\n            raise backend.server.v2.store.exceptions.FileReadError(\n                \"Failed to read uploaded file\"\n            ) from e\n\n        # Reset file pointer\n        await file.seek(0)\n\n        # Generate unique filename\n        filename = file.filename or \"\"\n        file_ext = os.path.splitext(filename)[1].lower()\n        if use_file_name:\n            unique_filename = filename\n        else:\n            unique_filename = f\"{uuid.uuid4()}{file_ext}\"\n\n        # Construct storage path\n        media_type = \"images\" if content_type in ALLOWED_IMAGE_TYPES else \"videos\"\n        storage_path = f\"users/{user_id}/{media_type}/{unique_filename}\"\n\n        try:\n            storage_client = storage.Client()\n            bucket = storage_client.bucket(settings.config.media_gcs_bucket_name)\n            blob = bucket.blob(storage_path)\n            blob.content_type = content_type\n\n            file_bytes = await file.read()\n            blob.upload_from_string(file_bytes, content_type=content_type)\n\n            public_url = blob.public_url\n\n            logger.info(f\"Successfully uploaded file to: {storage_path}\")\n            return public_url\n\n        except Exception as e:\n            logger.error(f\"GCS storage error: {str(e)}\")\n            raise backend.server.v2.store.exceptions.StorageUploadError(\n                \"Failed to upload file to storage\"\n            ) from e\n\n    except backend.server.v2.store.exceptions.MediaUploadError:\n        raise\n    except Exception as e:\n        logger.exception(\"Unexpected error in upload_media\")\n        raise backend.server.v2.store.exceptions.MediaUploadError(\n            \"Unexpected error during media upload\"\n        ) from e",
              "children": [
                {
                  "value": "# Validate file type",
                  "children": []
                },
                {
                  "value": "content_type = file.content_type\n        if content_type is None:\n            content_type = \"image/jpeg\"\n\n        if (\n            content_type not in ALLOWED_IMAGE_TYPES\n            and content_type not in ALLOWED_VIDEO_TYPES\n        ):\n            logger.warning(f\"Invalid file type attempted: {content_type}\")\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                f\"File type not supported. Must be jpeg, png, gif, webp, mp4 or webm. Content type: {content_type}\"\n            )\n\n        # Validate file size\n        file_size = 0\n        chunk_size = 8192  # 8KB chunks\n\n        try:\n            while chunk := await file.read(chunk_size):\n                file_size += len(chunk)\n                if file_size > MAX_FILE_SIZE:\n                    logger.warning(f\"File size too large: {file_size} bytes\")\n                    raise backend.server.v2.store.exceptions.FileSizeTooLargeError(\n                        \"File too large. Maximum size is 50MB\"\n                    )\n        except backend.server.v2.store.exceptions.FileSizeTooLargeError:\n            raise\n        except Exception as e:\n            logger.error(f\"Error reading file chunks: {str(e)}\")\n            raise backend.server.v2.store.exceptions.FileReadError(\n                \"Failed to read uploaded file\"\n            ) from e\n\n        # Reset file pointer\n        await file.seek(0)\n\n        # Generate unique filename\n        filename = file.filename or \"\"\n        file_ext = os.path.splitext(filename)[1].lower()\n        if use_file_name:\n            unique_filename = filename\n        else:\n            unique_filename = f\"{uuid.uuid4()}{file_ext}\"\n\n        # Construct storage path\n        media_type = \"images\" if content_type in ALLOWED_IMAGE_TYPES else \"videos\"\n        storage_path = f\"users/{user_id}/{media_type}/{unique_filename}\"\n\n        try:\n            storage_client = storage.Client()\n            bucket = storage_client.bucket(settings.config.media_gcs_bucket_name)\n            blob = bucket.blob(storage_path)\n            blob.content_type = content_type\n\n            file_bytes = await file.read()\n            blob.upload_from_string(file_bytes, content_type=content_type)\n\n            public_url = blob.public_url\n\n            logger.info(f\"Successfully uploaded file to: {storage_path}\")\n            return public_url\n\n        except Exception as e:\n            logger.error(f\"GCS storage error: {str(e)}\")\n            raise backend.server.v2.store.exceptions.StorageUploadError(\n                \"Failed to upload file to storage\"\n            ) from e",
                  "children": [
                    {
                      "value": "content_type = file.content_type",
                      "children": [
                        {
                          "value": "content_type = file.content_type",
                          "children": [
                            {
                              "value": "content_type",
                              "children": []
                            },
                            {
                              "value": "file.content_type",
                              "children": [
                                {
                                  "value": "file",
                                  "children": []
                                },
                                {
                                  "value": "content_type",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if content_type is None:\n            content_type = \"image/jpeg\"",
                      "children": [
                        {
                          "value": "content_type is None",
                          "children": [
                            {
                              "value": "content_type",
                              "children": []
                            },
                            {
                              "value": "None",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "content_type = \"image/jpeg\"",
                          "children": [
                            {
                              "value": "content_type = \"image/jpeg\"",
                              "children": [
                                {
                                  "value": "content_type = \"image/jpeg\"",
                                  "children": [
                                    {
                                      "value": "content_type",
                                      "children": []
                                    },
                                    {
                                      "value": "\"image/jpeg\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "image/jpeg",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if (\n            content_type not in ALLOWED_IMAGE_TYPES\n            and content_type not in ALLOWED_VIDEO_TYPES\n        ):\n            logger.warning(f\"Invalid file type attempted: {content_type}\")\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                f\"File type not supported. Must be jpeg, png, gif, webp, mp4 or webm. Content type: {content_type}\"\n            )",
                      "children": [
                        {
                          "value": "(\n            content_type not in ALLOWED_IMAGE_TYPES\n            and content_type not in ALLOWED_VIDEO_TYPES\n        )",
                          "children": [
                            {
                              "value": "content_type not in ALLOWED_IMAGE_TYPES\n            and content_type not in ALLOWED_VIDEO_TYPES",
                              "children": [
                                {
                                  "value": "content_type not in ALLOWED_IMAGE_TYPES",
                                  "children": [
                                    {
                                      "value": "content_type",
                                      "children": []
                                    },
                                    {
                                      "value": "ALLOWED_IMAGE_TYPES",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "content_type not in ALLOWED_VIDEO_TYPES",
                                  "children": [
                                    {
                                      "value": "content_type",
                                      "children": []
                                    },
                                    {
                                      "value": "ALLOWED_VIDEO_TYPES",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "logger.warning(f\"Invalid file type attempted: {content_type}\")\n            raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                f\"File type not supported. Must be jpeg, png, gif, webp, mp4 or webm. Content type: {content_type}\"\n            )",
                          "children": [
                            {
                              "value": "logger.warning(f\"Invalid file type attempted: {content_type}\")",
                              "children": [
                                {
                                  "value": "logger.warning(f\"Invalid file type attempted: {content_type}\")",
                                  "children": [
                                    {
                                      "value": "logger.warning",
                                      "children": [
                                        {
                                          "value": "logger",
                                          "children": []
                                        },
                                        {
                                          "value": "warning",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(f\"Invalid file type attempted: {content_type}\")",
                                      "children": [
                                        {
                                          "value": "f\"Invalid file type attempted: {content_type}\"",
                                          "children": [
                                            {
                                              "value": "f\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Invalid file type attempted:",
                                              "children": []
                                            },
                                            {
                                              "value": "{content_type}",
                                              "children": [
                                                {
                                                  "value": "content_type",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "raise backend.server.v2.store.exceptions.InvalidFileTypeError(\n                f\"File type not supported. Must be jpeg, png, gif, webp, mp4 or webm. Content type: {content_type}\"\n            )",
                              "children": [
                                {
                                  "value": "backend.server.v2.store.exceptions.InvalidFileTypeError(\n                f\"File type not supported. Must be jpeg, png, gif, webp, mp4 or webm. Content type: {content_type}\"\n            )",
                                  "children": [
                                    {
                                      "value": "backend.server.v2.store.exceptions.InvalidFileTypeError",
                                      "children": [
                                        {
                                          "value": "backend.server.v2.store.exceptions",
                                          "children": [
                                            {
                                              "value": "backend.server.v2.store",
                                              "children": [
                                                {
                                                  "value": "backend.server.v2",
                                                  "children": [
                                                    {
                                                      "value": "backend.server",
                                                      "children": [
                                                        {
                                                          "value": "backend",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "server",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "v2",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "store",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "exceptions",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "InvalidFileTypeError",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(\n                f\"File type not supported. Must be jpeg, png, gif, webp, mp4 or webm. Content type: {content_type}\"\n            )",
                                      "children": [
                                        {
                                          "value": "f\"File type not supported. Must be jpeg, png, gif, webp, mp4 or webm. Content type: {content_type}\"",
                                          "children": [
                                            {
                                              "value": "f\"",
                                              "children": []
                                            },
                                            {
                                              "value": "File type not supported. Must be jpeg, png, gif, webp, mp4 or webm. Content type:",
                                              "children": []
                                            },
                                            {
                                              "value": "{content_type}",
                                              "children": [
                                                {
                                                  "value": "content_type",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "# Validate file size",
                      "children": []
                    },
                    {
                      "value": "file_size = 0",
                      "children": [
                        {
                          "value": "file_size = 0",
                          "children": [
                            {
                              "value": "file_size",
                              "children": []
                            },
                            {
                              "value": "0",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "chunk_size = 8192",
                      "children": [
                        {
                          "value": "chunk_size = 8192",
                          "children": [
                            {
                              "value": "chunk_size",
                              "children": []
                            },
                            {
                              "value": "8192",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "# 8KB chunks",
                      "children": []
                    },
                    {
                      "value": "try:\n            while chunk := await file.read(chunk_size):\n                file_size += len(chunk)\n                if file_size > MAX_FILE_SIZE:\n                    logger.warning(f\"File size too large: {file_size} bytes\")\n                    raise backend.server.v2.store.exceptions.FileSizeTooLargeError(\n                        \"File too large. Maximum size is 50MB\"\n                    )\n        except backend.server.v2.store.exceptions.FileSizeTooLargeError:\n            raise\n        except Exception as e:\n            logger.error(f\"Error reading file chunks: {str(e)}\")\n            raise backend.server.v2.store.exceptions.FileReadError(\n                \"Failed to read uploaded file\"\n            ) from e",
                      "children": [
                        {
                          "value": "while chunk := await file.read(chunk_size):\n                file_size += len(chunk)\n                if file_size > MAX_FILE_SIZE:\n                    logger.warning(f\"File size too large: {file_size} bytes\")\n                    raise backend.server.v2.store.exceptions.FileSizeTooLargeError(\n                        \"File too large. Maximum size is 50MB\"\n                    )",
                          "children": [
                            {
                              "value": "while chunk := await file.read(chunk_size):\n                file_size += len(chunk)\n                if file_size > MAX_FILE_SIZE:\n                    logger.warning(f\"File size too large: {file_size} bytes\")\n                    raise backend.server.v2.store.exceptions.FileSizeTooLargeError(\n                        \"File too large. Maximum size is 50MB\"\n                    )",
                              "children": [
                                {
                                  "value": "chunk := await file.read(chunk_size)",
                                  "children": [
                                    {
                                      "value": "chunk",
                                      "children": []
                                    },
                                    {
                                      "value": "await file.read(chunk_size)",
                                      "children": [
                                        {
                                          "value": "file.read(chunk_size)",
                                          "children": [
                                            {
                                              "value": "file.read",
                                              "children": [
                                                {
                                                  "value": "file",
                                                  "children": []
                                                },
                                                {
                                                  "value": "read",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(chunk_size)",
                                              "children": [
                                                {
                                                  "value": "chunk_size",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "file_size += len(chunk)\n                if file_size > MAX_FILE_SIZE:\n                    logger.warning(f\"File size too large: {file_size} bytes\")\n                    raise backend.server.v2.store.exceptions.FileSizeTooLargeError(\n                        \"File too large. Maximum size is 50MB\"\n                    )",
                                  "children": [
                                    {
                                      "value": "file_size += len(chunk)",
                                      "children": [
                                        {
                                          "value": "file_size += len(chunk)",
                                          "children": [
                                            {
                                              "value": "file_size",
                                              "children": []
                                            },
                                            {
                                              "value": "len(chunk)",
                                              "children": [
                                                {
                                                  "value": "len",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(chunk)",
                                                  "children": [
                                                    {
                                                      "value": "chunk",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "if file_size > MAX_FILE_SIZE:\n                    logger.warning(f\"File size too large: {file_size} bytes\")\n                    raise backend.server.v2.store.exceptions.FileSizeTooLargeError(\n                        \"File too large. Maximum size is 50MB\"\n                    )",
                                      "children": [
                                        {
                                          "value": "file_size > MAX_FILE_SIZE",
                                          "children": [
                                            {
                                              "value": "file_size",
                                              "children": []
                                            },
                                            {
                                              "value": "MAX_FILE_SIZE",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "logger.warning(f\"File size too large: {file_size} bytes\")\n                    raise backend.server.v2.store.exceptions.FileSizeTooLargeError(\n                        \"File too large. Maximum size is 50MB\"\n                    )",
                                          "children": [
                                            {
                                              "value": "logger.warning(f\"File size too large: {file_size} bytes\")",
                                              "children": [
                                                {
                                                  "value": "logger.warning(f\"File size too large: {file_size} bytes\")",
                                                  "children": [
                                                    {
                                                      "value": "logger.warning",
                                                      "children": [
                                                        {
                                                          "value": "logger",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "warning",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "(f\"File size too large: {file_size} bytes\")",
                                                      "children": [
                                                        {
                                                          "value": "f\"File size too large: {file_size} bytes\"",
                                                          "children": [
                                                            {
                                                              "value": "f\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "File size too large:",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "{file_size}",
                                                              "children": [
                                                                {
                                                                  "value": "file_size",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "bytes",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "raise backend.server.v2.store.exceptions.FileSizeTooLargeError(\n                        \"File too large. Maximum size is 50MB\"\n                    )",
                                              "children": [
                                                {
                                                  "value": "backend.server.v2.store.exceptions.FileSizeTooLargeError(\n                        \"File too large. Maximum size is 50MB\"\n                    )",
                                                  "children": [
                                                    {
                                                      "value": "backend.server.v2.store.exceptions.FileSizeTooLargeError",
                                                      "children": [
                                                        {
                                                          "value": "backend.server.v2.store.exceptions",
                                                          "children": [
                                                            {
                                                              "value": "backend.server.v2.store",
                                                              "children": [
                                                                {
                                                                  "value": "backend.server.v2",
                                                                  "children": [
                                                                    {
                                                                      "value": "backend.server",
                                                                      "children": [
                                                                        {
                                                                          "value": "backend",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "server",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "v2",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "store",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "exceptions",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "FileSizeTooLargeError",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "(\n                        \"File too large. Maximum size is 50MB\"\n                    )",
                                                      "children": [
                                                        {
                                                          "value": "\"File too large. Maximum size is 50MB\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "File too large. Maximum size is 50MB",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "except backend.server.v2.store.exceptions.FileSizeTooLargeError:\n            raise",
                          "children": [
                            {
                              "value": "backend.server.v2.store.exceptions.FileSizeTooLargeError",
                              "children": [
                                {
                                  "value": "backend.server.v2.store.exceptions",
                                  "children": [
                                    {
                                      "value": "backend.server.v2.store",
                                      "children": [
                                        {
                                          "value": "backend.server.v2",
                                          "children": [
                                            {
                                              "value": "backend.server",
                                              "children": [
                                                {
                                                  "value": "backend",
                                                  "children": []
                                                },
                                                {
                                                  "value": "server",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "v2",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "store",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "exceptions",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "FileSizeTooLargeError",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "raise",
                              "children": [
                                {
                                  "value": "raise",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "except Exception as e:\n            logger.error(f\"Error reading file chunks: {str(e)}\")\n            raise backend.server.v2.store.exceptions.FileReadError(\n                \"Failed to read uploaded file\"\n            ) from e",
                          "children": [
                            {
                              "value": "Exception as e",
                              "children": [
                                {
                                  "value": "Exception",
                                  "children": []
                                },
                                {
                                  "value": "e",
                                  "children": [
                                    {
                                      "value": "e",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "logger.error(f\"Error reading file chunks: {str(e)}\")\n            raise backend.server.v2.store.exceptions.FileReadError(\n                \"Failed to read uploaded file\"\n            ) from e",
                              "children": [
                                {
                                  "value": "logger.error(f\"Error reading file chunks: {str(e)}\")",
                                  "children": [
                                    {
                                      "value": "logger.error(f\"Error reading file chunks: {str(e)}\")",
                                      "children": [
                                        {
                                          "value": "logger.error",
                                          "children": [
                                            {
                                              "value": "logger",
                                              "children": []
                                            },
                                            {
                                              "value": "error",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(f\"Error reading file chunks: {str(e)}\")",
                                          "children": [
                                            {
                                              "value": "f\"Error reading file chunks: {str(e)}\"",
                                              "children": [
                                                {
                                                  "value": "f\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "Error reading file chunks:",
                                                  "children": []
                                                },
                                                {
                                                  "value": "{str(e)}",
                                                  "children": [
                                                    {
                                                      "value": "str(e)",
                                                      "children": [
                                                        {
                                                          "value": "str",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "(e)",
                                                          "children": [
                                                            {
                                                              "value": "e",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "raise backend.server.v2.store.exceptions.FileReadError(\n                \"Failed to read uploaded file\"\n            ) from e",
                                  "children": [
                                    {
                                      "value": "backend.server.v2.store.exceptions.FileReadError(\n                \"Failed to read uploaded file\"\n            )",
                                      "children": [
                                        {
                                          "value": "backend.server.v2.store.exceptions.FileReadError",
                                          "children": [
                                            {
                                              "value": "backend.server.v2.store.exceptions",
                                              "children": [
                                                {
                                                  "value": "backend.server.v2.store",
                                                  "children": [
                                                    {
                                                      "value": "backend.server.v2",
                                                      "children": [
                                                        {
                                                          "value": "backend.server",
                                                          "children": [
                                                            {
                                                              "value": "backend",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "server",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "v2",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "store",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "exceptions",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "FileReadError",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(\n                \"Failed to read uploaded file\"\n            )",
                                          "children": [
                                            {
                                              "value": "\"Failed to read uploaded file\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "Failed to read uploaded file",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "e",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "# Reset file pointer",
                      "children": []
                    },
                    {
                      "value": "await file.seek(0)",
                      "children": [
                        {
                          "value": "await file.seek(0)",
                          "children": [
                            {
                              "value": "file.seek(0)",
                              "children": [
                                {
                                  "value": "file.seek",
                                  "children": [
                                    {
                                      "value": "file",
                                      "children": []
                                    },
                                    {
                                      "value": "seek",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(0)",
                                  "children": [
                                    {
                                      "value": "0",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "# Generate unique filename",
                      "children": []
                    },
                    {
                      "value": "filename = file.filename or \"\"",
                      "children": [
                        {
                          "value": "filename = file.filename or \"\"",
                          "children": [
                            {
                              "value": "filename",
                              "children": []
                            },
                            {
                              "value": "file.filename or \"\"",
                              "children": [
                                {
                                  "value": "file.filename",
                                  "children": [
                                    {
                                      "value": "file",
                                      "children": []
                                    },
                                    {
                                      "value": "filename",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "\"\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "file_ext = os.path.splitext(filename)[1].lower()",
                      "children": [
                        {
                          "value": "file_ext = os.path.splitext(filename)[1].lower()",
                          "children": [
                            {
                              "value": "file_ext",
                              "children": []
                            },
                            {
                              "value": "os.path.splitext(filename)[1].lower()",
                              "children": [
                                {
                                  "value": "os.path.splitext(filename)[1].lower",
                                  "children": [
                                    {
                                      "value": "os.path.splitext(filename)[1]",
                                      "children": [
                                        {
                                          "value": "os.path.splitext(filename)",
                                          "children": [
                                            {
                                              "value": "os.path.splitext",
                                              "children": [
                                                {
                                                  "value": "os.path",
                                                  "children": [
                                                    {
                                                      "value": "os",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "path",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "splitext",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(filename)",
                                              "children": [
                                                {
                                                  "value": "filename",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "1",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "lower",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if use_file_name:\n            unique_filename = filename\n        else:\n            unique_filename = f\"{uuid.uuid4()}{file_ext}\"",
                      "children": [
                        {
                          "value": "use_file_name",
                          "children": []
                        },
                        {
                          "value": "unique_filename = filename",
                          "children": [
                            {
                              "value": "unique_filename = filename",
                              "children": [
                                {
                                  "value": "unique_filename = filename",
                                  "children": [
                                    {
                                      "value": "unique_filename",
                                      "children": []
                                    },
                                    {
                                      "value": "filename",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "else:\n            unique_filename = f\"{uuid.uuid4()}{file_ext}\"",
                          "children": [
                            {
                              "value": "unique_filename = f\"{uuid.uuid4()}{file_ext}\"",
                              "children": [
                                {
                                  "value": "unique_filename = f\"{uuid.uuid4()}{file_ext}\"",
                                  "children": [
                                    {
                                      "value": "unique_filename = f\"{uuid.uuid4()}{file_ext}\"",
                                      "children": [
                                        {
                                          "value": "unique_filename",
                                          "children": []
                                        },
                                        {
                                          "value": "f\"{uuid.uuid4()}{file_ext}\"",
                                          "children": [
                                            {
                                              "value": "f\"",
                                              "children": []
                                            },
                                            {
                                              "value": "{uuid.uuid4()}",
                                              "children": [
                                                {
                                                  "value": "uuid.uuid4()",
                                                  "children": [
                                                    {
                                                      "value": "uuid.uuid4",
                                                      "children": [
                                                        {
                                                          "value": "uuid",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "uuid4",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "()",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "{file_ext}",
                                              "children": [
                                                {
                                                  "value": "file_ext",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "# Construct storage path",
                      "children": []
                    },
                    {
                      "value": "media_type = \"images\" if content_type in ALLOWED_IMAGE_TYPES else \"videos\"",
                      "children": [
                        {
                          "value": "media_type = \"images\" if content_type in ALLOWED_IMAGE_TYPES else \"videos\"",
                          "children": [
                            {
                              "value": "media_type",
                              "children": []
                            },
                            {
                              "value": "\"images\" if content_type in ALLOWED_IMAGE_TYPES else \"videos\"",
                              "children": [
                                {
                                  "value": "\"images\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "images",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "content_type in ALLOWED_IMAGE_TYPES",
                                  "children": [
                                    {
                                      "value": "content_type",
                                      "children": []
                                    },
                                    {
                                      "value": "ALLOWED_IMAGE_TYPES",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "\"videos\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "videos",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "storage_path = f\"users/{user_id}/{media_type}/{unique_filename}\"",
                      "children": [
                        {
                          "value": "storage_path = f\"users/{user_id}/{media_type}/{unique_filename}\"",
                          "children": [
                            {
                              "value": "storage_path",
                              "children": []
                            },
                            {
                              "value": "f\"users/{user_id}/{media_type}/{unique_filename}\"",
                              "children": [
                                {
                                  "value": "f\"",
                                  "children": []
                                },
                                {
                                  "value": "users/",
                                  "children": []
                                },
                                {
                                  "value": "{user_id}",
                                  "children": [
                                    {
                                      "value": "user_id",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "/",
                                  "children": []
                                },
                                {
                                  "value": "{media_type}",
                                  "children": [
                                    {
                                      "value": "media_type",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "/",
                                  "children": []
                                },
                                {
                                  "value": "{unique_filename}",
                                  "children": [
                                    {
                                      "value": "unique_filename",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "try:\n            storage_client = storage.Client()\n            bucket = storage_client.bucket(settings.config.media_gcs_bucket_name)\n            blob = bucket.blob(storage_path)\n            blob.content_type = content_type\n\n            file_bytes = await file.read()\n            blob.upload_from_string(file_bytes, content_type=content_type)\n\n            public_url = blob.public_url\n\n            logger.info(f\"Successfully uploaded file to: {storage_path}\")\n            return public_url\n\n        except Exception as e:\n            logger.error(f\"GCS storage error: {str(e)}\")\n            raise backend.server.v2.store.exceptions.StorageUploadError(\n                \"Failed to upload file to storage\"\n            ) from e",
                      "children": [
                        {
                          "value": "storage_client = storage.Client()\n            bucket = storage_client.bucket(settings.config.media_gcs_bucket_name)\n            blob = bucket.blob(storage_path)\n            blob.content_type = content_type\n\n            file_bytes = await file.read()\n            blob.upload_from_string(file_bytes, content_type=content_type)\n\n            public_url = blob.public_url\n\n            logger.info(f\"Successfully uploaded file to: {storage_path}\")\n            return public_url",
                          "children": [
                            {
                              "value": "storage_client = storage.Client()",
                              "children": [
                                {
                                  "value": "storage_client = storage.Client()",
                                  "children": [
                                    {
                                      "value": "storage_client",
                                      "children": []
                                    },
                                    {
                                      "value": "storage.Client()",
                                      "children": [
                                        {
                                          "value": "storage.Client",
                                          "children": [
                                            {
                                              "value": "storage",
                                              "children": []
                                            },
                                            {
                                              "value": "Client",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "()",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "bucket = storage_client.bucket(settings.config.media_gcs_bucket_name)",
                              "children": [
                                {
                                  "value": "bucket = storage_client.bucket(settings.config.media_gcs_bucket_name)",
                                  "children": [
                                    {
                                      "value": "bucket",
                                      "children": []
                                    },
                                    {
                                      "value": "storage_client.bucket(settings.config.media_gcs_bucket_name)",
                                      "children": [
                                        {
                                          "value": "storage_client.bucket",
                                          "children": [
                                            {
                                              "value": "storage_client",
                                              "children": []
                                            },
                                            {
                                              "value": "bucket",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(settings.config.media_gcs_bucket_name)",
                                          "children": [
                                            {
                                              "value": "settings.config.media_gcs_bucket_name",
                                              "children": [
                                                {
                                                  "value": "settings.config",
                                                  "children": [
                                                    {
                                                      "value": "settings",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "config",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "media_gcs_bucket_name",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "blob = bucket.blob(storage_path)",
                              "children": [
                                {
                                  "value": "blob = bucket.blob(storage_path)",
                                  "children": [
                                    {
                                      "value": "blob",
                                      "children": []
                                    },
                                    {
                                      "value": "bucket.blob(storage_path)",
                                      "children": [
                                        {
                                          "value": "bucket.blob",
                                          "children": [
                                            {
                                              "value": "bucket",
                                              "children": []
                                            },
                                            {
                                              "value": "blob",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(storage_path)",
                                          "children": [
                                            {
                                              "value": "storage_path",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "blob.content_type = content_type",
                              "children": [
                                {
                                  "value": "blob.content_type = content_type",
                                  "children": [
                                    {
                                      "value": "blob.content_type",
                                      "children": [
                                        {
                                          "value": "blob",
                                          "children": []
                                        },
                                        {
                                          "value": "content_type",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "content_type",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "file_bytes = await file.read()",
                              "children": [
                                {
                                  "value": "file_bytes = await file.read()",
                                  "children": [
                                    {
                                      "value": "file_bytes",
                                      "children": []
                                    },
                                    {
                                      "value": "await file.read()",
                                      "children": [
                                        {
                                          "value": "file.read()",
                                          "children": [
                                            {
                                              "value": "file.read",
                                              "children": [
                                                {
                                                  "value": "file",
                                                  "children": []
                                                },
                                                {
                                                  "value": "read",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "()",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "blob.upload_from_string(file_bytes, content_type=content_type)",
                              "children": [
                                {
                                  "value": "blob.upload_from_string(file_bytes, content_type=content_type)",
                                  "children": [
                                    {
                                      "value": "blob.upload_from_string",
                                      "children": [
                                        {
                                          "value": "blob",
                                          "children": []
                                        },
                                        {
                                          "value": "upload_from_string",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(file_bytes, content_type=content_type)",
                                      "children": [
                                        {
                                          "value": "file_bytes",
                                          "children": []
                                        },
                                        {
                                          "value": "content_type=content_type",
                                          "children": [
                                            {
                                              "value": "content_type",
                                              "children": []
                                            },
                                            {
                                              "value": "content_type",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "public_url = blob.public_url",
                              "children": [
                                {
                                  "value": "public_url = blob.public_url",
                                  "children": [
                                    {
                                      "value": "public_url",
                                      "children": []
                                    },
                                    {
                                      "value": "blob.public_url",
                                      "children": [
                                        {
                                          "value": "blob",
                                          "children": []
                                        },
                                        {
                                          "value": "public_url",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "logger.info(f\"Successfully uploaded file to: {storage_path}\")",
                              "children": [
                                {
                                  "value": "logger.info(f\"Successfully uploaded file to: {storage_path}\")",
                                  "children": [
                                    {
                                      "value": "logger.info",
                                      "children": [
                                        {
                                          "value": "logger",
                                          "children": []
                                        },
                                        {
                                          "value": "info",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(f\"Successfully uploaded file to: {storage_path}\")",
                                      "children": [
                                        {
                                          "value": "f\"Successfully uploaded file to: {storage_path}\"",
                                          "children": [
                                            {
                                              "value": "f\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Successfully uploaded file to:",
                                              "children": []
                                            },
                                            {
                                              "value": "{storage_path}",
                                              "children": [
                                                {
                                                  "value": "storage_path",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "return public_url",
                              "children": [
                                {
                                  "value": "public_url",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "except Exception as e:\n            logger.error(f\"GCS storage error: {str(e)}\")\n            raise backend.server.v2.store.exceptions.StorageUploadError(\n                \"Failed to upload file to storage\"\n            ) from e",
                          "children": [
                            {
                              "value": "Exception as e",
                              "children": [
                                {
                                  "value": "Exception",
                                  "children": []
                                },
                                {
                                  "value": "e",
                                  "children": [
                                    {
                                      "value": "e",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "logger.error(f\"GCS storage error: {str(e)}\")\n            raise backend.server.v2.store.exceptions.StorageUploadError(\n                \"Failed to upload file to storage\"\n            ) from e",
                              "children": [
                                {
                                  "value": "logger.error(f\"GCS storage error: {str(e)}\")",
                                  "children": [
                                    {
                                      "value": "logger.error(f\"GCS storage error: {str(e)}\")",
                                      "children": [
                                        {
                                          "value": "logger.error",
                                          "children": [
                                            {
                                              "value": "logger",
                                              "children": []
                                            },
                                            {
                                              "value": "error",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(f\"GCS storage error: {str(e)}\")",
                                          "children": [
                                            {
                                              "value": "f\"GCS storage error: {str(e)}\"",
                                              "children": [
                                                {
                                                  "value": "f\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "GCS storage error:",
                                                  "children": []
                                                },
                                                {
                                                  "value": "{str(e)}",
                                                  "children": [
                                                    {
                                                      "value": "str(e)",
                                                      "children": [
                                                        {
                                                          "value": "str",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "(e)",
                                                          "children": [
                                                            {
                                                              "value": "e",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "raise backend.server.v2.store.exceptions.StorageUploadError(\n                \"Failed to upload file to storage\"\n            ) from e",
                                  "children": [
                                    {
                                      "value": "backend.server.v2.store.exceptions.StorageUploadError(\n                \"Failed to upload file to storage\"\n            )",
                                      "children": [
                                        {
                                          "value": "backend.server.v2.store.exceptions.StorageUploadError",
                                          "children": [
                                            {
                                              "value": "backend.server.v2.store.exceptions",
                                              "children": [
                                                {
                                                  "value": "backend.server.v2.store",
                                                  "children": [
                                                    {
                                                      "value": "backend.server.v2",
                                                      "children": [
                                                        {
                                                          "value": "backend.server",
                                                          "children": [
                                                            {
                                                              "value": "backend",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "server",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "v2",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "store",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "exceptions",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "StorageUploadError",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(\n                \"Failed to upload file to storage\"\n            )",
                                          "children": [
                                            {
                                              "value": "\"Failed to upload file to storage\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "Failed to upload file to storage",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "e",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "except backend.server.v2.store.exceptions.MediaUploadError:\n        raise",
                  "children": [
                    {
                      "value": "backend.server.v2.store.exceptions.MediaUploadError",
                      "children": [
                        {
                          "value": "backend.server.v2.store.exceptions",
                          "children": [
                            {
                              "value": "backend.server.v2.store",
                              "children": [
                                {
                                  "value": "backend.server.v2",
                                  "children": [
                                    {
                                      "value": "backend.server",
                                      "children": [
                                        {
                                          "value": "backend",
                                          "children": []
                                        },
                                        {
                                          "value": "server",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "v2",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "store",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "exceptions",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "MediaUploadError",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "raise",
                      "children": [
                        {
                          "value": "raise",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "except Exception as e:\n        logger.exception(\"Unexpected error in upload_media\")\n        raise backend.server.v2.store.exceptions.MediaUploadError(\n            \"Unexpected error during media upload\"\n        ) from e",
                  "children": [
                    {
                      "value": "Exception as e",
                      "children": [
                        {
                          "value": "Exception",
                          "children": []
                        },
                        {
                          "value": "e",
                          "children": [
                            {
                              "value": "e",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "logger.exception(\"Unexpected error in upload_media\")\n        raise backend.server.v2.store.exceptions.MediaUploadError(\n            \"Unexpected error during media upload\"\n        ) from e",
                      "children": [
                        {
                          "value": "logger.exception(\"Unexpected error in upload_media\")",
                          "children": [
                            {
                              "value": "logger.exception(\"Unexpected error in upload_media\")",
                              "children": [
                                {
                                  "value": "logger.exception",
                                  "children": [
                                    {
                                      "value": "logger",
                                      "children": []
                                    },
                                    {
                                      "value": "exception",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(\"Unexpected error in upload_media\")",
                                  "children": [
                                    {
                                      "value": "\"Unexpected error in upload_media\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Unexpected error in upload_media",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "raise backend.server.v2.store.exceptions.MediaUploadError(\n            \"Unexpected error during media upload\"\n        ) from e",
                          "children": [
                            {
                              "value": "backend.server.v2.store.exceptions.MediaUploadError(\n            \"Unexpected error during media upload\"\n        )",
                              "children": [
                                {
                                  "value": "backend.server.v2.store.exceptions.MediaUploadError",
                                  "children": [
                                    {
                                      "value": "backend.server.v2.store.exceptions",
                                      "children": [
                                        {
                                          "value": "backend.server.v2.store",
                                          "children": [
                                            {
                                              "value": "backend.server.v2",
                                              "children": [
                                                {
                                                  "value": "backend.server",
                                                  "children": [
                                                    {
                                                      "value": "backend",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "server",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "v2",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "store",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "exceptions",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "MediaUploadError",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(\n            \"Unexpected error during media upload\"\n        )",
                                  "children": [
                                    {
                                      "value": "\"Unexpected error during media upload\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Unexpected error during media upload",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "e",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}