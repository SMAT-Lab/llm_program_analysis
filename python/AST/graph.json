{
  "value": "import asyncio\nimport logging\nimport uuid\nfrom collections import defaultdict\nfrom datetime import datetime, timezone\nfrom typing import Any, Literal, Optional, Type\n\nimport prisma\nfrom prisma.models import AgentGraph, AgentGraphExecution, AgentNode, AgentNodeLink\nfrom prisma.types import AgentGraphWhereInput\nfrom pydantic.fields import computed_field\n\nfrom backend.blocks.agent import AgentExecutorBlock\nfrom backend.blocks.basic import AgentInputBlock, AgentOutputBlock\nfrom backend.util import json\n\nfrom .block import BlockInput, BlockType, get_block, get_blocks\nfrom .db import BaseDbModel, transaction\nfrom .execution import ExecutionStatus\nfrom .includes import AGENT_GRAPH_INCLUDE, AGENT_NODE_INCLUDE\nfrom .integrations import Webhook\n\nlogger = logging.getLogger(__name__)\n\n\nclass Link(BaseDbModel):\n    source_id: str\n    sink_id: str\n    source_name: str\n    sink_name: str\n    is_static: bool = False\n\n    @staticmethod\n    def from_db(link: AgentNodeLink):\n        return Link(\n            id=link.id,\n            source_name=link.sourceName,\n            source_id=link.agentNodeSourceId,\n            sink_name=link.sinkName,\n            sink_id=link.agentNodeSinkId,\n            is_static=link.isStatic,\n        )\n\n    def __hash__(self):\n        return hash((self.source_id, self.sink_id, self.source_name, self.sink_name))\n\n\nclass Node(BaseDbModel):\n    block_id: str\n    input_default: BlockInput = {}  # dict[input_name, default_value]\n    metadata: dict[str, Any] = {}\n    input_links: list[Link] = []\n    output_links: list[Link] = []\n\n    webhook_id: Optional[str] = None\n\n\nclass NodeModel(Node):\n    graph_id: str\n    graph_version: int\n\n    webhook: Optional[Webhook] = None\n\n    @staticmethod\n    def from_db(node: AgentNode):\n        if not node.AgentBlock:\n            raise ValueError(f\"Invalid node {node.id}, invalid AgentBlock.\")\n        obj = NodeModel(\n            id=node.id,\n            block_id=node.AgentBlock.id,\n            input_default=json.loads(node.constantInput, target_type=dict[str, Any]),\n            metadata=json.loads(node.metadata, target_type=dict[str, Any]),\n            graph_id=node.agentGraphId,\n            graph_version=node.agentGraphVersion,\n            webhook_id=node.webhookId,\n            webhook=Webhook.from_db(node.Webhook) if node.Webhook else None,\n        )\n        obj.input_links = [Link.from_db(link) for link in node.Input or []]\n        obj.output_links = [Link.from_db(link) for link in node.Output or []]\n        return obj\n\n    def is_triggered_by_event_type(self, event_type: str) -> bool:\n        if not (block := get_block(self.block_id)):\n            raise ValueError(f\"Block #{self.block_id} not found for node #{self.id}\")\n        if not block.webhook_config:\n            raise TypeError(\"This method can't be used on non-webhook blocks\")\n        if not block.webhook_config.event_filter_input:\n            return True\n        event_filter = self.input_default.get(block.webhook_config.event_filter_input)\n        if not event_filter:\n            raise ValueError(f\"Event filter is not configured on node #{self.id}\")\n        return event_type in [\n            block.webhook_config.event_format.format(event=k)\n            for k in event_filter\n            if event_filter[k] is True\n        ]\n\n\n# Fix 2-way reference Node <-> Webhook\nWebhook.model_rebuild()\n\n\nclass GraphExecution(BaseDbModel):\n    execution_id: str\n    started_at: datetime\n    ended_at: datetime\n    duration: float\n    total_run_time: float\n    status: ExecutionStatus\n    graph_id: str\n    graph_version: int\n\n    @staticmethod\n    def from_db(execution: AgentGraphExecution):\n        now = datetime.now(timezone.utc)\n        start_time = execution.startedAt or execution.createdAt\n        end_time = execution.updatedAt or now\n        duration = (end_time - start_time).total_seconds()\n        total_run_time = duration\n\n        try:\n            stats = json.loads(execution.stats or \"{}\", target_type=dict[str, Any])\n        except ValueError:\n            stats = {}\n\n        duration = stats.get(\"walltime\", duration)\n        total_run_time = stats.get(\"nodes_walltime\", total_run_time)\n\n        return GraphExecution(\n            id=execution.id,\n            execution_id=execution.id,\n            started_at=start_time,\n            ended_at=end_time,\n            duration=duration,\n            total_run_time=total_run_time,\n            status=ExecutionStatus(execution.executionStatus),\n            graph_id=execution.agentGraphId,\n            graph_version=execution.agentGraphVersion,\n        )\n\n\nclass Graph(BaseDbModel):\n    version: int = 1\n    is_active: bool = True\n    is_template: bool = False\n    name: str\n    description: str\n    nodes: list[Node] = []\n    links: list[Link] = []\n\n    @computed_field\n    @property\n    def input_schema(self) -> dict[str, Any]:\n        return self._generate_schema(\n            AgentInputBlock.Input,\n            [\n                node.input_default\n                for node in self.nodes\n                if (b := get_block(node.block_id))\n                and b.block_type == BlockType.INPUT\n                and \"name\" in node.input_default\n            ],\n        )\n\n    @computed_field\n    @property\n    def output_schema(self) -> dict[str, Any]:\n        return self._generate_schema(\n            AgentOutputBlock.Input,\n            [\n                node.input_default\n                for node in self.nodes\n                if (b := get_block(node.block_id))\n                and b.block_type == BlockType.OUTPUT\n                and \"name\" in node.input_default\n            ],\n        )\n\n    @staticmethod\n    def _generate_schema(\n        type_class: Type[AgentInputBlock.Input] | Type[AgentOutputBlock.Input],\n        data: list[dict],\n    ) -> dict[str, Any]:\n        props = []\n        for p in data:\n            try:\n                props.append(type_class(**p))\n            except Exception as e:\n                logger.warning(f\"Invalid {type_class}: {p}, {e}\")\n\n        return {\n            \"type\": \"object\",\n            \"properties\": {\n                p.name: {\n                    \"secret\": p.secret,\n                    \"advanced\": p.advanced,\n                    \"title\": p.title or p.name,\n                    **({\"description\": p.description} if p.description else {}),\n                    **({\"default\": p.value} if p.value is not None else {}),\n                }\n                for p in props\n            },\n            \"required\": [p.name for p in props if p.value is None],\n        }\n\n\nclass GraphModel(Graph):\n    user_id: str\n    nodes: list[NodeModel] = []  # type: ignore\n\n    @property\n    def starting_nodes(self) -> list[Node]:\n        outbound_nodes = {link.sink_id for link in self.links}\n        input_nodes = {\n            v.id\n            for v in self.nodes\n            if (b := get_block(v.block_id)) and b.block_type == BlockType.INPUT\n        }\n        return [\n            node\n            for node in self.nodes\n            if node.id not in outbound_nodes or node.id in input_nodes\n        ]\n\n    def reassign_ids(self, user_id: str, reassign_graph_id: bool = False):\n        \"\"\"\n        Reassigns all IDs in the graph to new UUIDs.\n        This method can be used before storing a new graph to the database.\n        \"\"\"\n\n        # Reassign Graph ID\n        id_map = {node.id: str(uuid.uuid4()) for node in self.nodes}\n        if reassign_graph_id:\n            self.id = str(uuid.uuid4())\n\n        # Reassign Node IDs\n        for node in self.nodes:\n            node.id = id_map[node.id]\n\n        # Reassign Link IDs\n        for link in self.links:\n            link.source_id = id_map[link.source_id]\n            link.sink_id = id_map[link.sink_id]\n\n        # Reassign User IDs for agent blocks\n        for node in self.nodes:\n            if node.block_id != AgentExecutorBlock().id:\n                continue\n            node.input_default[\"user_id\"] = user_id\n            node.input_default.setdefault(\"data\", {})\n\n        self.validate_graph()\n\n    def validate_graph(self, for_run: bool = False):\n        def sanitize(name):\n            return name.split(\"_#_\")[0].split(\"_@_\")[0].split(\"_$_\")[0]\n\n        input_links = defaultdict(list)\n        for link in self.links:\n            input_links[link.sink_id].append(link)\n\n        # Nodes: required fields are filled or connected and dependencies are satisfied\n        for node in self.nodes:\n            block = get_block(node.block_id)\n            if block is None:\n                raise ValueError(f\"Invalid block {node.block_id} for node #{node.id}\")\n\n            provided_inputs = set(\n                [sanitize(name) for name in node.input_default]\n                + [sanitize(link.sink_name) for link in input_links.get(node.id, [])]\n            )\n            for name in block.input_schema.get_required_fields():\n                if (\n                    name not in provided_inputs\n                    and not (\n                        name == \"payload\"\n                        and block.block_type\n                        in (BlockType.WEBHOOK, BlockType.WEBHOOK_MANUAL)\n                    )\n                    and (\n                        for_run  # Skip input completion validation, unless when executing.\n                        or block.block_type == BlockType.INPUT\n                        or block.block_type == BlockType.OUTPUT\n                        or block.block_type == BlockType.AGENT\n                    )\n                ):\n                    raise ValueError(\n                        f\"Node {block.name} #{node.id} required input missing: `{name}`\"\n                    )\n\n            # Get input schema properties and check dependencies\n            input_schema = block.input_schema.model_fields\n            required_fields = block.input_schema.get_required_fields()\n\n            def has_value(name):\n                return (\n                    node is not None\n                    and name in node.input_default\n                    and node.input_default[name] is not None\n                    and str(node.input_default[name]).strip() != \"\"\n                ) or (name in input_schema and input_schema[name].default is not None)\n\n            # Validate dependencies between fields\n            for field_name, field_info in input_schema.items():\n                # Apply input dependency validation only on run & field with depends_on\n                json_schema_extra = field_info.json_schema_extra or {}\n                dependencies = json_schema_extra.get(\"depends_on\", [])\n                if not for_run or not dependencies:\n                    continue\n\n                # Check if dependent field has value in input_default\n                field_has_value = has_value(field_name)\n                field_is_required = field_name in required_fields\n\n                # Check for missing dependencies when dependent field is present\n                missing_deps = [dep for dep in dependencies if not has_value(dep)]\n                if missing_deps and (field_has_value or field_is_required):\n                    raise ValueError(\n                        f\"Node {block.name} #{node.id}: Field `{field_name}` requires [{', '.join(missing_deps)}] to be set\"\n                    )\n\n        node_map = {v.id: v for v in self.nodes}\n\n        def is_static_output_block(nid: str) -> bool:\n            bid = node_map[nid].block_id\n            b = get_block(bid)\n            return b.static_output if b else False\n\n        # Links: links are connected and the connected pin data type are compatible.\n        for link in self.links:\n            source = (link.source_id, link.source_name)\n            sink = (link.sink_id, link.sink_name)\n            suffix = f\"Link {source} <-> {sink}\"\n\n            for i, (node_id, name) in enumerate([source, sink]):\n                node = node_map.get(node_id)\n                if not node:\n                    raise ValueError(\n                        f\"{suffix}, {node_id} is invalid node id, available nodes: {node_map.keys()}\"\n                    )\n\n                block = get_block(node.block_id)\n                if not block:\n                    blocks = {v().id: v().name for v in get_blocks().values()}\n                    raise ValueError(\n                        f\"{suffix}, {node.block_id} is invalid block id, available blocks: {blocks}\"\n                    )\n\n                sanitized_name = sanitize(name)\n                vals = node.input_default\n                if i == 0:\n                    fields = (\n                        block.output_schema.get_fields()\n                        if block.block_type != BlockType.AGENT\n                        else vals.get(\"output_schema\", {}).get(\"properties\", {}).keys()\n                    )\n                else:\n                    fields = (\n                        block.input_schema.get_fields()\n                        if block.block_type != BlockType.AGENT\n                        else vals.get(\"input_schema\", {}).get(\"properties\", {}).keys()\n                    )\n                if sanitized_name not in fields:\n                    fields_msg = f\"Allowed fields: {fields}\"\n                    raise ValueError(f\"{suffix}, `{name}` invalid, {fields_msg}\")\n\n            if is_static_output_block(link.source_id):\n                link.is_static = True  # Each value block output should be static.\n\n    @staticmethod\n    def from_db(graph: AgentGraph, for_export: bool = False):\n        return GraphModel(\n            id=graph.id,\n            user_id=graph.userId,\n            version=graph.version,\n            is_active=graph.isActive,\n            is_template=graph.isTemplate,\n            name=graph.name or \"\",\n            description=graph.description or \"\",\n            nodes=[\n                NodeModel.from_db(GraphModel._process_node(node, for_export))\n                for node in graph.AgentNodes or []\n            ],\n            links=list(\n                {\n                    Link.from_db(link)\n                    for node in graph.AgentNodes or []\n                    for link in (node.Input or []) + (node.Output or [])\n                }\n            ),\n        )\n\n    @staticmethod\n    def _process_node(node: AgentNode, for_export: bool) -> AgentNode:\n        if for_export:\n            # Remove credentials from node input\n            if node.constantInput:\n                constant_input = json.loads(\n                    node.constantInput, target_type=dict[str, Any]\n                )\n                constant_input = GraphModel._hide_node_input_credentials(constant_input)\n                node.constantInput = json.dumps(constant_input)\n\n            # Remove webhook info\n            node.webhookId = None\n            node.Webhook = None\n\n        return node\n\n    @staticmethod\n    def _hide_node_input_credentials(input_data: dict[str, Any]) -> dict[str, Any]:\n        sensitive_keys = [\"credentials\", \"api_key\", \"password\", \"token\", \"secret\"]\n        result = {}\n        for key, value in input_data.items():\n            if isinstance(value, dict):\n                result[key] = GraphModel._hide_node_input_credentials(value)\n            elif isinstance(value, str) and any(\n                sensitive_key in key.lower() for sensitive_key in sensitive_keys\n            ):\n                # Skip this key-value pair in the result\n                continue\n            else:\n                result[key] = value\n        return result\n\n\n# --------------------- CRUD functions --------------------- #\n\n\nasync def get_node(node_id: str) -> NodeModel:\n    node = await AgentNode.prisma().find_unique_or_raise(\n        where={\"id\": node_id},\n        include=AGENT_NODE_INCLUDE,\n    )\n    return NodeModel.from_db(node)\n\n\nasync def set_node_webhook(node_id: str, webhook_id: str | None) -> NodeModel:\n    node = await AgentNode.prisma().update(\n        where={\"id\": node_id},\n        data=(\n            {\"Webhook\": {\"connect\": {\"id\": webhook_id}}}\n            if webhook_id\n            else {\"Webhook\": {\"disconnect\": True}}\n        ),\n        include=AGENT_NODE_INCLUDE,\n    )\n    if not node:\n        raise ValueError(f\"Node #{node_id} not found\")\n    return NodeModel.from_db(node)\n\n\nasync def get_graphs(\n    user_id: str,\n    filter_by: Literal[\"active\", \"template\"] | None = \"active\",\n) -> list[GraphModel]:\n    \"\"\"\n    Retrieves graph metadata objects.\n    Default behaviour is to get all currently active graphs.\n\n    Args:\n        filter_by: An optional filter to either select templates or active graphs.\n        user_id: The ID of the user that owns the graph.\n\n    Returns:\n        list[GraphModel]: A list of objects representing the retrieved graphs.\n    \"\"\"\n    where_clause: AgentGraphWhereInput = {\"userId\": user_id}\n\n    if filter_by == \"active\":\n        where_clause[\"isActive\"] = True\n    elif filter_by == \"template\":\n        where_clause[\"isTemplate\"] = True\n\n    graphs = await AgentGraph.prisma().find_many(\n        where=where_clause,\n        distinct=[\"id\"],\n        order={\"version\": \"desc\"},\n        include=AGENT_GRAPH_INCLUDE,\n    )\n\n    graph_models = []\n    for graph in graphs:\n        try:\n            graph_models.append(GraphModel.from_db(graph))\n        except Exception as e:\n            logger.error(f\"Error processing graph {graph.id}: {e}\")\n            continue\n\n    return graph_models\n\n\nasync def get_executions(user_id: str) -> list[GraphExecution]:\n    executions = await AgentGraphExecution.prisma().find_many(\n        where={\"userId\": user_id},\n        order={\"createdAt\": \"desc\"},\n    )\n    return [GraphExecution.from_db(execution) for execution in executions]\n\n\nasync def get_execution(user_id: str, execution_id: str) -> GraphExecution | None:\n    execution = await AgentGraphExecution.prisma().find_first(\n        where={\"id\": execution_id, \"userId\": user_id}\n    )\n    return GraphExecution.from_db(execution) if execution else None\n\n\nasync def get_graph(\n    graph_id: str,\n    version: int | None = None,\n    template: bool = False,\n    user_id: str | None = None,\n    for_export: bool = False,\n) -> GraphModel | None:\n    \"\"\"\n    Retrieves a graph from the DB.\n    Defaults to the version with `is_active` if `version` is not passed,\n    or the latest version with `is_template` if `template=True`.\n\n    Returns `None` if the record is not found.\n    \"\"\"\n    where_clause: AgentGraphWhereInput = {\n        \"id\": graph_id,\n    }\n    if version is not None:\n        where_clause[\"version\"] = version\n    elif not template:\n        where_clause[\"isActive\"] = True\n\n    # TODO: Fix hack workaround to get adding store agents to work\n    if user_id is not None and not template:\n        where_clause[\"userId\"] = user_id\n\n    graph = await AgentGraph.prisma().find_first(\n        where=where_clause,\n        include=AGENT_GRAPH_INCLUDE,\n        order={\"version\": \"desc\"},\n    )\n    return GraphModel.from_db(graph, for_export) if graph else None\n\n\nasync def set_graph_active_version(graph_id: str, version: int, user_id: str) -> None:\n    # Activate the requested version if it exists and is owned by the user.\n    updated_count = await AgentGraph.prisma().update_many(\n        data={\"isActive\": True},\n        where={\n            \"id\": graph_id,\n            \"version\": version,\n            \"userId\": user_id,\n        },\n    )\n    if updated_count == 0:\n        raise Exception(f\"Graph #{graph_id} v{version} not found or not owned by user\")\n\n    # Deactivate all other versions.\n    await AgentGraph.prisma().update_many(\n        data={\"isActive\": False},\n        where={\n            \"id\": graph_id,\n            \"version\": {\"not\": version},\n            \"userId\": user_id,\n            \"isActive\": True,\n        },\n    )\n\n\nasync def get_graph_all_versions(graph_id: str, user_id: str) -> list[GraphModel]:\n    graph_versions = await AgentGraph.prisma().find_many(\n        where={\"id\": graph_id, \"userId\": user_id},\n        order={\"version\": \"desc\"},\n        include=AGENT_GRAPH_INCLUDE,\n    )\n\n    if not graph_versions:\n        return []\n\n    return [GraphModel.from_db(graph) for graph in graph_versions]\n\n\nasync def delete_graph(graph_id: str, user_id: str) -> int:\n    entries_count = await AgentGraph.prisma().delete_many(\n        where={\"id\": graph_id, \"userId\": user_id}\n    )\n    if entries_count:\n        logger.info(f\"Deleted {entries_count} graph entries for Graph #{graph_id}\")\n    return entries_count\n\n\nasync def create_graph(graph: Graph, user_id: str) -> GraphModel:\n    async with transaction() as tx:\n        await __create_graph(tx, graph, user_id)\n\n    if created_graph := await get_graph(\n        graph.id, graph.version, graph.is_template, user_id=user_id\n    ):\n        return created_graph\n\n    raise ValueError(f\"Created graph {graph.id} v{graph.version} is not in DB\")\n\n\nasync def __create_graph(tx, graph: Graph, user_id: str):\n    await AgentGraph.prisma(tx).create(\n        data={\n            \"id\": graph.id,\n            \"version\": graph.version,\n            \"name\": graph.name,\n            \"description\": graph.description,\n            \"isTemplate\": graph.is_template,\n            \"isActive\": graph.is_active,\n            \"userId\": user_id,\n        }\n    )\n\n    await asyncio.gather(\n        *[\n            AgentNode.prisma(tx).create(\n                {\n                    \"id\": node.id,\n                    \"agentBlockId\": node.block_id,\n                    \"agentGraphId\": graph.id,\n                    \"agentGraphVersion\": graph.version,\n                    \"constantInput\": json.dumps(node.input_default),\n                    \"metadata\": json.dumps(node.metadata),\n                }\n            )\n            for node in graph.nodes\n        ]\n    )\n\n    await asyncio.gather(\n        *[\n            AgentNodeLink.prisma(tx).create(\n                {\n                    \"id\": str(uuid.uuid4()),\n                    \"sourceName\": link.source_name,\n                    \"sinkName\": link.sink_name,\n                    \"agentNodeSourceId\": link.source_id,\n                    \"agentNodeSinkId\": link.sink_id,\n                    \"isStatic\": link.is_static,\n                }\n            )\n            for link in graph.links\n        ]\n    )\n\n\n# ------------------------ UTILITIES ------------------------ #\n\n\ndef make_graph_model(creatable_graph: Graph, user_id: str) -> GraphModel:\n    \"\"\"\n    Convert a Graph to a GraphModel, setting graph_id and graph_version on all nodes.\n\n    Args:\n        creatable_graph (Graph): The creatable graph to convert.\n        user_id (str): The ID of the user creating the graph.\n\n    Returns:\n        GraphModel: The converted Graph object.\n    \"\"\"\n    # Create a new Graph object, inheriting properties from CreatableGraph\n    return GraphModel(\n        **creatable_graph.model_dump(exclude={\"nodes\"}),\n        user_id=user_id,\n        nodes=[\n            NodeModel(\n                **creatable_node.model_dump(),\n                graph_id=creatable_graph.id,\n                graph_version=creatable_graph.version,\n            )\n            for creatable_node in creatable_graph.nodes\n        ],\n    )\n\n\nasync def fix_llm_provider_credentials():\n    \"\"\"Fix node credentials with provider `llm`\"\"\"\n    from backend.integrations.credentials_store import IntegrationCredentialsStore\n\n    from .user import get_user_integrations\n\n    store = IntegrationCredentialsStore()\n\n    broken_nodes = await prisma.get_client().query_raw(\n        \"\"\"\n        SELECT    graph.\"userId\"       user_id,\n                  node.id              node_id,\n                  node.\"constantInput\" node_preset_input\n        FROM      platform.\"AgentNode\"  node\n        LEFT JOIN platform.\"AgentGraph\" graph\n        ON        node.\"agentGraphId\" = graph.id\n        WHERE     node.\"constantInput\"::jsonb->'credentials'->>'provider' = 'llm'\n        ORDER BY  graph.\"userId\";\n        \"\"\"\n    )\n    logger.info(f\"Fixing LLM credential inputs on {len(broken_nodes)} nodes\")\n\n    user_id: str = \"\"\n    user_integrations = None\n    for node in broken_nodes:\n        if node[\"user_id\"] != user_id:\n            # Save queries by only fetching once per user\n            user_id = node[\"user_id\"]\n            user_integrations = await get_user_integrations(user_id)\n        elif not user_integrations:\n            raise RuntimeError(f\"Impossible state while processing node {node}\")\n\n        node_id: str = node[\"node_id\"]\n        node_preset_input: dict = json.loads(node[\"node_preset_input\"])\n        credentials_meta: dict = node_preset_input[\"credentials\"]\n\n        credentials = next(\n            (\n                c\n                for c in user_integrations.credentials\n                if c.id == credentials_meta[\"id\"]\n            ),\n            None,\n        )\n        if not credentials:\n            continue\n        if credentials.type != \"api_key\":\n            logger.warning(\n                f\"User {user_id} credentials {credentials.id} with provider 'llm' \"\n                f\"has invalid type '{credentials.type}'\"\n            )\n            continue\n\n        api_key = credentials.api_key.get_secret_value()\n        if api_key.startswith(\"sk-ant-api03-\"):\n            credentials.provider = credentials_meta[\"provider\"] = \"anthropic\"\n        elif api_key.startswith(\"sk-\"):\n            credentials.provider = credentials_meta[\"provider\"] = \"openai\"\n        elif api_key.startswith(\"gsk_\"):\n            credentials.provider = credentials_meta[\"provider\"] = \"groq\"\n        else:\n            logger.warning(\n                f\"Could not identify provider from key prefix {api_key[:13]}*****\"\n            )\n            continue\n\n        store.update_creds(user_id, credentials)\n        await AgentNode.prisma().update(\n            where={\"id\": node_id},\n            data={\"constantInput\": json.dumps(node_preset_input)},\n        )",
  "children": [
    {
      "value": "import asyncio",
      "children": [
        {
          "value": "asyncio",
          "children": [
            {
              "value": "asyncio",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import logging",
      "children": [
        {
          "value": "logging",
          "children": [
            {
              "value": "logging",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import uuid",
      "children": [
        {
          "value": "uuid",
          "children": [
            {
              "value": "uuid",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from collections import defaultdict",
      "children": [
        {
          "value": "collections",
          "children": [
            {
              "value": "collections",
              "children": []
            }
          ]
        },
        {
          "value": "defaultdict",
          "children": [
            {
              "value": "defaultdict",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from datetime import datetime, timezone",
      "children": [
        {
          "value": "datetime",
          "children": [
            {
              "value": "datetime",
              "children": []
            }
          ]
        },
        {
          "value": "datetime",
          "children": [
            {
              "value": "datetime",
              "children": []
            }
          ]
        },
        {
          "value": "timezone",
          "children": [
            {
              "value": "timezone",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from typing import Any, Literal, Optional, Type",
      "children": [
        {
          "value": "typing",
          "children": [
            {
              "value": "typing",
              "children": []
            }
          ]
        },
        {
          "value": "Any",
          "children": [
            {
              "value": "Any",
              "children": []
            }
          ]
        },
        {
          "value": "Literal",
          "children": [
            {
              "value": "Literal",
              "children": []
            }
          ]
        },
        {
          "value": "Optional",
          "children": [
            {
              "value": "Optional",
              "children": []
            }
          ]
        },
        {
          "value": "Type",
          "children": [
            {
              "value": "Type",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import prisma",
      "children": [
        {
          "value": "prisma",
          "children": [
            {
              "value": "prisma",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from prisma.models import AgentGraph, AgentGraphExecution, AgentNode, AgentNodeLink",
      "children": [
        {
          "value": "prisma.models",
          "children": [
            {
              "value": "prisma",
              "children": []
            },
            {
              "value": "models",
              "children": []
            }
          ]
        },
        {
          "value": "AgentGraph",
          "children": [
            {
              "value": "AgentGraph",
              "children": []
            }
          ]
        },
        {
          "value": "AgentGraphExecution",
          "children": [
            {
              "value": "AgentGraphExecution",
              "children": []
            }
          ]
        },
        {
          "value": "AgentNode",
          "children": [
            {
              "value": "AgentNode",
              "children": []
            }
          ]
        },
        {
          "value": "AgentNodeLink",
          "children": [
            {
              "value": "AgentNodeLink",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from prisma.types import AgentGraphWhereInput",
      "children": [
        {
          "value": "prisma.types",
          "children": [
            {
              "value": "prisma",
              "children": []
            },
            {
              "value": "types",
              "children": []
            }
          ]
        },
        {
          "value": "AgentGraphWhereInput",
          "children": [
            {
              "value": "AgentGraphWhereInput",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from pydantic.fields import computed_field",
      "children": [
        {
          "value": "pydantic.fields",
          "children": [
            {
              "value": "pydantic",
              "children": []
            },
            {
              "value": "fields",
              "children": []
            }
          ]
        },
        {
          "value": "computed_field",
          "children": [
            {
              "value": "computed_field",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.blocks.agent import AgentExecutorBlock",
      "children": [
        {
          "value": "backend.blocks.agent",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "blocks",
              "children": []
            },
            {
              "value": "agent",
              "children": []
            }
          ]
        },
        {
          "value": "AgentExecutorBlock",
          "children": [
            {
              "value": "AgentExecutorBlock",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.blocks.basic import AgentInputBlock, AgentOutputBlock",
      "children": [
        {
          "value": "backend.blocks.basic",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "blocks",
              "children": []
            },
            {
              "value": "basic",
              "children": []
            }
          ]
        },
        {
          "value": "AgentInputBlock",
          "children": [
            {
              "value": "AgentInputBlock",
              "children": []
            }
          ]
        },
        {
          "value": "AgentOutputBlock",
          "children": [
            {
              "value": "AgentOutputBlock",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.util import json",
      "children": [
        {
          "value": "backend.util",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "util",
              "children": []
            }
          ]
        },
        {
          "value": "json",
          "children": [
            {
              "value": "json",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from .block import BlockInput, BlockType, get_block, get_blocks",
      "children": [
        {
          "value": ".block",
          "children": [
            {
              "value": ".",
              "children": []
            },
            {
              "value": "block",
              "children": [
                {
                  "value": "block",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "BlockInput",
          "children": [
            {
              "value": "BlockInput",
              "children": []
            }
          ]
        },
        {
          "value": "BlockType",
          "children": [
            {
              "value": "BlockType",
              "children": []
            }
          ]
        },
        {
          "value": "get_block",
          "children": [
            {
              "value": "get_block",
              "children": []
            }
          ]
        },
        {
          "value": "get_blocks",
          "children": [
            {
              "value": "get_blocks",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from .db import BaseDbModel, transaction",
      "children": [
        {
          "value": ".db",
          "children": [
            {
              "value": ".",
              "children": []
            },
            {
              "value": "db",
              "children": [
                {
                  "value": "db",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "BaseDbModel",
          "children": [
            {
              "value": "BaseDbModel",
              "children": []
            }
          ]
        },
        {
          "value": "transaction",
          "children": [
            {
              "value": "transaction",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from .execution import ExecutionStatus",
      "children": [
        {
          "value": ".execution",
          "children": [
            {
              "value": ".",
              "children": []
            },
            {
              "value": "execution",
              "children": [
                {
                  "value": "execution",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "ExecutionStatus",
          "children": [
            {
              "value": "ExecutionStatus",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from .includes import AGENT_GRAPH_INCLUDE, AGENT_NODE_INCLUDE",
      "children": [
        {
          "value": ".includes",
          "children": [
            {
              "value": ".",
              "children": []
            },
            {
              "value": "includes",
              "children": [
                {
                  "value": "includes",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "AGENT_GRAPH_INCLUDE",
          "children": [
            {
              "value": "AGENT_GRAPH_INCLUDE",
              "children": []
            }
          ]
        },
        {
          "value": "AGENT_NODE_INCLUDE",
          "children": [
            {
              "value": "AGENT_NODE_INCLUDE",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from .integrations import Webhook",
      "children": [
        {
          "value": ".integrations",
          "children": [
            {
              "value": ".",
              "children": []
            },
            {
              "value": "integrations",
              "children": [
                {
                  "value": "integrations",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "Webhook",
          "children": [
            {
              "value": "Webhook",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "logger = logging.getLogger(__name__)",
      "children": [
        {
          "value": "logger = logging.getLogger(__name__)",
          "children": [
            {
              "value": "logger",
              "children": []
            },
            {
              "value": "logging.getLogger(__name__)",
              "children": [
                {
                  "value": "logging.getLogger",
                  "children": [
                    {
                      "value": "logging",
                      "children": []
                    },
                    {
                      "value": "getLogger",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(__name__)",
                  "children": [
                    {
                      "value": "__name__",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class Link(BaseDbModel):\n    source_id: str\n    sink_id: str\n    source_name: str\n    sink_name: str\n    is_static: bool = False\n\n    @staticmethod\n    def from_db(link: AgentNodeLink):\n        return Link(\n            id=link.id,\n            source_name=link.sourceName,\n            source_id=link.agentNodeSourceId,\n            sink_name=link.sinkName,\n            sink_id=link.agentNodeSinkId,\n            is_static=link.isStatic,\n        )\n\n    def __hash__(self):\n        return hash((self.source_id, self.sink_id, self.source_name, self.sink_name))",
      "children": [
        {
          "value": "Link",
          "children": []
        },
        {
          "value": "(BaseDbModel)",
          "children": [
            {
              "value": "BaseDbModel",
              "children": []
            }
          ]
        },
        {
          "value": "source_id: str\n    sink_id: str\n    source_name: str\n    sink_name: str\n    is_static: bool = False\n\n    @staticmethod\n    def from_db(link: AgentNodeLink):\n        return Link(\n            id=link.id,\n            source_name=link.sourceName,\n            source_id=link.agentNodeSourceId,\n            sink_name=link.sinkName,\n            sink_id=link.agentNodeSinkId,\n            is_static=link.isStatic,\n        )\n\n    def __hash__(self):\n        return hash((self.source_id, self.sink_id, self.source_name, self.sink_name))",
          "children": [
            {
              "value": "source_id: str",
              "children": [
                {
                  "value": "source_id: str",
                  "children": [
                    {
                      "value": "source_id",
                      "children": []
                    },
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "sink_id: str",
              "children": [
                {
                  "value": "sink_id: str",
                  "children": [
                    {
                      "value": "sink_id",
                      "children": []
                    },
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "source_name: str",
              "children": [
                {
                  "value": "source_name: str",
                  "children": [
                    {
                      "value": "source_name",
                      "children": []
                    },
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "sink_name: str",
              "children": [
                {
                  "value": "sink_name: str",
                  "children": [
                    {
                      "value": "sink_name",
                      "children": []
                    },
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "is_static: bool = False",
              "children": [
                {
                  "value": "is_static: bool = False",
                  "children": [
                    {
                      "value": "is_static",
                      "children": []
                    },
                    {
                      "value": "bool",
                      "children": [
                        {
                          "value": "bool",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "False",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "@staticmethod\n    def from_db(link: AgentNodeLink):\n        return Link(\n            id=link.id,\n            source_name=link.sourceName,\n            source_id=link.agentNodeSourceId,\n            sink_name=link.sinkName,\n            sink_id=link.agentNodeSinkId,\n            is_static=link.isStatic,\n        )",
              "children": [
                {
                  "value": "@staticmethod",
                  "children": [
                    {
                      "value": "staticmethod",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "def from_db(link: AgentNodeLink):\n        return Link(\n            id=link.id,\n            source_name=link.sourceName,\n            source_id=link.agentNodeSourceId,\n            sink_name=link.sinkName,\n            sink_id=link.agentNodeSinkId,\n            is_static=link.isStatic,\n        )",
                  "children": [
                    {
                      "value": "from_db",
                      "children": []
                    },
                    {
                      "value": "(link: AgentNodeLink)",
                      "children": [
                        {
                          "value": "link: AgentNodeLink",
                          "children": [
                            {
                              "value": "link",
                              "children": []
                            },
                            {
                              "value": "AgentNodeLink",
                              "children": [
                                {
                                  "value": "AgentNodeLink",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return Link(\n            id=link.id,\n            source_name=link.sourceName,\n            source_id=link.agentNodeSourceId,\n            sink_name=link.sinkName,\n            sink_id=link.agentNodeSinkId,\n            is_static=link.isStatic,\n        )",
                      "children": [
                        {
                          "value": "return Link(\n            id=link.id,\n            source_name=link.sourceName,\n            source_id=link.agentNodeSourceId,\n            sink_name=link.sinkName,\n            sink_id=link.agentNodeSinkId,\n            is_static=link.isStatic,\n        )",
                          "children": [
                            {
                              "value": "Link(\n            id=link.id,\n            source_name=link.sourceName,\n            source_id=link.agentNodeSourceId,\n            sink_name=link.sinkName,\n            sink_id=link.agentNodeSinkId,\n            is_static=link.isStatic,\n        )",
                              "children": [
                                {
                                  "value": "Link",
                                  "children": []
                                },
                                {
                                  "value": "(\n            id=link.id,\n            source_name=link.sourceName,\n            source_id=link.agentNodeSourceId,\n            sink_name=link.sinkName,\n            sink_id=link.agentNodeSinkId,\n            is_static=link.isStatic,\n        )",
                                  "children": [
                                    {
                                      "value": "id=link.id",
                                      "children": [
                                        {
                                          "value": "id",
                                          "children": []
                                        },
                                        {
                                          "value": "link.id",
                                          "children": [
                                            {
                                              "value": "link",
                                              "children": []
                                            },
                                            {
                                              "value": "id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "source_name=link.sourceName",
                                      "children": [
                                        {
                                          "value": "source_name",
                                          "children": []
                                        },
                                        {
                                          "value": "link.sourceName",
                                          "children": [
                                            {
                                              "value": "link",
                                              "children": []
                                            },
                                            {
                                              "value": "sourceName",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "source_id=link.agentNodeSourceId",
                                      "children": [
                                        {
                                          "value": "source_id",
                                          "children": []
                                        },
                                        {
                                          "value": "link.agentNodeSourceId",
                                          "children": [
                                            {
                                              "value": "link",
                                              "children": []
                                            },
                                            {
                                              "value": "agentNodeSourceId",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "sink_name=link.sinkName",
                                      "children": [
                                        {
                                          "value": "sink_name",
                                          "children": []
                                        },
                                        {
                                          "value": "link.sinkName",
                                          "children": [
                                            {
                                              "value": "link",
                                              "children": []
                                            },
                                            {
                                              "value": "sinkName",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "sink_id=link.agentNodeSinkId",
                                      "children": [
                                        {
                                          "value": "sink_id",
                                          "children": []
                                        },
                                        {
                                          "value": "link.agentNodeSinkId",
                                          "children": [
                                            {
                                              "value": "link",
                                              "children": []
                                            },
                                            {
                                              "value": "agentNodeSinkId",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "is_static=link.isStatic",
                                      "children": [
                                        {
                                          "value": "is_static",
                                          "children": []
                                        },
                                        {
                                          "value": "link.isStatic",
                                          "children": [
                                            {
                                              "value": "link",
                                              "children": []
                                            },
                                            {
                                              "value": "isStatic",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def __hash__(self):\n        return hash((self.source_id, self.sink_id, self.source_name, self.sink_name))",
              "children": [
                {
                  "value": "__hash__",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "return hash((self.source_id, self.sink_id, self.source_name, self.sink_name))",
                  "children": [
                    {
                      "value": "return hash((self.source_id, self.sink_id, self.source_name, self.sink_name))",
                      "children": [
                        {
                          "value": "hash((self.source_id, self.sink_id, self.source_name, self.sink_name))",
                          "children": [
                            {
                              "value": "hash",
                              "children": []
                            },
                            {
                              "value": "((self.source_id, self.sink_id, self.source_name, self.sink_name))",
                              "children": [
                                {
                                  "value": "(self.source_id, self.sink_id, self.source_name, self.sink_name)",
                                  "children": [
                                    {
                                      "value": "self.source_id",
                                      "children": [
                                        {
                                          "value": "self",
                                          "children": []
                                        },
                                        {
                                          "value": "source_id",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "self.sink_id",
                                      "children": [
                                        {
                                          "value": "self",
                                          "children": []
                                        },
                                        {
                                          "value": "sink_id",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "self.source_name",
                                      "children": [
                                        {
                                          "value": "self",
                                          "children": []
                                        },
                                        {
                                          "value": "source_name",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "self.sink_name",
                                      "children": [
                                        {
                                          "value": "self",
                                          "children": []
                                        },
                                        {
                                          "value": "sink_name",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class Node(BaseDbModel):\n    block_id: str\n    input_default: BlockInput = {}  # dict[input_name, default_value]\n    metadata: dict[str, Any] = {}\n    input_links: list[Link] = []\n    output_links: list[Link] = []\n\n    webhook_id: Optional[str] = None",
      "children": [
        {
          "value": "Node",
          "children": []
        },
        {
          "value": "(BaseDbModel)",
          "children": [
            {
              "value": "BaseDbModel",
              "children": []
            }
          ]
        },
        {
          "value": "block_id: str\n    input_default: BlockInput = {}  # dict[input_name, default_value]\n    metadata: dict[str, Any] = {}\n    input_links: list[Link] = []\n    output_links: list[Link] = []\n\n    webhook_id: Optional[str] = None",
          "children": [
            {
              "value": "block_id: str",
              "children": [
                {
                  "value": "block_id: str",
                  "children": [
                    {
                      "value": "block_id",
                      "children": []
                    },
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "input_default: BlockInput = {}",
              "children": [
                {
                  "value": "input_default: BlockInput = {}",
                  "children": [
                    {
                      "value": "input_default",
                      "children": []
                    },
                    {
                      "value": "BlockInput",
                      "children": [
                        {
                          "value": "BlockInput",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "{}",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "# dict[input_name, default_value]",
              "children": []
            },
            {
              "value": "metadata: dict[str, Any] = {}",
              "children": [
                {
                  "value": "metadata: dict[str, Any] = {}",
                  "children": [
                    {
                      "value": "metadata",
                      "children": []
                    },
                    {
                      "value": "dict[str, Any]",
                      "children": [
                        {
                          "value": "dict[str, Any]",
                          "children": [
                            {
                              "value": "dict",
                              "children": []
                            },
                            {
                              "value": "[str, Any]",
                              "children": [
                                {
                                  "value": "str",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "Any",
                                  "children": [
                                    {
                                      "value": "Any",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "{}",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "input_links: list[Link] = []",
              "children": [
                {
                  "value": "input_links: list[Link] = []",
                  "children": [
                    {
                      "value": "input_links",
                      "children": []
                    },
                    {
                      "value": "list[Link]",
                      "children": [
                        {
                          "value": "list[Link]",
                          "children": [
                            {
                              "value": "list",
                              "children": []
                            },
                            {
                              "value": "[Link]",
                              "children": [
                                {
                                  "value": "Link",
                                  "children": [
                                    {
                                      "value": "Link",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "[]",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "output_links: list[Link] = []",
              "children": [
                {
                  "value": "output_links: list[Link] = []",
                  "children": [
                    {
                      "value": "output_links",
                      "children": []
                    },
                    {
                      "value": "list[Link]",
                      "children": [
                        {
                          "value": "list[Link]",
                          "children": [
                            {
                              "value": "list",
                              "children": []
                            },
                            {
                              "value": "[Link]",
                              "children": [
                                {
                                  "value": "Link",
                                  "children": [
                                    {
                                      "value": "Link",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "[]",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "webhook_id: Optional[str] = None",
              "children": [
                {
                  "value": "webhook_id: Optional[str] = None",
                  "children": [
                    {
                      "value": "webhook_id",
                      "children": []
                    },
                    {
                      "value": "Optional[str]",
                      "children": [
                        {
                          "value": "Optional[str]",
                          "children": [
                            {
                              "value": "Optional",
                              "children": []
                            },
                            {
                              "value": "[str]",
                              "children": [
                                {
                                  "value": "str",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "None",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class NodeModel(Node):\n    graph_id: str\n    graph_version: int\n\n    webhook: Optional[Webhook] = None\n\n    @staticmethod\n    def from_db(node: AgentNode):\n        if not node.AgentBlock:\n            raise ValueError(f\"Invalid node {node.id}, invalid AgentBlock.\")\n        obj = NodeModel(\n            id=node.id,\n            block_id=node.AgentBlock.id,\n            input_default=json.loads(node.constantInput, target_type=dict[str, Any]),\n            metadata=json.loads(node.metadata, target_type=dict[str, Any]),\n            graph_id=node.agentGraphId,\n            graph_version=node.agentGraphVersion,\n            webhook_id=node.webhookId,\n            webhook=Webhook.from_db(node.Webhook) if node.Webhook else None,\n        )\n        obj.input_links = [Link.from_db(link) for link in node.Input or []]\n        obj.output_links = [Link.from_db(link) for link in node.Output or []]\n        return obj\n\n    def is_triggered_by_event_type(self, event_type: str) -> bool:\n        if not (block := get_block(self.block_id)):\n            raise ValueError(f\"Block #{self.block_id} not found for node #{self.id}\")\n        if not block.webhook_config:\n            raise TypeError(\"This method can't be used on non-webhook blocks\")\n        if not block.webhook_config.event_filter_input:\n            return True\n        event_filter = self.input_default.get(block.webhook_config.event_filter_input)\n        if not event_filter:\n            raise ValueError(f\"Event filter is not configured on node #{self.id}\")\n        return event_type in [\n            block.webhook_config.event_format.format(event=k)\n            for k in event_filter\n            if event_filter[k] is True\n        ]",
      "children": [
        {
          "value": "NodeModel",
          "children": []
        },
        {
          "value": "(Node)",
          "children": [
            {
              "value": "Node",
              "children": []
            }
          ]
        },
        {
          "value": "graph_id: str\n    graph_version: int\n\n    webhook: Optional[Webhook] = None\n\n    @staticmethod\n    def from_db(node: AgentNode):\n        if not node.AgentBlock:\n            raise ValueError(f\"Invalid node {node.id}, invalid AgentBlock.\")\n        obj = NodeModel(\n            id=node.id,\n            block_id=node.AgentBlock.id,\n            input_default=json.loads(node.constantInput, target_type=dict[str, Any]),\n            metadata=json.loads(node.metadata, target_type=dict[str, Any]),\n            graph_id=node.agentGraphId,\n            graph_version=node.agentGraphVersion,\n            webhook_id=node.webhookId,\n            webhook=Webhook.from_db(node.Webhook) if node.Webhook else None,\n        )\n        obj.input_links = [Link.from_db(link) for link in node.Input or []]\n        obj.output_links = [Link.from_db(link) for link in node.Output or []]\n        return obj\n\n    def is_triggered_by_event_type(self, event_type: str) -> bool:\n        if not (block := get_block(self.block_id)):\n            raise ValueError(f\"Block #{self.block_id} not found for node #{self.id}\")\n        if not block.webhook_config:\n            raise TypeError(\"This method can't be used on non-webhook blocks\")\n        if not block.webhook_config.event_filter_input:\n            return True\n        event_filter = self.input_default.get(block.webhook_config.event_filter_input)\n        if not event_filter:\n            raise ValueError(f\"Event filter is not configured on node #{self.id}\")\n        return event_type in [\n            block.webhook_config.event_format.format(event=k)\n            for k in event_filter\n            if event_filter[k] is True\n        ]",
          "children": [
            {
              "value": "graph_id: str",
              "children": [
                {
                  "value": "graph_id: str",
                  "children": [
                    {
                      "value": "graph_id",
                      "children": []
                    },
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "graph_version: int",
              "children": [
                {
                  "value": "graph_version: int",
                  "children": [
                    {
                      "value": "graph_version",
                      "children": []
                    },
                    {
                      "value": "int",
                      "children": [
                        {
                          "value": "int",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "webhook: Optional[Webhook] = None",
              "children": [
                {
                  "value": "webhook: Optional[Webhook] = None",
                  "children": [
                    {
                      "value": "webhook",
                      "children": []
                    },
                    {
                      "value": "Optional[Webhook]",
                      "children": [
                        {
                          "value": "Optional[Webhook]",
                          "children": [
                            {
                              "value": "Optional",
                              "children": []
                            },
                            {
                              "value": "[Webhook]",
                              "children": [
                                {
                                  "value": "Webhook",
                                  "children": [
                                    {
                                      "value": "Webhook",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "None",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "@staticmethod\n    def from_db(node: AgentNode):\n        if not node.AgentBlock:\n            raise ValueError(f\"Invalid node {node.id}, invalid AgentBlock.\")\n        obj = NodeModel(\n            id=node.id,\n            block_id=node.AgentBlock.id,\n            input_default=json.loads(node.constantInput, target_type=dict[str, Any]),\n            metadata=json.loads(node.metadata, target_type=dict[str, Any]),\n            graph_id=node.agentGraphId,\n            graph_version=node.agentGraphVersion,\n            webhook_id=node.webhookId,\n            webhook=Webhook.from_db(node.Webhook) if node.Webhook else None,\n        )\n        obj.input_links = [Link.from_db(link) for link in node.Input or []]\n        obj.output_links = [Link.from_db(link) for link in node.Output or []]\n        return obj",
              "children": [
                {
                  "value": "@staticmethod",
                  "children": [
                    {
                      "value": "staticmethod",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "def from_db(node: AgentNode):\n        if not node.AgentBlock:\n            raise ValueError(f\"Invalid node {node.id}, invalid AgentBlock.\")\n        obj = NodeModel(\n            id=node.id,\n            block_id=node.AgentBlock.id,\n            input_default=json.loads(node.constantInput, target_type=dict[str, Any]),\n            metadata=json.loads(node.metadata, target_type=dict[str, Any]),\n            graph_id=node.agentGraphId,\n            graph_version=node.agentGraphVersion,\n            webhook_id=node.webhookId,\n            webhook=Webhook.from_db(node.Webhook) if node.Webhook else None,\n        )\n        obj.input_links = [Link.from_db(link) for link in node.Input or []]\n        obj.output_links = [Link.from_db(link) for link in node.Output or []]\n        return obj",
                  "children": [
                    {
                      "value": "from_db",
                      "children": []
                    },
                    {
                      "value": "(node: AgentNode)",
                      "children": [
                        {
                          "value": "node: AgentNode",
                          "children": [
                            {
                              "value": "node",
                              "children": []
                            },
                            {
                              "value": "AgentNode",
                              "children": [
                                {
                                  "value": "AgentNode",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if not node.AgentBlock:\n            raise ValueError(f\"Invalid node {node.id}, invalid AgentBlock.\")\n        obj = NodeModel(\n            id=node.id,\n            block_id=node.AgentBlock.id,\n            input_default=json.loads(node.constantInput, target_type=dict[str, Any]),\n            metadata=json.loads(node.metadata, target_type=dict[str, Any]),\n            graph_id=node.agentGraphId,\n            graph_version=node.agentGraphVersion,\n            webhook_id=node.webhookId,\n            webhook=Webhook.from_db(node.Webhook) if node.Webhook else None,\n        )\n        obj.input_links = [Link.from_db(link) for link in node.Input or []]\n        obj.output_links = [Link.from_db(link) for link in node.Output or []]\n        return obj",
                      "children": [
                        {
                          "value": "if not node.AgentBlock:\n            raise ValueError(f\"Invalid node {node.id}, invalid AgentBlock.\")",
                          "children": [
                            {
                              "value": "not node.AgentBlock",
                              "children": [
                                {
                                  "value": "node.AgentBlock",
                                  "children": [
                                    {
                                      "value": "node",
                                      "children": []
                                    },
                                    {
                                      "value": "AgentBlock",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "raise ValueError(f\"Invalid node {node.id}, invalid AgentBlock.\")",
                              "children": [
                                {
                                  "value": "raise ValueError(f\"Invalid node {node.id}, invalid AgentBlock.\")",
                                  "children": [
                                    {
                                      "value": "ValueError(f\"Invalid node {node.id}, invalid AgentBlock.\")",
                                      "children": [
                                        {
                                          "value": "ValueError",
                                          "children": []
                                        },
                                        {
                                          "value": "(f\"Invalid node {node.id}, invalid AgentBlock.\")",
                                          "children": [
                                            {
                                              "value": "f\"Invalid node {node.id}, invalid AgentBlock.\"",
                                              "children": [
                                                {
                                                  "value": "f\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "Invalid node",
                                                  "children": []
                                                },
                                                {
                                                  "value": "{node.id}",
                                                  "children": [
                                                    {
                                                      "value": "node.id",
                                                      "children": [
                                                        {
                                                          "value": "node",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "id",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": ", invalid AgentBlock.",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "obj = NodeModel(\n            id=node.id,\n            block_id=node.AgentBlock.id,\n            input_default=json.loads(node.constantInput, target_type=dict[str, Any]),\n            metadata=json.loads(node.metadata, target_type=dict[str, Any]),\n            graph_id=node.agentGraphId,\n            graph_version=node.agentGraphVersion,\n            webhook_id=node.webhookId,\n            webhook=Webhook.from_db(node.Webhook) if node.Webhook else None,\n        )",
                          "children": [
                            {
                              "value": "obj = NodeModel(\n            id=node.id,\n            block_id=node.AgentBlock.id,\n            input_default=json.loads(node.constantInput, target_type=dict[str, Any]),\n            metadata=json.loads(node.metadata, target_type=dict[str, Any]),\n            graph_id=node.agentGraphId,\n            graph_version=node.agentGraphVersion,\n            webhook_id=node.webhookId,\n            webhook=Webhook.from_db(node.Webhook) if node.Webhook else None,\n        )",
                              "children": [
                                {
                                  "value": "obj",
                                  "children": []
                                },
                                {
                                  "value": "NodeModel(\n            id=node.id,\n            block_id=node.AgentBlock.id,\n            input_default=json.loads(node.constantInput, target_type=dict[str, Any]),\n            metadata=json.loads(node.metadata, target_type=dict[str, Any]),\n            graph_id=node.agentGraphId,\n            graph_version=node.agentGraphVersion,\n            webhook_id=node.webhookId,\n            webhook=Webhook.from_db(node.Webhook) if node.Webhook else None,\n        )",
                                  "children": [
                                    {
                                      "value": "NodeModel",
                                      "children": []
                                    },
                                    {
                                      "value": "(\n            id=node.id,\n            block_id=node.AgentBlock.id,\n            input_default=json.loads(node.constantInput, target_type=dict[str, Any]),\n            metadata=json.loads(node.metadata, target_type=dict[str, Any]),\n            graph_id=node.agentGraphId,\n            graph_version=node.agentGraphVersion,\n            webhook_id=node.webhookId,\n            webhook=Webhook.from_db(node.Webhook) if node.Webhook else None,\n        )",
                                      "children": [
                                        {
                                          "value": "id=node.id",
                                          "children": [
                                            {
                                              "value": "id",
                                              "children": []
                                            },
                                            {
                                              "value": "node.id",
                                              "children": [
                                                {
                                                  "value": "node",
                                                  "children": []
                                                },
                                                {
                                                  "value": "id",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "block_id=node.AgentBlock.id",
                                          "children": [
                                            {
                                              "value": "block_id",
                                              "children": []
                                            },
                                            {
                                              "value": "node.AgentBlock.id",
                                              "children": [
                                                {
                                                  "value": "node.AgentBlock",
                                                  "children": [
                                                    {
                                                      "value": "node",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "AgentBlock",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "id",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "input_default=json.loads(node.constantInput, target_type=dict[str, Any])",
                                          "children": [
                                            {
                                              "value": "input_default",
                                              "children": []
                                            },
                                            {
                                              "value": "json.loads(node.constantInput, target_type=dict[str, Any])",
                                              "children": [
                                                {
                                                  "value": "json.loads",
                                                  "children": [
                                                    {
                                                      "value": "json",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "loads",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(node.constantInput, target_type=dict[str, Any])",
                                                  "children": [
                                                    {
                                                      "value": "node.constantInput",
                                                      "children": [
                                                        {
                                                          "value": "node",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "constantInput",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "target_type=dict[str, Any]",
                                                      "children": [
                                                        {
                                                          "value": "target_type",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "dict[str, Any]",
                                                          "children": [
                                                            {
                                                              "value": "dict",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "str",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "Any",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "metadata=json.loads(node.metadata, target_type=dict[str, Any])",
                                          "children": [
                                            {
                                              "value": "metadata",
                                              "children": []
                                            },
                                            {
                                              "value": "json.loads(node.metadata, target_type=dict[str, Any])",
                                              "children": [
                                                {
                                                  "value": "json.loads",
                                                  "children": [
                                                    {
                                                      "value": "json",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "loads",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(node.metadata, target_type=dict[str, Any])",
                                                  "children": [
                                                    {
                                                      "value": "node.metadata",
                                                      "children": [
                                                        {
                                                          "value": "node",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "metadata",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "target_type=dict[str, Any]",
                                                      "children": [
                                                        {
                                                          "value": "target_type",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "dict[str, Any]",
                                                          "children": [
                                                            {
                                                              "value": "dict",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "str",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "Any",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "graph_id=node.agentGraphId",
                                          "children": [
                                            {
                                              "value": "graph_id",
                                              "children": []
                                            },
                                            {
                                              "value": "node.agentGraphId",
                                              "children": [
                                                {
                                                  "value": "node",
                                                  "children": []
                                                },
                                                {
                                                  "value": "agentGraphId",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "graph_version=node.agentGraphVersion",
                                          "children": [
                                            {
                                              "value": "graph_version",
                                              "children": []
                                            },
                                            {
                                              "value": "node.agentGraphVersion",
                                              "children": [
                                                {
                                                  "value": "node",
                                                  "children": []
                                                },
                                                {
                                                  "value": "agentGraphVersion",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "webhook_id=node.webhookId",
                                          "children": [
                                            {
                                              "value": "webhook_id",
                                              "children": []
                                            },
                                            {
                                              "value": "node.webhookId",
                                              "children": [
                                                {
                                                  "value": "node",
                                                  "children": []
                                                },
                                                {
                                                  "value": "webhookId",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "webhook=Webhook.from_db(node.Webhook) if node.Webhook else None",
                                          "children": [
                                            {
                                              "value": "webhook",
                                              "children": []
                                            },
                                            {
                                              "value": "Webhook.from_db(node.Webhook) if node.Webhook else None",
                                              "children": [
                                                {
                                                  "value": "Webhook.from_db(node.Webhook)",
                                                  "children": [
                                                    {
                                                      "value": "Webhook.from_db",
                                                      "children": [
                                                        {
                                                          "value": "Webhook",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "from_db",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "(node.Webhook)",
                                                      "children": [
                                                        {
                                                          "value": "node.Webhook",
                                                          "children": [
                                                            {
                                                              "value": "node",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "Webhook",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "node.Webhook",
                                                  "children": [
                                                    {
                                                      "value": "node",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "Webhook",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "None",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "obj.input_links = [Link.from_db(link) for link in node.Input or []]",
                          "children": [
                            {
                              "value": "obj.input_links = [Link.from_db(link) for link in node.Input or []]",
                              "children": [
                                {
                                  "value": "obj.input_links",
                                  "children": [
                                    {
                                      "value": "obj",
                                      "children": []
                                    },
                                    {
                                      "value": "input_links",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "[Link.from_db(link) for link in node.Input or []]",
                                  "children": [
                                    {
                                      "value": "Link.from_db(link)",
                                      "children": [
                                        {
                                          "value": "Link.from_db",
                                          "children": [
                                            {
                                              "value": "Link",
                                              "children": []
                                            },
                                            {
                                              "value": "from_db",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(link)",
                                          "children": [
                                            {
                                              "value": "link",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "for link in node.Input or []",
                                      "children": [
                                        {
                                          "value": "link",
                                          "children": []
                                        },
                                        {
                                          "value": "node.Input or []",
                                          "children": [
                                            {
                                              "value": "node.Input",
                                              "children": [
                                                {
                                                  "value": "node",
                                                  "children": []
                                                },
                                                {
                                                  "value": "Input",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "[]",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "obj.output_links = [Link.from_db(link) for link in node.Output or []]",
                          "children": [
                            {
                              "value": "obj.output_links = [Link.from_db(link) for link in node.Output or []]",
                              "children": [
                                {
                                  "value": "obj.output_links",
                                  "children": [
                                    {
                                      "value": "obj",
                                      "children": []
                                    },
                                    {
                                      "value": "output_links",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "[Link.from_db(link) for link in node.Output or []]",
                                  "children": [
                                    {
                                      "value": "Link.from_db(link)",
                                      "children": [
                                        {
                                          "value": "Link.from_db",
                                          "children": [
                                            {
                                              "value": "Link",
                                              "children": []
                                            },
                                            {
                                              "value": "from_db",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(link)",
                                          "children": [
                                            {
                                              "value": "link",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "for link in node.Output or []",
                                      "children": [
                                        {
                                          "value": "link",
                                          "children": []
                                        },
                                        {
                                          "value": "node.Output or []",
                                          "children": [
                                            {
                                              "value": "node.Output",
                                              "children": [
                                                {
                                                  "value": "node",
                                                  "children": []
                                                },
                                                {
                                                  "value": "Output",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "[]",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "return obj",
                          "children": [
                            {
                              "value": "obj",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def is_triggered_by_event_type(self, event_type: str) -> bool:\n        if not (block := get_block(self.block_id)):\n            raise ValueError(f\"Block #{self.block_id} not found for node #{self.id}\")\n        if not block.webhook_config:\n            raise TypeError(\"This method can't be used on non-webhook blocks\")\n        if not block.webhook_config.event_filter_input:\n            return True\n        event_filter = self.input_default.get(block.webhook_config.event_filter_input)\n        if not event_filter:\n            raise ValueError(f\"Event filter is not configured on node #{self.id}\")\n        return event_type in [\n            block.webhook_config.event_format.format(event=k)\n            for k in event_filter\n            if event_filter[k] is True\n        ]",
              "children": [
                {
                  "value": "is_triggered_by_event_type",
                  "children": []
                },
                {
                  "value": "(self, event_type: str)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "event_type: str",
                      "children": [
                        {
                          "value": "event_type",
                          "children": []
                        },
                        {
                          "value": "str",
                          "children": [
                            {
                              "value": "str",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "bool",
                  "children": [
                    {
                      "value": "bool",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "if not (block := get_block(self.block_id)):\n            raise ValueError(f\"Block #{self.block_id} not found for node #{self.id}\")\n        if not block.webhook_config:\n            raise TypeError(\"This method can't be used on non-webhook blocks\")\n        if not block.webhook_config.event_filter_input:\n            return True\n        event_filter = self.input_default.get(block.webhook_config.event_filter_input)\n        if not event_filter:\n            raise ValueError(f\"Event filter is not configured on node #{self.id}\")\n        return event_type in [\n            block.webhook_config.event_format.format(event=k)\n            for k in event_filter\n            if event_filter[k] is True\n        ]",
                  "children": [
                    {
                      "value": "if not (block := get_block(self.block_id)):\n            raise ValueError(f\"Block #{self.block_id} not found for node #{self.id}\")",
                      "children": [
                        {
                          "value": "not (block := get_block(self.block_id))",
                          "children": [
                            {
                              "value": "(block := get_block(self.block_id))",
                              "children": [
                                {
                                  "value": "block := get_block(self.block_id)",
                                  "children": [
                                    {
                                      "value": "block",
                                      "children": []
                                    },
                                    {
                                      "value": "get_block(self.block_id)",
                                      "children": [
                                        {
                                          "value": "get_block",
                                          "children": []
                                        },
                                        {
                                          "value": "(self.block_id)",
                                          "children": [
                                            {
                                              "value": "self.block_id",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "block_id",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "raise ValueError(f\"Block #{self.block_id} not found for node #{self.id}\")",
                          "children": [
                            {
                              "value": "raise ValueError(f\"Block #{self.block_id} not found for node #{self.id}\")",
                              "children": [
                                {
                                  "value": "ValueError(f\"Block #{self.block_id} not found for node #{self.id}\")",
                                  "children": [
                                    {
                                      "value": "ValueError",
                                      "children": []
                                    },
                                    {
                                      "value": "(f\"Block #{self.block_id} not found for node #{self.id}\")",
                                      "children": [
                                        {
                                          "value": "f\"Block #{self.block_id} not found for node #{self.id}\"",
                                          "children": [
                                            {
                                              "value": "f\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Block #",
                                              "children": []
                                            },
                                            {
                                              "value": "{self.block_id}",
                                              "children": [
                                                {
                                                  "value": "self.block_id",
                                                  "children": [
                                                    {
                                                      "value": "self",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "block_id",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "not found for node #",
                                              "children": []
                                            },
                                            {
                                              "value": "{self.id}",
                                              "children": [
                                                {
                                                  "value": "self.id",
                                                  "children": [
                                                    {
                                                      "value": "self",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "id",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if not block.webhook_config:\n            raise TypeError(\"This method can't be used on non-webhook blocks\")",
                      "children": [
                        {
                          "value": "not block.webhook_config",
                          "children": [
                            {
                              "value": "block.webhook_config",
                              "children": [
                                {
                                  "value": "block",
                                  "children": []
                                },
                                {
                                  "value": "webhook_config",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "raise TypeError(\"This method can't be used on non-webhook blocks\")",
                          "children": [
                            {
                              "value": "raise TypeError(\"This method can't be used on non-webhook blocks\")",
                              "children": [
                                {
                                  "value": "TypeError(\"This method can't be used on non-webhook blocks\")",
                                  "children": [
                                    {
                                      "value": "TypeError",
                                      "children": []
                                    },
                                    {
                                      "value": "(\"This method can't be used on non-webhook blocks\")",
                                      "children": [
                                        {
                                          "value": "\"This method can't be used on non-webhook blocks\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "This method can't be used on non-webhook blocks",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if not block.webhook_config.event_filter_input:\n            return True",
                      "children": [
                        {
                          "value": "not block.webhook_config.event_filter_input",
                          "children": [
                            {
                              "value": "block.webhook_config.event_filter_input",
                              "children": [
                                {
                                  "value": "block.webhook_config",
                                  "children": [
                                    {
                                      "value": "block",
                                      "children": []
                                    },
                                    {
                                      "value": "webhook_config",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "event_filter_input",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "return True",
                          "children": [
                            {
                              "value": "return True",
                              "children": [
                                {
                                  "value": "True",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "event_filter = self.input_default.get(block.webhook_config.event_filter_input)",
                      "children": [
                        {
                          "value": "event_filter = self.input_default.get(block.webhook_config.event_filter_input)",
                          "children": [
                            {
                              "value": "event_filter",
                              "children": []
                            },
                            {
                              "value": "self.input_default.get(block.webhook_config.event_filter_input)",
                              "children": [
                                {
                                  "value": "self.input_default.get",
                                  "children": [
                                    {
                                      "value": "self.input_default",
                                      "children": [
                                        {
                                          "value": "self",
                                          "children": []
                                        },
                                        {
                                          "value": "input_default",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "get",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(block.webhook_config.event_filter_input)",
                                  "children": [
                                    {
                                      "value": "block.webhook_config.event_filter_input",
                                      "children": [
                                        {
                                          "value": "block.webhook_config",
                                          "children": [
                                            {
                                              "value": "block",
                                              "children": []
                                            },
                                            {
                                              "value": "webhook_config",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "event_filter_input",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if not event_filter:\n            raise ValueError(f\"Event filter is not configured on node #{self.id}\")",
                      "children": [
                        {
                          "value": "not event_filter",
                          "children": [
                            {
                              "value": "event_filter",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "raise ValueError(f\"Event filter is not configured on node #{self.id}\")",
                          "children": [
                            {
                              "value": "raise ValueError(f\"Event filter is not configured on node #{self.id}\")",
                              "children": [
                                {
                                  "value": "ValueError(f\"Event filter is not configured on node #{self.id}\")",
                                  "children": [
                                    {
                                      "value": "ValueError",
                                      "children": []
                                    },
                                    {
                                      "value": "(f\"Event filter is not configured on node #{self.id}\")",
                                      "children": [
                                        {
                                          "value": "f\"Event filter is not configured on node #{self.id}\"",
                                          "children": [
                                            {
                                              "value": "f\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Event filter is not configured on node #",
                                              "children": []
                                            },
                                            {
                                              "value": "{self.id}",
                                              "children": [
                                                {
                                                  "value": "self.id",
                                                  "children": [
                                                    {
                                                      "value": "self",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "id",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return event_type in [\n            block.webhook_config.event_format.format(event=k)\n            for k in event_filter\n            if event_filter[k] is True\n        ]",
                      "children": [
                        {
                          "value": "event_type in [\n            block.webhook_config.event_format.format(event=k)\n            for k in event_filter\n            if event_filter[k] is True\n        ]",
                          "children": [
                            {
                              "value": "event_type",
                              "children": []
                            },
                            {
                              "value": "[\n            block.webhook_config.event_format.format(event=k)\n            for k in event_filter\n            if event_filter[k] is True\n        ]",
                              "children": [
                                {
                                  "value": "block.webhook_config.event_format.format(event=k)",
                                  "children": [
                                    {
                                      "value": "block.webhook_config.event_format.format",
                                      "children": [
                                        {
                                          "value": "block.webhook_config.event_format",
                                          "children": [
                                            {
                                              "value": "block.webhook_config",
                                              "children": [
                                                {
                                                  "value": "block",
                                                  "children": []
                                                },
                                                {
                                                  "value": "webhook_config",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "event_format",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "format",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(event=k)",
                                      "children": [
                                        {
                                          "value": "event=k",
                                          "children": [
                                            {
                                              "value": "event",
                                              "children": []
                                            },
                                            {
                                              "value": "k",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "for k in event_filter",
                                  "children": [
                                    {
                                      "value": "k",
                                      "children": []
                                    },
                                    {
                                      "value": "event_filter",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "if event_filter[k] is True",
                                  "children": [
                                    {
                                      "value": "event_filter[k] is True",
                                      "children": [
                                        {
                                          "value": "event_filter[k]",
                                          "children": [
                                            {
                                              "value": "event_filter",
                                              "children": []
                                            },
                                            {
                                              "value": "k",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "True",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "# Fix 2-way reference Node <-> Webhook",
      "children": []
    },
    {
      "value": "Webhook.model_rebuild()",
      "children": [
        {
          "value": "Webhook.model_rebuild()",
          "children": [
            {
              "value": "Webhook.model_rebuild",
              "children": [
                {
                  "value": "Webhook",
                  "children": []
                },
                {
                  "value": "model_rebuild",
                  "children": []
                }
              ]
            },
            {
              "value": "()",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "class GraphExecution(BaseDbModel):\n    execution_id: str\n    started_at: datetime\n    ended_at: datetime\n    duration: float\n    total_run_time: float\n    status: ExecutionStatus\n    graph_id: str\n    graph_version: int\n\n    @staticmethod\n    def from_db(execution: AgentGraphExecution):\n        now = datetime.now(timezone.utc)\n        start_time = execution.startedAt or execution.createdAt\n        end_time = execution.updatedAt or now\n        duration = (end_time - start_time).total_seconds()\n        total_run_time = duration\n\n        try:\n            stats = json.loads(execution.stats or \"{}\", target_type=dict[str, Any])\n        except ValueError:\n            stats = {}\n\n        duration = stats.get(\"walltime\", duration)\n        total_run_time = stats.get(\"nodes_walltime\", total_run_time)\n\n        return GraphExecution(\n            id=execution.id,\n            execution_id=execution.id,\n            started_at=start_time,\n            ended_at=end_time,\n            duration=duration,\n            total_run_time=total_run_time,\n            status=ExecutionStatus(execution.executionStatus),\n            graph_id=execution.agentGraphId,\n            graph_version=execution.agentGraphVersion,\n        )",
      "children": [
        {
          "value": "GraphExecution",
          "children": []
        },
        {
          "value": "(BaseDbModel)",
          "children": [
            {
              "value": "BaseDbModel",
              "children": []
            }
          ]
        },
        {
          "value": "execution_id: str\n    started_at: datetime\n    ended_at: datetime\n    duration: float\n    total_run_time: float\n    status: ExecutionStatus\n    graph_id: str\n    graph_version: int\n\n    @staticmethod\n    def from_db(execution: AgentGraphExecution):\n        now = datetime.now(timezone.utc)\n        start_time = execution.startedAt or execution.createdAt\n        end_time = execution.updatedAt or now\n        duration = (end_time - start_time).total_seconds()\n        total_run_time = duration\n\n        try:\n            stats = json.loads(execution.stats or \"{}\", target_type=dict[str, Any])\n        except ValueError:\n            stats = {}\n\n        duration = stats.get(\"walltime\", duration)\n        total_run_time = stats.get(\"nodes_walltime\", total_run_time)\n\n        return GraphExecution(\n            id=execution.id,\n            execution_id=execution.id,\n            started_at=start_time,\n            ended_at=end_time,\n            duration=duration,\n            total_run_time=total_run_time,\n            status=ExecutionStatus(execution.executionStatus),\n            graph_id=execution.agentGraphId,\n            graph_version=execution.agentGraphVersion,\n        )",
          "children": [
            {
              "value": "execution_id: str",
              "children": [
                {
                  "value": "execution_id: str",
                  "children": [
                    {
                      "value": "execution_id",
                      "children": []
                    },
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "started_at: datetime",
              "children": [
                {
                  "value": "started_at: datetime",
                  "children": [
                    {
                      "value": "started_at",
                      "children": []
                    },
                    {
                      "value": "datetime",
                      "children": [
                        {
                          "value": "datetime",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "ended_at: datetime",
              "children": [
                {
                  "value": "ended_at: datetime",
                  "children": [
                    {
                      "value": "ended_at",
                      "children": []
                    },
                    {
                      "value": "datetime",
                      "children": [
                        {
                          "value": "datetime",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "duration: float",
              "children": [
                {
                  "value": "duration: float",
                  "children": [
                    {
                      "value": "duration",
                      "children": []
                    },
                    {
                      "value": "float",
                      "children": [
                        {
                          "value": "float",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "total_run_time: float",
              "children": [
                {
                  "value": "total_run_time: float",
                  "children": [
                    {
                      "value": "total_run_time",
                      "children": []
                    },
                    {
                      "value": "float",
                      "children": [
                        {
                          "value": "float",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "status: ExecutionStatus",
              "children": [
                {
                  "value": "status: ExecutionStatus",
                  "children": [
                    {
                      "value": "status",
                      "children": []
                    },
                    {
                      "value": "ExecutionStatus",
                      "children": [
                        {
                          "value": "ExecutionStatus",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "graph_id: str",
              "children": [
                {
                  "value": "graph_id: str",
                  "children": [
                    {
                      "value": "graph_id",
                      "children": []
                    },
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "graph_version: int",
              "children": [
                {
                  "value": "graph_version: int",
                  "children": [
                    {
                      "value": "graph_version",
                      "children": []
                    },
                    {
                      "value": "int",
                      "children": [
                        {
                          "value": "int",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "@staticmethod\n    def from_db(execution: AgentGraphExecution):\n        now = datetime.now(timezone.utc)\n        start_time = execution.startedAt or execution.createdAt\n        end_time = execution.updatedAt or now\n        duration = (end_time - start_time).total_seconds()\n        total_run_time = duration\n\n        try:\n            stats = json.loads(execution.stats or \"{}\", target_type=dict[str, Any])\n        except ValueError:\n            stats = {}\n\n        duration = stats.get(\"walltime\", duration)\n        total_run_time = stats.get(\"nodes_walltime\", total_run_time)\n\n        return GraphExecution(\n            id=execution.id,\n            execution_id=execution.id,\n            started_at=start_time,\n            ended_at=end_time,\n            duration=duration,\n            total_run_time=total_run_time,\n            status=ExecutionStatus(execution.executionStatus),\n            graph_id=execution.agentGraphId,\n            graph_version=execution.agentGraphVersion,\n        )",
              "children": [
                {
                  "value": "@staticmethod",
                  "children": [
                    {
                      "value": "staticmethod",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "def from_db(execution: AgentGraphExecution):\n        now = datetime.now(timezone.utc)\n        start_time = execution.startedAt or execution.createdAt\n        end_time = execution.updatedAt or now\n        duration = (end_time - start_time).total_seconds()\n        total_run_time = duration\n\n        try:\n            stats = json.loads(execution.stats or \"{}\", target_type=dict[str, Any])\n        except ValueError:\n            stats = {}\n\n        duration = stats.get(\"walltime\", duration)\n        total_run_time = stats.get(\"nodes_walltime\", total_run_time)\n\n        return GraphExecution(\n            id=execution.id,\n            execution_id=execution.id,\n            started_at=start_time,\n            ended_at=end_time,\n            duration=duration,\n            total_run_time=total_run_time,\n            status=ExecutionStatus(execution.executionStatus),\n            graph_id=execution.agentGraphId,\n            graph_version=execution.agentGraphVersion,\n        )",
                  "children": [
                    {
                      "value": "from_db",
                      "children": []
                    },
                    {
                      "value": "(execution: AgentGraphExecution)",
                      "children": [
                        {
                          "value": "execution: AgentGraphExecution",
                          "children": [
                            {
                              "value": "execution",
                              "children": []
                            },
                            {
                              "value": "AgentGraphExecution",
                              "children": [
                                {
                                  "value": "AgentGraphExecution",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "now = datetime.now(timezone.utc)\n        start_time = execution.startedAt or execution.createdAt\n        end_time = execution.updatedAt or now\n        duration = (end_time - start_time).total_seconds()\n        total_run_time = duration\n\n        try:\n            stats = json.loads(execution.stats or \"{}\", target_type=dict[str, Any])\n        except ValueError:\n            stats = {}\n\n        duration = stats.get(\"walltime\", duration)\n        total_run_time = stats.get(\"nodes_walltime\", total_run_time)\n\n        return GraphExecution(\n            id=execution.id,\n            execution_id=execution.id,\n            started_at=start_time,\n            ended_at=end_time,\n            duration=duration,\n            total_run_time=total_run_time,\n            status=ExecutionStatus(execution.executionStatus),\n            graph_id=execution.agentGraphId,\n            graph_version=execution.agentGraphVersion,\n        )",
                      "children": [
                        {
                          "value": "now = datetime.now(timezone.utc)",
                          "children": [
                            {
                              "value": "now = datetime.now(timezone.utc)",
                              "children": [
                                {
                                  "value": "now",
                                  "children": []
                                },
                                {
                                  "value": "datetime.now(timezone.utc)",
                                  "children": [
                                    {
                                      "value": "datetime.now",
                                      "children": [
                                        {
                                          "value": "datetime",
                                          "children": []
                                        },
                                        {
                                          "value": "now",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(timezone.utc)",
                                      "children": [
                                        {
                                          "value": "timezone.utc",
                                          "children": [
                                            {
                                              "value": "timezone",
                                              "children": []
                                            },
                                            {
                                              "value": "utc",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "start_time = execution.startedAt or execution.createdAt",
                          "children": [
                            {
                              "value": "start_time = execution.startedAt or execution.createdAt",
                              "children": [
                                {
                                  "value": "start_time",
                                  "children": []
                                },
                                {
                                  "value": "execution.startedAt or execution.createdAt",
                                  "children": [
                                    {
                                      "value": "execution.startedAt",
                                      "children": [
                                        {
                                          "value": "execution",
                                          "children": []
                                        },
                                        {
                                          "value": "startedAt",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "execution.createdAt",
                                      "children": [
                                        {
                                          "value": "execution",
                                          "children": []
                                        },
                                        {
                                          "value": "createdAt",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "end_time = execution.updatedAt or now",
                          "children": [
                            {
                              "value": "end_time = execution.updatedAt or now",
                              "children": [
                                {
                                  "value": "end_time",
                                  "children": []
                                },
                                {
                                  "value": "execution.updatedAt or now",
                                  "children": [
                                    {
                                      "value": "execution.updatedAt",
                                      "children": [
                                        {
                                          "value": "execution",
                                          "children": []
                                        },
                                        {
                                          "value": "updatedAt",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "now",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "duration = (end_time - start_time).total_seconds()",
                          "children": [
                            {
                              "value": "duration = (end_time - start_time).total_seconds()",
                              "children": [
                                {
                                  "value": "duration",
                                  "children": []
                                },
                                {
                                  "value": "(end_time - start_time).total_seconds()",
                                  "children": [
                                    {
                                      "value": "(end_time - start_time).total_seconds",
                                      "children": [
                                        {
                                          "value": "(end_time - start_time)",
                                          "children": [
                                            {
                                              "value": "end_time - start_time",
                                              "children": [
                                                {
                                                  "value": "end_time",
                                                  "children": []
                                                },
                                                {
                                                  "value": "start_time",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "total_seconds",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "total_run_time = duration",
                          "children": [
                            {
                              "value": "total_run_time = duration",
                              "children": [
                                {
                                  "value": "total_run_time",
                                  "children": []
                                },
                                {
                                  "value": "duration",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "try:\n            stats = json.loads(execution.stats or \"{}\", target_type=dict[str, Any])\n        except ValueError:\n            stats = {}",
                          "children": [
                            {
                              "value": "stats = json.loads(execution.stats or \"{}\", target_type=dict[str, Any])",
                              "children": [
                                {
                                  "value": "stats = json.loads(execution.stats or \"{}\", target_type=dict[str, Any])",
                                  "children": [
                                    {
                                      "value": "stats = json.loads(execution.stats or \"{}\", target_type=dict[str, Any])",
                                      "children": [
                                        {
                                          "value": "stats",
                                          "children": []
                                        },
                                        {
                                          "value": "json.loads(execution.stats or \"{}\", target_type=dict[str, Any])",
                                          "children": [
                                            {
                                              "value": "json.loads",
                                              "children": [
                                                {
                                                  "value": "json",
                                                  "children": []
                                                },
                                                {
                                                  "value": "loads",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(execution.stats or \"{}\", target_type=dict[str, Any])",
                                              "children": [
                                                {
                                                  "value": "execution.stats or \"{}\"",
                                                  "children": [
                                                    {
                                                      "value": "execution.stats",
                                                      "children": [
                                                        {
                                                          "value": "execution",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "stats",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"{}\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "{}",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "target_type=dict[str, Any]",
                                                  "children": [
                                                    {
                                                      "value": "target_type",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "dict[str, Any]",
                                                      "children": [
                                                        {
                                                          "value": "dict",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "str",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "Any",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "except ValueError:\n            stats = {}",
                              "children": [
                                {
                                  "value": "ValueError",
                                  "children": []
                                },
                                {
                                  "value": "stats = {}",
                                  "children": [
                                    {
                                      "value": "stats = {}",
                                      "children": [
                                        {
                                          "value": "stats = {}",
                                          "children": [
                                            {
                                              "value": "stats",
                                              "children": []
                                            },
                                            {
                                              "value": "{}",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "duration = stats.get(\"walltime\", duration)",
                          "children": [
                            {
                              "value": "duration = stats.get(\"walltime\", duration)",
                              "children": [
                                {
                                  "value": "duration",
                                  "children": []
                                },
                                {
                                  "value": "stats.get(\"walltime\", duration)",
                                  "children": [
                                    {
                                      "value": "stats.get",
                                      "children": [
                                        {
                                          "value": "stats",
                                          "children": []
                                        },
                                        {
                                          "value": "get",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(\"walltime\", duration)",
                                      "children": [
                                        {
                                          "value": "\"walltime\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "walltime",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "duration",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "total_run_time = stats.get(\"nodes_walltime\", total_run_time)",
                          "children": [
                            {
                              "value": "total_run_time = stats.get(\"nodes_walltime\", total_run_time)",
                              "children": [
                                {
                                  "value": "total_run_time",
                                  "children": []
                                },
                                {
                                  "value": "stats.get(\"nodes_walltime\", total_run_time)",
                                  "children": [
                                    {
                                      "value": "stats.get",
                                      "children": [
                                        {
                                          "value": "stats",
                                          "children": []
                                        },
                                        {
                                          "value": "get",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(\"nodes_walltime\", total_run_time)",
                                      "children": [
                                        {
                                          "value": "\"nodes_walltime\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "nodes_walltime",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "total_run_time",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "return GraphExecution(\n            id=execution.id,\n            execution_id=execution.id,\n            started_at=start_time,\n            ended_at=end_time,\n            duration=duration,\n            total_run_time=total_run_time,\n            status=ExecutionStatus(execution.executionStatus),\n            graph_id=execution.agentGraphId,\n            graph_version=execution.agentGraphVersion,\n        )",
                          "children": [
                            {
                              "value": "GraphExecution(\n            id=execution.id,\n            execution_id=execution.id,\n            started_at=start_time,\n            ended_at=end_time,\n            duration=duration,\n            total_run_time=total_run_time,\n            status=ExecutionStatus(execution.executionStatus),\n            graph_id=execution.agentGraphId,\n            graph_version=execution.agentGraphVersion,\n        )",
                              "children": [
                                {
                                  "value": "GraphExecution",
                                  "children": []
                                },
                                {
                                  "value": "(\n            id=execution.id,\n            execution_id=execution.id,\n            started_at=start_time,\n            ended_at=end_time,\n            duration=duration,\n            total_run_time=total_run_time,\n            status=ExecutionStatus(execution.executionStatus),\n            graph_id=execution.agentGraphId,\n            graph_version=execution.agentGraphVersion,\n        )",
                                  "children": [
                                    {
                                      "value": "id=execution.id",
                                      "children": [
                                        {
                                          "value": "id",
                                          "children": []
                                        },
                                        {
                                          "value": "execution.id",
                                          "children": [
                                            {
                                              "value": "execution",
                                              "children": []
                                            },
                                            {
                                              "value": "id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "execution_id=execution.id",
                                      "children": [
                                        {
                                          "value": "execution_id",
                                          "children": []
                                        },
                                        {
                                          "value": "execution.id",
                                          "children": [
                                            {
                                              "value": "execution",
                                              "children": []
                                            },
                                            {
                                              "value": "id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "started_at=start_time",
                                      "children": [
                                        {
                                          "value": "started_at",
                                          "children": []
                                        },
                                        {
                                          "value": "start_time",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "ended_at=end_time",
                                      "children": [
                                        {
                                          "value": "ended_at",
                                          "children": []
                                        },
                                        {
                                          "value": "end_time",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "duration=duration",
                                      "children": [
                                        {
                                          "value": "duration",
                                          "children": []
                                        },
                                        {
                                          "value": "duration",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "total_run_time=total_run_time",
                                      "children": [
                                        {
                                          "value": "total_run_time",
                                          "children": []
                                        },
                                        {
                                          "value": "total_run_time",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "status=ExecutionStatus(execution.executionStatus)",
                                      "children": [
                                        {
                                          "value": "status",
                                          "children": []
                                        },
                                        {
                                          "value": "ExecutionStatus(execution.executionStatus)",
                                          "children": [
                                            {
                                              "value": "ExecutionStatus",
                                              "children": []
                                            },
                                            {
                                              "value": "(execution.executionStatus)",
                                              "children": [
                                                {
                                                  "value": "execution.executionStatus",
                                                  "children": [
                                                    {
                                                      "value": "execution",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "executionStatus",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "graph_id=execution.agentGraphId",
                                      "children": [
                                        {
                                          "value": "graph_id",
                                          "children": []
                                        },
                                        {
                                          "value": "execution.agentGraphId",
                                          "children": [
                                            {
                                              "value": "execution",
                                              "children": []
                                            },
                                            {
                                              "value": "agentGraphId",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "graph_version=execution.agentGraphVersion",
                                      "children": [
                                        {
                                          "value": "graph_version",
                                          "children": []
                                        },
                                        {
                                          "value": "execution.agentGraphVersion",
                                          "children": [
                                            {
                                              "value": "execution",
                                              "children": []
                                            },
                                            {
                                              "value": "agentGraphVersion",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class Graph(BaseDbModel):\n    version: int = 1\n    is_active: bool = True\n    is_template: bool = False\n    name: str\n    description: str\n    nodes: list[Node] = []\n    links: list[Link] = []\n\n    @computed_field\n    @property\n    def input_schema(self) -> dict[str, Any]:\n        return self._generate_schema(\n            AgentInputBlock.Input,\n            [\n                node.input_default\n                for node in self.nodes\n                if (b := get_block(node.block_id))\n                and b.block_type == BlockType.INPUT\n                and \"name\" in node.input_default\n            ],\n        )\n\n    @computed_field\n    @property\n    def output_schema(self) -> dict[str, Any]:\n        return self._generate_schema(\n            AgentOutputBlock.Input,\n            [\n                node.input_default\n                for node in self.nodes\n                if (b := get_block(node.block_id))\n                and b.block_type == BlockType.OUTPUT\n                and \"name\" in node.input_default\n            ],\n        )\n\n    @staticmethod\n    def _generate_schema(\n        type_class: Type[AgentInputBlock.Input] | Type[AgentOutputBlock.Input],\n        data: list[dict],\n    ) -> dict[str, Any]:\n        props = []\n        for p in data:\n            try:\n                props.append(type_class(**p))\n            except Exception as e:\n                logger.warning(f\"Invalid {type_class}: {p}, {e}\")\n\n        return {\n            \"type\": \"object\",\n            \"properties\": {\n                p.name: {\n                    \"secret\": p.secret,\n                    \"advanced\": p.advanced,\n                    \"title\": p.title or p.name,\n                    **({\"description\": p.description} if p.description else {}),\n                    **({\"default\": p.value} if p.value is not None else {}),\n                }\n                for p in props\n            },\n            \"required\": [p.name for p in props if p.value is None],\n        }",
      "children": [
        {
          "value": "Graph",
          "children": []
        },
        {
          "value": "(BaseDbModel)",
          "children": [
            {
              "value": "BaseDbModel",
              "children": []
            }
          ]
        },
        {
          "value": "version: int = 1\n    is_active: bool = True\n    is_template: bool = False\n    name: str\n    description: str\n    nodes: list[Node] = []\n    links: list[Link] = []\n\n    @computed_field\n    @property\n    def input_schema(self) -> dict[str, Any]:\n        return self._generate_schema(\n            AgentInputBlock.Input,\n            [\n                node.input_default\n                for node in self.nodes\n                if (b := get_block(node.block_id))\n                and b.block_type == BlockType.INPUT\n                and \"name\" in node.input_default\n            ],\n        )\n\n    @computed_field\n    @property\n    def output_schema(self) -> dict[str, Any]:\n        return self._generate_schema(\n            AgentOutputBlock.Input,\n            [\n                node.input_default\n                for node in self.nodes\n                if (b := get_block(node.block_id))\n                and b.block_type == BlockType.OUTPUT\n                and \"name\" in node.input_default\n            ],\n        )\n\n    @staticmethod\n    def _generate_schema(\n        type_class: Type[AgentInputBlock.Input] | Type[AgentOutputBlock.Input],\n        data: list[dict],\n    ) -> dict[str, Any]:\n        props = []\n        for p in data:\n            try:\n                props.append(type_class(**p))\n            except Exception as e:\n                logger.warning(f\"Invalid {type_class}: {p}, {e}\")\n\n        return {\n            \"type\": \"object\",\n            \"properties\": {\n                p.name: {\n                    \"secret\": p.secret,\n                    \"advanced\": p.advanced,\n                    \"title\": p.title or p.name,\n                    **({\"description\": p.description} if p.description else {}),\n                    **({\"default\": p.value} if p.value is not None else {}),\n                }\n                for p in props\n            },\n            \"required\": [p.name for p in props if p.value is None],\n        }",
          "children": [
            {
              "value": "version: int = 1",
              "children": [
                {
                  "value": "version: int = 1",
                  "children": [
                    {
                      "value": "version",
                      "children": []
                    },
                    {
                      "value": "int",
                      "children": [
                        {
                          "value": "int",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "is_active: bool = True",
              "children": [
                {
                  "value": "is_active: bool = True",
                  "children": [
                    {
                      "value": "is_active",
                      "children": []
                    },
                    {
                      "value": "bool",
                      "children": [
                        {
                          "value": "bool",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "True",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "is_template: bool = False",
              "children": [
                {
                  "value": "is_template: bool = False",
                  "children": [
                    {
                      "value": "is_template",
                      "children": []
                    },
                    {
                      "value": "bool",
                      "children": [
                        {
                          "value": "bool",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "False",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "name: str",
              "children": [
                {
                  "value": "name: str",
                  "children": [
                    {
                      "value": "name",
                      "children": []
                    },
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "description: str",
              "children": [
                {
                  "value": "description: str",
                  "children": [
                    {
                      "value": "description",
                      "children": []
                    },
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "nodes: list[Node] = []",
              "children": [
                {
                  "value": "nodes: list[Node] = []",
                  "children": [
                    {
                      "value": "nodes",
                      "children": []
                    },
                    {
                      "value": "list[Node]",
                      "children": [
                        {
                          "value": "list[Node]",
                          "children": [
                            {
                              "value": "list",
                              "children": []
                            },
                            {
                              "value": "[Node]",
                              "children": [
                                {
                                  "value": "Node",
                                  "children": [
                                    {
                                      "value": "Node",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "[]",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "links: list[Link] = []",
              "children": [
                {
                  "value": "links: list[Link] = []",
                  "children": [
                    {
                      "value": "links",
                      "children": []
                    },
                    {
                      "value": "list[Link]",
                      "children": [
                        {
                          "value": "list[Link]",
                          "children": [
                            {
                              "value": "list",
                              "children": []
                            },
                            {
                              "value": "[Link]",
                              "children": [
                                {
                                  "value": "Link",
                                  "children": [
                                    {
                                      "value": "Link",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "[]",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "@computed_field\n    @property\n    def input_schema(self) -> dict[str, Any]:\n        return self._generate_schema(\n            AgentInputBlock.Input,\n            [\n                node.input_default\n                for node in self.nodes\n                if (b := get_block(node.block_id))\n                and b.block_type == BlockType.INPUT\n                and \"name\" in node.input_default\n            ],\n        )",
              "children": [
                {
                  "value": "@computed_field",
                  "children": [
                    {
                      "value": "computed_field",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "@property",
                  "children": [
                    {
                      "value": "property",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "def input_schema(self) -> dict[str, Any]:\n        return self._generate_schema(\n            AgentInputBlock.Input,\n            [\n                node.input_default\n                for node in self.nodes\n                if (b := get_block(node.block_id))\n                and b.block_type == BlockType.INPUT\n                and \"name\" in node.input_default\n            ],\n        )",
                  "children": [
                    {
                      "value": "input_schema",
                      "children": []
                    },
                    {
                      "value": "(self)",
                      "children": [
                        {
                          "value": "self",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "dict[str, Any]",
                      "children": [
                        {
                          "value": "dict[str, Any]",
                          "children": [
                            {
                              "value": "dict",
                              "children": []
                            },
                            {
                              "value": "[str, Any]",
                              "children": [
                                {
                                  "value": "str",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "Any",
                                  "children": [
                                    {
                                      "value": "Any",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return self._generate_schema(\n            AgentInputBlock.Input,\n            [\n                node.input_default\n                for node in self.nodes\n                if (b := get_block(node.block_id))\n                and b.block_type == BlockType.INPUT\n                and \"name\" in node.input_default\n            ],\n        )",
                      "children": [
                        {
                          "value": "return self._generate_schema(\n            AgentInputBlock.Input,\n            [\n                node.input_default\n                for node in self.nodes\n                if (b := get_block(node.block_id))\n                and b.block_type == BlockType.INPUT\n                and \"name\" in node.input_default\n            ],\n        )",
                          "children": [
                            {
                              "value": "self._generate_schema(\n            AgentInputBlock.Input,\n            [\n                node.input_default\n                for node in self.nodes\n                if (b := get_block(node.block_id))\n                and b.block_type == BlockType.INPUT\n                and \"name\" in node.input_default\n            ],\n        )",
                              "children": [
                                {
                                  "value": "self._generate_schema",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "_generate_schema",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(\n            AgentInputBlock.Input,\n            [\n                node.input_default\n                for node in self.nodes\n                if (b := get_block(node.block_id))\n                and b.block_type == BlockType.INPUT\n                and \"name\" in node.input_default\n            ],\n        )",
                                  "children": [
                                    {
                                      "value": "AgentInputBlock.Input",
                                      "children": [
                                        {
                                          "value": "AgentInputBlock",
                                          "children": []
                                        },
                                        {
                                          "value": "Input",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "[\n                node.input_default\n                for node in self.nodes\n                if (b := get_block(node.block_id))\n                and b.block_type == BlockType.INPUT\n                and \"name\" in node.input_default\n            ]",
                                      "children": [
                                        {
                                          "value": "node.input_default",
                                          "children": [
                                            {
                                              "value": "node",
                                              "children": []
                                            },
                                            {
                                              "value": "input_default",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "for node in self.nodes",
                                          "children": [
                                            {
                                              "value": "node",
                                              "children": []
                                            },
                                            {
                                              "value": "self.nodes",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "nodes",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "if (b := get_block(node.block_id))\n                and b.block_type == BlockType.INPUT\n                and \"name\" in node.input_default",
                                          "children": [
                                            {
                                              "value": "(b := get_block(node.block_id))\n                and b.block_type == BlockType.INPUT\n                and \"name\" in node.input_default",
                                              "children": [
                                                {
                                                  "value": "(b := get_block(node.block_id))\n                and b.block_type == BlockType.INPUT",
                                                  "children": [
                                                    {
                                                      "value": "(b := get_block(node.block_id))",
                                                      "children": [
                                                        {
                                                          "value": "b := get_block(node.block_id)",
                                                          "children": [
                                                            {
                                                              "value": "b",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "get_block(node.block_id)",
                                                              "children": [
                                                                {
                                                                  "value": "get_block",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "(node.block_id)",
                                                                  "children": [
                                                                    {
                                                                      "value": "node.block_id",
                                                                      "children": [
                                                                        {
                                                                          "value": "node",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "block_id",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "b.block_type == BlockType.INPUT",
                                                      "children": [
                                                        {
                                                          "value": "b.block_type",
                                                          "children": [
                                                            {
                                                              "value": "b",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "block_type",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "BlockType.INPUT",
                                                          "children": [
                                                            {
                                                              "value": "BlockType",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "INPUT",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"name\" in node.input_default",
                                                  "children": [
                                                    {
                                                      "value": "\"name\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "name",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "node.input_default",
                                                      "children": [
                                                        {
                                                          "value": "node",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "input_default",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "@computed_field\n    @property\n    def output_schema(self) -> dict[str, Any]:\n        return self._generate_schema(\n            AgentOutputBlock.Input,\n            [\n                node.input_default\n                for node in self.nodes\n                if (b := get_block(node.block_id))\n                and b.block_type == BlockType.OUTPUT\n                and \"name\" in node.input_default\n            ],\n        )",
              "children": [
                {
                  "value": "@computed_field",
                  "children": [
                    {
                      "value": "computed_field",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "@property",
                  "children": [
                    {
                      "value": "property",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "def output_schema(self) -> dict[str, Any]:\n        return self._generate_schema(\n            AgentOutputBlock.Input,\n            [\n                node.input_default\n                for node in self.nodes\n                if (b := get_block(node.block_id))\n                and b.block_type == BlockType.OUTPUT\n                and \"name\" in node.input_default\n            ],\n        )",
                  "children": [
                    {
                      "value": "output_schema",
                      "children": []
                    },
                    {
                      "value": "(self)",
                      "children": [
                        {
                          "value": "self",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "dict[str, Any]",
                      "children": [
                        {
                          "value": "dict[str, Any]",
                          "children": [
                            {
                              "value": "dict",
                              "children": []
                            },
                            {
                              "value": "[str, Any]",
                              "children": [
                                {
                                  "value": "str",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "Any",
                                  "children": [
                                    {
                                      "value": "Any",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return self._generate_schema(\n            AgentOutputBlock.Input,\n            [\n                node.input_default\n                for node in self.nodes\n                if (b := get_block(node.block_id))\n                and b.block_type == BlockType.OUTPUT\n                and \"name\" in node.input_default\n            ],\n        )",
                      "children": [
                        {
                          "value": "return self._generate_schema(\n            AgentOutputBlock.Input,\n            [\n                node.input_default\n                for node in self.nodes\n                if (b := get_block(node.block_id))\n                and b.block_type == BlockType.OUTPUT\n                and \"name\" in node.input_default\n            ],\n        )",
                          "children": [
                            {
                              "value": "self._generate_schema(\n            AgentOutputBlock.Input,\n            [\n                node.input_default\n                for node in self.nodes\n                if (b := get_block(node.block_id))\n                and b.block_type == BlockType.OUTPUT\n                and \"name\" in node.input_default\n            ],\n        )",
                              "children": [
                                {
                                  "value": "self._generate_schema",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "_generate_schema",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(\n            AgentOutputBlock.Input,\n            [\n                node.input_default\n                for node in self.nodes\n                if (b := get_block(node.block_id))\n                and b.block_type == BlockType.OUTPUT\n                and \"name\" in node.input_default\n            ],\n        )",
                                  "children": [
                                    {
                                      "value": "AgentOutputBlock.Input",
                                      "children": [
                                        {
                                          "value": "AgentOutputBlock",
                                          "children": []
                                        },
                                        {
                                          "value": "Input",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "[\n                node.input_default\n                for node in self.nodes\n                if (b := get_block(node.block_id))\n                and b.block_type == BlockType.OUTPUT\n                and \"name\" in node.input_default\n            ]",
                                      "children": [
                                        {
                                          "value": "node.input_default",
                                          "children": [
                                            {
                                              "value": "node",
                                              "children": []
                                            },
                                            {
                                              "value": "input_default",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "for node in self.nodes",
                                          "children": [
                                            {
                                              "value": "node",
                                              "children": []
                                            },
                                            {
                                              "value": "self.nodes",
                                              "children": [
                                                {
                                                  "value": "self",
                                                  "children": []
                                                },
                                                {
                                                  "value": "nodes",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "if (b := get_block(node.block_id))\n                and b.block_type == BlockType.OUTPUT\n                and \"name\" in node.input_default",
                                          "children": [
                                            {
                                              "value": "(b := get_block(node.block_id))\n                and b.block_type == BlockType.OUTPUT\n                and \"name\" in node.input_default",
                                              "children": [
                                                {
                                                  "value": "(b := get_block(node.block_id))\n                and b.block_type == BlockType.OUTPUT",
                                                  "children": [
                                                    {
                                                      "value": "(b := get_block(node.block_id))",
                                                      "children": [
                                                        {
                                                          "value": "b := get_block(node.block_id)",
                                                          "children": [
                                                            {
                                                              "value": "b",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "get_block(node.block_id)",
                                                              "children": [
                                                                {
                                                                  "value": "get_block",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "(node.block_id)",
                                                                  "children": [
                                                                    {
                                                                      "value": "node.block_id",
                                                                      "children": [
                                                                        {
                                                                          "value": "node",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "block_id",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "b.block_type == BlockType.OUTPUT",
                                                      "children": [
                                                        {
                                                          "value": "b.block_type",
                                                          "children": [
                                                            {
                                                              "value": "b",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "block_type",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "BlockType.OUTPUT",
                                                          "children": [
                                                            {
                                                              "value": "BlockType",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "OUTPUT",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"name\" in node.input_default",
                                                  "children": [
                                                    {
                                                      "value": "\"name\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "name",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "node.input_default",
                                                      "children": [
                                                        {
                                                          "value": "node",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "input_default",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "@staticmethod\n    def _generate_schema(\n        type_class: Type[AgentInputBlock.Input] | Type[AgentOutputBlock.Input],\n        data: list[dict],\n    ) -> dict[str, Any]:\n        props = []\n        for p in data:\n            try:\n                props.append(type_class(**p))\n            except Exception as e:\n                logger.warning(f\"Invalid {type_class}: {p}, {e}\")\n\n        return {\n            \"type\": \"object\",\n            \"properties\": {\n                p.name: {\n                    \"secret\": p.secret,\n                    \"advanced\": p.advanced,\n                    \"title\": p.title or p.name,\n                    **({\"description\": p.description} if p.description else {}),\n                    **({\"default\": p.value} if p.value is not None else {}),\n                }\n                for p in props\n            },\n            \"required\": [p.name for p in props if p.value is None],\n        }",
              "children": [
                {
                  "value": "@staticmethod",
                  "children": [
                    {
                      "value": "staticmethod",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "def _generate_schema(\n        type_class: Type[AgentInputBlock.Input] | Type[AgentOutputBlock.Input],\n        data: list[dict],\n    ) -> dict[str, Any]:\n        props = []\n        for p in data:\n            try:\n                props.append(type_class(**p))\n            except Exception as e:\n                logger.warning(f\"Invalid {type_class}: {p}, {e}\")\n\n        return {\n            \"type\": \"object\",\n            \"properties\": {\n                p.name: {\n                    \"secret\": p.secret,\n                    \"advanced\": p.advanced,\n                    \"title\": p.title or p.name,\n                    **({\"description\": p.description} if p.description else {}),\n                    **({\"default\": p.value} if p.value is not None else {}),\n                }\n                for p in props\n            },\n            \"required\": [p.name for p in props if p.value is None],\n        }",
                  "children": [
                    {
                      "value": "_generate_schema",
                      "children": []
                    },
                    {
                      "value": "(\n        type_class: Type[AgentInputBlock.Input] | Type[AgentOutputBlock.Input],\n        data: list[dict],\n    )",
                      "children": [
                        {
                          "value": "type_class: Type[AgentInputBlock.Input] | Type[AgentOutputBlock.Input]",
                          "children": [
                            {
                              "value": "type_class",
                              "children": []
                            },
                            {
                              "value": "Type[AgentInputBlock.Input] | Type[AgentOutputBlock.Input]",
                              "children": [
                                {
                                  "value": "Type[AgentInputBlock.Input] | Type[AgentOutputBlock.Input]",
                                  "children": [
                                    {
                                      "value": "Type[AgentInputBlock.Input]",
                                      "children": [
                                        {
                                          "value": "Type[AgentInputBlock.Input]",
                                          "children": [
                                            {
                                              "value": "Type",
                                              "children": []
                                            },
                                            {
                                              "value": "[AgentInputBlock.Input]",
                                              "children": [
                                                {
                                                  "value": "AgentInputBlock.Input",
                                                  "children": [
                                                    {
                                                      "value": "AgentInputBlock.Input",
                                                      "children": [
                                                        {
                                                          "value": "AgentInputBlock",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "Input",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "Type[AgentOutputBlock.Input]",
                                      "children": [
                                        {
                                          "value": "Type[AgentOutputBlock.Input]",
                                          "children": [
                                            {
                                              "value": "Type",
                                              "children": []
                                            },
                                            {
                                              "value": "[AgentOutputBlock.Input]",
                                              "children": [
                                                {
                                                  "value": "AgentOutputBlock.Input",
                                                  "children": [
                                                    {
                                                      "value": "AgentOutputBlock.Input",
                                                      "children": [
                                                        {
                                                          "value": "AgentOutputBlock",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "Input",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "data: list[dict]",
                          "children": [
                            {
                              "value": "data",
                              "children": []
                            },
                            {
                              "value": "list[dict]",
                              "children": [
                                {
                                  "value": "list[dict]",
                                  "children": [
                                    {
                                      "value": "list",
                                      "children": []
                                    },
                                    {
                                      "value": "[dict]",
                                      "children": [
                                        {
                                          "value": "dict",
                                          "children": [
                                            {
                                              "value": "dict",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "dict[str, Any]",
                      "children": [
                        {
                          "value": "dict[str, Any]",
                          "children": [
                            {
                              "value": "dict",
                              "children": []
                            },
                            {
                              "value": "[str, Any]",
                              "children": [
                                {
                                  "value": "str",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "Any",
                                  "children": [
                                    {
                                      "value": "Any",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "props = []\n        for p in data:\n            try:\n                props.append(type_class(**p))\n            except Exception as e:\n                logger.warning(f\"Invalid {type_class}: {p}, {e}\")\n\n        return {\n            \"type\": \"object\",\n            \"properties\": {\n                p.name: {\n                    \"secret\": p.secret,\n                    \"advanced\": p.advanced,\n                    \"title\": p.title or p.name,\n                    **({\"description\": p.description} if p.description else {}),\n                    **({\"default\": p.value} if p.value is not None else {}),\n                }\n                for p in props\n            },\n            \"required\": [p.name for p in props if p.value is None],\n        }",
                      "children": [
                        {
                          "value": "props = []",
                          "children": [
                            {
                              "value": "props = []",
                              "children": [
                                {
                                  "value": "props",
                                  "children": []
                                },
                                {
                                  "value": "[]",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "for p in data:\n            try:\n                props.append(type_class(**p))\n            except Exception as e:\n                logger.warning(f\"Invalid {type_class}: {p}, {e}\")",
                          "children": [
                            {
                              "value": "p",
                              "children": []
                            },
                            {
                              "value": "data",
                              "children": []
                            },
                            {
                              "value": "try:\n                props.append(type_class(**p))\n            except Exception as e:\n                logger.warning(f\"Invalid {type_class}: {p}, {e}\")",
                              "children": [
                                {
                                  "value": "try:\n                props.append(type_class(**p))\n            except Exception as e:\n                logger.warning(f\"Invalid {type_class}: {p}, {e}\")",
                                  "children": [
                                    {
                                      "value": "props.append(type_class(**p))",
                                      "children": [
                                        {
                                          "value": "props.append(type_class(**p))",
                                          "children": [
                                            {
                                              "value": "props.append(type_class(**p))",
                                              "children": [
                                                {
                                                  "value": "props.append",
                                                  "children": [
                                                    {
                                                      "value": "props",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "append",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(type_class(**p))",
                                                  "children": [
                                                    {
                                                      "value": "type_class(**p)",
                                                      "children": [
                                                        {
                                                          "value": "type_class",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "(**p)",
                                                          "children": [
                                                            {
                                                              "value": "**p",
                                                              "children": [
                                                                {
                                                                  "value": "p",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "except Exception as e:\n                logger.warning(f\"Invalid {type_class}: {p}, {e}\")",
                                      "children": [
                                        {
                                          "value": "Exception as e",
                                          "children": [
                                            {
                                              "value": "Exception",
                                              "children": []
                                            },
                                            {
                                              "value": "e",
                                              "children": [
                                                {
                                                  "value": "e",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "logger.warning(f\"Invalid {type_class}: {p}, {e}\")",
                                          "children": [
                                            {
                                              "value": "logger.warning(f\"Invalid {type_class}: {p}, {e}\")",
                                              "children": [
                                                {
                                                  "value": "logger.warning(f\"Invalid {type_class}: {p}, {e}\")",
                                                  "children": [
                                                    {
                                                      "value": "logger.warning",
                                                      "children": [
                                                        {
                                                          "value": "logger",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "warning",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "(f\"Invalid {type_class}: {p}, {e}\")",
                                                      "children": [
                                                        {
                                                          "value": "f\"Invalid {type_class}: {p}, {e}\"",
                                                          "children": [
                                                            {
                                                              "value": "f\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "Invalid",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "{type_class}",
                                                              "children": [
                                                                {
                                                                  "value": "type_class",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": ":",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "{p}",
                                                              "children": [
                                                                {
                                                                  "value": "p",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": ",",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "{e}",
                                                              "children": [
                                                                {
                                                                  "value": "e",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "return {\n            \"type\": \"object\",\n            \"properties\": {\n                p.name: {\n                    \"secret\": p.secret,\n                    \"advanced\": p.advanced,\n                    \"title\": p.title or p.name,\n                    **({\"description\": p.description} if p.description else {}),\n                    **({\"default\": p.value} if p.value is not None else {}),\n                }\n                for p in props\n            },\n            \"required\": [p.name for p in props if p.value is None],\n        }",
                          "children": [
                            {
                              "value": "{\n            \"type\": \"object\",\n            \"properties\": {\n                p.name: {\n                    \"secret\": p.secret,\n                    \"advanced\": p.advanced,\n                    \"title\": p.title or p.name,\n                    **({\"description\": p.description} if p.description else {}),\n                    **({\"default\": p.value} if p.value is not None else {}),\n                }\n                for p in props\n            },\n            \"required\": [p.name for p in props if p.value is None],\n        }",
                              "children": [
                                {
                                  "value": "\"type\": \"object\"",
                                  "children": [
                                    {
                                      "value": "\"type\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "type",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "\"object\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "object",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "\"properties\": {\n                p.name: {\n                    \"secret\": p.secret,\n                    \"advanced\": p.advanced,\n                    \"title\": p.title or p.name,\n                    **({\"description\": p.description} if p.description else {}),\n                    **({\"default\": p.value} if p.value is not None else {}),\n                }\n                for p in props\n            }",
                                  "children": [
                                    {
                                      "value": "\"properties\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "properties",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "{\n                p.name: {\n                    \"secret\": p.secret,\n                    \"advanced\": p.advanced,\n                    \"title\": p.title or p.name,\n                    **({\"description\": p.description} if p.description else {}),\n                    **({\"default\": p.value} if p.value is not None else {}),\n                }\n                for p in props\n            }",
                                      "children": [
                                        {
                                          "value": "p.name: {\n                    \"secret\": p.secret,\n                    \"advanced\": p.advanced,\n                    \"title\": p.title or p.name,\n                    **({\"description\": p.description} if p.description else {}),\n                    **({\"default\": p.value} if p.value is not None else {}),\n                }",
                                          "children": [
                                            {
                                              "value": "p.name",
                                              "children": [
                                                {
                                                  "value": "p",
                                                  "children": []
                                                },
                                                {
                                                  "value": "name",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "{\n                    \"secret\": p.secret,\n                    \"advanced\": p.advanced,\n                    \"title\": p.title or p.name,\n                    **({\"description\": p.description} if p.description else {}),\n                    **({\"default\": p.value} if p.value is not None else {}),\n                }",
                                              "children": [
                                                {
                                                  "value": "\"secret\": p.secret",
                                                  "children": [
                                                    {
                                                      "value": "\"secret\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "secret",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "p.secret",
                                                      "children": [
                                                        {
                                                          "value": "p",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "secret",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"advanced\": p.advanced",
                                                  "children": [
                                                    {
                                                      "value": "\"advanced\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "advanced",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "p.advanced",
                                                      "children": [
                                                        {
                                                          "value": "p",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "advanced",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"title\": p.title or p.name",
                                                  "children": [
                                                    {
                                                      "value": "\"title\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "title",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "p.title or p.name",
                                                      "children": [
                                                        {
                                                          "value": "p.title",
                                                          "children": [
                                                            {
                                                              "value": "p",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "title",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "p.name",
                                                          "children": [
                                                            {
                                                              "value": "p",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "name",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "**({\"description\": p.description} if p.description else {})",
                                                  "children": [
                                                    {
                                                      "value": "({\"description\": p.description} if p.description else {})",
                                                      "children": [
                                                        {
                                                          "value": "{\"description\": p.description} if p.description else {}",
                                                          "children": [
                                                            {
                                                              "value": "{\"description\": p.description}",
                                                              "children": [
                                                                {
                                                                  "value": "\"description\": p.description",
                                                                  "children": [
                                                                    {
                                                                      "value": "\"description\"",
                                                                      "children": [
                                                                        {
                                                                          "value": "\"",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "description",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "\"",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "p.description",
                                                                      "children": [
                                                                        {
                                                                          "value": "p",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "description",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "p.description",
                                                              "children": [
                                                                {
                                                                  "value": "p",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "description",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "{}",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "**({\"default\": p.value} if p.value is not None else {})",
                                                  "children": [
                                                    {
                                                      "value": "({\"default\": p.value} if p.value is not None else {})",
                                                      "children": [
                                                        {
                                                          "value": "{\"default\": p.value} if p.value is not None else {}",
                                                          "children": [
                                                            {
                                                              "value": "{\"default\": p.value}",
                                                              "children": [
                                                                {
                                                                  "value": "\"default\": p.value",
                                                                  "children": [
                                                                    {
                                                                      "value": "\"default\"",
                                                                      "children": [
                                                                        {
                                                                          "value": "\"",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "default",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "\"",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "p.value",
                                                                      "children": [
                                                                        {
                                                                          "value": "p",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "value",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "p.value is not None",
                                                              "children": [
                                                                {
                                                                  "value": "p.value",
                                                                  "children": [
                                                                    {
                                                                      "value": "p",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "value",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "None",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "{}",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "for p in props",
                                          "children": [
                                            {
                                              "value": "p",
                                              "children": []
                                            },
                                            {
                                              "value": "props",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "\"required\": [p.name for p in props if p.value is None]",
                                  "children": [
                                    {
                                      "value": "\"required\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "required",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "[p.name for p in props if p.value is None]",
                                      "children": [
                                        {
                                          "value": "p.name",
                                          "children": [
                                            {
                                              "value": "p",
                                              "children": []
                                            },
                                            {
                                              "value": "name",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "for p in props",
                                          "children": [
                                            {
                                              "value": "p",
                                              "children": []
                                            },
                                            {
                                              "value": "props",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "if p.value is None",
                                          "children": [
                                            {
                                              "value": "p.value is None",
                                              "children": [
                                                {
                                                  "value": "p.value",
                                                  "children": [
                                                    {
                                                      "value": "p",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "value",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "None",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class GraphModel(Graph):\n    user_id: str\n    nodes: list[NodeModel] = []  # type: ignore\n\n    @property\n    def starting_nodes(self) -> list[Node]:\n        outbound_nodes = {link.sink_id for link in self.links}\n        input_nodes = {\n            v.id\n            for v in self.nodes\n            if (b := get_block(v.block_id)) and b.block_type == BlockType.INPUT\n        }\n        return [\n            node\n            for node in self.nodes\n            if node.id not in outbound_nodes or node.id in input_nodes\n        ]\n\n    def reassign_ids(self, user_id: str, reassign_graph_id: bool = False):\n        \"\"\"\n        Reassigns all IDs in the graph to new UUIDs.\n        This method can be used before storing a new graph to the database.\n        \"\"\"\n\n        # Reassign Graph ID\n        id_map = {node.id: str(uuid.uuid4()) for node in self.nodes}\n        if reassign_graph_id:\n            self.id = str(uuid.uuid4())\n\n        # Reassign Node IDs\n        for node in self.nodes:\n            node.id = id_map[node.id]\n\n        # Reassign Link IDs\n        for link in self.links:\n            link.source_id = id_map[link.source_id]\n            link.sink_id = id_map[link.sink_id]\n\n        # Reassign User IDs for agent blocks\n        for node in self.nodes:\n            if node.block_id != AgentExecutorBlock().id:\n                continue\n            node.input_default[\"user_id\"] = user_id\n            node.input_default.setdefault(\"data\", {})\n\n        self.validate_graph()\n\n    def validate_graph(self, for_run: bool = False):\n        def sanitize(name):\n            return name.split(\"_#_\")[0].split(\"_@_\")[0].split(\"_$_\")[0]\n\n        input_links = defaultdict(list)\n        for link in self.links:\n            input_links[link.sink_id].append(link)\n\n        # Nodes: required fields are filled or connected and dependencies are satisfied\n        for node in self.nodes:\n            block = get_block(node.block_id)\n            if block is None:\n                raise ValueError(f\"Invalid block {node.block_id} for node #{node.id}\")\n\n            provided_inputs = set(\n                [sanitize(name) for name in node.input_default]\n                + [sanitize(link.sink_name) for link in input_links.get(node.id, [])]\n            )\n            for name in block.input_schema.get_required_fields():\n                if (\n                    name not in provided_inputs\n                    and not (\n                        name == \"payload\"\n                        and block.block_type\n                        in (BlockType.WEBHOOK, BlockType.WEBHOOK_MANUAL)\n                    )\n                    and (\n                        for_run  # Skip input completion validation, unless when executing.\n                        or block.block_type == BlockType.INPUT\n                        or block.block_type == BlockType.OUTPUT\n                        or block.block_type == BlockType.AGENT\n                    )\n                ):\n                    raise ValueError(\n                        f\"Node {block.name} #{node.id} required input missing: `{name}`\"\n                    )\n\n            # Get input schema properties and check dependencies\n            input_schema = block.input_schema.model_fields\n            required_fields = block.input_schema.get_required_fields()\n\n            def has_value(name):\n                return (\n                    node is not None\n                    and name in node.input_default\n                    and node.input_default[name] is not None\n                    and str(node.input_default[name]).strip() != \"\"\n                ) or (name in input_schema and input_schema[name].default is not None)\n\n            # Validate dependencies between fields\n            for field_name, field_info in input_schema.items():\n                # Apply input dependency validation only on run & field with depends_on\n                json_schema_extra = field_info.json_schema_extra or {}\n                dependencies = json_schema_extra.get(\"depends_on\", [])\n                if not for_run or not dependencies:\n                    continue\n\n                # Check if dependent field has value in input_default\n                field_has_value = has_value(field_name)\n                field_is_required = field_name in required_fields\n\n                # Check for missing dependencies when dependent field is present\n                missing_deps = [dep for dep in dependencies if not has_value(dep)]\n                if missing_deps and (field_has_value or field_is_required):\n                    raise ValueError(\n                        f\"Node {block.name} #{node.id}: Field `{field_name}` requires [{', '.join(missing_deps)}] to be set\"\n                    )\n\n        node_map = {v.id: v for v in self.nodes}\n\n        def is_static_output_block(nid: str) -> bool:\n            bid = node_map[nid].block_id\n            b = get_block(bid)\n            return b.static_output if b else False\n\n        # Links: links are connected and the connected pin data type are compatible.\n        for link in self.links:\n            source = (link.source_id, link.source_name)\n            sink = (link.sink_id, link.sink_name)\n            suffix = f\"Link {source} <-> {sink}\"\n\n            for i, (node_id, name) in enumerate([source, sink]):\n                node = node_map.get(node_id)\n                if not node:\n                    raise ValueError(\n                        f\"{suffix}, {node_id} is invalid node id, available nodes: {node_map.keys()}\"\n                    )\n\n                block = get_block(node.block_id)\n                if not block:\n                    blocks = {v().id: v().name for v in get_blocks().values()}\n                    raise ValueError(\n                        f\"{suffix}, {node.block_id} is invalid block id, available blocks: {blocks}\"\n                    )\n\n                sanitized_name = sanitize(name)\n                vals = node.input_default\n                if i == 0:\n                    fields = (\n                        block.output_schema.get_fields()\n                        if block.block_type != BlockType.AGENT\n                        else vals.get(\"output_schema\", {}).get(\"properties\", {}).keys()\n                    )\n                else:\n                    fields = (\n                        block.input_schema.get_fields()\n                        if block.block_type != BlockType.AGENT\n                        else vals.get(\"input_schema\", {}).get(\"properties\", {}).keys()\n                    )\n                if sanitized_name not in fields:\n                    fields_msg = f\"Allowed fields: {fields}\"\n                    raise ValueError(f\"{suffix}, `{name}` invalid, {fields_msg}\")\n\n            if is_static_output_block(link.source_id):\n                link.is_static = True  # Each value block output should be static.\n\n    @staticmethod\n    def from_db(graph: AgentGraph, for_export: bool = False):\n        return GraphModel(\n            id=graph.id,\n            user_id=graph.userId,\n            version=graph.version,\n            is_active=graph.isActive,\n            is_template=graph.isTemplate,\n            name=graph.name or \"\",\n            description=graph.description or \"\",\n            nodes=[\n                NodeModel.from_db(GraphModel._process_node(node, for_export))\n                for node in graph.AgentNodes or []\n            ],\n            links=list(\n                {\n                    Link.from_db(link)\n                    for node in graph.AgentNodes or []\n                    for link in (node.Input or []) + (node.Output or [])\n                }\n            ),\n        )\n\n    @staticmethod\n    def _process_node(node: AgentNode, for_export: bool) -> AgentNode:\n        if for_export:\n            # Remove credentials from node input\n            if node.constantInput:\n                constant_input = json.loads(\n                    node.constantInput, target_type=dict[str, Any]\n                )\n                constant_input = GraphModel._hide_node_input_credentials(constant_input)\n                node.constantInput = json.dumps(constant_input)\n\n            # Remove webhook info\n            node.webhookId = None\n            node.Webhook = None\n\n        return node\n\n    @staticmethod\n    def _hide_node_input_credentials(input_data: dict[str, Any]) -> dict[str, Any]:\n        sensitive_keys = [\"credentials\", \"api_key\", \"password\", \"token\", \"secret\"]\n        result = {}\n        for key, value in input_data.items():\n            if isinstance(value, dict):\n                result[key] = GraphModel._hide_node_input_credentials(value)\n            elif isinstance(value, str) and any(\n                sensitive_key in key.lower() for sensitive_key in sensitive_keys\n            ):\n                # Skip this key-value pair in the result\n                continue\n            else:\n                result[key] = value\n        return result",
      "children": [
        {
          "value": "GraphModel",
          "children": []
        },
        {
          "value": "(Graph)",
          "children": [
            {
              "value": "Graph",
              "children": []
            }
          ]
        },
        {
          "value": "user_id: str\n    nodes: list[NodeModel] = []  # type: ignore\n\n    @property\n    def starting_nodes(self) -> list[Node]:\n        outbound_nodes = {link.sink_id for link in self.links}\n        input_nodes = {\n            v.id\n            for v in self.nodes\n            if (b := get_block(v.block_id)) and b.block_type == BlockType.INPUT\n        }\n        return [\n            node\n            for node in self.nodes\n            if node.id not in outbound_nodes or node.id in input_nodes\n        ]\n\n    def reassign_ids(self, user_id: str, reassign_graph_id: bool = False):\n        \"\"\"\n        Reassigns all IDs in the graph to new UUIDs.\n        This method can be used before storing a new graph to the database.\n        \"\"\"\n\n        # Reassign Graph ID\n        id_map = {node.id: str(uuid.uuid4()) for node in self.nodes}\n        if reassign_graph_id:\n            self.id = str(uuid.uuid4())\n\n        # Reassign Node IDs\n        for node in self.nodes:\n            node.id = id_map[node.id]\n\n        # Reassign Link IDs\n        for link in self.links:\n            link.source_id = id_map[link.source_id]\n            link.sink_id = id_map[link.sink_id]\n\n        # Reassign User IDs for agent blocks\n        for node in self.nodes:\n            if node.block_id != AgentExecutorBlock().id:\n                continue\n            node.input_default[\"user_id\"] = user_id\n            node.input_default.setdefault(\"data\", {})\n\n        self.validate_graph()\n\n    def validate_graph(self, for_run: bool = False):\n        def sanitize(name):\n            return name.split(\"_#_\")[0].split(\"_@_\")[0].split(\"_$_\")[0]\n\n        input_links = defaultdict(list)\n        for link in self.links:\n            input_links[link.sink_id].append(link)\n\n        # Nodes: required fields are filled or connected and dependencies are satisfied\n        for node in self.nodes:\n            block = get_block(node.block_id)\n            if block is None:\n                raise ValueError(f\"Invalid block {node.block_id} for node #{node.id}\")\n\n            provided_inputs = set(\n                [sanitize(name) for name in node.input_default]\n                + [sanitize(link.sink_name) for link in input_links.get(node.id, [])]\n            )\n            for name in block.input_schema.get_required_fields():\n                if (\n                    name not in provided_inputs\n                    and not (\n                        name == \"payload\"\n                        and block.block_type\n                        in (BlockType.WEBHOOK, BlockType.WEBHOOK_MANUAL)\n                    )\n                    and (\n                        for_run  # Skip input completion validation, unless when executing.\n                        or block.block_type == BlockType.INPUT\n                        or block.block_type == BlockType.OUTPUT\n                        or block.block_type == BlockType.AGENT\n                    )\n                ):\n                    raise ValueError(\n                        f\"Node {block.name} #{node.id} required input missing: `{name}`\"\n                    )\n\n            # Get input schema properties and check dependencies\n            input_schema = block.input_schema.model_fields\n            required_fields = block.input_schema.get_required_fields()\n\n            def has_value(name):\n                return (\n                    node is not None\n                    and name in node.input_default\n                    and node.input_default[name] is not None\n                    and str(node.input_default[name]).strip() != \"\"\n                ) or (name in input_schema and input_schema[name].default is not None)\n\n            # Validate dependencies between fields\n            for field_name, field_info in input_schema.items():\n                # Apply input dependency validation only on run & field with depends_on\n                json_schema_extra = field_info.json_schema_extra or {}\n                dependencies = json_schema_extra.get(\"depends_on\", [])\n                if not for_run or not dependencies:\n                    continue\n\n                # Check if dependent field has value in input_default\n                field_has_value = has_value(field_name)\n                field_is_required = field_name in required_fields\n\n                # Check for missing dependencies when dependent field is present\n                missing_deps = [dep for dep in dependencies if not has_value(dep)]\n                if missing_deps and (field_has_value or field_is_required):\n                    raise ValueError(\n                        f\"Node {block.name} #{node.id}: Field `{field_name}` requires [{', '.join(missing_deps)}] to be set\"\n                    )\n\n        node_map = {v.id: v for v in self.nodes}\n\n        def is_static_output_block(nid: str) -> bool:\n            bid = node_map[nid].block_id\n            b = get_block(bid)\n            return b.static_output if b else False\n\n        # Links: links are connected and the connected pin data type are compatible.\n        for link in self.links:\n            source = (link.source_id, link.source_name)\n            sink = (link.sink_id, link.sink_name)\n            suffix = f\"Link {source} <-> {sink}\"\n\n            for i, (node_id, name) in enumerate([source, sink]):\n                node = node_map.get(node_id)\n                if not node:\n                    raise ValueError(\n                        f\"{suffix}, {node_id} is invalid node id, available nodes: {node_map.keys()}\"\n                    )\n\n                block = get_block(node.block_id)\n                if not block:\n                    blocks = {v().id: v().name for v in get_blocks().values()}\n                    raise ValueError(\n                        f\"{suffix}, {node.block_id} is invalid block id, available blocks: {blocks}\"\n                    )\n\n                sanitized_name = sanitize(name)\n                vals = node.input_default\n                if i == 0:\n                    fields = (\n                        block.output_schema.get_fields()\n                        if block.block_type != BlockType.AGENT\n                        else vals.get(\"output_schema\", {}).get(\"properties\", {}).keys()\n                    )\n                else:\n                    fields = (\n                        block.input_schema.get_fields()\n                        if block.block_type != BlockType.AGENT\n                        else vals.get(\"input_schema\", {}).get(\"properties\", {}).keys()\n                    )\n                if sanitized_name not in fields:\n                    fields_msg = f\"Allowed fields: {fields}\"\n                    raise ValueError(f\"{suffix}, `{name}` invalid, {fields_msg}\")\n\n            if is_static_output_block(link.source_id):\n                link.is_static = True  # Each value block output should be static.\n\n    @staticmethod\n    def from_db(graph: AgentGraph, for_export: bool = False):\n        return GraphModel(\n            id=graph.id,\n            user_id=graph.userId,\n            version=graph.version,\n            is_active=graph.isActive,\n            is_template=graph.isTemplate,\n            name=graph.name or \"\",\n            description=graph.description or \"\",\n            nodes=[\n                NodeModel.from_db(GraphModel._process_node(node, for_export))\n                for node in graph.AgentNodes or []\n            ],\n            links=list(\n                {\n                    Link.from_db(link)\n                    for node in graph.AgentNodes or []\n                    for link in (node.Input or []) + (node.Output or [])\n                }\n            ),\n        )\n\n    @staticmethod\n    def _process_node(node: AgentNode, for_export: bool) -> AgentNode:\n        if for_export:\n            # Remove credentials from node input\n            if node.constantInput:\n                constant_input = json.loads(\n                    node.constantInput, target_type=dict[str, Any]\n                )\n                constant_input = GraphModel._hide_node_input_credentials(constant_input)\n                node.constantInput = json.dumps(constant_input)\n\n            # Remove webhook info\n            node.webhookId = None\n            node.Webhook = None\n\n        return node\n\n    @staticmethod\n    def _hide_node_input_credentials(input_data: dict[str, Any]) -> dict[str, Any]:\n        sensitive_keys = [\"credentials\", \"api_key\", \"password\", \"token\", \"secret\"]\n        result = {}\n        for key, value in input_data.items():\n            if isinstance(value, dict):\n                result[key] = GraphModel._hide_node_input_credentials(value)\n            elif isinstance(value, str) and any(\n                sensitive_key in key.lower() for sensitive_key in sensitive_keys\n            ):\n                # Skip this key-value pair in the result\n                continue\n            else:\n                result[key] = value\n        return result",
          "children": [
            {
              "value": "user_id: str",
              "children": [
                {
                  "value": "user_id: str",
                  "children": [
                    {
                      "value": "user_id",
                      "children": []
                    },
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "nodes: list[NodeModel] = []",
              "children": [
                {
                  "value": "nodes: list[NodeModel] = []",
                  "children": [
                    {
                      "value": "nodes",
                      "children": []
                    },
                    {
                      "value": "list[NodeModel]",
                      "children": [
                        {
                          "value": "list[NodeModel]",
                          "children": [
                            {
                              "value": "list",
                              "children": []
                            },
                            {
                              "value": "[NodeModel]",
                              "children": [
                                {
                                  "value": "NodeModel",
                                  "children": [
                                    {
                                      "value": "NodeModel",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "[]",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "# type: ignore",
              "children": []
            },
            {
              "value": "@property\n    def starting_nodes(self) -> list[Node]:\n        outbound_nodes = {link.sink_id for link in self.links}\n        input_nodes = {\n            v.id\n            for v in self.nodes\n            if (b := get_block(v.block_id)) and b.block_type == BlockType.INPUT\n        }\n        return [\n            node\n            for node in self.nodes\n            if node.id not in outbound_nodes or node.id in input_nodes\n        ]",
              "children": [
                {
                  "value": "@property",
                  "children": [
                    {
                      "value": "property",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "def starting_nodes(self) -> list[Node]:\n        outbound_nodes = {link.sink_id for link in self.links}\n        input_nodes = {\n            v.id\n            for v in self.nodes\n            if (b := get_block(v.block_id)) and b.block_type == BlockType.INPUT\n        }\n        return [\n            node\n            for node in self.nodes\n            if node.id not in outbound_nodes or node.id in input_nodes\n        ]",
                  "children": [
                    {
                      "value": "starting_nodes",
                      "children": []
                    },
                    {
                      "value": "(self)",
                      "children": [
                        {
                          "value": "self",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "list[Node]",
                      "children": [
                        {
                          "value": "list[Node]",
                          "children": [
                            {
                              "value": "list",
                              "children": []
                            },
                            {
                              "value": "[Node]",
                              "children": [
                                {
                                  "value": "Node",
                                  "children": [
                                    {
                                      "value": "Node",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "outbound_nodes = {link.sink_id for link in self.links}\n        input_nodes = {\n            v.id\n            for v in self.nodes\n            if (b := get_block(v.block_id)) and b.block_type == BlockType.INPUT\n        }\n        return [\n            node\n            for node in self.nodes\n            if node.id not in outbound_nodes or node.id in input_nodes\n        ]",
                      "children": [
                        {
                          "value": "outbound_nodes = {link.sink_id for link in self.links}",
                          "children": [
                            {
                              "value": "outbound_nodes = {link.sink_id for link in self.links}",
                              "children": [
                                {
                                  "value": "outbound_nodes",
                                  "children": []
                                },
                                {
                                  "value": "{link.sink_id for link in self.links}",
                                  "children": [
                                    {
                                      "value": "link.sink_id",
                                      "children": [
                                        {
                                          "value": "link",
                                          "children": []
                                        },
                                        {
                                          "value": "sink_id",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "for link in self.links",
                                      "children": [
                                        {
                                          "value": "link",
                                          "children": []
                                        },
                                        {
                                          "value": "self.links",
                                          "children": [
                                            {
                                              "value": "self",
                                              "children": []
                                            },
                                            {
                                              "value": "links",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "input_nodes = {\n            v.id\n            for v in self.nodes\n            if (b := get_block(v.block_id)) and b.block_type == BlockType.INPUT\n        }",
                          "children": [
                            {
                              "value": "input_nodes = {\n            v.id\n            for v in self.nodes\n            if (b := get_block(v.block_id)) and b.block_type == BlockType.INPUT\n        }",
                              "children": [
                                {
                                  "value": "input_nodes",
                                  "children": []
                                },
                                {
                                  "value": "{\n            v.id\n            for v in self.nodes\n            if (b := get_block(v.block_id)) and b.block_type == BlockType.INPUT\n        }",
                                  "children": [
                                    {
                                      "value": "v.id",
                                      "children": [
                                        {
                                          "value": "v",
                                          "children": []
                                        },
                                        {
                                          "value": "id",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "for v in self.nodes",
                                      "children": [
                                        {
                                          "value": "v",
                                          "children": []
                                        },
                                        {
                                          "value": "self.nodes",
                                          "children": [
                                            {
                                              "value": "self",
                                              "children": []
                                            },
                                            {
                                              "value": "nodes",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "if (b := get_block(v.block_id)) and b.block_type == BlockType.INPUT",
                                      "children": [
                                        {
                                          "value": "(b := get_block(v.block_id)) and b.block_type == BlockType.INPUT",
                                          "children": [
                                            {
                                              "value": "(b := get_block(v.block_id))",
                                              "children": [
                                                {
                                                  "value": "b := get_block(v.block_id)",
                                                  "children": [
                                                    {
                                                      "value": "b",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "get_block(v.block_id)",
                                                      "children": [
                                                        {
                                                          "value": "get_block",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "(v.block_id)",
                                                          "children": [
                                                            {
                                                              "value": "v.block_id",
                                                              "children": [
                                                                {
                                                                  "value": "v",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "block_id",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "b.block_type == BlockType.INPUT",
                                              "children": [
                                                {
                                                  "value": "b.block_type",
                                                  "children": [
                                                    {
                                                      "value": "b",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "block_type",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "BlockType.INPUT",
                                                  "children": [
                                                    {
                                                      "value": "BlockType",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "INPUT",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "return [\n            node\n            for node in self.nodes\n            if node.id not in outbound_nodes or node.id in input_nodes\n        ]",
                          "children": [
                            {
                              "value": "[\n            node\n            for node in self.nodes\n            if node.id not in outbound_nodes or node.id in input_nodes\n        ]",
                              "children": [
                                {
                                  "value": "node",
                                  "children": []
                                },
                                {
                                  "value": "for node in self.nodes",
                                  "children": [
                                    {
                                      "value": "node",
                                      "children": []
                                    },
                                    {
                                      "value": "self.nodes",
                                      "children": [
                                        {
                                          "value": "self",
                                          "children": []
                                        },
                                        {
                                          "value": "nodes",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "if node.id not in outbound_nodes or node.id in input_nodes",
                                  "children": [
                                    {
                                      "value": "node.id not in outbound_nodes or node.id in input_nodes",
                                      "children": [
                                        {
                                          "value": "node.id not in outbound_nodes",
                                          "children": [
                                            {
                                              "value": "node.id",
                                              "children": [
                                                {
                                                  "value": "node",
                                                  "children": []
                                                },
                                                {
                                                  "value": "id",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "outbound_nodes",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "node.id in input_nodes",
                                          "children": [
                                            {
                                              "value": "node.id",
                                              "children": [
                                                {
                                                  "value": "node",
                                                  "children": []
                                                },
                                                {
                                                  "value": "id",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "input_nodes",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def reassign_ids(self, user_id: str, reassign_graph_id: bool = False):\n        \"\"\"\n        Reassigns all IDs in the graph to new UUIDs.\n        This method can be used before storing a new graph to the database.\n        \"\"\"\n\n        # Reassign Graph ID\n        id_map = {node.id: str(uuid.uuid4()) for node in self.nodes}\n        if reassign_graph_id:\n            self.id = str(uuid.uuid4())\n\n        # Reassign Node IDs\n        for node in self.nodes:\n            node.id = id_map[node.id]\n\n        # Reassign Link IDs\n        for link in self.links:\n            link.source_id = id_map[link.source_id]\n            link.sink_id = id_map[link.sink_id]\n\n        # Reassign User IDs for agent blocks\n        for node in self.nodes:\n            if node.block_id != AgentExecutorBlock().id:\n                continue\n            node.input_default[\"user_id\"] = user_id\n            node.input_default.setdefault(\"data\", {})\n\n        self.validate_graph()",
              "children": [
                {
                  "value": "reassign_ids",
                  "children": []
                },
                {
                  "value": "(self, user_id: str, reassign_graph_id: bool = False)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "user_id: str",
                      "children": [
                        {
                          "value": "user_id",
                          "children": []
                        },
                        {
                          "value": "str",
                          "children": [
                            {
                              "value": "str",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "reassign_graph_id: bool = False",
                      "children": [
                        {
                          "value": "reassign_graph_id",
                          "children": []
                        },
                        {
                          "value": "bool",
                          "children": [
                            {
                              "value": "bool",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "False",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "\"\"\"\n        Reassigns all IDs in the graph to new UUIDs.\n        This method can be used before storing a new graph to the database.\n        \"\"\"\n\n        # Reassign Graph ID\n        id_map = {node.id: str(uuid.uuid4()) for node in self.nodes}\n        if reassign_graph_id:\n            self.id = str(uuid.uuid4())\n\n        # Reassign Node IDs\n        for node in self.nodes:\n            node.id = id_map[node.id]\n\n        # Reassign Link IDs\n        for link in self.links:\n            link.source_id = id_map[link.source_id]\n            link.sink_id = id_map[link.sink_id]\n\n        # Reassign User IDs for agent blocks\n        for node in self.nodes:\n            if node.block_id != AgentExecutorBlock().id:\n                continue\n            node.input_default[\"user_id\"] = user_id\n            node.input_default.setdefault(\"data\", {})\n\n        self.validate_graph()",
                  "children": [
                    {
                      "value": "\"\"\"\n        Reassigns all IDs in the graph to new UUIDs.\n        This method can be used before storing a new graph to the database.\n        \"\"\"",
                      "children": [
                        {
                          "value": "\"\"\"\n        Reassigns all IDs in the graph to new UUIDs.\n        This method can be used before storing a new graph to the database.\n        \"\"\"",
                          "children": [
                            {
                              "value": "\"\"\"",
                              "children": []
                            },
                            {
                              "value": "Reassigns all IDs in the graph to new UUIDs.\n        This method can be used before storing a new graph to the database.",
                              "children": []
                            },
                            {
                              "value": "\"\"\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "# Reassign Graph ID",
                      "children": []
                    },
                    {
                      "value": "id_map = {node.id: str(uuid.uuid4()) for node in self.nodes}",
                      "children": [
                        {
                          "value": "id_map = {node.id: str(uuid.uuid4()) for node in self.nodes}",
                          "children": [
                            {
                              "value": "id_map",
                              "children": []
                            },
                            {
                              "value": "{node.id: str(uuid.uuid4()) for node in self.nodes}",
                              "children": [
                                {
                                  "value": "node.id: str(uuid.uuid4())",
                                  "children": [
                                    {
                                      "value": "node.id",
                                      "children": [
                                        {
                                          "value": "node",
                                          "children": []
                                        },
                                        {
                                          "value": "id",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "str(uuid.uuid4())",
                                      "children": [
                                        {
                                          "value": "str",
                                          "children": []
                                        },
                                        {
                                          "value": "(uuid.uuid4())",
                                          "children": [
                                            {
                                              "value": "uuid.uuid4()",
                                              "children": [
                                                {
                                                  "value": "uuid.uuid4",
                                                  "children": [
                                                    {
                                                      "value": "uuid",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "uuid4",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "()",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "for node in self.nodes",
                                  "children": [
                                    {
                                      "value": "node",
                                      "children": []
                                    },
                                    {
                                      "value": "self.nodes",
                                      "children": [
                                        {
                                          "value": "self",
                                          "children": []
                                        },
                                        {
                                          "value": "nodes",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if reassign_graph_id:\n            self.id = str(uuid.uuid4())",
                      "children": [
                        {
                          "value": "reassign_graph_id",
                          "children": []
                        },
                        {
                          "value": "self.id = str(uuid.uuid4())",
                          "children": [
                            {
                              "value": "self.id = str(uuid.uuid4())",
                              "children": [
                                {
                                  "value": "self.id = str(uuid.uuid4())",
                                  "children": [
                                    {
                                      "value": "self.id",
                                      "children": [
                                        {
                                          "value": "self",
                                          "children": []
                                        },
                                        {
                                          "value": "id",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "str(uuid.uuid4())",
                                      "children": [
                                        {
                                          "value": "str",
                                          "children": []
                                        },
                                        {
                                          "value": "(uuid.uuid4())",
                                          "children": [
                                            {
                                              "value": "uuid.uuid4()",
                                              "children": [
                                                {
                                                  "value": "uuid.uuid4",
                                                  "children": [
                                                    {
                                                      "value": "uuid",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "uuid4",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "()",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "# Reassign Node IDs",
                      "children": []
                    },
                    {
                      "value": "for node in self.nodes:\n            node.id = id_map[node.id]",
                      "children": [
                        {
                          "value": "node",
                          "children": []
                        },
                        {
                          "value": "self.nodes",
                          "children": [
                            {
                              "value": "self",
                              "children": []
                            },
                            {
                              "value": "nodes",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "node.id = id_map[node.id]",
                          "children": [
                            {
                              "value": "node.id = id_map[node.id]",
                              "children": [
                                {
                                  "value": "node.id = id_map[node.id]",
                                  "children": [
                                    {
                                      "value": "node.id",
                                      "children": [
                                        {
                                          "value": "node",
                                          "children": []
                                        },
                                        {
                                          "value": "id",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "id_map[node.id]",
                                      "children": [
                                        {
                                          "value": "id_map",
                                          "children": []
                                        },
                                        {
                                          "value": "node.id",
                                          "children": [
                                            {
                                              "value": "node",
                                              "children": []
                                            },
                                            {
                                              "value": "id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "# Reassign Link IDs",
                      "children": []
                    },
                    {
                      "value": "for link in self.links:\n            link.source_id = id_map[link.source_id]\n            link.sink_id = id_map[link.sink_id]",
                      "children": [
                        {
                          "value": "link",
                          "children": []
                        },
                        {
                          "value": "self.links",
                          "children": [
                            {
                              "value": "self",
                              "children": []
                            },
                            {
                              "value": "links",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "link.source_id = id_map[link.source_id]\n            link.sink_id = id_map[link.sink_id]",
                          "children": [
                            {
                              "value": "link.source_id = id_map[link.source_id]",
                              "children": [
                                {
                                  "value": "link.source_id = id_map[link.source_id]",
                                  "children": [
                                    {
                                      "value": "link.source_id",
                                      "children": [
                                        {
                                          "value": "link",
                                          "children": []
                                        },
                                        {
                                          "value": "source_id",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "id_map[link.source_id]",
                                      "children": [
                                        {
                                          "value": "id_map",
                                          "children": []
                                        },
                                        {
                                          "value": "link.source_id",
                                          "children": [
                                            {
                                              "value": "link",
                                              "children": []
                                            },
                                            {
                                              "value": "source_id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "link.sink_id = id_map[link.sink_id]",
                              "children": [
                                {
                                  "value": "link.sink_id = id_map[link.sink_id]",
                                  "children": [
                                    {
                                      "value": "link.sink_id",
                                      "children": [
                                        {
                                          "value": "link",
                                          "children": []
                                        },
                                        {
                                          "value": "sink_id",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "id_map[link.sink_id]",
                                      "children": [
                                        {
                                          "value": "id_map",
                                          "children": []
                                        },
                                        {
                                          "value": "link.sink_id",
                                          "children": [
                                            {
                                              "value": "link",
                                              "children": []
                                            },
                                            {
                                              "value": "sink_id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "# Reassign User IDs for agent blocks",
                      "children": []
                    },
                    {
                      "value": "for node in self.nodes:\n            if node.block_id != AgentExecutorBlock().id:\n                continue\n            node.input_default[\"user_id\"] = user_id\n            node.input_default.setdefault(\"data\", {})",
                      "children": [
                        {
                          "value": "node",
                          "children": []
                        },
                        {
                          "value": "self.nodes",
                          "children": [
                            {
                              "value": "self",
                              "children": []
                            },
                            {
                              "value": "nodes",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "if node.block_id != AgentExecutorBlock().id:\n                continue\n            node.input_default[\"user_id\"] = user_id\n            node.input_default.setdefault(\"data\", {})",
                          "children": [
                            {
                              "value": "if node.block_id != AgentExecutorBlock().id:\n                continue",
                              "children": [
                                {
                                  "value": "node.block_id != AgentExecutorBlock().id",
                                  "children": [
                                    {
                                      "value": "node.block_id",
                                      "children": [
                                        {
                                          "value": "node",
                                          "children": []
                                        },
                                        {
                                          "value": "block_id",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "AgentExecutorBlock().id",
                                      "children": [
                                        {
                                          "value": "AgentExecutorBlock()",
                                          "children": [
                                            {
                                              "value": "AgentExecutorBlock",
                                              "children": []
                                            },
                                            {
                                              "value": "()",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "id",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "continue",
                                  "children": [
                                    {
                                      "value": "continue",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "node.input_default[\"user_id\"] = user_id",
                              "children": [
                                {
                                  "value": "node.input_default[\"user_id\"] = user_id",
                                  "children": [
                                    {
                                      "value": "node.input_default[\"user_id\"]",
                                      "children": [
                                        {
                                          "value": "node.input_default",
                                          "children": [
                                            {
                                              "value": "node",
                                              "children": []
                                            },
                                            {
                                              "value": "input_default",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"user_id\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "user_id",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "user_id",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "node.input_default.setdefault(\"data\", {})",
                              "children": [
                                {
                                  "value": "node.input_default.setdefault(\"data\", {})",
                                  "children": [
                                    {
                                      "value": "node.input_default.setdefault",
                                      "children": [
                                        {
                                          "value": "node.input_default",
                                          "children": [
                                            {
                                              "value": "node",
                                              "children": []
                                            },
                                            {
                                              "value": "input_default",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "setdefault",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(\"data\", {})",
                                      "children": [
                                        {
                                          "value": "\"data\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "data",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "{}",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.validate_graph()",
                      "children": [
                        {
                          "value": "self.validate_graph()",
                          "children": [
                            {
                              "value": "self.validate_graph",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "validate_graph",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "()",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def validate_graph(self, for_run: bool = False):\n        def sanitize(name):\n            return name.split(\"_#_\")[0].split(\"_@_\")[0].split(\"_$_\")[0]\n\n        input_links = defaultdict(list)\n        for link in self.links:\n            input_links[link.sink_id].append(link)\n\n        # Nodes: required fields are filled or connected and dependencies are satisfied\n        for node in self.nodes:\n            block = get_block(node.block_id)\n            if block is None:\n                raise ValueError(f\"Invalid block {node.block_id} for node #{node.id}\")\n\n            provided_inputs = set(\n                [sanitize(name) for name in node.input_default]\n                + [sanitize(link.sink_name) for link in input_links.get(node.id, [])]\n            )\n            for name in block.input_schema.get_required_fields():\n                if (\n                    name not in provided_inputs\n                    and not (\n                        name == \"payload\"\n                        and block.block_type\n                        in (BlockType.WEBHOOK, BlockType.WEBHOOK_MANUAL)\n                    )\n                    and (\n                        for_run  # Skip input completion validation, unless when executing.\n                        or block.block_type == BlockType.INPUT\n                        or block.block_type == BlockType.OUTPUT\n                        or block.block_type == BlockType.AGENT\n                    )\n                ):\n                    raise ValueError(\n                        f\"Node {block.name} #{node.id} required input missing: `{name}`\"\n                    )\n\n            # Get input schema properties and check dependencies\n            input_schema = block.input_schema.model_fields\n            required_fields = block.input_schema.get_required_fields()\n\n            def has_value(name):\n                return (\n                    node is not None\n                    and name in node.input_default\n                    and node.input_default[name] is not None\n                    and str(node.input_default[name]).strip() != \"\"\n                ) or (name in input_schema and input_schema[name].default is not None)\n\n            # Validate dependencies between fields\n            for field_name, field_info in input_schema.items():\n                # Apply input dependency validation only on run & field with depends_on\n                json_schema_extra = field_info.json_schema_extra or {}\n                dependencies = json_schema_extra.get(\"depends_on\", [])\n                if not for_run or not dependencies:\n                    continue\n\n                # Check if dependent field has value in input_default\n                field_has_value = has_value(field_name)\n                field_is_required = field_name in required_fields\n\n                # Check for missing dependencies when dependent field is present\n                missing_deps = [dep for dep in dependencies if not has_value(dep)]\n                if missing_deps and (field_has_value or field_is_required):\n                    raise ValueError(\n                        f\"Node {block.name} #{node.id}: Field `{field_name}` requires [{', '.join(missing_deps)}] to be set\"\n                    )\n\n        node_map = {v.id: v for v in self.nodes}\n\n        def is_static_output_block(nid: str) -> bool:\n            bid = node_map[nid].block_id\n            b = get_block(bid)\n            return b.static_output if b else False\n\n        # Links: links are connected and the connected pin data type are compatible.\n        for link in self.links:\n            source = (link.source_id, link.source_name)\n            sink = (link.sink_id, link.sink_name)\n            suffix = f\"Link {source} <-> {sink}\"\n\n            for i, (node_id, name) in enumerate([source, sink]):\n                node = node_map.get(node_id)\n                if not node:\n                    raise ValueError(\n                        f\"{suffix}, {node_id} is invalid node id, available nodes: {node_map.keys()}\"\n                    )\n\n                block = get_block(node.block_id)\n                if not block:\n                    blocks = {v().id: v().name for v in get_blocks().values()}\n                    raise ValueError(\n                        f\"{suffix}, {node.block_id} is invalid block id, available blocks: {blocks}\"\n                    )\n\n                sanitized_name = sanitize(name)\n                vals = node.input_default\n                if i == 0:\n                    fields = (\n                        block.output_schema.get_fields()\n                        if block.block_type != BlockType.AGENT\n                        else vals.get(\"output_schema\", {}).get(\"properties\", {}).keys()\n                    )\n                else:\n                    fields = (\n                        block.input_schema.get_fields()\n                        if block.block_type != BlockType.AGENT\n                        else vals.get(\"input_schema\", {}).get(\"properties\", {}).keys()\n                    )\n                if sanitized_name not in fields:\n                    fields_msg = f\"Allowed fields: {fields}\"\n                    raise ValueError(f\"{suffix}, `{name}` invalid, {fields_msg}\")\n\n            if is_static_output_block(link.source_id):\n                link.is_static = True  # Each value block output should be static.",
              "children": [
                {
                  "value": "validate_graph",
                  "children": []
                },
                {
                  "value": "(self, for_run: bool = False)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "for_run: bool = False",
                      "children": [
                        {
                          "value": "for_run",
                          "children": []
                        },
                        {
                          "value": "bool",
                          "children": [
                            {
                              "value": "bool",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "False",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "def sanitize(name):\n            return name.split(\"_#_\")[0].split(\"_@_\")[0].split(\"_$_\")[0]\n\n        input_links = defaultdict(list)\n        for link in self.links:\n            input_links[link.sink_id].append(link)\n\n        # Nodes: required fields are filled or connected and dependencies are satisfied\n        for node in self.nodes:\n            block = get_block(node.block_id)\n            if block is None:\n                raise ValueError(f\"Invalid block {node.block_id} for node #{node.id}\")\n\n            provided_inputs = set(\n                [sanitize(name) for name in node.input_default]\n                + [sanitize(link.sink_name) for link in input_links.get(node.id, [])]\n            )\n            for name in block.input_schema.get_required_fields():\n                if (\n                    name not in provided_inputs\n                    and not (\n                        name == \"payload\"\n                        and block.block_type\n                        in (BlockType.WEBHOOK, BlockType.WEBHOOK_MANUAL)\n                    )\n                    and (\n                        for_run  # Skip input completion validation, unless when executing.\n                        or block.block_type == BlockType.INPUT\n                        or block.block_type == BlockType.OUTPUT\n                        or block.block_type == BlockType.AGENT\n                    )\n                ):\n                    raise ValueError(\n                        f\"Node {block.name} #{node.id} required input missing: `{name}`\"\n                    )\n\n            # Get input schema properties and check dependencies\n            input_schema = block.input_schema.model_fields\n            required_fields = block.input_schema.get_required_fields()\n\n            def has_value(name):\n                return (\n                    node is not None\n                    and name in node.input_default\n                    and node.input_default[name] is not None\n                    and str(node.input_default[name]).strip() != \"\"\n                ) or (name in input_schema and input_schema[name].default is not None)\n\n            # Validate dependencies between fields\n            for field_name, field_info in input_schema.items():\n                # Apply input dependency validation only on run & field with depends_on\n                json_schema_extra = field_info.json_schema_extra or {}\n                dependencies = json_schema_extra.get(\"depends_on\", [])\n                if not for_run or not dependencies:\n                    continue\n\n                # Check if dependent field has value in input_default\n                field_has_value = has_value(field_name)\n                field_is_required = field_name in required_fields\n\n                # Check for missing dependencies when dependent field is present\n                missing_deps = [dep for dep in dependencies if not has_value(dep)]\n                if missing_deps and (field_has_value or field_is_required):\n                    raise ValueError(\n                        f\"Node {block.name} #{node.id}: Field `{field_name}` requires [{', '.join(missing_deps)}] to be set\"\n                    )\n\n        node_map = {v.id: v for v in self.nodes}\n\n        def is_static_output_block(nid: str) -> bool:\n            bid = node_map[nid].block_id\n            b = get_block(bid)\n            return b.static_output if b else False\n\n        # Links: links are connected and the connected pin data type are compatible.\n        for link in self.links:\n            source = (link.source_id, link.source_name)\n            sink = (link.sink_id, link.sink_name)\n            suffix = f\"Link {source} <-> {sink}\"\n\n            for i, (node_id, name) in enumerate([source, sink]):\n                node = node_map.get(node_id)\n                if not node:\n                    raise ValueError(\n                        f\"{suffix}, {node_id} is invalid node id, available nodes: {node_map.keys()}\"\n                    )\n\n                block = get_block(node.block_id)\n                if not block:\n                    blocks = {v().id: v().name for v in get_blocks().values()}\n                    raise ValueError(\n                        f\"{suffix}, {node.block_id} is invalid block id, available blocks: {blocks}\"\n                    )\n\n                sanitized_name = sanitize(name)\n                vals = node.input_default\n                if i == 0:\n                    fields = (\n                        block.output_schema.get_fields()\n                        if block.block_type != BlockType.AGENT\n                        else vals.get(\"output_schema\", {}).get(\"properties\", {}).keys()\n                    )\n                else:\n                    fields = (\n                        block.input_schema.get_fields()\n                        if block.block_type != BlockType.AGENT\n                        else vals.get(\"input_schema\", {}).get(\"properties\", {}).keys()\n                    )\n                if sanitized_name not in fields:\n                    fields_msg = f\"Allowed fields: {fields}\"\n                    raise ValueError(f\"{suffix}, `{name}` invalid, {fields_msg}\")\n\n            if is_static_output_block(link.source_id):\n                link.is_static = True  # Each value block output should be static.",
                  "children": [
                    {
                      "value": "def sanitize(name):\n            return name.split(\"_#_\")[0].split(\"_@_\")[0].split(\"_$_\")[0]",
                      "children": [
                        {
                          "value": "sanitize",
                          "children": []
                        },
                        {
                          "value": "(name)",
                          "children": [
                            {
                              "value": "name",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "return name.split(\"_#_\")[0].split(\"_@_\")[0].split(\"_$_\")[0]",
                          "children": [
                            {
                              "value": "return name.split(\"_#_\")[0].split(\"_@_\")[0].split(\"_$_\")[0]",
                              "children": [
                                {
                                  "value": "name.split(\"_#_\")[0].split(\"_@_\")[0].split(\"_$_\")[0]",
                                  "children": [
                                    {
                                      "value": "name.split(\"_#_\")[0].split(\"_@_\")[0].split(\"_$_\")",
                                      "children": [
                                        {
                                          "value": "name.split(\"_#_\")[0].split(\"_@_\")[0].split",
                                          "children": [
                                            {
                                              "value": "name.split(\"_#_\")[0].split(\"_@_\")[0]",
                                              "children": [
                                                {
                                                  "value": "name.split(\"_#_\")[0].split(\"_@_\")",
                                                  "children": [
                                                    {
                                                      "value": "name.split(\"_#_\")[0].split",
                                                      "children": [
                                                        {
                                                          "value": "name.split(\"_#_\")[0]",
                                                          "children": [
                                                            {
                                                              "value": "name.split(\"_#_\")",
                                                              "children": [
                                                                {
                                                                  "value": "name.split",
                                                                  "children": [
                                                                    {
                                                                      "value": "name",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "split",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "(\"_#_\")",
                                                                  "children": [
                                                                    {
                                                                      "value": "\"_#_\"",
                                                                      "children": [
                                                                        {
                                                                          "value": "\"",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "_#_",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "\"",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "0",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "split",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "(\"_@_\")",
                                                      "children": [
                                                        {
                                                          "value": "\"_@_\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "_@_",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "0",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "split",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(\"_$_\")",
                                          "children": [
                                            {
                                              "value": "\"_$_\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "_$_",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "0",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "input_links = defaultdict(list)",
                      "children": [
                        {
                          "value": "input_links = defaultdict(list)",
                          "children": [
                            {
                              "value": "input_links",
                              "children": []
                            },
                            {
                              "value": "defaultdict(list)",
                              "children": [
                                {
                                  "value": "defaultdict",
                                  "children": []
                                },
                                {
                                  "value": "(list)",
                                  "children": [
                                    {
                                      "value": "list",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "for link in self.links:\n            input_links[link.sink_id].append(link)",
                      "children": [
                        {
                          "value": "link",
                          "children": []
                        },
                        {
                          "value": "self.links",
                          "children": [
                            {
                              "value": "self",
                              "children": []
                            },
                            {
                              "value": "links",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "input_links[link.sink_id].append(link)",
                          "children": [
                            {
                              "value": "input_links[link.sink_id].append(link)",
                              "children": [
                                {
                                  "value": "input_links[link.sink_id].append(link)",
                                  "children": [
                                    {
                                      "value": "input_links[link.sink_id].append",
                                      "children": [
                                        {
                                          "value": "input_links[link.sink_id]",
                                          "children": [
                                            {
                                              "value": "input_links",
                                              "children": []
                                            },
                                            {
                                              "value": "link.sink_id",
                                              "children": [
                                                {
                                                  "value": "link",
                                                  "children": []
                                                },
                                                {
                                                  "value": "sink_id",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "append",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(link)",
                                      "children": [
                                        {
                                          "value": "link",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "# Nodes: required fields are filled or connected and dependencies are satisfied",
                      "children": []
                    },
                    {
                      "value": "for node in self.nodes:\n            block = get_block(node.block_id)\n            if block is None:\n                raise ValueError(f\"Invalid block {node.block_id} for node #{node.id}\")\n\n            provided_inputs = set(\n                [sanitize(name) for name in node.input_default]\n                + [sanitize(link.sink_name) for link in input_links.get(node.id, [])]\n            )\n            for name in block.input_schema.get_required_fields():\n                if (\n                    name not in provided_inputs\n                    and not (\n                        name == \"payload\"\n                        and block.block_type\n                        in (BlockType.WEBHOOK, BlockType.WEBHOOK_MANUAL)\n                    )\n                    and (\n                        for_run  # Skip input completion validation, unless when executing.\n                        or block.block_type == BlockType.INPUT\n                        or block.block_type == BlockType.OUTPUT\n                        or block.block_type == BlockType.AGENT\n                    )\n                ):\n                    raise ValueError(\n                        f\"Node {block.name} #{node.id} required input missing: `{name}`\"\n                    )\n\n            # Get input schema properties and check dependencies\n            input_schema = block.input_schema.model_fields\n            required_fields = block.input_schema.get_required_fields()\n\n            def has_value(name):\n                return (\n                    node is not None\n                    and name in node.input_default\n                    and node.input_default[name] is not None\n                    and str(node.input_default[name]).strip() != \"\"\n                ) or (name in input_schema and input_schema[name].default is not None)\n\n            # Validate dependencies between fields\n            for field_name, field_info in input_schema.items():\n                # Apply input dependency validation only on run & field with depends_on\n                json_schema_extra = field_info.json_schema_extra or {}\n                dependencies = json_schema_extra.get(\"depends_on\", [])\n                if not for_run or not dependencies:\n                    continue\n\n                # Check if dependent field has value in input_default\n                field_has_value = has_value(field_name)\n                field_is_required = field_name in required_fields\n\n                # Check for missing dependencies when dependent field is present\n                missing_deps = [dep for dep in dependencies if not has_value(dep)]\n                if missing_deps and (field_has_value or field_is_required):\n                    raise ValueError(\n                        f\"Node {block.name} #{node.id}: Field `{field_name}` requires [{', '.join(missing_deps)}] to be set\"\n                    )",
                      "children": [
                        {
                          "value": "node",
                          "children": []
                        },
                        {
                          "value": "self.nodes",
                          "children": [
                            {
                              "value": "self",
                              "children": []
                            },
                            {
                              "value": "nodes",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "block = get_block(node.block_id)\n            if block is None:\n                raise ValueError(f\"Invalid block {node.block_id} for node #{node.id}\")\n\n            provided_inputs = set(\n                [sanitize(name) for name in node.input_default]\n                + [sanitize(link.sink_name) for link in input_links.get(node.id, [])]\n            )\n            for name in block.input_schema.get_required_fields():\n                if (\n                    name not in provided_inputs\n                    and not (\n                        name == \"payload\"\n                        and block.block_type\n                        in (BlockType.WEBHOOK, BlockType.WEBHOOK_MANUAL)\n                    )\n                    and (\n                        for_run  # Skip input completion validation, unless when executing.\n                        or block.block_type == BlockType.INPUT\n                        or block.block_type == BlockType.OUTPUT\n                        or block.block_type == BlockType.AGENT\n                    )\n                ):\n                    raise ValueError(\n                        f\"Node {block.name} #{node.id} required input missing: `{name}`\"\n                    )\n\n            # Get input schema properties and check dependencies\n            input_schema = block.input_schema.model_fields\n            required_fields = block.input_schema.get_required_fields()\n\n            def has_value(name):\n                return (\n                    node is not None\n                    and name in node.input_default\n                    and node.input_default[name] is not None\n                    and str(node.input_default[name]).strip() != \"\"\n                ) or (name in input_schema and input_schema[name].default is not None)\n\n            # Validate dependencies between fields\n            for field_name, field_info in input_schema.items():\n                # Apply input dependency validation only on run & field with depends_on\n                json_schema_extra = field_info.json_schema_extra or {}\n                dependencies = json_schema_extra.get(\"depends_on\", [])\n                if not for_run or not dependencies:\n                    continue\n\n                # Check if dependent field has value in input_default\n                field_has_value = has_value(field_name)\n                field_is_required = field_name in required_fields\n\n                # Check for missing dependencies when dependent field is present\n                missing_deps = [dep for dep in dependencies if not has_value(dep)]\n                if missing_deps and (field_has_value or field_is_required):\n                    raise ValueError(\n                        f\"Node {block.name} #{node.id}: Field `{field_name}` requires [{', '.join(missing_deps)}] to be set\"\n                    )",
                          "children": [
                            {
                              "value": "block = get_block(node.block_id)",
                              "children": [
                                {
                                  "value": "block = get_block(node.block_id)",
                                  "children": [
                                    {
                                      "value": "block",
                                      "children": []
                                    },
                                    {
                                      "value": "get_block(node.block_id)",
                                      "children": [
                                        {
                                          "value": "get_block",
                                          "children": []
                                        },
                                        {
                                          "value": "(node.block_id)",
                                          "children": [
                                            {
                                              "value": "node.block_id",
                                              "children": [
                                                {
                                                  "value": "node",
                                                  "children": []
                                                },
                                                {
                                                  "value": "block_id",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "if block is None:\n                raise ValueError(f\"Invalid block {node.block_id} for node #{node.id}\")",
                              "children": [
                                {
                                  "value": "block is None",
                                  "children": [
                                    {
                                      "value": "block",
                                      "children": []
                                    },
                                    {
                                      "value": "None",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "raise ValueError(f\"Invalid block {node.block_id} for node #{node.id}\")",
                                  "children": [
                                    {
                                      "value": "raise ValueError(f\"Invalid block {node.block_id} for node #{node.id}\")",
                                      "children": [
                                        {
                                          "value": "ValueError(f\"Invalid block {node.block_id} for node #{node.id}\")",
                                          "children": [
                                            {
                                              "value": "ValueError",
                                              "children": []
                                            },
                                            {
                                              "value": "(f\"Invalid block {node.block_id} for node #{node.id}\")",
                                              "children": [
                                                {
                                                  "value": "f\"Invalid block {node.block_id} for node #{node.id}\"",
                                                  "children": [
                                                    {
                                                      "value": "f\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "Invalid block",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "{node.block_id}",
                                                      "children": [
                                                        {
                                                          "value": "node.block_id",
                                                          "children": [
                                                            {
                                                              "value": "node",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "block_id",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "for node #",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "{node.id}",
                                                      "children": [
                                                        {
                                                          "value": "node.id",
                                                          "children": [
                                                            {
                                                              "value": "node",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "id",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "provided_inputs = set(\n                [sanitize(name) for name in node.input_default]\n                + [sanitize(link.sink_name) for link in input_links.get(node.id, [])]\n            )",
                              "children": [
                                {
                                  "value": "provided_inputs = set(\n                [sanitize(name) for name in node.input_default]\n                + [sanitize(link.sink_name) for link in input_links.get(node.id, [])]\n            )",
                                  "children": [
                                    {
                                      "value": "provided_inputs",
                                      "children": []
                                    },
                                    {
                                      "value": "set(\n                [sanitize(name) for name in node.input_default]\n                + [sanitize(link.sink_name) for link in input_links.get(node.id, [])]\n            )",
                                      "children": [
                                        {
                                          "value": "set",
                                          "children": []
                                        },
                                        {
                                          "value": "(\n                [sanitize(name) for name in node.input_default]\n                + [sanitize(link.sink_name) for link in input_links.get(node.id, [])]\n            )",
                                          "children": [
                                            {
                                              "value": "[sanitize(name) for name in node.input_default]\n                + [sanitize(link.sink_name) for link in input_links.get(node.id, [])]",
                                              "children": [
                                                {
                                                  "value": "[sanitize(name) for name in node.input_default]",
                                                  "children": [
                                                    {
                                                      "value": "sanitize(name)",
                                                      "children": [
                                                        {
                                                          "value": "sanitize",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "(name)",
                                                          "children": [
                                                            {
                                                              "value": "name",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "for name in node.input_default",
                                                      "children": [
                                                        {
                                                          "value": "name",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "node.input_default",
                                                          "children": [
                                                            {
                                                              "value": "node",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "input_default",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "[sanitize(link.sink_name) for link in input_links.get(node.id, [])]",
                                                  "children": [
                                                    {
                                                      "value": "sanitize(link.sink_name)",
                                                      "children": [
                                                        {
                                                          "value": "sanitize",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "(link.sink_name)",
                                                          "children": [
                                                            {
                                                              "value": "link.sink_name",
                                                              "children": [
                                                                {
                                                                  "value": "link",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "sink_name",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "for link in input_links.get(node.id, [])",
                                                      "children": [
                                                        {
                                                          "value": "link",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "input_links.get(node.id, [])",
                                                          "children": [
                                                            {
                                                              "value": "input_links.get",
                                                              "children": [
                                                                {
                                                                  "value": "input_links",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "get",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "(node.id, [])",
                                                              "children": [
                                                                {
                                                                  "value": "node.id",
                                                                  "children": [
                                                                    {
                                                                      "value": "node",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "id",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "[]",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "for name in block.input_schema.get_required_fields():\n                if (\n                    name not in provided_inputs\n                    and not (\n                        name == \"payload\"\n                        and block.block_type\n                        in (BlockType.WEBHOOK, BlockType.WEBHOOK_MANUAL)\n                    )\n                    and (\n                        for_run  # Skip input completion validation, unless when executing.\n                        or block.block_type == BlockType.INPUT\n                        or block.block_type == BlockType.OUTPUT\n                        or block.block_type == BlockType.AGENT\n                    )\n                ):\n                    raise ValueError(\n                        f\"Node {block.name} #{node.id} required input missing: `{name}`\"\n                    )",
                              "children": [
                                {
                                  "value": "name",
                                  "children": []
                                },
                                {
                                  "value": "block.input_schema.get_required_fields()",
                                  "children": [
                                    {
                                      "value": "block.input_schema.get_required_fields",
                                      "children": [
                                        {
                                          "value": "block.input_schema",
                                          "children": [
                                            {
                                              "value": "block",
                                              "children": []
                                            },
                                            {
                                              "value": "input_schema",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "get_required_fields",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "if (\n                    name not in provided_inputs\n                    and not (\n                        name == \"payload\"\n                        and block.block_type\n                        in (BlockType.WEBHOOK, BlockType.WEBHOOK_MANUAL)\n                    )\n                    and (\n                        for_run  # Skip input completion validation, unless when executing.\n                        or block.block_type == BlockType.INPUT\n                        or block.block_type == BlockType.OUTPUT\n                        or block.block_type == BlockType.AGENT\n                    )\n                ):\n                    raise ValueError(\n                        f\"Node {block.name} #{node.id} required input missing: `{name}`\"\n                    )",
                                  "children": [
                                    {
                                      "value": "if (\n                    name not in provided_inputs\n                    and not (\n                        name == \"payload\"\n                        and block.block_type\n                        in (BlockType.WEBHOOK, BlockType.WEBHOOK_MANUAL)\n                    )\n                    and (\n                        for_run  # Skip input completion validation, unless when executing.\n                        or block.block_type == BlockType.INPUT\n                        or block.block_type == BlockType.OUTPUT\n                        or block.block_type == BlockType.AGENT\n                    )\n                ):\n                    raise ValueError(\n                        f\"Node {block.name} #{node.id} required input missing: `{name}`\"\n                    )",
                                      "children": [
                                        {
                                          "value": "(\n                    name not in provided_inputs\n                    and not (\n                        name == \"payload\"\n                        and block.block_type\n                        in (BlockType.WEBHOOK, BlockType.WEBHOOK_MANUAL)\n                    )\n                    and (\n                        for_run  # Skip input completion validation, unless when executing.\n                        or block.block_type == BlockType.INPUT\n                        or block.block_type == BlockType.OUTPUT\n                        or block.block_type == BlockType.AGENT\n                    )\n                )",
                                          "children": [
                                            {
                                              "value": "name not in provided_inputs\n                    and not (\n                        name == \"payload\"\n                        and block.block_type\n                        in (BlockType.WEBHOOK, BlockType.WEBHOOK_MANUAL)\n                    )\n                    and (\n                        for_run  # Skip input completion validation, unless when executing.\n                        or block.block_type == BlockType.INPUT\n                        or block.block_type == BlockType.OUTPUT\n                        or block.block_type == BlockType.AGENT\n                    )",
                                              "children": [
                                                {
                                                  "value": "name not in provided_inputs\n                    and not (\n                        name == \"payload\"\n                        and block.block_type\n                        in (BlockType.WEBHOOK, BlockType.WEBHOOK_MANUAL)\n                    )",
                                                  "children": [
                                                    {
                                                      "value": "name not in provided_inputs",
                                                      "children": [
                                                        {
                                                          "value": "name",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "provided_inputs",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "not (\n                        name == \"payload\"\n                        and block.block_type\n                        in (BlockType.WEBHOOK, BlockType.WEBHOOK_MANUAL)\n                    )",
                                                      "children": [
                                                        {
                                                          "value": "(\n                        name == \"payload\"\n                        and block.block_type\n                        in (BlockType.WEBHOOK, BlockType.WEBHOOK_MANUAL)\n                    )",
                                                          "children": [
                                                            {
                                                              "value": "name == \"payload\"\n                        and block.block_type\n                        in (BlockType.WEBHOOK, BlockType.WEBHOOK_MANUAL)",
                                                              "children": [
                                                                {
                                                                  "value": "name == \"payload\"",
                                                                  "children": [
                                                                    {
                                                                      "value": "name",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "\"payload\"",
                                                                      "children": [
                                                                        {
                                                                          "value": "\"",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "payload",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "\"",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "block.block_type\n                        in (BlockType.WEBHOOK, BlockType.WEBHOOK_MANUAL)",
                                                                  "children": [
                                                                    {
                                                                      "value": "block.block_type",
                                                                      "children": [
                                                                        {
                                                                          "value": "block",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "block_type",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "(BlockType.WEBHOOK, BlockType.WEBHOOK_MANUAL)",
                                                                      "children": [
                                                                        {
                                                                          "value": "BlockType.WEBHOOK",
                                                                          "children": [
                                                                            {
                                                                              "value": "BlockType",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "value": "WEBHOOK",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "value": "BlockType.WEBHOOK_MANUAL",
                                                                          "children": [
                                                                            {
                                                                              "value": "BlockType",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "value": "WEBHOOK_MANUAL",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(\n                        for_run  # Skip input completion validation, unless when executing.\n                        or block.block_type == BlockType.INPUT\n                        or block.block_type == BlockType.OUTPUT\n                        or block.block_type == BlockType.AGENT\n                    )",
                                                  "children": [
                                                    {
                                                      "value": "for_run  # Skip input completion validation, unless when executing.\n                        or block.block_type == BlockType.INPUT\n                        or block.block_type == BlockType.OUTPUT\n                        or block.block_type == BlockType.AGENT",
                                                      "children": [
                                                        {
                                                          "value": "for_run  # Skip input completion validation, unless when executing.\n                        or block.block_type == BlockType.INPUT\n                        or block.block_type == BlockType.OUTPUT",
                                                          "children": [
                                                            {
                                                              "value": "for_run  # Skip input completion validation, unless when executing.\n                        or block.block_type == BlockType.INPUT",
                                                              "children": [
                                                                {
                                                                  "value": "for_run",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "# Skip input completion validation, unless when executing.",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "block.block_type == BlockType.INPUT",
                                                                  "children": [
                                                                    {
                                                                      "value": "block.block_type",
                                                                      "children": [
                                                                        {
                                                                          "value": "block",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "block_type",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "BlockType.INPUT",
                                                                      "children": [
                                                                        {
                                                                          "value": "BlockType",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "INPUT",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "block.block_type == BlockType.OUTPUT",
                                                              "children": [
                                                                {
                                                                  "value": "block.block_type",
                                                                  "children": [
                                                                    {
                                                                      "value": "block",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "block_type",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "BlockType.OUTPUT",
                                                                  "children": [
                                                                    {
                                                                      "value": "BlockType",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "OUTPUT",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "block.block_type == BlockType.AGENT",
                                                          "children": [
                                                            {
                                                              "value": "block.block_type",
                                                              "children": [
                                                                {
                                                                  "value": "block",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "block_type",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "BlockType.AGENT",
                                                              "children": [
                                                                {
                                                                  "value": "BlockType",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "AGENT",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "raise ValueError(\n                        f\"Node {block.name} #{node.id} required input missing: `{name}`\"\n                    )",
                                          "children": [
                                            {
                                              "value": "raise ValueError(\n                        f\"Node {block.name} #{node.id} required input missing: `{name}`\"\n                    )",
                                              "children": [
                                                {
                                                  "value": "ValueError(\n                        f\"Node {block.name} #{node.id} required input missing: `{name}`\"\n                    )",
                                                  "children": [
                                                    {
                                                      "value": "ValueError",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "(\n                        f\"Node {block.name} #{node.id} required input missing: `{name}`\"\n                    )",
                                                      "children": [
                                                        {
                                                          "value": "f\"Node {block.name} #{node.id} required input missing: `{name}`\"",
                                                          "children": [
                                                            {
                                                              "value": "f\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "Node",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "{block.name}",
                                                              "children": [
                                                                {
                                                                  "value": "block.name",
                                                                  "children": [
                                                                    {
                                                                      "value": "block",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "name",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "#",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "{node.id}",
                                                              "children": [
                                                                {
                                                                  "value": "node.id",
                                                                  "children": [
                                                                    {
                                                                      "value": "node",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "id",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "required input missing: `",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "{name}",
                                                              "children": [
                                                                {
                                                                  "value": "name",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "`",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "# Get input schema properties and check dependencies",
                              "children": []
                            },
                            {
                              "value": "input_schema = block.input_schema.model_fields",
                              "children": [
                                {
                                  "value": "input_schema = block.input_schema.model_fields",
                                  "children": [
                                    {
                                      "value": "input_schema",
                                      "children": []
                                    },
                                    {
                                      "value": "block.input_schema.model_fields",
                                      "children": [
                                        {
                                          "value": "block.input_schema",
                                          "children": [
                                            {
                                              "value": "block",
                                              "children": []
                                            },
                                            {
                                              "value": "input_schema",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "model_fields",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "required_fields = block.input_schema.get_required_fields()",
                              "children": [
                                {
                                  "value": "required_fields = block.input_schema.get_required_fields()",
                                  "children": [
                                    {
                                      "value": "required_fields",
                                      "children": []
                                    },
                                    {
                                      "value": "block.input_schema.get_required_fields()",
                                      "children": [
                                        {
                                          "value": "block.input_schema.get_required_fields",
                                          "children": [
                                            {
                                              "value": "block.input_schema",
                                              "children": [
                                                {
                                                  "value": "block",
                                                  "children": []
                                                },
                                                {
                                                  "value": "input_schema",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "get_required_fields",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "()",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "def has_value(name):\n                return (\n                    node is not None\n                    and name in node.input_default\n                    and node.input_default[name] is not None\n                    and str(node.input_default[name]).strip() != \"\"\n                ) or (name in input_schema and input_schema[name].default is not None)",
                              "children": [
                                {
                                  "value": "has_value",
                                  "children": []
                                },
                                {
                                  "value": "(name)",
                                  "children": [
                                    {
                                      "value": "name",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "return (\n                    node is not None\n                    and name in node.input_default\n                    and node.input_default[name] is not None\n                    and str(node.input_default[name]).strip() != \"\"\n                ) or (name in input_schema and input_schema[name].default is not None)",
                                  "children": [
                                    {
                                      "value": "return (\n                    node is not None\n                    and name in node.input_default\n                    and node.input_default[name] is not None\n                    and str(node.input_default[name]).strip() != \"\"\n                ) or (name in input_schema and input_schema[name].default is not None)",
                                      "children": [
                                        {
                                          "value": "(\n                    node is not None\n                    and name in node.input_default\n                    and node.input_default[name] is not None\n                    and str(node.input_default[name]).strip() != \"\"\n                ) or (name in input_schema and input_schema[name].default is not None)",
                                          "children": [
                                            {
                                              "value": "(\n                    node is not None\n                    and name in node.input_default\n                    and node.input_default[name] is not None\n                    and str(node.input_default[name]).strip() != \"\"\n                )",
                                              "children": [
                                                {
                                                  "value": "node is not None\n                    and name in node.input_default\n                    and node.input_default[name] is not None\n                    and str(node.input_default[name]).strip() != \"\"",
                                                  "children": [
                                                    {
                                                      "value": "node is not None\n                    and name in node.input_default\n                    and node.input_default[name] is not None",
                                                      "children": [
                                                        {
                                                          "value": "node is not None\n                    and name in node.input_default",
                                                          "children": [
                                                            {
                                                              "value": "node is not None",
                                                              "children": [
                                                                {
                                                                  "value": "node",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "None",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "name in node.input_default",
                                                              "children": [
                                                                {
                                                                  "value": "name",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "node.input_default",
                                                                  "children": [
                                                                    {
                                                                      "value": "node",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "input_default",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "node.input_default[name] is not None",
                                                          "children": [
                                                            {
                                                              "value": "node.input_default[name]",
                                                              "children": [
                                                                {
                                                                  "value": "node.input_default",
                                                                  "children": [
                                                                    {
                                                                      "value": "node",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "input_default",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "name",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "None",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "str(node.input_default[name]).strip() != \"\"",
                                                      "children": [
                                                        {
                                                          "value": "str(node.input_default[name]).strip()",
                                                          "children": [
                                                            {
                                                              "value": "str(node.input_default[name]).strip",
                                                              "children": [
                                                                {
                                                                  "value": "str(node.input_default[name])",
                                                                  "children": [
                                                                    {
                                                                      "value": "str",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "(node.input_default[name])",
                                                                      "children": [
                                                                        {
                                                                          "value": "node.input_default[name]",
                                                                          "children": [
                                                                            {
                                                                              "value": "node.input_default",
                                                                              "children": [
                                                                                {
                                                                                  "value": "node",
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "value": "input_default",
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "value": "name",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "strip",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "()",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "\"\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(name in input_schema and input_schema[name].default is not None)",
                                              "children": [
                                                {
                                                  "value": "name in input_schema and input_schema[name].default is not None",
                                                  "children": [
                                                    {
                                                      "value": "name in input_schema",
                                                      "children": [
                                                        {
                                                          "value": "name",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "input_schema",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "input_schema[name].default is not None",
                                                      "children": [
                                                        {
                                                          "value": "input_schema[name].default",
                                                          "children": [
                                                            {
                                                              "value": "input_schema[name]",
                                                              "children": [
                                                                {
                                                                  "value": "input_schema",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "name",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "default",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "None",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "# Validate dependencies between fields",
                              "children": []
                            },
                            {
                              "value": "for field_name, field_info in input_schema.items():\n                # Apply input dependency validation only on run & field with depends_on\n                json_schema_extra = field_info.json_schema_extra or {}\n                dependencies = json_schema_extra.get(\"depends_on\", [])\n                if not for_run or not dependencies:\n                    continue\n\n                # Check if dependent field has value in input_default\n                field_has_value = has_value(field_name)\n                field_is_required = field_name in required_fields\n\n                # Check for missing dependencies when dependent field is present\n                missing_deps = [dep for dep in dependencies if not has_value(dep)]\n                if missing_deps and (field_has_value or field_is_required):\n                    raise ValueError(\n                        f\"Node {block.name} #{node.id}: Field `{field_name}` requires [{', '.join(missing_deps)}] to be set\"\n                    )",
                              "children": [
                                {
                                  "value": "field_name, field_info",
                                  "children": [
                                    {
                                      "value": "field_name",
                                      "children": []
                                    },
                                    {
                                      "value": "field_info",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "input_schema.items()",
                                  "children": [
                                    {
                                      "value": "input_schema.items",
                                      "children": [
                                        {
                                          "value": "input_schema",
                                          "children": []
                                        },
                                        {
                                          "value": "items",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "# Apply input dependency validation only on run & field with depends_on",
                                  "children": []
                                },
                                {
                                  "value": "json_schema_extra = field_info.json_schema_extra or {}\n                dependencies = json_schema_extra.get(\"depends_on\", [])\n                if not for_run or not dependencies:\n                    continue\n\n                # Check if dependent field has value in input_default\n                field_has_value = has_value(field_name)\n                field_is_required = field_name in required_fields\n\n                # Check for missing dependencies when dependent field is present\n                missing_deps = [dep for dep in dependencies if not has_value(dep)]\n                if missing_deps and (field_has_value or field_is_required):\n                    raise ValueError(\n                        f\"Node {block.name} #{node.id}: Field `{field_name}` requires [{', '.join(missing_deps)}] to be set\"\n                    )",
                                  "children": [
                                    {
                                      "value": "json_schema_extra = field_info.json_schema_extra or {}",
                                      "children": [
                                        {
                                          "value": "json_schema_extra = field_info.json_schema_extra or {}",
                                          "children": [
                                            {
                                              "value": "json_schema_extra",
                                              "children": []
                                            },
                                            {
                                              "value": "field_info.json_schema_extra or {}",
                                              "children": [
                                                {
                                                  "value": "field_info.json_schema_extra",
                                                  "children": [
                                                    {
                                                      "value": "field_info",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "json_schema_extra",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "{}",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "dependencies = json_schema_extra.get(\"depends_on\", [])",
                                      "children": [
                                        {
                                          "value": "dependencies = json_schema_extra.get(\"depends_on\", [])",
                                          "children": [
                                            {
                                              "value": "dependencies",
                                              "children": []
                                            },
                                            {
                                              "value": "json_schema_extra.get(\"depends_on\", [])",
                                              "children": [
                                                {
                                                  "value": "json_schema_extra.get",
                                                  "children": [
                                                    {
                                                      "value": "json_schema_extra",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "get",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(\"depends_on\", [])",
                                                  "children": [
                                                    {
                                                      "value": "\"depends_on\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "depends_on",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "[]",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "if not for_run or not dependencies:\n                    continue",
                                      "children": [
                                        {
                                          "value": "not for_run or not dependencies",
                                          "children": [
                                            {
                                              "value": "not for_run",
                                              "children": [
                                                {
                                                  "value": "for_run",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "not dependencies",
                                              "children": [
                                                {
                                                  "value": "dependencies",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "continue",
                                          "children": [
                                            {
                                              "value": "continue",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "# Check if dependent field has value in input_default",
                                      "children": []
                                    },
                                    {
                                      "value": "field_has_value = has_value(field_name)",
                                      "children": [
                                        {
                                          "value": "field_has_value = has_value(field_name)",
                                          "children": [
                                            {
                                              "value": "field_has_value",
                                              "children": []
                                            },
                                            {
                                              "value": "has_value(field_name)",
                                              "children": [
                                                {
                                                  "value": "has_value",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(field_name)",
                                                  "children": [
                                                    {
                                                      "value": "field_name",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "field_is_required = field_name in required_fields",
                                      "children": [
                                        {
                                          "value": "field_is_required = field_name in required_fields",
                                          "children": [
                                            {
                                              "value": "field_is_required",
                                              "children": []
                                            },
                                            {
                                              "value": "field_name in required_fields",
                                              "children": [
                                                {
                                                  "value": "field_name",
                                                  "children": []
                                                },
                                                {
                                                  "value": "required_fields",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "# Check for missing dependencies when dependent field is present",
                                      "children": []
                                    },
                                    {
                                      "value": "missing_deps = [dep for dep in dependencies if not has_value(dep)]",
                                      "children": [
                                        {
                                          "value": "missing_deps = [dep for dep in dependencies if not has_value(dep)]",
                                          "children": [
                                            {
                                              "value": "missing_deps",
                                              "children": []
                                            },
                                            {
                                              "value": "[dep for dep in dependencies if not has_value(dep)]",
                                              "children": [
                                                {
                                                  "value": "dep",
                                                  "children": []
                                                },
                                                {
                                                  "value": "for dep in dependencies",
                                                  "children": [
                                                    {
                                                      "value": "dep",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "dependencies",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "if not has_value(dep)",
                                                  "children": [
                                                    {
                                                      "value": "not has_value(dep)",
                                                      "children": [
                                                        {
                                                          "value": "has_value(dep)",
                                                          "children": [
                                                            {
                                                              "value": "has_value",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "(dep)",
                                                              "children": [
                                                                {
                                                                  "value": "dep",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "if missing_deps and (field_has_value or field_is_required):\n                    raise ValueError(\n                        f\"Node {block.name} #{node.id}: Field `{field_name}` requires [{', '.join(missing_deps)}] to be set\"\n                    )",
                                      "children": [
                                        {
                                          "value": "missing_deps and (field_has_value or field_is_required)",
                                          "children": [
                                            {
                                              "value": "missing_deps",
                                              "children": []
                                            },
                                            {
                                              "value": "(field_has_value or field_is_required)",
                                              "children": [
                                                {
                                                  "value": "field_has_value or field_is_required",
                                                  "children": [
                                                    {
                                                      "value": "field_has_value",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "field_is_required",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "raise ValueError(\n                        f\"Node {block.name} #{node.id}: Field `{field_name}` requires [{', '.join(missing_deps)}] to be set\"\n                    )",
                                          "children": [
                                            {
                                              "value": "raise ValueError(\n                        f\"Node {block.name} #{node.id}: Field `{field_name}` requires [{', '.join(missing_deps)}] to be set\"\n                    )",
                                              "children": [
                                                {
                                                  "value": "ValueError(\n                        f\"Node {block.name} #{node.id}: Field `{field_name}` requires [{', '.join(missing_deps)}] to be set\"\n                    )",
                                                  "children": [
                                                    {
                                                      "value": "ValueError",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "(\n                        f\"Node {block.name} #{node.id}: Field `{field_name}` requires [{', '.join(missing_deps)}] to be set\"\n                    )",
                                                      "children": [
                                                        {
                                                          "value": "f\"Node {block.name} #{node.id}: Field `{field_name}` requires [{', '.join(missing_deps)}] to be set\"",
                                                          "children": [
                                                            {
                                                              "value": "f\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "Node",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "{block.name}",
                                                              "children": [
                                                                {
                                                                  "value": "block.name",
                                                                  "children": [
                                                                    {
                                                                      "value": "block",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "name",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "#",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "{node.id}",
                                                              "children": [
                                                                {
                                                                  "value": "node.id",
                                                                  "children": [
                                                                    {
                                                                      "value": "node",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "id",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": ": Field `",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "{field_name}",
                                                              "children": [
                                                                {
                                                                  "value": "field_name",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "` requires [",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "{', '.join(missing_deps)}",
                                                              "children": [
                                                                {
                                                                  "value": "', '.join(missing_deps)",
                                                                  "children": [
                                                                    {
                                                                      "value": "', '.join",
                                                                      "children": [
                                                                        {
                                                                          "value": "', '",
                                                                          "children": [
                                                                            {
                                                                              "value": "'",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "value": ",",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "value": "'",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "value": "join",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "(missing_deps)",
                                                                      "children": [
                                                                        {
                                                                          "value": "missing_deps",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "] to be set",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "node_map = {v.id: v for v in self.nodes}",
                      "children": [
                        {
                          "value": "node_map = {v.id: v for v in self.nodes}",
                          "children": [
                            {
                              "value": "node_map",
                              "children": []
                            },
                            {
                              "value": "{v.id: v for v in self.nodes}",
                              "children": [
                                {
                                  "value": "v.id: v",
                                  "children": [
                                    {
                                      "value": "v.id",
                                      "children": [
                                        {
                                          "value": "v",
                                          "children": []
                                        },
                                        {
                                          "value": "id",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "v",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "for v in self.nodes",
                                  "children": [
                                    {
                                      "value": "v",
                                      "children": []
                                    },
                                    {
                                      "value": "self.nodes",
                                      "children": [
                                        {
                                          "value": "self",
                                          "children": []
                                        },
                                        {
                                          "value": "nodes",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "def is_static_output_block(nid: str) -> bool:\n            bid = node_map[nid].block_id\n            b = get_block(bid)\n            return b.static_output if b else False",
                      "children": [
                        {
                          "value": "is_static_output_block",
                          "children": []
                        },
                        {
                          "value": "(nid: str)",
                          "children": [
                            {
                              "value": "nid: str",
                              "children": [
                                {
                                  "value": "nid",
                                  "children": []
                                },
                                {
                                  "value": "str",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "bool",
                          "children": [
                            {
                              "value": "bool",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "bid = node_map[nid].block_id\n            b = get_block(bid)\n            return b.static_output if b else False",
                          "children": [
                            {
                              "value": "bid = node_map[nid].block_id",
                              "children": [
                                {
                                  "value": "bid = node_map[nid].block_id",
                                  "children": [
                                    {
                                      "value": "bid",
                                      "children": []
                                    },
                                    {
                                      "value": "node_map[nid].block_id",
                                      "children": [
                                        {
                                          "value": "node_map[nid]",
                                          "children": [
                                            {
                                              "value": "node_map",
                                              "children": []
                                            },
                                            {
                                              "value": "nid",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "block_id",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "b = get_block(bid)",
                              "children": [
                                {
                                  "value": "b = get_block(bid)",
                                  "children": [
                                    {
                                      "value": "b",
                                      "children": []
                                    },
                                    {
                                      "value": "get_block(bid)",
                                      "children": [
                                        {
                                          "value": "get_block",
                                          "children": []
                                        },
                                        {
                                          "value": "(bid)",
                                          "children": [
                                            {
                                              "value": "bid",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "return b.static_output if b else False",
                              "children": [
                                {
                                  "value": "b.static_output if b else False",
                                  "children": [
                                    {
                                      "value": "b.static_output",
                                      "children": [
                                        {
                                          "value": "b",
                                          "children": []
                                        },
                                        {
                                          "value": "static_output",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "b",
                                      "children": []
                                    },
                                    {
                                      "value": "False",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "# Links: links are connected and the connected pin data type are compatible.",
                      "children": []
                    },
                    {
                      "value": "for link in self.links:\n            source = (link.source_id, link.source_name)\n            sink = (link.sink_id, link.sink_name)\n            suffix = f\"Link {source} <-> {sink}\"\n\n            for i, (node_id, name) in enumerate([source, sink]):\n                node = node_map.get(node_id)\n                if not node:\n                    raise ValueError(\n                        f\"{suffix}, {node_id} is invalid node id, available nodes: {node_map.keys()}\"\n                    )\n\n                block = get_block(node.block_id)\n                if not block:\n                    blocks = {v().id: v().name for v in get_blocks().values()}\n                    raise ValueError(\n                        f\"{suffix}, {node.block_id} is invalid block id, available blocks: {blocks}\"\n                    )\n\n                sanitized_name = sanitize(name)\n                vals = node.input_default\n                if i == 0:\n                    fields = (\n                        block.output_schema.get_fields()\n                        if block.block_type != BlockType.AGENT\n                        else vals.get(\"output_schema\", {}).get(\"properties\", {}).keys()\n                    )\n                else:\n                    fields = (\n                        block.input_schema.get_fields()\n                        if block.block_type != BlockType.AGENT\n                        else vals.get(\"input_schema\", {}).get(\"properties\", {}).keys()\n                    )\n                if sanitized_name not in fields:\n                    fields_msg = f\"Allowed fields: {fields}\"\n                    raise ValueError(f\"{suffix}, `{name}` invalid, {fields_msg}\")\n\n            if is_static_output_block(link.source_id):\n                link.is_static = True  # Each value block output should be static.",
                      "children": [
                        {
                          "value": "link",
                          "children": []
                        },
                        {
                          "value": "self.links",
                          "children": [
                            {
                              "value": "self",
                              "children": []
                            },
                            {
                              "value": "links",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "source = (link.source_id, link.source_name)\n            sink = (link.sink_id, link.sink_name)\n            suffix = f\"Link {source} <-> {sink}\"\n\n            for i, (node_id, name) in enumerate([source, sink]):\n                node = node_map.get(node_id)\n                if not node:\n                    raise ValueError(\n                        f\"{suffix}, {node_id} is invalid node id, available nodes: {node_map.keys()}\"\n                    )\n\n                block = get_block(node.block_id)\n                if not block:\n                    blocks = {v().id: v().name for v in get_blocks().values()}\n                    raise ValueError(\n                        f\"{suffix}, {node.block_id} is invalid block id, available blocks: {blocks}\"\n                    )\n\n                sanitized_name = sanitize(name)\n                vals = node.input_default\n                if i == 0:\n                    fields = (\n                        block.output_schema.get_fields()\n                        if block.block_type != BlockType.AGENT\n                        else vals.get(\"output_schema\", {}).get(\"properties\", {}).keys()\n                    )\n                else:\n                    fields = (\n                        block.input_schema.get_fields()\n                        if block.block_type != BlockType.AGENT\n                        else vals.get(\"input_schema\", {}).get(\"properties\", {}).keys()\n                    )\n                if sanitized_name not in fields:\n                    fields_msg = f\"Allowed fields: {fields}\"\n                    raise ValueError(f\"{suffix}, `{name}` invalid, {fields_msg}\")\n\n            if is_static_output_block(link.source_id):\n                link.is_static = True  # Each value block output should be static.",
                          "children": [
                            {
                              "value": "source = (link.source_id, link.source_name)",
                              "children": [
                                {
                                  "value": "source = (link.source_id, link.source_name)",
                                  "children": [
                                    {
                                      "value": "source",
                                      "children": []
                                    },
                                    {
                                      "value": "(link.source_id, link.source_name)",
                                      "children": [
                                        {
                                          "value": "link.source_id",
                                          "children": [
                                            {
                                              "value": "link",
                                              "children": []
                                            },
                                            {
                                              "value": "source_id",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "link.source_name",
                                          "children": [
                                            {
                                              "value": "link",
                                              "children": []
                                            },
                                            {
                                              "value": "source_name",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "sink = (link.sink_id, link.sink_name)",
                              "children": [
                                {
                                  "value": "sink = (link.sink_id, link.sink_name)",
                                  "children": [
                                    {
                                      "value": "sink",
                                      "children": []
                                    },
                                    {
                                      "value": "(link.sink_id, link.sink_name)",
                                      "children": [
                                        {
                                          "value": "link.sink_id",
                                          "children": [
                                            {
                                              "value": "link",
                                              "children": []
                                            },
                                            {
                                              "value": "sink_id",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "link.sink_name",
                                          "children": [
                                            {
                                              "value": "link",
                                              "children": []
                                            },
                                            {
                                              "value": "sink_name",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "suffix = f\"Link {source} <-> {sink}\"",
                              "children": [
                                {
                                  "value": "suffix = f\"Link {source} <-> {sink}\"",
                                  "children": [
                                    {
                                      "value": "suffix",
                                      "children": []
                                    },
                                    {
                                      "value": "f\"Link {source} <-> {sink}\"",
                                      "children": [
                                        {
                                          "value": "f\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Link",
                                          "children": []
                                        },
                                        {
                                          "value": "{source}",
                                          "children": [
                                            {
                                              "value": "source",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "<->",
                                          "children": []
                                        },
                                        {
                                          "value": "{sink}",
                                          "children": [
                                            {
                                              "value": "sink",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "for i, (node_id, name) in enumerate([source, sink]):\n                node = node_map.get(node_id)\n                if not node:\n                    raise ValueError(\n                        f\"{suffix}, {node_id} is invalid node id, available nodes: {node_map.keys()}\"\n                    )\n\n                block = get_block(node.block_id)\n                if not block:\n                    blocks = {v().id: v().name for v in get_blocks().values()}\n                    raise ValueError(\n                        f\"{suffix}, {node.block_id} is invalid block id, available blocks: {blocks}\"\n                    )\n\n                sanitized_name = sanitize(name)\n                vals = node.input_default\n                if i == 0:\n                    fields = (\n                        block.output_schema.get_fields()\n                        if block.block_type != BlockType.AGENT\n                        else vals.get(\"output_schema\", {}).get(\"properties\", {}).keys()\n                    )\n                else:\n                    fields = (\n                        block.input_schema.get_fields()\n                        if block.block_type != BlockType.AGENT\n                        else vals.get(\"input_schema\", {}).get(\"properties\", {}).keys()\n                    )\n                if sanitized_name not in fields:\n                    fields_msg = f\"Allowed fields: {fields}\"\n                    raise ValueError(f\"{suffix}, `{name}` invalid, {fields_msg}\")",
                              "children": [
                                {
                                  "value": "i, (node_id, name)",
                                  "children": [
                                    {
                                      "value": "i",
                                      "children": []
                                    },
                                    {
                                      "value": "(node_id, name)",
                                      "children": [
                                        {
                                          "value": "node_id",
                                          "children": []
                                        },
                                        {
                                          "value": "name",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "enumerate([source, sink])",
                                  "children": [
                                    {
                                      "value": "enumerate",
                                      "children": []
                                    },
                                    {
                                      "value": "([source, sink])",
                                      "children": [
                                        {
                                          "value": "[source, sink]",
                                          "children": [
                                            {
                                              "value": "source",
                                              "children": []
                                            },
                                            {
                                              "value": "sink",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "node = node_map.get(node_id)\n                if not node:\n                    raise ValueError(\n                        f\"{suffix}, {node_id} is invalid node id, available nodes: {node_map.keys()}\"\n                    )\n\n                block = get_block(node.block_id)\n                if not block:\n                    blocks = {v().id: v().name for v in get_blocks().values()}\n                    raise ValueError(\n                        f\"{suffix}, {node.block_id} is invalid block id, available blocks: {blocks}\"\n                    )\n\n                sanitized_name = sanitize(name)\n                vals = node.input_default\n                if i == 0:\n                    fields = (\n                        block.output_schema.get_fields()\n                        if block.block_type != BlockType.AGENT\n                        else vals.get(\"output_schema\", {}).get(\"properties\", {}).keys()\n                    )\n                else:\n                    fields = (\n                        block.input_schema.get_fields()\n                        if block.block_type != BlockType.AGENT\n                        else vals.get(\"input_schema\", {}).get(\"properties\", {}).keys()\n                    )\n                if sanitized_name not in fields:\n                    fields_msg = f\"Allowed fields: {fields}\"\n                    raise ValueError(f\"{suffix}, `{name}` invalid, {fields_msg}\")",
                                  "children": [
                                    {
                                      "value": "node = node_map.get(node_id)",
                                      "children": [
                                        {
                                          "value": "node = node_map.get(node_id)",
                                          "children": [
                                            {
                                              "value": "node",
                                              "children": []
                                            },
                                            {
                                              "value": "node_map.get(node_id)",
                                              "children": [
                                                {
                                                  "value": "node_map.get",
                                                  "children": [
                                                    {
                                                      "value": "node_map",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "get",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(node_id)",
                                                  "children": [
                                                    {
                                                      "value": "node_id",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "if not node:\n                    raise ValueError(\n                        f\"{suffix}, {node_id} is invalid node id, available nodes: {node_map.keys()}\"\n                    )",
                                      "children": [
                                        {
                                          "value": "not node",
                                          "children": [
                                            {
                                              "value": "node",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "raise ValueError(\n                        f\"{suffix}, {node_id} is invalid node id, available nodes: {node_map.keys()}\"\n                    )",
                                          "children": [
                                            {
                                              "value": "raise ValueError(\n                        f\"{suffix}, {node_id} is invalid node id, available nodes: {node_map.keys()}\"\n                    )",
                                              "children": [
                                                {
                                                  "value": "ValueError(\n                        f\"{suffix}, {node_id} is invalid node id, available nodes: {node_map.keys()}\"\n                    )",
                                                  "children": [
                                                    {
                                                      "value": "ValueError",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "(\n                        f\"{suffix}, {node_id} is invalid node id, available nodes: {node_map.keys()}\"\n                    )",
                                                      "children": [
                                                        {
                                                          "value": "f\"{suffix}, {node_id} is invalid node id, available nodes: {node_map.keys()}\"",
                                                          "children": [
                                                            {
                                                              "value": "f\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "{suffix}",
                                                              "children": [
                                                                {
                                                                  "value": "suffix",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": ",",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "{node_id}",
                                                              "children": [
                                                                {
                                                                  "value": "node_id",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "is invalid node id, available nodes:",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "{node_map.keys()}",
                                                              "children": [
                                                                {
                                                                  "value": "node_map.keys()",
                                                                  "children": [
                                                                    {
                                                                      "value": "node_map.keys",
                                                                      "children": [
                                                                        {
                                                                          "value": "node_map",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "keys",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "()",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "block = get_block(node.block_id)",
                                      "children": [
                                        {
                                          "value": "block = get_block(node.block_id)",
                                          "children": [
                                            {
                                              "value": "block",
                                              "children": []
                                            },
                                            {
                                              "value": "get_block(node.block_id)",
                                              "children": [
                                                {
                                                  "value": "get_block",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(node.block_id)",
                                                  "children": [
                                                    {
                                                      "value": "node.block_id",
                                                      "children": [
                                                        {
                                                          "value": "node",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "block_id",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "if not block:\n                    blocks = {v().id: v().name for v in get_blocks().values()}\n                    raise ValueError(\n                        f\"{suffix}, {node.block_id} is invalid block id, available blocks: {blocks}\"\n                    )",
                                      "children": [
                                        {
                                          "value": "not block",
                                          "children": [
                                            {
                                              "value": "block",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "blocks = {v().id: v().name for v in get_blocks().values()}\n                    raise ValueError(\n                        f\"{suffix}, {node.block_id} is invalid block id, available blocks: {blocks}\"\n                    )",
                                          "children": [
                                            {
                                              "value": "blocks = {v().id: v().name for v in get_blocks().values()}",
                                              "children": [
                                                {
                                                  "value": "blocks = {v().id: v().name for v in get_blocks().values()}",
                                                  "children": [
                                                    {
                                                      "value": "blocks",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "{v().id: v().name for v in get_blocks().values()}",
                                                      "children": [
                                                        {
                                                          "value": "v().id: v().name",
                                                          "children": [
                                                            {
                                                              "value": "v().id",
                                                              "children": [
                                                                {
                                                                  "value": "v()",
                                                                  "children": [
                                                                    {
                                                                      "value": "v",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "()",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "id",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "v().name",
                                                              "children": [
                                                                {
                                                                  "value": "v()",
                                                                  "children": [
                                                                    {
                                                                      "value": "v",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "()",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "name",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "for v in get_blocks().values()",
                                                          "children": [
                                                            {
                                                              "value": "v",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "get_blocks().values()",
                                                              "children": [
                                                                {
                                                                  "value": "get_blocks().values",
                                                                  "children": [
                                                                    {
                                                                      "value": "get_blocks()",
                                                                      "children": [
                                                                        {
                                                                          "value": "get_blocks",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "()",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "values",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "()",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "raise ValueError(\n                        f\"{suffix}, {node.block_id} is invalid block id, available blocks: {blocks}\"\n                    )",
                                              "children": [
                                                {
                                                  "value": "ValueError(\n                        f\"{suffix}, {node.block_id} is invalid block id, available blocks: {blocks}\"\n                    )",
                                                  "children": [
                                                    {
                                                      "value": "ValueError",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "(\n                        f\"{suffix}, {node.block_id} is invalid block id, available blocks: {blocks}\"\n                    )",
                                                      "children": [
                                                        {
                                                          "value": "f\"{suffix}, {node.block_id} is invalid block id, available blocks: {blocks}\"",
                                                          "children": [
                                                            {
                                                              "value": "f\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "{suffix}",
                                                              "children": [
                                                                {
                                                                  "value": "suffix",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": ",",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "{node.block_id}",
                                                              "children": [
                                                                {
                                                                  "value": "node.block_id",
                                                                  "children": [
                                                                    {
                                                                      "value": "node",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "block_id",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "is invalid block id, available blocks:",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "{blocks}",
                                                              "children": [
                                                                {
                                                                  "value": "blocks",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "sanitized_name = sanitize(name)",
                                      "children": [
                                        {
                                          "value": "sanitized_name = sanitize(name)",
                                          "children": [
                                            {
                                              "value": "sanitized_name",
                                              "children": []
                                            },
                                            {
                                              "value": "sanitize(name)",
                                              "children": [
                                                {
                                                  "value": "sanitize",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(name)",
                                                  "children": [
                                                    {
                                                      "value": "name",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "vals = node.input_default",
                                      "children": [
                                        {
                                          "value": "vals = node.input_default",
                                          "children": [
                                            {
                                              "value": "vals",
                                              "children": []
                                            },
                                            {
                                              "value": "node.input_default",
                                              "children": [
                                                {
                                                  "value": "node",
                                                  "children": []
                                                },
                                                {
                                                  "value": "input_default",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "if i == 0:\n                    fields = (\n                        block.output_schema.get_fields()\n                        if block.block_type != BlockType.AGENT\n                        else vals.get(\"output_schema\", {}).get(\"properties\", {}).keys()\n                    )\n                else:\n                    fields = (\n                        block.input_schema.get_fields()\n                        if block.block_type != BlockType.AGENT\n                        else vals.get(\"input_schema\", {}).get(\"properties\", {}).keys()\n                    )",
                                      "children": [
                                        {
                                          "value": "i == 0",
                                          "children": [
                                            {
                                              "value": "i",
                                              "children": []
                                            },
                                            {
                                              "value": "0",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "fields = (\n                        block.output_schema.get_fields()\n                        if block.block_type != BlockType.AGENT\n                        else vals.get(\"output_schema\", {}).get(\"properties\", {}).keys()\n                    )",
                                          "children": [
                                            {
                                              "value": "fields = (\n                        block.output_schema.get_fields()\n                        if block.block_type != BlockType.AGENT\n                        else vals.get(\"output_schema\", {}).get(\"properties\", {}).keys()\n                    )",
                                              "children": [
                                                {
                                                  "value": "fields = (\n                        block.output_schema.get_fields()\n                        if block.block_type != BlockType.AGENT\n                        else vals.get(\"output_schema\", {}).get(\"properties\", {}).keys()\n                    )",
                                                  "children": [
                                                    {
                                                      "value": "fields",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "(\n                        block.output_schema.get_fields()\n                        if block.block_type != BlockType.AGENT\n                        else vals.get(\"output_schema\", {}).get(\"properties\", {}).keys()\n                    )",
                                                      "children": [
                                                        {
                                                          "value": "block.output_schema.get_fields()\n                        if block.block_type != BlockType.AGENT\n                        else vals.get(\"output_schema\", {}).get(\"properties\", {}).keys()",
                                                          "children": [
                                                            {
                                                              "value": "block.output_schema.get_fields()",
                                                              "children": [
                                                                {
                                                                  "value": "block.output_schema.get_fields",
                                                                  "children": [
                                                                    {
                                                                      "value": "block.output_schema",
                                                                      "children": [
                                                                        {
                                                                          "value": "block",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "output_schema",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "get_fields",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "()",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "block.block_type != BlockType.AGENT",
                                                              "children": [
                                                                {
                                                                  "value": "block.block_type",
                                                                  "children": [
                                                                    {
                                                                      "value": "block",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "block_type",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "BlockType.AGENT",
                                                                  "children": [
                                                                    {
                                                                      "value": "BlockType",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "AGENT",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "vals.get(\"output_schema\", {}).get(\"properties\", {}).keys()",
                                                              "children": [
                                                                {
                                                                  "value": "vals.get(\"output_schema\", {}).get(\"properties\", {}).keys",
                                                                  "children": [
                                                                    {
                                                                      "value": "vals.get(\"output_schema\", {}).get(\"properties\", {})",
                                                                      "children": [
                                                                        {
                                                                          "value": "vals.get(\"output_schema\", {}).get",
                                                                          "children": [
                                                                            {
                                                                              "value": "vals.get(\"output_schema\", {})",
                                                                              "children": [
                                                                                {
                                                                                  "value": "vals.get",
                                                                                  "children": [
                                                                                    {
                                                                                      "value": "vals",
                                                                                      "children": []
                                                                                    },
                                                                                    {
                                                                                      "value": "get",
                                                                                      "children": []
                                                                                    }
                                                                                  ]
                                                                                },
                                                                                {
                                                                                  "value": "(\"output_schema\", {})",
                                                                                  "children": [
                                                                                    {
                                                                                      "value": "\"output_schema\"",
                                                                                      "children": [
                                                                                        {
                                                                                          "value": "\"",
                                                                                          "children": []
                                                                                        },
                                                                                        {
                                                                                          "value": "output_schema",
                                                                                          "children": []
                                                                                        },
                                                                                        {
                                                                                          "value": "\"",
                                                                                          "children": []
                                                                                        }
                                                                                      ]
                                                                                    },
                                                                                    {
                                                                                      "value": "{}",
                                                                                      "children": []
                                                                                    }
                                                                                  ]
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "value": "get",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "value": "(\"properties\", {})",
                                                                          "children": [
                                                                            {
                                                                              "value": "\"properties\"",
                                                                              "children": [
                                                                                {
                                                                                  "value": "\"",
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "value": "properties",
                                                                                  "children": []
                                                                                },
                                                                                {
                                                                                  "value": "\"",
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "value": "{}",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "keys",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "()",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "else:\n                    fields = (\n                        block.input_schema.get_fields()\n                        if block.block_type != BlockType.AGENT\n                        else vals.get(\"input_schema\", {}).get(\"properties\", {}).keys()\n                    )",
                                          "children": [
                                            {
                                              "value": "fields = (\n                        block.input_schema.get_fields()\n                        if block.block_type != BlockType.AGENT\n                        else vals.get(\"input_schema\", {}).get(\"properties\", {}).keys()\n                    )",
                                              "children": [
                                                {
                                                  "value": "fields = (\n                        block.input_schema.get_fields()\n                        if block.block_type != BlockType.AGENT\n                        else vals.get(\"input_schema\", {}).get(\"properties\", {}).keys()\n                    )",
                                                  "children": [
                                                    {
                                                      "value": "fields = (\n                        block.input_schema.get_fields()\n                        if block.block_type != BlockType.AGENT\n                        else vals.get(\"input_schema\", {}).get(\"properties\", {}).keys()\n                    )",
                                                      "children": [
                                                        {
                                                          "value": "fields",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "(\n                        block.input_schema.get_fields()\n                        if block.block_type != BlockType.AGENT\n                        else vals.get(\"input_schema\", {}).get(\"properties\", {}).keys()\n                    )",
                                                          "children": [
                                                            {
                                                              "value": "block.input_schema.get_fields()\n                        if block.block_type != BlockType.AGENT\n                        else vals.get(\"input_schema\", {}).get(\"properties\", {}).keys()",
                                                              "children": [
                                                                {
                                                                  "value": "block.input_schema.get_fields()",
                                                                  "children": [
                                                                    {
                                                                      "value": "block.input_schema.get_fields",
                                                                      "children": [
                                                                        {
                                                                          "value": "block.input_schema",
                                                                          "children": [
                                                                            {
                                                                              "value": "block",
                                                                              "children": []
                                                                            },
                                                                            {
                                                                              "value": "input_schema",
                                                                              "children": []
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "value": "get_fields",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "()",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "block.block_type != BlockType.AGENT",
                                                                  "children": [
                                                                    {
                                                                      "value": "block.block_type",
                                                                      "children": [
                                                                        {
                                                                          "value": "block",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "block_type",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "BlockType.AGENT",
                                                                      "children": [
                                                                        {
                                                                          "value": "BlockType",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "AGENT",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "vals.get(\"input_schema\", {}).get(\"properties\", {}).keys()",
                                                                  "children": [
                                                                    {
                                                                      "value": "vals.get(\"input_schema\", {}).get(\"properties\", {}).keys",
                                                                      "children": [
                                                                        {
                                                                          "value": "vals.get(\"input_schema\", {}).get(\"properties\", {})",
                                                                          "children": [
                                                                            {
                                                                              "value": "vals.get(\"input_schema\", {}).get",
                                                                              "children": [
                                                                                {
                                                                                  "value": "vals.get(\"input_schema\", {})",
                                                                                  "children": [
                                                                                    {
                                                                                      "value": "vals.get",
                                                                                      "children": [
                                                                                        {
                                                                                          "value": "vals",
                                                                                          "children": []
                                                                                        },
                                                                                        {
                                                                                          "value": "get",
                                                                                          "children": []
                                                                                        }
                                                                                      ]
                                                                                    },
                                                                                    {
                                                                                      "value": "(\"input_schema\", {})",
                                                                                      "children": [
                                                                                        {
                                                                                          "value": "\"input_schema\"",
                                                                                          "children": [
                                                                                            {
                                                                                              "value": "\"",
                                                                                              "children": []
                                                                                            },
                                                                                            {
                                                                                              "value": "input_schema",
                                                                                              "children": []
                                                                                            },
                                                                                            {
                                                                                              "value": "\"",
                                                                                              "children": []
                                                                                            }
                                                                                          ]
                                                                                        },
                                                                                        {
                                                                                          "value": "{}",
                                                                                          "children": []
                                                                                        }
                                                                                      ]
                                                                                    }
                                                                                  ]
                                                                                },
                                                                                {
                                                                                  "value": "get",
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            },
                                                                            {
                                                                              "value": "(\"properties\", {})",
                                                                              "children": [
                                                                                {
                                                                                  "value": "\"properties\"",
                                                                                  "children": [
                                                                                    {
                                                                                      "value": "\"",
                                                                                      "children": []
                                                                                    },
                                                                                    {
                                                                                      "value": "properties",
                                                                                      "children": []
                                                                                    },
                                                                                    {
                                                                                      "value": "\"",
                                                                                      "children": []
                                                                                    }
                                                                                  ]
                                                                                },
                                                                                {
                                                                                  "value": "{}",
                                                                                  "children": []
                                                                                }
                                                                              ]
                                                                            }
                                                                          ]
                                                                        },
                                                                        {
                                                                          "value": "keys",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "()",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "if sanitized_name not in fields:\n                    fields_msg = f\"Allowed fields: {fields}\"\n                    raise ValueError(f\"{suffix}, `{name}` invalid, {fields_msg}\")",
                                      "children": [
                                        {
                                          "value": "sanitized_name not in fields",
                                          "children": [
                                            {
                                              "value": "sanitized_name",
                                              "children": []
                                            },
                                            {
                                              "value": "fields",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "fields_msg = f\"Allowed fields: {fields}\"\n                    raise ValueError(f\"{suffix}, `{name}` invalid, {fields_msg}\")",
                                          "children": [
                                            {
                                              "value": "fields_msg = f\"Allowed fields: {fields}\"",
                                              "children": [
                                                {
                                                  "value": "fields_msg = f\"Allowed fields: {fields}\"",
                                                  "children": [
                                                    {
                                                      "value": "fields_msg",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "f\"Allowed fields: {fields}\"",
                                                      "children": [
                                                        {
                                                          "value": "f\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "Allowed fields:",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "{fields}",
                                                          "children": [
                                                            {
                                                              "value": "fields",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "raise ValueError(f\"{suffix}, `{name}` invalid, {fields_msg}\")",
                                              "children": [
                                                {
                                                  "value": "ValueError(f\"{suffix}, `{name}` invalid, {fields_msg}\")",
                                                  "children": [
                                                    {
                                                      "value": "ValueError",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "(f\"{suffix}, `{name}` invalid, {fields_msg}\")",
                                                      "children": [
                                                        {
                                                          "value": "f\"{suffix}, `{name}` invalid, {fields_msg}\"",
                                                          "children": [
                                                            {
                                                              "value": "f\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "{suffix}",
                                                              "children": [
                                                                {
                                                                  "value": "suffix",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": ", `",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "{name}",
                                                              "children": [
                                                                {
                                                                  "value": "name",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "` invalid,",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "{fields_msg}",
                                                              "children": [
                                                                {
                                                                  "value": "fields_msg",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "if is_static_output_block(link.source_id):\n                link.is_static = True  # Each value block output should be static.",
                              "children": [
                                {
                                  "value": "is_static_output_block(link.source_id)",
                                  "children": [
                                    {
                                      "value": "is_static_output_block",
                                      "children": []
                                    },
                                    {
                                      "value": "(link.source_id)",
                                      "children": [
                                        {
                                          "value": "link.source_id",
                                          "children": [
                                            {
                                              "value": "link",
                                              "children": []
                                            },
                                            {
                                              "value": "source_id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "link.is_static = True  # Each value block output should be static.",
                                  "children": [
                                    {
                                      "value": "link.is_static = True",
                                      "children": [
                                        {
                                          "value": "link.is_static = True",
                                          "children": [
                                            {
                                              "value": "link.is_static",
                                              "children": [
                                                {
                                                  "value": "link",
                                                  "children": []
                                                },
                                                {
                                                  "value": "is_static",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "True",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "# Each value block output should be static.",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "@staticmethod\n    def from_db(graph: AgentGraph, for_export: bool = False):\n        return GraphModel(\n            id=graph.id,\n            user_id=graph.userId,\n            version=graph.version,\n            is_active=graph.isActive,\n            is_template=graph.isTemplate,\n            name=graph.name or \"\",\n            description=graph.description or \"\",\n            nodes=[\n                NodeModel.from_db(GraphModel._process_node(node, for_export))\n                for node in graph.AgentNodes or []\n            ],\n            links=list(\n                {\n                    Link.from_db(link)\n                    for node in graph.AgentNodes or []\n                    for link in (node.Input or []) + (node.Output or [])\n                }\n            ),\n        )",
              "children": [
                {
                  "value": "@staticmethod",
                  "children": [
                    {
                      "value": "staticmethod",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "def from_db(graph: AgentGraph, for_export: bool = False):\n        return GraphModel(\n            id=graph.id,\n            user_id=graph.userId,\n            version=graph.version,\n            is_active=graph.isActive,\n            is_template=graph.isTemplate,\n            name=graph.name or \"\",\n            description=graph.description or \"\",\n            nodes=[\n                NodeModel.from_db(GraphModel._process_node(node, for_export))\n                for node in graph.AgentNodes or []\n            ],\n            links=list(\n                {\n                    Link.from_db(link)\n                    for node in graph.AgentNodes or []\n                    for link in (node.Input or []) + (node.Output or [])\n                }\n            ),\n        )",
                  "children": [
                    {
                      "value": "from_db",
                      "children": []
                    },
                    {
                      "value": "(graph: AgentGraph, for_export: bool = False)",
                      "children": [
                        {
                          "value": "graph: AgentGraph",
                          "children": [
                            {
                              "value": "graph",
                              "children": []
                            },
                            {
                              "value": "AgentGraph",
                              "children": [
                                {
                                  "value": "AgentGraph",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "for_export: bool = False",
                          "children": [
                            {
                              "value": "for_export",
                              "children": []
                            },
                            {
                              "value": "bool",
                              "children": [
                                {
                                  "value": "bool",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "False",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return GraphModel(\n            id=graph.id,\n            user_id=graph.userId,\n            version=graph.version,\n            is_active=graph.isActive,\n            is_template=graph.isTemplate,\n            name=graph.name or \"\",\n            description=graph.description or \"\",\n            nodes=[\n                NodeModel.from_db(GraphModel._process_node(node, for_export))\n                for node in graph.AgentNodes or []\n            ],\n            links=list(\n                {\n                    Link.from_db(link)\n                    for node in graph.AgentNodes or []\n                    for link in (node.Input or []) + (node.Output or [])\n                }\n            ),\n        )",
                      "children": [
                        {
                          "value": "return GraphModel(\n            id=graph.id,\n            user_id=graph.userId,\n            version=graph.version,\n            is_active=graph.isActive,\n            is_template=graph.isTemplate,\n            name=graph.name or \"\",\n            description=graph.description or \"\",\n            nodes=[\n                NodeModel.from_db(GraphModel._process_node(node, for_export))\n                for node in graph.AgentNodes or []\n            ],\n            links=list(\n                {\n                    Link.from_db(link)\n                    for node in graph.AgentNodes or []\n                    for link in (node.Input or []) + (node.Output or [])\n                }\n            ),\n        )",
                          "children": [
                            {
                              "value": "GraphModel(\n            id=graph.id,\n            user_id=graph.userId,\n            version=graph.version,\n            is_active=graph.isActive,\n            is_template=graph.isTemplate,\n            name=graph.name or \"\",\n            description=graph.description or \"\",\n            nodes=[\n                NodeModel.from_db(GraphModel._process_node(node, for_export))\n                for node in graph.AgentNodes or []\n            ],\n            links=list(\n                {\n                    Link.from_db(link)\n                    for node in graph.AgentNodes or []\n                    for link in (node.Input or []) + (node.Output or [])\n                }\n            ),\n        )",
                              "children": [
                                {
                                  "value": "GraphModel",
                                  "children": []
                                },
                                {
                                  "value": "(\n            id=graph.id,\n            user_id=graph.userId,\n            version=graph.version,\n            is_active=graph.isActive,\n            is_template=graph.isTemplate,\n            name=graph.name or \"\",\n            description=graph.description or \"\",\n            nodes=[\n                NodeModel.from_db(GraphModel._process_node(node, for_export))\n                for node in graph.AgentNodes or []\n            ],\n            links=list(\n                {\n                    Link.from_db(link)\n                    for node in graph.AgentNodes or []\n                    for link in (node.Input or []) + (node.Output or [])\n                }\n            ),\n        )",
                                  "children": [
                                    {
                                      "value": "id=graph.id",
                                      "children": [
                                        {
                                          "value": "id",
                                          "children": []
                                        },
                                        {
                                          "value": "graph.id",
                                          "children": [
                                            {
                                              "value": "graph",
                                              "children": []
                                            },
                                            {
                                              "value": "id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "user_id=graph.userId",
                                      "children": [
                                        {
                                          "value": "user_id",
                                          "children": []
                                        },
                                        {
                                          "value": "graph.userId",
                                          "children": [
                                            {
                                              "value": "graph",
                                              "children": []
                                            },
                                            {
                                              "value": "userId",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "version=graph.version",
                                      "children": [
                                        {
                                          "value": "version",
                                          "children": []
                                        },
                                        {
                                          "value": "graph.version",
                                          "children": [
                                            {
                                              "value": "graph",
                                              "children": []
                                            },
                                            {
                                              "value": "version",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "is_active=graph.isActive",
                                      "children": [
                                        {
                                          "value": "is_active",
                                          "children": []
                                        },
                                        {
                                          "value": "graph.isActive",
                                          "children": [
                                            {
                                              "value": "graph",
                                              "children": []
                                            },
                                            {
                                              "value": "isActive",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "is_template=graph.isTemplate",
                                      "children": [
                                        {
                                          "value": "is_template",
                                          "children": []
                                        },
                                        {
                                          "value": "graph.isTemplate",
                                          "children": [
                                            {
                                              "value": "graph",
                                              "children": []
                                            },
                                            {
                                              "value": "isTemplate",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "name=graph.name or \"\"",
                                      "children": [
                                        {
                                          "value": "name",
                                          "children": []
                                        },
                                        {
                                          "value": "graph.name or \"\"",
                                          "children": [
                                            {
                                              "value": "graph.name",
                                              "children": [
                                                {
                                                  "value": "graph",
                                                  "children": []
                                                },
                                                {
                                                  "value": "name",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "description=graph.description or \"\"",
                                      "children": [
                                        {
                                          "value": "description",
                                          "children": []
                                        },
                                        {
                                          "value": "graph.description or \"\"",
                                          "children": [
                                            {
                                              "value": "graph.description",
                                              "children": [
                                                {
                                                  "value": "graph",
                                                  "children": []
                                                },
                                                {
                                                  "value": "description",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "nodes=[\n                NodeModel.from_db(GraphModel._process_node(node, for_export))\n                for node in graph.AgentNodes or []\n            ]",
                                      "children": [
                                        {
                                          "value": "nodes",
                                          "children": []
                                        },
                                        {
                                          "value": "[\n                NodeModel.from_db(GraphModel._process_node(node, for_export))\n                for node in graph.AgentNodes or []\n            ]",
                                          "children": [
                                            {
                                              "value": "NodeModel.from_db(GraphModel._process_node(node, for_export))",
                                              "children": [
                                                {
                                                  "value": "NodeModel.from_db",
                                                  "children": [
                                                    {
                                                      "value": "NodeModel",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "from_db",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(GraphModel._process_node(node, for_export))",
                                                  "children": [
                                                    {
                                                      "value": "GraphModel._process_node(node, for_export)",
                                                      "children": [
                                                        {
                                                          "value": "GraphModel._process_node",
                                                          "children": [
                                                            {
                                                              "value": "GraphModel",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "_process_node",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "(node, for_export)",
                                                          "children": [
                                                            {
                                                              "value": "node",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "for_export",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "for node in graph.AgentNodes or []",
                                              "children": [
                                                {
                                                  "value": "node",
                                                  "children": []
                                                },
                                                {
                                                  "value": "graph.AgentNodes or []",
                                                  "children": [
                                                    {
                                                      "value": "graph.AgentNodes",
                                                      "children": [
                                                        {
                                                          "value": "graph",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "AgentNodes",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "[]",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "links=list(\n                {\n                    Link.from_db(link)\n                    for node in graph.AgentNodes or []\n                    for link in (node.Input or []) + (node.Output or [])\n                }\n            )",
                                      "children": [
                                        {
                                          "value": "links",
                                          "children": []
                                        },
                                        {
                                          "value": "list(\n                {\n                    Link.from_db(link)\n                    for node in graph.AgentNodes or []\n                    for link in (node.Input or []) + (node.Output or [])\n                }\n            )",
                                          "children": [
                                            {
                                              "value": "list",
                                              "children": []
                                            },
                                            {
                                              "value": "(\n                {\n                    Link.from_db(link)\n                    for node in graph.AgentNodes or []\n                    for link in (node.Input or []) + (node.Output or [])\n                }\n            )",
                                              "children": [
                                                {
                                                  "value": "{\n                    Link.from_db(link)\n                    for node in graph.AgentNodes or []\n                    for link in (node.Input or []) + (node.Output or [])\n                }",
                                                  "children": [
                                                    {
                                                      "value": "Link.from_db(link)",
                                                      "children": [
                                                        {
                                                          "value": "Link.from_db",
                                                          "children": [
                                                            {
                                                              "value": "Link",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "from_db",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "(link)",
                                                          "children": [
                                                            {
                                                              "value": "link",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "for node in graph.AgentNodes or []",
                                                      "children": [
                                                        {
                                                          "value": "node",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "graph.AgentNodes or []",
                                                          "children": [
                                                            {
                                                              "value": "graph.AgentNodes",
                                                              "children": [
                                                                {
                                                                  "value": "graph",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "AgentNodes",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "[]",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "for link in (node.Input or []) + (node.Output or [])",
                                                      "children": [
                                                        {
                                                          "value": "link",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "(node.Input or []) + (node.Output or [])",
                                                          "children": [
                                                            {
                                                              "value": "(node.Input or [])",
                                                              "children": [
                                                                {
                                                                  "value": "node.Input or []",
                                                                  "children": [
                                                                    {
                                                                      "value": "node.Input",
                                                                      "children": [
                                                                        {
                                                                          "value": "node",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "Input",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "[]",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "(node.Output or [])",
                                                              "children": [
                                                                {
                                                                  "value": "node.Output or []",
                                                                  "children": [
                                                                    {
                                                                      "value": "node.Output",
                                                                      "children": [
                                                                        {
                                                                          "value": "node",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "Output",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "[]",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "@staticmethod\n    def _process_node(node: AgentNode, for_export: bool) -> AgentNode:\n        if for_export:\n            # Remove credentials from node input\n            if node.constantInput:\n                constant_input = json.loads(\n                    node.constantInput, target_type=dict[str, Any]\n                )\n                constant_input = GraphModel._hide_node_input_credentials(constant_input)\n                node.constantInput = json.dumps(constant_input)\n\n            # Remove webhook info\n            node.webhookId = None\n            node.Webhook = None\n\n        return node",
              "children": [
                {
                  "value": "@staticmethod",
                  "children": [
                    {
                      "value": "staticmethod",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "def _process_node(node: AgentNode, for_export: bool) -> AgentNode:\n        if for_export:\n            # Remove credentials from node input\n            if node.constantInput:\n                constant_input = json.loads(\n                    node.constantInput, target_type=dict[str, Any]\n                )\n                constant_input = GraphModel._hide_node_input_credentials(constant_input)\n                node.constantInput = json.dumps(constant_input)\n\n            # Remove webhook info\n            node.webhookId = None\n            node.Webhook = None\n\n        return node",
                  "children": [
                    {
                      "value": "_process_node",
                      "children": []
                    },
                    {
                      "value": "(node: AgentNode, for_export: bool)",
                      "children": [
                        {
                          "value": "node: AgentNode",
                          "children": [
                            {
                              "value": "node",
                              "children": []
                            },
                            {
                              "value": "AgentNode",
                              "children": [
                                {
                                  "value": "AgentNode",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "for_export: bool",
                          "children": [
                            {
                              "value": "for_export",
                              "children": []
                            },
                            {
                              "value": "bool",
                              "children": [
                                {
                                  "value": "bool",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "AgentNode",
                      "children": [
                        {
                          "value": "AgentNode",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "if for_export:\n            # Remove credentials from node input\n            if node.constantInput:\n                constant_input = json.loads(\n                    node.constantInput, target_type=dict[str, Any]\n                )\n                constant_input = GraphModel._hide_node_input_credentials(constant_input)\n                node.constantInput = json.dumps(constant_input)\n\n            # Remove webhook info\n            node.webhookId = None\n            node.Webhook = None\n\n        return node",
                      "children": [
                        {
                          "value": "if for_export:\n            # Remove credentials from node input\n            if node.constantInput:\n                constant_input = json.loads(\n                    node.constantInput, target_type=dict[str, Any]\n                )\n                constant_input = GraphModel._hide_node_input_credentials(constant_input)\n                node.constantInput = json.dumps(constant_input)\n\n            # Remove webhook info\n            node.webhookId = None\n            node.Webhook = None",
                          "children": [
                            {
                              "value": "for_export",
                              "children": []
                            },
                            {
                              "value": "# Remove credentials from node input",
                              "children": []
                            },
                            {
                              "value": "if node.constantInput:\n                constant_input = json.loads(\n                    node.constantInput, target_type=dict[str, Any]\n                )\n                constant_input = GraphModel._hide_node_input_credentials(constant_input)\n                node.constantInput = json.dumps(constant_input)\n\n            # Remove webhook info\n            node.webhookId = None\n            node.Webhook = None",
                              "children": [
                                {
                                  "value": "if node.constantInput:\n                constant_input = json.loads(\n                    node.constantInput, target_type=dict[str, Any]\n                )\n                constant_input = GraphModel._hide_node_input_credentials(constant_input)\n                node.constantInput = json.dumps(constant_input)",
                                  "children": [
                                    {
                                      "value": "node.constantInput",
                                      "children": [
                                        {
                                          "value": "node",
                                          "children": []
                                        },
                                        {
                                          "value": "constantInput",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "constant_input = json.loads(\n                    node.constantInput, target_type=dict[str, Any]\n                )\n                constant_input = GraphModel._hide_node_input_credentials(constant_input)\n                node.constantInput = json.dumps(constant_input)",
                                      "children": [
                                        {
                                          "value": "constant_input = json.loads(\n                    node.constantInput, target_type=dict[str, Any]\n                )",
                                          "children": [
                                            {
                                              "value": "constant_input = json.loads(\n                    node.constantInput, target_type=dict[str, Any]\n                )",
                                              "children": [
                                                {
                                                  "value": "constant_input",
                                                  "children": []
                                                },
                                                {
                                                  "value": "json.loads(\n                    node.constantInput, target_type=dict[str, Any]\n                )",
                                                  "children": [
                                                    {
                                                      "value": "json.loads",
                                                      "children": [
                                                        {
                                                          "value": "json",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "loads",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "(\n                    node.constantInput, target_type=dict[str, Any]\n                )",
                                                      "children": [
                                                        {
                                                          "value": "node.constantInput",
                                                          "children": [
                                                            {
                                                              "value": "node",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "constantInput",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "target_type=dict[str, Any]",
                                                          "children": [
                                                            {
                                                              "value": "target_type",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "dict[str, Any]",
                                                              "children": [
                                                                {
                                                                  "value": "dict",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "str",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "Any",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "constant_input = GraphModel._hide_node_input_credentials(constant_input)",
                                          "children": [
                                            {
                                              "value": "constant_input = GraphModel._hide_node_input_credentials(constant_input)",
                                              "children": [
                                                {
                                                  "value": "constant_input",
                                                  "children": []
                                                },
                                                {
                                                  "value": "GraphModel._hide_node_input_credentials(constant_input)",
                                                  "children": [
                                                    {
                                                      "value": "GraphModel._hide_node_input_credentials",
                                                      "children": [
                                                        {
                                                          "value": "GraphModel",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "_hide_node_input_credentials",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "(constant_input)",
                                                      "children": [
                                                        {
                                                          "value": "constant_input",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "node.constantInput = json.dumps(constant_input)",
                                          "children": [
                                            {
                                              "value": "node.constantInput = json.dumps(constant_input)",
                                              "children": [
                                                {
                                                  "value": "node.constantInput",
                                                  "children": [
                                                    {
                                                      "value": "node",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "constantInput",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "json.dumps(constant_input)",
                                                  "children": [
                                                    {
                                                      "value": "json.dumps",
                                                      "children": [
                                                        {
                                                          "value": "json",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "dumps",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "(constant_input)",
                                                      "children": [
                                                        {
                                                          "value": "constant_input",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "# Remove webhook info",
                                  "children": []
                                },
                                {
                                  "value": "node.webhookId = None",
                                  "children": [
                                    {
                                      "value": "node.webhookId = None",
                                      "children": [
                                        {
                                          "value": "node.webhookId",
                                          "children": [
                                            {
                                              "value": "node",
                                              "children": []
                                            },
                                            {
                                              "value": "webhookId",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "None",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "node.Webhook = None",
                                  "children": [
                                    {
                                      "value": "node.Webhook = None",
                                      "children": [
                                        {
                                          "value": "node.Webhook",
                                          "children": [
                                            {
                                              "value": "node",
                                              "children": []
                                            },
                                            {
                                              "value": "Webhook",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "None",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "return node",
                          "children": [
                            {
                              "value": "node",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "@staticmethod\n    def _hide_node_input_credentials(input_data: dict[str, Any]) -> dict[str, Any]:\n        sensitive_keys = [\"credentials\", \"api_key\", \"password\", \"token\", \"secret\"]\n        result = {}\n        for key, value in input_data.items():\n            if isinstance(value, dict):\n                result[key] = GraphModel._hide_node_input_credentials(value)\n            elif isinstance(value, str) and any(\n                sensitive_key in key.lower() for sensitive_key in sensitive_keys\n            ):\n                # Skip this key-value pair in the result\n                continue\n            else:\n                result[key] = value\n        return result",
              "children": [
                {
                  "value": "@staticmethod",
                  "children": [
                    {
                      "value": "staticmethod",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "def _hide_node_input_credentials(input_data: dict[str, Any]) -> dict[str, Any]:\n        sensitive_keys = [\"credentials\", \"api_key\", \"password\", \"token\", \"secret\"]\n        result = {}\n        for key, value in input_data.items():\n            if isinstance(value, dict):\n                result[key] = GraphModel._hide_node_input_credentials(value)\n            elif isinstance(value, str) and any(\n                sensitive_key in key.lower() for sensitive_key in sensitive_keys\n            ):\n                # Skip this key-value pair in the result\n                continue\n            else:\n                result[key] = value\n        return result",
                  "children": [
                    {
                      "value": "_hide_node_input_credentials",
                      "children": []
                    },
                    {
                      "value": "(input_data: dict[str, Any])",
                      "children": [
                        {
                          "value": "input_data: dict[str, Any]",
                          "children": [
                            {
                              "value": "input_data",
                              "children": []
                            },
                            {
                              "value": "dict[str, Any]",
                              "children": [
                                {
                                  "value": "dict[str, Any]",
                                  "children": [
                                    {
                                      "value": "dict",
                                      "children": []
                                    },
                                    {
                                      "value": "[str, Any]",
                                      "children": [
                                        {
                                          "value": "str",
                                          "children": [
                                            {
                                              "value": "str",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "Any",
                                          "children": [
                                            {
                                              "value": "Any",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "dict[str, Any]",
                      "children": [
                        {
                          "value": "dict[str, Any]",
                          "children": [
                            {
                              "value": "dict",
                              "children": []
                            },
                            {
                              "value": "[str, Any]",
                              "children": [
                                {
                                  "value": "str",
                                  "children": [
                                    {
                                      "value": "str",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "Any",
                                  "children": [
                                    {
                                      "value": "Any",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "sensitive_keys = [\"credentials\", \"api_key\", \"password\", \"token\", \"secret\"]\n        result = {}\n        for key, value in input_data.items():\n            if isinstance(value, dict):\n                result[key] = GraphModel._hide_node_input_credentials(value)\n            elif isinstance(value, str) and any(\n                sensitive_key in key.lower() for sensitive_key in sensitive_keys\n            ):\n                # Skip this key-value pair in the result\n                continue\n            else:\n                result[key] = value\n        return result",
                      "children": [
                        {
                          "value": "sensitive_keys = [\"credentials\", \"api_key\", \"password\", \"token\", \"secret\"]",
                          "children": [
                            {
                              "value": "sensitive_keys = [\"credentials\", \"api_key\", \"password\", \"token\", \"secret\"]",
                              "children": [
                                {
                                  "value": "sensitive_keys",
                                  "children": []
                                },
                                {
                                  "value": "[\"credentials\", \"api_key\", \"password\", \"token\", \"secret\"]",
                                  "children": [
                                    {
                                      "value": "\"credentials\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "credentials",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "\"api_key\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "api_key",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "\"password\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "password",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "\"token\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "token",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "\"secret\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "secret",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "result = {}",
                          "children": [
                            {
                              "value": "result = {}",
                              "children": [
                                {
                                  "value": "result",
                                  "children": []
                                },
                                {
                                  "value": "{}",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "for key, value in input_data.items():\n            if isinstance(value, dict):\n                result[key] = GraphModel._hide_node_input_credentials(value)\n            elif isinstance(value, str) and any(\n                sensitive_key in key.lower() for sensitive_key in sensitive_keys\n            ):\n                # Skip this key-value pair in the result\n                continue\n            else:\n                result[key] = value",
                          "children": [
                            {
                              "value": "key, value",
                              "children": [
                                {
                                  "value": "key",
                                  "children": []
                                },
                                {
                                  "value": "value",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "input_data.items()",
                              "children": [
                                {
                                  "value": "input_data.items",
                                  "children": [
                                    {
                                      "value": "input_data",
                                      "children": []
                                    },
                                    {
                                      "value": "items",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "if isinstance(value, dict):\n                result[key] = GraphModel._hide_node_input_credentials(value)\n            elif isinstance(value, str) and any(\n                sensitive_key in key.lower() for sensitive_key in sensitive_keys\n            ):\n                # Skip this key-value pair in the result\n                continue\n            else:\n                result[key] = value",
                              "children": [
                                {
                                  "value": "if isinstance(value, dict):\n                result[key] = GraphModel._hide_node_input_credentials(value)\n            elif isinstance(value, str) and any(\n                sensitive_key in key.lower() for sensitive_key in sensitive_keys\n            ):\n                # Skip this key-value pair in the result\n                continue\n            else:\n                result[key] = value",
                                  "children": [
                                    {
                                      "value": "isinstance(value, dict)",
                                      "children": [
                                        {
                                          "value": "isinstance",
                                          "children": []
                                        },
                                        {
                                          "value": "(value, dict)",
                                          "children": [
                                            {
                                              "value": "value",
                                              "children": []
                                            },
                                            {
                                              "value": "dict",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "result[key] = GraphModel._hide_node_input_credentials(value)",
                                      "children": [
                                        {
                                          "value": "result[key] = GraphModel._hide_node_input_credentials(value)",
                                          "children": [
                                            {
                                              "value": "result[key] = GraphModel._hide_node_input_credentials(value)",
                                              "children": [
                                                {
                                                  "value": "result[key]",
                                                  "children": [
                                                    {
                                                      "value": "result",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "key",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "GraphModel._hide_node_input_credentials(value)",
                                                  "children": [
                                                    {
                                                      "value": "GraphModel._hide_node_input_credentials",
                                                      "children": [
                                                        {
                                                          "value": "GraphModel",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "_hide_node_input_credentials",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "(value)",
                                                      "children": [
                                                        {
                                                          "value": "value",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "elif isinstance(value, str) and any(\n                sensitive_key in key.lower() for sensitive_key in sensitive_keys\n            ):\n                # Skip this key-value pair in the result\n                continue",
                                      "children": [
                                        {
                                          "value": "isinstance(value, str) and any(\n                sensitive_key in key.lower() for sensitive_key in sensitive_keys\n            )",
                                          "children": [
                                            {
                                              "value": "isinstance(value, str)",
                                              "children": [
                                                {
                                                  "value": "isinstance",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(value, str)",
                                                  "children": [
                                                    {
                                                      "value": "value",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "str",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "any(\n                sensitive_key in key.lower() for sensitive_key in sensitive_keys\n            )",
                                              "children": [
                                                {
                                                  "value": "any",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(\n                sensitive_key in key.lower() for sensitive_key in sensitive_keys\n            )",
                                                  "children": [
                                                    {
                                                      "value": "sensitive_key in key.lower()",
                                                      "children": [
                                                        {
                                                          "value": "sensitive_key",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "key.lower()",
                                                          "children": [
                                                            {
                                                              "value": "key.lower",
                                                              "children": [
                                                                {
                                                                  "value": "key",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "lower",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "()",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "for sensitive_key in sensitive_keys",
                                                      "children": [
                                                        {
                                                          "value": "sensitive_key",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "sensitive_keys",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "# Skip this key-value pair in the result",
                                          "children": []
                                        },
                                        {
                                          "value": "continue",
                                          "children": [
                                            {
                                              "value": "continue",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "else:\n                result[key] = value",
                                      "children": [
                                        {
                                          "value": "result[key] = value",
                                          "children": [
                                            {
                                              "value": "result[key] = value",
                                              "children": [
                                                {
                                                  "value": "result[key] = value",
                                                  "children": [
                                                    {
                                                      "value": "result[key]",
                                                      "children": [
                                                        {
                                                          "value": "result",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "key",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "value",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "return result",
                          "children": [
                            {
                              "value": "result",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "# --------------------- CRUD functions --------------------- #",
      "children": []
    },
    {
      "value": "async def get_node(node_id: str) -> NodeModel:\n    node = await AgentNode.prisma().find_unique_or_raise(\n        where={\"id\": node_id},\n        include=AGENT_NODE_INCLUDE,\n    )\n    return NodeModel.from_db(node)",
      "children": [
        {
          "value": "get_node",
          "children": []
        },
        {
          "value": "(node_id: str)",
          "children": [
            {
              "value": "node_id: str",
              "children": [
                {
                  "value": "node_id",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "NodeModel",
          "children": [
            {
              "value": "NodeModel",
              "children": []
            }
          ]
        },
        {
          "value": "node = await AgentNode.prisma().find_unique_or_raise(\n        where={\"id\": node_id},\n        include=AGENT_NODE_INCLUDE,\n    )\n    return NodeModel.from_db(node)",
          "children": [
            {
              "value": "node = await AgentNode.prisma().find_unique_or_raise(\n        where={\"id\": node_id},\n        include=AGENT_NODE_INCLUDE,\n    )",
              "children": [
                {
                  "value": "node = await AgentNode.prisma().find_unique_or_raise(\n        where={\"id\": node_id},\n        include=AGENT_NODE_INCLUDE,\n    )",
                  "children": [
                    {
                      "value": "node",
                      "children": []
                    },
                    {
                      "value": "await AgentNode.prisma().find_unique_or_raise(\n        where={\"id\": node_id},\n        include=AGENT_NODE_INCLUDE,\n    )",
                      "children": [
                        {
                          "value": "AgentNode.prisma().find_unique_or_raise(\n        where={\"id\": node_id},\n        include=AGENT_NODE_INCLUDE,\n    )",
                          "children": [
                            {
                              "value": "AgentNode.prisma().find_unique_or_raise",
                              "children": [
                                {
                                  "value": "AgentNode.prisma()",
                                  "children": [
                                    {
                                      "value": "AgentNode.prisma",
                                      "children": [
                                        {
                                          "value": "AgentNode",
                                          "children": []
                                        },
                                        {
                                          "value": "prisma",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "find_unique_or_raise",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(\n        where={\"id\": node_id},\n        include=AGENT_NODE_INCLUDE,\n    )",
                              "children": [
                                {
                                  "value": "where={\"id\": node_id}",
                                  "children": [
                                    {
                                      "value": "where",
                                      "children": []
                                    },
                                    {
                                      "value": "{\"id\": node_id}",
                                      "children": [
                                        {
                                          "value": "\"id\": node_id",
                                          "children": [
                                            {
                                              "value": "\"id\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "id",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "node_id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "include=AGENT_NODE_INCLUDE",
                                  "children": [
                                    {
                                      "value": "include",
                                      "children": []
                                    },
                                    {
                                      "value": "AGENT_NODE_INCLUDE",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "return NodeModel.from_db(node)",
              "children": [
                {
                  "value": "NodeModel.from_db(node)",
                  "children": [
                    {
                      "value": "NodeModel.from_db",
                      "children": [
                        {
                          "value": "NodeModel",
                          "children": []
                        },
                        {
                          "value": "from_db",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "(node)",
                      "children": [
                        {
                          "value": "node",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "async def set_node_webhook(node_id: str, webhook_id: str | None) -> NodeModel:\n    node = await AgentNode.prisma().update(\n        where={\"id\": node_id},\n        data=(\n            {\"Webhook\": {\"connect\": {\"id\": webhook_id}}}\n            if webhook_id\n            else {\"Webhook\": {\"disconnect\": True}}\n        ),\n        include=AGENT_NODE_INCLUDE,\n    )\n    if not node:\n        raise ValueError(f\"Node #{node_id} not found\")\n    return NodeModel.from_db(node)",
      "children": [
        {
          "value": "set_node_webhook",
          "children": []
        },
        {
          "value": "(node_id: str, webhook_id: str | None)",
          "children": [
            {
              "value": "node_id: str",
              "children": [
                {
                  "value": "node_id",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "webhook_id: str | None",
              "children": [
                {
                  "value": "webhook_id",
                  "children": []
                },
                {
                  "value": "str | None",
                  "children": [
                    {
                      "value": "str | None",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        },
                        {
                          "value": "None",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "NodeModel",
          "children": [
            {
              "value": "NodeModel",
              "children": []
            }
          ]
        },
        {
          "value": "node = await AgentNode.prisma().update(\n        where={\"id\": node_id},\n        data=(\n            {\"Webhook\": {\"connect\": {\"id\": webhook_id}}}\n            if webhook_id\n            else {\"Webhook\": {\"disconnect\": True}}\n        ),\n        include=AGENT_NODE_INCLUDE,\n    )\n    if not node:\n        raise ValueError(f\"Node #{node_id} not found\")\n    return NodeModel.from_db(node)",
          "children": [
            {
              "value": "node = await AgentNode.prisma().update(\n        where={\"id\": node_id},\n        data=(\n            {\"Webhook\": {\"connect\": {\"id\": webhook_id}}}\n            if webhook_id\n            else {\"Webhook\": {\"disconnect\": True}}\n        ),\n        include=AGENT_NODE_INCLUDE,\n    )",
              "children": [
                {
                  "value": "node = await AgentNode.prisma().update(\n        where={\"id\": node_id},\n        data=(\n            {\"Webhook\": {\"connect\": {\"id\": webhook_id}}}\n            if webhook_id\n            else {\"Webhook\": {\"disconnect\": True}}\n        ),\n        include=AGENT_NODE_INCLUDE,\n    )",
                  "children": [
                    {
                      "value": "node",
                      "children": []
                    },
                    {
                      "value": "await AgentNode.prisma().update(\n        where={\"id\": node_id},\n        data=(\n            {\"Webhook\": {\"connect\": {\"id\": webhook_id}}}\n            if webhook_id\n            else {\"Webhook\": {\"disconnect\": True}}\n        ),\n        include=AGENT_NODE_INCLUDE,\n    )",
                      "children": [
                        {
                          "value": "AgentNode.prisma().update(\n        where={\"id\": node_id},\n        data=(\n            {\"Webhook\": {\"connect\": {\"id\": webhook_id}}}\n            if webhook_id\n            else {\"Webhook\": {\"disconnect\": True}}\n        ),\n        include=AGENT_NODE_INCLUDE,\n    )",
                          "children": [
                            {
                              "value": "AgentNode.prisma().update",
                              "children": [
                                {
                                  "value": "AgentNode.prisma()",
                                  "children": [
                                    {
                                      "value": "AgentNode.prisma",
                                      "children": [
                                        {
                                          "value": "AgentNode",
                                          "children": []
                                        },
                                        {
                                          "value": "prisma",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "update",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(\n        where={\"id\": node_id},\n        data=(\n            {\"Webhook\": {\"connect\": {\"id\": webhook_id}}}\n            if webhook_id\n            else {\"Webhook\": {\"disconnect\": True}}\n        ),\n        include=AGENT_NODE_INCLUDE,\n    )",
                              "children": [
                                {
                                  "value": "where={\"id\": node_id}",
                                  "children": [
                                    {
                                      "value": "where",
                                      "children": []
                                    },
                                    {
                                      "value": "{\"id\": node_id}",
                                      "children": [
                                        {
                                          "value": "\"id\": node_id",
                                          "children": [
                                            {
                                              "value": "\"id\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "id",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "node_id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "data=(\n            {\"Webhook\": {\"connect\": {\"id\": webhook_id}}}\n            if webhook_id\n            else {\"Webhook\": {\"disconnect\": True}}\n        )",
                                  "children": [
                                    {
                                      "value": "data",
                                      "children": []
                                    },
                                    {
                                      "value": "(\n            {\"Webhook\": {\"connect\": {\"id\": webhook_id}}}\n            if webhook_id\n            else {\"Webhook\": {\"disconnect\": True}}\n        )",
                                      "children": [
                                        {
                                          "value": "{\"Webhook\": {\"connect\": {\"id\": webhook_id}}}\n            if webhook_id\n            else {\"Webhook\": {\"disconnect\": True}}",
                                          "children": [
                                            {
                                              "value": "{\"Webhook\": {\"connect\": {\"id\": webhook_id}}}",
                                              "children": [
                                                {
                                                  "value": "\"Webhook\": {\"connect\": {\"id\": webhook_id}}",
                                                  "children": [
                                                    {
                                                      "value": "\"Webhook\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "Webhook",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "{\"connect\": {\"id\": webhook_id}}",
                                                      "children": [
                                                        {
                                                          "value": "\"connect\": {\"id\": webhook_id}",
                                                          "children": [
                                                            {
                                                              "value": "\"connect\"",
                                                              "children": [
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "connect",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "{\"id\": webhook_id}",
                                                              "children": [
                                                                {
                                                                  "value": "\"id\": webhook_id",
                                                                  "children": [
                                                                    {
                                                                      "value": "\"id\"",
                                                                      "children": [
                                                                        {
                                                                          "value": "\"",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "id",
                                                                          "children": []
                                                                        },
                                                                        {
                                                                          "value": "\"",
                                                                          "children": []
                                                                        }
                                                                      ]
                                                                    },
                                                                    {
                                                                      "value": "webhook_id",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "webhook_id",
                                              "children": []
                                            },
                                            {
                                              "value": "{\"Webhook\": {\"disconnect\": True}}",
                                              "children": [
                                                {
                                                  "value": "\"Webhook\": {\"disconnect\": True}",
                                                  "children": [
                                                    {
                                                      "value": "\"Webhook\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "Webhook",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "{\"disconnect\": True}",
                                                      "children": [
                                                        {
                                                          "value": "\"disconnect\": True",
                                                          "children": [
                                                            {
                                                              "value": "\"disconnect\"",
                                                              "children": [
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "disconnect",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "True",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "include=AGENT_NODE_INCLUDE",
                                  "children": [
                                    {
                                      "value": "include",
                                      "children": []
                                    },
                                    {
                                      "value": "AGENT_NODE_INCLUDE",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "if not node:\n        raise ValueError(f\"Node #{node_id} not found\")",
              "children": [
                {
                  "value": "not node",
                  "children": [
                    {
                      "value": "node",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "raise ValueError(f\"Node #{node_id} not found\")",
                  "children": [
                    {
                      "value": "raise ValueError(f\"Node #{node_id} not found\")",
                      "children": [
                        {
                          "value": "ValueError(f\"Node #{node_id} not found\")",
                          "children": [
                            {
                              "value": "ValueError",
                              "children": []
                            },
                            {
                              "value": "(f\"Node #{node_id} not found\")",
                              "children": [
                                {
                                  "value": "f\"Node #{node_id} not found\"",
                                  "children": [
                                    {
                                      "value": "f\"",
                                      "children": []
                                    },
                                    {
                                      "value": "Node #",
                                      "children": []
                                    },
                                    {
                                      "value": "{node_id}",
                                      "children": [
                                        {
                                          "value": "node_id",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "not found",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "return NodeModel.from_db(node)",
              "children": [
                {
                  "value": "NodeModel.from_db(node)",
                  "children": [
                    {
                      "value": "NodeModel.from_db",
                      "children": [
                        {
                          "value": "NodeModel",
                          "children": []
                        },
                        {
                          "value": "from_db",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "(node)",
                      "children": [
                        {
                          "value": "node",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "async def get_graphs(\n    user_id: str,\n    filter_by: Literal[\"active\", \"template\"] | None = \"active\",\n) -> list[GraphModel]:\n    \"\"\"\n    Retrieves graph metadata objects.\n    Default behaviour is to get all currently active graphs.\n\n    Args:\n        filter_by: An optional filter to either select templates or active graphs.\n        user_id: The ID of the user that owns the graph.\n\n    Returns:\n        list[GraphModel]: A list of objects representing the retrieved graphs.\n    \"\"\"\n    where_clause: AgentGraphWhereInput = {\"userId\": user_id}\n\n    if filter_by == \"active\":\n        where_clause[\"isActive\"] = True\n    elif filter_by == \"template\":\n        where_clause[\"isTemplate\"] = True\n\n    graphs = await AgentGraph.prisma().find_many(\n        where=where_clause,\n        distinct=[\"id\"],\n        order={\"version\": \"desc\"},\n        include=AGENT_GRAPH_INCLUDE,\n    )\n\n    graph_models = []\n    for graph in graphs:\n        try:\n            graph_models.append(GraphModel.from_db(graph))\n        except Exception as e:\n            logger.error(f\"Error processing graph {graph.id}: {e}\")\n            continue\n\n    return graph_models",
      "children": [
        {
          "value": "get_graphs",
          "children": []
        },
        {
          "value": "(\n    user_id: str,\n    filter_by: Literal[\"active\", \"template\"] | None = \"active\",\n)",
          "children": [
            {
              "value": "user_id: str",
              "children": [
                {
                  "value": "user_id",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "filter_by: Literal[\"active\", \"template\"] | None = \"active\"",
              "children": [
                {
                  "value": "filter_by",
                  "children": []
                },
                {
                  "value": "Literal[\"active\", \"template\"] | None",
                  "children": [
                    {
                      "value": "Literal[\"active\", \"template\"] | None",
                      "children": [
                        {
                          "value": "Literal[\"active\", \"template\"]",
                          "children": [
                            {
                              "value": "Literal[\"active\", \"template\"]",
                              "children": [
                                {
                                  "value": "Literal",
                                  "children": []
                                },
                                {
                                  "value": "[\"active\", \"template\"]",
                                  "children": [
                                    {
                                      "value": "\"active\"",
                                      "children": [
                                        {
                                          "value": "\"active\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "active",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "\"template\"",
                                      "children": [
                                        {
                                          "value": "\"template\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "template",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "None",
                          "children": [
                            {
                              "value": "None",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "\"active\"",
                  "children": [
                    {
                      "value": "\"",
                      "children": []
                    },
                    {
                      "value": "active",
                      "children": []
                    },
                    {
                      "value": "\"",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "list[GraphModel]",
          "children": [
            {
              "value": "list[GraphModel]",
              "children": [
                {
                  "value": "list",
                  "children": []
                },
                {
                  "value": "[GraphModel]",
                  "children": [
                    {
                      "value": "GraphModel",
                      "children": [
                        {
                          "value": "GraphModel",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "\"\"\"\n    Retrieves graph metadata objects.\n    Default behaviour is to get all currently active graphs.\n\n    Args:\n        filter_by: An optional filter to either select templates or active graphs.\n        user_id: The ID of the user that owns the graph.\n\n    Returns:\n        list[GraphModel]: A list of objects representing the retrieved graphs.\n    \"\"\"\n    where_clause: AgentGraphWhereInput = {\"userId\": user_id}\n\n    if filter_by == \"active\":\n        where_clause[\"isActive\"] = True\n    elif filter_by == \"template\":\n        where_clause[\"isTemplate\"] = True\n\n    graphs = await AgentGraph.prisma().find_many(\n        where=where_clause,\n        distinct=[\"id\"],\n        order={\"version\": \"desc\"},\n        include=AGENT_GRAPH_INCLUDE,\n    )\n\n    graph_models = []\n    for graph in graphs:\n        try:\n            graph_models.append(GraphModel.from_db(graph))\n        except Exception as e:\n            logger.error(f\"Error processing graph {graph.id}: {e}\")\n            continue\n\n    return graph_models",
          "children": [
            {
              "value": "\"\"\"\n    Retrieves graph metadata objects.\n    Default behaviour is to get all currently active graphs.\n\n    Args:\n        filter_by: An optional filter to either select templates or active graphs.\n        user_id: The ID of the user that owns the graph.\n\n    Returns:\n        list[GraphModel]: A list of objects representing the retrieved graphs.\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    Retrieves graph metadata objects.\n    Default behaviour is to get all currently active graphs.\n\n    Args:\n        filter_by: An optional filter to either select templates or active graphs.\n        user_id: The ID of the user that owns the graph.\n\n    Returns:\n        list[GraphModel]: A list of objects representing the retrieved graphs.\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Retrieves graph metadata objects.\n    Default behaviour is to get all currently active graphs.\n\n    Args:\n        filter_by: An optional filter to either select templates or active graphs.\n        user_id: The ID of the user that owns the graph.\n\n    Returns:\n        list[GraphModel]: A list of objects representing the retrieved graphs.",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "where_clause: AgentGraphWhereInput = {\"userId\": user_id}",
              "children": [
                {
                  "value": "where_clause: AgentGraphWhereInput = {\"userId\": user_id}",
                  "children": [
                    {
                      "value": "where_clause",
                      "children": []
                    },
                    {
                      "value": "AgentGraphWhereInput",
                      "children": [
                        {
                          "value": "AgentGraphWhereInput",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "{\"userId\": user_id}",
                      "children": [
                        {
                          "value": "\"userId\": user_id",
                          "children": [
                            {
                              "value": "\"userId\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "userId",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "user_id",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "if filter_by == \"active\":\n        where_clause[\"isActive\"] = True\n    elif filter_by == \"template\":\n        where_clause[\"isTemplate\"] = True",
              "children": [
                {
                  "value": "filter_by == \"active\"",
                  "children": [
                    {
                      "value": "filter_by",
                      "children": []
                    },
                    {
                      "value": "\"active\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "active",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "where_clause[\"isActive\"] = True",
                  "children": [
                    {
                      "value": "where_clause[\"isActive\"] = True",
                      "children": [
                        {
                          "value": "where_clause[\"isActive\"] = True",
                          "children": [
                            {
                              "value": "where_clause[\"isActive\"]",
                              "children": [
                                {
                                  "value": "where_clause",
                                  "children": []
                                },
                                {
                                  "value": "\"isActive\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "isActive",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "True",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "elif filter_by == \"template\":\n        where_clause[\"isTemplate\"] = True",
                  "children": [
                    {
                      "value": "filter_by == \"template\"",
                      "children": [
                        {
                          "value": "filter_by",
                          "children": []
                        },
                        {
                          "value": "\"template\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "template",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "where_clause[\"isTemplate\"] = True",
                      "children": [
                        {
                          "value": "where_clause[\"isTemplate\"] = True",
                          "children": [
                            {
                              "value": "where_clause[\"isTemplate\"] = True",
                              "children": [
                                {
                                  "value": "where_clause[\"isTemplate\"]",
                                  "children": [
                                    {
                                      "value": "where_clause",
                                      "children": []
                                    },
                                    {
                                      "value": "\"isTemplate\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "isTemplate",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "True",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "graphs = await AgentGraph.prisma().find_many(\n        where=where_clause,\n        distinct=[\"id\"],\n        order={\"version\": \"desc\"},\n        include=AGENT_GRAPH_INCLUDE,\n    )",
              "children": [
                {
                  "value": "graphs = await AgentGraph.prisma().find_many(\n        where=where_clause,\n        distinct=[\"id\"],\n        order={\"version\": \"desc\"},\n        include=AGENT_GRAPH_INCLUDE,\n    )",
                  "children": [
                    {
                      "value": "graphs",
                      "children": []
                    },
                    {
                      "value": "await AgentGraph.prisma().find_many(\n        where=where_clause,\n        distinct=[\"id\"],\n        order={\"version\": \"desc\"},\n        include=AGENT_GRAPH_INCLUDE,\n    )",
                      "children": [
                        {
                          "value": "AgentGraph.prisma().find_many(\n        where=where_clause,\n        distinct=[\"id\"],\n        order={\"version\": \"desc\"},\n        include=AGENT_GRAPH_INCLUDE,\n    )",
                          "children": [
                            {
                              "value": "AgentGraph.prisma().find_many",
                              "children": [
                                {
                                  "value": "AgentGraph.prisma()",
                                  "children": [
                                    {
                                      "value": "AgentGraph.prisma",
                                      "children": [
                                        {
                                          "value": "AgentGraph",
                                          "children": []
                                        },
                                        {
                                          "value": "prisma",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "find_many",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(\n        where=where_clause,\n        distinct=[\"id\"],\n        order={\"version\": \"desc\"},\n        include=AGENT_GRAPH_INCLUDE,\n    )",
                              "children": [
                                {
                                  "value": "where=where_clause",
                                  "children": [
                                    {
                                      "value": "where",
                                      "children": []
                                    },
                                    {
                                      "value": "where_clause",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "distinct=[\"id\"]",
                                  "children": [
                                    {
                                      "value": "distinct",
                                      "children": []
                                    },
                                    {
                                      "value": "[\"id\"]",
                                      "children": [
                                        {
                                          "value": "\"id\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "id",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "order={\"version\": \"desc\"}",
                                  "children": [
                                    {
                                      "value": "order",
                                      "children": []
                                    },
                                    {
                                      "value": "{\"version\": \"desc\"}",
                                      "children": [
                                        {
                                          "value": "\"version\": \"desc\"",
                                          "children": [
                                            {
                                              "value": "\"version\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "version",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"desc\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "desc",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "include=AGENT_GRAPH_INCLUDE",
                                  "children": [
                                    {
                                      "value": "include",
                                      "children": []
                                    },
                                    {
                                      "value": "AGENT_GRAPH_INCLUDE",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "graph_models = []",
              "children": [
                {
                  "value": "graph_models = []",
                  "children": [
                    {
                      "value": "graph_models",
                      "children": []
                    },
                    {
                      "value": "[]",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "for graph in graphs:\n        try:\n            graph_models.append(GraphModel.from_db(graph))\n        except Exception as e:\n            logger.error(f\"Error processing graph {graph.id}: {e}\")\n            continue",
              "children": [
                {
                  "value": "graph",
                  "children": []
                },
                {
                  "value": "graphs",
                  "children": []
                },
                {
                  "value": "try:\n            graph_models.append(GraphModel.from_db(graph))\n        except Exception as e:\n            logger.error(f\"Error processing graph {graph.id}: {e}\")\n            continue",
                  "children": [
                    {
                      "value": "try:\n            graph_models.append(GraphModel.from_db(graph))\n        except Exception as e:\n            logger.error(f\"Error processing graph {graph.id}: {e}\")\n            continue",
                      "children": [
                        {
                          "value": "graph_models.append(GraphModel.from_db(graph))",
                          "children": [
                            {
                              "value": "graph_models.append(GraphModel.from_db(graph))",
                              "children": [
                                {
                                  "value": "graph_models.append(GraphModel.from_db(graph))",
                                  "children": [
                                    {
                                      "value": "graph_models.append",
                                      "children": [
                                        {
                                          "value": "graph_models",
                                          "children": []
                                        },
                                        {
                                          "value": "append",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(GraphModel.from_db(graph))",
                                      "children": [
                                        {
                                          "value": "GraphModel.from_db(graph)",
                                          "children": [
                                            {
                                              "value": "GraphModel.from_db",
                                              "children": [
                                                {
                                                  "value": "GraphModel",
                                                  "children": []
                                                },
                                                {
                                                  "value": "from_db",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(graph)",
                                              "children": [
                                                {
                                                  "value": "graph",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "except Exception as e:\n            logger.error(f\"Error processing graph {graph.id}: {e}\")\n            continue",
                          "children": [
                            {
                              "value": "Exception as e",
                              "children": [
                                {
                                  "value": "Exception",
                                  "children": []
                                },
                                {
                                  "value": "e",
                                  "children": [
                                    {
                                      "value": "e",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "logger.error(f\"Error processing graph {graph.id}: {e}\")\n            continue",
                              "children": [
                                {
                                  "value": "logger.error(f\"Error processing graph {graph.id}: {e}\")",
                                  "children": [
                                    {
                                      "value": "logger.error(f\"Error processing graph {graph.id}: {e}\")",
                                      "children": [
                                        {
                                          "value": "logger.error",
                                          "children": [
                                            {
                                              "value": "logger",
                                              "children": []
                                            },
                                            {
                                              "value": "error",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(f\"Error processing graph {graph.id}: {e}\")",
                                          "children": [
                                            {
                                              "value": "f\"Error processing graph {graph.id}: {e}\"",
                                              "children": [
                                                {
                                                  "value": "f\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "Error processing graph",
                                                  "children": []
                                                },
                                                {
                                                  "value": "{graph.id}",
                                                  "children": [
                                                    {
                                                      "value": "graph.id",
                                                      "children": [
                                                        {
                                                          "value": "graph",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "id",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": ":",
                                                  "children": []
                                                },
                                                {
                                                  "value": "{e}",
                                                  "children": [
                                                    {
                                                      "value": "e",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "continue",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "return graph_models",
              "children": [
                {
                  "value": "graph_models",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "async def get_executions(user_id: str) -> list[GraphExecution]:\n    executions = await AgentGraphExecution.prisma().find_many(\n        where={\"userId\": user_id},\n        order={\"createdAt\": \"desc\"},\n    )\n    return [GraphExecution.from_db(execution) for execution in executions]",
      "children": [
        {
          "value": "get_executions",
          "children": []
        },
        {
          "value": "(user_id: str)",
          "children": [
            {
              "value": "user_id: str",
              "children": [
                {
                  "value": "user_id",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "list[GraphExecution]",
          "children": [
            {
              "value": "list[GraphExecution]",
              "children": [
                {
                  "value": "list",
                  "children": []
                },
                {
                  "value": "[GraphExecution]",
                  "children": [
                    {
                      "value": "GraphExecution",
                      "children": [
                        {
                          "value": "GraphExecution",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "executions = await AgentGraphExecution.prisma().find_many(\n        where={\"userId\": user_id},\n        order={\"createdAt\": \"desc\"},\n    )\n    return [GraphExecution.from_db(execution) for execution in executions]",
          "children": [
            {
              "value": "executions = await AgentGraphExecution.prisma().find_many(\n        where={\"userId\": user_id},\n        order={\"createdAt\": \"desc\"},\n    )",
              "children": [
                {
                  "value": "executions = await AgentGraphExecution.prisma().find_many(\n        where={\"userId\": user_id},\n        order={\"createdAt\": \"desc\"},\n    )",
                  "children": [
                    {
                      "value": "executions",
                      "children": []
                    },
                    {
                      "value": "await AgentGraphExecution.prisma().find_many(\n        where={\"userId\": user_id},\n        order={\"createdAt\": \"desc\"},\n    )",
                      "children": [
                        {
                          "value": "AgentGraphExecution.prisma().find_many(\n        where={\"userId\": user_id},\n        order={\"createdAt\": \"desc\"},\n    )",
                          "children": [
                            {
                              "value": "AgentGraphExecution.prisma().find_many",
                              "children": [
                                {
                                  "value": "AgentGraphExecution.prisma()",
                                  "children": [
                                    {
                                      "value": "AgentGraphExecution.prisma",
                                      "children": [
                                        {
                                          "value": "AgentGraphExecution",
                                          "children": []
                                        },
                                        {
                                          "value": "prisma",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "find_many",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(\n        where={\"userId\": user_id},\n        order={\"createdAt\": \"desc\"},\n    )",
                              "children": [
                                {
                                  "value": "where={\"userId\": user_id}",
                                  "children": [
                                    {
                                      "value": "where",
                                      "children": []
                                    },
                                    {
                                      "value": "{\"userId\": user_id}",
                                      "children": [
                                        {
                                          "value": "\"userId\": user_id",
                                          "children": [
                                            {
                                              "value": "\"userId\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "userId",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "user_id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "order={\"createdAt\": \"desc\"}",
                                  "children": [
                                    {
                                      "value": "order",
                                      "children": []
                                    },
                                    {
                                      "value": "{\"createdAt\": \"desc\"}",
                                      "children": [
                                        {
                                          "value": "\"createdAt\": \"desc\"",
                                          "children": [
                                            {
                                              "value": "\"createdAt\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "createdAt",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"desc\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "desc",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "return [GraphExecution.from_db(execution) for execution in executions]",
              "children": [
                {
                  "value": "[GraphExecution.from_db(execution) for execution in executions]",
                  "children": [
                    {
                      "value": "GraphExecution.from_db(execution)",
                      "children": [
                        {
                          "value": "GraphExecution.from_db",
                          "children": [
                            {
                              "value": "GraphExecution",
                              "children": []
                            },
                            {
                              "value": "from_db",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "(execution)",
                          "children": [
                            {
                              "value": "execution",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "for execution in executions",
                      "children": [
                        {
                          "value": "execution",
                          "children": []
                        },
                        {
                          "value": "executions",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "async def get_execution(user_id: str, execution_id: str) -> GraphExecution | None:\n    execution = await AgentGraphExecution.prisma().find_first(\n        where={\"id\": execution_id, \"userId\": user_id}\n    )\n    return GraphExecution.from_db(execution) if execution else None",
      "children": [
        {
          "value": "get_execution",
          "children": []
        },
        {
          "value": "(user_id: str, execution_id: str)",
          "children": [
            {
              "value": "user_id: str",
              "children": [
                {
                  "value": "user_id",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "execution_id: str",
              "children": [
                {
                  "value": "execution_id",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "GraphExecution | None",
          "children": [
            {
              "value": "GraphExecution | None",
              "children": [
                {
                  "value": "GraphExecution",
                  "children": []
                },
                {
                  "value": "None",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "execution = await AgentGraphExecution.prisma().find_first(\n        where={\"id\": execution_id, \"userId\": user_id}\n    )\n    return GraphExecution.from_db(execution) if execution else None",
          "children": [
            {
              "value": "execution = await AgentGraphExecution.prisma().find_first(\n        where={\"id\": execution_id, \"userId\": user_id}\n    )",
              "children": [
                {
                  "value": "execution = await AgentGraphExecution.prisma().find_first(\n        where={\"id\": execution_id, \"userId\": user_id}\n    )",
                  "children": [
                    {
                      "value": "execution",
                      "children": []
                    },
                    {
                      "value": "await AgentGraphExecution.prisma().find_first(\n        where={\"id\": execution_id, \"userId\": user_id}\n    )",
                      "children": [
                        {
                          "value": "AgentGraphExecution.prisma().find_first(\n        where={\"id\": execution_id, \"userId\": user_id}\n    )",
                          "children": [
                            {
                              "value": "AgentGraphExecution.prisma().find_first",
                              "children": [
                                {
                                  "value": "AgentGraphExecution.prisma()",
                                  "children": [
                                    {
                                      "value": "AgentGraphExecution.prisma",
                                      "children": [
                                        {
                                          "value": "AgentGraphExecution",
                                          "children": []
                                        },
                                        {
                                          "value": "prisma",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "find_first",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(\n        where={\"id\": execution_id, \"userId\": user_id}\n    )",
                              "children": [
                                {
                                  "value": "where={\"id\": execution_id, \"userId\": user_id}",
                                  "children": [
                                    {
                                      "value": "where",
                                      "children": []
                                    },
                                    {
                                      "value": "{\"id\": execution_id, \"userId\": user_id}",
                                      "children": [
                                        {
                                          "value": "\"id\": execution_id",
                                          "children": [
                                            {
                                              "value": "\"id\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "id",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "execution_id",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"userId\": user_id",
                                          "children": [
                                            {
                                              "value": "\"userId\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "userId",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "user_id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "return GraphExecution.from_db(execution) if execution else None",
              "children": [
                {
                  "value": "GraphExecution.from_db(execution) if execution else None",
                  "children": [
                    {
                      "value": "GraphExecution.from_db(execution)",
                      "children": [
                        {
                          "value": "GraphExecution.from_db",
                          "children": [
                            {
                              "value": "GraphExecution",
                              "children": []
                            },
                            {
                              "value": "from_db",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "(execution)",
                          "children": [
                            {
                              "value": "execution",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "execution",
                      "children": []
                    },
                    {
                      "value": "None",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "async def get_graph(\n    graph_id: str,\n    version: int | None = None,\n    template: bool = False,\n    user_id: str | None = None,\n    for_export: bool = False,\n) -> GraphModel | None:\n    \"\"\"\n    Retrieves a graph from the DB.\n    Defaults to the version with `is_active` if `version` is not passed,\n    or the latest version with `is_template` if `template=True`.\n\n    Returns `None` if the record is not found.\n    \"\"\"\n    where_clause: AgentGraphWhereInput = {\n        \"id\": graph_id,\n    }\n    if version is not None:\n        where_clause[\"version\"] = version\n    elif not template:\n        where_clause[\"isActive\"] = True\n\n    # TODO: Fix hack workaround to get adding store agents to work\n    if user_id is not None and not template:\n        where_clause[\"userId\"] = user_id\n\n    graph = await AgentGraph.prisma().find_first(\n        where=where_clause,\n        include=AGENT_GRAPH_INCLUDE,\n        order={\"version\": \"desc\"},\n    )\n    return GraphModel.from_db(graph, for_export) if graph else None",
      "children": [
        {
          "value": "get_graph",
          "children": []
        },
        {
          "value": "(\n    graph_id: str,\n    version: int | None = None,\n    template: bool = False,\n    user_id: str | None = None,\n    for_export: bool = False,\n)",
          "children": [
            {
              "value": "graph_id: str",
              "children": [
                {
                  "value": "graph_id",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "version: int | None = None",
              "children": [
                {
                  "value": "version",
                  "children": []
                },
                {
                  "value": "int | None",
                  "children": [
                    {
                      "value": "int | None",
                      "children": [
                        {
                          "value": "int",
                          "children": []
                        },
                        {
                          "value": "None",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "None",
                  "children": []
                }
              ]
            },
            {
              "value": "template: bool = False",
              "children": [
                {
                  "value": "template",
                  "children": []
                },
                {
                  "value": "bool",
                  "children": [
                    {
                      "value": "bool",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "False",
                  "children": []
                }
              ]
            },
            {
              "value": "user_id: str | None = None",
              "children": [
                {
                  "value": "user_id",
                  "children": []
                },
                {
                  "value": "str | None",
                  "children": [
                    {
                      "value": "str | None",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        },
                        {
                          "value": "None",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "None",
                  "children": []
                }
              ]
            },
            {
              "value": "for_export: bool = False",
              "children": [
                {
                  "value": "for_export",
                  "children": []
                },
                {
                  "value": "bool",
                  "children": [
                    {
                      "value": "bool",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "False",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "GraphModel | None",
          "children": [
            {
              "value": "GraphModel | None",
              "children": [
                {
                  "value": "GraphModel",
                  "children": []
                },
                {
                  "value": "None",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "\"\"\"\n    Retrieves a graph from the DB.\n    Defaults to the version with `is_active` if `version` is not passed,\n    or the latest version with `is_template` if `template=True`.\n\n    Returns `None` if the record is not found.\n    \"\"\"\n    where_clause: AgentGraphWhereInput = {\n        \"id\": graph_id,\n    }\n    if version is not None:\n        where_clause[\"version\"] = version\n    elif not template:\n        where_clause[\"isActive\"] = True\n\n    # TODO: Fix hack workaround to get adding store agents to work\n    if user_id is not None and not template:\n        where_clause[\"userId\"] = user_id\n\n    graph = await AgentGraph.prisma().find_first(\n        where=where_clause,\n        include=AGENT_GRAPH_INCLUDE,\n        order={\"version\": \"desc\"},\n    )\n    return GraphModel.from_db(graph, for_export) if graph else None",
          "children": [
            {
              "value": "\"\"\"\n    Retrieves a graph from the DB.\n    Defaults to the version with `is_active` if `version` is not passed,\n    or the latest version with `is_template` if `template=True`.\n\n    Returns `None` if the record is not found.\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    Retrieves a graph from the DB.\n    Defaults to the version with `is_active` if `version` is not passed,\n    or the latest version with `is_template` if `template=True`.\n\n    Returns `None` if the record is not found.\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Retrieves a graph from the DB.\n    Defaults to the version with `is_active` if `version` is not passed,\n    or the latest version with `is_template` if `template=True`.\n\n    Returns `None` if the record is not found.",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "where_clause: AgentGraphWhereInput = {\n        \"id\": graph_id,\n    }",
              "children": [
                {
                  "value": "where_clause: AgentGraphWhereInput = {\n        \"id\": graph_id,\n    }",
                  "children": [
                    {
                      "value": "where_clause",
                      "children": []
                    },
                    {
                      "value": "AgentGraphWhereInput",
                      "children": [
                        {
                          "value": "AgentGraphWhereInput",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "{\n        \"id\": graph_id,\n    }",
                      "children": [
                        {
                          "value": "\"id\": graph_id",
                          "children": [
                            {
                              "value": "\"id\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "id",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "graph_id",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "if version is not None:\n        where_clause[\"version\"] = version\n    elif not template:\n        where_clause[\"isActive\"] = True",
              "children": [
                {
                  "value": "version is not None",
                  "children": [
                    {
                      "value": "version",
                      "children": []
                    },
                    {
                      "value": "None",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "where_clause[\"version\"] = version",
                  "children": [
                    {
                      "value": "where_clause[\"version\"] = version",
                      "children": [
                        {
                          "value": "where_clause[\"version\"] = version",
                          "children": [
                            {
                              "value": "where_clause[\"version\"]",
                              "children": [
                                {
                                  "value": "where_clause",
                                  "children": []
                                },
                                {
                                  "value": "\"version\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "version",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "version",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "elif not template:\n        where_clause[\"isActive\"] = True",
                  "children": [
                    {
                      "value": "not template",
                      "children": [
                        {
                          "value": "template",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "where_clause[\"isActive\"] = True",
                      "children": [
                        {
                          "value": "where_clause[\"isActive\"] = True",
                          "children": [
                            {
                              "value": "where_clause[\"isActive\"] = True",
                              "children": [
                                {
                                  "value": "where_clause[\"isActive\"]",
                                  "children": [
                                    {
                                      "value": "where_clause",
                                      "children": []
                                    },
                                    {
                                      "value": "\"isActive\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "isActive",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "True",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "# TODO: Fix hack workaround to get adding store agents to work",
              "children": []
            },
            {
              "value": "if user_id is not None and not template:\n        where_clause[\"userId\"] = user_id",
              "children": [
                {
                  "value": "user_id is not None and not template",
                  "children": [
                    {
                      "value": "user_id is not None",
                      "children": [
                        {
                          "value": "user_id",
                          "children": []
                        },
                        {
                          "value": "None",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "not template",
                      "children": [
                        {
                          "value": "template",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "where_clause[\"userId\"] = user_id",
                  "children": [
                    {
                      "value": "where_clause[\"userId\"] = user_id",
                      "children": [
                        {
                          "value": "where_clause[\"userId\"] = user_id",
                          "children": [
                            {
                              "value": "where_clause[\"userId\"]",
                              "children": [
                                {
                                  "value": "where_clause",
                                  "children": []
                                },
                                {
                                  "value": "\"userId\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "userId",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "user_id",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "graph = await AgentGraph.prisma().find_first(\n        where=where_clause,\n        include=AGENT_GRAPH_INCLUDE,\n        order={\"version\": \"desc\"},\n    )",
              "children": [
                {
                  "value": "graph = await AgentGraph.prisma().find_first(\n        where=where_clause,\n        include=AGENT_GRAPH_INCLUDE,\n        order={\"version\": \"desc\"},\n    )",
                  "children": [
                    {
                      "value": "graph",
                      "children": []
                    },
                    {
                      "value": "await AgentGraph.prisma().find_first(\n        where=where_clause,\n        include=AGENT_GRAPH_INCLUDE,\n        order={\"version\": \"desc\"},\n    )",
                      "children": [
                        {
                          "value": "AgentGraph.prisma().find_first(\n        where=where_clause,\n        include=AGENT_GRAPH_INCLUDE,\n        order={\"version\": \"desc\"},\n    )",
                          "children": [
                            {
                              "value": "AgentGraph.prisma().find_first",
                              "children": [
                                {
                                  "value": "AgentGraph.prisma()",
                                  "children": [
                                    {
                                      "value": "AgentGraph.prisma",
                                      "children": [
                                        {
                                          "value": "AgentGraph",
                                          "children": []
                                        },
                                        {
                                          "value": "prisma",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "find_first",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(\n        where=where_clause,\n        include=AGENT_GRAPH_INCLUDE,\n        order={\"version\": \"desc\"},\n    )",
                              "children": [
                                {
                                  "value": "where=where_clause",
                                  "children": [
                                    {
                                      "value": "where",
                                      "children": []
                                    },
                                    {
                                      "value": "where_clause",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "include=AGENT_GRAPH_INCLUDE",
                                  "children": [
                                    {
                                      "value": "include",
                                      "children": []
                                    },
                                    {
                                      "value": "AGENT_GRAPH_INCLUDE",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "order={\"version\": \"desc\"}",
                                  "children": [
                                    {
                                      "value": "order",
                                      "children": []
                                    },
                                    {
                                      "value": "{\"version\": \"desc\"}",
                                      "children": [
                                        {
                                          "value": "\"version\": \"desc\"",
                                          "children": [
                                            {
                                              "value": "\"version\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "version",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"desc\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "desc",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "return GraphModel.from_db(graph, for_export) if graph else None",
              "children": [
                {
                  "value": "GraphModel.from_db(graph, for_export) if graph else None",
                  "children": [
                    {
                      "value": "GraphModel.from_db(graph, for_export)",
                      "children": [
                        {
                          "value": "GraphModel.from_db",
                          "children": [
                            {
                              "value": "GraphModel",
                              "children": []
                            },
                            {
                              "value": "from_db",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "(graph, for_export)",
                          "children": [
                            {
                              "value": "graph",
                              "children": []
                            },
                            {
                              "value": "for_export",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "graph",
                      "children": []
                    },
                    {
                      "value": "None",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "async def set_graph_active_version(graph_id: str, version: int, user_id: str) -> None:\n    # Activate the requested version if it exists and is owned by the user.\n    updated_count = await AgentGraph.prisma().update_many(\n        data={\"isActive\": True},\n        where={\n            \"id\": graph_id,\n            \"version\": version,\n            \"userId\": user_id,\n        },\n    )\n    if updated_count == 0:\n        raise Exception(f\"Graph #{graph_id} v{version} not found or not owned by user\")\n\n    # Deactivate all other versions.\n    await AgentGraph.prisma().update_many(\n        data={\"isActive\": False},\n        where={\n            \"id\": graph_id,\n            \"version\": {\"not\": version},\n            \"userId\": user_id,\n            \"isActive\": True,\n        },\n    )",
      "children": [
        {
          "value": "set_graph_active_version",
          "children": []
        },
        {
          "value": "(graph_id: str, version: int, user_id: str)",
          "children": [
            {
              "value": "graph_id: str",
              "children": [
                {
                  "value": "graph_id",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "version: int",
              "children": [
                {
                  "value": "version",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "user_id: str",
              "children": [
                {
                  "value": "user_id",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "None",
          "children": [
            {
              "value": "None",
              "children": []
            }
          ]
        },
        {
          "value": "# Activate the requested version if it exists and is owned by the user.",
          "children": []
        },
        {
          "value": "updated_count = await AgentGraph.prisma().update_many(\n        data={\"isActive\": True},\n        where={\n            \"id\": graph_id,\n            \"version\": version,\n            \"userId\": user_id,\n        },\n    )\n    if updated_count == 0:\n        raise Exception(f\"Graph #{graph_id} v{version} not found or not owned by user\")\n\n    # Deactivate all other versions.\n    await AgentGraph.prisma().update_many(\n        data={\"isActive\": False},\n        where={\n            \"id\": graph_id,\n            \"version\": {\"not\": version},\n            \"userId\": user_id,\n            \"isActive\": True,\n        },\n    )",
          "children": [
            {
              "value": "updated_count = await AgentGraph.prisma().update_many(\n        data={\"isActive\": True},\n        where={\n            \"id\": graph_id,\n            \"version\": version,\n            \"userId\": user_id,\n        },\n    )",
              "children": [
                {
                  "value": "updated_count = await AgentGraph.prisma().update_many(\n        data={\"isActive\": True},\n        where={\n            \"id\": graph_id,\n            \"version\": version,\n            \"userId\": user_id,\n        },\n    )",
                  "children": [
                    {
                      "value": "updated_count",
                      "children": []
                    },
                    {
                      "value": "await AgentGraph.prisma().update_many(\n        data={\"isActive\": True},\n        where={\n            \"id\": graph_id,\n            \"version\": version,\n            \"userId\": user_id,\n        },\n    )",
                      "children": [
                        {
                          "value": "AgentGraph.prisma().update_many(\n        data={\"isActive\": True},\n        where={\n            \"id\": graph_id,\n            \"version\": version,\n            \"userId\": user_id,\n        },\n    )",
                          "children": [
                            {
                              "value": "AgentGraph.prisma().update_many",
                              "children": [
                                {
                                  "value": "AgentGraph.prisma()",
                                  "children": [
                                    {
                                      "value": "AgentGraph.prisma",
                                      "children": [
                                        {
                                          "value": "AgentGraph",
                                          "children": []
                                        },
                                        {
                                          "value": "prisma",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "update_many",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(\n        data={\"isActive\": True},\n        where={\n            \"id\": graph_id,\n            \"version\": version,\n            \"userId\": user_id,\n        },\n    )",
                              "children": [
                                {
                                  "value": "data={\"isActive\": True}",
                                  "children": [
                                    {
                                      "value": "data",
                                      "children": []
                                    },
                                    {
                                      "value": "{\"isActive\": True}",
                                      "children": [
                                        {
                                          "value": "\"isActive\": True",
                                          "children": [
                                            {
                                              "value": "\"isActive\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "isActive",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "True",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "where={\n            \"id\": graph_id,\n            \"version\": version,\n            \"userId\": user_id,\n        }",
                                  "children": [
                                    {
                                      "value": "where",
                                      "children": []
                                    },
                                    {
                                      "value": "{\n            \"id\": graph_id,\n            \"version\": version,\n            \"userId\": user_id,\n        }",
                                      "children": [
                                        {
                                          "value": "\"id\": graph_id",
                                          "children": [
                                            {
                                              "value": "\"id\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "id",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "graph_id",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"version\": version",
                                          "children": [
                                            {
                                              "value": "\"version\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "version",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "version",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"userId\": user_id",
                                          "children": [
                                            {
                                              "value": "\"userId\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "userId",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "user_id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "if updated_count == 0:\n        raise Exception(f\"Graph #{graph_id} v{version} not found or not owned by user\")",
              "children": [
                {
                  "value": "updated_count == 0",
                  "children": [
                    {
                      "value": "updated_count",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "raise Exception(f\"Graph #{graph_id} v{version} not found or not owned by user\")",
                  "children": [
                    {
                      "value": "raise Exception(f\"Graph #{graph_id} v{version} not found or not owned by user\")",
                      "children": [
                        {
                          "value": "Exception(f\"Graph #{graph_id} v{version} not found or not owned by user\")",
                          "children": [
                            {
                              "value": "Exception",
                              "children": []
                            },
                            {
                              "value": "(f\"Graph #{graph_id} v{version} not found or not owned by user\")",
                              "children": [
                                {
                                  "value": "f\"Graph #{graph_id} v{version} not found or not owned by user\"",
                                  "children": [
                                    {
                                      "value": "f\"",
                                      "children": []
                                    },
                                    {
                                      "value": "Graph #",
                                      "children": []
                                    },
                                    {
                                      "value": "{graph_id}",
                                      "children": [
                                        {
                                          "value": "graph_id",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "v",
                                      "children": []
                                    },
                                    {
                                      "value": "{version}",
                                      "children": [
                                        {
                                          "value": "version",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "not found or not owned by user",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "# Deactivate all other versions.",
              "children": []
            },
            {
              "value": "await AgentGraph.prisma().update_many(\n        data={\"isActive\": False},\n        where={\n            \"id\": graph_id,\n            \"version\": {\"not\": version},\n            \"userId\": user_id,\n            \"isActive\": True,\n        },\n    )",
              "children": [
                {
                  "value": "await AgentGraph.prisma().update_many(\n        data={\"isActive\": False},\n        where={\n            \"id\": graph_id,\n            \"version\": {\"not\": version},\n            \"userId\": user_id,\n            \"isActive\": True,\n        },\n    )",
                  "children": [
                    {
                      "value": "AgentGraph.prisma().update_many(\n        data={\"isActive\": False},\n        where={\n            \"id\": graph_id,\n            \"version\": {\"not\": version},\n            \"userId\": user_id,\n            \"isActive\": True,\n        },\n    )",
                      "children": [
                        {
                          "value": "AgentGraph.prisma().update_many",
                          "children": [
                            {
                              "value": "AgentGraph.prisma()",
                              "children": [
                                {
                                  "value": "AgentGraph.prisma",
                                  "children": [
                                    {
                                      "value": "AgentGraph",
                                      "children": []
                                    },
                                    {
                                      "value": "prisma",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "update_many",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "(\n        data={\"isActive\": False},\n        where={\n            \"id\": graph_id,\n            \"version\": {\"not\": version},\n            \"userId\": user_id,\n            \"isActive\": True,\n        },\n    )",
                          "children": [
                            {
                              "value": "data={\"isActive\": False}",
                              "children": [
                                {
                                  "value": "data",
                                  "children": []
                                },
                                {
                                  "value": "{\"isActive\": False}",
                                  "children": [
                                    {
                                      "value": "\"isActive\": False",
                                      "children": [
                                        {
                                          "value": "\"isActive\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "isActive",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "False",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "where={\n            \"id\": graph_id,\n            \"version\": {\"not\": version},\n            \"userId\": user_id,\n            \"isActive\": True,\n        }",
                              "children": [
                                {
                                  "value": "where",
                                  "children": []
                                },
                                {
                                  "value": "{\n            \"id\": graph_id,\n            \"version\": {\"not\": version},\n            \"userId\": user_id,\n            \"isActive\": True,\n        }",
                                  "children": [
                                    {
                                      "value": "\"id\": graph_id",
                                      "children": [
                                        {
                                          "value": "\"id\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "id",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "graph_id",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "\"version\": {\"not\": version}",
                                      "children": [
                                        {
                                          "value": "\"version\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "version",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "{\"not\": version}",
                                          "children": [
                                            {
                                              "value": "\"not\": version",
                                              "children": [
                                                {
                                                  "value": "\"not\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "not",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "version",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "\"userId\": user_id",
                                      "children": [
                                        {
                                          "value": "\"userId\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "userId",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "user_id",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "\"isActive\": True",
                                      "children": [
                                        {
                                          "value": "\"isActive\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "isActive",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "True",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "async def get_graph_all_versions(graph_id: str, user_id: str) -> list[GraphModel]:\n    graph_versions = await AgentGraph.prisma().find_many(\n        where={\"id\": graph_id, \"userId\": user_id},\n        order={\"version\": \"desc\"},\n        include=AGENT_GRAPH_INCLUDE,\n    )\n\n    if not graph_versions:\n        return []\n\n    return [GraphModel.from_db(graph) for graph in graph_versions]",
      "children": [
        {
          "value": "get_graph_all_versions",
          "children": []
        },
        {
          "value": "(graph_id: str, user_id: str)",
          "children": [
            {
              "value": "graph_id: str",
              "children": [
                {
                  "value": "graph_id",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "user_id: str",
              "children": [
                {
                  "value": "user_id",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "list[GraphModel]",
          "children": [
            {
              "value": "list[GraphModel]",
              "children": [
                {
                  "value": "list",
                  "children": []
                },
                {
                  "value": "[GraphModel]",
                  "children": [
                    {
                      "value": "GraphModel",
                      "children": [
                        {
                          "value": "GraphModel",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "graph_versions = await AgentGraph.prisma().find_many(\n        where={\"id\": graph_id, \"userId\": user_id},\n        order={\"version\": \"desc\"},\n        include=AGENT_GRAPH_INCLUDE,\n    )\n\n    if not graph_versions:\n        return []\n\n    return [GraphModel.from_db(graph) for graph in graph_versions]",
          "children": [
            {
              "value": "graph_versions = await AgentGraph.prisma().find_many(\n        where={\"id\": graph_id, \"userId\": user_id},\n        order={\"version\": \"desc\"},\n        include=AGENT_GRAPH_INCLUDE,\n    )",
              "children": [
                {
                  "value": "graph_versions = await AgentGraph.prisma().find_many(\n        where={\"id\": graph_id, \"userId\": user_id},\n        order={\"version\": \"desc\"},\n        include=AGENT_GRAPH_INCLUDE,\n    )",
                  "children": [
                    {
                      "value": "graph_versions",
                      "children": []
                    },
                    {
                      "value": "await AgentGraph.prisma().find_many(\n        where={\"id\": graph_id, \"userId\": user_id},\n        order={\"version\": \"desc\"},\n        include=AGENT_GRAPH_INCLUDE,\n    )",
                      "children": [
                        {
                          "value": "AgentGraph.prisma().find_many(\n        where={\"id\": graph_id, \"userId\": user_id},\n        order={\"version\": \"desc\"},\n        include=AGENT_GRAPH_INCLUDE,\n    )",
                          "children": [
                            {
                              "value": "AgentGraph.prisma().find_many",
                              "children": [
                                {
                                  "value": "AgentGraph.prisma()",
                                  "children": [
                                    {
                                      "value": "AgentGraph.prisma",
                                      "children": [
                                        {
                                          "value": "AgentGraph",
                                          "children": []
                                        },
                                        {
                                          "value": "prisma",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "find_many",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(\n        where={\"id\": graph_id, \"userId\": user_id},\n        order={\"version\": \"desc\"},\n        include=AGENT_GRAPH_INCLUDE,\n    )",
                              "children": [
                                {
                                  "value": "where={\"id\": graph_id, \"userId\": user_id}",
                                  "children": [
                                    {
                                      "value": "where",
                                      "children": []
                                    },
                                    {
                                      "value": "{\"id\": graph_id, \"userId\": user_id}",
                                      "children": [
                                        {
                                          "value": "\"id\": graph_id",
                                          "children": [
                                            {
                                              "value": "\"id\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "id",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "graph_id",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"userId\": user_id",
                                          "children": [
                                            {
                                              "value": "\"userId\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "userId",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "user_id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "order={\"version\": \"desc\"}",
                                  "children": [
                                    {
                                      "value": "order",
                                      "children": []
                                    },
                                    {
                                      "value": "{\"version\": \"desc\"}",
                                      "children": [
                                        {
                                          "value": "\"version\": \"desc\"",
                                          "children": [
                                            {
                                              "value": "\"version\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "version",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"desc\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "desc",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "include=AGENT_GRAPH_INCLUDE",
                                  "children": [
                                    {
                                      "value": "include",
                                      "children": []
                                    },
                                    {
                                      "value": "AGENT_GRAPH_INCLUDE",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "if not graph_versions:\n        return []",
              "children": [
                {
                  "value": "not graph_versions",
                  "children": [
                    {
                      "value": "graph_versions",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "return []",
                  "children": [
                    {
                      "value": "return []",
                      "children": [
                        {
                          "value": "[]",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "return [GraphModel.from_db(graph) for graph in graph_versions]",
              "children": [
                {
                  "value": "[GraphModel.from_db(graph) for graph in graph_versions]",
                  "children": [
                    {
                      "value": "GraphModel.from_db(graph)",
                      "children": [
                        {
                          "value": "GraphModel.from_db",
                          "children": [
                            {
                              "value": "GraphModel",
                              "children": []
                            },
                            {
                              "value": "from_db",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "(graph)",
                          "children": [
                            {
                              "value": "graph",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "for graph in graph_versions",
                      "children": [
                        {
                          "value": "graph",
                          "children": []
                        },
                        {
                          "value": "graph_versions",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "async def delete_graph(graph_id: str, user_id: str) -> int:\n    entries_count = await AgentGraph.prisma().delete_many(\n        where={\"id\": graph_id, \"userId\": user_id}\n    )\n    if entries_count:\n        logger.info(f\"Deleted {entries_count} graph entries for Graph #{graph_id}\")\n    return entries_count",
      "children": [
        {
          "value": "delete_graph",
          "children": []
        },
        {
          "value": "(graph_id: str, user_id: str)",
          "children": [
            {
              "value": "graph_id: str",
              "children": [
                {
                  "value": "graph_id",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "user_id: str",
              "children": [
                {
                  "value": "user_id",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "int",
          "children": [
            {
              "value": "int",
              "children": []
            }
          ]
        },
        {
          "value": "entries_count = await AgentGraph.prisma().delete_many(\n        where={\"id\": graph_id, \"userId\": user_id}\n    )\n    if entries_count:\n        logger.info(f\"Deleted {entries_count} graph entries for Graph #{graph_id}\")\n    return entries_count",
          "children": [
            {
              "value": "entries_count = await AgentGraph.prisma().delete_many(\n        where={\"id\": graph_id, \"userId\": user_id}\n    )",
              "children": [
                {
                  "value": "entries_count = await AgentGraph.prisma().delete_many(\n        where={\"id\": graph_id, \"userId\": user_id}\n    )",
                  "children": [
                    {
                      "value": "entries_count",
                      "children": []
                    },
                    {
                      "value": "await AgentGraph.prisma().delete_many(\n        where={\"id\": graph_id, \"userId\": user_id}\n    )",
                      "children": [
                        {
                          "value": "AgentGraph.prisma().delete_many(\n        where={\"id\": graph_id, \"userId\": user_id}\n    )",
                          "children": [
                            {
                              "value": "AgentGraph.prisma().delete_many",
                              "children": [
                                {
                                  "value": "AgentGraph.prisma()",
                                  "children": [
                                    {
                                      "value": "AgentGraph.prisma",
                                      "children": [
                                        {
                                          "value": "AgentGraph",
                                          "children": []
                                        },
                                        {
                                          "value": "prisma",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "delete_many",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(\n        where={\"id\": graph_id, \"userId\": user_id}\n    )",
                              "children": [
                                {
                                  "value": "where={\"id\": graph_id, \"userId\": user_id}",
                                  "children": [
                                    {
                                      "value": "where",
                                      "children": []
                                    },
                                    {
                                      "value": "{\"id\": graph_id, \"userId\": user_id}",
                                      "children": [
                                        {
                                          "value": "\"id\": graph_id",
                                          "children": [
                                            {
                                              "value": "\"id\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "id",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "graph_id",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"userId\": user_id",
                                          "children": [
                                            {
                                              "value": "\"userId\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "userId",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "user_id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "if entries_count:\n        logger.info(f\"Deleted {entries_count} graph entries for Graph #{graph_id}\")",
              "children": [
                {
                  "value": "entries_count",
                  "children": []
                },
                {
                  "value": "logger.info(f\"Deleted {entries_count} graph entries for Graph #{graph_id}\")",
                  "children": [
                    {
                      "value": "logger.info(f\"Deleted {entries_count} graph entries for Graph #{graph_id}\")",
                      "children": [
                        {
                          "value": "logger.info(f\"Deleted {entries_count} graph entries for Graph #{graph_id}\")",
                          "children": [
                            {
                              "value": "logger.info",
                              "children": [
                                {
                                  "value": "logger",
                                  "children": []
                                },
                                {
                                  "value": "info",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(f\"Deleted {entries_count} graph entries for Graph #{graph_id}\")",
                              "children": [
                                {
                                  "value": "f\"Deleted {entries_count} graph entries for Graph #{graph_id}\"",
                                  "children": [
                                    {
                                      "value": "f\"",
                                      "children": []
                                    },
                                    {
                                      "value": "Deleted",
                                      "children": []
                                    },
                                    {
                                      "value": "{entries_count}",
                                      "children": [
                                        {
                                          "value": "entries_count",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "graph entries for Graph #",
                                      "children": []
                                    },
                                    {
                                      "value": "{graph_id}",
                                      "children": [
                                        {
                                          "value": "graph_id",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "return entries_count",
              "children": [
                {
                  "value": "entries_count",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "async def create_graph(graph: Graph, user_id: str) -> GraphModel:\n    async with transaction() as tx:\n        await __create_graph(tx, graph, user_id)\n\n    if created_graph := await get_graph(\n        graph.id, graph.version, graph.is_template, user_id=user_id\n    ):\n        return created_graph\n\n    raise ValueError(f\"Created graph {graph.id} v{graph.version} is not in DB\")",
      "children": [
        {
          "value": "create_graph",
          "children": []
        },
        {
          "value": "(graph: Graph, user_id: str)",
          "children": [
            {
              "value": "graph: Graph",
              "children": [
                {
                  "value": "graph",
                  "children": []
                },
                {
                  "value": "Graph",
                  "children": [
                    {
                      "value": "Graph",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "user_id: str",
              "children": [
                {
                  "value": "user_id",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "GraphModel",
          "children": [
            {
              "value": "GraphModel",
              "children": []
            }
          ]
        },
        {
          "value": "async with transaction() as tx:\n        await __create_graph(tx, graph, user_id)\n\n    if created_graph := await get_graph(\n        graph.id, graph.version, graph.is_template, user_id=user_id\n    ):\n        return created_graph\n\n    raise ValueError(f\"Created graph {graph.id} v{graph.version} is not in DB\")",
          "children": [
            {
              "value": "async with transaction() as tx:\n        await __create_graph(tx, graph, user_id)",
              "children": [
                {
                  "value": "transaction() as tx",
                  "children": [
                    {
                      "value": "transaction() as tx",
                      "children": [
                        {
                          "value": "transaction() as tx",
                          "children": [
                            {
                              "value": "transaction()",
                              "children": [
                                {
                                  "value": "transaction",
                                  "children": []
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "tx",
                              "children": [
                                {
                                  "value": "tx",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "await __create_graph(tx, graph, user_id)",
                  "children": [
                    {
                      "value": "await __create_graph(tx, graph, user_id)",
                      "children": [
                        {
                          "value": "await __create_graph(tx, graph, user_id)",
                          "children": [
                            {
                              "value": "__create_graph(tx, graph, user_id)",
                              "children": [
                                {
                                  "value": "__create_graph",
                                  "children": []
                                },
                                {
                                  "value": "(tx, graph, user_id)",
                                  "children": [
                                    {
                                      "value": "tx",
                                      "children": []
                                    },
                                    {
                                      "value": "graph",
                                      "children": []
                                    },
                                    {
                                      "value": "user_id",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "if created_graph := await get_graph(\n        graph.id, graph.version, graph.is_template, user_id=user_id\n    ):\n        return created_graph",
              "children": [
                {
                  "value": "created_graph := await get_graph(\n        graph.id, graph.version, graph.is_template, user_id=user_id\n    )",
                  "children": [
                    {
                      "value": "created_graph",
                      "children": []
                    },
                    {
                      "value": "await get_graph(\n        graph.id, graph.version, graph.is_template, user_id=user_id\n    )",
                      "children": [
                        {
                          "value": "get_graph(\n        graph.id, graph.version, graph.is_template, user_id=user_id\n    )",
                          "children": [
                            {
                              "value": "get_graph",
                              "children": []
                            },
                            {
                              "value": "(\n        graph.id, graph.version, graph.is_template, user_id=user_id\n    )",
                              "children": [
                                {
                                  "value": "graph.id",
                                  "children": [
                                    {
                                      "value": "graph",
                                      "children": []
                                    },
                                    {
                                      "value": "id",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "graph.version",
                                  "children": [
                                    {
                                      "value": "graph",
                                      "children": []
                                    },
                                    {
                                      "value": "version",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "graph.is_template",
                                  "children": [
                                    {
                                      "value": "graph",
                                      "children": []
                                    },
                                    {
                                      "value": "is_template",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "user_id=user_id",
                                  "children": [
                                    {
                                      "value": "user_id",
                                      "children": []
                                    },
                                    {
                                      "value": "user_id",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "return created_graph",
                  "children": [
                    {
                      "value": "return created_graph",
                      "children": [
                        {
                          "value": "created_graph",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "raise ValueError(f\"Created graph {graph.id} v{graph.version} is not in DB\")",
              "children": [
                {
                  "value": "ValueError(f\"Created graph {graph.id} v{graph.version} is not in DB\")",
                  "children": [
                    {
                      "value": "ValueError",
                      "children": []
                    },
                    {
                      "value": "(f\"Created graph {graph.id} v{graph.version} is not in DB\")",
                      "children": [
                        {
                          "value": "f\"Created graph {graph.id} v{graph.version} is not in DB\"",
                          "children": [
                            {
                              "value": "f\"",
                              "children": []
                            },
                            {
                              "value": "Created graph",
                              "children": []
                            },
                            {
                              "value": "{graph.id}",
                              "children": [
                                {
                                  "value": "graph.id",
                                  "children": [
                                    {
                                      "value": "graph",
                                      "children": []
                                    },
                                    {
                                      "value": "id",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "v",
                              "children": []
                            },
                            {
                              "value": "{graph.version}",
                              "children": [
                                {
                                  "value": "graph.version",
                                  "children": [
                                    {
                                      "value": "graph",
                                      "children": []
                                    },
                                    {
                                      "value": "version",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "is not in DB",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "async def __create_graph(tx, graph: Graph, user_id: str):\n    await AgentGraph.prisma(tx).create(\n        data={\n            \"id\": graph.id,\n            \"version\": graph.version,\n            \"name\": graph.name,\n            \"description\": graph.description,\n            \"isTemplate\": graph.is_template,\n            \"isActive\": graph.is_active,\n            \"userId\": user_id,\n        }\n    )\n\n    await asyncio.gather(\n        *[\n            AgentNode.prisma(tx).create(\n                {\n                    \"id\": node.id,\n                    \"agentBlockId\": node.block_id,\n                    \"agentGraphId\": graph.id,\n                    \"agentGraphVersion\": graph.version,\n                    \"constantInput\": json.dumps(node.input_default),\n                    \"metadata\": json.dumps(node.metadata),\n                }\n            )\n            for node in graph.nodes\n        ]\n    )\n\n    await asyncio.gather(\n        *[\n            AgentNodeLink.prisma(tx).create(\n                {\n                    \"id\": str(uuid.uuid4()),\n                    \"sourceName\": link.source_name,\n                    \"sinkName\": link.sink_name,\n                    \"agentNodeSourceId\": link.source_id,\n                    \"agentNodeSinkId\": link.sink_id,\n                    \"isStatic\": link.is_static,\n                }\n            )\n            for link in graph.links\n        ]\n    )",
      "children": [
        {
          "value": "__create_graph",
          "children": []
        },
        {
          "value": "(tx, graph: Graph, user_id: str)",
          "children": [
            {
              "value": "tx",
              "children": []
            },
            {
              "value": "graph: Graph",
              "children": [
                {
                  "value": "graph",
                  "children": []
                },
                {
                  "value": "Graph",
                  "children": [
                    {
                      "value": "Graph",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "user_id: str",
              "children": [
                {
                  "value": "user_id",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "await AgentGraph.prisma(tx).create(\n        data={\n            \"id\": graph.id,\n            \"version\": graph.version,\n            \"name\": graph.name,\n            \"description\": graph.description,\n            \"isTemplate\": graph.is_template,\n            \"isActive\": graph.is_active,\n            \"userId\": user_id,\n        }\n    )\n\n    await asyncio.gather(\n        *[\n            AgentNode.prisma(tx).create(\n                {\n                    \"id\": node.id,\n                    \"agentBlockId\": node.block_id,\n                    \"agentGraphId\": graph.id,\n                    \"agentGraphVersion\": graph.version,\n                    \"constantInput\": json.dumps(node.input_default),\n                    \"metadata\": json.dumps(node.metadata),\n                }\n            )\n            for node in graph.nodes\n        ]\n    )\n\n    await asyncio.gather(\n        *[\n            AgentNodeLink.prisma(tx).create(\n                {\n                    \"id\": str(uuid.uuid4()),\n                    \"sourceName\": link.source_name,\n                    \"sinkName\": link.sink_name,\n                    \"agentNodeSourceId\": link.source_id,\n                    \"agentNodeSinkId\": link.sink_id,\n                    \"isStatic\": link.is_static,\n                }\n            )\n            for link in graph.links\n        ]\n    )",
          "children": [
            {
              "value": "await AgentGraph.prisma(tx).create(\n        data={\n            \"id\": graph.id,\n            \"version\": graph.version,\n            \"name\": graph.name,\n            \"description\": graph.description,\n            \"isTemplate\": graph.is_template,\n            \"isActive\": graph.is_active,\n            \"userId\": user_id,\n        }\n    )",
              "children": [
                {
                  "value": "await AgentGraph.prisma(tx).create(\n        data={\n            \"id\": graph.id,\n            \"version\": graph.version,\n            \"name\": graph.name,\n            \"description\": graph.description,\n            \"isTemplate\": graph.is_template,\n            \"isActive\": graph.is_active,\n            \"userId\": user_id,\n        }\n    )",
                  "children": [
                    {
                      "value": "AgentGraph.prisma(tx).create(\n        data={\n            \"id\": graph.id,\n            \"version\": graph.version,\n            \"name\": graph.name,\n            \"description\": graph.description,\n            \"isTemplate\": graph.is_template,\n            \"isActive\": graph.is_active,\n            \"userId\": user_id,\n        }\n    )",
                      "children": [
                        {
                          "value": "AgentGraph.prisma(tx).create",
                          "children": [
                            {
                              "value": "AgentGraph.prisma(tx)",
                              "children": [
                                {
                                  "value": "AgentGraph.prisma",
                                  "children": [
                                    {
                                      "value": "AgentGraph",
                                      "children": []
                                    },
                                    {
                                      "value": "prisma",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(tx)",
                                  "children": [
                                    {
                                      "value": "tx",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "create",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "(\n        data={\n            \"id\": graph.id,\n            \"version\": graph.version,\n            \"name\": graph.name,\n            \"description\": graph.description,\n            \"isTemplate\": graph.is_template,\n            \"isActive\": graph.is_active,\n            \"userId\": user_id,\n        }\n    )",
                          "children": [
                            {
                              "value": "data={\n            \"id\": graph.id,\n            \"version\": graph.version,\n            \"name\": graph.name,\n            \"description\": graph.description,\n            \"isTemplate\": graph.is_template,\n            \"isActive\": graph.is_active,\n            \"userId\": user_id,\n        }",
                              "children": [
                                {
                                  "value": "data",
                                  "children": []
                                },
                                {
                                  "value": "{\n            \"id\": graph.id,\n            \"version\": graph.version,\n            \"name\": graph.name,\n            \"description\": graph.description,\n            \"isTemplate\": graph.is_template,\n            \"isActive\": graph.is_active,\n            \"userId\": user_id,\n        }",
                                  "children": [
                                    {
                                      "value": "\"id\": graph.id",
                                      "children": [
                                        {
                                          "value": "\"id\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "id",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "graph.id",
                                          "children": [
                                            {
                                              "value": "graph",
                                              "children": []
                                            },
                                            {
                                              "value": "id",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "\"version\": graph.version",
                                      "children": [
                                        {
                                          "value": "\"version\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "version",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "graph.version",
                                          "children": [
                                            {
                                              "value": "graph",
                                              "children": []
                                            },
                                            {
                                              "value": "version",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "\"name\": graph.name",
                                      "children": [
                                        {
                                          "value": "\"name\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "name",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "graph.name",
                                          "children": [
                                            {
                                              "value": "graph",
                                              "children": []
                                            },
                                            {
                                              "value": "name",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "\"description\": graph.description",
                                      "children": [
                                        {
                                          "value": "\"description\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "description",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "graph.description",
                                          "children": [
                                            {
                                              "value": "graph",
                                              "children": []
                                            },
                                            {
                                              "value": "description",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "\"isTemplate\": graph.is_template",
                                      "children": [
                                        {
                                          "value": "\"isTemplate\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "isTemplate",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "graph.is_template",
                                          "children": [
                                            {
                                              "value": "graph",
                                              "children": []
                                            },
                                            {
                                              "value": "is_template",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "\"isActive\": graph.is_active",
                                      "children": [
                                        {
                                          "value": "\"isActive\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "isActive",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "graph.is_active",
                                          "children": [
                                            {
                                              "value": "graph",
                                              "children": []
                                            },
                                            {
                                              "value": "is_active",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "\"userId\": user_id",
                                      "children": [
                                        {
                                          "value": "\"userId\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "userId",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "user_id",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "await asyncio.gather(\n        *[\n            AgentNode.prisma(tx).create(\n                {\n                    \"id\": node.id,\n                    \"agentBlockId\": node.block_id,\n                    \"agentGraphId\": graph.id,\n                    \"agentGraphVersion\": graph.version,\n                    \"constantInput\": json.dumps(node.input_default),\n                    \"metadata\": json.dumps(node.metadata),\n                }\n            )\n            for node in graph.nodes\n        ]\n    )",
              "children": [
                {
                  "value": "await asyncio.gather(\n        *[\n            AgentNode.prisma(tx).create(\n                {\n                    \"id\": node.id,\n                    \"agentBlockId\": node.block_id,\n                    \"agentGraphId\": graph.id,\n                    \"agentGraphVersion\": graph.version,\n                    \"constantInput\": json.dumps(node.input_default),\n                    \"metadata\": json.dumps(node.metadata),\n                }\n            )\n            for node in graph.nodes\n        ]\n    )",
                  "children": [
                    {
                      "value": "asyncio.gather(\n        *[\n            AgentNode.prisma(tx).create(\n                {\n                    \"id\": node.id,\n                    \"agentBlockId\": node.block_id,\n                    \"agentGraphId\": graph.id,\n                    \"agentGraphVersion\": graph.version,\n                    \"constantInput\": json.dumps(node.input_default),\n                    \"metadata\": json.dumps(node.metadata),\n                }\n            )\n            for node in graph.nodes\n        ]\n    )",
                      "children": [
                        {
                          "value": "asyncio.gather",
                          "children": [
                            {
                              "value": "asyncio",
                              "children": []
                            },
                            {
                              "value": "gather",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "(\n        *[\n            AgentNode.prisma(tx).create(\n                {\n                    \"id\": node.id,\n                    \"agentBlockId\": node.block_id,\n                    \"agentGraphId\": graph.id,\n                    \"agentGraphVersion\": graph.version,\n                    \"constantInput\": json.dumps(node.input_default),\n                    \"metadata\": json.dumps(node.metadata),\n                }\n            )\n            for node in graph.nodes\n        ]\n    )",
                          "children": [
                            {
                              "value": "*[\n            AgentNode.prisma(tx).create(\n                {\n                    \"id\": node.id,\n                    \"agentBlockId\": node.block_id,\n                    \"agentGraphId\": graph.id,\n                    \"agentGraphVersion\": graph.version,\n                    \"constantInput\": json.dumps(node.input_default),\n                    \"metadata\": json.dumps(node.metadata),\n                }\n            )\n            for node in graph.nodes\n        ]",
                              "children": [
                                {
                                  "value": "[\n            AgentNode.prisma(tx).create(\n                {\n                    \"id\": node.id,\n                    \"agentBlockId\": node.block_id,\n                    \"agentGraphId\": graph.id,\n                    \"agentGraphVersion\": graph.version,\n                    \"constantInput\": json.dumps(node.input_default),\n                    \"metadata\": json.dumps(node.metadata),\n                }\n            )\n            for node in graph.nodes\n        ]",
                                  "children": [
                                    {
                                      "value": "AgentNode.prisma(tx).create(\n                {\n                    \"id\": node.id,\n                    \"agentBlockId\": node.block_id,\n                    \"agentGraphId\": graph.id,\n                    \"agentGraphVersion\": graph.version,\n                    \"constantInput\": json.dumps(node.input_default),\n                    \"metadata\": json.dumps(node.metadata),\n                }\n            )",
                                      "children": [
                                        {
                                          "value": "AgentNode.prisma(tx).create",
                                          "children": [
                                            {
                                              "value": "AgentNode.prisma(tx)",
                                              "children": [
                                                {
                                                  "value": "AgentNode.prisma",
                                                  "children": [
                                                    {
                                                      "value": "AgentNode",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "prisma",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(tx)",
                                                  "children": [
                                                    {
                                                      "value": "tx",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "create",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(\n                {\n                    \"id\": node.id,\n                    \"agentBlockId\": node.block_id,\n                    \"agentGraphId\": graph.id,\n                    \"agentGraphVersion\": graph.version,\n                    \"constantInput\": json.dumps(node.input_default),\n                    \"metadata\": json.dumps(node.metadata),\n                }\n            )",
                                          "children": [
                                            {
                                              "value": "{\n                    \"id\": node.id,\n                    \"agentBlockId\": node.block_id,\n                    \"agentGraphId\": graph.id,\n                    \"agentGraphVersion\": graph.version,\n                    \"constantInput\": json.dumps(node.input_default),\n                    \"metadata\": json.dumps(node.metadata),\n                }",
                                              "children": [
                                                {
                                                  "value": "\"id\": node.id",
                                                  "children": [
                                                    {
                                                      "value": "\"id\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "id",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "node.id",
                                                      "children": [
                                                        {
                                                          "value": "node",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "id",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"agentBlockId\": node.block_id",
                                                  "children": [
                                                    {
                                                      "value": "\"agentBlockId\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "agentBlockId",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "node.block_id",
                                                      "children": [
                                                        {
                                                          "value": "node",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "block_id",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"agentGraphId\": graph.id",
                                                  "children": [
                                                    {
                                                      "value": "\"agentGraphId\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "agentGraphId",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "graph.id",
                                                      "children": [
                                                        {
                                                          "value": "graph",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "id",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"agentGraphVersion\": graph.version",
                                                  "children": [
                                                    {
                                                      "value": "\"agentGraphVersion\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "agentGraphVersion",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "graph.version",
                                                      "children": [
                                                        {
                                                          "value": "graph",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "version",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"constantInput\": json.dumps(node.input_default)",
                                                  "children": [
                                                    {
                                                      "value": "\"constantInput\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "constantInput",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "json.dumps(node.input_default)",
                                                      "children": [
                                                        {
                                                          "value": "json.dumps",
                                                          "children": [
                                                            {
                                                              "value": "json",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "dumps",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "(node.input_default)",
                                                          "children": [
                                                            {
                                                              "value": "node.input_default",
                                                              "children": [
                                                                {
                                                                  "value": "node",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "input_default",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"metadata\": json.dumps(node.metadata)",
                                                  "children": [
                                                    {
                                                      "value": "\"metadata\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "metadata",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "json.dumps(node.metadata)",
                                                      "children": [
                                                        {
                                                          "value": "json.dumps",
                                                          "children": [
                                                            {
                                                              "value": "json",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "dumps",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "(node.metadata)",
                                                          "children": [
                                                            {
                                                              "value": "node.metadata",
                                                              "children": [
                                                                {
                                                                  "value": "node",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "metadata",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "for node in graph.nodes",
                                      "children": [
                                        {
                                          "value": "node",
                                          "children": []
                                        },
                                        {
                                          "value": "graph.nodes",
                                          "children": [
                                            {
                                              "value": "graph",
                                              "children": []
                                            },
                                            {
                                              "value": "nodes",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "await asyncio.gather(\n        *[\n            AgentNodeLink.prisma(tx).create(\n                {\n                    \"id\": str(uuid.uuid4()),\n                    \"sourceName\": link.source_name,\n                    \"sinkName\": link.sink_name,\n                    \"agentNodeSourceId\": link.source_id,\n                    \"agentNodeSinkId\": link.sink_id,\n                    \"isStatic\": link.is_static,\n                }\n            )\n            for link in graph.links\n        ]\n    )",
              "children": [
                {
                  "value": "await asyncio.gather(\n        *[\n            AgentNodeLink.prisma(tx).create(\n                {\n                    \"id\": str(uuid.uuid4()),\n                    \"sourceName\": link.source_name,\n                    \"sinkName\": link.sink_name,\n                    \"agentNodeSourceId\": link.source_id,\n                    \"agentNodeSinkId\": link.sink_id,\n                    \"isStatic\": link.is_static,\n                }\n            )\n            for link in graph.links\n        ]\n    )",
                  "children": [
                    {
                      "value": "asyncio.gather(\n        *[\n            AgentNodeLink.prisma(tx).create(\n                {\n                    \"id\": str(uuid.uuid4()),\n                    \"sourceName\": link.source_name,\n                    \"sinkName\": link.sink_name,\n                    \"agentNodeSourceId\": link.source_id,\n                    \"agentNodeSinkId\": link.sink_id,\n                    \"isStatic\": link.is_static,\n                }\n            )\n            for link in graph.links\n        ]\n    )",
                      "children": [
                        {
                          "value": "asyncio.gather",
                          "children": [
                            {
                              "value": "asyncio",
                              "children": []
                            },
                            {
                              "value": "gather",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "(\n        *[\n            AgentNodeLink.prisma(tx).create(\n                {\n                    \"id\": str(uuid.uuid4()),\n                    \"sourceName\": link.source_name,\n                    \"sinkName\": link.sink_name,\n                    \"agentNodeSourceId\": link.source_id,\n                    \"agentNodeSinkId\": link.sink_id,\n                    \"isStatic\": link.is_static,\n                }\n            )\n            for link in graph.links\n        ]\n    )",
                          "children": [
                            {
                              "value": "*[\n            AgentNodeLink.prisma(tx).create(\n                {\n                    \"id\": str(uuid.uuid4()),\n                    \"sourceName\": link.source_name,\n                    \"sinkName\": link.sink_name,\n                    \"agentNodeSourceId\": link.source_id,\n                    \"agentNodeSinkId\": link.sink_id,\n                    \"isStatic\": link.is_static,\n                }\n            )\n            for link in graph.links\n        ]",
                              "children": [
                                {
                                  "value": "[\n            AgentNodeLink.prisma(tx).create(\n                {\n                    \"id\": str(uuid.uuid4()),\n                    \"sourceName\": link.source_name,\n                    \"sinkName\": link.sink_name,\n                    \"agentNodeSourceId\": link.source_id,\n                    \"agentNodeSinkId\": link.sink_id,\n                    \"isStatic\": link.is_static,\n                }\n            )\n            for link in graph.links\n        ]",
                                  "children": [
                                    {
                                      "value": "AgentNodeLink.prisma(tx).create(\n                {\n                    \"id\": str(uuid.uuid4()),\n                    \"sourceName\": link.source_name,\n                    \"sinkName\": link.sink_name,\n                    \"agentNodeSourceId\": link.source_id,\n                    \"agentNodeSinkId\": link.sink_id,\n                    \"isStatic\": link.is_static,\n                }\n            )",
                                      "children": [
                                        {
                                          "value": "AgentNodeLink.prisma(tx).create",
                                          "children": [
                                            {
                                              "value": "AgentNodeLink.prisma(tx)",
                                              "children": [
                                                {
                                                  "value": "AgentNodeLink.prisma",
                                                  "children": [
                                                    {
                                                      "value": "AgentNodeLink",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "prisma",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(tx)",
                                                  "children": [
                                                    {
                                                      "value": "tx",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "create",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(\n                {\n                    \"id\": str(uuid.uuid4()),\n                    \"sourceName\": link.source_name,\n                    \"sinkName\": link.sink_name,\n                    \"agentNodeSourceId\": link.source_id,\n                    \"agentNodeSinkId\": link.sink_id,\n                    \"isStatic\": link.is_static,\n                }\n            )",
                                          "children": [
                                            {
                                              "value": "{\n                    \"id\": str(uuid.uuid4()),\n                    \"sourceName\": link.source_name,\n                    \"sinkName\": link.sink_name,\n                    \"agentNodeSourceId\": link.source_id,\n                    \"agentNodeSinkId\": link.sink_id,\n                    \"isStatic\": link.is_static,\n                }",
                                              "children": [
                                                {
                                                  "value": "\"id\": str(uuid.uuid4())",
                                                  "children": [
                                                    {
                                                      "value": "\"id\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "id",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "str(uuid.uuid4())",
                                                      "children": [
                                                        {
                                                          "value": "str",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "(uuid.uuid4())",
                                                          "children": [
                                                            {
                                                              "value": "uuid.uuid4()",
                                                              "children": [
                                                                {
                                                                  "value": "uuid.uuid4",
                                                                  "children": [
                                                                    {
                                                                      "value": "uuid",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "uuid4",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "()",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"sourceName\": link.source_name",
                                                  "children": [
                                                    {
                                                      "value": "\"sourceName\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "sourceName",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "link.source_name",
                                                      "children": [
                                                        {
                                                          "value": "link",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "source_name",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"sinkName\": link.sink_name",
                                                  "children": [
                                                    {
                                                      "value": "\"sinkName\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "sinkName",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "link.sink_name",
                                                      "children": [
                                                        {
                                                          "value": "link",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "sink_name",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"agentNodeSourceId\": link.source_id",
                                                  "children": [
                                                    {
                                                      "value": "\"agentNodeSourceId\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "agentNodeSourceId",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "link.source_id",
                                                      "children": [
                                                        {
                                                          "value": "link",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "source_id",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"agentNodeSinkId\": link.sink_id",
                                                  "children": [
                                                    {
                                                      "value": "\"agentNodeSinkId\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "agentNodeSinkId",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "link.sink_id",
                                                      "children": [
                                                        {
                                                          "value": "link",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "sink_id",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"isStatic\": link.is_static",
                                                  "children": [
                                                    {
                                                      "value": "\"isStatic\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "isStatic",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "link.is_static",
                                                      "children": [
                                                        {
                                                          "value": "link",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "is_static",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "for link in graph.links",
                                      "children": [
                                        {
                                          "value": "link",
                                          "children": []
                                        },
                                        {
                                          "value": "graph.links",
                                          "children": [
                                            {
                                              "value": "graph",
                                              "children": []
                                            },
                                            {
                                              "value": "links",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "# ------------------------ UTILITIES ------------------------ #",
      "children": []
    },
    {
      "value": "def make_graph_model(creatable_graph: Graph, user_id: str) -> GraphModel:\n    \"\"\"\n    Convert a Graph to a GraphModel, setting graph_id and graph_version on all nodes.\n\n    Args:\n        creatable_graph (Graph): The creatable graph to convert.\n        user_id (str): The ID of the user creating the graph.\n\n    Returns:\n        GraphModel: The converted Graph object.\n    \"\"\"\n    # Create a new Graph object, inheriting properties from CreatableGraph\n    return GraphModel(\n        **creatable_graph.model_dump(exclude={\"nodes\"}),\n        user_id=user_id,\n        nodes=[\n            NodeModel(\n                **creatable_node.model_dump(),\n                graph_id=creatable_graph.id,\n                graph_version=creatable_graph.version,\n            )\n            for creatable_node in creatable_graph.nodes\n        ],\n    )",
      "children": [
        {
          "value": "make_graph_model",
          "children": []
        },
        {
          "value": "(creatable_graph: Graph, user_id: str)",
          "children": [
            {
              "value": "creatable_graph: Graph",
              "children": [
                {
                  "value": "creatable_graph",
                  "children": []
                },
                {
                  "value": "Graph",
                  "children": [
                    {
                      "value": "Graph",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "user_id: str",
              "children": [
                {
                  "value": "user_id",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "GraphModel",
          "children": [
            {
              "value": "GraphModel",
              "children": []
            }
          ]
        },
        {
          "value": "\"\"\"\n    Convert a Graph to a GraphModel, setting graph_id and graph_version on all nodes.\n\n    Args:\n        creatable_graph (Graph): The creatable graph to convert.\n        user_id (str): The ID of the user creating the graph.\n\n    Returns:\n        GraphModel: The converted Graph object.\n    \"\"\"\n    # Create a new Graph object, inheriting properties from CreatableGraph\n    return GraphModel(\n        **creatable_graph.model_dump(exclude={\"nodes\"}),\n        user_id=user_id,\n        nodes=[\n            NodeModel(\n                **creatable_node.model_dump(),\n                graph_id=creatable_graph.id,\n                graph_version=creatable_graph.version,\n            )\n            for creatable_node in creatable_graph.nodes\n        ],\n    )",
          "children": [
            {
              "value": "\"\"\"\n    Convert a Graph to a GraphModel, setting graph_id and graph_version on all nodes.\n\n    Args:\n        creatable_graph (Graph): The creatable graph to convert.\n        user_id (str): The ID of the user creating the graph.\n\n    Returns:\n        GraphModel: The converted Graph object.\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    Convert a Graph to a GraphModel, setting graph_id and graph_version on all nodes.\n\n    Args:\n        creatable_graph (Graph): The creatable graph to convert.\n        user_id (str): The ID of the user creating the graph.\n\n    Returns:\n        GraphModel: The converted Graph object.\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Convert a Graph to a GraphModel, setting graph_id and graph_version on all nodes.\n\n    Args:\n        creatable_graph (Graph): The creatable graph to convert.\n        user_id (str): The ID of the user creating the graph.\n\n    Returns:\n        GraphModel: The converted Graph object.",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "# Create a new Graph object, inheriting properties from CreatableGraph",
              "children": []
            },
            {
              "value": "return GraphModel(\n        **creatable_graph.model_dump(exclude={\"nodes\"}),\n        user_id=user_id,\n        nodes=[\n            NodeModel(\n                **creatable_node.model_dump(),\n                graph_id=creatable_graph.id,\n                graph_version=creatable_graph.version,\n            )\n            for creatable_node in creatable_graph.nodes\n        ],\n    )",
              "children": [
                {
                  "value": "GraphModel(\n        **creatable_graph.model_dump(exclude={\"nodes\"}),\n        user_id=user_id,\n        nodes=[\n            NodeModel(\n                **creatable_node.model_dump(),\n                graph_id=creatable_graph.id,\n                graph_version=creatable_graph.version,\n            )\n            for creatable_node in creatable_graph.nodes\n        ],\n    )",
                  "children": [
                    {
                      "value": "GraphModel",
                      "children": []
                    },
                    {
                      "value": "(\n        **creatable_graph.model_dump(exclude={\"nodes\"}),\n        user_id=user_id,\n        nodes=[\n            NodeModel(\n                **creatable_node.model_dump(),\n                graph_id=creatable_graph.id,\n                graph_version=creatable_graph.version,\n            )\n            for creatable_node in creatable_graph.nodes\n        ],\n    )",
                      "children": [
                        {
                          "value": "**creatable_graph.model_dump(exclude={\"nodes\"})",
                          "children": [
                            {
                              "value": "creatable_graph.model_dump(exclude={\"nodes\"})",
                              "children": [
                                {
                                  "value": "creatable_graph.model_dump",
                                  "children": [
                                    {
                                      "value": "creatable_graph",
                                      "children": []
                                    },
                                    {
                                      "value": "model_dump",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(exclude={\"nodes\"})",
                                  "children": [
                                    {
                                      "value": "exclude={\"nodes\"}",
                                      "children": [
                                        {
                                          "value": "exclude",
                                          "children": []
                                        },
                                        {
                                          "value": "{\"nodes\"}",
                                          "children": [
                                            {
                                              "value": "\"nodes\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "nodes",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "user_id=user_id",
                          "children": [
                            {
                              "value": "user_id",
                              "children": []
                            },
                            {
                              "value": "user_id",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "nodes=[\n            NodeModel(\n                **creatable_node.model_dump(),\n                graph_id=creatable_graph.id,\n                graph_version=creatable_graph.version,\n            )\n            for creatable_node in creatable_graph.nodes\n        ]",
                          "children": [
                            {
                              "value": "nodes",
                              "children": []
                            },
                            {
                              "value": "[\n            NodeModel(\n                **creatable_node.model_dump(),\n                graph_id=creatable_graph.id,\n                graph_version=creatable_graph.version,\n            )\n            for creatable_node in creatable_graph.nodes\n        ]",
                              "children": [
                                {
                                  "value": "NodeModel(\n                **creatable_node.model_dump(),\n                graph_id=creatable_graph.id,\n                graph_version=creatable_graph.version,\n            )",
                                  "children": [
                                    {
                                      "value": "NodeModel",
                                      "children": []
                                    },
                                    {
                                      "value": "(\n                **creatable_node.model_dump(),\n                graph_id=creatable_graph.id,\n                graph_version=creatable_graph.version,\n            )",
                                      "children": [
                                        {
                                          "value": "**creatable_node.model_dump()",
                                          "children": [
                                            {
                                              "value": "creatable_node.model_dump()",
                                              "children": [
                                                {
                                                  "value": "creatable_node.model_dump",
                                                  "children": [
                                                    {
                                                      "value": "creatable_node",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "model_dump",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "()",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "graph_id=creatable_graph.id",
                                          "children": [
                                            {
                                              "value": "graph_id",
                                              "children": []
                                            },
                                            {
                                              "value": "creatable_graph.id",
                                              "children": [
                                                {
                                                  "value": "creatable_graph",
                                                  "children": []
                                                },
                                                {
                                                  "value": "id",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "graph_version=creatable_graph.version",
                                          "children": [
                                            {
                                              "value": "graph_version",
                                              "children": []
                                            },
                                            {
                                              "value": "creatable_graph.version",
                                              "children": [
                                                {
                                                  "value": "creatable_graph",
                                                  "children": []
                                                },
                                                {
                                                  "value": "version",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "for creatable_node in creatable_graph.nodes",
                                  "children": [
                                    {
                                      "value": "creatable_node",
                                      "children": []
                                    },
                                    {
                                      "value": "creatable_graph.nodes",
                                      "children": [
                                        {
                                          "value": "creatable_graph",
                                          "children": []
                                        },
                                        {
                                          "value": "nodes",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "async def fix_llm_provider_credentials():\n    \"\"\"Fix node credentials with provider `llm`\"\"\"\n    from backend.integrations.credentials_store import IntegrationCredentialsStore\n\n    from .user import get_user_integrations\n\n    store = IntegrationCredentialsStore()\n\n    broken_nodes = await prisma.get_client().query_raw(\n        \"\"\"\n        SELECT    graph.\"userId\"       user_id,\n                  node.id              node_id,\n                  node.\"constantInput\" node_preset_input\n        FROM      platform.\"AgentNode\"  node\n        LEFT JOIN platform.\"AgentGraph\" graph\n        ON        node.\"agentGraphId\" = graph.id\n        WHERE     node.\"constantInput\"::jsonb->'credentials'->>'provider' = 'llm'\n        ORDER BY  graph.\"userId\";\n        \"\"\"\n    )\n    logger.info(f\"Fixing LLM credential inputs on {len(broken_nodes)} nodes\")\n\n    user_id: str = \"\"\n    user_integrations = None\n    for node in broken_nodes:\n        if node[\"user_id\"] != user_id:\n            # Save queries by only fetching once per user\n            user_id = node[\"user_id\"]\n            user_integrations = await get_user_integrations(user_id)\n        elif not user_integrations:\n            raise RuntimeError(f\"Impossible state while processing node {node}\")\n\n        node_id: str = node[\"node_id\"]\n        node_preset_input: dict = json.loads(node[\"node_preset_input\"])\n        credentials_meta: dict = node_preset_input[\"credentials\"]\n\n        credentials = next(\n            (\n                c\n                for c in user_integrations.credentials\n                if c.id == credentials_meta[\"id\"]\n            ),\n            None,\n        )\n        if not credentials:\n            continue\n        if credentials.type != \"api_key\":\n            logger.warning(\n                f\"User {user_id} credentials {credentials.id} with provider 'llm' \"\n                f\"has invalid type '{credentials.type}'\"\n            )\n            continue\n\n        api_key = credentials.api_key.get_secret_value()\n        if api_key.startswith(\"sk-ant-api03-\"):\n            credentials.provider = credentials_meta[\"provider\"] = \"anthropic\"\n        elif api_key.startswith(\"sk-\"):\n            credentials.provider = credentials_meta[\"provider\"] = \"openai\"\n        elif api_key.startswith(\"gsk_\"):\n            credentials.provider = credentials_meta[\"provider\"] = \"groq\"\n        else:\n            logger.warning(\n                f\"Could not identify provider from key prefix {api_key[:13]}*****\"\n            )\n            continue\n\n        store.update_creds(user_id, credentials)\n        await AgentNode.prisma().update(\n            where={\"id\": node_id},\n            data={\"constantInput\": json.dumps(node_preset_input)},\n        )",
      "children": [
        {
          "value": "fix_llm_provider_credentials",
          "children": []
        },
        {
          "value": "()",
          "children": []
        },
        {
          "value": "\"\"\"Fix node credentials with provider `llm`\"\"\"\n    from backend.integrations.credentials_store import IntegrationCredentialsStore\n\n    from .user import get_user_integrations\n\n    store = IntegrationCredentialsStore()\n\n    broken_nodes = await prisma.get_client().query_raw(\n        \"\"\"\n        SELECT    graph.\"userId\"       user_id,\n                  node.id              node_id,\n                  node.\"constantInput\" node_preset_input\n        FROM      platform.\"AgentNode\"  node\n        LEFT JOIN platform.\"AgentGraph\" graph\n        ON        node.\"agentGraphId\" = graph.id\n        WHERE     node.\"constantInput\"::jsonb->'credentials'->>'provider' = 'llm'\n        ORDER BY  graph.\"userId\";\n        \"\"\"\n    )\n    logger.info(f\"Fixing LLM credential inputs on {len(broken_nodes)} nodes\")\n\n    user_id: str = \"\"\n    user_integrations = None\n    for node in broken_nodes:\n        if node[\"user_id\"] != user_id:\n            # Save queries by only fetching once per user\n            user_id = node[\"user_id\"]\n            user_integrations = await get_user_integrations(user_id)\n        elif not user_integrations:\n            raise RuntimeError(f\"Impossible state while processing node {node}\")\n\n        node_id: str = node[\"node_id\"]\n        node_preset_input: dict = json.loads(node[\"node_preset_input\"])\n        credentials_meta: dict = node_preset_input[\"credentials\"]\n\n        credentials = next(\n            (\n                c\n                for c in user_integrations.credentials\n                if c.id == credentials_meta[\"id\"]\n            ),\n            None,\n        )\n        if not credentials:\n            continue\n        if credentials.type != \"api_key\":\n            logger.warning(\n                f\"User {user_id} credentials {credentials.id} with provider 'llm' \"\n                f\"has invalid type '{credentials.type}'\"\n            )\n            continue\n\n        api_key = credentials.api_key.get_secret_value()\n        if api_key.startswith(\"sk-ant-api03-\"):\n            credentials.provider = credentials_meta[\"provider\"] = \"anthropic\"\n        elif api_key.startswith(\"sk-\"):\n            credentials.provider = credentials_meta[\"provider\"] = \"openai\"\n        elif api_key.startswith(\"gsk_\"):\n            credentials.provider = credentials_meta[\"provider\"] = \"groq\"\n        else:\n            logger.warning(\n                f\"Could not identify provider from key prefix {api_key[:13]}*****\"\n            )\n            continue\n\n        store.update_creds(user_id, credentials)\n        await AgentNode.prisma().update(\n            where={\"id\": node_id},\n            data={\"constantInput\": json.dumps(node_preset_input)},\n        )",
          "children": [
            {
              "value": "\"\"\"Fix node credentials with provider `llm`\"\"\"",
              "children": [
                {
                  "value": "\"\"\"Fix node credentials with provider `llm`\"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Fix node credentials with provider `llm`",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "from backend.integrations.credentials_store import IntegrationCredentialsStore",
              "children": [
                {
                  "value": "backend.integrations.credentials_store",
                  "children": [
                    {
                      "value": "backend",
                      "children": []
                    },
                    {
                      "value": "integrations",
                      "children": []
                    },
                    {
                      "value": "credentials_store",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "IntegrationCredentialsStore",
                  "children": [
                    {
                      "value": "IntegrationCredentialsStore",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "from .user import get_user_integrations",
              "children": [
                {
                  "value": ".user",
                  "children": [
                    {
                      "value": ".",
                      "children": []
                    },
                    {
                      "value": "user",
                      "children": [
                        {
                          "value": "user",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "get_user_integrations",
                  "children": [
                    {
                      "value": "get_user_integrations",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "store = IntegrationCredentialsStore()",
              "children": [
                {
                  "value": "store = IntegrationCredentialsStore()",
                  "children": [
                    {
                      "value": "store",
                      "children": []
                    },
                    {
                      "value": "IntegrationCredentialsStore()",
                      "children": [
                        {
                          "value": "IntegrationCredentialsStore",
                          "children": []
                        },
                        {
                          "value": "()",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "broken_nodes = await prisma.get_client().query_raw(\n        \"\"\"\n        SELECT    graph.\"userId\"       user_id,\n                  node.id              node_id,\n                  node.\"constantInput\" node_preset_input\n        FROM      platform.\"AgentNode\"  node\n        LEFT JOIN platform.\"AgentGraph\" graph\n        ON        node.\"agentGraphId\" = graph.id\n        WHERE     node.\"constantInput\"::jsonb->'credentials'->>'provider' = 'llm'\n        ORDER BY  graph.\"userId\";\n        \"\"\"\n    )",
              "children": [
                {
                  "value": "broken_nodes = await prisma.get_client().query_raw(\n        \"\"\"\n        SELECT    graph.\"userId\"       user_id,\n                  node.id              node_id,\n                  node.\"constantInput\" node_preset_input\n        FROM      platform.\"AgentNode\"  node\n        LEFT JOIN platform.\"AgentGraph\" graph\n        ON        node.\"agentGraphId\" = graph.id\n        WHERE     node.\"constantInput\"::jsonb->'credentials'->>'provider' = 'llm'\n        ORDER BY  graph.\"userId\";\n        \"\"\"\n    )",
                  "children": [
                    {
                      "value": "broken_nodes",
                      "children": []
                    },
                    {
                      "value": "await prisma.get_client().query_raw(\n        \"\"\"\n        SELECT    graph.\"userId\"       user_id,\n                  node.id              node_id,\n                  node.\"constantInput\" node_preset_input\n        FROM      platform.\"AgentNode\"  node\n        LEFT JOIN platform.\"AgentGraph\" graph\n        ON        node.\"agentGraphId\" = graph.id\n        WHERE     node.\"constantInput\"::jsonb->'credentials'->>'provider' = 'llm'\n        ORDER BY  graph.\"userId\";\n        \"\"\"\n    )",
                      "children": [
                        {
                          "value": "prisma.get_client().query_raw(\n        \"\"\"\n        SELECT    graph.\"userId\"       user_id,\n                  node.id              node_id,\n                  node.\"constantInput\" node_preset_input\n        FROM      platform.\"AgentNode\"  node\n        LEFT JOIN platform.\"AgentGraph\" graph\n        ON        node.\"agentGraphId\" = graph.id\n        WHERE     node.\"constantInput\"::jsonb->'credentials'->>'provider' = 'llm'\n        ORDER BY  graph.\"userId\";\n        \"\"\"\n    )",
                          "children": [
                            {
                              "value": "prisma.get_client().query_raw",
                              "children": [
                                {
                                  "value": "prisma.get_client()",
                                  "children": [
                                    {
                                      "value": "prisma.get_client",
                                      "children": [
                                        {
                                          "value": "prisma",
                                          "children": []
                                        },
                                        {
                                          "value": "get_client",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "query_raw",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(\n        \"\"\"\n        SELECT    graph.\"userId\"       user_id,\n                  node.id              node_id,\n                  node.\"constantInput\" node_preset_input\n        FROM      platform.\"AgentNode\"  node\n        LEFT JOIN platform.\"AgentGraph\" graph\n        ON        node.\"agentGraphId\" = graph.id\n        WHERE     node.\"constantInput\"::jsonb->'credentials'->>'provider' = 'llm'\n        ORDER BY  graph.\"userId\";\n        \"\"\"\n    )",
                              "children": [
                                {
                                  "value": "\"\"\"\n        SELECT    graph.\"userId\"       user_id,\n                  node.id              node_id,\n                  node.\"constantInput\" node_preset_input\n        FROM      platform.\"AgentNode\"  node\n        LEFT JOIN platform.\"AgentGraph\" graph\n        ON        node.\"agentGraphId\" = graph.id\n        WHERE     node.\"constantInput\"::jsonb->'credentials'->>'provider' = 'llm'\n        ORDER BY  graph.\"userId\";\n        \"\"\"",
                                  "children": [
                                    {
                                      "value": "\"\"\"",
                                      "children": []
                                    },
                                    {
                                      "value": "SELECT    graph.\"userId\"       user_id,\n                  node.id              node_id,\n                  node.\"constantInput\" node_preset_input\n        FROM      platform.\"AgentNode\"  node\n        LEFT JOIN platform.\"AgentGraph\" graph\n        ON        node.\"agentGraphId\" = graph.id\n        WHERE     node.\"constantInput\"::jsonb->'credentials'->>'provider' = 'llm'\n        ORDER BY  graph.\"userId\";",
                                      "children": []
                                    },
                                    {
                                      "value": "\"\"\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "logger.info(f\"Fixing LLM credential inputs on {len(broken_nodes)} nodes\")",
              "children": [
                {
                  "value": "logger.info(f\"Fixing LLM credential inputs on {len(broken_nodes)} nodes\")",
                  "children": [
                    {
                      "value": "logger.info",
                      "children": [
                        {
                          "value": "logger",
                          "children": []
                        },
                        {
                          "value": "info",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "(f\"Fixing LLM credential inputs on {len(broken_nodes)} nodes\")",
                      "children": [
                        {
                          "value": "f\"Fixing LLM credential inputs on {len(broken_nodes)} nodes\"",
                          "children": [
                            {
                              "value": "f\"",
                              "children": []
                            },
                            {
                              "value": "Fixing LLM credential inputs on",
                              "children": []
                            },
                            {
                              "value": "{len(broken_nodes)}",
                              "children": [
                                {
                                  "value": "len(broken_nodes)",
                                  "children": [
                                    {
                                      "value": "len",
                                      "children": []
                                    },
                                    {
                                      "value": "(broken_nodes)",
                                      "children": [
                                        {
                                          "value": "broken_nodes",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "nodes",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "user_id: str = \"\"",
              "children": [
                {
                  "value": "user_id: str = \"\"",
                  "children": [
                    {
                      "value": "user_id",
                      "children": []
                    },
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "\"\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "user_integrations = None",
              "children": [
                {
                  "value": "user_integrations = None",
                  "children": [
                    {
                      "value": "user_integrations",
                      "children": []
                    },
                    {
                      "value": "None",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "for node in broken_nodes:\n        if node[\"user_id\"] != user_id:\n            # Save queries by only fetching once per user\n            user_id = node[\"user_id\"]\n            user_integrations = await get_user_integrations(user_id)\n        elif not user_integrations:\n            raise RuntimeError(f\"Impossible state while processing node {node}\")\n\n        node_id: str = node[\"node_id\"]\n        node_preset_input: dict = json.loads(node[\"node_preset_input\"])\n        credentials_meta: dict = node_preset_input[\"credentials\"]\n\n        credentials = next(\n            (\n                c\n                for c in user_integrations.credentials\n                if c.id == credentials_meta[\"id\"]\n            ),\n            None,\n        )\n        if not credentials:\n            continue\n        if credentials.type != \"api_key\":\n            logger.warning(\n                f\"User {user_id} credentials {credentials.id} with provider 'llm' \"\n                f\"has invalid type '{credentials.type}'\"\n            )\n            continue\n\n        api_key = credentials.api_key.get_secret_value()\n        if api_key.startswith(\"sk-ant-api03-\"):\n            credentials.provider = credentials_meta[\"provider\"] = \"anthropic\"\n        elif api_key.startswith(\"sk-\"):\n            credentials.provider = credentials_meta[\"provider\"] = \"openai\"\n        elif api_key.startswith(\"gsk_\"):\n            credentials.provider = credentials_meta[\"provider\"] = \"groq\"\n        else:\n            logger.warning(\n                f\"Could not identify provider from key prefix {api_key[:13]}*****\"\n            )\n            continue\n\n        store.update_creds(user_id, credentials)\n        await AgentNode.prisma().update(\n            where={\"id\": node_id},\n            data={\"constantInput\": json.dumps(node_preset_input)},\n        )",
              "children": [
                {
                  "value": "node",
                  "children": []
                },
                {
                  "value": "broken_nodes",
                  "children": []
                },
                {
                  "value": "if node[\"user_id\"] != user_id:\n            # Save queries by only fetching once per user\n            user_id = node[\"user_id\"]\n            user_integrations = await get_user_integrations(user_id)\n        elif not user_integrations:\n            raise RuntimeError(f\"Impossible state while processing node {node}\")\n\n        node_id: str = node[\"node_id\"]\n        node_preset_input: dict = json.loads(node[\"node_preset_input\"])\n        credentials_meta: dict = node_preset_input[\"credentials\"]\n\n        credentials = next(\n            (\n                c\n                for c in user_integrations.credentials\n                if c.id == credentials_meta[\"id\"]\n            ),\n            None,\n        )\n        if not credentials:\n            continue\n        if credentials.type != \"api_key\":\n            logger.warning(\n                f\"User {user_id} credentials {credentials.id} with provider 'llm' \"\n                f\"has invalid type '{credentials.type}'\"\n            )\n            continue\n\n        api_key = credentials.api_key.get_secret_value()\n        if api_key.startswith(\"sk-ant-api03-\"):\n            credentials.provider = credentials_meta[\"provider\"] = \"anthropic\"\n        elif api_key.startswith(\"sk-\"):\n            credentials.provider = credentials_meta[\"provider\"] = \"openai\"\n        elif api_key.startswith(\"gsk_\"):\n            credentials.provider = credentials_meta[\"provider\"] = \"groq\"\n        else:\n            logger.warning(\n                f\"Could not identify provider from key prefix {api_key[:13]}*****\"\n            )\n            continue\n\n        store.update_creds(user_id, credentials)\n        await AgentNode.prisma().update(\n            where={\"id\": node_id},\n            data={\"constantInput\": json.dumps(node_preset_input)},\n        )",
                  "children": [
                    {
                      "value": "if node[\"user_id\"] != user_id:\n            # Save queries by only fetching once per user\n            user_id = node[\"user_id\"]\n            user_integrations = await get_user_integrations(user_id)\n        elif not user_integrations:\n            raise RuntimeError(f\"Impossible state while processing node {node}\")",
                      "children": [
                        {
                          "value": "node[\"user_id\"] != user_id",
                          "children": [
                            {
                              "value": "node[\"user_id\"]",
                              "children": [
                                {
                                  "value": "node",
                                  "children": []
                                },
                                {
                                  "value": "\"user_id\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "user_id",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "user_id",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "# Save queries by only fetching once per user",
                          "children": []
                        },
                        {
                          "value": "user_id = node[\"user_id\"]\n            user_integrations = await get_user_integrations(user_id)",
                          "children": [
                            {
                              "value": "user_id = node[\"user_id\"]",
                              "children": [
                                {
                                  "value": "user_id = node[\"user_id\"]",
                                  "children": [
                                    {
                                      "value": "user_id",
                                      "children": []
                                    },
                                    {
                                      "value": "node[\"user_id\"]",
                                      "children": [
                                        {
                                          "value": "node",
                                          "children": []
                                        },
                                        {
                                          "value": "\"user_id\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "user_id",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "user_integrations = await get_user_integrations(user_id)",
                              "children": [
                                {
                                  "value": "user_integrations = await get_user_integrations(user_id)",
                                  "children": [
                                    {
                                      "value": "user_integrations",
                                      "children": []
                                    },
                                    {
                                      "value": "await get_user_integrations(user_id)",
                                      "children": [
                                        {
                                          "value": "get_user_integrations(user_id)",
                                          "children": [
                                            {
                                              "value": "get_user_integrations",
                                              "children": []
                                            },
                                            {
                                              "value": "(user_id)",
                                              "children": [
                                                {
                                                  "value": "user_id",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "elif not user_integrations:\n            raise RuntimeError(f\"Impossible state while processing node {node}\")",
                          "children": [
                            {
                              "value": "not user_integrations",
                              "children": [
                                {
                                  "value": "user_integrations",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "raise RuntimeError(f\"Impossible state while processing node {node}\")",
                              "children": [
                                {
                                  "value": "raise RuntimeError(f\"Impossible state while processing node {node}\")",
                                  "children": [
                                    {
                                      "value": "RuntimeError(f\"Impossible state while processing node {node}\")",
                                      "children": [
                                        {
                                          "value": "RuntimeError",
                                          "children": []
                                        },
                                        {
                                          "value": "(f\"Impossible state while processing node {node}\")",
                                          "children": [
                                            {
                                              "value": "f\"Impossible state while processing node {node}\"",
                                              "children": [
                                                {
                                                  "value": "f\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "Impossible state while processing node",
                                                  "children": []
                                                },
                                                {
                                                  "value": "{node}",
                                                  "children": [
                                                    {
                                                      "value": "node",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "node_id: str = node[\"node_id\"]",
                      "children": [
                        {
                          "value": "node_id: str = node[\"node_id\"]",
                          "children": [
                            {
                              "value": "node_id",
                              "children": []
                            },
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "node[\"node_id\"]",
                              "children": [
                                {
                                  "value": "node",
                                  "children": []
                                },
                                {
                                  "value": "\"node_id\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "node_id",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "node_preset_input: dict = json.loads(node[\"node_preset_input\"])",
                      "children": [
                        {
                          "value": "node_preset_input: dict = json.loads(node[\"node_preset_input\"])",
                          "children": [
                            {
                              "value": "node_preset_input",
                              "children": []
                            },
                            {
                              "value": "dict",
                              "children": [
                                {
                                  "value": "dict",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "json.loads(node[\"node_preset_input\"])",
                              "children": [
                                {
                                  "value": "json.loads",
                                  "children": [
                                    {
                                      "value": "json",
                                      "children": []
                                    },
                                    {
                                      "value": "loads",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(node[\"node_preset_input\"])",
                                  "children": [
                                    {
                                      "value": "node[\"node_preset_input\"]",
                                      "children": [
                                        {
                                          "value": "node",
                                          "children": []
                                        },
                                        {
                                          "value": "\"node_preset_input\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "node_preset_input",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "credentials_meta: dict = node_preset_input[\"credentials\"]",
                      "children": [
                        {
                          "value": "credentials_meta: dict = node_preset_input[\"credentials\"]",
                          "children": [
                            {
                              "value": "credentials_meta",
                              "children": []
                            },
                            {
                              "value": "dict",
                              "children": [
                                {
                                  "value": "dict",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "node_preset_input[\"credentials\"]",
                              "children": [
                                {
                                  "value": "node_preset_input",
                                  "children": []
                                },
                                {
                                  "value": "\"credentials\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "credentials",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "credentials = next(\n            (\n                c\n                for c in user_integrations.credentials\n                if c.id == credentials_meta[\"id\"]\n            ),\n            None,\n        )",
                      "children": [
                        {
                          "value": "credentials = next(\n            (\n                c\n                for c in user_integrations.credentials\n                if c.id == credentials_meta[\"id\"]\n            ),\n            None,\n        )",
                          "children": [
                            {
                              "value": "credentials",
                              "children": []
                            },
                            {
                              "value": "next(\n            (\n                c\n                for c in user_integrations.credentials\n                if c.id == credentials_meta[\"id\"]\n            ),\n            None,\n        )",
                              "children": [
                                {
                                  "value": "next",
                                  "children": []
                                },
                                {
                                  "value": "(\n            (\n                c\n                for c in user_integrations.credentials\n                if c.id == credentials_meta[\"id\"]\n            ),\n            None,\n        )",
                                  "children": [
                                    {
                                      "value": "(\n                c\n                for c in user_integrations.credentials\n                if c.id == credentials_meta[\"id\"]\n            )",
                                      "children": [
                                        {
                                          "value": "c",
                                          "children": []
                                        },
                                        {
                                          "value": "for c in user_integrations.credentials",
                                          "children": [
                                            {
                                              "value": "c",
                                              "children": []
                                            },
                                            {
                                              "value": "user_integrations.credentials",
                                              "children": [
                                                {
                                                  "value": "user_integrations",
                                                  "children": []
                                                },
                                                {
                                                  "value": "credentials",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "if c.id == credentials_meta[\"id\"]",
                                          "children": [
                                            {
                                              "value": "c.id == credentials_meta[\"id\"]",
                                              "children": [
                                                {
                                                  "value": "c.id",
                                                  "children": [
                                                    {
                                                      "value": "c",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "id",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "credentials_meta[\"id\"]",
                                                  "children": [
                                                    {
                                                      "value": "credentials_meta",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"id\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "id",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "None",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if not credentials:\n            continue",
                      "children": [
                        {
                          "value": "not credentials",
                          "children": [
                            {
                              "value": "credentials",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "continue",
                          "children": [
                            {
                              "value": "continue",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if credentials.type != \"api_key\":\n            logger.warning(\n                f\"User {user_id} credentials {credentials.id} with provider 'llm' \"\n                f\"has invalid type '{credentials.type}'\"\n            )\n            continue",
                      "children": [
                        {
                          "value": "credentials.type != \"api_key\"",
                          "children": [
                            {
                              "value": "credentials.type",
                              "children": [
                                {
                                  "value": "credentials",
                                  "children": []
                                },
                                {
                                  "value": "type",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "\"api_key\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "api_key",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "logger.warning(\n                f\"User {user_id} credentials {credentials.id} with provider 'llm' \"\n                f\"has invalid type '{credentials.type}'\"\n            )\n            continue",
                          "children": [
                            {
                              "value": "logger.warning(\n                f\"User {user_id} credentials {credentials.id} with provider 'llm' \"\n                f\"has invalid type '{credentials.type}'\"\n            )",
                              "children": [
                                {
                                  "value": "logger.warning(\n                f\"User {user_id} credentials {credentials.id} with provider 'llm' \"\n                f\"has invalid type '{credentials.type}'\"\n            )",
                                  "children": [
                                    {
                                      "value": "logger.warning",
                                      "children": [
                                        {
                                          "value": "logger",
                                          "children": []
                                        },
                                        {
                                          "value": "warning",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(\n                f\"User {user_id} credentials {credentials.id} with provider 'llm' \"\n                f\"has invalid type '{credentials.type}'\"\n            )",
                                      "children": [
                                        {
                                          "value": "f\"User {user_id} credentials {credentials.id} with provider 'llm' \"\n                f\"has invalid type '{credentials.type}'\"",
                                          "children": [
                                            {
                                              "value": "f\"User {user_id} credentials {credentials.id} with provider 'llm' \"",
                                              "children": [
                                                {
                                                  "value": "f\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "User",
                                                  "children": []
                                                },
                                                {
                                                  "value": "{user_id}",
                                                  "children": [
                                                    {
                                                      "value": "user_id",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "credentials",
                                                  "children": []
                                                },
                                                {
                                                  "value": "{credentials.id}",
                                                  "children": [
                                                    {
                                                      "value": "credentials.id",
                                                      "children": [
                                                        {
                                                          "value": "credentials",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "id",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "with provider 'llm'",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "f\"has invalid type '{credentials.type}'\"",
                                              "children": [
                                                {
                                                  "value": "f\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "has invalid type '",
                                                  "children": []
                                                },
                                                {
                                                  "value": "{credentials.type}",
                                                  "children": [
                                                    {
                                                      "value": "credentials.type",
                                                      "children": [
                                                        {
                                                          "value": "credentials",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "type",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "'",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "continue",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "api_key = credentials.api_key.get_secret_value()",
                      "children": [
                        {
                          "value": "api_key = credentials.api_key.get_secret_value()",
                          "children": [
                            {
                              "value": "api_key",
                              "children": []
                            },
                            {
                              "value": "credentials.api_key.get_secret_value()",
                              "children": [
                                {
                                  "value": "credentials.api_key.get_secret_value",
                                  "children": [
                                    {
                                      "value": "credentials.api_key",
                                      "children": [
                                        {
                                          "value": "credentials",
                                          "children": []
                                        },
                                        {
                                          "value": "api_key",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "get_secret_value",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if api_key.startswith(\"sk-ant-api03-\"):\n            credentials.provider = credentials_meta[\"provider\"] = \"anthropic\"\n        elif api_key.startswith(\"sk-\"):\n            credentials.provider = credentials_meta[\"provider\"] = \"openai\"\n        elif api_key.startswith(\"gsk_\"):\n            credentials.provider = credentials_meta[\"provider\"] = \"groq\"\n        else:\n            logger.warning(\n                f\"Could not identify provider from key prefix {api_key[:13]}*****\"\n            )\n            continue",
                      "children": [
                        {
                          "value": "api_key.startswith(\"sk-ant-api03-\")",
                          "children": [
                            {
                              "value": "api_key.startswith",
                              "children": [
                                {
                                  "value": "api_key",
                                  "children": []
                                },
                                {
                                  "value": "startswith",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(\"sk-ant-api03-\")",
                              "children": [
                                {
                                  "value": "\"sk-ant-api03-\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "sk-ant-api03-",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "credentials.provider = credentials_meta[\"provider\"] = \"anthropic\"",
                          "children": [
                            {
                              "value": "credentials.provider = credentials_meta[\"provider\"] = \"anthropic\"",
                              "children": [
                                {
                                  "value": "credentials.provider = credentials_meta[\"provider\"] = \"anthropic\"",
                                  "children": [
                                    {
                                      "value": "credentials.provider",
                                      "children": [
                                        {
                                          "value": "credentials",
                                          "children": []
                                        },
                                        {
                                          "value": "provider",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "credentials_meta[\"provider\"] = \"anthropic\"",
                                      "children": [
                                        {
                                          "value": "credentials_meta[\"provider\"]",
                                          "children": [
                                            {
                                              "value": "credentials_meta",
                                              "children": []
                                            },
                                            {
                                              "value": "\"provider\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "provider",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"anthropic\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "anthropic",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "elif api_key.startswith(\"sk-\"):\n            credentials.provider = credentials_meta[\"provider\"] = \"openai\"",
                          "children": [
                            {
                              "value": "api_key.startswith(\"sk-\")",
                              "children": [
                                {
                                  "value": "api_key.startswith",
                                  "children": [
                                    {
                                      "value": "api_key",
                                      "children": []
                                    },
                                    {
                                      "value": "startswith",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(\"sk-\")",
                                  "children": [
                                    {
                                      "value": "\"sk-\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "sk-",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "credentials.provider = credentials_meta[\"provider\"] = \"openai\"",
                              "children": [
                                {
                                  "value": "credentials.provider = credentials_meta[\"provider\"] = \"openai\"",
                                  "children": [
                                    {
                                      "value": "credentials.provider = credentials_meta[\"provider\"] = \"openai\"",
                                      "children": [
                                        {
                                          "value": "credentials.provider",
                                          "children": [
                                            {
                                              "value": "credentials",
                                              "children": []
                                            },
                                            {
                                              "value": "provider",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "credentials_meta[\"provider\"] = \"openai\"",
                                          "children": [
                                            {
                                              "value": "credentials_meta[\"provider\"]",
                                              "children": [
                                                {
                                                  "value": "credentials_meta",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"provider\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "provider",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"openai\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "openai",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "elif api_key.startswith(\"gsk_\"):\n            credentials.provider = credentials_meta[\"provider\"] = \"groq\"",
                          "children": [
                            {
                              "value": "api_key.startswith(\"gsk_\")",
                              "children": [
                                {
                                  "value": "api_key.startswith",
                                  "children": [
                                    {
                                      "value": "api_key",
                                      "children": []
                                    },
                                    {
                                      "value": "startswith",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(\"gsk_\")",
                                  "children": [
                                    {
                                      "value": "\"gsk_\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "gsk_",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "credentials.provider = credentials_meta[\"provider\"] = \"groq\"",
                              "children": [
                                {
                                  "value": "credentials.provider = credentials_meta[\"provider\"] = \"groq\"",
                                  "children": [
                                    {
                                      "value": "credentials.provider = credentials_meta[\"provider\"] = \"groq\"",
                                      "children": [
                                        {
                                          "value": "credentials.provider",
                                          "children": [
                                            {
                                              "value": "credentials",
                                              "children": []
                                            },
                                            {
                                              "value": "provider",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "credentials_meta[\"provider\"] = \"groq\"",
                                          "children": [
                                            {
                                              "value": "credentials_meta[\"provider\"]",
                                              "children": [
                                                {
                                                  "value": "credentials_meta",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"provider\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "provider",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"groq\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "groq",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "else:\n            logger.warning(\n                f\"Could not identify provider from key prefix {api_key[:13]}*****\"\n            )\n            continue",
                          "children": [
                            {
                              "value": "logger.warning(\n                f\"Could not identify provider from key prefix {api_key[:13]}*****\"\n            )\n            continue",
                              "children": [
                                {
                                  "value": "logger.warning(\n                f\"Could not identify provider from key prefix {api_key[:13]}*****\"\n            )",
                                  "children": [
                                    {
                                      "value": "logger.warning(\n                f\"Could not identify provider from key prefix {api_key[:13]}*****\"\n            )",
                                      "children": [
                                        {
                                          "value": "logger.warning",
                                          "children": [
                                            {
                                              "value": "logger",
                                              "children": []
                                            },
                                            {
                                              "value": "warning",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(\n                f\"Could not identify provider from key prefix {api_key[:13]}*****\"\n            )",
                                          "children": [
                                            {
                                              "value": "f\"Could not identify provider from key prefix {api_key[:13]}*****\"",
                                              "children": [
                                                {
                                                  "value": "f\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "Could not identify provider from key prefix",
                                                  "children": []
                                                },
                                                {
                                                  "value": "{api_key[:13]}",
                                                  "children": [
                                                    {
                                                      "value": "api_key[:13]",
                                                      "children": [
                                                        {
                                                          "value": "api_key",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": ":13",
                                                          "children": [
                                                            {
                                                              "value": "13",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "*****",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "continue",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "store.update_creds(user_id, credentials)",
                      "children": [
                        {
                          "value": "store.update_creds(user_id, credentials)",
                          "children": [
                            {
                              "value": "store.update_creds",
                              "children": [
                                {
                                  "value": "store",
                                  "children": []
                                },
                                {
                                  "value": "update_creds",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(user_id, credentials)",
                              "children": [
                                {
                                  "value": "user_id",
                                  "children": []
                                },
                                {
                                  "value": "credentials",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "await AgentNode.prisma().update(\n            where={\"id\": node_id},\n            data={\"constantInput\": json.dumps(node_preset_input)},\n        )",
                      "children": [
                        {
                          "value": "await AgentNode.prisma().update(\n            where={\"id\": node_id},\n            data={\"constantInput\": json.dumps(node_preset_input)},\n        )",
                          "children": [
                            {
                              "value": "AgentNode.prisma().update(\n            where={\"id\": node_id},\n            data={\"constantInput\": json.dumps(node_preset_input)},\n        )",
                              "children": [
                                {
                                  "value": "AgentNode.prisma().update",
                                  "children": [
                                    {
                                      "value": "AgentNode.prisma()",
                                      "children": [
                                        {
                                          "value": "AgentNode.prisma",
                                          "children": [
                                            {
                                              "value": "AgentNode",
                                              "children": []
                                            },
                                            {
                                              "value": "prisma",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "()",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "update",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(\n            where={\"id\": node_id},\n            data={\"constantInput\": json.dumps(node_preset_input)},\n        )",
                                  "children": [
                                    {
                                      "value": "where={\"id\": node_id}",
                                      "children": [
                                        {
                                          "value": "where",
                                          "children": []
                                        },
                                        {
                                          "value": "{\"id\": node_id}",
                                          "children": [
                                            {
                                              "value": "\"id\": node_id",
                                              "children": [
                                                {
                                                  "value": "\"id\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "id",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "node_id",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "data={\"constantInput\": json.dumps(node_preset_input)}",
                                      "children": [
                                        {
                                          "value": "data",
                                          "children": []
                                        },
                                        {
                                          "value": "{\"constantInput\": json.dumps(node_preset_input)}",
                                          "children": [
                                            {
                                              "value": "\"constantInput\": json.dumps(node_preset_input)",
                                              "children": [
                                                {
                                                  "value": "\"constantInput\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "constantInput",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "json.dumps(node_preset_input)",
                                                  "children": [
                                                    {
                                                      "value": "json.dumps",
                                                      "children": [
                                                        {
                                                          "value": "json",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "dumps",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "(node_preset_input)",
                                                      "children": [
                                                        {
                                                          "value": "node_preset_input",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}