{
  "value": "from typing import Any, Dict\n\nimport jwt\n\nfrom .config import settings\n\n\ndef parse_jwt_token(token: str) -> Dict[str, Any]:\n    \"\"\"\n    Parse and validate a JWT token.\n\n    :param token: The token to parse\n    :return: The decoded payload\n    :raises ValueError: If the token is invalid or expired\n    \"\"\"\n    try:\n        payload = jwt.decode(\n            token,\n            settings.JWT_SECRET_KEY,\n            algorithms=[settings.JWT_ALGORITHM],\n            audience=\"authenticated\",\n        )\n        return payload\n    except jwt.ExpiredSignatureError:\n        raise ValueError(\"Token has expired\")\n    except jwt.InvalidTokenError as e:\n        raise ValueError(f\"Invalid token: {str(e)}\")",
  "children": [
    {
      "value": "from typing import Any, Dict",
      "children": [
        {
          "value": "typing",
          "children": [
            {
              "value": "typing",
              "children": []
            }
          ]
        },
        {
          "value": "Any",
          "children": [
            {
              "value": "Any",
              "children": []
            }
          ]
        },
        {
          "value": "Dict",
          "children": [
            {
              "value": "Dict",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import jwt",
      "children": [
        {
          "value": "jwt",
          "children": [
            {
              "value": "jwt",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from .config import settings",
      "children": [
        {
          "value": ".config",
          "children": [
            {
              "value": ".",
              "children": []
            },
            {
              "value": "config",
              "children": [
                {
                  "value": "config",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "settings",
          "children": [
            {
              "value": "settings",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "def parse_jwt_token(token: str) -> Dict[str, Any]:\n    \"\"\"\n    Parse and validate a JWT token.\n\n    :param token: The token to parse\n    :return: The decoded payload\n    :raises ValueError: If the token is invalid or expired\n    \"\"\"\n    try:\n        payload = jwt.decode(\n            token,\n            settings.JWT_SECRET_KEY,\n            algorithms=[settings.JWT_ALGORITHM],\n            audience=\"authenticated\",\n        )\n        return payload\n    except jwt.ExpiredSignatureError:\n        raise ValueError(\"Token has expired\")\n    except jwt.InvalidTokenError as e:\n        raise ValueError(f\"Invalid token: {str(e)}\")",
      "children": [
        {
          "value": "parse_jwt_token",
          "children": []
        },
        {
          "value": "(token: str)",
          "children": [
            {
              "value": "token: str",
              "children": [
                {
                  "value": "token",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "Dict[str, Any]",
          "children": [
            {
              "value": "Dict[str, Any]",
              "children": [
                {
                  "value": "Dict",
                  "children": []
                },
                {
                  "value": "[str, Any]",
                  "children": [
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "Any",
                      "children": [
                        {
                          "value": "Any",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "\"\"\"\n    Parse and validate a JWT token.\n\n    :param token: The token to parse\n    :return: The decoded payload\n    :raises ValueError: If the token is invalid or expired\n    \"\"\"\n    try:\n        payload = jwt.decode(\n            token,\n            settings.JWT_SECRET_KEY,\n            algorithms=[settings.JWT_ALGORITHM],\n            audience=\"authenticated\",\n        )\n        return payload\n    except jwt.ExpiredSignatureError:\n        raise ValueError(\"Token has expired\")\n    except jwt.InvalidTokenError as e:\n        raise ValueError(f\"Invalid token: {str(e)}\")",
          "children": [
            {
              "value": "\"\"\"\n    Parse and validate a JWT token.\n\n    :param token: The token to parse\n    :return: The decoded payload\n    :raises ValueError: If the token is invalid or expired\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    Parse and validate a JWT token.\n\n    :param token: The token to parse\n    :return: The decoded payload\n    :raises ValueError: If the token is invalid or expired\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Parse and validate a JWT token.\n\n    :param token: The token to parse\n    :return: The decoded payload\n    :raises ValueError: If the token is invalid or expired",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "try:\n        payload = jwt.decode(\n            token,\n            settings.JWT_SECRET_KEY,\n            algorithms=[settings.JWT_ALGORITHM],\n            audience=\"authenticated\",\n        )\n        return payload\n    except jwt.ExpiredSignatureError:\n        raise ValueError(\"Token has expired\")\n    except jwt.InvalidTokenError as e:\n        raise ValueError(f\"Invalid token: {str(e)}\")",
              "children": [
                {
                  "value": "payload = jwt.decode(\n            token,\n            settings.JWT_SECRET_KEY,\n            algorithms=[settings.JWT_ALGORITHM],\n            audience=\"authenticated\",\n        )\n        return payload",
                  "children": [
                    {
                      "value": "payload = jwt.decode(\n            token,\n            settings.JWT_SECRET_KEY,\n            algorithms=[settings.JWT_ALGORITHM],\n            audience=\"authenticated\",\n        )",
                      "children": [
                        {
                          "value": "payload = jwt.decode(\n            token,\n            settings.JWT_SECRET_KEY,\n            algorithms=[settings.JWT_ALGORITHM],\n            audience=\"authenticated\",\n        )",
                          "children": [
                            {
                              "value": "payload",
                              "children": []
                            },
                            {
                              "value": "jwt.decode(\n            token,\n            settings.JWT_SECRET_KEY,\n            algorithms=[settings.JWT_ALGORITHM],\n            audience=\"authenticated\",\n        )",
                              "children": [
                                {
                                  "value": "jwt.decode",
                                  "children": [
                                    {
                                      "value": "jwt",
                                      "children": []
                                    },
                                    {
                                      "value": "decode",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(\n            token,\n            settings.JWT_SECRET_KEY,\n            algorithms=[settings.JWT_ALGORITHM],\n            audience=\"authenticated\",\n        )",
                                  "children": [
                                    {
                                      "value": "token",
                                      "children": []
                                    },
                                    {
                                      "value": "settings.JWT_SECRET_KEY",
                                      "children": [
                                        {
                                          "value": "settings",
                                          "children": []
                                        },
                                        {
                                          "value": "JWT_SECRET_KEY",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "algorithms=[settings.JWT_ALGORITHM]",
                                      "children": [
                                        {
                                          "value": "algorithms",
                                          "children": []
                                        },
                                        {
                                          "value": "[settings.JWT_ALGORITHM]",
                                          "children": [
                                            {
                                              "value": "settings.JWT_ALGORITHM",
                                              "children": [
                                                {
                                                  "value": "settings",
                                                  "children": []
                                                },
                                                {
                                                  "value": "JWT_ALGORITHM",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "audience=\"authenticated\"",
                                      "children": [
                                        {
                                          "value": "audience",
                                          "children": []
                                        },
                                        {
                                          "value": "\"authenticated\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "authenticated",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return payload",
                      "children": [
                        {
                          "value": "payload",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "except jwt.ExpiredSignatureError:\n        raise ValueError(\"Token has expired\")",
                  "children": [
                    {
                      "value": "jwt.ExpiredSignatureError",
                      "children": [
                        {
                          "value": "jwt",
                          "children": []
                        },
                        {
                          "value": "ExpiredSignatureError",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "raise ValueError(\"Token has expired\")",
                      "children": [
                        {
                          "value": "raise ValueError(\"Token has expired\")",
                          "children": [
                            {
                              "value": "ValueError(\"Token has expired\")",
                              "children": [
                                {
                                  "value": "ValueError",
                                  "children": []
                                },
                                {
                                  "value": "(\"Token has expired\")",
                                  "children": [
                                    {
                                      "value": "\"Token has expired\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Token has expired",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "except jwt.InvalidTokenError as e:\n        raise ValueError(f\"Invalid token: {str(e)}\")",
                  "children": [
                    {
                      "value": "jwt.InvalidTokenError as e",
                      "children": [
                        {
                          "value": "jwt.InvalidTokenError",
                          "children": [
                            {
                              "value": "jwt",
                              "children": []
                            },
                            {
                              "value": "InvalidTokenError",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "e",
                          "children": [
                            {
                              "value": "e",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "raise ValueError(f\"Invalid token: {str(e)}\")",
                      "children": [
                        {
                          "value": "raise ValueError(f\"Invalid token: {str(e)}\")",
                          "children": [
                            {
                              "value": "ValueError(f\"Invalid token: {str(e)}\")",
                              "children": [
                                {
                                  "value": "ValueError",
                                  "children": []
                                },
                                {
                                  "value": "(f\"Invalid token: {str(e)}\")",
                                  "children": [
                                    {
                                      "value": "f\"Invalid token: {str(e)}\"",
                                      "children": [
                                        {
                                          "value": "f\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Invalid token:",
                                          "children": []
                                        },
                                        {
                                          "value": "{str(e)}",
                                          "children": [
                                            {
                                              "value": "str(e)",
                                              "children": [
                                                {
                                                  "value": "str",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(e)",
                                                  "children": [
                                                    {
                                                      "value": "e",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}