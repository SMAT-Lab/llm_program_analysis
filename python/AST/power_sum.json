{
  "value": "\"\"\"\nProblem source: https://www.hackerrank.com/challenges/the-power-sum/problem\nFind the number of ways that a given integer X, can be expressed as the sum\nof the Nth powers of unique, natural numbers. For example, if X=13 and N=2.\nWe have to find all combinations of unique squares adding up to 13.\nThe only solution is 2^2+3^2. Constraints: 1<=X<=1000, 2<=N<=10.\n\"\"\"\n\n\ndef backtrack(\n    needed_sum: int,\n    power: int,\n    current_number: int,\n    current_sum: int,\n    solutions_count: int,\n) -> tuple[int, int]:\n    \"\"\"\n    >>> backtrack(13, 2, 1, 0, 0)\n    (0, 1)\n    >>> backtrack(10, 2, 1, 0, 0)\n    (0, 1)\n    >>> backtrack(10, 3, 1, 0, 0)\n    (0, 0)\n    >>> backtrack(20, 2, 1, 0, 0)\n    (0, 1)\n    >>> backtrack(15, 10, 1, 0, 0)\n    (0, 0)\n    >>> backtrack(16, 2, 1, 0, 0)\n    (0, 1)\n    >>> backtrack(20, 1, 1, 0, 0)\n    (0, 64)\n    \"\"\"\n    if current_sum == needed_sum:\n        # If the sum of the powers is equal to needed_sum, then we have a solution.\n        solutions_count += 1\n        return current_sum, solutions_count\n\n    i_to_n = current_number**power\n    if current_sum + i_to_n <= needed_sum:\n        # If the sum of the powers is less than needed_sum, then continue adding powers.\n        current_sum += i_to_n\n        current_sum, solutions_count = backtrack(\n            needed_sum, power, current_number + 1, current_sum, solutions_count\n        )\n        current_sum -= i_to_n\n    if i_to_n < needed_sum:\n        # If the power of i is less than needed_sum, then try with the next power.\n        current_sum, solutions_count = backtrack(\n            needed_sum, power, current_number + 1, current_sum, solutions_count\n        )\n    return current_sum, solutions_count\n\n\ndef solve(needed_sum: int, power: int) -> int:\n    \"\"\"\n    >>> solve(13, 2)\n    1\n    >>> solve(10, 2)\n    1\n    >>> solve(10, 3)\n    0\n    >>> solve(20, 2)\n    1\n    >>> solve(15, 10)\n    0\n    >>> solve(16, 2)\n    1\n    >>> solve(20, 1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Invalid input\n    needed_sum must be between 1 and 1000, power between 2 and 10.\n    >>> solve(-10, 5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Invalid input\n    needed_sum must be between 1 and 1000, power between 2 and 10.\n    \"\"\"\n    if not (1 <= needed_sum <= 1000 and 2 <= power <= 10):\n        raise ValueError(\n            \"Invalid input\\n\"\n            \"needed_sum must be between 1 and 1000, power between 2 and 10.\"\n        )\n\n    return backtrack(needed_sum, power, 1, 0, 0)[1]  # Return the solutions_count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
  "children": [
    {
      "value": "\"\"\"\nProblem source: https://www.hackerrank.com/challenges/the-power-sum/problem\nFind the number of ways that a given integer X, can be expressed as the sum\nof the Nth powers of unique, natural numbers. For example, if X=13 and N=2.\nWe have to find all combinations of unique squares adding up to 13.\nThe only solution is 2^2+3^2. Constraints: 1<=X<=1000, 2<=N<=10.\n\"\"\"",
      "children": [
        {
          "value": "\"\"\"\nProblem source: https://www.hackerrank.com/challenges/the-power-sum/problem\nFind the number of ways that a given integer X, can be expressed as the sum\nof the Nth powers of unique, natural numbers. For example, if X=13 and N=2.\nWe have to find all combinations of unique squares adding up to 13.\nThe only solution is 2^2+3^2. Constraints: 1<=X<=1000, 2<=N<=10.\n\"\"\"",
          "children": [
            {
              "value": "\"\"\"",
              "children": []
            },
            {
              "value": "Problem source: https://www.hackerrank.com/challenges/the-power-sum/problem\nFind the number of ways that a given integer X, can be expressed as the sum\nof the Nth powers of unique, natural numbers. For example, if X=13 and N=2.\nWe have to find all combinations of unique squares adding up to 13.\nThe only solution is 2^2+3^2. Constraints: 1<=X<=1000, 2<=N<=10.",
              "children": []
            },
            {
              "value": "\"\"\"",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "def backtrack(\n    needed_sum: int,\n    power: int,\n    current_number: int,\n    current_sum: int,\n    solutions_count: int,\n) -> tuple[int, int]:\n    \"\"\"\n    >>> backtrack(13, 2, 1, 0, 0)\n    (0, 1)\n    >>> backtrack(10, 2, 1, 0, 0)\n    (0, 1)\n    >>> backtrack(10, 3, 1, 0, 0)\n    (0, 0)\n    >>> backtrack(20, 2, 1, 0, 0)\n    (0, 1)\n    >>> backtrack(15, 10, 1, 0, 0)\n    (0, 0)\n    >>> backtrack(16, 2, 1, 0, 0)\n    (0, 1)\n    >>> backtrack(20, 1, 1, 0, 0)\n    (0, 64)\n    \"\"\"\n    if current_sum == needed_sum:\n        # If the sum of the powers is equal to needed_sum, then we have a solution.\n        solutions_count += 1\n        return current_sum, solutions_count\n\n    i_to_n = current_number**power\n    if current_sum + i_to_n <= needed_sum:\n        # If the sum of the powers is less than needed_sum, then continue adding powers.\n        current_sum += i_to_n\n        current_sum, solutions_count = backtrack(\n            needed_sum, power, current_number + 1, current_sum, solutions_count\n        )\n        current_sum -= i_to_n\n    if i_to_n < needed_sum:\n        # If the power of i is less than needed_sum, then try with the next power.\n        current_sum, solutions_count = backtrack(\n            needed_sum, power, current_number + 1, current_sum, solutions_count\n        )\n    return current_sum, solutions_count",
      "children": [
        {
          "value": "backtrack",
          "children": []
        },
        {
          "value": "(\n    needed_sum: int,\n    power: int,\n    current_number: int,\n    current_sum: int,\n    solutions_count: int,\n)",
          "children": [
            {
              "value": "needed_sum: int",
              "children": [
                {
                  "value": "needed_sum",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "power: int",
              "children": [
                {
                  "value": "power",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "current_number: int",
              "children": [
                {
                  "value": "current_number",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "current_sum: int",
              "children": [
                {
                  "value": "current_sum",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "solutions_count: int",
              "children": [
                {
                  "value": "solutions_count",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "tuple[int, int]",
          "children": [
            {
              "value": "tuple[int, int]",
              "children": [
                {
                  "value": "tuple",
                  "children": []
                },
                {
                  "value": "[int, int]",
                  "children": [
                    {
                      "value": "int",
                      "children": [
                        {
                          "value": "int",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "int",
                      "children": [
                        {
                          "value": "int",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "\"\"\"\n    >>> backtrack(13, 2, 1, 0, 0)\n    (0, 1)\n    >>> backtrack(10, 2, 1, 0, 0)\n    (0, 1)\n    >>> backtrack(10, 3, 1, 0, 0)\n    (0, 0)\n    >>> backtrack(20, 2, 1, 0, 0)\n    (0, 1)\n    >>> backtrack(15, 10, 1, 0, 0)\n    (0, 0)\n    >>> backtrack(16, 2, 1, 0, 0)\n    (0, 1)\n    >>> backtrack(20, 1, 1, 0, 0)\n    (0, 64)\n    \"\"\"\n    if current_sum == needed_sum:\n        # If the sum of the powers is equal to needed_sum, then we have a solution.\n        solutions_count += 1\n        return current_sum, solutions_count\n\n    i_to_n = current_number**power\n    if current_sum + i_to_n <= needed_sum:\n        # If the sum of the powers is less than needed_sum, then continue adding powers.\n        current_sum += i_to_n\n        current_sum, solutions_count = backtrack(\n            needed_sum, power, current_number + 1, current_sum, solutions_count\n        )\n        current_sum -= i_to_n\n    if i_to_n < needed_sum:\n        # If the power of i is less than needed_sum, then try with the next power.\n        current_sum, solutions_count = backtrack(\n            needed_sum, power, current_number + 1, current_sum, solutions_count\n        )\n    return current_sum, solutions_count",
          "children": [
            {
              "value": "\"\"\"\n    >>> backtrack(13, 2, 1, 0, 0)\n    (0, 1)\n    >>> backtrack(10, 2, 1, 0, 0)\n    (0, 1)\n    >>> backtrack(10, 3, 1, 0, 0)\n    (0, 0)\n    >>> backtrack(20, 2, 1, 0, 0)\n    (0, 1)\n    >>> backtrack(15, 10, 1, 0, 0)\n    (0, 0)\n    >>> backtrack(16, 2, 1, 0, 0)\n    (0, 1)\n    >>> backtrack(20, 1, 1, 0, 0)\n    (0, 64)\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    >>> backtrack(13, 2, 1, 0, 0)\n    (0, 1)\n    >>> backtrack(10, 2, 1, 0, 0)\n    (0, 1)\n    >>> backtrack(10, 3, 1, 0, 0)\n    (0, 0)\n    >>> backtrack(20, 2, 1, 0, 0)\n    (0, 1)\n    >>> backtrack(15, 10, 1, 0, 0)\n    (0, 0)\n    >>> backtrack(16, 2, 1, 0, 0)\n    (0, 1)\n    >>> backtrack(20, 1, 1, 0, 0)\n    (0, 64)\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": ">>> backtrack(13, 2, 1, 0, 0)\n    (0, 1)\n    >>> backtrack(10, 2, 1, 0, 0)\n    (0, 1)\n    >>> backtrack(10, 3, 1, 0, 0)\n    (0, 0)\n    >>> backtrack(20, 2, 1, 0, 0)\n    (0, 1)\n    >>> backtrack(15, 10, 1, 0, 0)\n    (0, 0)\n    >>> backtrack(16, 2, 1, 0, 0)\n    (0, 1)\n    >>> backtrack(20, 1, 1, 0, 0)\n    (0, 64)",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "if current_sum == needed_sum:\n        # If the sum of the powers is equal to needed_sum, then we have a solution.\n        solutions_count += 1\n        return current_sum, solutions_count",
              "children": [
                {
                  "value": "current_sum == needed_sum",
                  "children": [
                    {
                      "value": "current_sum",
                      "children": []
                    },
                    {
                      "value": "needed_sum",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "# If the sum of the powers is equal to needed_sum, then we have a solution.",
                  "children": []
                },
                {
                  "value": "solutions_count += 1\n        return current_sum, solutions_count",
                  "children": [
                    {
                      "value": "solutions_count += 1",
                      "children": [
                        {
                          "value": "solutions_count += 1",
                          "children": [
                            {
                              "value": "solutions_count",
                              "children": []
                            },
                            {
                              "value": "1",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return current_sum, solutions_count",
                      "children": [
                        {
                          "value": "current_sum, solutions_count",
                          "children": [
                            {
                              "value": "current_sum",
                              "children": []
                            },
                            {
                              "value": "solutions_count",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "i_to_n = current_number**power",
              "children": [
                {
                  "value": "i_to_n = current_number**power",
                  "children": [
                    {
                      "value": "i_to_n",
                      "children": []
                    },
                    {
                      "value": "current_number**power",
                      "children": [
                        {
                          "value": "current_number",
                          "children": []
                        },
                        {
                          "value": "power",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "if current_sum + i_to_n <= needed_sum:\n        # If the sum of the powers is less than needed_sum, then continue adding powers.\n        current_sum += i_to_n\n        current_sum, solutions_count = backtrack(\n            needed_sum, power, current_number + 1, current_sum, solutions_count\n        )\n        current_sum -= i_to_n",
              "children": [
                {
                  "value": "current_sum + i_to_n <= needed_sum",
                  "children": [
                    {
                      "value": "current_sum + i_to_n",
                      "children": [
                        {
                          "value": "current_sum",
                          "children": []
                        },
                        {
                          "value": "i_to_n",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "needed_sum",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "# If the sum of the powers is less than needed_sum, then continue adding powers.",
                  "children": []
                },
                {
                  "value": "current_sum += i_to_n\n        current_sum, solutions_count = backtrack(\n            needed_sum, power, current_number + 1, current_sum, solutions_count\n        )\n        current_sum -= i_to_n",
                  "children": [
                    {
                      "value": "current_sum += i_to_n",
                      "children": [
                        {
                          "value": "current_sum += i_to_n",
                          "children": [
                            {
                              "value": "current_sum",
                              "children": []
                            },
                            {
                              "value": "i_to_n",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "current_sum, solutions_count = backtrack(\n            needed_sum, power, current_number + 1, current_sum, solutions_count\n        )",
                      "children": [
                        {
                          "value": "current_sum, solutions_count = backtrack(\n            needed_sum, power, current_number + 1, current_sum, solutions_count\n        )",
                          "children": [
                            {
                              "value": "current_sum, solutions_count",
                              "children": [
                                {
                                  "value": "current_sum",
                                  "children": []
                                },
                                {
                                  "value": "solutions_count",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "backtrack(\n            needed_sum, power, current_number + 1, current_sum, solutions_count\n        )",
                              "children": [
                                {
                                  "value": "backtrack",
                                  "children": []
                                },
                                {
                                  "value": "(\n            needed_sum, power, current_number + 1, current_sum, solutions_count\n        )",
                                  "children": [
                                    {
                                      "value": "needed_sum",
                                      "children": []
                                    },
                                    {
                                      "value": "power",
                                      "children": []
                                    },
                                    {
                                      "value": "current_number + 1",
                                      "children": [
                                        {
                                          "value": "current_number",
                                          "children": []
                                        },
                                        {
                                          "value": "1",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "current_sum",
                                      "children": []
                                    },
                                    {
                                      "value": "solutions_count",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "current_sum -= i_to_n",
                      "children": [
                        {
                          "value": "current_sum -= i_to_n",
                          "children": [
                            {
                              "value": "current_sum",
                              "children": []
                            },
                            {
                              "value": "i_to_n",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "if i_to_n < needed_sum:\n        # If the power of i is less than needed_sum, then try with the next power.\n        current_sum, solutions_count = backtrack(\n            needed_sum, power, current_number + 1, current_sum, solutions_count\n        )",
              "children": [
                {
                  "value": "i_to_n < needed_sum",
                  "children": [
                    {
                      "value": "i_to_n",
                      "children": []
                    },
                    {
                      "value": "needed_sum",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "# If the power of i is less than needed_sum, then try with the next power.",
                  "children": []
                },
                {
                  "value": "current_sum, solutions_count = backtrack(\n            needed_sum, power, current_number + 1, current_sum, solutions_count\n        )",
                  "children": [
                    {
                      "value": "current_sum, solutions_count = backtrack(\n            needed_sum, power, current_number + 1, current_sum, solutions_count\n        )",
                      "children": [
                        {
                          "value": "current_sum, solutions_count = backtrack(\n            needed_sum, power, current_number + 1, current_sum, solutions_count\n        )",
                          "children": [
                            {
                              "value": "current_sum, solutions_count",
                              "children": [
                                {
                                  "value": "current_sum",
                                  "children": []
                                },
                                {
                                  "value": "solutions_count",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "backtrack(\n            needed_sum, power, current_number + 1, current_sum, solutions_count\n        )",
                              "children": [
                                {
                                  "value": "backtrack",
                                  "children": []
                                },
                                {
                                  "value": "(\n            needed_sum, power, current_number + 1, current_sum, solutions_count\n        )",
                                  "children": [
                                    {
                                      "value": "needed_sum",
                                      "children": []
                                    },
                                    {
                                      "value": "power",
                                      "children": []
                                    },
                                    {
                                      "value": "current_number + 1",
                                      "children": [
                                        {
                                          "value": "current_number",
                                          "children": []
                                        },
                                        {
                                          "value": "1",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "current_sum",
                                      "children": []
                                    },
                                    {
                                      "value": "solutions_count",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "return current_sum, solutions_count",
              "children": [
                {
                  "value": "current_sum, solutions_count",
                  "children": [
                    {
                      "value": "current_sum",
                      "children": []
                    },
                    {
                      "value": "solutions_count",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def solve(needed_sum: int, power: int) -> int:\n    \"\"\"\n    >>> solve(13, 2)\n    1\n    >>> solve(10, 2)\n    1\n    >>> solve(10, 3)\n    0\n    >>> solve(20, 2)\n    1\n    >>> solve(15, 10)\n    0\n    >>> solve(16, 2)\n    1\n    >>> solve(20, 1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Invalid input\n    needed_sum must be between 1 and 1000, power between 2 and 10.\n    >>> solve(-10, 5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Invalid input\n    needed_sum must be between 1 and 1000, power between 2 and 10.\n    \"\"\"\n    if not (1 <= needed_sum <= 1000 and 2 <= power <= 10):\n        raise ValueError(\n            \"Invalid input\\n\"\n            \"needed_sum must be between 1 and 1000, power between 2 and 10.\"\n        )\n\n    return backtrack(needed_sum, power, 1, 0, 0)[1]  # Return the solutions_count",
      "children": [
        {
          "value": "solve",
          "children": []
        },
        {
          "value": "(needed_sum: int, power: int)",
          "children": [
            {
              "value": "needed_sum: int",
              "children": [
                {
                  "value": "needed_sum",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "power: int",
              "children": [
                {
                  "value": "power",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "int",
          "children": [
            {
              "value": "int",
              "children": []
            }
          ]
        },
        {
          "value": "\"\"\"\n    >>> solve(13, 2)\n    1\n    >>> solve(10, 2)\n    1\n    >>> solve(10, 3)\n    0\n    >>> solve(20, 2)\n    1\n    >>> solve(15, 10)\n    0\n    >>> solve(16, 2)\n    1\n    >>> solve(20, 1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Invalid input\n    needed_sum must be between 1 and 1000, power between 2 and 10.\n    >>> solve(-10, 5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Invalid input\n    needed_sum must be between 1 and 1000, power between 2 and 10.\n    \"\"\"\n    if not (1 <= needed_sum <= 1000 and 2 <= power <= 10):\n        raise ValueError(\n            \"Invalid input\\n\"\n            \"needed_sum must be between 1 and 1000, power between 2 and 10.\"\n        )\n\n    return backtrack(needed_sum, power, 1, 0, 0)[1]  # Return the solutions_count",
          "children": [
            {
              "value": "\"\"\"\n    >>> solve(13, 2)\n    1\n    >>> solve(10, 2)\n    1\n    >>> solve(10, 3)\n    0\n    >>> solve(20, 2)\n    1\n    >>> solve(15, 10)\n    0\n    >>> solve(16, 2)\n    1\n    >>> solve(20, 1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Invalid input\n    needed_sum must be between 1 and 1000, power between 2 and 10.\n    >>> solve(-10, 5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Invalid input\n    needed_sum must be between 1 and 1000, power between 2 and 10.\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    >>> solve(13, 2)\n    1\n    >>> solve(10, 2)\n    1\n    >>> solve(10, 3)\n    0\n    >>> solve(20, 2)\n    1\n    >>> solve(15, 10)\n    0\n    >>> solve(16, 2)\n    1\n    >>> solve(20, 1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Invalid input\n    needed_sum must be between 1 and 1000, power between 2 and 10.\n    >>> solve(-10, 5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Invalid input\n    needed_sum must be between 1 and 1000, power between 2 and 10.\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": ">>> solve(13, 2)\n    1\n    >>> solve(10, 2)\n    1\n    >>> solve(10, 3)\n    0\n    >>> solve(20, 2)\n    1\n    >>> solve(15, 10)\n    0\n    >>> solve(16, 2)\n    1\n    >>> solve(20, 1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Invalid input\n    needed_sum must be between 1 and 1000, power between 2 and 10.\n    >>> solve(-10, 5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Invalid input\n    needed_sum must be between 1 and 1000, power between 2 and 10.",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "if not (1 <= needed_sum <= 1000 and 2 <= power <= 10):\n        raise ValueError(\n            \"Invalid input\\n\"\n            \"needed_sum must be between 1 and 1000, power between 2 and 10.\"\n        )",
              "children": [
                {
                  "value": "not (1 <= needed_sum <= 1000 and 2 <= power <= 10)",
                  "children": [
                    {
                      "value": "(1 <= needed_sum <= 1000 and 2 <= power <= 10)",
                      "children": [
                        {
                          "value": "1 <= needed_sum <= 1000 and 2 <= power <= 10",
                          "children": [
                            {
                              "value": "1 <= needed_sum <= 1000",
                              "children": [
                                {
                                  "value": "1",
                                  "children": []
                                },
                                {
                                  "value": "needed_sum",
                                  "children": []
                                },
                                {
                                  "value": "1000",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "2 <= power <= 10",
                              "children": [
                                {
                                  "value": "2",
                                  "children": []
                                },
                                {
                                  "value": "power",
                                  "children": []
                                },
                                {
                                  "value": "10",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "raise ValueError(\n            \"Invalid input\\n\"\n            \"needed_sum must be between 1 and 1000, power between 2 and 10.\"\n        )",
                  "children": [
                    {
                      "value": "raise ValueError(\n            \"Invalid input\\n\"\n            \"needed_sum must be between 1 and 1000, power between 2 and 10.\"\n        )",
                      "children": [
                        {
                          "value": "ValueError(\n            \"Invalid input\\n\"\n            \"needed_sum must be between 1 and 1000, power between 2 and 10.\"\n        )",
                          "children": [
                            {
                              "value": "ValueError",
                              "children": []
                            },
                            {
                              "value": "(\n            \"Invalid input\\n\"\n            \"needed_sum must be between 1 and 1000, power between 2 and 10.\"\n        )",
                              "children": [
                                {
                                  "value": "\"Invalid input\\n\"\n            \"needed_sum must be between 1 and 1000, power between 2 and 10.\"",
                                  "children": [
                                    {
                                      "value": "\"Invalid input\\n\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "Invalid input\\n",
                                          "children": [
                                            {
                                              "value": "\\n",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "\"needed_sum must be between 1 and 1000, power between 2 and 10.\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "needed_sum must be between 1 and 1000, power between 2 and 10.",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "return backtrack(needed_sum, power, 1, 0, 0)[1]",
              "children": [
                {
                  "value": "backtrack(needed_sum, power, 1, 0, 0)[1]",
                  "children": [
                    {
                      "value": "backtrack(needed_sum, power, 1, 0, 0)",
                      "children": [
                        {
                          "value": "backtrack",
                          "children": []
                        },
                        {
                          "value": "(needed_sum, power, 1, 0, 0)",
                          "children": [
                            {
                              "value": "needed_sum",
                              "children": []
                            },
                            {
                              "value": "power",
                              "children": []
                            },
                            {
                              "value": "1",
                              "children": []
                            },
                            {
                              "value": "0",
                              "children": []
                            },
                            {
                              "value": "0",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "1",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "# Return the solutions_count",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "if __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      "children": [
        {
          "value": "__name__ == \"__main__\"",
          "children": [
            {
              "value": "__name__",
              "children": []
            },
            {
              "value": "\"__main__\"",
              "children": [
                {
                  "value": "\"",
                  "children": []
                },
                {
                  "value": "__main__",
                  "children": []
                },
                {
                  "value": "\"",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "import doctest\n\n    doctest.testmod()",
          "children": [
            {
              "value": "import doctest",
              "children": [
                {
                  "value": "doctest",
                  "children": [
                    {
                      "value": "doctest",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "doctest.testmod()",
              "children": [
                {
                  "value": "doctest.testmod()",
                  "children": [
                    {
                      "value": "doctest.testmod",
                      "children": [
                        {
                          "value": "doctest",
                          "children": []
                        },
                        {
                          "value": "testmod",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "()",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}