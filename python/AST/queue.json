{
  "value": "import asyncio\nimport json\nimport logging\nfrom abc import ABC, abstractmethod\nfrom datetime import datetime\nfrom typing import Any, AsyncGenerator, Generator, Generic, Optional, TypeVar\n\nfrom pydantic import BaseModel\nfrom redis.asyncio.client import PubSub as AsyncPubSub\nfrom redis.client import PubSub\n\nfrom backend.data import redis\n\nlogger = logging.getLogger(__name__)\n\n\nclass DateTimeEncoder(json.JSONEncoder):\n    def default(self, o):\n        if isinstance(o, datetime):\n            return o.isoformat()\n        return super().default(o)\n\n\nM = TypeVar(\"M\", bound=BaseModel)\n\n\nclass BaseRedisEventBus(Generic[M], ABC):\n    Model: type[M]\n\n    @property\n    @abstractmethod\n    def event_bus_name(self) -> str:\n        pass\n\n    def _serialize_message(self, item: M, channel_key: str) -> tuple[str, str]:\n        message = json.dumps(item.model_dump(), cls=DateTimeEncoder)\n        channel_name = f\"{self.event_bus_name}/{channel_key}\"\n        logger.info(f\"[{channel_name}] Publishing an event to Redis {message}\")\n        return message, channel_name\n\n    def _deserialize_message(self, msg: Any, channel_key: str) -> M | None:\n        message_type = \"pmessage\" if \"*\" in channel_key else \"message\"\n        if msg[\"type\"] != message_type:\n            return None\n        try:\n            data = json.loads(msg[\"data\"])\n            logger.info(f\"Consuming an event from Redis {data}\")\n            return self.Model(**data)\n        except Exception as e:\n            logger.error(f\"Failed to parse event result from Redis {msg} {e}\")\n\n    def _get_pubsub_channel(\n        self, connection: redis.Redis | redis.AsyncRedis, channel_key: str\n    ) -> tuple[PubSub | AsyncPubSub, str]:\n        full_channel_name = f\"{self.event_bus_name}/{channel_key}\"\n        pubsub = connection.pubsub()\n        return pubsub, full_channel_name\n\n\nclass RedisEventBus(BaseRedisEventBus[M], ABC):\n    Model: type[M]\n\n    @property\n    def connection(self) -> redis.Redis:\n        return redis.get_redis()\n\n    def publish_event(self, event: M, channel_key: str):\n        message, full_channel_name = self._serialize_message(event, channel_key)\n        self.connection.publish(full_channel_name, message)\n\n    def listen_events(self, channel_key: str) -> Generator[M, None, None]:\n        pubsub, full_channel_name = self._get_pubsub_channel(\n            self.connection, channel_key\n        )\n        assert isinstance(pubsub, PubSub)\n\n        if \"*\" in channel_key:\n            pubsub.psubscribe(full_channel_name)\n        else:\n            pubsub.subscribe(full_channel_name)\n\n        for message in pubsub.listen():\n            if event := self._deserialize_message(message, channel_key):\n                yield event\n\n\nclass AsyncRedisEventBus(BaseRedisEventBus[M], ABC):\n    Model: type[M]\n\n    @property\n    async def connection(self) -> redis.AsyncRedis:\n        return await redis.get_redis_async()\n\n    async def publish_event(self, event: M, channel_key: str):\n        message, full_channel_name = self._serialize_message(event, channel_key)\n        connection = await self.connection\n        await connection.publish(full_channel_name, message)\n\n    async def listen_events(self, channel_key: str) -> AsyncGenerator[M, None]:\n        pubsub, full_channel_name = self._get_pubsub_channel(\n            await self.connection, channel_key\n        )\n        assert isinstance(pubsub, AsyncPubSub)\n\n        if \"*\" in channel_key:\n            await pubsub.psubscribe(full_channel_name)\n        else:\n            await pubsub.subscribe(full_channel_name)\n\n        async for message in pubsub.listen():\n            if event := self._deserialize_message(message, channel_key):\n                yield event\n\n    async def wait_for_event(\n        self, channel_key: str, timeout: Optional[float] = None\n    ) -> M | None:\n        try:\n            return await asyncio.wait_for(\n                anext(aiter(self.listen_events(channel_key))), timeout\n            )\n        except TimeoutError:\n            return None",
  "children": [
    {
      "value": "import asyncio",
      "children": [
        {
          "value": "asyncio",
          "children": [
            {
              "value": "asyncio",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import json",
      "children": [
        {
          "value": "json",
          "children": [
            {
              "value": "json",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import logging",
      "children": [
        {
          "value": "logging",
          "children": [
            {
              "value": "logging",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from abc import ABC, abstractmethod",
      "children": [
        {
          "value": "abc",
          "children": [
            {
              "value": "abc",
              "children": []
            }
          ]
        },
        {
          "value": "ABC",
          "children": [
            {
              "value": "ABC",
              "children": []
            }
          ]
        },
        {
          "value": "abstractmethod",
          "children": [
            {
              "value": "abstractmethod",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from datetime import datetime",
      "children": [
        {
          "value": "datetime",
          "children": [
            {
              "value": "datetime",
              "children": []
            }
          ]
        },
        {
          "value": "datetime",
          "children": [
            {
              "value": "datetime",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from typing import Any, AsyncGenerator, Generator, Generic, Optional, TypeVar",
      "children": [
        {
          "value": "typing",
          "children": [
            {
              "value": "typing",
              "children": []
            }
          ]
        },
        {
          "value": "Any",
          "children": [
            {
              "value": "Any",
              "children": []
            }
          ]
        },
        {
          "value": "AsyncGenerator",
          "children": [
            {
              "value": "AsyncGenerator",
              "children": []
            }
          ]
        },
        {
          "value": "Generator",
          "children": [
            {
              "value": "Generator",
              "children": []
            }
          ]
        },
        {
          "value": "Generic",
          "children": [
            {
              "value": "Generic",
              "children": []
            }
          ]
        },
        {
          "value": "Optional",
          "children": [
            {
              "value": "Optional",
              "children": []
            }
          ]
        },
        {
          "value": "TypeVar",
          "children": [
            {
              "value": "TypeVar",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from pydantic import BaseModel",
      "children": [
        {
          "value": "pydantic",
          "children": [
            {
              "value": "pydantic",
              "children": []
            }
          ]
        },
        {
          "value": "BaseModel",
          "children": [
            {
              "value": "BaseModel",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from redis.asyncio.client import PubSub as AsyncPubSub",
      "children": [
        {
          "value": "redis.asyncio.client",
          "children": [
            {
              "value": "redis",
              "children": []
            },
            {
              "value": "asyncio",
              "children": []
            },
            {
              "value": "client",
              "children": []
            }
          ]
        },
        {
          "value": "PubSub as AsyncPubSub",
          "children": [
            {
              "value": "PubSub",
              "children": [
                {
                  "value": "PubSub",
                  "children": []
                }
              ]
            },
            {
              "value": "AsyncPubSub",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from redis.client import PubSub",
      "children": [
        {
          "value": "redis.client",
          "children": [
            {
              "value": "redis",
              "children": []
            },
            {
              "value": "client",
              "children": []
            }
          ]
        },
        {
          "value": "PubSub",
          "children": [
            {
              "value": "PubSub",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.data import redis",
      "children": [
        {
          "value": "backend.data",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "data",
              "children": []
            }
          ]
        },
        {
          "value": "redis",
          "children": [
            {
              "value": "redis",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "logger = logging.getLogger(__name__)",
      "children": [
        {
          "value": "logger = logging.getLogger(__name__)",
          "children": [
            {
              "value": "logger",
              "children": []
            },
            {
              "value": "logging.getLogger(__name__)",
              "children": [
                {
                  "value": "logging.getLogger",
                  "children": [
                    {
                      "value": "logging",
                      "children": []
                    },
                    {
                      "value": "getLogger",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "(__name__)",
                  "children": [
                    {
                      "value": "__name__",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class DateTimeEncoder(json.JSONEncoder):\n    def default(self, o):\n        if isinstance(o, datetime):\n            return o.isoformat()\n        return super().default(o)",
      "children": [
        {
          "value": "DateTimeEncoder",
          "children": []
        },
        {
          "value": "(json.JSONEncoder)",
          "children": [
            {
              "value": "json.JSONEncoder",
              "children": [
                {
                  "value": "json",
                  "children": []
                },
                {
                  "value": "JSONEncoder",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "def default(self, o):\n        if isinstance(o, datetime):\n            return o.isoformat()\n        return super().default(o)",
          "children": [
            {
              "value": "def default(self, o):\n        if isinstance(o, datetime):\n            return o.isoformat()\n        return super().default(o)",
              "children": [
                {
                  "value": "default",
                  "children": []
                },
                {
                  "value": "(self, o)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "o",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "if isinstance(o, datetime):\n            return o.isoformat()\n        return super().default(o)",
                  "children": [
                    {
                      "value": "if isinstance(o, datetime):\n            return o.isoformat()",
                      "children": [
                        {
                          "value": "isinstance(o, datetime)",
                          "children": [
                            {
                              "value": "isinstance",
                              "children": []
                            },
                            {
                              "value": "(o, datetime)",
                              "children": [
                                {
                                  "value": "o",
                                  "children": []
                                },
                                {
                                  "value": "datetime",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "return o.isoformat()",
                          "children": [
                            {
                              "value": "return o.isoformat()",
                              "children": [
                                {
                                  "value": "o.isoformat()",
                                  "children": [
                                    {
                                      "value": "o.isoformat",
                                      "children": [
                                        {
                                          "value": "o",
                                          "children": []
                                        },
                                        {
                                          "value": "isoformat",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return super().default(o)",
                      "children": [
                        {
                          "value": "super().default(o)",
                          "children": [
                            {
                              "value": "super().default",
                              "children": [
                                {
                                  "value": "super()",
                                  "children": [
                                    {
                                      "value": "super",
                                      "children": []
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "default",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(o)",
                              "children": [
                                {
                                  "value": "o",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "M = TypeVar(\"M\", bound=BaseModel)",
      "children": [
        {
          "value": "M = TypeVar(\"M\", bound=BaseModel)",
          "children": [
            {
              "value": "M",
              "children": []
            },
            {
              "value": "TypeVar(\"M\", bound=BaseModel)",
              "children": [
                {
                  "value": "TypeVar",
                  "children": []
                },
                {
                  "value": "(\"M\", bound=BaseModel)",
                  "children": [
                    {
                      "value": "\"M\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "M",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "bound=BaseModel",
                      "children": [
                        {
                          "value": "bound",
                          "children": []
                        },
                        {
                          "value": "BaseModel",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class BaseRedisEventBus(Generic[M], ABC):\n    Model: type[M]\n\n    @property\n    @abstractmethod\n    def event_bus_name(self) -> str:\n        pass\n\n    def _serialize_message(self, item: M, channel_key: str) -> tuple[str, str]:\n        message = json.dumps(item.model_dump(), cls=DateTimeEncoder)\n        channel_name = f\"{self.event_bus_name}/{channel_key}\"\n        logger.info(f\"[{channel_name}] Publishing an event to Redis {message}\")\n        return message, channel_name\n\n    def _deserialize_message(self, msg: Any, channel_key: str) -> M | None:\n        message_type = \"pmessage\" if \"*\" in channel_key else \"message\"\n        if msg[\"type\"] != message_type:\n            return None\n        try:\n            data = json.loads(msg[\"data\"])\n            logger.info(f\"Consuming an event from Redis {data}\")\n            return self.Model(**data)\n        except Exception as e:\n            logger.error(f\"Failed to parse event result from Redis {msg} {e}\")\n\n    def _get_pubsub_channel(\n        self, connection: redis.Redis | redis.AsyncRedis, channel_key: str\n    ) -> tuple[PubSub | AsyncPubSub, str]:\n        full_channel_name = f\"{self.event_bus_name}/{channel_key}\"\n        pubsub = connection.pubsub()\n        return pubsub, full_channel_name",
      "children": [
        {
          "value": "BaseRedisEventBus",
          "children": []
        },
        {
          "value": "(Generic[M], ABC)",
          "children": [
            {
              "value": "Generic[M]",
              "children": [
                {
                  "value": "Generic",
                  "children": []
                },
                {
                  "value": "M",
                  "children": []
                }
              ]
            },
            {
              "value": "ABC",
              "children": []
            }
          ]
        },
        {
          "value": "Model: type[M]\n\n    @property\n    @abstractmethod\n    def event_bus_name(self) -> str:\n        pass\n\n    def _serialize_message(self, item: M, channel_key: str) -> tuple[str, str]:\n        message = json.dumps(item.model_dump(), cls=DateTimeEncoder)\n        channel_name = f\"{self.event_bus_name}/{channel_key}\"\n        logger.info(f\"[{channel_name}] Publishing an event to Redis {message}\")\n        return message, channel_name\n\n    def _deserialize_message(self, msg: Any, channel_key: str) -> M | None:\n        message_type = \"pmessage\" if \"*\" in channel_key else \"message\"\n        if msg[\"type\"] != message_type:\n            return None\n        try:\n            data = json.loads(msg[\"data\"])\n            logger.info(f\"Consuming an event from Redis {data}\")\n            return self.Model(**data)\n        except Exception as e:\n            logger.error(f\"Failed to parse event result from Redis {msg} {e}\")\n\n    def _get_pubsub_channel(\n        self, connection: redis.Redis | redis.AsyncRedis, channel_key: str\n    ) -> tuple[PubSub | AsyncPubSub, str]:\n        full_channel_name = f\"{self.event_bus_name}/{channel_key}\"\n        pubsub = connection.pubsub()\n        return pubsub, full_channel_name",
          "children": [
            {
              "value": "Model: type[M]",
              "children": [
                {
                  "value": "Model: type[M]",
                  "children": [
                    {
                      "value": "Model",
                      "children": []
                    },
                    {
                      "value": "type[M]",
                      "children": [
                        {
                          "value": "type[M]",
                          "children": [
                            {
                              "value": "type",
                              "children": []
                            },
                            {
                              "value": "[M]",
                              "children": [
                                {
                                  "value": "M",
                                  "children": [
                                    {
                                      "value": "M",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "@property\n    @abstractmethod\n    def event_bus_name(self) -> str:\n        pass",
              "children": [
                {
                  "value": "@property",
                  "children": [
                    {
                      "value": "property",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "@abstractmethod",
                  "children": [
                    {
                      "value": "abstractmethod",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "def event_bus_name(self) -> str:\n        pass",
                  "children": [
                    {
                      "value": "event_bus_name",
                      "children": []
                    },
                    {
                      "value": "(self)",
                      "children": [
                        {
                          "value": "self",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "pass",
                      "children": [
                        {
                          "value": "pass",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def _serialize_message(self, item: M, channel_key: str) -> tuple[str, str]:\n        message = json.dumps(item.model_dump(), cls=DateTimeEncoder)\n        channel_name = f\"{self.event_bus_name}/{channel_key}\"\n        logger.info(f\"[{channel_name}] Publishing an event to Redis {message}\")\n        return message, channel_name",
              "children": [
                {
                  "value": "_serialize_message",
                  "children": []
                },
                {
                  "value": "(self, item: M, channel_key: str)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "item: M",
                      "children": [
                        {
                          "value": "item",
                          "children": []
                        },
                        {
                          "value": "M",
                          "children": [
                            {
                              "value": "M",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "channel_key: str",
                      "children": [
                        {
                          "value": "channel_key",
                          "children": []
                        },
                        {
                          "value": "str",
                          "children": [
                            {
                              "value": "str",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "tuple[str, str]",
                  "children": [
                    {
                      "value": "tuple[str, str]",
                      "children": [
                        {
                          "value": "tuple",
                          "children": []
                        },
                        {
                          "value": "[str, str]",
                          "children": [
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "message = json.dumps(item.model_dump(), cls=DateTimeEncoder)\n        channel_name = f\"{self.event_bus_name}/{channel_key}\"\n        logger.info(f\"[{channel_name}] Publishing an event to Redis {message}\")\n        return message, channel_name",
                  "children": [
                    {
                      "value": "message = json.dumps(item.model_dump(), cls=DateTimeEncoder)",
                      "children": [
                        {
                          "value": "message = json.dumps(item.model_dump(), cls=DateTimeEncoder)",
                          "children": [
                            {
                              "value": "message",
                              "children": []
                            },
                            {
                              "value": "json.dumps(item.model_dump(), cls=DateTimeEncoder)",
                              "children": [
                                {
                                  "value": "json.dumps",
                                  "children": [
                                    {
                                      "value": "json",
                                      "children": []
                                    },
                                    {
                                      "value": "dumps",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(item.model_dump(), cls=DateTimeEncoder)",
                                  "children": [
                                    {
                                      "value": "item.model_dump()",
                                      "children": [
                                        {
                                          "value": "item.model_dump",
                                          "children": [
                                            {
                                              "value": "item",
                                              "children": []
                                            },
                                            {
                                              "value": "model_dump",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "()",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "cls=DateTimeEncoder",
                                      "children": [
                                        {
                                          "value": "cls",
                                          "children": []
                                        },
                                        {
                                          "value": "DateTimeEncoder",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "channel_name = f\"{self.event_bus_name}/{channel_key}\"",
                      "children": [
                        {
                          "value": "channel_name = f\"{self.event_bus_name}/{channel_key}\"",
                          "children": [
                            {
                              "value": "channel_name",
                              "children": []
                            },
                            {
                              "value": "f\"{self.event_bus_name}/{channel_key}\"",
                              "children": [
                                {
                                  "value": "f\"",
                                  "children": []
                                },
                                {
                                  "value": "{self.event_bus_name}",
                                  "children": [
                                    {
                                      "value": "self.event_bus_name",
                                      "children": [
                                        {
                                          "value": "self",
                                          "children": []
                                        },
                                        {
                                          "value": "event_bus_name",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "/",
                                  "children": []
                                },
                                {
                                  "value": "{channel_key}",
                                  "children": [
                                    {
                                      "value": "channel_key",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "logger.info(f\"[{channel_name}] Publishing an event to Redis {message}\")",
                      "children": [
                        {
                          "value": "logger.info(f\"[{channel_name}] Publishing an event to Redis {message}\")",
                          "children": [
                            {
                              "value": "logger.info",
                              "children": [
                                {
                                  "value": "logger",
                                  "children": []
                                },
                                {
                                  "value": "info",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(f\"[{channel_name}] Publishing an event to Redis {message}\")",
                              "children": [
                                {
                                  "value": "f\"[{channel_name}] Publishing an event to Redis {message}\"",
                                  "children": [
                                    {
                                      "value": "f\"",
                                      "children": []
                                    },
                                    {
                                      "value": "[",
                                      "children": []
                                    },
                                    {
                                      "value": "{channel_name}",
                                      "children": [
                                        {
                                          "value": "channel_name",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "] Publishing an event to Redis",
                                      "children": []
                                    },
                                    {
                                      "value": "{message}",
                                      "children": [
                                        {
                                          "value": "message",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return message, channel_name",
                      "children": [
                        {
                          "value": "message, channel_name",
                          "children": [
                            {
                              "value": "message",
                              "children": []
                            },
                            {
                              "value": "channel_name",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def _deserialize_message(self, msg: Any, channel_key: str) -> M | None:\n        message_type = \"pmessage\" if \"*\" in channel_key else \"message\"\n        if msg[\"type\"] != message_type:\n            return None\n        try:\n            data = json.loads(msg[\"data\"])\n            logger.info(f\"Consuming an event from Redis {data}\")\n            return self.Model(**data)\n        except Exception as e:\n            logger.error(f\"Failed to parse event result from Redis {msg} {e}\")",
              "children": [
                {
                  "value": "_deserialize_message",
                  "children": []
                },
                {
                  "value": "(self, msg: Any, channel_key: str)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "msg: Any",
                      "children": [
                        {
                          "value": "msg",
                          "children": []
                        },
                        {
                          "value": "Any",
                          "children": [
                            {
                              "value": "Any",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "channel_key: str",
                      "children": [
                        {
                          "value": "channel_key",
                          "children": []
                        },
                        {
                          "value": "str",
                          "children": [
                            {
                              "value": "str",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "M | None",
                  "children": [
                    {
                      "value": "M | None",
                      "children": [
                        {
                          "value": "M",
                          "children": []
                        },
                        {
                          "value": "None",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "message_type = \"pmessage\" if \"*\" in channel_key else \"message\"\n        if msg[\"type\"] != message_type:\n            return None\n        try:\n            data = json.loads(msg[\"data\"])\n            logger.info(f\"Consuming an event from Redis {data}\")\n            return self.Model(**data)\n        except Exception as e:\n            logger.error(f\"Failed to parse event result from Redis {msg} {e}\")",
                  "children": [
                    {
                      "value": "message_type = \"pmessage\" if \"*\" in channel_key else \"message\"",
                      "children": [
                        {
                          "value": "message_type = \"pmessage\" if \"*\" in channel_key else \"message\"",
                          "children": [
                            {
                              "value": "message_type",
                              "children": []
                            },
                            {
                              "value": "\"pmessage\" if \"*\" in channel_key else \"message\"",
                              "children": [
                                {
                                  "value": "\"pmessage\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "pmessage",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "\"*\" in channel_key",
                                  "children": [
                                    {
                                      "value": "\"*\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "*",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "channel_key",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "\"message\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "message",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if msg[\"type\"] != message_type:\n            return None",
                      "children": [
                        {
                          "value": "msg[\"type\"] != message_type",
                          "children": [
                            {
                              "value": "msg[\"type\"]",
                              "children": [
                                {
                                  "value": "msg",
                                  "children": []
                                },
                                {
                                  "value": "\"type\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "type",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "message_type",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "return None",
                          "children": [
                            {
                              "value": "return None",
                              "children": [
                                {
                                  "value": "None",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "try:\n            data = json.loads(msg[\"data\"])\n            logger.info(f\"Consuming an event from Redis {data}\")\n            return self.Model(**data)\n        except Exception as e:\n            logger.error(f\"Failed to parse event result from Redis {msg} {e}\")",
                      "children": [
                        {
                          "value": "data = json.loads(msg[\"data\"])\n            logger.info(f\"Consuming an event from Redis {data}\")\n            return self.Model(**data)",
                          "children": [
                            {
                              "value": "data = json.loads(msg[\"data\"])",
                              "children": [
                                {
                                  "value": "data = json.loads(msg[\"data\"])",
                                  "children": [
                                    {
                                      "value": "data",
                                      "children": []
                                    },
                                    {
                                      "value": "json.loads(msg[\"data\"])",
                                      "children": [
                                        {
                                          "value": "json.loads",
                                          "children": [
                                            {
                                              "value": "json",
                                              "children": []
                                            },
                                            {
                                              "value": "loads",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(msg[\"data\"])",
                                          "children": [
                                            {
                                              "value": "msg[\"data\"]",
                                              "children": [
                                                {
                                                  "value": "msg",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"data\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "data",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "logger.info(f\"Consuming an event from Redis {data}\")",
                              "children": [
                                {
                                  "value": "logger.info(f\"Consuming an event from Redis {data}\")",
                                  "children": [
                                    {
                                      "value": "logger.info",
                                      "children": [
                                        {
                                          "value": "logger",
                                          "children": []
                                        },
                                        {
                                          "value": "info",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(f\"Consuming an event from Redis {data}\")",
                                      "children": [
                                        {
                                          "value": "f\"Consuming an event from Redis {data}\"",
                                          "children": [
                                            {
                                              "value": "f\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Consuming an event from Redis",
                                              "children": []
                                            },
                                            {
                                              "value": "{data}",
                                              "children": [
                                                {
                                                  "value": "data",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "return self.Model(**data)",
                              "children": [
                                {
                                  "value": "self.Model(**data)",
                                  "children": [
                                    {
                                      "value": "self.Model",
                                      "children": [
                                        {
                                          "value": "self",
                                          "children": []
                                        },
                                        {
                                          "value": "Model",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(**data)",
                                      "children": [
                                        {
                                          "value": "**data",
                                          "children": [
                                            {
                                              "value": "data",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "except Exception as e:\n            logger.error(f\"Failed to parse event result from Redis {msg} {e}\")",
                          "children": [
                            {
                              "value": "Exception as e",
                              "children": [
                                {
                                  "value": "Exception",
                                  "children": []
                                },
                                {
                                  "value": "e",
                                  "children": [
                                    {
                                      "value": "e",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "logger.error(f\"Failed to parse event result from Redis {msg} {e}\")",
                              "children": [
                                {
                                  "value": "logger.error(f\"Failed to parse event result from Redis {msg} {e}\")",
                                  "children": [
                                    {
                                      "value": "logger.error(f\"Failed to parse event result from Redis {msg} {e}\")",
                                      "children": [
                                        {
                                          "value": "logger.error",
                                          "children": [
                                            {
                                              "value": "logger",
                                              "children": []
                                            },
                                            {
                                              "value": "error",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(f\"Failed to parse event result from Redis {msg} {e}\")",
                                          "children": [
                                            {
                                              "value": "f\"Failed to parse event result from Redis {msg} {e}\"",
                                              "children": [
                                                {
                                                  "value": "f\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "Failed to parse event result from Redis",
                                                  "children": []
                                                },
                                                {
                                                  "value": "{msg}",
                                                  "children": [
                                                    {
                                                      "value": "msg",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "",
                                                  "children": []
                                                },
                                                {
                                                  "value": "{e}",
                                                  "children": [
                                                    {
                                                      "value": "e",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def _get_pubsub_channel(\n        self, connection: redis.Redis | redis.AsyncRedis, channel_key: str\n    ) -> tuple[PubSub | AsyncPubSub, str]:\n        full_channel_name = f\"{self.event_bus_name}/{channel_key}\"\n        pubsub = connection.pubsub()\n        return pubsub, full_channel_name",
              "children": [
                {
                  "value": "_get_pubsub_channel",
                  "children": []
                },
                {
                  "value": "(\n        self, connection: redis.Redis | redis.AsyncRedis, channel_key: str\n    )",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "connection: redis.Redis | redis.AsyncRedis",
                      "children": [
                        {
                          "value": "connection",
                          "children": []
                        },
                        {
                          "value": "redis.Redis | redis.AsyncRedis",
                          "children": [
                            {
                              "value": "redis.Redis | redis.AsyncRedis",
                              "children": [
                                {
                                  "value": "redis.Redis",
                                  "children": [
                                    {
                                      "value": "redis",
                                      "children": []
                                    },
                                    {
                                      "value": "Redis",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "redis.AsyncRedis",
                                  "children": [
                                    {
                                      "value": "redis",
                                      "children": []
                                    },
                                    {
                                      "value": "AsyncRedis",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "channel_key: str",
                      "children": [
                        {
                          "value": "channel_key",
                          "children": []
                        },
                        {
                          "value": "str",
                          "children": [
                            {
                              "value": "str",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "tuple[PubSub | AsyncPubSub, str]",
                  "children": [
                    {
                      "value": "tuple[PubSub | AsyncPubSub, str]",
                      "children": [
                        {
                          "value": "tuple",
                          "children": []
                        },
                        {
                          "value": "[PubSub | AsyncPubSub, str]",
                          "children": [
                            {
                              "value": "PubSub | AsyncPubSub",
                              "children": [
                                {
                                  "value": "PubSub | AsyncPubSub",
                                  "children": [
                                    {
                                      "value": "PubSub",
                                      "children": []
                                    },
                                    {
                                      "value": "AsyncPubSub",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "full_channel_name = f\"{self.event_bus_name}/{channel_key}\"\n        pubsub = connection.pubsub()\n        return pubsub, full_channel_name",
                  "children": [
                    {
                      "value": "full_channel_name = f\"{self.event_bus_name}/{channel_key}\"",
                      "children": [
                        {
                          "value": "full_channel_name = f\"{self.event_bus_name}/{channel_key}\"",
                          "children": [
                            {
                              "value": "full_channel_name",
                              "children": []
                            },
                            {
                              "value": "f\"{self.event_bus_name}/{channel_key}\"",
                              "children": [
                                {
                                  "value": "f\"",
                                  "children": []
                                },
                                {
                                  "value": "{self.event_bus_name}",
                                  "children": [
                                    {
                                      "value": "self.event_bus_name",
                                      "children": [
                                        {
                                          "value": "self",
                                          "children": []
                                        },
                                        {
                                          "value": "event_bus_name",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "/",
                                  "children": []
                                },
                                {
                                  "value": "{channel_key}",
                                  "children": [
                                    {
                                      "value": "channel_key",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "pubsub = connection.pubsub()",
                      "children": [
                        {
                          "value": "pubsub = connection.pubsub()",
                          "children": [
                            {
                              "value": "pubsub",
                              "children": []
                            },
                            {
                              "value": "connection.pubsub()",
                              "children": [
                                {
                                  "value": "connection.pubsub",
                                  "children": [
                                    {
                                      "value": "connection",
                                      "children": []
                                    },
                                    {
                                      "value": "pubsub",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return pubsub, full_channel_name",
                      "children": [
                        {
                          "value": "pubsub, full_channel_name",
                          "children": [
                            {
                              "value": "pubsub",
                              "children": []
                            },
                            {
                              "value": "full_channel_name",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class RedisEventBus(BaseRedisEventBus[M], ABC):\n    Model: type[M]\n\n    @property\n    def connection(self) -> redis.Redis:\n        return redis.get_redis()\n\n    def publish_event(self, event: M, channel_key: str):\n        message, full_channel_name = self._serialize_message(event, channel_key)\n        self.connection.publish(full_channel_name, message)\n\n    def listen_events(self, channel_key: str) -> Generator[M, None, None]:\n        pubsub, full_channel_name = self._get_pubsub_channel(\n            self.connection, channel_key\n        )\n        assert isinstance(pubsub, PubSub)\n\n        if \"*\" in channel_key:\n            pubsub.psubscribe(full_channel_name)\n        else:\n            pubsub.subscribe(full_channel_name)\n\n        for message in pubsub.listen():\n            if event := self._deserialize_message(message, channel_key):\n                yield event",
      "children": [
        {
          "value": "RedisEventBus",
          "children": []
        },
        {
          "value": "(BaseRedisEventBus[M], ABC)",
          "children": [
            {
              "value": "BaseRedisEventBus[M]",
              "children": [
                {
                  "value": "BaseRedisEventBus",
                  "children": []
                },
                {
                  "value": "M",
                  "children": []
                }
              ]
            },
            {
              "value": "ABC",
              "children": []
            }
          ]
        },
        {
          "value": "Model: type[M]\n\n    @property\n    def connection(self) -> redis.Redis:\n        return redis.get_redis()\n\n    def publish_event(self, event: M, channel_key: str):\n        message, full_channel_name = self._serialize_message(event, channel_key)\n        self.connection.publish(full_channel_name, message)\n\n    def listen_events(self, channel_key: str) -> Generator[M, None, None]:\n        pubsub, full_channel_name = self._get_pubsub_channel(\n            self.connection, channel_key\n        )\n        assert isinstance(pubsub, PubSub)\n\n        if \"*\" in channel_key:\n            pubsub.psubscribe(full_channel_name)\n        else:\n            pubsub.subscribe(full_channel_name)\n\n        for message in pubsub.listen():\n            if event := self._deserialize_message(message, channel_key):\n                yield event",
          "children": [
            {
              "value": "Model: type[M]",
              "children": [
                {
                  "value": "Model: type[M]",
                  "children": [
                    {
                      "value": "Model",
                      "children": []
                    },
                    {
                      "value": "type[M]",
                      "children": [
                        {
                          "value": "type[M]",
                          "children": [
                            {
                              "value": "type",
                              "children": []
                            },
                            {
                              "value": "[M]",
                              "children": [
                                {
                                  "value": "M",
                                  "children": [
                                    {
                                      "value": "M",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "@property\n    def connection(self) -> redis.Redis:\n        return redis.get_redis()",
              "children": [
                {
                  "value": "@property",
                  "children": [
                    {
                      "value": "property",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "def connection(self) -> redis.Redis:\n        return redis.get_redis()",
                  "children": [
                    {
                      "value": "connection",
                      "children": []
                    },
                    {
                      "value": "(self)",
                      "children": [
                        {
                          "value": "self",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "redis.Redis",
                      "children": [
                        {
                          "value": "redis.Redis",
                          "children": [
                            {
                              "value": "redis",
                              "children": []
                            },
                            {
                              "value": "Redis",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return redis.get_redis()",
                      "children": [
                        {
                          "value": "return redis.get_redis()",
                          "children": [
                            {
                              "value": "redis.get_redis()",
                              "children": [
                                {
                                  "value": "redis.get_redis",
                                  "children": [
                                    {
                                      "value": "redis",
                                      "children": []
                                    },
                                    {
                                      "value": "get_redis",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def publish_event(self, event: M, channel_key: str):\n        message, full_channel_name = self._serialize_message(event, channel_key)\n        self.connection.publish(full_channel_name, message)",
              "children": [
                {
                  "value": "publish_event",
                  "children": []
                },
                {
                  "value": "(self, event: M, channel_key: str)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "event: M",
                      "children": [
                        {
                          "value": "event",
                          "children": []
                        },
                        {
                          "value": "M",
                          "children": [
                            {
                              "value": "M",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "channel_key: str",
                      "children": [
                        {
                          "value": "channel_key",
                          "children": []
                        },
                        {
                          "value": "str",
                          "children": [
                            {
                              "value": "str",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "message, full_channel_name = self._serialize_message(event, channel_key)\n        self.connection.publish(full_channel_name, message)",
                  "children": [
                    {
                      "value": "message, full_channel_name = self._serialize_message(event, channel_key)",
                      "children": [
                        {
                          "value": "message, full_channel_name = self._serialize_message(event, channel_key)",
                          "children": [
                            {
                              "value": "message, full_channel_name",
                              "children": [
                                {
                                  "value": "message",
                                  "children": []
                                },
                                {
                                  "value": "full_channel_name",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "self._serialize_message(event, channel_key)",
                              "children": [
                                {
                                  "value": "self._serialize_message",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "_serialize_message",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(event, channel_key)",
                                  "children": [
                                    {
                                      "value": "event",
                                      "children": []
                                    },
                                    {
                                      "value": "channel_key",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.connection.publish(full_channel_name, message)",
                      "children": [
                        {
                          "value": "self.connection.publish(full_channel_name, message)",
                          "children": [
                            {
                              "value": "self.connection.publish",
                              "children": [
                                {
                                  "value": "self.connection",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "connection",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "publish",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(full_channel_name, message)",
                              "children": [
                                {
                                  "value": "full_channel_name",
                                  "children": []
                                },
                                {
                                  "value": "message",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def listen_events(self, channel_key: str) -> Generator[M, None, None]:\n        pubsub, full_channel_name = self._get_pubsub_channel(\n            self.connection, channel_key\n        )\n        assert isinstance(pubsub, PubSub)\n\n        if \"*\" in channel_key:\n            pubsub.psubscribe(full_channel_name)\n        else:\n            pubsub.subscribe(full_channel_name)\n\n        for message in pubsub.listen():\n            if event := self._deserialize_message(message, channel_key):\n                yield event",
              "children": [
                {
                  "value": "listen_events",
                  "children": []
                },
                {
                  "value": "(self, channel_key: str)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "channel_key: str",
                      "children": [
                        {
                          "value": "channel_key",
                          "children": []
                        },
                        {
                          "value": "str",
                          "children": [
                            {
                              "value": "str",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "Generator[M, None, None]",
                  "children": [
                    {
                      "value": "Generator[M, None, None]",
                      "children": [
                        {
                          "value": "Generator",
                          "children": []
                        },
                        {
                          "value": "[M, None, None]",
                          "children": [
                            {
                              "value": "M",
                              "children": [
                                {
                                  "value": "M",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "None",
                              "children": [
                                {
                                  "value": "None",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "None",
                              "children": [
                                {
                                  "value": "None",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "pubsub, full_channel_name = self._get_pubsub_channel(\n            self.connection, channel_key\n        )\n        assert isinstance(pubsub, PubSub)\n\n        if \"*\" in channel_key:\n            pubsub.psubscribe(full_channel_name)\n        else:\n            pubsub.subscribe(full_channel_name)\n\n        for message in pubsub.listen():\n            if event := self._deserialize_message(message, channel_key):\n                yield event",
                  "children": [
                    {
                      "value": "pubsub, full_channel_name = self._get_pubsub_channel(\n            self.connection, channel_key\n        )",
                      "children": [
                        {
                          "value": "pubsub, full_channel_name = self._get_pubsub_channel(\n            self.connection, channel_key\n        )",
                          "children": [
                            {
                              "value": "pubsub, full_channel_name",
                              "children": [
                                {
                                  "value": "pubsub",
                                  "children": []
                                },
                                {
                                  "value": "full_channel_name",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "self._get_pubsub_channel(\n            self.connection, channel_key\n        )",
                              "children": [
                                {
                                  "value": "self._get_pubsub_channel",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "_get_pubsub_channel",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(\n            self.connection, channel_key\n        )",
                                  "children": [
                                    {
                                      "value": "self.connection",
                                      "children": [
                                        {
                                          "value": "self",
                                          "children": []
                                        },
                                        {
                                          "value": "connection",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "channel_key",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "assert isinstance(pubsub, PubSub)",
                      "children": [
                        {
                          "value": "isinstance(pubsub, PubSub)",
                          "children": [
                            {
                              "value": "isinstance",
                              "children": []
                            },
                            {
                              "value": "(pubsub, PubSub)",
                              "children": [
                                {
                                  "value": "pubsub",
                                  "children": []
                                },
                                {
                                  "value": "PubSub",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if \"*\" in channel_key:\n            pubsub.psubscribe(full_channel_name)\n        else:\n            pubsub.subscribe(full_channel_name)",
                      "children": [
                        {
                          "value": "\"*\" in channel_key",
                          "children": [
                            {
                              "value": "\"*\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "*",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "channel_key",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "pubsub.psubscribe(full_channel_name)",
                          "children": [
                            {
                              "value": "pubsub.psubscribe(full_channel_name)",
                              "children": [
                                {
                                  "value": "pubsub.psubscribe(full_channel_name)",
                                  "children": [
                                    {
                                      "value": "pubsub.psubscribe",
                                      "children": [
                                        {
                                          "value": "pubsub",
                                          "children": []
                                        },
                                        {
                                          "value": "psubscribe",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(full_channel_name)",
                                      "children": [
                                        {
                                          "value": "full_channel_name",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "else:\n            pubsub.subscribe(full_channel_name)",
                          "children": [
                            {
                              "value": "pubsub.subscribe(full_channel_name)",
                              "children": [
                                {
                                  "value": "pubsub.subscribe(full_channel_name)",
                                  "children": [
                                    {
                                      "value": "pubsub.subscribe(full_channel_name)",
                                      "children": [
                                        {
                                          "value": "pubsub.subscribe",
                                          "children": [
                                            {
                                              "value": "pubsub",
                                              "children": []
                                            },
                                            {
                                              "value": "subscribe",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(full_channel_name)",
                                          "children": [
                                            {
                                              "value": "full_channel_name",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "for message in pubsub.listen():\n            if event := self._deserialize_message(message, channel_key):\n                yield event",
                      "children": [
                        {
                          "value": "message",
                          "children": []
                        },
                        {
                          "value": "pubsub.listen()",
                          "children": [
                            {
                              "value": "pubsub.listen",
                              "children": [
                                {
                                  "value": "pubsub",
                                  "children": []
                                },
                                {
                                  "value": "listen",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "()",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "if event := self._deserialize_message(message, channel_key):\n                yield event",
                          "children": [
                            {
                              "value": "if event := self._deserialize_message(message, channel_key):\n                yield event",
                              "children": [
                                {
                                  "value": "event := self._deserialize_message(message, channel_key)",
                                  "children": [
                                    {
                                      "value": "event",
                                      "children": []
                                    },
                                    {
                                      "value": "self._deserialize_message(message, channel_key)",
                                      "children": [
                                        {
                                          "value": "self._deserialize_message",
                                          "children": [
                                            {
                                              "value": "self",
                                              "children": []
                                            },
                                            {
                                              "value": "_deserialize_message",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(message, channel_key)",
                                          "children": [
                                            {
                                              "value": "message",
                                              "children": []
                                            },
                                            {
                                              "value": "channel_key",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "yield event",
                                  "children": [
                                    {
                                      "value": "yield event",
                                      "children": [
                                        {
                                          "value": "yield event",
                                          "children": [
                                            {
                                              "value": "event",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class AsyncRedisEventBus(BaseRedisEventBus[M], ABC):\n    Model: type[M]\n\n    @property\n    async def connection(self) -> redis.AsyncRedis:\n        return await redis.get_redis_async()\n\n    async def publish_event(self, event: M, channel_key: str):\n        message, full_channel_name = self._serialize_message(event, channel_key)\n        connection = await self.connection\n        await connection.publish(full_channel_name, message)\n\n    async def listen_events(self, channel_key: str) -> AsyncGenerator[M, None]:\n        pubsub, full_channel_name = self._get_pubsub_channel(\n            await self.connection, channel_key\n        )\n        assert isinstance(pubsub, AsyncPubSub)\n\n        if \"*\" in channel_key:\n            await pubsub.psubscribe(full_channel_name)\n        else:\n            await pubsub.subscribe(full_channel_name)\n\n        async for message in pubsub.listen():\n            if event := self._deserialize_message(message, channel_key):\n                yield event\n\n    async def wait_for_event(\n        self, channel_key: str, timeout: Optional[float] = None\n    ) -> M | None:\n        try:\n            return await asyncio.wait_for(\n                anext(aiter(self.listen_events(channel_key))), timeout\n            )\n        except TimeoutError:\n            return None",
      "children": [
        {
          "value": "AsyncRedisEventBus",
          "children": []
        },
        {
          "value": "(BaseRedisEventBus[M], ABC)",
          "children": [
            {
              "value": "BaseRedisEventBus[M]",
              "children": [
                {
                  "value": "BaseRedisEventBus",
                  "children": []
                },
                {
                  "value": "M",
                  "children": []
                }
              ]
            },
            {
              "value": "ABC",
              "children": []
            }
          ]
        },
        {
          "value": "Model: type[M]\n\n    @property\n    async def connection(self) -> redis.AsyncRedis:\n        return await redis.get_redis_async()\n\n    async def publish_event(self, event: M, channel_key: str):\n        message, full_channel_name = self._serialize_message(event, channel_key)\n        connection = await self.connection\n        await connection.publish(full_channel_name, message)\n\n    async def listen_events(self, channel_key: str) -> AsyncGenerator[M, None]:\n        pubsub, full_channel_name = self._get_pubsub_channel(\n            await self.connection, channel_key\n        )\n        assert isinstance(pubsub, AsyncPubSub)\n\n        if \"*\" in channel_key:\n            await pubsub.psubscribe(full_channel_name)\n        else:\n            await pubsub.subscribe(full_channel_name)\n\n        async for message in pubsub.listen():\n            if event := self._deserialize_message(message, channel_key):\n                yield event\n\n    async def wait_for_event(\n        self, channel_key: str, timeout: Optional[float] = None\n    ) -> M | None:\n        try:\n            return await asyncio.wait_for(\n                anext(aiter(self.listen_events(channel_key))), timeout\n            )\n        except TimeoutError:\n            return None",
          "children": [
            {
              "value": "Model: type[M]",
              "children": [
                {
                  "value": "Model: type[M]",
                  "children": [
                    {
                      "value": "Model",
                      "children": []
                    },
                    {
                      "value": "type[M]",
                      "children": [
                        {
                          "value": "type[M]",
                          "children": [
                            {
                              "value": "type",
                              "children": []
                            },
                            {
                              "value": "[M]",
                              "children": [
                                {
                                  "value": "M",
                                  "children": [
                                    {
                                      "value": "M",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "@property\n    async def connection(self) -> redis.AsyncRedis:\n        return await redis.get_redis_async()",
              "children": [
                {
                  "value": "@property",
                  "children": [
                    {
                      "value": "property",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "async def connection(self) -> redis.AsyncRedis:\n        return await redis.get_redis_async()",
                  "children": [
                    {
                      "value": "connection",
                      "children": []
                    },
                    {
                      "value": "(self)",
                      "children": [
                        {
                          "value": "self",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "redis.AsyncRedis",
                      "children": [
                        {
                          "value": "redis.AsyncRedis",
                          "children": [
                            {
                              "value": "redis",
                              "children": []
                            },
                            {
                              "value": "AsyncRedis",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return await redis.get_redis_async()",
                      "children": [
                        {
                          "value": "return await redis.get_redis_async()",
                          "children": [
                            {
                              "value": "await redis.get_redis_async()",
                              "children": [
                                {
                                  "value": "redis.get_redis_async()",
                                  "children": [
                                    {
                                      "value": "redis.get_redis_async",
                                      "children": [
                                        {
                                          "value": "redis",
                                          "children": []
                                        },
                                        {
                                          "value": "get_redis_async",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "async def publish_event(self, event: M, channel_key: str):\n        message, full_channel_name = self._serialize_message(event, channel_key)\n        connection = await self.connection\n        await connection.publish(full_channel_name, message)",
              "children": [
                {
                  "value": "publish_event",
                  "children": []
                },
                {
                  "value": "(self, event: M, channel_key: str)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "event: M",
                      "children": [
                        {
                          "value": "event",
                          "children": []
                        },
                        {
                          "value": "M",
                          "children": [
                            {
                              "value": "M",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "channel_key: str",
                      "children": [
                        {
                          "value": "channel_key",
                          "children": []
                        },
                        {
                          "value": "str",
                          "children": [
                            {
                              "value": "str",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "message, full_channel_name = self._serialize_message(event, channel_key)\n        connection = await self.connection\n        await connection.publish(full_channel_name, message)",
                  "children": [
                    {
                      "value": "message, full_channel_name = self._serialize_message(event, channel_key)",
                      "children": [
                        {
                          "value": "message, full_channel_name = self._serialize_message(event, channel_key)",
                          "children": [
                            {
                              "value": "message, full_channel_name",
                              "children": [
                                {
                                  "value": "message",
                                  "children": []
                                },
                                {
                                  "value": "full_channel_name",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "self._serialize_message(event, channel_key)",
                              "children": [
                                {
                                  "value": "self._serialize_message",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "_serialize_message",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(event, channel_key)",
                                  "children": [
                                    {
                                      "value": "event",
                                      "children": []
                                    },
                                    {
                                      "value": "channel_key",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "connection = await self.connection",
                      "children": [
                        {
                          "value": "connection = await self.connection",
                          "children": [
                            {
                              "value": "connection",
                              "children": []
                            },
                            {
                              "value": "await self.connection",
                              "children": [
                                {
                                  "value": "self.connection",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "connection",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "await connection.publish(full_channel_name, message)",
                      "children": [
                        {
                          "value": "await connection.publish(full_channel_name, message)",
                          "children": [
                            {
                              "value": "connection.publish(full_channel_name, message)",
                              "children": [
                                {
                                  "value": "connection.publish",
                                  "children": [
                                    {
                                      "value": "connection",
                                      "children": []
                                    },
                                    {
                                      "value": "publish",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(full_channel_name, message)",
                                  "children": [
                                    {
                                      "value": "full_channel_name",
                                      "children": []
                                    },
                                    {
                                      "value": "message",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "async def listen_events(self, channel_key: str) -> AsyncGenerator[M, None]:\n        pubsub, full_channel_name = self._get_pubsub_channel(\n            await self.connection, channel_key\n        )\n        assert isinstance(pubsub, AsyncPubSub)\n\n        if \"*\" in channel_key:\n            await pubsub.psubscribe(full_channel_name)\n        else:\n            await pubsub.subscribe(full_channel_name)\n\n        async for message in pubsub.listen():\n            if event := self._deserialize_message(message, channel_key):\n                yield event",
              "children": [
                {
                  "value": "listen_events",
                  "children": []
                },
                {
                  "value": "(self, channel_key: str)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "channel_key: str",
                      "children": [
                        {
                          "value": "channel_key",
                          "children": []
                        },
                        {
                          "value": "str",
                          "children": [
                            {
                              "value": "str",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "AsyncGenerator[M, None]",
                  "children": [
                    {
                      "value": "AsyncGenerator[M, None]",
                      "children": [
                        {
                          "value": "AsyncGenerator",
                          "children": []
                        },
                        {
                          "value": "[M, None]",
                          "children": [
                            {
                              "value": "M",
                              "children": [
                                {
                                  "value": "M",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "None",
                              "children": [
                                {
                                  "value": "None",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "pubsub, full_channel_name = self._get_pubsub_channel(\n            await self.connection, channel_key\n        )\n        assert isinstance(pubsub, AsyncPubSub)\n\n        if \"*\" in channel_key:\n            await pubsub.psubscribe(full_channel_name)\n        else:\n            await pubsub.subscribe(full_channel_name)\n\n        async for message in pubsub.listen():\n            if event := self._deserialize_message(message, channel_key):\n                yield event",
                  "children": [
                    {
                      "value": "pubsub, full_channel_name = self._get_pubsub_channel(\n            await self.connection, channel_key\n        )",
                      "children": [
                        {
                          "value": "pubsub, full_channel_name = self._get_pubsub_channel(\n            await self.connection, channel_key\n        )",
                          "children": [
                            {
                              "value": "pubsub, full_channel_name",
                              "children": [
                                {
                                  "value": "pubsub",
                                  "children": []
                                },
                                {
                                  "value": "full_channel_name",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "self._get_pubsub_channel(\n            await self.connection, channel_key\n        )",
                              "children": [
                                {
                                  "value": "self._get_pubsub_channel",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "_get_pubsub_channel",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(\n            await self.connection, channel_key\n        )",
                                  "children": [
                                    {
                                      "value": "await self.connection",
                                      "children": [
                                        {
                                          "value": "self.connection",
                                          "children": [
                                            {
                                              "value": "self",
                                              "children": []
                                            },
                                            {
                                              "value": "connection",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "channel_key",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "assert isinstance(pubsub, AsyncPubSub)",
                      "children": [
                        {
                          "value": "isinstance(pubsub, AsyncPubSub)",
                          "children": [
                            {
                              "value": "isinstance",
                              "children": []
                            },
                            {
                              "value": "(pubsub, AsyncPubSub)",
                              "children": [
                                {
                                  "value": "pubsub",
                                  "children": []
                                },
                                {
                                  "value": "AsyncPubSub",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if \"*\" in channel_key:\n            await pubsub.psubscribe(full_channel_name)\n        else:\n            await pubsub.subscribe(full_channel_name)",
                      "children": [
                        {
                          "value": "\"*\" in channel_key",
                          "children": [
                            {
                              "value": "\"*\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "*",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "channel_key",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "await pubsub.psubscribe(full_channel_name)",
                          "children": [
                            {
                              "value": "await pubsub.psubscribe(full_channel_name)",
                              "children": [
                                {
                                  "value": "await pubsub.psubscribe(full_channel_name)",
                                  "children": [
                                    {
                                      "value": "pubsub.psubscribe(full_channel_name)",
                                      "children": [
                                        {
                                          "value": "pubsub.psubscribe",
                                          "children": [
                                            {
                                              "value": "pubsub",
                                              "children": []
                                            },
                                            {
                                              "value": "psubscribe",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(full_channel_name)",
                                          "children": [
                                            {
                                              "value": "full_channel_name",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "else:\n            await pubsub.subscribe(full_channel_name)",
                          "children": [
                            {
                              "value": "await pubsub.subscribe(full_channel_name)",
                              "children": [
                                {
                                  "value": "await pubsub.subscribe(full_channel_name)",
                                  "children": [
                                    {
                                      "value": "await pubsub.subscribe(full_channel_name)",
                                      "children": [
                                        {
                                          "value": "pubsub.subscribe(full_channel_name)",
                                          "children": [
                                            {
                                              "value": "pubsub.subscribe",
                                              "children": [
                                                {
                                                  "value": "pubsub",
                                                  "children": []
                                                },
                                                {
                                                  "value": "subscribe",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(full_channel_name)",
                                              "children": [
                                                {
                                                  "value": "full_channel_name",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "async for message in pubsub.listen():\n            if event := self._deserialize_message(message, channel_key):\n                yield event",
                      "children": [
                        {
                          "value": "message",
                          "children": []
                        },
                        {
                          "value": "pubsub.listen()",
                          "children": [
                            {
                              "value": "pubsub.listen",
                              "children": [
                                {
                                  "value": "pubsub",
                                  "children": []
                                },
                                {
                                  "value": "listen",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "()",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "if event := self._deserialize_message(message, channel_key):\n                yield event",
                          "children": [
                            {
                              "value": "if event := self._deserialize_message(message, channel_key):\n                yield event",
                              "children": [
                                {
                                  "value": "event := self._deserialize_message(message, channel_key)",
                                  "children": [
                                    {
                                      "value": "event",
                                      "children": []
                                    },
                                    {
                                      "value": "self._deserialize_message(message, channel_key)",
                                      "children": [
                                        {
                                          "value": "self._deserialize_message",
                                          "children": [
                                            {
                                              "value": "self",
                                              "children": []
                                            },
                                            {
                                              "value": "_deserialize_message",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(message, channel_key)",
                                          "children": [
                                            {
                                              "value": "message",
                                              "children": []
                                            },
                                            {
                                              "value": "channel_key",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "yield event",
                                  "children": [
                                    {
                                      "value": "yield event",
                                      "children": [
                                        {
                                          "value": "yield event",
                                          "children": [
                                            {
                                              "value": "event",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "async def wait_for_event(\n        self, channel_key: str, timeout: Optional[float] = None\n    ) -> M | None:\n        try:\n            return await asyncio.wait_for(\n                anext(aiter(self.listen_events(channel_key))), timeout\n            )\n        except TimeoutError:\n            return None",
              "children": [
                {
                  "value": "wait_for_event",
                  "children": []
                },
                {
                  "value": "(\n        self, channel_key: str, timeout: Optional[float] = None\n    )",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "channel_key: str",
                      "children": [
                        {
                          "value": "channel_key",
                          "children": []
                        },
                        {
                          "value": "str",
                          "children": [
                            {
                              "value": "str",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "timeout: Optional[float] = None",
                      "children": [
                        {
                          "value": "timeout",
                          "children": []
                        },
                        {
                          "value": "Optional[float]",
                          "children": [
                            {
                              "value": "Optional[float]",
                              "children": [
                                {
                                  "value": "Optional",
                                  "children": []
                                },
                                {
                                  "value": "[float]",
                                  "children": [
                                    {
                                      "value": "float",
                                      "children": [
                                        {
                                          "value": "float",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "None",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "M | None",
                  "children": [
                    {
                      "value": "M | None",
                      "children": [
                        {
                          "value": "M",
                          "children": []
                        },
                        {
                          "value": "None",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "try:\n            return await asyncio.wait_for(\n                anext(aiter(self.listen_events(channel_key))), timeout\n            )\n        except TimeoutError:\n            return None",
                  "children": [
                    {
                      "value": "try:\n            return await asyncio.wait_for(\n                anext(aiter(self.listen_events(channel_key))), timeout\n            )\n        except TimeoutError:\n            return None",
                      "children": [
                        {
                          "value": "return await asyncio.wait_for(\n                anext(aiter(self.listen_events(channel_key))), timeout\n            )",
                          "children": [
                            {
                              "value": "return await asyncio.wait_for(\n                anext(aiter(self.listen_events(channel_key))), timeout\n            )",
                              "children": [
                                {
                                  "value": "await asyncio.wait_for(\n                anext(aiter(self.listen_events(channel_key))), timeout\n            )",
                                  "children": [
                                    {
                                      "value": "asyncio.wait_for(\n                anext(aiter(self.listen_events(channel_key))), timeout\n            )",
                                      "children": [
                                        {
                                          "value": "asyncio.wait_for",
                                          "children": [
                                            {
                                              "value": "asyncio",
                                              "children": []
                                            },
                                            {
                                              "value": "wait_for",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(\n                anext(aiter(self.listen_events(channel_key))), timeout\n            )",
                                          "children": [
                                            {
                                              "value": "anext(aiter(self.listen_events(channel_key)))",
                                              "children": [
                                                {
                                                  "value": "anext",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(aiter(self.listen_events(channel_key)))",
                                                  "children": [
                                                    {
                                                      "value": "aiter(self.listen_events(channel_key))",
                                                      "children": [
                                                        {
                                                          "value": "aiter",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "(self.listen_events(channel_key))",
                                                          "children": [
                                                            {
                                                              "value": "self.listen_events(channel_key)",
                                                              "children": [
                                                                {
                                                                  "value": "self.listen_events",
                                                                  "children": [
                                                                    {
                                                                      "value": "self",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "listen_events",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "(channel_key)",
                                                                  "children": [
                                                                    {
                                                                      "value": "channel_key",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "timeout",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "except TimeoutError:\n            return None",
                          "children": [
                            {
                              "value": "TimeoutError",
                              "children": []
                            },
                            {
                              "value": "return None",
                              "children": [
                                {
                                  "value": "return None",
                                  "children": [
                                    {
                                      "value": "None",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}