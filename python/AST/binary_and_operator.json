{
  "value": "# https://www.tutorialspoint.com/python3/bitwise_operators_example.htm\n\n\ndef binary_and(a: int, b: int) -> str:\n    \"\"\"\n    Take in 2 integers, convert them to binary,\n    return a binary number that is the\n    result of a binary and operation on the integers provided.\n\n    >>> binary_and(25, 32)\n    '0b000000'\n    >>> binary_and(37, 50)\n    '0b100000'\n    >>> binary_and(21, 30)\n    '0b10100'\n    >>> binary_and(58, 73)\n    '0b0001000'\n    >>> binary_and(0, 255)\n    '0b00000000'\n    >>> binary_and(256, 256)\n    '0b100000000'\n    >>> binary_and(0, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: the value of both inputs must be positive\n    >>> binary_and(0, 1.1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Unknown format code 'b' for object of type 'float'\n    >>> binary_and(\"0\", \"1\")\n    Traceback (most recent call last):\n        ...\n    TypeError: '<' not supported between instances of 'str' and 'int'\n    \"\"\"\n    if a < 0 or b < 0:\n        raise ValueError(\"the value of both inputs must be positive\")\n\n    a_binary = format(a, \"b\")\n    b_binary = format(b, \"b\")\n\n    max_len = max(len(a_binary), len(b_binary))\n\n    return \"0b\" + \"\".join(\n        str(int(char_a == \"1\" and char_b == \"1\"))\n        for char_a, char_b in zip(a_binary.zfill(max_len), b_binary.zfill(max_len))\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
  "children": [
    {
      "value": "# https://www.tutorialspoint.com/python3/bitwise_operators_example.htm",
      "children": []
    },
    {
      "value": "def binary_and(a: int, b: int) -> str:\n    \"\"\"\n    Take in 2 integers, convert them to binary,\n    return a binary number that is the\n    result of a binary and operation on the integers provided.\n\n    >>> binary_and(25, 32)\n    '0b000000'\n    >>> binary_and(37, 50)\n    '0b100000'\n    >>> binary_and(21, 30)\n    '0b10100'\n    >>> binary_and(58, 73)\n    '0b0001000'\n    >>> binary_and(0, 255)\n    '0b00000000'\n    >>> binary_and(256, 256)\n    '0b100000000'\n    >>> binary_and(0, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: the value of both inputs must be positive\n    >>> binary_and(0, 1.1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Unknown format code 'b' for object of type 'float'\n    >>> binary_and(\"0\", \"1\")\n    Traceback (most recent call last):\n        ...\n    TypeError: '<' not supported between instances of 'str' and 'int'\n    \"\"\"\n    if a < 0 or b < 0:\n        raise ValueError(\"the value of both inputs must be positive\")\n\n    a_binary = format(a, \"b\")\n    b_binary = format(b, \"b\")\n\n    max_len = max(len(a_binary), len(b_binary))\n\n    return \"0b\" + \"\".join(\n        str(int(char_a == \"1\" and char_b == \"1\"))\n        for char_a, char_b in zip(a_binary.zfill(max_len), b_binary.zfill(max_len))\n    )",
      "children": [
        {
          "value": "binary_and",
          "children": []
        },
        {
          "value": "(a: int, b: int)",
          "children": [
            {
              "value": "a: int",
              "children": [
                {
                  "value": "a",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "b: int",
              "children": [
                {
                  "value": "b",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "str",
          "children": [
            {
              "value": "str",
              "children": []
            }
          ]
        },
        {
          "value": "\"\"\"\n    Take in 2 integers, convert them to binary,\n    return a binary number that is the\n    result of a binary and operation on the integers provided.\n\n    >>> binary_and(25, 32)\n    '0b000000'\n    >>> binary_and(37, 50)\n    '0b100000'\n    >>> binary_and(21, 30)\n    '0b10100'\n    >>> binary_and(58, 73)\n    '0b0001000'\n    >>> binary_and(0, 255)\n    '0b00000000'\n    >>> binary_and(256, 256)\n    '0b100000000'\n    >>> binary_and(0, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: the value of both inputs must be positive\n    >>> binary_and(0, 1.1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Unknown format code 'b' for object of type 'float'\n    >>> binary_and(\"0\", \"1\")\n    Traceback (most recent call last):\n        ...\n    TypeError: '<' not supported between instances of 'str' and 'int'\n    \"\"\"\n    if a < 0 or b < 0:\n        raise ValueError(\"the value of both inputs must be positive\")\n\n    a_binary = format(a, \"b\")\n    b_binary = format(b, \"b\")\n\n    max_len = max(len(a_binary), len(b_binary))\n\n    return \"0b\" + \"\".join(\n        str(int(char_a == \"1\" and char_b == \"1\"))\n        for char_a, char_b in zip(a_binary.zfill(max_len), b_binary.zfill(max_len))\n    )",
          "children": [
            {
              "value": "\"\"\"\n    Take in 2 integers, convert them to binary,\n    return a binary number that is the\n    result of a binary and operation on the integers provided.\n\n    >>> binary_and(25, 32)\n    '0b000000'\n    >>> binary_and(37, 50)\n    '0b100000'\n    >>> binary_and(21, 30)\n    '0b10100'\n    >>> binary_and(58, 73)\n    '0b0001000'\n    >>> binary_and(0, 255)\n    '0b00000000'\n    >>> binary_and(256, 256)\n    '0b100000000'\n    >>> binary_and(0, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: the value of both inputs must be positive\n    >>> binary_and(0, 1.1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Unknown format code 'b' for object of type 'float'\n    >>> binary_and(\"0\", \"1\")\n    Traceback (most recent call last):\n        ...\n    TypeError: '<' not supported between instances of 'str' and 'int'\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    Take in 2 integers, convert them to binary,\n    return a binary number that is the\n    result of a binary and operation on the integers provided.\n\n    >>> binary_and(25, 32)\n    '0b000000'\n    >>> binary_and(37, 50)\n    '0b100000'\n    >>> binary_and(21, 30)\n    '0b10100'\n    >>> binary_and(58, 73)\n    '0b0001000'\n    >>> binary_and(0, 255)\n    '0b00000000'\n    >>> binary_and(256, 256)\n    '0b100000000'\n    >>> binary_and(0, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: the value of both inputs must be positive\n    >>> binary_and(0, 1.1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Unknown format code 'b' for object of type 'float'\n    >>> binary_and(\"0\", \"1\")\n    Traceback (most recent call last):\n        ...\n    TypeError: '<' not supported between instances of 'str' and 'int'\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Take in 2 integers, convert them to binary,\n    return a binary number that is the\n    result of a binary and operation on the integers provided.\n\n    >>> binary_and(25, 32)\n    '0b000000'\n    >>> binary_and(37, 50)\n    '0b100000'\n    >>> binary_and(21, 30)\n    '0b10100'\n    >>> binary_and(58, 73)\n    '0b0001000'\n    >>> binary_and(0, 255)\n    '0b00000000'\n    >>> binary_and(256, 256)\n    '0b100000000'\n    >>> binary_and(0, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: the value of both inputs must be positive\n    >>> binary_and(0, 1.1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Unknown format code 'b' for object of type 'float'\n    >>> binary_and(\"0\", \"1\")\n    Traceback (most recent call last):\n        ...\n    TypeError: '<' not supported between instances of 'str' and 'int'",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "if a < 0 or b < 0:\n        raise ValueError(\"the value of both inputs must be positive\")",
              "children": [
                {
                  "value": "a < 0 or b < 0",
                  "children": [
                    {
                      "value": "a < 0",
                      "children": [
                        {
                          "value": "a",
                          "children": []
                        },
                        {
                          "value": "0",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "b < 0",
                      "children": [
                        {
                          "value": "b",
                          "children": []
                        },
                        {
                          "value": "0",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "raise ValueError(\"the value of both inputs must be positive\")",
                  "children": [
                    {
                      "value": "raise ValueError(\"the value of both inputs must be positive\")",
                      "children": [
                        {
                          "value": "ValueError(\"the value of both inputs must be positive\")",
                          "children": [
                            {
                              "value": "ValueError",
                              "children": []
                            },
                            {
                              "value": "(\"the value of both inputs must be positive\")",
                              "children": [
                                {
                                  "value": "\"the value of both inputs must be positive\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "the value of both inputs must be positive",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "a_binary = format(a, \"b\")",
              "children": [
                {
                  "value": "a_binary = format(a, \"b\")",
                  "children": [
                    {
                      "value": "a_binary",
                      "children": []
                    },
                    {
                      "value": "format(a, \"b\")",
                      "children": [
                        {
                          "value": "format",
                          "children": []
                        },
                        {
                          "value": "(a, \"b\")",
                          "children": [
                            {
                              "value": "a",
                              "children": []
                            },
                            {
                              "value": "\"b\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "b",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "b_binary = format(b, \"b\")",
              "children": [
                {
                  "value": "b_binary = format(b, \"b\")",
                  "children": [
                    {
                      "value": "b_binary",
                      "children": []
                    },
                    {
                      "value": "format(b, \"b\")",
                      "children": [
                        {
                          "value": "format",
                          "children": []
                        },
                        {
                          "value": "(b, \"b\")",
                          "children": [
                            {
                              "value": "b",
                              "children": []
                            },
                            {
                              "value": "\"b\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "b",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "max_len = max(len(a_binary), len(b_binary))",
              "children": [
                {
                  "value": "max_len = max(len(a_binary), len(b_binary))",
                  "children": [
                    {
                      "value": "max_len",
                      "children": []
                    },
                    {
                      "value": "max(len(a_binary), len(b_binary))",
                      "children": [
                        {
                          "value": "max",
                          "children": []
                        },
                        {
                          "value": "(len(a_binary), len(b_binary))",
                          "children": [
                            {
                              "value": "len(a_binary)",
                              "children": [
                                {
                                  "value": "len",
                                  "children": []
                                },
                                {
                                  "value": "(a_binary)",
                                  "children": [
                                    {
                                      "value": "a_binary",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "len(b_binary)",
                              "children": [
                                {
                                  "value": "len",
                                  "children": []
                                },
                                {
                                  "value": "(b_binary)",
                                  "children": [
                                    {
                                      "value": "b_binary",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "return \"0b\" + \"\".join(\n        str(int(char_a == \"1\" and char_b == \"1\"))\n        for char_a, char_b in zip(a_binary.zfill(max_len), b_binary.zfill(max_len))\n    )",
              "children": [
                {
                  "value": "\"0b\" + \"\".join(\n        str(int(char_a == \"1\" and char_b == \"1\"))\n        for char_a, char_b in zip(a_binary.zfill(max_len), b_binary.zfill(max_len))\n    )",
                  "children": [
                    {
                      "value": "\"0b\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "0b",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "\"\".join(\n        str(int(char_a == \"1\" and char_b == \"1\"))\n        for char_a, char_b in zip(a_binary.zfill(max_len), b_binary.zfill(max_len))\n    )",
                      "children": [
                        {
                          "value": "\"\".join",
                          "children": [
                            {
                              "value": "\"\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "join",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "(\n        str(int(char_a == \"1\" and char_b == \"1\"))\n        for char_a, char_b in zip(a_binary.zfill(max_len), b_binary.zfill(max_len))\n    )",
                          "children": [
                            {
                              "value": "str(int(char_a == \"1\" and char_b == \"1\"))",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                },
                                {
                                  "value": "(int(char_a == \"1\" and char_b == \"1\"))",
                                  "children": [
                                    {
                                      "value": "int(char_a == \"1\" and char_b == \"1\")",
                                      "children": [
                                        {
                                          "value": "int",
                                          "children": []
                                        },
                                        {
                                          "value": "(char_a == \"1\" and char_b == \"1\")",
                                          "children": [
                                            {
                                              "value": "char_a == \"1\" and char_b == \"1\"",
                                              "children": [
                                                {
                                                  "value": "char_a == \"1\"",
                                                  "children": [
                                                    {
                                                      "value": "char_a",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"1\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "1",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "char_b == \"1\"",
                                                  "children": [
                                                    {
                                                      "value": "char_b",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"1\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "1",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "for char_a, char_b in zip(a_binary.zfill(max_len), b_binary.zfill(max_len))",
                              "children": [
                                {
                                  "value": "char_a, char_b",
                                  "children": [
                                    {
                                      "value": "char_a",
                                      "children": []
                                    },
                                    {
                                      "value": "char_b",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "zip(a_binary.zfill(max_len), b_binary.zfill(max_len))",
                                  "children": [
                                    {
                                      "value": "zip",
                                      "children": []
                                    },
                                    {
                                      "value": "(a_binary.zfill(max_len), b_binary.zfill(max_len))",
                                      "children": [
                                        {
                                          "value": "a_binary.zfill(max_len)",
                                          "children": [
                                            {
                                              "value": "a_binary.zfill",
                                              "children": [
                                                {
                                                  "value": "a_binary",
                                                  "children": []
                                                },
                                                {
                                                  "value": "zfill",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(max_len)",
                                              "children": [
                                                {
                                                  "value": "max_len",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "b_binary.zfill(max_len)",
                                          "children": [
                                            {
                                              "value": "b_binary.zfill",
                                              "children": [
                                                {
                                                  "value": "b_binary",
                                                  "children": []
                                                },
                                                {
                                                  "value": "zfill",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(max_len)",
                                              "children": [
                                                {
                                                  "value": "max_len",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "if __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      "children": [
        {
          "value": "__name__ == \"__main__\"",
          "children": [
            {
              "value": "__name__",
              "children": []
            },
            {
              "value": "\"__main__\"",
              "children": [
                {
                  "value": "\"",
                  "children": []
                },
                {
                  "value": "__main__",
                  "children": []
                },
                {
                  "value": "\"",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "import doctest\n\n    doctest.testmod()",
          "children": [
            {
              "value": "import doctest",
              "children": [
                {
                  "value": "doctest",
                  "children": [
                    {
                      "value": "doctest",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "doctest.testmod()",
              "children": [
                {
                  "value": "doctest.testmod()",
                  "children": [
                    {
                      "value": "doctest.testmod",
                      "children": [
                        {
                          "value": "doctest",
                          "children": []
                        },
                        {
                          "value": "testmod",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "()",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}