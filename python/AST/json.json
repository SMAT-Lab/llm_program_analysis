{
  "value": "import json\nfrom typing import Any, Type, TypeVar, overload\n\nimport jsonschema\nfrom fastapi.encoders import jsonable_encoder\n\nfrom .type import type_match\n\n\ndef to_dict(data) -> dict:\n    return jsonable_encoder(data)\n\n\ndef dumps(data) -> str:\n    return json.dumps(jsonable_encoder(data))\n\n\nT = TypeVar(\"T\")\n\n\n@overload\ndef loads(data: str, *args, target_type: Type[T], **kwargs) -> T: ...\n\n\n@overload\ndef loads(data: str, *args, **kwargs) -> Any: ...\n\n\ndef loads(data: str, *args, target_type: Type[T] | None = None, **kwargs) -> Any:\n    parsed = json.loads(data, *args, **kwargs)\n    if target_type:\n        return type_match(parsed, target_type)\n    return parsed\n\n\ndef validate_with_jsonschema(\n    schema: dict[str, Any], data: dict[str, Any]\n) -> str | None:\n    \"\"\"\n    Validate the data against the schema.\n    Returns the validation error message if the data does not match the schema.\n    \"\"\"\n    try:\n        jsonschema.validate(data, schema)\n        return None\n    except jsonschema.ValidationError as e:\n        return str(e)",
  "children": [
    {
      "value": "import json",
      "children": [
        {
          "value": "json",
          "children": [
            {
              "value": "json",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from typing import Any, Type, TypeVar, overload",
      "children": [
        {
          "value": "typing",
          "children": [
            {
              "value": "typing",
              "children": []
            }
          ]
        },
        {
          "value": "Any",
          "children": [
            {
              "value": "Any",
              "children": []
            }
          ]
        },
        {
          "value": "Type",
          "children": [
            {
              "value": "Type",
              "children": []
            }
          ]
        },
        {
          "value": "TypeVar",
          "children": [
            {
              "value": "TypeVar",
              "children": []
            }
          ]
        },
        {
          "value": "overload",
          "children": [
            {
              "value": "overload",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import jsonschema",
      "children": [
        {
          "value": "jsonschema",
          "children": [
            {
              "value": "jsonschema",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from fastapi.encoders import jsonable_encoder",
      "children": [
        {
          "value": "fastapi.encoders",
          "children": [
            {
              "value": "fastapi",
              "children": []
            },
            {
              "value": "encoders",
              "children": []
            }
          ]
        },
        {
          "value": "jsonable_encoder",
          "children": [
            {
              "value": "jsonable_encoder",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from .type import type_match",
      "children": [
        {
          "value": ".type",
          "children": [
            {
              "value": ".",
              "children": []
            },
            {
              "value": "type",
              "children": [
                {
                  "value": "type",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "type_match",
          "children": [
            {
              "value": "type_match",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "def to_dict(data) -> dict:\n    return jsonable_encoder(data)",
      "children": [
        {
          "value": "to_dict",
          "children": []
        },
        {
          "value": "(data)",
          "children": [
            {
              "value": "data",
              "children": []
            }
          ]
        },
        {
          "value": "dict",
          "children": [
            {
              "value": "dict",
              "children": []
            }
          ]
        },
        {
          "value": "return jsonable_encoder(data)",
          "children": [
            {
              "value": "return jsonable_encoder(data)",
              "children": [
                {
                  "value": "jsonable_encoder(data)",
                  "children": [
                    {
                      "value": "jsonable_encoder",
                      "children": []
                    },
                    {
                      "value": "(data)",
                      "children": [
                        {
                          "value": "data",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def dumps(data) -> str:\n    return json.dumps(jsonable_encoder(data))",
      "children": [
        {
          "value": "dumps",
          "children": []
        },
        {
          "value": "(data)",
          "children": [
            {
              "value": "data",
              "children": []
            }
          ]
        },
        {
          "value": "str",
          "children": [
            {
              "value": "str",
              "children": []
            }
          ]
        },
        {
          "value": "return json.dumps(jsonable_encoder(data))",
          "children": [
            {
              "value": "return json.dumps(jsonable_encoder(data))",
              "children": [
                {
                  "value": "json.dumps(jsonable_encoder(data))",
                  "children": [
                    {
                      "value": "json.dumps",
                      "children": [
                        {
                          "value": "json",
                          "children": []
                        },
                        {
                          "value": "dumps",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "(jsonable_encoder(data))",
                      "children": [
                        {
                          "value": "jsonable_encoder(data)",
                          "children": [
                            {
                              "value": "jsonable_encoder",
                              "children": []
                            },
                            {
                              "value": "(data)",
                              "children": [
                                {
                                  "value": "data",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "T = TypeVar(\"T\")",
      "children": [
        {
          "value": "T = TypeVar(\"T\")",
          "children": [
            {
              "value": "T",
              "children": []
            },
            {
              "value": "TypeVar(\"T\")",
              "children": [
                {
                  "value": "TypeVar",
                  "children": []
                },
                {
                  "value": "(\"T\")",
                  "children": [
                    {
                      "value": "\"T\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "T",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "@overload\ndef loads(data: str, *args, target_type: Type[T], **kwargs) -> T: ...",
      "children": [
        {
          "value": "@overload",
          "children": [
            {
              "value": "overload",
              "children": []
            }
          ]
        },
        {
          "value": "def loads(data: str, *args, target_type: Type[T], **kwargs) -> T: ...",
          "children": [
            {
              "value": "loads",
              "children": []
            },
            {
              "value": "(data: str, *args, target_type: Type[T], **kwargs)",
              "children": [
                {
                  "value": "data: str",
                  "children": [
                    {
                      "value": "data",
                      "children": []
                    },
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "*args",
                  "children": [
                    {
                      "value": "args",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "target_type: Type[T]",
                  "children": [
                    {
                      "value": "target_type",
                      "children": []
                    },
                    {
                      "value": "Type[T]",
                      "children": [
                        {
                          "value": "Type[T]",
                          "children": [
                            {
                              "value": "Type",
                              "children": []
                            },
                            {
                              "value": "[T]",
                              "children": [
                                {
                                  "value": "T",
                                  "children": [
                                    {
                                      "value": "T",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "**kwargs",
                  "children": [
                    {
                      "value": "kwargs",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "T",
              "children": [
                {
                  "value": "T",
                  "children": []
                }
              ]
            },
            {
              "value": "...",
              "children": [
                {
                  "value": "...",
                  "children": [
                    {
                      "value": "...",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "@overload\ndef loads(data: str, *args, **kwargs) -> Any: ...",
      "children": [
        {
          "value": "@overload",
          "children": [
            {
              "value": "overload",
              "children": []
            }
          ]
        },
        {
          "value": "def loads(data: str, *args, **kwargs) -> Any: ...",
          "children": [
            {
              "value": "loads",
              "children": []
            },
            {
              "value": "(data: str, *args, **kwargs)",
              "children": [
                {
                  "value": "data: str",
                  "children": [
                    {
                      "value": "data",
                      "children": []
                    },
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "*args",
                  "children": [
                    {
                      "value": "args",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "**kwargs",
                  "children": [
                    {
                      "value": "kwargs",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "Any",
              "children": [
                {
                  "value": "Any",
                  "children": []
                }
              ]
            },
            {
              "value": "...",
              "children": [
                {
                  "value": "...",
                  "children": [
                    {
                      "value": "...",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def loads(data: str, *args, target_type: Type[T] | None = None, **kwargs) -> Any:\n    parsed = json.loads(data, *args, **kwargs)\n    if target_type:\n        return type_match(parsed, target_type)\n    return parsed",
      "children": [
        {
          "value": "loads",
          "children": []
        },
        {
          "value": "(data: str, *args, target_type: Type[T] | None = None, **kwargs)",
          "children": [
            {
              "value": "data: str",
              "children": [
                {
                  "value": "data",
                  "children": []
                },
                {
                  "value": "str",
                  "children": [
                    {
                      "value": "str",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "*args",
              "children": [
                {
                  "value": "args",
                  "children": []
                }
              ]
            },
            {
              "value": "target_type: Type[T] | None = None",
              "children": [
                {
                  "value": "target_type",
                  "children": []
                },
                {
                  "value": "Type[T] | None",
                  "children": [
                    {
                      "value": "Type[T] | None",
                      "children": [
                        {
                          "value": "Type[T]",
                          "children": [
                            {
                              "value": "Type[T]",
                              "children": [
                                {
                                  "value": "Type",
                                  "children": []
                                },
                                {
                                  "value": "[T]",
                                  "children": [
                                    {
                                      "value": "T",
                                      "children": [
                                        {
                                          "value": "T",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "None",
                          "children": [
                            {
                              "value": "None",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "None",
                  "children": []
                }
              ]
            },
            {
              "value": "**kwargs",
              "children": [
                {
                  "value": "kwargs",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "Any",
          "children": [
            {
              "value": "Any",
              "children": []
            }
          ]
        },
        {
          "value": "parsed = json.loads(data, *args, **kwargs)\n    if target_type:\n        return type_match(parsed, target_type)\n    return parsed",
          "children": [
            {
              "value": "parsed = json.loads(data, *args, **kwargs)",
              "children": [
                {
                  "value": "parsed = json.loads(data, *args, **kwargs)",
                  "children": [
                    {
                      "value": "parsed",
                      "children": []
                    },
                    {
                      "value": "json.loads(data, *args, **kwargs)",
                      "children": [
                        {
                          "value": "json.loads",
                          "children": [
                            {
                              "value": "json",
                              "children": []
                            },
                            {
                              "value": "loads",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "(data, *args, **kwargs)",
                          "children": [
                            {
                              "value": "data",
                              "children": []
                            },
                            {
                              "value": "*args",
                              "children": [
                                {
                                  "value": "args",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "**kwargs",
                              "children": [
                                {
                                  "value": "kwargs",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "if target_type:\n        return type_match(parsed, target_type)",
              "children": [
                {
                  "value": "target_type",
                  "children": []
                },
                {
                  "value": "return type_match(parsed, target_type)",
                  "children": [
                    {
                      "value": "return type_match(parsed, target_type)",
                      "children": [
                        {
                          "value": "type_match(parsed, target_type)",
                          "children": [
                            {
                              "value": "type_match",
                              "children": []
                            },
                            {
                              "value": "(parsed, target_type)",
                              "children": [
                                {
                                  "value": "parsed",
                                  "children": []
                                },
                                {
                                  "value": "target_type",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "return parsed",
              "children": [
                {
                  "value": "parsed",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def validate_with_jsonschema(\n    schema: dict[str, Any], data: dict[str, Any]\n) -> str | None:\n    \"\"\"\n    Validate the data against the schema.\n    Returns the validation error message if the data does not match the schema.\n    \"\"\"\n    try:\n        jsonschema.validate(data, schema)\n        return None\n    except jsonschema.ValidationError as e:\n        return str(e)",
      "children": [
        {
          "value": "validate_with_jsonschema",
          "children": []
        },
        {
          "value": "(\n    schema: dict[str, Any], data: dict[str, Any]\n)",
          "children": [
            {
              "value": "schema: dict[str, Any]",
              "children": [
                {
                  "value": "schema",
                  "children": []
                },
                {
                  "value": "dict[str, Any]",
                  "children": [
                    {
                      "value": "dict[str, Any]",
                      "children": [
                        {
                          "value": "dict",
                          "children": []
                        },
                        {
                          "value": "[str, Any]",
                          "children": [
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "Any",
                              "children": [
                                {
                                  "value": "Any",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "data: dict[str, Any]",
              "children": [
                {
                  "value": "data",
                  "children": []
                },
                {
                  "value": "dict[str, Any]",
                  "children": [
                    {
                      "value": "dict[str, Any]",
                      "children": [
                        {
                          "value": "dict",
                          "children": []
                        },
                        {
                          "value": "[str, Any]",
                          "children": [
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "Any",
                              "children": [
                                {
                                  "value": "Any",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "str | None",
          "children": [
            {
              "value": "str | None",
              "children": [
                {
                  "value": "str",
                  "children": []
                },
                {
                  "value": "None",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "\"\"\"\n    Validate the data against the schema.\n    Returns the validation error message if the data does not match the schema.\n    \"\"\"\n    try:\n        jsonschema.validate(data, schema)\n        return None\n    except jsonschema.ValidationError as e:\n        return str(e)",
          "children": [
            {
              "value": "\"\"\"\n    Validate the data against the schema.\n    Returns the validation error message if the data does not match the schema.\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    Validate the data against the schema.\n    Returns the validation error message if the data does not match the schema.\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Validate the data against the schema.\n    Returns the validation error message if the data does not match the schema.",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "try:\n        jsonschema.validate(data, schema)\n        return None\n    except jsonschema.ValidationError as e:\n        return str(e)",
              "children": [
                {
                  "value": "jsonschema.validate(data, schema)\n        return None",
                  "children": [
                    {
                      "value": "jsonschema.validate(data, schema)",
                      "children": [
                        {
                          "value": "jsonschema.validate(data, schema)",
                          "children": [
                            {
                              "value": "jsonschema.validate",
                              "children": [
                                {
                                  "value": "jsonschema",
                                  "children": []
                                },
                                {
                                  "value": "validate",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(data, schema)",
                              "children": [
                                {
                                  "value": "data",
                                  "children": []
                                },
                                {
                                  "value": "schema",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return None",
                      "children": [
                        {
                          "value": "None",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "except jsonschema.ValidationError as e:\n        return str(e)",
                  "children": [
                    {
                      "value": "jsonschema.ValidationError as e",
                      "children": [
                        {
                          "value": "jsonschema.ValidationError",
                          "children": [
                            {
                              "value": "jsonschema",
                              "children": []
                            },
                            {
                              "value": "ValidationError",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "e",
                          "children": [
                            {
                              "value": "e",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return str(e)",
                      "children": [
                        {
                          "value": "return str(e)",
                          "children": [
                            {
                              "value": "str(e)",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                },
                                {
                                  "value": "(e)",
                                  "children": [
                                    {
                                      "value": "e",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}