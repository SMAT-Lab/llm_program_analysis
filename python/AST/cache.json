{
  "value": "import threading\nfrom typing import Callable, ParamSpec, TypeVar\n\nP = ParamSpec(\"P\")\nR = TypeVar(\"R\")\n\n\ndef thread_cached(func: Callable[P, R]) -> Callable[P, R]:\n    thread_local = threading.local()\n\n    def wrapper(*args: P.args, **kwargs: P.kwargs) -> R:\n        cache = getattr(thread_local, \"cache\", None)\n        if cache is None:\n            cache = thread_local.cache = {}\n        key = (args, tuple(sorted(kwargs.items())))\n        if key not in cache:\n            cache[key] = func(*args, **kwargs)\n        return cache[key]\n\n    return wrapper",
  "children": [
    {
      "value": "import threading",
      "children": [
        {
          "value": "threading",
          "children": [
            {
              "value": "threading",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from typing import Callable, ParamSpec, TypeVar",
      "children": [
        {
          "value": "typing",
          "children": [
            {
              "value": "typing",
              "children": []
            }
          ]
        },
        {
          "value": "Callable",
          "children": [
            {
              "value": "Callable",
              "children": []
            }
          ]
        },
        {
          "value": "ParamSpec",
          "children": [
            {
              "value": "ParamSpec",
              "children": []
            }
          ]
        },
        {
          "value": "TypeVar",
          "children": [
            {
              "value": "TypeVar",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "P = ParamSpec(\"P\")",
      "children": [
        {
          "value": "P = ParamSpec(\"P\")",
          "children": [
            {
              "value": "P",
              "children": []
            },
            {
              "value": "ParamSpec(\"P\")",
              "children": [
                {
                  "value": "ParamSpec",
                  "children": []
                },
                {
                  "value": "(\"P\")",
                  "children": [
                    {
                      "value": "\"P\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "P",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "R = TypeVar(\"R\")",
      "children": [
        {
          "value": "R = TypeVar(\"R\")",
          "children": [
            {
              "value": "R",
              "children": []
            },
            {
              "value": "TypeVar(\"R\")",
              "children": [
                {
                  "value": "TypeVar",
                  "children": []
                },
                {
                  "value": "(\"R\")",
                  "children": [
                    {
                      "value": "\"R\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "R",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def thread_cached(func: Callable[P, R]) -> Callable[P, R]:\n    thread_local = threading.local()\n\n    def wrapper(*args: P.args, **kwargs: P.kwargs) -> R:\n        cache = getattr(thread_local, \"cache\", None)\n        if cache is None:\n            cache = thread_local.cache = {}\n        key = (args, tuple(sorted(kwargs.items())))\n        if key not in cache:\n            cache[key] = func(*args, **kwargs)\n        return cache[key]\n\n    return wrapper",
      "children": [
        {
          "value": "thread_cached",
          "children": []
        },
        {
          "value": "(func: Callable[P, R])",
          "children": [
            {
              "value": "func: Callable[P, R]",
              "children": [
                {
                  "value": "func",
                  "children": []
                },
                {
                  "value": "Callable[P, R]",
                  "children": [
                    {
                      "value": "Callable[P, R]",
                      "children": [
                        {
                          "value": "Callable",
                          "children": []
                        },
                        {
                          "value": "[P, R]",
                          "children": [
                            {
                              "value": "P",
                              "children": [
                                {
                                  "value": "P",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "R",
                              "children": [
                                {
                                  "value": "R",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "Callable[P, R]",
          "children": [
            {
              "value": "Callable[P, R]",
              "children": [
                {
                  "value": "Callable",
                  "children": []
                },
                {
                  "value": "[P, R]",
                  "children": [
                    {
                      "value": "P",
                      "children": [
                        {
                          "value": "P",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "R",
                      "children": [
                        {
                          "value": "R",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "thread_local = threading.local()\n\n    def wrapper(*args: P.args, **kwargs: P.kwargs) -> R:\n        cache = getattr(thread_local, \"cache\", None)\n        if cache is None:\n            cache = thread_local.cache = {}\n        key = (args, tuple(sorted(kwargs.items())))\n        if key not in cache:\n            cache[key] = func(*args, **kwargs)\n        return cache[key]\n\n    return wrapper",
          "children": [
            {
              "value": "thread_local = threading.local()",
              "children": [
                {
                  "value": "thread_local = threading.local()",
                  "children": [
                    {
                      "value": "thread_local",
                      "children": []
                    },
                    {
                      "value": "threading.local()",
                      "children": [
                        {
                          "value": "threading.local",
                          "children": [
                            {
                              "value": "threading",
                              "children": []
                            },
                            {
                              "value": "local",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "()",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def wrapper(*args: P.args, **kwargs: P.kwargs) -> R:\n        cache = getattr(thread_local, \"cache\", None)\n        if cache is None:\n            cache = thread_local.cache = {}\n        key = (args, tuple(sorted(kwargs.items())))\n        if key not in cache:\n            cache[key] = func(*args, **kwargs)\n        return cache[key]",
              "children": [
                {
                  "value": "wrapper",
                  "children": []
                },
                {
                  "value": "(*args: P.args, **kwargs: P.kwargs)",
                  "children": [
                    {
                      "value": "*args: P.args",
                      "children": [
                        {
                          "value": "*args",
                          "children": [
                            {
                              "value": "args",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "P.args",
                          "children": [
                            {
                              "value": "P.args",
                              "children": [
                                {
                                  "value": "P",
                                  "children": []
                                },
                                {
                                  "value": "args",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "**kwargs: P.kwargs",
                      "children": [
                        {
                          "value": "**kwargs",
                          "children": [
                            {
                              "value": "kwargs",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "P.kwargs",
                          "children": [
                            {
                              "value": "P.kwargs",
                              "children": [
                                {
                                  "value": "P",
                                  "children": []
                                },
                                {
                                  "value": "kwargs",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "R",
                  "children": [
                    {
                      "value": "R",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "cache = getattr(thread_local, \"cache\", None)\n        if cache is None:\n            cache = thread_local.cache = {}\n        key = (args, tuple(sorted(kwargs.items())))\n        if key not in cache:\n            cache[key] = func(*args, **kwargs)\n        return cache[key]",
                  "children": [
                    {
                      "value": "cache = getattr(thread_local, \"cache\", None)",
                      "children": [
                        {
                          "value": "cache = getattr(thread_local, \"cache\", None)",
                          "children": [
                            {
                              "value": "cache",
                              "children": []
                            },
                            {
                              "value": "getattr(thread_local, \"cache\", None)",
                              "children": [
                                {
                                  "value": "getattr",
                                  "children": []
                                },
                                {
                                  "value": "(thread_local, \"cache\", None)",
                                  "children": [
                                    {
                                      "value": "thread_local",
                                      "children": []
                                    },
                                    {
                                      "value": "\"cache\"",
                                      "children": [
                                        {
                                          "value": "\"",
                                          "children": []
                                        },
                                        {
                                          "value": "cache",
                                          "children": []
                                        },
                                        {
                                          "value": "\"",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "None",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if cache is None:\n            cache = thread_local.cache = {}",
                      "children": [
                        {
                          "value": "cache is None",
                          "children": [
                            {
                              "value": "cache",
                              "children": []
                            },
                            {
                              "value": "None",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "cache = thread_local.cache = {}",
                          "children": [
                            {
                              "value": "cache = thread_local.cache = {}",
                              "children": [
                                {
                                  "value": "cache = thread_local.cache = {}",
                                  "children": [
                                    {
                                      "value": "cache",
                                      "children": []
                                    },
                                    {
                                      "value": "thread_local.cache = {}",
                                      "children": [
                                        {
                                          "value": "thread_local.cache",
                                          "children": [
                                            {
                                              "value": "thread_local",
                                              "children": []
                                            },
                                            {
                                              "value": "cache",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "{}",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "key = (args, tuple(sorted(kwargs.items())))",
                      "children": [
                        {
                          "value": "key = (args, tuple(sorted(kwargs.items())))",
                          "children": [
                            {
                              "value": "key",
                              "children": []
                            },
                            {
                              "value": "(args, tuple(sorted(kwargs.items())))",
                              "children": [
                                {
                                  "value": "args",
                                  "children": []
                                },
                                {
                                  "value": "tuple(sorted(kwargs.items()))",
                                  "children": [
                                    {
                                      "value": "tuple",
                                      "children": []
                                    },
                                    {
                                      "value": "(sorted(kwargs.items()))",
                                      "children": [
                                        {
                                          "value": "sorted(kwargs.items())",
                                          "children": [
                                            {
                                              "value": "sorted",
                                              "children": []
                                            },
                                            {
                                              "value": "(kwargs.items())",
                                              "children": [
                                                {
                                                  "value": "kwargs.items()",
                                                  "children": [
                                                    {
                                                      "value": "kwargs.items",
                                                      "children": [
                                                        {
                                                          "value": "kwargs",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "items",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "()",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if key not in cache:\n            cache[key] = func(*args, **kwargs)",
                      "children": [
                        {
                          "value": "key not in cache",
                          "children": [
                            {
                              "value": "key",
                              "children": []
                            },
                            {
                              "value": "cache",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "cache[key] = func(*args, **kwargs)",
                          "children": [
                            {
                              "value": "cache[key] = func(*args, **kwargs)",
                              "children": [
                                {
                                  "value": "cache[key] = func(*args, **kwargs)",
                                  "children": [
                                    {
                                      "value": "cache[key]",
                                      "children": [
                                        {
                                          "value": "cache",
                                          "children": []
                                        },
                                        {
                                          "value": "key",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "func(*args, **kwargs)",
                                      "children": [
                                        {
                                          "value": "func",
                                          "children": []
                                        },
                                        {
                                          "value": "(*args, **kwargs)",
                                          "children": [
                                            {
                                              "value": "*args",
                                              "children": [
                                                {
                                                  "value": "args",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "**kwargs",
                                              "children": [
                                                {
                                                  "value": "kwargs",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return cache[key]",
                      "children": [
                        {
                          "value": "cache[key]",
                          "children": [
                            {
                              "value": "cache",
                              "children": []
                            },
                            {
                              "value": "key",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "return wrapper",
              "children": [
                {
                  "value": "wrapper",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}