{
  "value": "from contextlib import contextmanager\nfrom threading import Lock\nfrom typing import TYPE_CHECKING, Any\n\nfrom expiringdict import ExpiringDict\n\nif TYPE_CHECKING:\n    from redis import Redis\n    from redis.lock import Lock as RedisLock\n\n\nclass RedisKeyedMutex:\n    \"\"\"\n    This class provides a mutex that can be locked and unlocked by a specific key,\n    using Redis as a distributed locking provider.\n    It uses an ExpiringDict to automatically clear the mutex after a specified timeout,\n    in case the key is not unlocked for a specified duration, to prevent memory leaks.\n    \"\"\"\n\n    def __init__(self, redis: \"Redis\", timeout: int | None = 60):\n        self.redis = redis\n        self.timeout = timeout\n        self.locks: dict[Any, \"RedisLock\"] = ExpiringDict(\n            max_len=6000, max_age_seconds=self.timeout\n        )\n        self.locks_lock = Lock()\n\n    @contextmanager\n    def locked(self, key: Any):\n        lock = self.acquire(key)\n        try:\n            yield\n        finally:\n            if lock.locked():\n                lock.release()\n\n    def acquire(self, key: Any) -> \"RedisLock\":\n        \"\"\"Acquires and returns a lock with the given key\"\"\"\n        with self.locks_lock:\n            if key not in self.locks:\n                self.locks[key] = self.redis.lock(\n                    str(key), self.timeout, thread_local=False\n                )\n            lock = self.locks[key]\n        lock.acquire()\n        return lock\n\n    def release(self, key: Any):\n        if (lock := self.locks.get(key)) and lock.locked() and lock.owned():\n            lock.release()\n\n    def release_all_locks(self):\n        \"\"\"Call this on process termination to ensure all locks are released\"\"\"\n        self.locks_lock.acquire(blocking=False)\n        for lock in self.locks.values():\n            if lock.locked() and lock.owned():\n                lock.release()",
  "children": [
    {
      "value": "from contextlib import contextmanager",
      "children": [
        {
          "value": "contextlib",
          "children": [
            {
              "value": "contextlib",
              "children": []
            }
          ]
        },
        {
          "value": "contextmanager",
          "children": [
            {
              "value": "contextmanager",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from threading import Lock",
      "children": [
        {
          "value": "threading",
          "children": [
            {
              "value": "threading",
              "children": []
            }
          ]
        },
        {
          "value": "Lock",
          "children": [
            {
              "value": "Lock",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from typing import TYPE_CHECKING, Any",
      "children": [
        {
          "value": "typing",
          "children": [
            {
              "value": "typing",
              "children": []
            }
          ]
        },
        {
          "value": "TYPE_CHECKING",
          "children": [
            {
              "value": "TYPE_CHECKING",
              "children": []
            }
          ]
        },
        {
          "value": "Any",
          "children": [
            {
              "value": "Any",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from expiringdict import ExpiringDict",
      "children": [
        {
          "value": "expiringdict",
          "children": [
            {
              "value": "expiringdict",
              "children": []
            }
          ]
        },
        {
          "value": "ExpiringDict",
          "children": [
            {
              "value": "ExpiringDict",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "if TYPE_CHECKING:\n    from redis import Redis\n    from redis.lock import Lock as RedisLock",
      "children": [
        {
          "value": "TYPE_CHECKING",
          "children": []
        },
        {
          "value": "from redis import Redis\n    from redis.lock import Lock as RedisLock",
          "children": [
            {
              "value": "from redis import Redis",
              "children": [
                {
                  "value": "redis",
                  "children": [
                    {
                      "value": "redis",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "Redis",
                  "children": [
                    {
                      "value": "Redis",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "from redis.lock import Lock as RedisLock",
              "children": [
                {
                  "value": "redis.lock",
                  "children": [
                    {
                      "value": "redis",
                      "children": []
                    },
                    {
                      "value": "lock",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "Lock as RedisLock",
                  "children": [
                    {
                      "value": "Lock",
                      "children": [
                        {
                          "value": "Lock",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "RedisLock",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class RedisKeyedMutex:\n    \"\"\"\n    This class provides a mutex that can be locked and unlocked by a specific key,\n    using Redis as a distributed locking provider.\n    It uses an ExpiringDict to automatically clear the mutex after a specified timeout,\n    in case the key is not unlocked for a specified duration, to prevent memory leaks.\n    \"\"\"\n\n    def __init__(self, redis: \"Redis\", timeout: int | None = 60):\n        self.redis = redis\n        self.timeout = timeout\n        self.locks: dict[Any, \"RedisLock\"] = ExpiringDict(\n            max_len=6000, max_age_seconds=self.timeout\n        )\n        self.locks_lock = Lock()\n\n    @contextmanager\n    def locked(self, key: Any):\n        lock = self.acquire(key)\n        try:\n            yield\n        finally:\n            if lock.locked():\n                lock.release()\n\n    def acquire(self, key: Any) -> \"RedisLock\":\n        \"\"\"Acquires and returns a lock with the given key\"\"\"\n        with self.locks_lock:\n            if key not in self.locks:\n                self.locks[key] = self.redis.lock(\n                    str(key), self.timeout, thread_local=False\n                )\n            lock = self.locks[key]\n        lock.acquire()\n        return lock\n\n    def release(self, key: Any):\n        if (lock := self.locks.get(key)) and lock.locked() and lock.owned():\n            lock.release()\n\n    def release_all_locks(self):\n        \"\"\"Call this on process termination to ensure all locks are released\"\"\"\n        self.locks_lock.acquire(blocking=False)\n        for lock in self.locks.values():\n            if lock.locked() and lock.owned():\n                lock.release()",
      "children": [
        {
          "value": "RedisKeyedMutex",
          "children": []
        },
        {
          "value": "\"\"\"\n    This class provides a mutex that can be locked and unlocked by a specific key,\n    using Redis as a distributed locking provider.\n    It uses an ExpiringDict to automatically clear the mutex after a specified timeout,\n    in case the key is not unlocked for a specified duration, to prevent memory leaks.\n    \"\"\"\n\n    def __init__(self, redis: \"Redis\", timeout: int | None = 60):\n        self.redis = redis\n        self.timeout = timeout\n        self.locks: dict[Any, \"RedisLock\"] = ExpiringDict(\n            max_len=6000, max_age_seconds=self.timeout\n        )\n        self.locks_lock = Lock()\n\n    @contextmanager\n    def locked(self, key: Any):\n        lock = self.acquire(key)\n        try:\n            yield\n        finally:\n            if lock.locked():\n                lock.release()\n\n    def acquire(self, key: Any) -> \"RedisLock\":\n        \"\"\"Acquires and returns a lock with the given key\"\"\"\n        with self.locks_lock:\n            if key not in self.locks:\n                self.locks[key] = self.redis.lock(\n                    str(key), self.timeout, thread_local=False\n                )\n            lock = self.locks[key]\n        lock.acquire()\n        return lock\n\n    def release(self, key: Any):\n        if (lock := self.locks.get(key)) and lock.locked() and lock.owned():\n            lock.release()\n\n    def release_all_locks(self):\n        \"\"\"Call this on process termination to ensure all locks are released\"\"\"\n        self.locks_lock.acquire(blocking=False)\n        for lock in self.locks.values():\n            if lock.locked() and lock.owned():\n                lock.release()",
          "children": [
            {
              "value": "\"\"\"\n    This class provides a mutex that can be locked and unlocked by a specific key,\n    using Redis as a distributed locking provider.\n    It uses an ExpiringDict to automatically clear the mutex after a specified timeout,\n    in case the key is not unlocked for a specified duration, to prevent memory leaks.\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    This class provides a mutex that can be locked and unlocked by a specific key,\n    using Redis as a distributed locking provider.\n    It uses an ExpiringDict to automatically clear the mutex after a specified timeout,\n    in case the key is not unlocked for a specified duration, to prevent memory leaks.\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "This class provides a mutex that can be locked and unlocked by a specific key,\n    using Redis as a distributed locking provider.\n    It uses an ExpiringDict to automatically clear the mutex after a specified timeout,\n    in case the key is not unlocked for a specified duration, to prevent memory leaks.",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "def __init__(self, redis: \"Redis\", timeout: int | None = 60):\n        self.redis = redis\n        self.timeout = timeout\n        self.locks: dict[Any, \"RedisLock\"] = ExpiringDict(\n            max_len=6000, max_age_seconds=self.timeout\n        )\n        self.locks_lock = Lock()",
              "children": [
                {
                  "value": "__init__",
                  "children": []
                },
                {
                  "value": "(self, redis: \"Redis\", timeout: int | None = 60)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "redis: \"Redis\"",
                      "children": [
                        {
                          "value": "redis",
                          "children": []
                        },
                        {
                          "value": "\"Redis\"",
                          "children": [
                            {
                              "value": "\"Redis\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "Redis",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "timeout: int | None = 60",
                      "children": [
                        {
                          "value": "timeout",
                          "children": []
                        },
                        {
                          "value": "int | None",
                          "children": [
                            {
                              "value": "int | None",
                              "children": [
                                {
                                  "value": "int",
                                  "children": []
                                },
                                {
                                  "value": "None",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "60",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "self.redis = redis\n        self.timeout = timeout\n        self.locks: dict[Any, \"RedisLock\"] = ExpiringDict(\n            max_len=6000, max_age_seconds=self.timeout\n        )\n        self.locks_lock = Lock()",
                  "children": [
                    {
                      "value": "self.redis = redis",
                      "children": [
                        {
                          "value": "self.redis = redis",
                          "children": [
                            {
                              "value": "self.redis",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "redis",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "redis",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.timeout = timeout",
                      "children": [
                        {
                          "value": "self.timeout = timeout",
                          "children": [
                            {
                              "value": "self.timeout",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "timeout",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "timeout",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.locks: dict[Any, \"RedisLock\"] = ExpiringDict(\n            max_len=6000, max_age_seconds=self.timeout\n        )",
                      "children": [
                        {
                          "value": "self.locks: dict[Any, \"RedisLock\"] = ExpiringDict(\n            max_len=6000, max_age_seconds=self.timeout\n        )",
                          "children": [
                            {
                              "value": "self.locks",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "locks",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "dict[Any, \"RedisLock\"]",
                              "children": [
                                {
                                  "value": "dict[Any, \"RedisLock\"]",
                                  "children": [
                                    {
                                      "value": "dict",
                                      "children": []
                                    },
                                    {
                                      "value": "[Any, \"RedisLock\"]",
                                      "children": [
                                        {
                                          "value": "Any",
                                          "children": [
                                            {
                                              "value": "Any",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"RedisLock\"",
                                          "children": [
                                            {
                                              "value": "\"RedisLock\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "RedisLock",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "ExpiringDict(\n            max_len=6000, max_age_seconds=self.timeout\n        )",
                              "children": [
                                {
                                  "value": "ExpiringDict",
                                  "children": []
                                },
                                {
                                  "value": "(\n            max_len=6000, max_age_seconds=self.timeout\n        )",
                                  "children": [
                                    {
                                      "value": "max_len=6000",
                                      "children": [
                                        {
                                          "value": "max_len",
                                          "children": []
                                        },
                                        {
                                          "value": "6000",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "max_age_seconds=self.timeout",
                                      "children": [
                                        {
                                          "value": "max_age_seconds",
                                          "children": []
                                        },
                                        {
                                          "value": "self.timeout",
                                          "children": [
                                            {
                                              "value": "self",
                                              "children": []
                                            },
                                            {
                                              "value": "timeout",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.locks_lock = Lock()",
                      "children": [
                        {
                          "value": "self.locks_lock = Lock()",
                          "children": [
                            {
                              "value": "self.locks_lock",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "locks_lock",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "Lock()",
                              "children": [
                                {
                                  "value": "Lock",
                                  "children": []
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "@contextmanager\n    def locked(self, key: Any):\n        lock = self.acquire(key)\n        try:\n            yield\n        finally:\n            if lock.locked():\n                lock.release()",
              "children": [
                {
                  "value": "@contextmanager",
                  "children": [
                    {
                      "value": "contextmanager",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "def locked(self, key: Any):\n        lock = self.acquire(key)\n        try:\n            yield\n        finally:\n            if lock.locked():\n                lock.release()",
                  "children": [
                    {
                      "value": "locked",
                      "children": []
                    },
                    {
                      "value": "(self, key: Any)",
                      "children": [
                        {
                          "value": "self",
                          "children": []
                        },
                        {
                          "value": "key: Any",
                          "children": [
                            {
                              "value": "key",
                              "children": []
                            },
                            {
                              "value": "Any",
                              "children": [
                                {
                                  "value": "Any",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "lock = self.acquire(key)\n        try:\n            yield\n        finally:\n            if lock.locked():\n                lock.release()",
                      "children": [
                        {
                          "value": "lock = self.acquire(key)",
                          "children": [
                            {
                              "value": "lock = self.acquire(key)",
                              "children": [
                                {
                                  "value": "lock",
                                  "children": []
                                },
                                {
                                  "value": "self.acquire(key)",
                                  "children": [
                                    {
                                      "value": "self.acquire",
                                      "children": [
                                        {
                                          "value": "self",
                                          "children": []
                                        },
                                        {
                                          "value": "acquire",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(key)",
                                      "children": [
                                        {
                                          "value": "key",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "try:\n            yield\n        finally:\n            if lock.locked():\n                lock.release()",
                          "children": [
                            {
                              "value": "yield",
                              "children": [
                                {
                                  "value": "yield",
                                  "children": [
                                    {
                                      "value": "yield",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "finally:\n            if lock.locked():\n                lock.release()",
                              "children": [
                                {
                                  "value": "if lock.locked():\n                lock.release()",
                                  "children": [
                                    {
                                      "value": "if lock.locked():\n                lock.release()",
                                      "children": [
                                        {
                                          "value": "lock.locked()",
                                          "children": [
                                            {
                                              "value": "lock.locked",
                                              "children": [
                                                {
                                                  "value": "lock",
                                                  "children": []
                                                },
                                                {
                                                  "value": "locked",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "()",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "lock.release()",
                                          "children": [
                                            {
                                              "value": "lock.release()",
                                              "children": [
                                                {
                                                  "value": "lock.release()",
                                                  "children": [
                                                    {
                                                      "value": "lock.release",
                                                      "children": [
                                                        {
                                                          "value": "lock",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "release",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "()",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def acquire(self, key: Any) -> \"RedisLock\":\n        \"\"\"Acquires and returns a lock with the given key\"\"\"\n        with self.locks_lock:\n            if key not in self.locks:\n                self.locks[key] = self.redis.lock(\n                    str(key), self.timeout, thread_local=False\n                )\n            lock = self.locks[key]\n        lock.acquire()\n        return lock",
              "children": [
                {
                  "value": "acquire",
                  "children": []
                },
                {
                  "value": "(self, key: Any)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "key: Any",
                      "children": [
                        {
                          "value": "key",
                          "children": []
                        },
                        {
                          "value": "Any",
                          "children": [
                            {
                              "value": "Any",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "\"RedisLock\"",
                  "children": [
                    {
                      "value": "\"RedisLock\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "RedisLock",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "\"\"\"Acquires and returns a lock with the given key\"\"\"\n        with self.locks_lock:\n            if key not in self.locks:\n                self.locks[key] = self.redis.lock(\n                    str(key), self.timeout, thread_local=False\n                )\n            lock = self.locks[key]\n        lock.acquire()\n        return lock",
                  "children": [
                    {
                      "value": "\"\"\"Acquires and returns a lock with the given key\"\"\"",
                      "children": [
                        {
                          "value": "\"\"\"Acquires and returns a lock with the given key\"\"\"",
                          "children": [
                            {
                              "value": "\"\"\"",
                              "children": []
                            },
                            {
                              "value": "Acquires and returns a lock with the given key",
                              "children": []
                            },
                            {
                              "value": "\"\"\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "with self.locks_lock:\n            if key not in self.locks:\n                self.locks[key] = self.redis.lock(\n                    str(key), self.timeout, thread_local=False\n                )\n            lock = self.locks[key]",
                      "children": [
                        {
                          "value": "self.locks_lock",
                          "children": [
                            {
                              "value": "self.locks_lock",
                              "children": [
                                {
                                  "value": "self.locks_lock",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "locks_lock",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "if key not in self.locks:\n                self.locks[key] = self.redis.lock(\n                    str(key), self.timeout, thread_local=False\n                )\n            lock = self.locks[key]",
                          "children": [
                            {
                              "value": "if key not in self.locks:\n                self.locks[key] = self.redis.lock(\n                    str(key), self.timeout, thread_local=False\n                )",
                              "children": [
                                {
                                  "value": "key not in self.locks",
                                  "children": [
                                    {
                                      "value": "key",
                                      "children": []
                                    },
                                    {
                                      "value": "self.locks",
                                      "children": [
                                        {
                                          "value": "self",
                                          "children": []
                                        },
                                        {
                                          "value": "locks",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "self.locks[key] = self.redis.lock(\n                    str(key), self.timeout, thread_local=False\n                )",
                                  "children": [
                                    {
                                      "value": "self.locks[key] = self.redis.lock(\n                    str(key), self.timeout, thread_local=False\n                )",
                                      "children": [
                                        {
                                          "value": "self.locks[key] = self.redis.lock(\n                    str(key), self.timeout, thread_local=False\n                )",
                                          "children": [
                                            {
                                              "value": "self.locks[key]",
                                              "children": [
                                                {
                                                  "value": "self.locks",
                                                  "children": [
                                                    {
                                                      "value": "self",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "locks",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "key",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "self.redis.lock(\n                    str(key), self.timeout, thread_local=False\n                )",
                                              "children": [
                                                {
                                                  "value": "self.redis.lock",
                                                  "children": [
                                                    {
                                                      "value": "self.redis",
                                                      "children": [
                                                        {
                                                          "value": "self",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "redis",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "lock",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(\n                    str(key), self.timeout, thread_local=False\n                )",
                                                  "children": [
                                                    {
                                                      "value": "str(key)",
                                                      "children": [
                                                        {
                                                          "value": "str",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "(key)",
                                                          "children": [
                                                            {
                                                              "value": "key",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "self.timeout",
                                                      "children": [
                                                        {
                                                          "value": "self",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "timeout",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "thread_local=False",
                                                      "children": [
                                                        {
                                                          "value": "thread_local",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "False",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "lock = self.locks[key]",
                              "children": [
                                {
                                  "value": "lock = self.locks[key]",
                                  "children": [
                                    {
                                      "value": "lock",
                                      "children": []
                                    },
                                    {
                                      "value": "self.locks[key]",
                                      "children": [
                                        {
                                          "value": "self.locks",
                                          "children": [
                                            {
                                              "value": "self",
                                              "children": []
                                            },
                                            {
                                              "value": "locks",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "key",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "lock.acquire()",
                      "children": [
                        {
                          "value": "lock.acquire()",
                          "children": [
                            {
                              "value": "lock.acquire",
                              "children": [
                                {
                                  "value": "lock",
                                  "children": []
                                },
                                {
                                  "value": "acquire",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "()",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return lock",
                      "children": [
                        {
                          "value": "lock",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def release(self, key: Any):\n        if (lock := self.locks.get(key)) and lock.locked() and lock.owned():\n            lock.release()",
              "children": [
                {
                  "value": "release",
                  "children": []
                },
                {
                  "value": "(self, key: Any)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "key: Any",
                      "children": [
                        {
                          "value": "key",
                          "children": []
                        },
                        {
                          "value": "Any",
                          "children": [
                            {
                              "value": "Any",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "if (lock := self.locks.get(key)) and lock.locked() and lock.owned():\n            lock.release()",
                  "children": [
                    {
                      "value": "if (lock := self.locks.get(key)) and lock.locked() and lock.owned():\n            lock.release()",
                      "children": [
                        {
                          "value": "(lock := self.locks.get(key)) and lock.locked() and lock.owned()",
                          "children": [
                            {
                              "value": "(lock := self.locks.get(key)) and lock.locked()",
                              "children": [
                                {
                                  "value": "(lock := self.locks.get(key))",
                                  "children": [
                                    {
                                      "value": "lock := self.locks.get(key)",
                                      "children": [
                                        {
                                          "value": "lock",
                                          "children": []
                                        },
                                        {
                                          "value": "self.locks.get(key)",
                                          "children": [
                                            {
                                              "value": "self.locks.get",
                                              "children": [
                                                {
                                                  "value": "self.locks",
                                                  "children": [
                                                    {
                                                      "value": "self",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "locks",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "get",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(key)",
                                              "children": [
                                                {
                                                  "value": "key",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "lock.locked()",
                                  "children": [
                                    {
                                      "value": "lock.locked",
                                      "children": [
                                        {
                                          "value": "lock",
                                          "children": []
                                        },
                                        {
                                          "value": "locked",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "lock.owned()",
                              "children": [
                                {
                                  "value": "lock.owned",
                                  "children": [
                                    {
                                      "value": "lock",
                                      "children": []
                                    },
                                    {
                                      "value": "owned",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "lock.release()",
                          "children": [
                            {
                              "value": "lock.release()",
                              "children": [
                                {
                                  "value": "lock.release()",
                                  "children": [
                                    {
                                      "value": "lock.release",
                                      "children": [
                                        {
                                          "value": "lock",
                                          "children": []
                                        },
                                        {
                                          "value": "release",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "()",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def release_all_locks(self):\n        \"\"\"Call this on process termination to ensure all locks are released\"\"\"\n        self.locks_lock.acquire(blocking=False)\n        for lock in self.locks.values():\n            if lock.locked() and lock.owned():\n                lock.release()",
              "children": [
                {
                  "value": "release_all_locks",
                  "children": []
                },
                {
                  "value": "(self)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "\"\"\"Call this on process termination to ensure all locks are released\"\"\"\n        self.locks_lock.acquire(blocking=False)\n        for lock in self.locks.values():\n            if lock.locked() and lock.owned():\n                lock.release()",
                  "children": [
                    {
                      "value": "\"\"\"Call this on process termination to ensure all locks are released\"\"\"",
                      "children": [
                        {
                          "value": "\"\"\"Call this on process termination to ensure all locks are released\"\"\"",
                          "children": [
                            {
                              "value": "\"\"\"",
                              "children": []
                            },
                            {
                              "value": "Call this on process termination to ensure all locks are released",
                              "children": []
                            },
                            {
                              "value": "\"\"\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "self.locks_lock.acquire(blocking=False)",
                      "children": [
                        {
                          "value": "self.locks_lock.acquire(blocking=False)",
                          "children": [
                            {
                              "value": "self.locks_lock.acquire",
                              "children": [
                                {
                                  "value": "self.locks_lock",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "locks_lock",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "acquire",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(blocking=False)",
                              "children": [
                                {
                                  "value": "blocking=False",
                                  "children": [
                                    {
                                      "value": "blocking",
                                      "children": []
                                    },
                                    {
                                      "value": "False",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "for lock in self.locks.values():\n            if lock.locked() and lock.owned():\n                lock.release()",
                      "children": [
                        {
                          "value": "lock",
                          "children": []
                        },
                        {
                          "value": "self.locks.values()",
                          "children": [
                            {
                              "value": "self.locks.values",
                              "children": [
                                {
                                  "value": "self.locks",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "locks",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "values",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "()",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "if lock.locked() and lock.owned():\n                lock.release()",
                          "children": [
                            {
                              "value": "if lock.locked() and lock.owned():\n                lock.release()",
                              "children": [
                                {
                                  "value": "lock.locked() and lock.owned()",
                                  "children": [
                                    {
                                      "value": "lock.locked()",
                                      "children": [
                                        {
                                          "value": "lock.locked",
                                          "children": [
                                            {
                                              "value": "lock",
                                              "children": []
                                            },
                                            {
                                              "value": "locked",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "()",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "lock.owned()",
                                      "children": [
                                        {
                                          "value": "lock.owned",
                                          "children": [
                                            {
                                              "value": "lock",
                                              "children": []
                                            },
                                            {
                                              "value": "owned",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "()",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "lock.release()",
                                  "children": [
                                    {
                                      "value": "lock.release()",
                                      "children": [
                                        {
                                          "value": "lock.release()",
                                          "children": [
                                            {
                                              "value": "lock.release",
                                              "children": [
                                                {
                                                  "value": "lock",
                                                  "children": []
                                                },
                                                {
                                                  "value": "release",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "()",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}