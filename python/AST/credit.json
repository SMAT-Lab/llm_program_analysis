{
  "value": "from abc import ABC, abstractmethod\nfrom datetime import datetime, timezone\n\nfrom prisma import Json\nfrom prisma.enums import CreditTransactionType\nfrom prisma.errors import UniqueViolationError\nfrom prisma.models import CreditTransaction\n\nfrom backend.data.block import Block, BlockInput, get_block\nfrom backend.data.block_cost_config import BLOCK_COSTS\nfrom backend.data.cost import BlockCost, BlockCostType\nfrom backend.util.settings import Config\n\nconfig = Config()\n\n\nclass UserCreditBase(ABC):\n    def __init__(self, num_user_credits_refill: int):\n        self.num_user_credits_refill = num_user_credits_refill\n\n    @abstractmethod\n    async def get_or_refill_credit(self, user_id: str) -> int:\n        \"\"\"\n        Get the current credit for the user and refill if no transaction has been made in the current cycle.\n\n        Returns:\n            int: The current credit for the user.\n        \"\"\"\n        pass\n\n    @abstractmethod\n    async def spend_credits(\n        self,\n        user_id: str,\n        user_credit: int,\n        block_id: str,\n        input_data: BlockInput,\n        data_size: float,\n        run_time: float,\n    ) -> int:\n        \"\"\"\n        Spend the credits for the user based on the block usage.\n\n        Args:\n            user_id (str): The user ID.\n            user_credit (int): The current credit for the user.\n            block_id (str): The block ID.\n            input_data (BlockInput): The input data for the block.\n            data_size (float): The size of the data being processed.\n            run_time (float): The time taken to run the block.\n\n        Returns:\n            int: amount of credit spent\n        \"\"\"\n        pass\n\n    @abstractmethod\n    async def top_up_credits(self, user_id: str, amount: int):\n        \"\"\"\n        Top up the credits for the user.\n\n        Args:\n            user_id (str): The user ID.\n            amount (int): The amount to top up.\n        \"\"\"\n        pass\n\n\nclass UserCredit(UserCreditBase):\n    async def get_or_refill_credit(self, user_id: str) -> int:\n        cur_time = self.time_now()\n        cur_month = cur_time.replace(day=1, hour=0, minute=0, second=0, microsecond=0)\n        nxt_month = (\n            cur_month.replace(month=cur_month.month + 1)\n            if cur_month.month < 12\n            else cur_month.replace(year=cur_month.year + 1, month=1)\n        )\n\n        user_credit = await CreditTransaction.prisma().group_by(\n            by=[\"userId\"],\n            sum={\"amount\": True},\n            where={\n                \"userId\": user_id,\n                \"createdAt\": {\"gte\": cur_month, \"lt\": nxt_month},\n                \"isActive\": True,\n            },\n        )\n\n        if user_credit:\n            credit_sum = user_credit[0].get(\"_sum\") or {}\n            return credit_sum.get(\"amount\", 0)\n\n        key = f\"MONTHLY-CREDIT-TOP-UP-{cur_month}\"\n\n        try:\n            await CreditTransaction.prisma().create(\n                data={\n                    \"amount\": self.num_user_credits_refill,\n                    \"type\": CreditTransactionType.TOP_UP,\n                    \"userId\": user_id,\n                    \"transactionKey\": key,\n                    \"createdAt\": self.time_now(),\n                }\n            )\n        except UniqueViolationError:\n            pass  # Already refilled this month\n\n        return self.num_user_credits_refill\n\n    @staticmethod\n    def time_now():\n        return datetime.now(timezone.utc)\n\n    def _block_usage_cost(\n        self,\n        block: Block,\n        input_data: BlockInput,\n        data_size: float,\n        run_time: float,\n    ) -> tuple[int, BlockInput]:\n        block_costs = BLOCK_COSTS.get(type(block))\n        if not block_costs:\n            return 0, {}\n\n        for block_cost in block_costs:\n            if not self._is_cost_filter_match(block_cost.cost_filter, input_data):\n                continue\n\n            if block_cost.cost_type == BlockCostType.RUN:\n                return block_cost.cost_amount, block_cost.cost_filter\n\n            if block_cost.cost_type == BlockCostType.SECOND:\n                return (\n                    int(run_time * block_cost.cost_amount),\n                    block_cost.cost_filter,\n                )\n\n            if block_cost.cost_type == BlockCostType.BYTE:\n                return (\n                    int(data_size * block_cost.cost_amount),\n                    block_cost.cost_filter,\n                )\n\n        return 0, {}\n\n    def _is_cost_filter_match(\n        self, cost_filter: BlockInput, input_data: BlockInput\n    ) -> bool:\n        \"\"\"\n        Filter rules:\n          - If costFilter is an object, then check if costFilter is the subset of inputValues\n          - Otherwise, check if costFilter is equal to inputValues.\n          - Undefined, null, and empty string are considered as equal.\n        \"\"\"\n        if not isinstance(cost_filter, dict) or not isinstance(input_data, dict):\n            return cost_filter == input_data\n\n        return all(\n            (not input_data.get(k) and not v)\n            or (input_data.get(k) and self._is_cost_filter_match(v, input_data[k]))\n            for k, v in cost_filter.items()\n        )\n\n    async def spend_credits(\n        self,\n        user_id: str,\n        user_credit: int,\n        block_id: str,\n        input_data: BlockInput,\n        data_size: float,\n        run_time: float,\n        validate_balance: bool = True,\n    ) -> int:\n        block = get_block(block_id)\n        if not block:\n            raise ValueError(f\"Block not found: {block_id}\")\n\n        cost, matching_filter = self._block_usage_cost(\n            block=block, input_data=input_data, data_size=data_size, run_time=run_time\n        )\n        if cost <= 0:\n            return 0\n\n        if validate_balance and user_credit < cost:\n            raise ValueError(f\"Insufficient credit: {user_credit} < {cost}\")\n\n        await CreditTransaction.prisma().create(\n            data={\n                \"userId\": user_id,\n                \"amount\": -cost,\n                \"type\": CreditTransactionType.USAGE,\n                \"blockId\": block.id,\n                \"metadata\": Json(\n                    {\n                        \"block\": block.name,\n                        \"input\": matching_filter,\n                    }\n                ),\n                \"createdAt\": self.time_now(),\n            }\n        )\n        return cost\n\n    async def top_up_credits(self, user_id: str, amount: int):\n        await CreditTransaction.prisma().create(\n            data={\n                \"userId\": user_id,\n                \"amount\": amount,\n                \"type\": CreditTransactionType.TOP_UP,\n                \"createdAt\": self.time_now(),\n            }\n        )\n\n\nclass DisabledUserCredit(UserCreditBase):\n    async def get_or_refill_credit(self, *args, **kwargs) -> int:\n        return 0\n\n    async def spend_credits(self, *args, **kwargs) -> int:\n        return 0\n\n    async def top_up_credits(self, *args, **kwargs):\n        pass\n\n\ndef get_user_credit_model() -> UserCreditBase:\n    if config.enable_credit.lower() == \"true\":\n        return UserCredit(config.num_user_credits_refill)\n    else:\n        return DisabledUserCredit(0)\n\n\ndef get_block_costs() -> dict[str, list[BlockCost]]:\n    return {block().id: costs for block, costs in BLOCK_COSTS.items()}",
  "children": [
    {
      "value": "from abc import ABC, abstractmethod",
      "children": [
        {
          "value": "abc",
          "children": [
            {
              "value": "abc",
              "children": []
            }
          ]
        },
        {
          "value": "ABC",
          "children": [
            {
              "value": "ABC",
              "children": []
            }
          ]
        },
        {
          "value": "abstractmethod",
          "children": [
            {
              "value": "abstractmethod",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from datetime import datetime, timezone",
      "children": [
        {
          "value": "datetime",
          "children": [
            {
              "value": "datetime",
              "children": []
            }
          ]
        },
        {
          "value": "datetime",
          "children": [
            {
              "value": "datetime",
              "children": []
            }
          ]
        },
        {
          "value": "timezone",
          "children": [
            {
              "value": "timezone",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from prisma import Json",
      "children": [
        {
          "value": "prisma",
          "children": [
            {
              "value": "prisma",
              "children": []
            }
          ]
        },
        {
          "value": "Json",
          "children": [
            {
              "value": "Json",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from prisma.enums import CreditTransactionType",
      "children": [
        {
          "value": "prisma.enums",
          "children": [
            {
              "value": "prisma",
              "children": []
            },
            {
              "value": "enums",
              "children": []
            }
          ]
        },
        {
          "value": "CreditTransactionType",
          "children": [
            {
              "value": "CreditTransactionType",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from prisma.errors import UniqueViolationError",
      "children": [
        {
          "value": "prisma.errors",
          "children": [
            {
              "value": "prisma",
              "children": []
            },
            {
              "value": "errors",
              "children": []
            }
          ]
        },
        {
          "value": "UniqueViolationError",
          "children": [
            {
              "value": "UniqueViolationError",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from prisma.models import CreditTransaction",
      "children": [
        {
          "value": "prisma.models",
          "children": [
            {
              "value": "prisma",
              "children": []
            },
            {
              "value": "models",
              "children": []
            }
          ]
        },
        {
          "value": "CreditTransaction",
          "children": [
            {
              "value": "CreditTransaction",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.data.block import Block, BlockInput, get_block",
      "children": [
        {
          "value": "backend.data.block",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "data",
              "children": []
            },
            {
              "value": "block",
              "children": []
            }
          ]
        },
        {
          "value": "Block",
          "children": [
            {
              "value": "Block",
              "children": []
            }
          ]
        },
        {
          "value": "BlockInput",
          "children": [
            {
              "value": "BlockInput",
              "children": []
            }
          ]
        },
        {
          "value": "get_block",
          "children": [
            {
              "value": "get_block",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.data.block_cost_config import BLOCK_COSTS",
      "children": [
        {
          "value": "backend.data.block_cost_config",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "data",
              "children": []
            },
            {
              "value": "block_cost_config",
              "children": []
            }
          ]
        },
        {
          "value": "BLOCK_COSTS",
          "children": [
            {
              "value": "BLOCK_COSTS",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.data.cost import BlockCost, BlockCostType",
      "children": [
        {
          "value": "backend.data.cost",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "data",
              "children": []
            },
            {
              "value": "cost",
              "children": []
            }
          ]
        },
        {
          "value": "BlockCost",
          "children": [
            {
              "value": "BlockCost",
              "children": []
            }
          ]
        },
        {
          "value": "BlockCostType",
          "children": [
            {
              "value": "BlockCostType",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from backend.util.settings import Config",
      "children": [
        {
          "value": "backend.util.settings",
          "children": [
            {
              "value": "backend",
              "children": []
            },
            {
              "value": "util",
              "children": []
            },
            {
              "value": "settings",
              "children": []
            }
          ]
        },
        {
          "value": "Config",
          "children": [
            {
              "value": "Config",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "config = Config()",
      "children": [
        {
          "value": "config = Config()",
          "children": [
            {
              "value": "config",
              "children": []
            },
            {
              "value": "Config()",
              "children": [
                {
                  "value": "Config",
                  "children": []
                },
                {
                  "value": "()",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class UserCreditBase(ABC):\n    def __init__(self, num_user_credits_refill: int):\n        self.num_user_credits_refill = num_user_credits_refill\n\n    @abstractmethod\n    async def get_or_refill_credit(self, user_id: str) -> int:\n        \"\"\"\n        Get the current credit for the user and refill if no transaction has been made in the current cycle.\n\n        Returns:\n            int: The current credit for the user.\n        \"\"\"\n        pass\n\n    @abstractmethod\n    async def spend_credits(\n        self,\n        user_id: str,\n        user_credit: int,\n        block_id: str,\n        input_data: BlockInput,\n        data_size: float,\n        run_time: float,\n    ) -> int:\n        \"\"\"\n        Spend the credits for the user based on the block usage.\n\n        Args:\n            user_id (str): The user ID.\n            user_credit (int): The current credit for the user.\n            block_id (str): The block ID.\n            input_data (BlockInput): The input data for the block.\n            data_size (float): The size of the data being processed.\n            run_time (float): The time taken to run the block.\n\n        Returns:\n            int: amount of credit spent\n        \"\"\"\n        pass\n\n    @abstractmethod\n    async def top_up_credits(self, user_id: str, amount: int):\n        \"\"\"\n        Top up the credits for the user.\n\n        Args:\n            user_id (str): The user ID.\n            amount (int): The amount to top up.\n        \"\"\"\n        pass",
      "children": [
        {
          "value": "UserCreditBase",
          "children": []
        },
        {
          "value": "(ABC)",
          "children": [
            {
              "value": "ABC",
              "children": []
            }
          ]
        },
        {
          "value": "def __init__(self, num_user_credits_refill: int):\n        self.num_user_credits_refill = num_user_credits_refill\n\n    @abstractmethod\n    async def get_or_refill_credit(self, user_id: str) -> int:\n        \"\"\"\n        Get the current credit for the user and refill if no transaction has been made in the current cycle.\n\n        Returns:\n            int: The current credit for the user.\n        \"\"\"\n        pass\n\n    @abstractmethod\n    async def spend_credits(\n        self,\n        user_id: str,\n        user_credit: int,\n        block_id: str,\n        input_data: BlockInput,\n        data_size: float,\n        run_time: float,\n    ) -> int:\n        \"\"\"\n        Spend the credits for the user based on the block usage.\n\n        Args:\n            user_id (str): The user ID.\n            user_credit (int): The current credit for the user.\n            block_id (str): The block ID.\n            input_data (BlockInput): The input data for the block.\n            data_size (float): The size of the data being processed.\n            run_time (float): The time taken to run the block.\n\n        Returns:\n            int: amount of credit spent\n        \"\"\"\n        pass\n\n    @abstractmethod\n    async def top_up_credits(self, user_id: str, amount: int):\n        \"\"\"\n        Top up the credits for the user.\n\n        Args:\n            user_id (str): The user ID.\n            amount (int): The amount to top up.\n        \"\"\"\n        pass",
          "children": [
            {
              "value": "def __init__(self, num_user_credits_refill: int):\n        self.num_user_credits_refill = num_user_credits_refill",
              "children": [
                {
                  "value": "__init__",
                  "children": []
                },
                {
                  "value": "(self, num_user_credits_refill: int)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "num_user_credits_refill: int",
                      "children": [
                        {
                          "value": "num_user_credits_refill",
                          "children": []
                        },
                        {
                          "value": "int",
                          "children": [
                            {
                              "value": "int",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "self.num_user_credits_refill = num_user_credits_refill",
                  "children": [
                    {
                      "value": "self.num_user_credits_refill = num_user_credits_refill",
                      "children": [
                        {
                          "value": "self.num_user_credits_refill = num_user_credits_refill",
                          "children": [
                            {
                              "value": "self.num_user_credits_refill",
                              "children": [
                                {
                                  "value": "self",
                                  "children": []
                                },
                                {
                                  "value": "num_user_credits_refill",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "num_user_credits_refill",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "@abstractmethod\n    async def get_or_refill_credit(self, user_id: str) -> int:\n        \"\"\"\n        Get the current credit for the user and refill if no transaction has been made in the current cycle.\n\n        Returns:\n            int: The current credit for the user.\n        \"\"\"\n        pass",
              "children": [
                {
                  "value": "@abstractmethod",
                  "children": [
                    {
                      "value": "abstractmethod",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "async def get_or_refill_credit(self, user_id: str) -> int:\n        \"\"\"\n        Get the current credit for the user and refill if no transaction has been made in the current cycle.\n\n        Returns:\n            int: The current credit for the user.\n        \"\"\"\n        pass",
                  "children": [
                    {
                      "value": "get_or_refill_credit",
                      "children": []
                    },
                    {
                      "value": "(self, user_id: str)",
                      "children": [
                        {
                          "value": "self",
                          "children": []
                        },
                        {
                          "value": "user_id: str",
                          "children": [
                            {
                              "value": "user_id",
                              "children": []
                            },
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "int",
                      "children": [
                        {
                          "value": "int",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "\"\"\"\n        Get the current credit for the user and refill if no transaction has been made in the current cycle.\n\n        Returns:\n            int: The current credit for the user.\n        \"\"\"\n        pass",
                      "children": [
                        {
                          "value": "\"\"\"\n        Get the current credit for the user and refill if no transaction has been made in the current cycle.\n\n        Returns:\n            int: The current credit for the user.\n        \"\"\"",
                          "children": [
                            {
                              "value": "\"\"\"\n        Get the current credit for the user and refill if no transaction has been made in the current cycle.\n\n        Returns:\n            int: The current credit for the user.\n        \"\"\"",
                              "children": [
                                {
                                  "value": "\"\"\"",
                                  "children": []
                                },
                                {
                                  "value": "Get the current credit for the user and refill if no transaction has been made in the current cycle.\n\n        Returns:\n            int: The current credit for the user.",
                                  "children": []
                                },
                                {
                                  "value": "\"\"\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "pass",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "@abstractmethod\n    async def spend_credits(\n        self,\n        user_id: str,\n        user_credit: int,\n        block_id: str,\n        input_data: BlockInput,\n        data_size: float,\n        run_time: float,\n    ) -> int:\n        \"\"\"\n        Spend the credits for the user based on the block usage.\n\n        Args:\n            user_id (str): The user ID.\n            user_credit (int): The current credit for the user.\n            block_id (str): The block ID.\n            input_data (BlockInput): The input data for the block.\n            data_size (float): The size of the data being processed.\n            run_time (float): The time taken to run the block.\n\n        Returns:\n            int: amount of credit spent\n        \"\"\"\n        pass",
              "children": [
                {
                  "value": "@abstractmethod",
                  "children": [
                    {
                      "value": "abstractmethod",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "async def spend_credits(\n        self,\n        user_id: str,\n        user_credit: int,\n        block_id: str,\n        input_data: BlockInput,\n        data_size: float,\n        run_time: float,\n    ) -> int:\n        \"\"\"\n        Spend the credits for the user based on the block usage.\n\n        Args:\n            user_id (str): The user ID.\n            user_credit (int): The current credit for the user.\n            block_id (str): The block ID.\n            input_data (BlockInput): The input data for the block.\n            data_size (float): The size of the data being processed.\n            run_time (float): The time taken to run the block.\n\n        Returns:\n            int: amount of credit spent\n        \"\"\"\n        pass",
                  "children": [
                    {
                      "value": "spend_credits",
                      "children": []
                    },
                    {
                      "value": "(\n        self,\n        user_id: str,\n        user_credit: int,\n        block_id: str,\n        input_data: BlockInput,\n        data_size: float,\n        run_time: float,\n    )",
                      "children": [
                        {
                          "value": "self",
                          "children": []
                        },
                        {
                          "value": "user_id: str",
                          "children": [
                            {
                              "value": "user_id",
                              "children": []
                            },
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "user_credit: int",
                          "children": [
                            {
                              "value": "user_credit",
                              "children": []
                            },
                            {
                              "value": "int",
                              "children": [
                                {
                                  "value": "int",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "block_id: str",
                          "children": [
                            {
                              "value": "block_id",
                              "children": []
                            },
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "input_data: BlockInput",
                          "children": [
                            {
                              "value": "input_data",
                              "children": []
                            },
                            {
                              "value": "BlockInput",
                              "children": [
                                {
                                  "value": "BlockInput",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "data_size: float",
                          "children": [
                            {
                              "value": "data_size",
                              "children": []
                            },
                            {
                              "value": "float",
                              "children": [
                                {
                                  "value": "float",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "run_time: float",
                          "children": [
                            {
                              "value": "run_time",
                              "children": []
                            },
                            {
                              "value": "float",
                              "children": [
                                {
                                  "value": "float",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "int",
                      "children": [
                        {
                          "value": "int",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "\"\"\"\n        Spend the credits for the user based on the block usage.\n\n        Args:\n            user_id (str): The user ID.\n            user_credit (int): The current credit for the user.\n            block_id (str): The block ID.\n            input_data (BlockInput): The input data for the block.\n            data_size (float): The size of the data being processed.\n            run_time (float): The time taken to run the block.\n\n        Returns:\n            int: amount of credit spent\n        \"\"\"\n        pass",
                      "children": [
                        {
                          "value": "\"\"\"\n        Spend the credits for the user based on the block usage.\n\n        Args:\n            user_id (str): The user ID.\n            user_credit (int): The current credit for the user.\n            block_id (str): The block ID.\n            input_data (BlockInput): The input data for the block.\n            data_size (float): The size of the data being processed.\n            run_time (float): The time taken to run the block.\n\n        Returns:\n            int: amount of credit spent\n        \"\"\"",
                          "children": [
                            {
                              "value": "\"\"\"\n        Spend the credits for the user based on the block usage.\n\n        Args:\n            user_id (str): The user ID.\n            user_credit (int): The current credit for the user.\n            block_id (str): The block ID.\n            input_data (BlockInput): The input data for the block.\n            data_size (float): The size of the data being processed.\n            run_time (float): The time taken to run the block.\n\n        Returns:\n            int: amount of credit spent\n        \"\"\"",
                              "children": [
                                {
                                  "value": "\"\"\"",
                                  "children": []
                                },
                                {
                                  "value": "Spend the credits for the user based on the block usage.\n\n        Args:\n            user_id (str): The user ID.\n            user_credit (int): The current credit for the user.\n            block_id (str): The block ID.\n            input_data (BlockInput): The input data for the block.\n            data_size (float): The size of the data being processed.\n            run_time (float): The time taken to run the block.\n\n        Returns:\n            int: amount of credit spent",
                                  "children": []
                                },
                                {
                                  "value": "\"\"\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "pass",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "@abstractmethod\n    async def top_up_credits(self, user_id: str, amount: int):\n        \"\"\"\n        Top up the credits for the user.\n\n        Args:\n            user_id (str): The user ID.\n            amount (int): The amount to top up.\n        \"\"\"\n        pass",
              "children": [
                {
                  "value": "@abstractmethod",
                  "children": [
                    {
                      "value": "abstractmethod",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "async def top_up_credits(self, user_id: str, amount: int):\n        \"\"\"\n        Top up the credits for the user.\n\n        Args:\n            user_id (str): The user ID.\n            amount (int): The amount to top up.\n        \"\"\"\n        pass",
                  "children": [
                    {
                      "value": "top_up_credits",
                      "children": []
                    },
                    {
                      "value": "(self, user_id: str, amount: int)",
                      "children": [
                        {
                          "value": "self",
                          "children": []
                        },
                        {
                          "value": "user_id: str",
                          "children": [
                            {
                              "value": "user_id",
                              "children": []
                            },
                            {
                              "value": "str",
                              "children": [
                                {
                                  "value": "str",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "amount: int",
                          "children": [
                            {
                              "value": "amount",
                              "children": []
                            },
                            {
                              "value": "int",
                              "children": [
                                {
                                  "value": "int",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "\"\"\"\n        Top up the credits for the user.\n\n        Args:\n            user_id (str): The user ID.\n            amount (int): The amount to top up.\n        \"\"\"\n        pass",
                      "children": [
                        {
                          "value": "\"\"\"\n        Top up the credits for the user.\n\n        Args:\n            user_id (str): The user ID.\n            amount (int): The amount to top up.\n        \"\"\"",
                          "children": [
                            {
                              "value": "\"\"\"\n        Top up the credits for the user.\n\n        Args:\n            user_id (str): The user ID.\n            amount (int): The amount to top up.\n        \"\"\"",
                              "children": [
                                {
                                  "value": "\"\"\"",
                                  "children": []
                                },
                                {
                                  "value": "Top up the credits for the user.\n\n        Args:\n            user_id (str): The user ID.\n            amount (int): The amount to top up.",
                                  "children": []
                                },
                                {
                                  "value": "\"\"\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "pass",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class UserCredit(UserCreditBase):\n    async def get_or_refill_credit(self, user_id: str) -> int:\n        cur_time = self.time_now()\n        cur_month = cur_time.replace(day=1, hour=0, minute=0, second=0, microsecond=0)\n        nxt_month = (\n            cur_month.replace(month=cur_month.month + 1)\n            if cur_month.month < 12\n            else cur_month.replace(year=cur_month.year + 1, month=1)\n        )\n\n        user_credit = await CreditTransaction.prisma().group_by(\n            by=[\"userId\"],\n            sum={\"amount\": True},\n            where={\n                \"userId\": user_id,\n                \"createdAt\": {\"gte\": cur_month, \"lt\": nxt_month},\n                \"isActive\": True,\n            },\n        )\n\n        if user_credit:\n            credit_sum = user_credit[0].get(\"_sum\") or {}\n            return credit_sum.get(\"amount\", 0)\n\n        key = f\"MONTHLY-CREDIT-TOP-UP-{cur_month}\"\n\n        try:\n            await CreditTransaction.prisma().create(\n                data={\n                    \"amount\": self.num_user_credits_refill,\n                    \"type\": CreditTransactionType.TOP_UP,\n                    \"userId\": user_id,\n                    \"transactionKey\": key,\n                    \"createdAt\": self.time_now(),\n                }\n            )\n        except UniqueViolationError:\n            pass  # Already refilled this month\n\n        return self.num_user_credits_refill\n\n    @staticmethod\n    def time_now():\n        return datetime.now(timezone.utc)\n\n    def _block_usage_cost(\n        self,\n        block: Block,\n        input_data: BlockInput,\n        data_size: float,\n        run_time: float,\n    ) -> tuple[int, BlockInput]:\n        block_costs = BLOCK_COSTS.get(type(block))\n        if not block_costs:\n            return 0, {}\n\n        for block_cost in block_costs:\n            if not self._is_cost_filter_match(block_cost.cost_filter, input_data):\n                continue\n\n            if block_cost.cost_type == BlockCostType.RUN:\n                return block_cost.cost_amount, block_cost.cost_filter\n\n            if block_cost.cost_type == BlockCostType.SECOND:\n                return (\n                    int(run_time * block_cost.cost_amount),\n                    block_cost.cost_filter,\n                )\n\n            if block_cost.cost_type == BlockCostType.BYTE:\n                return (\n                    int(data_size * block_cost.cost_amount),\n                    block_cost.cost_filter,\n                )\n\n        return 0, {}\n\n    def _is_cost_filter_match(\n        self, cost_filter: BlockInput, input_data: BlockInput\n    ) -> bool:\n        \"\"\"\n        Filter rules:\n          - If costFilter is an object, then check if costFilter is the subset of inputValues\n          - Otherwise, check if costFilter is equal to inputValues.\n          - Undefined, null, and empty string are considered as equal.\n        \"\"\"\n        if not isinstance(cost_filter, dict) or not isinstance(input_data, dict):\n            return cost_filter == input_data\n\n        return all(\n            (not input_data.get(k) and not v)\n            or (input_data.get(k) and self._is_cost_filter_match(v, input_data[k]))\n            for k, v in cost_filter.items()\n        )\n\n    async def spend_credits(\n        self,\n        user_id: str,\n        user_credit: int,\n        block_id: str,\n        input_data: BlockInput,\n        data_size: float,\n        run_time: float,\n        validate_balance: bool = True,\n    ) -> int:\n        block = get_block(block_id)\n        if not block:\n            raise ValueError(f\"Block not found: {block_id}\")\n\n        cost, matching_filter = self._block_usage_cost(\n            block=block, input_data=input_data, data_size=data_size, run_time=run_time\n        )\n        if cost <= 0:\n            return 0\n\n        if validate_balance and user_credit < cost:\n            raise ValueError(f\"Insufficient credit: {user_credit} < {cost}\")\n\n        await CreditTransaction.prisma().create(\n            data={\n                \"userId\": user_id,\n                \"amount\": -cost,\n                \"type\": CreditTransactionType.USAGE,\n                \"blockId\": block.id,\n                \"metadata\": Json(\n                    {\n                        \"block\": block.name,\n                        \"input\": matching_filter,\n                    }\n                ),\n                \"createdAt\": self.time_now(),\n            }\n        )\n        return cost\n\n    async def top_up_credits(self, user_id: str, amount: int):\n        await CreditTransaction.prisma().create(\n            data={\n                \"userId\": user_id,\n                \"amount\": amount,\n                \"type\": CreditTransactionType.TOP_UP,\n                \"createdAt\": self.time_now(),\n            }\n        )",
      "children": [
        {
          "value": "UserCredit",
          "children": []
        },
        {
          "value": "(UserCreditBase)",
          "children": [
            {
              "value": "UserCreditBase",
              "children": []
            }
          ]
        },
        {
          "value": "async def get_or_refill_credit(self, user_id: str) -> int:\n        cur_time = self.time_now()\n        cur_month = cur_time.replace(day=1, hour=0, minute=0, second=0, microsecond=0)\n        nxt_month = (\n            cur_month.replace(month=cur_month.month + 1)\n            if cur_month.month < 12\n            else cur_month.replace(year=cur_month.year + 1, month=1)\n        )\n\n        user_credit = await CreditTransaction.prisma().group_by(\n            by=[\"userId\"],\n            sum={\"amount\": True},\n            where={\n                \"userId\": user_id,\n                \"createdAt\": {\"gte\": cur_month, \"lt\": nxt_month},\n                \"isActive\": True,\n            },\n        )\n\n        if user_credit:\n            credit_sum = user_credit[0].get(\"_sum\") or {}\n            return credit_sum.get(\"amount\", 0)\n\n        key = f\"MONTHLY-CREDIT-TOP-UP-{cur_month}\"\n\n        try:\n            await CreditTransaction.prisma().create(\n                data={\n                    \"amount\": self.num_user_credits_refill,\n                    \"type\": CreditTransactionType.TOP_UP,\n                    \"userId\": user_id,\n                    \"transactionKey\": key,\n                    \"createdAt\": self.time_now(),\n                }\n            )\n        except UniqueViolationError:\n            pass  # Already refilled this month\n\n        return self.num_user_credits_refill\n\n    @staticmethod\n    def time_now():\n        return datetime.now(timezone.utc)\n\n    def _block_usage_cost(\n        self,\n        block: Block,\n        input_data: BlockInput,\n        data_size: float,\n        run_time: float,\n    ) -> tuple[int, BlockInput]:\n        block_costs = BLOCK_COSTS.get(type(block))\n        if not block_costs:\n            return 0, {}\n\n        for block_cost in block_costs:\n            if not self._is_cost_filter_match(block_cost.cost_filter, input_data):\n                continue\n\n            if block_cost.cost_type == BlockCostType.RUN:\n                return block_cost.cost_amount, block_cost.cost_filter\n\n            if block_cost.cost_type == BlockCostType.SECOND:\n                return (\n                    int(run_time * block_cost.cost_amount),\n                    block_cost.cost_filter,\n                )\n\n            if block_cost.cost_type == BlockCostType.BYTE:\n                return (\n                    int(data_size * block_cost.cost_amount),\n                    block_cost.cost_filter,\n                )\n\n        return 0, {}\n\n    def _is_cost_filter_match(\n        self, cost_filter: BlockInput, input_data: BlockInput\n    ) -> bool:\n        \"\"\"\n        Filter rules:\n          - If costFilter is an object, then check if costFilter is the subset of inputValues\n          - Otherwise, check if costFilter is equal to inputValues.\n          - Undefined, null, and empty string are considered as equal.\n        \"\"\"\n        if not isinstance(cost_filter, dict) or not isinstance(input_data, dict):\n            return cost_filter == input_data\n\n        return all(\n            (not input_data.get(k) and not v)\n            or (input_data.get(k) and self._is_cost_filter_match(v, input_data[k]))\n            for k, v in cost_filter.items()\n        )\n\n    async def spend_credits(\n        self,\n        user_id: str,\n        user_credit: int,\n        block_id: str,\n        input_data: BlockInput,\n        data_size: float,\n        run_time: float,\n        validate_balance: bool = True,\n    ) -> int:\n        block = get_block(block_id)\n        if not block:\n            raise ValueError(f\"Block not found: {block_id}\")\n\n        cost, matching_filter = self._block_usage_cost(\n            block=block, input_data=input_data, data_size=data_size, run_time=run_time\n        )\n        if cost <= 0:\n            return 0\n\n        if validate_balance and user_credit < cost:\n            raise ValueError(f\"Insufficient credit: {user_credit} < {cost}\")\n\n        await CreditTransaction.prisma().create(\n            data={\n                \"userId\": user_id,\n                \"amount\": -cost,\n                \"type\": CreditTransactionType.USAGE,\n                \"blockId\": block.id,\n                \"metadata\": Json(\n                    {\n                        \"block\": block.name,\n                        \"input\": matching_filter,\n                    }\n                ),\n                \"createdAt\": self.time_now(),\n            }\n        )\n        return cost\n\n    async def top_up_credits(self, user_id: str, amount: int):\n        await CreditTransaction.prisma().create(\n            data={\n                \"userId\": user_id,\n                \"amount\": amount,\n                \"type\": CreditTransactionType.TOP_UP,\n                \"createdAt\": self.time_now(),\n            }\n        )",
          "children": [
            {
              "value": "async def get_or_refill_credit(self, user_id: str) -> int:\n        cur_time = self.time_now()\n        cur_month = cur_time.replace(day=1, hour=0, minute=0, second=0, microsecond=0)\n        nxt_month = (\n            cur_month.replace(month=cur_month.month + 1)\n            if cur_month.month < 12\n            else cur_month.replace(year=cur_month.year + 1, month=1)\n        )\n\n        user_credit = await CreditTransaction.prisma().group_by(\n            by=[\"userId\"],\n            sum={\"amount\": True},\n            where={\n                \"userId\": user_id,\n                \"createdAt\": {\"gte\": cur_month, \"lt\": nxt_month},\n                \"isActive\": True,\n            },\n        )\n\n        if user_credit:\n            credit_sum = user_credit[0].get(\"_sum\") or {}\n            return credit_sum.get(\"amount\", 0)\n\n        key = f\"MONTHLY-CREDIT-TOP-UP-{cur_month}\"\n\n        try:\n            await CreditTransaction.prisma().create(\n                data={\n                    \"amount\": self.num_user_credits_refill,\n                    \"type\": CreditTransactionType.TOP_UP,\n                    \"userId\": user_id,\n                    \"transactionKey\": key,\n                    \"createdAt\": self.time_now(),\n                }\n            )\n        except UniqueViolationError:\n            pass  # Already refilled this month\n\n        return self.num_user_credits_refill",
              "children": [
                {
                  "value": "get_or_refill_credit",
                  "children": []
                },
                {
                  "value": "(self, user_id: str)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "user_id: str",
                      "children": [
                        {
                          "value": "user_id",
                          "children": []
                        },
                        {
                          "value": "str",
                          "children": [
                            {
                              "value": "str",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "cur_time = self.time_now()\n        cur_month = cur_time.replace(day=1, hour=0, minute=0, second=0, microsecond=0)\n        nxt_month = (\n            cur_month.replace(month=cur_month.month + 1)\n            if cur_month.month < 12\n            else cur_month.replace(year=cur_month.year + 1, month=1)\n        )\n\n        user_credit = await CreditTransaction.prisma().group_by(\n            by=[\"userId\"],\n            sum={\"amount\": True},\n            where={\n                \"userId\": user_id,\n                \"createdAt\": {\"gte\": cur_month, \"lt\": nxt_month},\n                \"isActive\": True,\n            },\n        )\n\n        if user_credit:\n            credit_sum = user_credit[0].get(\"_sum\") or {}\n            return credit_sum.get(\"amount\", 0)\n\n        key = f\"MONTHLY-CREDIT-TOP-UP-{cur_month}\"\n\n        try:\n            await CreditTransaction.prisma().create(\n                data={\n                    \"amount\": self.num_user_credits_refill,\n                    \"type\": CreditTransactionType.TOP_UP,\n                    \"userId\": user_id,\n                    \"transactionKey\": key,\n                    \"createdAt\": self.time_now(),\n                }\n            )\n        except UniqueViolationError:\n            pass  # Already refilled this month\n\n        return self.num_user_credits_refill",
                  "children": [
                    {
                      "value": "cur_time = self.time_now()",
                      "children": [
                        {
                          "value": "cur_time = self.time_now()",
                          "children": [
                            {
                              "value": "cur_time",
                              "children": []
                            },
                            {
                              "value": "self.time_now()",
                              "children": [
                                {
                                  "value": "self.time_now",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "time_now",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "cur_month = cur_time.replace(day=1, hour=0, minute=0, second=0, microsecond=0)",
                      "children": [
                        {
                          "value": "cur_month = cur_time.replace(day=1, hour=0, minute=0, second=0, microsecond=0)",
                          "children": [
                            {
                              "value": "cur_month",
                              "children": []
                            },
                            {
                              "value": "cur_time.replace(day=1, hour=0, minute=0, second=0, microsecond=0)",
                              "children": [
                                {
                                  "value": "cur_time.replace",
                                  "children": [
                                    {
                                      "value": "cur_time",
                                      "children": []
                                    },
                                    {
                                      "value": "replace",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(day=1, hour=0, minute=0, second=0, microsecond=0)",
                                  "children": [
                                    {
                                      "value": "day=1",
                                      "children": [
                                        {
                                          "value": "day",
                                          "children": []
                                        },
                                        {
                                          "value": "1",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "hour=0",
                                      "children": [
                                        {
                                          "value": "hour",
                                          "children": []
                                        },
                                        {
                                          "value": "0",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "minute=0",
                                      "children": [
                                        {
                                          "value": "minute",
                                          "children": []
                                        },
                                        {
                                          "value": "0",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "second=0",
                                      "children": [
                                        {
                                          "value": "second",
                                          "children": []
                                        },
                                        {
                                          "value": "0",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "microsecond=0",
                                      "children": [
                                        {
                                          "value": "microsecond",
                                          "children": []
                                        },
                                        {
                                          "value": "0",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "nxt_month = (\n            cur_month.replace(month=cur_month.month + 1)\n            if cur_month.month < 12\n            else cur_month.replace(year=cur_month.year + 1, month=1)\n        )",
                      "children": [
                        {
                          "value": "nxt_month = (\n            cur_month.replace(month=cur_month.month + 1)\n            if cur_month.month < 12\n            else cur_month.replace(year=cur_month.year + 1, month=1)\n        )",
                          "children": [
                            {
                              "value": "nxt_month",
                              "children": []
                            },
                            {
                              "value": "(\n            cur_month.replace(month=cur_month.month + 1)\n            if cur_month.month < 12\n            else cur_month.replace(year=cur_month.year + 1, month=1)\n        )",
                              "children": [
                                {
                                  "value": "cur_month.replace(month=cur_month.month + 1)\n            if cur_month.month < 12\n            else cur_month.replace(year=cur_month.year + 1, month=1)",
                                  "children": [
                                    {
                                      "value": "cur_month.replace(month=cur_month.month + 1)",
                                      "children": [
                                        {
                                          "value": "cur_month.replace",
                                          "children": [
                                            {
                                              "value": "cur_month",
                                              "children": []
                                            },
                                            {
                                              "value": "replace",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(month=cur_month.month + 1)",
                                          "children": [
                                            {
                                              "value": "month=cur_month.month + 1",
                                              "children": [
                                                {
                                                  "value": "month",
                                                  "children": []
                                                },
                                                {
                                                  "value": "cur_month.month + 1",
                                                  "children": [
                                                    {
                                                      "value": "cur_month.month",
                                                      "children": [
                                                        {
                                                          "value": "cur_month",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "month",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "1",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "cur_month.month < 12",
                                      "children": [
                                        {
                                          "value": "cur_month.month",
                                          "children": [
                                            {
                                              "value": "cur_month",
                                              "children": []
                                            },
                                            {
                                              "value": "month",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "12",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "cur_month.replace(year=cur_month.year + 1, month=1)",
                                      "children": [
                                        {
                                          "value": "cur_month.replace",
                                          "children": [
                                            {
                                              "value": "cur_month",
                                              "children": []
                                            },
                                            {
                                              "value": "replace",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(year=cur_month.year + 1, month=1)",
                                          "children": [
                                            {
                                              "value": "year=cur_month.year + 1",
                                              "children": [
                                                {
                                                  "value": "year",
                                                  "children": []
                                                },
                                                {
                                                  "value": "cur_month.year + 1",
                                                  "children": [
                                                    {
                                                      "value": "cur_month.year",
                                                      "children": [
                                                        {
                                                          "value": "cur_month",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "year",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "1",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "month=1",
                                              "children": [
                                                {
                                                  "value": "month",
                                                  "children": []
                                                },
                                                {
                                                  "value": "1",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "user_credit = await CreditTransaction.prisma().group_by(\n            by=[\"userId\"],\n            sum={\"amount\": True},\n            where={\n                \"userId\": user_id,\n                \"createdAt\": {\"gte\": cur_month, \"lt\": nxt_month},\n                \"isActive\": True,\n            },\n        )",
                      "children": [
                        {
                          "value": "user_credit = await CreditTransaction.prisma().group_by(\n            by=[\"userId\"],\n            sum={\"amount\": True},\n            where={\n                \"userId\": user_id,\n                \"createdAt\": {\"gte\": cur_month, \"lt\": nxt_month},\n                \"isActive\": True,\n            },\n        )",
                          "children": [
                            {
                              "value": "user_credit",
                              "children": []
                            },
                            {
                              "value": "await CreditTransaction.prisma().group_by(\n            by=[\"userId\"],\n            sum={\"amount\": True},\n            where={\n                \"userId\": user_id,\n                \"createdAt\": {\"gte\": cur_month, \"lt\": nxt_month},\n                \"isActive\": True,\n            },\n        )",
                              "children": [
                                {
                                  "value": "CreditTransaction.prisma().group_by(\n            by=[\"userId\"],\n            sum={\"amount\": True},\n            where={\n                \"userId\": user_id,\n                \"createdAt\": {\"gte\": cur_month, \"lt\": nxt_month},\n                \"isActive\": True,\n            },\n        )",
                                  "children": [
                                    {
                                      "value": "CreditTransaction.prisma().group_by",
                                      "children": [
                                        {
                                          "value": "CreditTransaction.prisma()",
                                          "children": [
                                            {
                                              "value": "CreditTransaction.prisma",
                                              "children": [
                                                {
                                                  "value": "CreditTransaction",
                                                  "children": []
                                                },
                                                {
                                                  "value": "prisma",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "()",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "group_by",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(\n            by=[\"userId\"],\n            sum={\"amount\": True},\n            where={\n                \"userId\": user_id,\n                \"createdAt\": {\"gte\": cur_month, \"lt\": nxt_month},\n                \"isActive\": True,\n            },\n        )",
                                      "children": [
                                        {
                                          "value": "by=[\"userId\"]",
                                          "children": [
                                            {
                                              "value": "by",
                                              "children": []
                                            },
                                            {
                                              "value": "[\"userId\"]",
                                              "children": [
                                                {
                                                  "value": "\"userId\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "userId",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "sum={\"amount\": True}",
                                          "children": [
                                            {
                                              "value": "sum",
                                              "children": []
                                            },
                                            {
                                              "value": "{\"amount\": True}",
                                              "children": [
                                                {
                                                  "value": "\"amount\": True",
                                                  "children": [
                                                    {
                                                      "value": "\"amount\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "amount",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "True",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "where={\n                \"userId\": user_id,\n                \"createdAt\": {\"gte\": cur_month, \"lt\": nxt_month},\n                \"isActive\": True,\n            }",
                                          "children": [
                                            {
                                              "value": "where",
                                              "children": []
                                            },
                                            {
                                              "value": "{\n                \"userId\": user_id,\n                \"createdAt\": {\"gte\": cur_month, \"lt\": nxt_month},\n                \"isActive\": True,\n            }",
                                              "children": [
                                                {
                                                  "value": "\"userId\": user_id",
                                                  "children": [
                                                    {
                                                      "value": "\"userId\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "userId",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "user_id",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"createdAt\": {\"gte\": cur_month, \"lt\": nxt_month}",
                                                  "children": [
                                                    {
                                                      "value": "\"createdAt\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "createdAt",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "{\"gte\": cur_month, \"lt\": nxt_month}",
                                                      "children": [
                                                        {
                                                          "value": "\"gte\": cur_month",
                                                          "children": [
                                                            {
                                                              "value": "\"gte\"",
                                                              "children": [
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "gte",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "cur_month",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "\"lt\": nxt_month",
                                                          "children": [
                                                            {
                                                              "value": "\"lt\"",
                                                              "children": [
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "lt",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "\"",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "nxt_month",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "\"isActive\": True",
                                                  "children": [
                                                    {
                                                      "value": "\"isActive\"",
                                                      "children": [
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "isActive",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "True",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if user_credit:\n            credit_sum = user_credit[0].get(\"_sum\") or {}\n            return credit_sum.get(\"amount\", 0)",
                      "children": [
                        {
                          "value": "user_credit",
                          "children": []
                        },
                        {
                          "value": "credit_sum = user_credit[0].get(\"_sum\") or {}\n            return credit_sum.get(\"amount\", 0)",
                          "children": [
                            {
                              "value": "credit_sum = user_credit[0].get(\"_sum\") or {}",
                              "children": [
                                {
                                  "value": "credit_sum = user_credit[0].get(\"_sum\") or {}",
                                  "children": [
                                    {
                                      "value": "credit_sum",
                                      "children": []
                                    },
                                    {
                                      "value": "user_credit[0].get(\"_sum\") or {}",
                                      "children": [
                                        {
                                          "value": "user_credit[0].get(\"_sum\")",
                                          "children": [
                                            {
                                              "value": "user_credit[0].get",
                                              "children": [
                                                {
                                                  "value": "user_credit[0]",
                                                  "children": [
                                                    {
                                                      "value": "user_credit",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "0",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "get",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(\"_sum\")",
                                              "children": [
                                                {
                                                  "value": "\"_sum\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "_sum",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "value": "{}",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "return credit_sum.get(\"amount\", 0)",
                              "children": [
                                {
                                  "value": "credit_sum.get(\"amount\", 0)",
                                  "children": [
                                    {
                                      "value": "credit_sum.get",
                                      "children": [
                                        {
                                          "value": "credit_sum",
                                          "children": []
                                        },
                                        {
                                          "value": "get",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(\"amount\", 0)",
                                      "children": [
                                        {
                                          "value": "\"amount\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "amount",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "0",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "key = f\"MONTHLY-CREDIT-TOP-UP-{cur_month}\"",
                      "children": [
                        {
                          "value": "key = f\"MONTHLY-CREDIT-TOP-UP-{cur_month}\"",
                          "children": [
                            {
                              "value": "key",
                              "children": []
                            },
                            {
                              "value": "f\"MONTHLY-CREDIT-TOP-UP-{cur_month}\"",
                              "children": [
                                {
                                  "value": "f\"",
                                  "children": []
                                },
                                {
                                  "value": "MONTHLY-CREDIT-TOP-UP-",
                                  "children": []
                                },
                                {
                                  "value": "{cur_month}",
                                  "children": [
                                    {
                                      "value": "cur_month",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "try:\n            await CreditTransaction.prisma().create(\n                data={\n                    \"amount\": self.num_user_credits_refill,\n                    \"type\": CreditTransactionType.TOP_UP,\n                    \"userId\": user_id,\n                    \"transactionKey\": key,\n                    \"createdAt\": self.time_now(),\n                }\n            )\n        except UniqueViolationError:\n            pass  # Already refilled this month",
                      "children": [
                        {
                          "value": "await CreditTransaction.prisma().create(\n                data={\n                    \"amount\": self.num_user_credits_refill,\n                    \"type\": CreditTransactionType.TOP_UP,\n                    \"userId\": user_id,\n                    \"transactionKey\": key,\n                    \"createdAt\": self.time_now(),\n                }\n            )",
                          "children": [
                            {
                              "value": "await CreditTransaction.prisma().create(\n                data={\n                    \"amount\": self.num_user_credits_refill,\n                    \"type\": CreditTransactionType.TOP_UP,\n                    \"userId\": user_id,\n                    \"transactionKey\": key,\n                    \"createdAt\": self.time_now(),\n                }\n            )",
                              "children": [
                                {
                                  "value": "await CreditTransaction.prisma().create(\n                data={\n                    \"amount\": self.num_user_credits_refill,\n                    \"type\": CreditTransactionType.TOP_UP,\n                    \"userId\": user_id,\n                    \"transactionKey\": key,\n                    \"createdAt\": self.time_now(),\n                }\n            )",
                                  "children": [
                                    {
                                      "value": "CreditTransaction.prisma().create(\n                data={\n                    \"amount\": self.num_user_credits_refill,\n                    \"type\": CreditTransactionType.TOP_UP,\n                    \"userId\": user_id,\n                    \"transactionKey\": key,\n                    \"createdAt\": self.time_now(),\n                }\n            )",
                                      "children": [
                                        {
                                          "value": "CreditTransaction.prisma().create",
                                          "children": [
                                            {
                                              "value": "CreditTransaction.prisma()",
                                              "children": [
                                                {
                                                  "value": "CreditTransaction.prisma",
                                                  "children": [
                                                    {
                                                      "value": "CreditTransaction",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "prisma",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "()",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "create",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(\n                data={\n                    \"amount\": self.num_user_credits_refill,\n                    \"type\": CreditTransactionType.TOP_UP,\n                    \"userId\": user_id,\n                    \"transactionKey\": key,\n                    \"createdAt\": self.time_now(),\n                }\n            )",
                                          "children": [
                                            {
                                              "value": "data={\n                    \"amount\": self.num_user_credits_refill,\n                    \"type\": CreditTransactionType.TOP_UP,\n                    \"userId\": user_id,\n                    \"transactionKey\": key,\n                    \"createdAt\": self.time_now(),\n                }",
                                              "children": [
                                                {
                                                  "value": "data",
                                                  "children": []
                                                },
                                                {
                                                  "value": "{\n                    \"amount\": self.num_user_credits_refill,\n                    \"type\": CreditTransactionType.TOP_UP,\n                    \"userId\": user_id,\n                    \"transactionKey\": key,\n                    \"createdAt\": self.time_now(),\n                }",
                                                  "children": [
                                                    {
                                                      "value": "\"amount\": self.num_user_credits_refill",
                                                      "children": [
                                                        {
                                                          "value": "\"amount\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "amount",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "self.num_user_credits_refill",
                                                          "children": [
                                                            {
                                                              "value": "self",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "num_user_credits_refill",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"type\": CreditTransactionType.TOP_UP",
                                                      "children": [
                                                        {
                                                          "value": "\"type\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "type",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "CreditTransactionType.TOP_UP",
                                                          "children": [
                                                            {
                                                              "value": "CreditTransactionType",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "TOP_UP",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"userId\": user_id",
                                                      "children": [
                                                        {
                                                          "value": "\"userId\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "userId",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "user_id",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"transactionKey\": key",
                                                      "children": [
                                                        {
                                                          "value": "\"transactionKey\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "transactionKey",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "key",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "\"createdAt\": self.time_now()",
                                                      "children": [
                                                        {
                                                          "value": "\"createdAt\"",
                                                          "children": [
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "createdAt",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "\"",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "value": "self.time_now()",
                                                          "children": [
                                                            {
                                                              "value": "self.time_now",
                                                              "children": [
                                                                {
                                                                  "value": "self",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "value": "time_now",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "()",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "except UniqueViolationError:\n            pass  # Already refilled this month",
                          "children": [
                            {
                              "value": "UniqueViolationError",
                              "children": []
                            },
                            {
                              "value": "pass  # Already refilled this month",
                              "children": [
                                {
                                  "value": "pass",
                                  "children": []
                                },
                                {
                                  "value": "# Already refilled this month",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return self.num_user_credits_refill",
                      "children": [
                        {
                          "value": "self.num_user_credits_refill",
                          "children": [
                            {
                              "value": "self",
                              "children": []
                            },
                            {
                              "value": "num_user_credits_refill",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "@staticmethod\n    def time_now():\n        return datetime.now(timezone.utc)",
              "children": [
                {
                  "value": "@staticmethod",
                  "children": [
                    {
                      "value": "staticmethod",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "def time_now():\n        return datetime.now(timezone.utc)",
                  "children": [
                    {
                      "value": "time_now",
                      "children": []
                    },
                    {
                      "value": "()",
                      "children": []
                    },
                    {
                      "value": "return datetime.now(timezone.utc)",
                      "children": [
                        {
                          "value": "return datetime.now(timezone.utc)",
                          "children": [
                            {
                              "value": "datetime.now(timezone.utc)",
                              "children": [
                                {
                                  "value": "datetime.now",
                                  "children": [
                                    {
                                      "value": "datetime",
                                      "children": []
                                    },
                                    {
                                      "value": "now",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(timezone.utc)",
                                  "children": [
                                    {
                                      "value": "timezone.utc",
                                      "children": [
                                        {
                                          "value": "timezone",
                                          "children": []
                                        },
                                        {
                                          "value": "utc",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def _block_usage_cost(\n        self,\n        block: Block,\n        input_data: BlockInput,\n        data_size: float,\n        run_time: float,\n    ) -> tuple[int, BlockInput]:\n        block_costs = BLOCK_COSTS.get(type(block))\n        if not block_costs:\n            return 0, {}\n\n        for block_cost in block_costs:\n            if not self._is_cost_filter_match(block_cost.cost_filter, input_data):\n                continue\n\n            if block_cost.cost_type == BlockCostType.RUN:\n                return block_cost.cost_amount, block_cost.cost_filter\n\n            if block_cost.cost_type == BlockCostType.SECOND:\n                return (\n                    int(run_time * block_cost.cost_amount),\n                    block_cost.cost_filter,\n                )\n\n            if block_cost.cost_type == BlockCostType.BYTE:\n                return (\n                    int(data_size * block_cost.cost_amount),\n                    block_cost.cost_filter,\n                )\n\n        return 0, {}",
              "children": [
                {
                  "value": "_block_usage_cost",
                  "children": []
                },
                {
                  "value": "(\n        self,\n        block: Block,\n        input_data: BlockInput,\n        data_size: float,\n        run_time: float,\n    )",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "block: Block",
                      "children": [
                        {
                          "value": "block",
                          "children": []
                        },
                        {
                          "value": "Block",
                          "children": [
                            {
                              "value": "Block",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "input_data: BlockInput",
                      "children": [
                        {
                          "value": "input_data",
                          "children": []
                        },
                        {
                          "value": "BlockInput",
                          "children": [
                            {
                              "value": "BlockInput",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "data_size: float",
                      "children": [
                        {
                          "value": "data_size",
                          "children": []
                        },
                        {
                          "value": "float",
                          "children": [
                            {
                              "value": "float",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "run_time: float",
                      "children": [
                        {
                          "value": "run_time",
                          "children": []
                        },
                        {
                          "value": "float",
                          "children": [
                            {
                              "value": "float",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "tuple[int, BlockInput]",
                  "children": [
                    {
                      "value": "tuple[int, BlockInput]",
                      "children": [
                        {
                          "value": "tuple",
                          "children": []
                        },
                        {
                          "value": "[int, BlockInput]",
                          "children": [
                            {
                              "value": "int",
                              "children": [
                                {
                                  "value": "int",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "BlockInput",
                              "children": [
                                {
                                  "value": "BlockInput",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "block_costs = BLOCK_COSTS.get(type(block))\n        if not block_costs:\n            return 0, {}\n\n        for block_cost in block_costs:\n            if not self._is_cost_filter_match(block_cost.cost_filter, input_data):\n                continue\n\n            if block_cost.cost_type == BlockCostType.RUN:\n                return block_cost.cost_amount, block_cost.cost_filter\n\n            if block_cost.cost_type == BlockCostType.SECOND:\n                return (\n                    int(run_time * block_cost.cost_amount),\n                    block_cost.cost_filter,\n                )\n\n            if block_cost.cost_type == BlockCostType.BYTE:\n                return (\n                    int(data_size * block_cost.cost_amount),\n                    block_cost.cost_filter,\n                )\n\n        return 0, {}",
                  "children": [
                    {
                      "value": "block_costs = BLOCK_COSTS.get(type(block))",
                      "children": [
                        {
                          "value": "block_costs = BLOCK_COSTS.get(type(block))",
                          "children": [
                            {
                              "value": "block_costs",
                              "children": []
                            },
                            {
                              "value": "BLOCK_COSTS.get(type(block))",
                              "children": [
                                {
                                  "value": "BLOCK_COSTS.get",
                                  "children": [
                                    {
                                      "value": "BLOCK_COSTS",
                                      "children": []
                                    },
                                    {
                                      "value": "get",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(type(block))",
                                  "children": [
                                    {
                                      "value": "type(block)",
                                      "children": [
                                        {
                                          "value": "type",
                                          "children": []
                                        },
                                        {
                                          "value": "(block)",
                                          "children": [
                                            {
                                              "value": "block",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if not block_costs:\n            return 0, {}",
                      "children": [
                        {
                          "value": "not block_costs",
                          "children": [
                            {
                              "value": "block_costs",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "return 0, {}",
                          "children": [
                            {
                              "value": "return 0, {}",
                              "children": [
                                {
                                  "value": "0, {}",
                                  "children": [
                                    {
                                      "value": "0",
                                      "children": []
                                    },
                                    {
                                      "value": "{}",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "for block_cost in block_costs:\n            if not self._is_cost_filter_match(block_cost.cost_filter, input_data):\n                continue\n\n            if block_cost.cost_type == BlockCostType.RUN:\n                return block_cost.cost_amount, block_cost.cost_filter\n\n            if block_cost.cost_type == BlockCostType.SECOND:\n                return (\n                    int(run_time * block_cost.cost_amount),\n                    block_cost.cost_filter,\n                )\n\n            if block_cost.cost_type == BlockCostType.BYTE:\n                return (\n                    int(data_size * block_cost.cost_amount),\n                    block_cost.cost_filter,\n                )",
                      "children": [
                        {
                          "value": "block_cost",
                          "children": []
                        },
                        {
                          "value": "block_costs",
                          "children": []
                        },
                        {
                          "value": "if not self._is_cost_filter_match(block_cost.cost_filter, input_data):\n                continue\n\n            if block_cost.cost_type == BlockCostType.RUN:\n                return block_cost.cost_amount, block_cost.cost_filter\n\n            if block_cost.cost_type == BlockCostType.SECOND:\n                return (\n                    int(run_time * block_cost.cost_amount),\n                    block_cost.cost_filter,\n                )\n\n            if block_cost.cost_type == BlockCostType.BYTE:\n                return (\n                    int(data_size * block_cost.cost_amount),\n                    block_cost.cost_filter,\n                )",
                          "children": [
                            {
                              "value": "if not self._is_cost_filter_match(block_cost.cost_filter, input_data):\n                continue",
                              "children": [
                                {
                                  "value": "not self._is_cost_filter_match(block_cost.cost_filter, input_data)",
                                  "children": [
                                    {
                                      "value": "self._is_cost_filter_match(block_cost.cost_filter, input_data)",
                                      "children": [
                                        {
                                          "value": "self._is_cost_filter_match",
                                          "children": [
                                            {
                                              "value": "self",
                                              "children": []
                                            },
                                            {
                                              "value": "_is_cost_filter_match",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "(block_cost.cost_filter, input_data)",
                                          "children": [
                                            {
                                              "value": "block_cost.cost_filter",
                                              "children": [
                                                {
                                                  "value": "block_cost",
                                                  "children": []
                                                },
                                                {
                                                  "value": "cost_filter",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "input_data",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "continue",
                                  "children": [
                                    {
                                      "value": "continue",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "if block_cost.cost_type == BlockCostType.RUN:\n                return block_cost.cost_amount, block_cost.cost_filter",
                              "children": [
                                {
                                  "value": "block_cost.cost_type == BlockCostType.RUN",
                                  "children": [
                                    {
                                      "value": "block_cost.cost_type",
                                      "children": [
                                        {
                                          "value": "block_cost",
                                          "children": []
                                        },
                                        {
                                          "value": "cost_type",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "BlockCostType.RUN",
                                      "children": [
                                        {
                                          "value": "BlockCostType",
                                          "children": []
                                        },
                                        {
                                          "value": "RUN",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "return block_cost.cost_amount, block_cost.cost_filter",
                                  "children": [
                                    {
                                      "value": "return block_cost.cost_amount, block_cost.cost_filter",
                                      "children": [
                                        {
                                          "value": "block_cost.cost_amount, block_cost.cost_filter",
                                          "children": [
                                            {
                                              "value": "block_cost.cost_amount",
                                              "children": [
                                                {
                                                  "value": "block_cost",
                                                  "children": []
                                                },
                                                {
                                                  "value": "cost_amount",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "block_cost.cost_filter",
                                              "children": [
                                                {
                                                  "value": "block_cost",
                                                  "children": []
                                                },
                                                {
                                                  "value": "cost_filter",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "if block_cost.cost_type == BlockCostType.SECOND:\n                return (\n                    int(run_time * block_cost.cost_amount),\n                    block_cost.cost_filter,\n                )",
                              "children": [
                                {
                                  "value": "block_cost.cost_type == BlockCostType.SECOND",
                                  "children": [
                                    {
                                      "value": "block_cost.cost_type",
                                      "children": [
                                        {
                                          "value": "block_cost",
                                          "children": []
                                        },
                                        {
                                          "value": "cost_type",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "BlockCostType.SECOND",
                                      "children": [
                                        {
                                          "value": "BlockCostType",
                                          "children": []
                                        },
                                        {
                                          "value": "SECOND",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "return (\n                    int(run_time * block_cost.cost_amount),\n                    block_cost.cost_filter,\n                )",
                                  "children": [
                                    {
                                      "value": "return (\n                    int(run_time * block_cost.cost_amount),\n                    block_cost.cost_filter,\n                )",
                                      "children": [
                                        {
                                          "value": "(\n                    int(run_time * block_cost.cost_amount),\n                    block_cost.cost_filter,\n                )",
                                          "children": [
                                            {
                                              "value": "int(run_time * block_cost.cost_amount)",
                                              "children": [
                                                {
                                                  "value": "int",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(run_time * block_cost.cost_amount)",
                                                  "children": [
                                                    {
                                                      "value": "run_time * block_cost.cost_amount",
                                                      "children": [
                                                        {
                                                          "value": "run_time",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "block_cost.cost_amount",
                                                          "children": [
                                                            {
                                                              "value": "block_cost",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "cost_amount",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "block_cost.cost_filter",
                                              "children": [
                                                {
                                                  "value": "block_cost",
                                                  "children": []
                                                },
                                                {
                                                  "value": "cost_filter",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "if block_cost.cost_type == BlockCostType.BYTE:\n                return (\n                    int(data_size * block_cost.cost_amount),\n                    block_cost.cost_filter,\n                )",
                              "children": [
                                {
                                  "value": "block_cost.cost_type == BlockCostType.BYTE",
                                  "children": [
                                    {
                                      "value": "block_cost.cost_type",
                                      "children": [
                                        {
                                          "value": "block_cost",
                                          "children": []
                                        },
                                        {
                                          "value": "cost_type",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "BlockCostType.BYTE",
                                      "children": [
                                        {
                                          "value": "BlockCostType",
                                          "children": []
                                        },
                                        {
                                          "value": "BYTE",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "return (\n                    int(data_size * block_cost.cost_amount),\n                    block_cost.cost_filter,\n                )",
                                  "children": [
                                    {
                                      "value": "return (\n                    int(data_size * block_cost.cost_amount),\n                    block_cost.cost_filter,\n                )",
                                      "children": [
                                        {
                                          "value": "(\n                    int(data_size * block_cost.cost_amount),\n                    block_cost.cost_filter,\n                )",
                                          "children": [
                                            {
                                              "value": "int(data_size * block_cost.cost_amount)",
                                              "children": [
                                                {
                                                  "value": "int",
                                                  "children": []
                                                },
                                                {
                                                  "value": "(data_size * block_cost.cost_amount)",
                                                  "children": [
                                                    {
                                                      "value": "data_size * block_cost.cost_amount",
                                                      "children": [
                                                        {
                                                          "value": "data_size",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "block_cost.cost_amount",
                                                          "children": [
                                                            {
                                                              "value": "block_cost",
                                                              "children": []
                                                            },
                                                            {
                                                              "value": "cost_amount",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "block_cost.cost_filter",
                                              "children": [
                                                {
                                                  "value": "block_cost",
                                                  "children": []
                                                },
                                                {
                                                  "value": "cost_filter",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return 0, {}",
                      "children": [
                        {
                          "value": "0, {}",
                          "children": [
                            {
                              "value": "0",
                              "children": []
                            },
                            {
                              "value": "{}",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "def _is_cost_filter_match(\n        self, cost_filter: BlockInput, input_data: BlockInput\n    ) -> bool:\n        \"\"\"\n        Filter rules:\n          - If costFilter is an object, then check if costFilter is the subset of inputValues\n          - Otherwise, check if costFilter is equal to inputValues.\n          - Undefined, null, and empty string are considered as equal.\n        \"\"\"\n        if not isinstance(cost_filter, dict) or not isinstance(input_data, dict):\n            return cost_filter == input_data\n\n        return all(\n            (not input_data.get(k) and not v)\n            or (input_data.get(k) and self._is_cost_filter_match(v, input_data[k]))\n            for k, v in cost_filter.items()\n        )",
              "children": [
                {
                  "value": "_is_cost_filter_match",
                  "children": []
                },
                {
                  "value": "(\n        self, cost_filter: BlockInput, input_data: BlockInput\n    )",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "cost_filter: BlockInput",
                      "children": [
                        {
                          "value": "cost_filter",
                          "children": []
                        },
                        {
                          "value": "BlockInput",
                          "children": [
                            {
                              "value": "BlockInput",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "input_data: BlockInput",
                      "children": [
                        {
                          "value": "input_data",
                          "children": []
                        },
                        {
                          "value": "BlockInput",
                          "children": [
                            {
                              "value": "BlockInput",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "bool",
                  "children": [
                    {
                      "value": "bool",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "\"\"\"\n        Filter rules:\n          - If costFilter is an object, then check if costFilter is the subset of inputValues\n          - Otherwise, check if costFilter is equal to inputValues.\n          - Undefined, null, and empty string are considered as equal.\n        \"\"\"\n        if not isinstance(cost_filter, dict) or not isinstance(input_data, dict):\n            return cost_filter == input_data\n\n        return all(\n            (not input_data.get(k) and not v)\n            or (input_data.get(k) and self._is_cost_filter_match(v, input_data[k]))\n            for k, v in cost_filter.items()\n        )",
                  "children": [
                    {
                      "value": "\"\"\"\n        Filter rules:\n          - If costFilter is an object, then check if costFilter is the subset of inputValues\n          - Otherwise, check if costFilter is equal to inputValues.\n          - Undefined, null, and empty string are considered as equal.\n        \"\"\"",
                      "children": [
                        {
                          "value": "\"\"\"\n        Filter rules:\n          - If costFilter is an object, then check if costFilter is the subset of inputValues\n          - Otherwise, check if costFilter is equal to inputValues.\n          - Undefined, null, and empty string are considered as equal.\n        \"\"\"",
                          "children": [
                            {
                              "value": "\"\"\"",
                              "children": []
                            },
                            {
                              "value": "Filter rules:\n          - If costFilter is an object, then check if costFilter is the subset of inputValues\n          - Otherwise, check if costFilter is equal to inputValues.\n          - Undefined, null, and empty string are considered as equal.",
                              "children": []
                            },
                            {
                              "value": "\"\"\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if not isinstance(cost_filter, dict) or not isinstance(input_data, dict):\n            return cost_filter == input_data",
                      "children": [
                        {
                          "value": "not isinstance(cost_filter, dict) or not isinstance(input_data, dict)",
                          "children": [
                            {
                              "value": "not isinstance(cost_filter, dict)",
                              "children": [
                                {
                                  "value": "isinstance(cost_filter, dict)",
                                  "children": [
                                    {
                                      "value": "isinstance",
                                      "children": []
                                    },
                                    {
                                      "value": "(cost_filter, dict)",
                                      "children": [
                                        {
                                          "value": "cost_filter",
                                          "children": []
                                        },
                                        {
                                          "value": "dict",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "not isinstance(input_data, dict)",
                              "children": [
                                {
                                  "value": "isinstance(input_data, dict)",
                                  "children": [
                                    {
                                      "value": "isinstance",
                                      "children": []
                                    },
                                    {
                                      "value": "(input_data, dict)",
                                      "children": [
                                        {
                                          "value": "input_data",
                                          "children": []
                                        },
                                        {
                                          "value": "dict",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "return cost_filter == input_data",
                          "children": [
                            {
                              "value": "return cost_filter == input_data",
                              "children": [
                                {
                                  "value": "cost_filter == input_data",
                                  "children": [
                                    {
                                      "value": "cost_filter",
                                      "children": []
                                    },
                                    {
                                      "value": "input_data",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return all(\n            (not input_data.get(k) and not v)\n            or (input_data.get(k) and self._is_cost_filter_match(v, input_data[k]))\n            for k, v in cost_filter.items()\n        )",
                      "children": [
                        {
                          "value": "all(\n            (not input_data.get(k) and not v)\n            or (input_data.get(k) and self._is_cost_filter_match(v, input_data[k]))\n            for k, v in cost_filter.items()\n        )",
                          "children": [
                            {
                              "value": "all",
                              "children": []
                            },
                            {
                              "value": "(\n            (not input_data.get(k) and not v)\n            or (input_data.get(k) and self._is_cost_filter_match(v, input_data[k]))\n            for k, v in cost_filter.items()\n        )",
                              "children": [
                                {
                                  "value": "(not input_data.get(k) and not v)\n            or (input_data.get(k) and self._is_cost_filter_match(v, input_data[k]))",
                                  "children": [
                                    {
                                      "value": "(not input_data.get(k) and not v)",
                                      "children": [
                                        {
                                          "value": "not input_data.get(k) and not v",
                                          "children": [
                                            {
                                              "value": "not input_data.get(k)",
                                              "children": [
                                                {
                                                  "value": "input_data.get(k)",
                                                  "children": [
                                                    {
                                                      "value": "input_data.get",
                                                      "children": [
                                                        {
                                                          "value": "input_data",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "get",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "(k)",
                                                      "children": [
                                                        {
                                                          "value": "k",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "not v",
                                              "children": [
                                                {
                                                  "value": "v",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(input_data.get(k) and self._is_cost_filter_match(v, input_data[k]))",
                                      "children": [
                                        {
                                          "value": "input_data.get(k) and self._is_cost_filter_match(v, input_data[k])",
                                          "children": [
                                            {
                                              "value": "input_data.get(k)",
                                              "children": [
                                                {
                                                  "value": "input_data.get",
                                                  "children": [
                                                    {
                                                      "value": "input_data",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "get",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(k)",
                                                  "children": [
                                                    {
                                                      "value": "k",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "self._is_cost_filter_match(v, input_data[k])",
                                              "children": [
                                                {
                                                  "value": "self._is_cost_filter_match",
                                                  "children": [
                                                    {
                                                      "value": "self",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "_is_cost_filter_match",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "(v, input_data[k])",
                                                  "children": [
                                                    {
                                                      "value": "v",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "input_data[k]",
                                                      "children": [
                                                        {
                                                          "value": "input_data",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "k",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "for k, v in cost_filter.items()",
                                  "children": [
                                    {
                                      "value": "k, v",
                                      "children": [
                                        {
                                          "value": "k",
                                          "children": []
                                        },
                                        {
                                          "value": "v",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "cost_filter.items()",
                                      "children": [
                                        {
                                          "value": "cost_filter.items",
                                          "children": [
                                            {
                                              "value": "cost_filter",
                                              "children": []
                                            },
                                            {
                                              "value": "items",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "()",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "async def spend_credits(\n        self,\n        user_id: str,\n        user_credit: int,\n        block_id: str,\n        input_data: BlockInput,\n        data_size: float,\n        run_time: float,\n        validate_balance: bool = True,\n    ) -> int:\n        block = get_block(block_id)\n        if not block:\n            raise ValueError(f\"Block not found: {block_id}\")\n\n        cost, matching_filter = self._block_usage_cost(\n            block=block, input_data=input_data, data_size=data_size, run_time=run_time\n        )\n        if cost <= 0:\n            return 0\n\n        if validate_balance and user_credit < cost:\n            raise ValueError(f\"Insufficient credit: {user_credit} < {cost}\")\n\n        await CreditTransaction.prisma().create(\n            data={\n                \"userId\": user_id,\n                \"amount\": -cost,\n                \"type\": CreditTransactionType.USAGE,\n                \"blockId\": block.id,\n                \"metadata\": Json(\n                    {\n                        \"block\": block.name,\n                        \"input\": matching_filter,\n                    }\n                ),\n                \"createdAt\": self.time_now(),\n            }\n        )\n        return cost",
              "children": [
                {
                  "value": "spend_credits",
                  "children": []
                },
                {
                  "value": "(\n        self,\n        user_id: str,\n        user_credit: int,\n        block_id: str,\n        input_data: BlockInput,\n        data_size: float,\n        run_time: float,\n        validate_balance: bool = True,\n    )",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "user_id: str",
                      "children": [
                        {
                          "value": "user_id",
                          "children": []
                        },
                        {
                          "value": "str",
                          "children": [
                            {
                              "value": "str",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "user_credit: int",
                      "children": [
                        {
                          "value": "user_credit",
                          "children": []
                        },
                        {
                          "value": "int",
                          "children": [
                            {
                              "value": "int",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "block_id: str",
                      "children": [
                        {
                          "value": "block_id",
                          "children": []
                        },
                        {
                          "value": "str",
                          "children": [
                            {
                              "value": "str",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "input_data: BlockInput",
                      "children": [
                        {
                          "value": "input_data",
                          "children": []
                        },
                        {
                          "value": "BlockInput",
                          "children": [
                            {
                              "value": "BlockInput",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "data_size: float",
                      "children": [
                        {
                          "value": "data_size",
                          "children": []
                        },
                        {
                          "value": "float",
                          "children": [
                            {
                              "value": "float",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "run_time: float",
                      "children": [
                        {
                          "value": "run_time",
                          "children": []
                        },
                        {
                          "value": "float",
                          "children": [
                            {
                              "value": "float",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "validate_balance: bool = True",
                      "children": [
                        {
                          "value": "validate_balance",
                          "children": []
                        },
                        {
                          "value": "bool",
                          "children": [
                            {
                              "value": "bool",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "True",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "block = get_block(block_id)\n        if not block:\n            raise ValueError(f\"Block not found: {block_id}\")\n\n        cost, matching_filter = self._block_usage_cost(\n            block=block, input_data=input_data, data_size=data_size, run_time=run_time\n        )\n        if cost <= 0:\n            return 0\n\n        if validate_balance and user_credit < cost:\n            raise ValueError(f\"Insufficient credit: {user_credit} < {cost}\")\n\n        await CreditTransaction.prisma().create(\n            data={\n                \"userId\": user_id,\n                \"amount\": -cost,\n                \"type\": CreditTransactionType.USAGE,\n                \"blockId\": block.id,\n                \"metadata\": Json(\n                    {\n                        \"block\": block.name,\n                        \"input\": matching_filter,\n                    }\n                ),\n                \"createdAt\": self.time_now(),\n            }\n        )\n        return cost",
                  "children": [
                    {
                      "value": "block = get_block(block_id)",
                      "children": [
                        {
                          "value": "block = get_block(block_id)",
                          "children": [
                            {
                              "value": "block",
                              "children": []
                            },
                            {
                              "value": "get_block(block_id)",
                              "children": [
                                {
                                  "value": "get_block",
                                  "children": []
                                },
                                {
                                  "value": "(block_id)",
                                  "children": [
                                    {
                                      "value": "block_id",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if not block:\n            raise ValueError(f\"Block not found: {block_id}\")",
                      "children": [
                        {
                          "value": "not block",
                          "children": [
                            {
                              "value": "block",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "raise ValueError(f\"Block not found: {block_id}\")",
                          "children": [
                            {
                              "value": "raise ValueError(f\"Block not found: {block_id}\")",
                              "children": [
                                {
                                  "value": "ValueError(f\"Block not found: {block_id}\")",
                                  "children": [
                                    {
                                      "value": "ValueError",
                                      "children": []
                                    },
                                    {
                                      "value": "(f\"Block not found: {block_id}\")",
                                      "children": [
                                        {
                                          "value": "f\"Block not found: {block_id}\"",
                                          "children": [
                                            {
                                              "value": "f\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Block not found:",
                                              "children": []
                                            },
                                            {
                                              "value": "{block_id}",
                                              "children": [
                                                {
                                                  "value": "block_id",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "cost, matching_filter = self._block_usage_cost(\n            block=block, input_data=input_data, data_size=data_size, run_time=run_time\n        )",
                      "children": [
                        {
                          "value": "cost, matching_filter = self._block_usage_cost(\n            block=block, input_data=input_data, data_size=data_size, run_time=run_time\n        )",
                          "children": [
                            {
                              "value": "cost, matching_filter",
                              "children": [
                                {
                                  "value": "cost",
                                  "children": []
                                },
                                {
                                  "value": "matching_filter",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "self._block_usage_cost(\n            block=block, input_data=input_data, data_size=data_size, run_time=run_time\n        )",
                              "children": [
                                {
                                  "value": "self._block_usage_cost",
                                  "children": [
                                    {
                                      "value": "self",
                                      "children": []
                                    },
                                    {
                                      "value": "_block_usage_cost",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(\n            block=block, input_data=input_data, data_size=data_size, run_time=run_time\n        )",
                                  "children": [
                                    {
                                      "value": "block=block",
                                      "children": [
                                        {
                                          "value": "block",
                                          "children": []
                                        },
                                        {
                                          "value": "block",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "input_data=input_data",
                                      "children": [
                                        {
                                          "value": "input_data",
                                          "children": []
                                        },
                                        {
                                          "value": "input_data",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "data_size=data_size",
                                      "children": [
                                        {
                                          "value": "data_size",
                                          "children": []
                                        },
                                        {
                                          "value": "data_size",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "run_time=run_time",
                                      "children": [
                                        {
                                          "value": "run_time",
                                          "children": []
                                        },
                                        {
                                          "value": "run_time",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if cost <= 0:\n            return 0",
                      "children": [
                        {
                          "value": "cost <= 0",
                          "children": [
                            {
                              "value": "cost",
                              "children": []
                            },
                            {
                              "value": "0",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "return 0",
                          "children": [
                            {
                              "value": "return 0",
                              "children": [
                                {
                                  "value": "0",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "if validate_balance and user_credit < cost:\n            raise ValueError(f\"Insufficient credit: {user_credit} < {cost}\")",
                      "children": [
                        {
                          "value": "validate_balance and user_credit < cost",
                          "children": [
                            {
                              "value": "validate_balance",
                              "children": []
                            },
                            {
                              "value": "user_credit < cost",
                              "children": [
                                {
                                  "value": "user_credit",
                                  "children": []
                                },
                                {
                                  "value": "cost",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "raise ValueError(f\"Insufficient credit: {user_credit} < {cost}\")",
                          "children": [
                            {
                              "value": "raise ValueError(f\"Insufficient credit: {user_credit} < {cost}\")",
                              "children": [
                                {
                                  "value": "ValueError(f\"Insufficient credit: {user_credit} < {cost}\")",
                                  "children": [
                                    {
                                      "value": "ValueError",
                                      "children": []
                                    },
                                    {
                                      "value": "(f\"Insufficient credit: {user_credit} < {cost}\")",
                                      "children": [
                                        {
                                          "value": "f\"Insufficient credit: {user_credit} < {cost}\"",
                                          "children": [
                                            {
                                              "value": "f\"",
                                              "children": []
                                            },
                                            {
                                              "value": "Insufficient credit:",
                                              "children": []
                                            },
                                            {
                                              "value": "{user_credit}",
                                              "children": [
                                                {
                                                  "value": "user_credit",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "<",
                                              "children": []
                                            },
                                            {
                                              "value": "{cost}",
                                              "children": [
                                                {
                                                  "value": "cost",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "await CreditTransaction.prisma().create(\n            data={\n                \"userId\": user_id,\n                \"amount\": -cost,\n                \"type\": CreditTransactionType.USAGE,\n                \"blockId\": block.id,\n                \"metadata\": Json(\n                    {\n                        \"block\": block.name,\n                        \"input\": matching_filter,\n                    }\n                ),\n                \"createdAt\": self.time_now(),\n            }\n        )",
                      "children": [
                        {
                          "value": "await CreditTransaction.prisma().create(\n            data={\n                \"userId\": user_id,\n                \"amount\": -cost,\n                \"type\": CreditTransactionType.USAGE,\n                \"blockId\": block.id,\n                \"metadata\": Json(\n                    {\n                        \"block\": block.name,\n                        \"input\": matching_filter,\n                    }\n                ),\n                \"createdAt\": self.time_now(),\n            }\n        )",
                          "children": [
                            {
                              "value": "CreditTransaction.prisma().create(\n            data={\n                \"userId\": user_id,\n                \"amount\": -cost,\n                \"type\": CreditTransactionType.USAGE,\n                \"blockId\": block.id,\n                \"metadata\": Json(\n                    {\n                        \"block\": block.name,\n                        \"input\": matching_filter,\n                    }\n                ),\n                \"createdAt\": self.time_now(),\n            }\n        )",
                              "children": [
                                {
                                  "value": "CreditTransaction.prisma().create",
                                  "children": [
                                    {
                                      "value": "CreditTransaction.prisma()",
                                      "children": [
                                        {
                                          "value": "CreditTransaction.prisma",
                                          "children": [
                                            {
                                              "value": "CreditTransaction",
                                              "children": []
                                            },
                                            {
                                              "value": "prisma",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "()",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "create",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(\n            data={\n                \"userId\": user_id,\n                \"amount\": -cost,\n                \"type\": CreditTransactionType.USAGE,\n                \"blockId\": block.id,\n                \"metadata\": Json(\n                    {\n                        \"block\": block.name,\n                        \"input\": matching_filter,\n                    }\n                ),\n                \"createdAt\": self.time_now(),\n            }\n        )",
                                  "children": [
                                    {
                                      "value": "data={\n                \"userId\": user_id,\n                \"amount\": -cost,\n                \"type\": CreditTransactionType.USAGE,\n                \"blockId\": block.id,\n                \"metadata\": Json(\n                    {\n                        \"block\": block.name,\n                        \"input\": matching_filter,\n                    }\n                ),\n                \"createdAt\": self.time_now(),\n            }",
                                      "children": [
                                        {
                                          "value": "data",
                                          "children": []
                                        },
                                        {
                                          "value": "{\n                \"userId\": user_id,\n                \"amount\": -cost,\n                \"type\": CreditTransactionType.USAGE,\n                \"blockId\": block.id,\n                \"metadata\": Json(\n                    {\n                        \"block\": block.name,\n                        \"input\": matching_filter,\n                    }\n                ),\n                \"createdAt\": self.time_now(),\n            }",
                                          "children": [
                                            {
                                              "value": "\"userId\": user_id",
                                              "children": [
                                                {
                                                  "value": "\"userId\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "userId",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "user_id",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"amount\": -cost",
                                              "children": [
                                                {
                                                  "value": "\"amount\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "amount",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "-cost",
                                                  "children": [
                                                    {
                                                      "value": "cost",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"type\": CreditTransactionType.USAGE",
                                              "children": [
                                                {
                                                  "value": "\"type\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "type",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "CreditTransactionType.USAGE",
                                                  "children": [
                                                    {
                                                      "value": "CreditTransactionType",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "USAGE",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"blockId\": block.id",
                                              "children": [
                                                {
                                                  "value": "\"blockId\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "blockId",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "block.id",
                                                  "children": [
                                                    {
                                                      "value": "block",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "id",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"metadata\": Json(\n                    {\n                        \"block\": block.name,\n                        \"input\": matching_filter,\n                    }\n                )",
                                              "children": [
                                                {
                                                  "value": "\"metadata\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "metadata",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "Json(\n                    {\n                        \"block\": block.name,\n                        \"input\": matching_filter,\n                    }\n                )",
                                                  "children": [
                                                    {
                                                      "value": "Json",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "(\n                    {\n                        \"block\": block.name,\n                        \"input\": matching_filter,\n                    }\n                )",
                                                      "children": [
                                                        {
                                                          "value": "{\n                        \"block\": block.name,\n                        \"input\": matching_filter,\n                    }",
                                                          "children": [
                                                            {
                                                              "value": "\"block\": block.name",
                                                              "children": [
                                                                {
                                                                  "value": "\"block\"",
                                                                  "children": [
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "block",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "block.name",
                                                                  "children": [
                                                                    {
                                                                      "value": "block",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "name",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "value": "\"input\": matching_filter",
                                                              "children": [
                                                                {
                                                                  "value": "\"input\"",
                                                                  "children": [
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "input",
                                                                      "children": []
                                                                    },
                                                                    {
                                                                      "value": "\"",
                                                                      "children": []
                                                                    }
                                                                  ]
                                                                },
                                                                {
                                                                  "value": "matching_filter",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"createdAt\": self.time_now()",
                                              "children": [
                                                {
                                                  "value": "\"createdAt\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "createdAt",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "self.time_now()",
                                                  "children": [
                                                    {
                                                      "value": "self.time_now",
                                                      "children": [
                                                        {
                                                          "value": "self",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "time_now",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "()",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "return cost",
                      "children": [
                        {
                          "value": "cost",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "async def top_up_credits(self, user_id: str, amount: int):\n        await CreditTransaction.prisma().create(\n            data={\n                \"userId\": user_id,\n                \"amount\": amount,\n                \"type\": CreditTransactionType.TOP_UP,\n                \"createdAt\": self.time_now(),\n            }\n        )",
              "children": [
                {
                  "value": "top_up_credits",
                  "children": []
                },
                {
                  "value": "(self, user_id: str, amount: int)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "user_id: str",
                      "children": [
                        {
                          "value": "user_id",
                          "children": []
                        },
                        {
                          "value": "str",
                          "children": [
                            {
                              "value": "str",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "amount: int",
                      "children": [
                        {
                          "value": "amount",
                          "children": []
                        },
                        {
                          "value": "int",
                          "children": [
                            {
                              "value": "int",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "await CreditTransaction.prisma().create(\n            data={\n                \"userId\": user_id,\n                \"amount\": amount,\n                \"type\": CreditTransactionType.TOP_UP,\n                \"createdAt\": self.time_now(),\n            }\n        )",
                  "children": [
                    {
                      "value": "await CreditTransaction.prisma().create(\n            data={\n                \"userId\": user_id,\n                \"amount\": amount,\n                \"type\": CreditTransactionType.TOP_UP,\n                \"createdAt\": self.time_now(),\n            }\n        )",
                      "children": [
                        {
                          "value": "await CreditTransaction.prisma().create(\n            data={\n                \"userId\": user_id,\n                \"amount\": amount,\n                \"type\": CreditTransactionType.TOP_UP,\n                \"createdAt\": self.time_now(),\n            }\n        )",
                          "children": [
                            {
                              "value": "CreditTransaction.prisma().create(\n            data={\n                \"userId\": user_id,\n                \"amount\": amount,\n                \"type\": CreditTransactionType.TOP_UP,\n                \"createdAt\": self.time_now(),\n            }\n        )",
                              "children": [
                                {
                                  "value": "CreditTransaction.prisma().create",
                                  "children": [
                                    {
                                      "value": "CreditTransaction.prisma()",
                                      "children": [
                                        {
                                          "value": "CreditTransaction.prisma",
                                          "children": [
                                            {
                                              "value": "CreditTransaction",
                                              "children": []
                                            },
                                            {
                                              "value": "prisma",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "()",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "create",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(\n            data={\n                \"userId\": user_id,\n                \"amount\": amount,\n                \"type\": CreditTransactionType.TOP_UP,\n                \"createdAt\": self.time_now(),\n            }\n        )",
                                  "children": [
                                    {
                                      "value": "data={\n                \"userId\": user_id,\n                \"amount\": amount,\n                \"type\": CreditTransactionType.TOP_UP,\n                \"createdAt\": self.time_now(),\n            }",
                                      "children": [
                                        {
                                          "value": "data",
                                          "children": []
                                        },
                                        {
                                          "value": "{\n                \"userId\": user_id,\n                \"amount\": amount,\n                \"type\": CreditTransactionType.TOP_UP,\n                \"createdAt\": self.time_now(),\n            }",
                                          "children": [
                                            {
                                              "value": "\"userId\": user_id",
                                              "children": [
                                                {
                                                  "value": "\"userId\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "userId",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "user_id",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"amount\": amount",
                                              "children": [
                                                {
                                                  "value": "\"amount\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "amount",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "amount",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"type\": CreditTransactionType.TOP_UP",
                                              "children": [
                                                {
                                                  "value": "\"type\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "type",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "CreditTransactionType.TOP_UP",
                                                  "children": [
                                                    {
                                                      "value": "CreditTransactionType",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "TOP_UP",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "value": "\"createdAt\": self.time_now()",
                                              "children": [
                                                {
                                                  "value": "\"createdAt\"",
                                                  "children": [
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "createdAt",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "value": "self.time_now()",
                                                  "children": [
                                                    {
                                                      "value": "self.time_now",
                                                      "children": [
                                                        {
                                                          "value": "self",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "time_now",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "()",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "class DisabledUserCredit(UserCreditBase):\n    async def get_or_refill_credit(self, *args, **kwargs) -> int:\n        return 0\n\n    async def spend_credits(self, *args, **kwargs) -> int:\n        return 0\n\n    async def top_up_credits(self, *args, **kwargs):\n        pass",
      "children": [
        {
          "value": "DisabledUserCredit",
          "children": []
        },
        {
          "value": "(UserCreditBase)",
          "children": [
            {
              "value": "UserCreditBase",
              "children": []
            }
          ]
        },
        {
          "value": "async def get_or_refill_credit(self, *args, **kwargs) -> int:\n        return 0\n\n    async def spend_credits(self, *args, **kwargs) -> int:\n        return 0\n\n    async def top_up_credits(self, *args, **kwargs):\n        pass",
          "children": [
            {
              "value": "async def get_or_refill_credit(self, *args, **kwargs) -> int:\n        return 0",
              "children": [
                {
                  "value": "get_or_refill_credit",
                  "children": []
                },
                {
                  "value": "(self, *args, **kwargs)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "*args",
                      "children": [
                        {
                          "value": "args",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "**kwargs",
                      "children": [
                        {
                          "value": "kwargs",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "return 0",
                  "children": [
                    {
                      "value": "return 0",
                      "children": [
                        {
                          "value": "0",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "async def spend_credits(self, *args, **kwargs) -> int:\n        return 0",
              "children": [
                {
                  "value": "spend_credits",
                  "children": []
                },
                {
                  "value": "(self, *args, **kwargs)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "*args",
                      "children": [
                        {
                          "value": "args",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "**kwargs",
                      "children": [
                        {
                          "value": "kwargs",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "return 0",
                  "children": [
                    {
                      "value": "return 0",
                      "children": [
                        {
                          "value": "0",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "async def top_up_credits(self, *args, **kwargs):\n        pass",
              "children": [
                {
                  "value": "top_up_credits",
                  "children": []
                },
                {
                  "value": "(self, *args, **kwargs)",
                  "children": [
                    {
                      "value": "self",
                      "children": []
                    },
                    {
                      "value": "*args",
                      "children": [
                        {
                          "value": "args",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "**kwargs",
                      "children": [
                        {
                          "value": "kwargs",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "pass",
                  "children": [
                    {
                      "value": "pass",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def get_user_credit_model() -> UserCreditBase:\n    if config.enable_credit.lower() == \"true\":\n        return UserCredit(config.num_user_credits_refill)\n    else:\n        return DisabledUserCredit(0)",
      "children": [
        {
          "value": "get_user_credit_model",
          "children": []
        },
        {
          "value": "()",
          "children": []
        },
        {
          "value": "UserCreditBase",
          "children": [
            {
              "value": "UserCreditBase",
              "children": []
            }
          ]
        },
        {
          "value": "if config.enable_credit.lower() == \"true\":\n        return UserCredit(config.num_user_credits_refill)\n    else:\n        return DisabledUserCredit(0)",
          "children": [
            {
              "value": "if config.enable_credit.lower() == \"true\":\n        return UserCredit(config.num_user_credits_refill)\n    else:\n        return DisabledUserCredit(0)",
              "children": [
                {
                  "value": "config.enable_credit.lower() == \"true\"",
                  "children": [
                    {
                      "value": "config.enable_credit.lower()",
                      "children": [
                        {
                          "value": "config.enable_credit.lower",
                          "children": [
                            {
                              "value": "config.enable_credit",
                              "children": [
                                {
                                  "value": "config",
                                  "children": []
                                },
                                {
                                  "value": "enable_credit",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "lower",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "()",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "\"true\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "true",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "return UserCredit(config.num_user_credits_refill)",
                  "children": [
                    {
                      "value": "return UserCredit(config.num_user_credits_refill)",
                      "children": [
                        {
                          "value": "UserCredit(config.num_user_credits_refill)",
                          "children": [
                            {
                              "value": "UserCredit",
                              "children": []
                            },
                            {
                              "value": "(config.num_user_credits_refill)",
                              "children": [
                                {
                                  "value": "config.num_user_credits_refill",
                                  "children": [
                                    {
                                      "value": "config",
                                      "children": []
                                    },
                                    {
                                      "value": "num_user_credits_refill",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "value": "else:\n        return DisabledUserCredit(0)",
                  "children": [
                    {
                      "value": "return DisabledUserCredit(0)",
                      "children": [
                        {
                          "value": "return DisabledUserCredit(0)",
                          "children": [
                            {
                              "value": "DisabledUserCredit(0)",
                              "children": [
                                {
                                  "value": "DisabledUserCredit",
                                  "children": []
                                },
                                {
                                  "value": "(0)",
                                  "children": [
                                    {
                                      "value": "0",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def get_block_costs() -> dict[str, list[BlockCost]]:\n    return {block().id: costs for block, costs in BLOCK_COSTS.items()}",
      "children": [
        {
          "value": "get_block_costs",
          "children": []
        },
        {
          "value": "()",
          "children": []
        },
        {
          "value": "dict[str, list[BlockCost]]",
          "children": [
            {
              "value": "dict[str, list[BlockCost]]",
              "children": [
                {
                  "value": "dict",
                  "children": []
                },
                {
                  "value": "[str, list[BlockCost]]",
                  "children": [
                    {
                      "value": "str",
                      "children": [
                        {
                          "value": "str",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "list[BlockCost]",
                      "children": [
                        {
                          "value": "list[BlockCost]",
                          "children": [
                            {
                              "value": "list",
                              "children": []
                            },
                            {
                              "value": "[BlockCost]",
                              "children": [
                                {
                                  "value": "BlockCost",
                                  "children": [
                                    {
                                      "value": "BlockCost",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "return {block().id: costs for block, costs in BLOCK_COSTS.items()}",
          "children": [
            {
              "value": "return {block().id: costs for block, costs in BLOCK_COSTS.items()}",
              "children": [
                {
                  "value": "{block().id: costs for block, costs in BLOCK_COSTS.items()}",
                  "children": [
                    {
                      "value": "block().id: costs",
                      "children": [
                        {
                          "value": "block().id",
                          "children": [
                            {
                              "value": "block()",
                              "children": [
                                {
                                  "value": "block",
                                  "children": []
                                },
                                {
                                  "value": "()",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "id",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "costs",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "for block, costs in BLOCK_COSTS.items()",
                      "children": [
                        {
                          "value": "block, costs",
                          "children": [
                            {
                              "value": "block",
                              "children": []
                            },
                            {
                              "value": "costs",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "BLOCK_COSTS.items()",
                          "children": [
                            {
                              "value": "BLOCK_COSTS.items",
                              "children": [
                                {
                                  "value": "BLOCK_COSTS",
                                  "children": []
                                },
                                {
                                  "value": "items",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "()",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}