{
  "value": "from __future__ import annotations\n\nfrom abc import abstractmethod\nfrom math import pi\nfrom typing import Protocol\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\nclass FilterType(Protocol):\n    @abstractmethod\n    def process(self, sample: float) -> float:\n        \"\"\"\n        Calculate y[n]\n\n        >>> issubclass(FilterType, Protocol)\n        True\n        \"\"\"\n\n\ndef get_bounds(\n    fft_results: np.ndarray, samplerate: int\n) -> tuple[int | float, int | float]:\n    \"\"\"\n    Get bounds for printing fft results\n\n    >>> import numpy\n    >>> array = numpy.linspace(-20.0, 20.0, 1000)\n    >>> get_bounds(array, 1000)\n    (-20, 20)\n    \"\"\"\n    lowest = min([-20, np.min(fft_results[1 : samplerate // 2 - 1])])\n    highest = max([20, np.max(fft_results[1 : samplerate // 2 - 1])])\n    return lowest, highest\n\n\ndef show_frequency_response(filter_type: FilterType, samplerate: int) -> None:\n    \"\"\"\n    Show frequency response of a filter\n\n    >>> from audio_filters.iir_filter import IIRFilter\n    >>> filt = IIRFilter(4)\n    >>> show_frequency_response(filt, 48000)\n    \"\"\"\n\n    size = 512\n    inputs = [1] + [0] * (size - 1)\n    outputs = [filter_type.process(item) for item in inputs]\n\n    filler = [0] * (samplerate - size)  # zero-padding\n    outputs += filler\n    fft_out = np.abs(np.fft.fft(outputs))\n    fft_db = 20 * np.log10(fft_out)\n\n    # Frequencies on log scale from 24 to nyquist frequency\n    plt.xlim(24, samplerate / 2 - 1)\n    plt.xlabel(\"Frequency (Hz)\")\n    plt.xscale(\"log\")\n\n    # Display within reasonable bounds\n    bounds = get_bounds(fft_db, samplerate)\n    plt.ylim(max([-80, bounds[0]]), min([80, bounds[1]]))\n    plt.ylabel(\"Gain (dB)\")\n\n    plt.plot(fft_db)\n    plt.show()\n\n\ndef show_phase_response(filter_type: FilterType, samplerate: int) -> None:\n    \"\"\"\n    Show phase response of a filter\n\n    >>> from audio_filters.iir_filter import IIRFilter\n    >>> filt = IIRFilter(4)\n    >>> show_phase_response(filt, 48000)\n    \"\"\"\n\n    size = 512\n    inputs = [1] + [0] * (size - 1)\n    outputs = [filter_type.process(item) for item in inputs]\n\n    filler = [0] * (samplerate - size)  # zero-padding\n    outputs += filler\n    fft_out = np.angle(np.fft.fft(outputs))\n\n    # Frequencies on log scale from 24 to nyquist frequency\n    plt.xlim(24, samplerate / 2 - 1)\n    plt.xlabel(\"Frequency (Hz)\")\n    plt.xscale(\"log\")\n\n    plt.ylim(-2 * pi, 2 * pi)\n    plt.ylabel(\"Phase shift (Radians)\")\n    plt.plot(np.unwrap(fft_out, -2 * pi))\n    plt.show()",
  "children": [
    {
      "value": "from __future__ import annotations",
      "children": [
        {
          "value": "annotations",
          "children": [
            {
              "value": "annotations",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from abc import abstractmethod",
      "children": [
        {
          "value": "abc",
          "children": [
            {
              "value": "abc",
              "children": []
            }
          ]
        },
        {
          "value": "abstractmethod",
          "children": [
            {
              "value": "abstractmethod",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from math import pi",
      "children": [
        {
          "value": "math",
          "children": [
            {
              "value": "math",
              "children": []
            }
          ]
        },
        {
          "value": "pi",
          "children": [
            {
              "value": "pi",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "from typing import Protocol",
      "children": [
        {
          "value": "typing",
          "children": [
            {
              "value": "typing",
              "children": []
            }
          ]
        },
        {
          "value": "Protocol",
          "children": [
            {
              "value": "Protocol",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import matplotlib.pyplot as plt",
      "children": [
        {
          "value": "matplotlib.pyplot as plt",
          "children": [
            {
              "value": "matplotlib.pyplot",
              "children": [
                {
                  "value": "matplotlib",
                  "children": []
                },
                {
                  "value": "pyplot",
                  "children": []
                }
              ]
            },
            {
              "value": "plt",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "import numpy as np",
      "children": [
        {
          "value": "numpy as np",
          "children": [
            {
              "value": "numpy",
              "children": [
                {
                  "value": "numpy",
                  "children": []
                }
              ]
            },
            {
              "value": "np",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "value": "class FilterType(Protocol):\n    @abstractmethod\n    def process(self, sample: float) -> float:\n        \"\"\"\n        Calculate y[n]\n\n        >>> issubclass(FilterType, Protocol)\n        True\n        \"\"\"",
      "children": [
        {
          "value": "FilterType",
          "children": []
        },
        {
          "value": "(Protocol)",
          "children": [
            {
              "value": "Protocol",
              "children": []
            }
          ]
        },
        {
          "value": "@abstractmethod\n    def process(self, sample: float) -> float:\n        \"\"\"\n        Calculate y[n]\n\n        >>> issubclass(FilterType, Protocol)\n        True\n        \"\"\"",
          "children": [
            {
              "value": "@abstractmethod\n    def process(self, sample: float) -> float:\n        \"\"\"\n        Calculate y[n]\n\n        >>> issubclass(FilterType, Protocol)\n        True\n        \"\"\"",
              "children": [
                {
                  "value": "@abstractmethod",
                  "children": [
                    {
                      "value": "abstractmethod",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "def process(self, sample: float) -> float:\n        \"\"\"\n        Calculate y[n]\n\n        >>> issubclass(FilterType, Protocol)\n        True\n        \"\"\"",
                  "children": [
                    {
                      "value": "process",
                      "children": []
                    },
                    {
                      "value": "(self, sample: float)",
                      "children": [
                        {
                          "value": "self",
                          "children": []
                        },
                        {
                          "value": "sample: float",
                          "children": [
                            {
                              "value": "sample",
                              "children": []
                            },
                            {
                              "value": "float",
                              "children": [
                                {
                                  "value": "float",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "float",
                      "children": [
                        {
                          "value": "float",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "\"\"\"\n        Calculate y[n]\n\n        >>> issubclass(FilterType, Protocol)\n        True\n        \"\"\"",
                      "children": [
                        {
                          "value": "\"\"\"\n        Calculate y[n]\n\n        >>> issubclass(FilterType, Protocol)\n        True\n        \"\"\"",
                          "children": [
                            {
                              "value": "\"\"\"\n        Calculate y[n]\n\n        >>> issubclass(FilterType, Protocol)\n        True\n        \"\"\"",
                              "children": [
                                {
                                  "value": "\"\"\"",
                                  "children": []
                                },
                                {
                                  "value": "Calculate y[n]\n\n        >>> issubclass(FilterType, Protocol)\n        True",
                                  "children": []
                                },
                                {
                                  "value": "\"\"\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def get_bounds(\n    fft_results: np.ndarray, samplerate: int\n) -> tuple[int | float, int | float]:\n    \"\"\"\n    Get bounds for printing fft results\n\n    >>> import numpy\n    >>> array = numpy.linspace(-20.0, 20.0, 1000)\n    >>> get_bounds(array, 1000)\n    (-20, 20)\n    \"\"\"\n    lowest = min([-20, np.min(fft_results[1 : samplerate // 2 - 1])])\n    highest = max([20, np.max(fft_results[1 : samplerate // 2 - 1])])\n    return lowest, highest",
      "children": [
        {
          "value": "get_bounds",
          "children": []
        },
        {
          "value": "(\n    fft_results: np.ndarray, samplerate: int\n)",
          "children": [
            {
              "value": "fft_results: np.ndarray",
              "children": [
                {
                  "value": "fft_results",
                  "children": []
                },
                {
                  "value": "np.ndarray",
                  "children": [
                    {
                      "value": "np.ndarray",
                      "children": [
                        {
                          "value": "np",
                          "children": []
                        },
                        {
                          "value": "ndarray",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "samplerate: int",
              "children": [
                {
                  "value": "samplerate",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "tuple[int | float, int | float]",
          "children": [
            {
              "value": "tuple[int | float, int | float]",
              "children": [
                {
                  "value": "tuple",
                  "children": []
                },
                {
                  "value": "[int | float, int | float]",
                  "children": [
                    {
                      "value": "int | float",
                      "children": [
                        {
                          "value": "int | float",
                          "children": [
                            {
                              "value": "int",
                              "children": []
                            },
                            {
                              "value": "float",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "value": "int | float",
                      "children": [
                        {
                          "value": "int | float",
                          "children": [
                            {
                              "value": "int",
                              "children": []
                            },
                            {
                              "value": "float",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "\"\"\"\n    Get bounds for printing fft results\n\n    >>> import numpy\n    >>> array = numpy.linspace(-20.0, 20.0, 1000)\n    >>> get_bounds(array, 1000)\n    (-20, 20)\n    \"\"\"\n    lowest = min([-20, np.min(fft_results[1 : samplerate // 2 - 1])])\n    highest = max([20, np.max(fft_results[1 : samplerate // 2 - 1])])\n    return lowest, highest",
          "children": [
            {
              "value": "\"\"\"\n    Get bounds for printing fft results\n\n    >>> import numpy\n    >>> array = numpy.linspace(-20.0, 20.0, 1000)\n    >>> get_bounds(array, 1000)\n    (-20, 20)\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    Get bounds for printing fft results\n\n    >>> import numpy\n    >>> array = numpy.linspace(-20.0, 20.0, 1000)\n    >>> get_bounds(array, 1000)\n    (-20, 20)\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Get bounds for printing fft results\n\n    >>> import numpy\n    >>> array = numpy.linspace(-20.0, 20.0, 1000)\n    >>> get_bounds(array, 1000)\n    (-20, 20)",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "lowest = min([-20, np.min(fft_results[1 : samplerate // 2 - 1])])",
              "children": [
                {
                  "value": "lowest = min([-20, np.min(fft_results[1 : samplerate // 2 - 1])])",
                  "children": [
                    {
                      "value": "lowest",
                      "children": []
                    },
                    {
                      "value": "min([-20, np.min(fft_results[1 : samplerate // 2 - 1])])",
                      "children": [
                        {
                          "value": "min",
                          "children": []
                        },
                        {
                          "value": "([-20, np.min(fft_results[1 : samplerate // 2 - 1])])",
                          "children": [
                            {
                              "value": "[-20, np.min(fft_results[1 : samplerate // 2 - 1])]",
                              "children": [
                                {
                                  "value": "-20",
                                  "children": [
                                    {
                                      "value": "20",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "np.min(fft_results[1 : samplerate // 2 - 1])",
                                  "children": [
                                    {
                                      "value": "np.min",
                                      "children": [
                                        {
                                          "value": "np",
                                          "children": []
                                        },
                                        {
                                          "value": "min",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(fft_results[1 : samplerate // 2 - 1])",
                                      "children": [
                                        {
                                          "value": "fft_results[1 : samplerate // 2 - 1]",
                                          "children": [
                                            {
                                              "value": "fft_results",
                                              "children": []
                                            },
                                            {
                                              "value": "1 : samplerate // 2 - 1",
                                              "children": [
                                                {
                                                  "value": "1",
                                                  "children": []
                                                },
                                                {
                                                  "value": "samplerate // 2 - 1",
                                                  "children": [
                                                    {
                                                      "value": "samplerate // 2",
                                                      "children": [
                                                        {
                                                          "value": "samplerate",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "2",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "1",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "highest = max([20, np.max(fft_results[1 : samplerate // 2 - 1])])",
              "children": [
                {
                  "value": "highest = max([20, np.max(fft_results[1 : samplerate // 2 - 1])])",
                  "children": [
                    {
                      "value": "highest",
                      "children": []
                    },
                    {
                      "value": "max([20, np.max(fft_results[1 : samplerate // 2 - 1])])",
                      "children": [
                        {
                          "value": "max",
                          "children": []
                        },
                        {
                          "value": "([20, np.max(fft_results[1 : samplerate // 2 - 1])])",
                          "children": [
                            {
                              "value": "[20, np.max(fft_results[1 : samplerate // 2 - 1])]",
                              "children": [
                                {
                                  "value": "20",
                                  "children": []
                                },
                                {
                                  "value": "np.max(fft_results[1 : samplerate // 2 - 1])",
                                  "children": [
                                    {
                                      "value": "np.max",
                                      "children": [
                                        {
                                          "value": "np",
                                          "children": []
                                        },
                                        {
                                          "value": "max",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(fft_results[1 : samplerate // 2 - 1])",
                                      "children": [
                                        {
                                          "value": "fft_results[1 : samplerate // 2 - 1]",
                                          "children": [
                                            {
                                              "value": "fft_results",
                                              "children": []
                                            },
                                            {
                                              "value": "1 : samplerate // 2 - 1",
                                              "children": [
                                                {
                                                  "value": "1",
                                                  "children": []
                                                },
                                                {
                                                  "value": "samplerate // 2 - 1",
                                                  "children": [
                                                    {
                                                      "value": "samplerate // 2",
                                                      "children": [
                                                        {
                                                          "value": "samplerate",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "2",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "value": "1",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "return lowest, highest",
              "children": [
                {
                  "value": "lowest, highest",
                  "children": [
                    {
                      "value": "lowest",
                      "children": []
                    },
                    {
                      "value": "highest",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def show_frequency_response(filter_type: FilterType, samplerate: int) -> None:\n    \"\"\"\n    Show frequency response of a filter\n\n    >>> from audio_filters.iir_filter import IIRFilter\n    >>> filt = IIRFilter(4)\n    >>> show_frequency_response(filt, 48000)\n    \"\"\"\n\n    size = 512\n    inputs = [1] + [0] * (size - 1)\n    outputs = [filter_type.process(item) for item in inputs]\n\n    filler = [0] * (samplerate - size)  # zero-padding\n    outputs += filler\n    fft_out = np.abs(np.fft.fft(outputs))\n    fft_db = 20 * np.log10(fft_out)\n\n    # Frequencies on log scale from 24 to nyquist frequency\n    plt.xlim(24, samplerate / 2 - 1)\n    plt.xlabel(\"Frequency (Hz)\")\n    plt.xscale(\"log\")\n\n    # Display within reasonable bounds\n    bounds = get_bounds(fft_db, samplerate)\n    plt.ylim(max([-80, bounds[0]]), min([80, bounds[1]]))\n    plt.ylabel(\"Gain (dB)\")\n\n    plt.plot(fft_db)\n    plt.show()",
      "children": [
        {
          "value": "show_frequency_response",
          "children": []
        },
        {
          "value": "(filter_type: FilterType, samplerate: int)",
          "children": [
            {
              "value": "filter_type: FilterType",
              "children": [
                {
                  "value": "filter_type",
                  "children": []
                },
                {
                  "value": "FilterType",
                  "children": [
                    {
                      "value": "FilterType",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "samplerate: int",
              "children": [
                {
                  "value": "samplerate",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "None",
          "children": [
            {
              "value": "None",
              "children": []
            }
          ]
        },
        {
          "value": "\"\"\"\n    Show frequency response of a filter\n\n    >>> from audio_filters.iir_filter import IIRFilter\n    >>> filt = IIRFilter(4)\n    >>> show_frequency_response(filt, 48000)\n    \"\"\"\n\n    size = 512\n    inputs = [1] + [0] * (size - 1)\n    outputs = [filter_type.process(item) for item in inputs]\n\n    filler = [0] * (samplerate - size)  # zero-padding\n    outputs += filler\n    fft_out = np.abs(np.fft.fft(outputs))\n    fft_db = 20 * np.log10(fft_out)\n\n    # Frequencies on log scale from 24 to nyquist frequency\n    plt.xlim(24, samplerate / 2 - 1)\n    plt.xlabel(\"Frequency (Hz)\")\n    plt.xscale(\"log\")\n\n    # Display within reasonable bounds\n    bounds = get_bounds(fft_db, samplerate)\n    plt.ylim(max([-80, bounds[0]]), min([80, bounds[1]]))\n    plt.ylabel(\"Gain (dB)\")\n\n    plt.plot(fft_db)\n    plt.show()",
          "children": [
            {
              "value": "\"\"\"\n    Show frequency response of a filter\n\n    >>> from audio_filters.iir_filter import IIRFilter\n    >>> filt = IIRFilter(4)\n    >>> show_frequency_response(filt, 48000)\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    Show frequency response of a filter\n\n    >>> from audio_filters.iir_filter import IIRFilter\n    >>> filt = IIRFilter(4)\n    >>> show_frequency_response(filt, 48000)\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Show frequency response of a filter\n\n    >>> from audio_filters.iir_filter import IIRFilter\n    >>> filt = IIRFilter(4)\n    >>> show_frequency_response(filt, 48000)",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "size = 512",
              "children": [
                {
                  "value": "size = 512",
                  "children": [
                    {
                      "value": "size",
                      "children": []
                    },
                    {
                      "value": "512",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "inputs = [1] + [0] * (size - 1)",
              "children": [
                {
                  "value": "inputs = [1] + [0] * (size - 1)",
                  "children": [
                    {
                      "value": "inputs",
                      "children": []
                    },
                    {
                      "value": "[1] + [0] * (size - 1)",
                      "children": [
                        {
                          "value": "[1]",
                          "children": [
                            {
                              "value": "1",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "[0] * (size - 1)",
                          "children": [
                            {
                              "value": "[0]",
                              "children": [
                                {
                                  "value": "0",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(size - 1)",
                              "children": [
                                {
                                  "value": "size - 1",
                                  "children": [
                                    {
                                      "value": "size",
                                      "children": []
                                    },
                                    {
                                      "value": "1",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "outputs = [filter_type.process(item) for item in inputs]",
              "children": [
                {
                  "value": "outputs = [filter_type.process(item) for item in inputs]",
                  "children": [
                    {
                      "value": "outputs",
                      "children": []
                    },
                    {
                      "value": "[filter_type.process(item) for item in inputs]",
                      "children": [
                        {
                          "value": "filter_type.process(item)",
                          "children": [
                            {
                              "value": "filter_type.process",
                              "children": [
                                {
                                  "value": "filter_type",
                                  "children": []
                                },
                                {
                                  "value": "process",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(item)",
                              "children": [
                                {
                                  "value": "item",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "for item in inputs",
                          "children": [
                            {
                              "value": "item",
                              "children": []
                            },
                            {
                              "value": "inputs",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "filler = [0] * (samplerate - size)",
              "children": [
                {
                  "value": "filler = [0] * (samplerate - size)",
                  "children": [
                    {
                      "value": "filler",
                      "children": []
                    },
                    {
                      "value": "[0] * (samplerate - size)",
                      "children": [
                        {
                          "value": "[0]",
                          "children": [
                            {
                              "value": "0",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "(samplerate - size)",
                          "children": [
                            {
                              "value": "samplerate - size",
                              "children": [
                                {
                                  "value": "samplerate",
                                  "children": []
                                },
                                {
                                  "value": "size",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "# zero-padding",
              "children": []
            },
            {
              "value": "outputs += filler",
              "children": [
                {
                  "value": "outputs += filler",
                  "children": [
                    {
                      "value": "outputs",
                      "children": []
                    },
                    {
                      "value": "filler",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "fft_out = np.abs(np.fft.fft(outputs))",
              "children": [
                {
                  "value": "fft_out = np.abs(np.fft.fft(outputs))",
                  "children": [
                    {
                      "value": "fft_out",
                      "children": []
                    },
                    {
                      "value": "np.abs(np.fft.fft(outputs))",
                      "children": [
                        {
                          "value": "np.abs",
                          "children": [
                            {
                              "value": "np",
                              "children": []
                            },
                            {
                              "value": "abs",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "(np.fft.fft(outputs))",
                          "children": [
                            {
                              "value": "np.fft.fft(outputs)",
                              "children": [
                                {
                                  "value": "np.fft.fft",
                                  "children": [
                                    {
                                      "value": "np.fft",
                                      "children": [
                                        {
                                          "value": "np",
                                          "children": []
                                        },
                                        {
                                          "value": "fft",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "fft",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(outputs)",
                                  "children": [
                                    {
                                      "value": "outputs",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "fft_db = 20 * np.log10(fft_out)",
              "children": [
                {
                  "value": "fft_db = 20 * np.log10(fft_out)",
                  "children": [
                    {
                      "value": "fft_db",
                      "children": []
                    },
                    {
                      "value": "20 * np.log10(fft_out)",
                      "children": [
                        {
                          "value": "20",
                          "children": []
                        },
                        {
                          "value": "np.log10(fft_out)",
                          "children": [
                            {
                              "value": "np.log10",
                              "children": [
                                {
                                  "value": "np",
                                  "children": []
                                },
                                {
                                  "value": "log10",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(fft_out)",
                              "children": [
                                {
                                  "value": "fft_out",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "# Frequencies on log scale from 24 to nyquist frequency",
              "children": []
            },
            {
              "value": "plt.xlim(24, samplerate / 2 - 1)",
              "children": [
                {
                  "value": "plt.xlim(24, samplerate / 2 - 1)",
                  "children": [
                    {
                      "value": "plt.xlim",
                      "children": [
                        {
                          "value": "plt",
                          "children": []
                        },
                        {
                          "value": "xlim",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "(24, samplerate / 2 - 1)",
                      "children": [
                        {
                          "value": "24",
                          "children": []
                        },
                        {
                          "value": "samplerate / 2 - 1",
                          "children": [
                            {
                              "value": "samplerate / 2",
                              "children": [
                                {
                                  "value": "samplerate",
                                  "children": []
                                },
                                {
                                  "value": "2",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "1",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "plt.xlabel(\"Frequency (Hz)\")",
              "children": [
                {
                  "value": "plt.xlabel(\"Frequency (Hz)\")",
                  "children": [
                    {
                      "value": "plt.xlabel",
                      "children": [
                        {
                          "value": "plt",
                          "children": []
                        },
                        {
                          "value": "xlabel",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "(\"Frequency (Hz)\")",
                      "children": [
                        {
                          "value": "\"Frequency (Hz)\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "Frequency (Hz)",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "plt.xscale(\"log\")",
              "children": [
                {
                  "value": "plt.xscale(\"log\")",
                  "children": [
                    {
                      "value": "plt.xscale",
                      "children": [
                        {
                          "value": "plt",
                          "children": []
                        },
                        {
                          "value": "xscale",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "(\"log\")",
                      "children": [
                        {
                          "value": "\"log\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "log",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "# Display within reasonable bounds",
              "children": []
            },
            {
              "value": "bounds = get_bounds(fft_db, samplerate)",
              "children": [
                {
                  "value": "bounds = get_bounds(fft_db, samplerate)",
                  "children": [
                    {
                      "value": "bounds",
                      "children": []
                    },
                    {
                      "value": "get_bounds(fft_db, samplerate)",
                      "children": [
                        {
                          "value": "get_bounds",
                          "children": []
                        },
                        {
                          "value": "(fft_db, samplerate)",
                          "children": [
                            {
                              "value": "fft_db",
                              "children": []
                            },
                            {
                              "value": "samplerate",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "plt.ylim(max([-80, bounds[0]]), min([80, bounds[1]]))",
              "children": [
                {
                  "value": "plt.ylim(max([-80, bounds[0]]), min([80, bounds[1]]))",
                  "children": [
                    {
                      "value": "plt.ylim",
                      "children": [
                        {
                          "value": "plt",
                          "children": []
                        },
                        {
                          "value": "ylim",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "(max([-80, bounds[0]]), min([80, bounds[1]]))",
                      "children": [
                        {
                          "value": "max([-80, bounds[0]])",
                          "children": [
                            {
                              "value": "max",
                              "children": []
                            },
                            {
                              "value": "([-80, bounds[0]])",
                              "children": [
                                {
                                  "value": "[-80, bounds[0]]",
                                  "children": [
                                    {
                                      "value": "-80",
                                      "children": [
                                        {
                                          "value": "80",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "bounds[0]",
                                      "children": [
                                        {
                                          "value": "bounds",
                                          "children": []
                                        },
                                        {
                                          "value": "0",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "min([80, bounds[1]])",
                          "children": [
                            {
                              "value": "min",
                              "children": []
                            },
                            {
                              "value": "([80, bounds[1]])",
                              "children": [
                                {
                                  "value": "[80, bounds[1]]",
                                  "children": [
                                    {
                                      "value": "80",
                                      "children": []
                                    },
                                    {
                                      "value": "bounds[1]",
                                      "children": [
                                        {
                                          "value": "bounds",
                                          "children": []
                                        },
                                        {
                                          "value": "1",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "plt.ylabel(\"Gain (dB)\")",
              "children": [
                {
                  "value": "plt.ylabel(\"Gain (dB)\")",
                  "children": [
                    {
                      "value": "plt.ylabel",
                      "children": [
                        {
                          "value": "plt",
                          "children": []
                        },
                        {
                          "value": "ylabel",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "(\"Gain (dB)\")",
                      "children": [
                        {
                          "value": "\"Gain (dB)\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "Gain (dB)",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "plt.plot(fft_db)",
              "children": [
                {
                  "value": "plt.plot(fft_db)",
                  "children": [
                    {
                      "value": "plt.plot",
                      "children": [
                        {
                          "value": "plt",
                          "children": []
                        },
                        {
                          "value": "plot",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "(fft_db)",
                      "children": [
                        {
                          "value": "fft_db",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "plt.show()",
              "children": [
                {
                  "value": "plt.show()",
                  "children": [
                    {
                      "value": "plt.show",
                      "children": [
                        {
                          "value": "plt",
                          "children": []
                        },
                        {
                          "value": "show",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "()",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "def show_phase_response(filter_type: FilterType, samplerate: int) -> None:\n    \"\"\"\n    Show phase response of a filter\n\n    >>> from audio_filters.iir_filter import IIRFilter\n    >>> filt = IIRFilter(4)\n    >>> show_phase_response(filt, 48000)\n    \"\"\"\n\n    size = 512\n    inputs = [1] + [0] * (size - 1)\n    outputs = [filter_type.process(item) for item in inputs]\n\n    filler = [0] * (samplerate - size)  # zero-padding\n    outputs += filler\n    fft_out = np.angle(np.fft.fft(outputs))\n\n    # Frequencies on log scale from 24 to nyquist frequency\n    plt.xlim(24, samplerate / 2 - 1)\n    plt.xlabel(\"Frequency (Hz)\")\n    plt.xscale(\"log\")\n\n    plt.ylim(-2 * pi, 2 * pi)\n    plt.ylabel(\"Phase shift (Radians)\")\n    plt.plot(np.unwrap(fft_out, -2 * pi))\n    plt.show()",
      "children": [
        {
          "value": "show_phase_response",
          "children": []
        },
        {
          "value": "(filter_type: FilterType, samplerate: int)",
          "children": [
            {
              "value": "filter_type: FilterType",
              "children": [
                {
                  "value": "filter_type",
                  "children": []
                },
                {
                  "value": "FilterType",
                  "children": [
                    {
                      "value": "FilterType",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "samplerate: int",
              "children": [
                {
                  "value": "samplerate",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "None",
          "children": [
            {
              "value": "None",
              "children": []
            }
          ]
        },
        {
          "value": "\"\"\"\n    Show phase response of a filter\n\n    >>> from audio_filters.iir_filter import IIRFilter\n    >>> filt = IIRFilter(4)\n    >>> show_phase_response(filt, 48000)\n    \"\"\"\n\n    size = 512\n    inputs = [1] + [0] * (size - 1)\n    outputs = [filter_type.process(item) for item in inputs]\n\n    filler = [0] * (samplerate - size)  # zero-padding\n    outputs += filler\n    fft_out = np.angle(np.fft.fft(outputs))\n\n    # Frequencies on log scale from 24 to nyquist frequency\n    plt.xlim(24, samplerate / 2 - 1)\n    plt.xlabel(\"Frequency (Hz)\")\n    plt.xscale(\"log\")\n\n    plt.ylim(-2 * pi, 2 * pi)\n    plt.ylabel(\"Phase shift (Radians)\")\n    plt.plot(np.unwrap(fft_out, -2 * pi))\n    plt.show()",
          "children": [
            {
              "value": "\"\"\"\n    Show phase response of a filter\n\n    >>> from audio_filters.iir_filter import IIRFilter\n    >>> filt = IIRFilter(4)\n    >>> show_phase_response(filt, 48000)\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    Show phase response of a filter\n\n    >>> from audio_filters.iir_filter import IIRFilter\n    >>> filt = IIRFilter(4)\n    >>> show_phase_response(filt, 48000)\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Show phase response of a filter\n\n    >>> from audio_filters.iir_filter import IIRFilter\n    >>> filt = IIRFilter(4)\n    >>> show_phase_response(filt, 48000)",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "size = 512",
              "children": [
                {
                  "value": "size = 512",
                  "children": [
                    {
                      "value": "size",
                      "children": []
                    },
                    {
                      "value": "512",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "inputs = [1] + [0] * (size - 1)",
              "children": [
                {
                  "value": "inputs = [1] + [0] * (size - 1)",
                  "children": [
                    {
                      "value": "inputs",
                      "children": []
                    },
                    {
                      "value": "[1] + [0] * (size - 1)",
                      "children": [
                        {
                          "value": "[1]",
                          "children": [
                            {
                              "value": "1",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "[0] * (size - 1)",
                          "children": [
                            {
                              "value": "[0]",
                              "children": [
                                {
                                  "value": "0",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(size - 1)",
                              "children": [
                                {
                                  "value": "size - 1",
                                  "children": [
                                    {
                                      "value": "size",
                                      "children": []
                                    },
                                    {
                                      "value": "1",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "outputs = [filter_type.process(item) for item in inputs]",
              "children": [
                {
                  "value": "outputs = [filter_type.process(item) for item in inputs]",
                  "children": [
                    {
                      "value": "outputs",
                      "children": []
                    },
                    {
                      "value": "[filter_type.process(item) for item in inputs]",
                      "children": [
                        {
                          "value": "filter_type.process(item)",
                          "children": [
                            {
                              "value": "filter_type.process",
                              "children": [
                                {
                                  "value": "filter_type",
                                  "children": []
                                },
                                {
                                  "value": "process",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(item)",
                              "children": [
                                {
                                  "value": "item",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "for item in inputs",
                          "children": [
                            {
                              "value": "item",
                              "children": []
                            },
                            {
                              "value": "inputs",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "filler = [0] * (samplerate - size)",
              "children": [
                {
                  "value": "filler = [0] * (samplerate - size)",
                  "children": [
                    {
                      "value": "filler",
                      "children": []
                    },
                    {
                      "value": "[0] * (samplerate - size)",
                      "children": [
                        {
                          "value": "[0]",
                          "children": [
                            {
                              "value": "0",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "(samplerate - size)",
                          "children": [
                            {
                              "value": "samplerate - size",
                              "children": [
                                {
                                  "value": "samplerate",
                                  "children": []
                                },
                                {
                                  "value": "size",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "# zero-padding",
              "children": []
            },
            {
              "value": "outputs += filler",
              "children": [
                {
                  "value": "outputs += filler",
                  "children": [
                    {
                      "value": "outputs",
                      "children": []
                    },
                    {
                      "value": "filler",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "fft_out = np.angle(np.fft.fft(outputs))",
              "children": [
                {
                  "value": "fft_out = np.angle(np.fft.fft(outputs))",
                  "children": [
                    {
                      "value": "fft_out",
                      "children": []
                    },
                    {
                      "value": "np.angle(np.fft.fft(outputs))",
                      "children": [
                        {
                          "value": "np.angle",
                          "children": [
                            {
                              "value": "np",
                              "children": []
                            },
                            {
                              "value": "angle",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "(np.fft.fft(outputs))",
                          "children": [
                            {
                              "value": "np.fft.fft(outputs)",
                              "children": [
                                {
                                  "value": "np.fft.fft",
                                  "children": [
                                    {
                                      "value": "np.fft",
                                      "children": [
                                        {
                                          "value": "np",
                                          "children": []
                                        },
                                        {
                                          "value": "fft",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "fft",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "value": "(outputs)",
                                  "children": [
                                    {
                                      "value": "outputs",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "# Frequencies on log scale from 24 to nyquist frequency",
              "children": []
            },
            {
              "value": "plt.xlim(24, samplerate / 2 - 1)",
              "children": [
                {
                  "value": "plt.xlim(24, samplerate / 2 - 1)",
                  "children": [
                    {
                      "value": "plt.xlim",
                      "children": [
                        {
                          "value": "plt",
                          "children": []
                        },
                        {
                          "value": "xlim",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "(24, samplerate / 2 - 1)",
                      "children": [
                        {
                          "value": "24",
                          "children": []
                        },
                        {
                          "value": "samplerate / 2 - 1",
                          "children": [
                            {
                              "value": "samplerate / 2",
                              "children": [
                                {
                                  "value": "samplerate",
                                  "children": []
                                },
                                {
                                  "value": "2",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "1",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "plt.xlabel(\"Frequency (Hz)\")",
              "children": [
                {
                  "value": "plt.xlabel(\"Frequency (Hz)\")",
                  "children": [
                    {
                      "value": "plt.xlabel",
                      "children": [
                        {
                          "value": "plt",
                          "children": []
                        },
                        {
                          "value": "xlabel",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "(\"Frequency (Hz)\")",
                      "children": [
                        {
                          "value": "\"Frequency (Hz)\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "Frequency (Hz)",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "plt.xscale(\"log\")",
              "children": [
                {
                  "value": "plt.xscale(\"log\")",
                  "children": [
                    {
                      "value": "plt.xscale",
                      "children": [
                        {
                          "value": "plt",
                          "children": []
                        },
                        {
                          "value": "xscale",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "(\"log\")",
                      "children": [
                        {
                          "value": "\"log\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "log",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "plt.ylim(-2 * pi, 2 * pi)",
              "children": [
                {
                  "value": "plt.ylim(-2 * pi, 2 * pi)",
                  "children": [
                    {
                      "value": "plt.ylim",
                      "children": [
                        {
                          "value": "plt",
                          "children": []
                        },
                        {
                          "value": "ylim",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "(-2 * pi, 2 * pi)",
                      "children": [
                        {
                          "value": "-2 * pi",
                          "children": [
                            {
                              "value": "-2",
                              "children": [
                                {
                                  "value": "2",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "pi",
                              "children": []
                            }
                          ]
                        },
                        {
                          "value": "2 * pi",
                          "children": [
                            {
                              "value": "2",
                              "children": []
                            },
                            {
                              "value": "pi",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "plt.ylabel(\"Phase shift (Radians)\")",
              "children": [
                {
                  "value": "plt.ylabel(\"Phase shift (Radians)\")",
                  "children": [
                    {
                      "value": "plt.ylabel",
                      "children": [
                        {
                          "value": "plt",
                          "children": []
                        },
                        {
                          "value": "ylabel",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "(\"Phase shift (Radians)\")",
                      "children": [
                        {
                          "value": "\"Phase shift (Radians)\"",
                          "children": [
                            {
                              "value": "\"",
                              "children": []
                            },
                            {
                              "value": "Phase shift (Radians)",
                              "children": []
                            },
                            {
                              "value": "\"",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "plt.plot(np.unwrap(fft_out, -2 * pi))",
              "children": [
                {
                  "value": "plt.plot(np.unwrap(fft_out, -2 * pi))",
                  "children": [
                    {
                      "value": "plt.plot",
                      "children": [
                        {
                          "value": "plt",
                          "children": []
                        },
                        {
                          "value": "plot",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "(np.unwrap(fft_out, -2 * pi))",
                      "children": [
                        {
                          "value": "np.unwrap(fft_out, -2 * pi)",
                          "children": [
                            {
                              "value": "np.unwrap",
                              "children": [
                                {
                                  "value": "np",
                                  "children": []
                                },
                                {
                                  "value": "unwrap",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "(fft_out, -2 * pi)",
                              "children": [
                                {
                                  "value": "fft_out",
                                  "children": []
                                },
                                {
                                  "value": "-2 * pi",
                                  "children": [
                                    {
                                      "value": "-2",
                                      "children": [
                                        {
                                          "value": "2",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "value": "pi",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "plt.show()",
              "children": [
                {
                  "value": "plt.show()",
                  "children": [
                    {
                      "value": "plt.show",
                      "children": [
                        {
                          "value": "plt",
                          "children": []
                        },
                        {
                          "value": "show",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "()",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}