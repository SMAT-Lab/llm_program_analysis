{
  "value": "# Information on 2's complement: https://en.wikipedia.org/wiki/Two%27s_complement\n\n\ndef twos_complement(number: int) -> str:\n    \"\"\"\n    Take in a negative integer 'number'.\n    Return the two's complement representation of 'number'.\n\n    >>> twos_complement(0)\n    '0b0'\n    >>> twos_complement(-1)\n    '0b11'\n    >>> twos_complement(-5)\n    '0b1011'\n    >>> twos_complement(-17)\n    '0b101111'\n    >>> twos_complement(-207)\n    '0b100110001'\n    >>> twos_complement(1)\n    Traceback (most recent call last):\n        ...\n    ValueError: input must be a negative integer\n    \"\"\"\n    if number > 0:\n        raise ValueError(\"input must be a negative integer\")\n    binary_number_length = len(bin(number)[3:])\n    twos_complement_number = bin(abs(number) - (1 << binary_number_length))[3:]\n    twos_complement_number = (\n        (\n            \"1\"\n            + \"0\" * (binary_number_length - len(twos_complement_number))\n            + twos_complement_number\n        )\n        if number < 0\n        else \"0\"\n    )\n    return \"0b\" + twos_complement_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
  "children": [
    {
      "value": "# Information on 2's complement: https://en.wikipedia.org/wiki/Two%27s_complement",
      "children": []
    },
    {
      "value": "def twos_complement(number: int) -> str:\n    \"\"\"\n    Take in a negative integer 'number'.\n    Return the two's complement representation of 'number'.\n\n    >>> twos_complement(0)\n    '0b0'\n    >>> twos_complement(-1)\n    '0b11'\n    >>> twos_complement(-5)\n    '0b1011'\n    >>> twos_complement(-17)\n    '0b101111'\n    >>> twos_complement(-207)\n    '0b100110001'\n    >>> twos_complement(1)\n    Traceback (most recent call last):\n        ...\n    ValueError: input must be a negative integer\n    \"\"\"\n    if number > 0:\n        raise ValueError(\"input must be a negative integer\")\n    binary_number_length = len(bin(number)[3:])\n    twos_complement_number = bin(abs(number) - (1 << binary_number_length))[3:]\n    twos_complement_number = (\n        (\n            \"1\"\n            + \"0\" * (binary_number_length - len(twos_complement_number))\n            + twos_complement_number\n        )\n        if number < 0\n        else \"0\"\n    )\n    return \"0b\" + twos_complement_number",
      "children": [
        {
          "value": "twos_complement",
          "children": []
        },
        {
          "value": "(number: int)",
          "children": [
            {
              "value": "number: int",
              "children": [
                {
                  "value": "number",
                  "children": []
                },
                {
                  "value": "int",
                  "children": [
                    {
                      "value": "int",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "value": "str",
          "children": [
            {
              "value": "str",
              "children": []
            }
          ]
        },
        {
          "value": "\"\"\"\n    Take in a negative integer 'number'.\n    Return the two's complement representation of 'number'.\n\n    >>> twos_complement(0)\n    '0b0'\n    >>> twos_complement(-1)\n    '0b11'\n    >>> twos_complement(-5)\n    '0b1011'\n    >>> twos_complement(-17)\n    '0b101111'\n    >>> twos_complement(-207)\n    '0b100110001'\n    >>> twos_complement(1)\n    Traceback (most recent call last):\n        ...\n    ValueError: input must be a negative integer\n    \"\"\"\n    if number > 0:\n        raise ValueError(\"input must be a negative integer\")\n    binary_number_length = len(bin(number)[3:])\n    twos_complement_number = bin(abs(number) - (1 << binary_number_length))[3:]\n    twos_complement_number = (\n        (\n            \"1\"\n            + \"0\" * (binary_number_length - len(twos_complement_number))\n            + twos_complement_number\n        )\n        if number < 0\n        else \"0\"\n    )\n    return \"0b\" + twos_complement_number",
          "children": [
            {
              "value": "\"\"\"\n    Take in a negative integer 'number'.\n    Return the two's complement representation of 'number'.\n\n    >>> twos_complement(0)\n    '0b0'\n    >>> twos_complement(-1)\n    '0b11'\n    >>> twos_complement(-5)\n    '0b1011'\n    >>> twos_complement(-17)\n    '0b101111'\n    >>> twos_complement(-207)\n    '0b100110001'\n    >>> twos_complement(1)\n    Traceback (most recent call last):\n        ...\n    ValueError: input must be a negative integer\n    \"\"\"",
              "children": [
                {
                  "value": "\"\"\"\n    Take in a negative integer 'number'.\n    Return the two's complement representation of 'number'.\n\n    >>> twos_complement(0)\n    '0b0'\n    >>> twos_complement(-1)\n    '0b11'\n    >>> twos_complement(-5)\n    '0b1011'\n    >>> twos_complement(-17)\n    '0b101111'\n    >>> twos_complement(-207)\n    '0b100110001'\n    >>> twos_complement(1)\n    Traceback (most recent call last):\n        ...\n    ValueError: input must be a negative integer\n    \"\"\"",
                  "children": [
                    {
                      "value": "\"\"\"",
                      "children": []
                    },
                    {
                      "value": "Take in a negative integer 'number'.\n    Return the two's complement representation of 'number'.\n\n    >>> twos_complement(0)\n    '0b0'\n    >>> twos_complement(-1)\n    '0b11'\n    >>> twos_complement(-5)\n    '0b1011'\n    >>> twos_complement(-17)\n    '0b101111'\n    >>> twos_complement(-207)\n    '0b100110001'\n    >>> twos_complement(1)\n    Traceback (most recent call last):\n        ...\n    ValueError: input must be a negative integer",
                      "children": []
                    },
                    {
                      "value": "\"\"\"",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "if number > 0:\n        raise ValueError(\"input must be a negative integer\")",
              "children": [
                {
                  "value": "number > 0",
                  "children": [
                    {
                      "value": "number",
                      "children": []
                    },
                    {
                      "value": "0",
                      "children": []
                    }
                  ]
                },
                {
                  "value": "raise ValueError(\"input must be a negative integer\")",
                  "children": [
                    {
                      "value": "raise ValueError(\"input must be a negative integer\")",
                      "children": [
                        {
                          "value": "ValueError(\"input must be a negative integer\")",
                          "children": [
                            {
                              "value": "ValueError",
                              "children": []
                            },
                            {
                              "value": "(\"input must be a negative integer\")",
                              "children": [
                                {
                                  "value": "\"input must be a negative integer\"",
                                  "children": [
                                    {
                                      "value": "\"",
                                      "children": []
                                    },
                                    {
                                      "value": "input must be a negative integer",
                                      "children": []
                                    },
                                    {
                                      "value": "\"",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "binary_number_length = len(bin(number)[3:])",
              "children": [
                {
                  "value": "binary_number_length = len(bin(number)[3:])",
                  "children": [
                    {
                      "value": "binary_number_length",
                      "children": []
                    },
                    {
                      "value": "len(bin(number)[3:])",
                      "children": [
                        {
                          "value": "len",
                          "children": []
                        },
                        {
                          "value": "(bin(number)[3:])",
                          "children": [
                            {
                              "value": "bin(number)[3:]",
                              "children": [
                                {
                                  "value": "bin(number)",
                                  "children": [
                                    {
                                      "value": "bin",
                                      "children": []
                                    },
                                    {
                                      "value": "(number)",
                                      "children": [
                                        {
                                          "value": "number",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "value": "3:",
                                  "children": [
                                    {
                                      "value": "3",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "twos_complement_number = bin(abs(number) - (1 << binary_number_length))[3:]",
              "children": [
                {
                  "value": "twos_complement_number = bin(abs(number) - (1 << binary_number_length))[3:]",
                  "children": [
                    {
                      "value": "twos_complement_number",
                      "children": []
                    },
                    {
                      "value": "bin(abs(number) - (1 << binary_number_length))[3:]",
                      "children": [
                        {
                          "value": "bin(abs(number) - (1 << binary_number_length))",
                          "children": [
                            {
                              "value": "bin",
                              "children": []
                            },
                            {
                              "value": "(abs(number) - (1 << binary_number_length))",
                              "children": [
                                {
                                  "value": "abs(number) - (1 << binary_number_length)",
                                  "children": [
                                    {
                                      "value": "abs(number)",
                                      "children": [
                                        {
                                          "value": "abs",
                                          "children": []
                                        },
                                        {
                                          "value": "(number)",
                                          "children": [
                                            {
                                              "value": "number",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "(1 << binary_number_length)",
                                      "children": [
                                        {
                                          "value": "1 << binary_number_length",
                                          "children": [
                                            {
                                              "value": "1",
                                              "children": []
                                            },
                                            {
                                              "value": "binary_number_length",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "value": "3:",
                          "children": [
                            {
                              "value": "3",
                              "children": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "twos_complement_number = (\n        (\n            \"1\"\n            + \"0\" * (binary_number_length - len(twos_complement_number))\n            + twos_complement_number\n        )\n        if number < 0\n        else \"0\"\n    )",
              "children": [
                {
                  "value": "twos_complement_number = (\n        (\n            \"1\"\n            + \"0\" * (binary_number_length - len(twos_complement_number))\n            + twos_complement_number\n        )\n        if number < 0\n        else \"0\"\n    )",
                  "children": [
                    {
                      "value": "twos_complement_number",
                      "children": []
                    },
                    {
                      "value": "(\n        (\n            \"1\"\n            + \"0\" * (binary_number_length - len(twos_complement_number))\n            + twos_complement_number\n        )\n        if number < 0\n        else \"0\"\n    )",
                      "children": [
                        {
                          "value": "(\n            \"1\"\n            + \"0\" * (binary_number_length - len(twos_complement_number))\n            + twos_complement_number\n        )\n        if number < 0\n        else \"0\"",
                          "children": [
                            {
                              "value": "(\n            \"1\"\n            + \"0\" * (binary_number_length - len(twos_complement_number))\n            + twos_complement_number\n        )",
                              "children": [
                                {
                                  "value": "\"1\"\n            + \"0\" * (binary_number_length - len(twos_complement_number))\n            + twos_complement_number",
                                  "children": [
                                    {
                                      "value": "\"1\"\n            + \"0\" * (binary_number_length - len(twos_complement_number))",
                                      "children": [
                                        {
                                          "value": "\"1\"",
                                          "children": [
                                            {
                                              "value": "\"",
                                              "children": []
                                            },
                                            {
                                              "value": "1",
                                              "children": []
                                            },
                                            {
                                              "value": "\"",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "value": "\"0\" * (binary_number_length - len(twos_complement_number))",
                                          "children": [
                                            {
                                              "value": "\"0\"",
                                              "children": [
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                },
                                                {
                                                  "value": "0",
                                                  "children": []
                                                },
                                                {
                                                  "value": "\"",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "value": "(binary_number_length - len(twos_complement_number))",
                                              "children": [
                                                {
                                                  "value": "binary_number_length - len(twos_complement_number)",
                                                  "children": [
                                                    {
                                                      "value": "binary_number_length",
                                                      "children": []
                                                    },
                                                    {
                                                      "value": "len(twos_complement_number)",
                                                      "children": [
                                                        {
                                                          "value": "len",
                                                          "children": []
                                                        },
                                                        {
                                                          "value": "(twos_complement_number)",
                                                          "children": [
                                                            {
                                                              "value": "twos_complement_number",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "value": "twos_complement_number",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "value": "number < 0",
                              "children": [
                                {
                                  "value": "number",
                                  "children": []
                                },
                                {
                                  "value": "0",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "value": "\"0\"",
                              "children": [
                                {
                                  "value": "\"",
                                  "children": []
                                },
                                {
                                  "value": "0",
                                  "children": []
                                },
                                {
                                  "value": "\"",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "value": "return \"0b\" + twos_complement_number",
              "children": [
                {
                  "value": "\"0b\" + twos_complement_number",
                  "children": [
                    {
                      "value": "\"0b\"",
                      "children": [
                        {
                          "value": "\"",
                          "children": []
                        },
                        {
                          "value": "0b",
                          "children": []
                        },
                        {
                          "value": "\"",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "twos_complement_number",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "value": "if __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()",
      "children": [
        {
          "value": "__name__ == \"__main__\"",
          "children": [
            {
              "value": "__name__",
              "children": []
            },
            {
              "value": "\"__main__\"",
              "children": [
                {
                  "value": "\"",
                  "children": []
                },
                {
                  "value": "__main__",
                  "children": []
                },
                {
                  "value": "\"",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "value": "import doctest\n\n    doctest.testmod()",
          "children": [
            {
              "value": "import doctest",
              "children": [
                {
                  "value": "doctest",
                  "children": [
                    {
                      "value": "doctest",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "value": "doctest.testmod()",
              "children": [
                {
                  "value": "doctest.testmod()",
                  "children": [
                    {
                      "value": "doctest.testmod",
                      "children": [
                        {
                          "value": "doctest",
                          "children": []
                        },
                        {
                          "value": "testmod",
                          "children": []
                        }
                      ]
                    },
                    {
                      "value": "()",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}